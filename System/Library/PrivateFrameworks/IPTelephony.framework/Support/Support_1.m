void sub_1BEE6CD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>(uint64_t *a1, _BYTE *a2)
{
  _BYTE *v4;
  uint64_t v5;

  v4 = (_BYTE *)operator new();
  *v4 = *a2;
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x1C3B87100](v5, 0x1000C4077774924);
  return a1;
}

uint64_t *AriSdk::Tlv<unsigned short>::operator=<unsigned long,void>(uint64_t *a1, _QWORD *a2)
{
  _WORD *v4;
  uint64_t v5;

  v4 = (_WORD *)operator new();
  *v4 = *a2;
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x1C3B87100](v5, 0x1000C40BDFB0063);
  return a1;
}

char **AriSdk::TlvArray<unsigned char,2001ul>::operator=(char **a1, char **a2)
{
  char *v4;
  char *v5;
  const char *v7;
  void *p_p;
  void *__p;
  char v11;

  v4 = *a2;
  v5 = a2[1];
  if ((unint64_t)(v5 - v4) < 0x7D2)
  {
    if (a1 != a2)
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, v4, v5, v5 - v4);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/ee8c6483-5bc6-11ef-a57d-0a3c3d30a6d7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", v5);
    if (v11 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%d) max(%d)", v7, p_p, 349, a1, a2[1] - *a2, 2001);
    if (v11 < 0)
      operator delete(__p);
  }
  return a1;
}

void sub_1BEE6CF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(char *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  char v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BEE6CF90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::__append(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    v13 = &v7[a2];
    do
    {
      *v7++ = *a3;
      --v4;
    }
    while (v4);
    a1[1] = v13;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

uint64_t ___ZN12IBISipLogger4sendIN6AriSdk14ARI_AriACK_SDKENS1_38ARI_IBISipMsgInjectToCpIMSTraceReq_SDKEEE9ImsResultRT0__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD v5[4];
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  AriSdk::ARI_AriACK_SDK::ARI_AriACK_SDK((AriSdk::ARI_AriACK_SDK *)v5, a2);
  if (AriSdk::ARI_AriACK_SDK::unpack((AriSdk::ARI_AriACK_SDK *)v5))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Couldn't unpack ARI result", 26);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
  }
  return MEMORY[0x1C3B86800](v5);
}

void *ice::detail::wrapCallback<void>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke;
  aBlock[3] = &unk_1E78BDF70;
  aBlock[4] = a1;
  result = _Block_copy(aBlock);
  *a2 = result;
  return result;
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

uint64_t ___ZN12IBISipLogger4sendIN6AriSdk14ARI_AriACK_SDKENS1_36ARI_IBISipMessageInjectToCpTrace_SDKEEE9ImsResultRT0__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD v5[4];
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  AriSdk::ARI_AriACK_SDK::ARI_AriACK_SDK((AriSdk::ARI_AriACK_SDK *)v5, a2);
  if (AriSdk::ARI_AriACK_SDK::unpack((AriSdk::ARI_AriACK_SDK *)v5))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Couldn't unpack ARI result", 26);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
  }
  return MEMORY[0x1C3B86800](v5);
}

void ice::Client::send<AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK,void({block_pointer})(unsigned char *,unsigned int)>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *aBlock;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  int v14;

  v13 = 0;
  ice::detail::wrapCallback<void>(*a3, &v13);
  v14 = 0;
  if (!*(_QWORD *)(a2 + 64))
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a2 + 64), &v14);
  *(_QWORD *)(a4 + 32) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v11, (_QWORD *)(a1 + 8));
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  aBlock = v13;
  v13 = 0;
  ice::SendMsgBaseProxy::callback();
  if (aBlock)
    _Block_release(aBlock);
  if (v13)
    _Block_release(v13);
}

void sub_1BEE6D4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, char a11, uint64_t a12, void *a13)
{
  uint64_t v13;

  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x1C3B86680](v13);
  if (a13)
    _Block_release(a13);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBISipLogger4sendIN6AriSdk54ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDKENS1_52ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDKEEE9ImsResultRT0__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD v5[5];

  v2 = *(_QWORD *)(a1 + 32);
  memset(v5, 0, sizeof(v5));
  AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK *)v5, a2);
  if (AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK::unpack((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK *)v5))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Couldn't unpack ARI result", 26);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
  }
  return MEMORY[0x1C3B86C2C](v5);
}

uint64_t ___ZN12IBISipLogger4sendIN6AriSdk46ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDKENS1_44ARI_IBINetDcImsRegistrationStatusInfoReq_SDKEEE9ImsResultRT0__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD v5[5];

  v2 = *(_QWORD *)(a1 + 32);
  memset(v5, 0, sizeof(v5));
  AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK((AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK *)v5, a2);
  if (AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK::unpack((AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK *)v5))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Couldn't unpack ARI result", 26);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
  }
  return MEMORY[0x1C3B86BF0](v5);
}

uint64_t SipInsecureTransportGroup::SipInsecureTransportGroup(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  *(_QWORD *)a1 = &off_1E78B7B60;
  v3 = (std::__shared_weak_count *)a2[1];
  v17 = *a2;
  v18 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SipTransportGroup::SipTransportGroup((uint64_t *)a1, (uint64_t *)off_1E78BE280, &v17);
  v6 = v18;
  if (v18)
  {
    v7 = (unint64_t *)&v18->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)a1 = &off_1E78BE0D8;
  *(_QWORD *)(a1 + 72) = &unk_1E78BE228;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_WORD *)(a1 + 242) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  v16 = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 208, &v16);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v16 = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 224, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_BYTE *)(a1 + 240) = 0;
  return a1;
}

void sub_1BEE6D7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipInsecureTransportGroup::~SipInsecureTransportGroup(SipInsecureTransportGroup *this)
{
  *(_QWORD *)this = &off_1E78BE0D8;
  *((_QWORD *)this + 9) = &unk_1E78BE228;
  SipInsecureTransportGroup::transportLayerRequestedClose(this);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  SipTransportGroup::~SipTransportGroup(this, (uint64_t *)off_1E78BE280);
}

{
  SipInsecureTransportGroup::~SipInsecureTransportGroup(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipInsecureTransportGroup::~SipInsecureTransportGroup(SipInsecureTransportGroup *this)
{
  SipInsecureTransportGroup::~SipInsecureTransportGroup((SipInsecureTransportGroup *)((char *)this - 72));
}

{
  SipInsecureTransportGroup::~SipInsecureTransportGroup((SipInsecureTransportGroup *)((char *)this - 72));
  JUMPOUT(0x1C3B87100);
}

void SipInsecureTransportGroup::loggableName(SipInsecureTransportGroup *this@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v13, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v13 + 1), (uint64_t)"InsecureTransport [", 19);
  BYTE1(v14) = 0;
  (*(void (**)(uint64_t *__return_ptr, SipInsecureTransportGroup *))(*(_QWORD *)this + 192))(&v11, this);
  v5 = v11;
  v4 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
        goto LABEL_6;
LABEL_12:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v13 + 1), (uint64_t)"Uninitialized", 13);
      BYTE1(v14) = 0;
      goto LABEL_13;
    }
  }
  if (!v5)
    goto LABEL_12;
LABEL_6:
  (*(void (**)(uint64_t *__return_ptr, SipInsecureTransportGroup *))(*(_QWORD *)this + 192))(&v11, this);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 40))(v11, &v13);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_13:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v13 + 1), (uint64_t)"]", 1);
  BYTE1(v14) = 0;
  ImsStringOutStream::loggableStr((ImsStringOutStream *)&v13, a2);
  *(_QWORD *)&v13 = &off_1E78D7A10;
  if ((_BYTE)v14)
  {
    if (*((_QWORD *)&v13 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v13 + 1) + 8))(*((_QWORD *)&v13 + 1));
  }
}

void sub_1BEE6DA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(ImsOutStream *__hidden this), uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a11 = &off_1E78D7A10;
  if (a13)
  {
    if (a12)
      (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

void SipInsecureTransportGroup::initialize(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  const ImsResult *v22;
  char v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  SipTcpTransport *v64;
  std::__shared_weak_count *v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  void *__p[2];
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  _BYTE v72[72];
  uint64_t v73;
  std::__shared_weak_count *v74;

  v73 = 0;
  v74 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 200);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_17;
  }
  v9 = std::__shared_weak_count::lock(v6);
  v74 = v9;
  if (!v9 || (v10 = *(_QWORD *)(a1 + 192), (v73 = v10) == 0))
  {
LABEL_17:
    memset(&v72[24], 0, 48);
    *(_QWORD *)v72 = &off_1E78B7238;
    *(_QWORD *)&v72[8] = &_bambiDomain;
    *(_DWORD *)&v72[16] = 0x40000000;
    v22 = (const ImsResult *)ImsResult::operator<<<char [33]>((uint64_t)v72, "No transport layer to initialize");
    ImsResult::ImsResult((ImsResult *)a4, v22);
    ImsResult::~ImsResult((ImsResult *)v72);
    if (!v9)
      return;
    goto LABEL_81;
  }
  v70 = 0;
  v71 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 32))(&v70);
  __p[0] = 0;
  __p[1] = 0;
  v69 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "67A03811-DB0A-594E-C2AE-8B0517EDF26F");
  v11 = *(std::__shared_weak_count **)(a1 + 200);
  if (!v11)
    goto LABEL_28;
  v12 = *(_QWORD *)(a1 + 192);
  p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = std::__shared_weak_count::lock(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v15)
    goto LABEL_28;
  if (!v12)
    goto LABEL_19;
  v16 = *(std::__shared_weak_count **)(v12 + 16);
  if (!v16)
    goto LABEL_19;
  v17 = std::__shared_weak_count::lock(v16);
  if (!v17)
    goto LABEL_19;
  v18 = v17;
  v19 = *(_QWORD *)(v12 + 8);
  if (v19)
  {
    LOBYTE(v12) = *(_BYTE *)(v19 + 2657) != 0;
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (v21)
      goto LABEL_90;
  }
  else
  {
    v59 = (unint64_t *)&v17->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (v60)
      goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v18);
  if (!v19)
  {
LABEL_19:
    v23 = 1;
    goto LABEL_20;
  }
LABEL_90:
  v23 = 0;
LABEL_20:
  v24 = (unint64_t *)&v15->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (!(v23 & 1 | ((v12 & 1) == 0)))
  {
    ims::convertBundleIdToUuid(v72);
    if (SHIBYTE(v69) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)v72;
    v69 = *(_QWORD *)&v72[16];
  }
LABEL_28:
  v66 = 0;
  v67 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v72, (_QWORD *)(a1 + 176));
  v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 112))(v10);
  std::allocate_shared[abi:ne180100]<SipUdpTransport,std::allocator<SipUdpTransport>,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,void>((uint64_t *)v72, &v61, &v66);
  v26 = *(std::__shared_weak_count **)&v72[8];
  if (*(_QWORD *)&v72[8])
  {
    v27 = (unint64_t *)(*(_QWORD *)&v72[8] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  memset(v72, 0, sizeof(v72));
  SipUdpTransport::initialize(v66, (uint64_t)&v70, (uint64_t)__p, (uint64_t)a3, (uint64_t)v72);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)&v72[8] + 24))(*(_QWORD *)&v72[8], *(unsigned int *)&v72[16]))
  {
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 72), (ImsResult *)v72);
    ImsResult::ImsResult((ImsResult *)a4, (const ImsResult *)v72);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*v66 + 16))(&v61);
    v30 = v61;
    v29 = v62;
    if (v62)
    {
      v31 = (unint64_t *)&v62->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v30)
    {
      v33 = v70;
      (*(void (**)(uint64_t *__return_ptr))(*v66 + 16))(&v61);
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 56))(v61);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 64))(v33, v34);
      v35 = v62;
      if (v62)
      {
        v36 = (unint64_t *)&v62->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    v38 = v73;
    if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 16))(v73) + 436))
      v39 = 0;
    else
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 56))(v70);
    v40 = *(_QWORD *)(a1 + 72);
    *(_WORD *)(a1 + 242) = v39;
    v41 = (*(uint64_t (**)(uint64_t))(v40 + 64))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"Using ", 6);
    *(_BYTE *)(v41 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v41 + 17) = 0;
    if (*(_WORD *)(a1 + 242))
      v42 = "";
    else
      v42 = "(Ephemeral)";
    if (*(_WORD *)(a1 + 242))
      v43 = 0;
    else
      v43 = 11;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)v42, v43);
    *(_BYTE *)(v41 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)" port as TCP source port", 24);
    *(_BYTE *)(v41 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v41 + 17) = 0;
    v64 = 0;
    v65 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v61, (_QWORD *)(a1 + 176));
    v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 112))(v38);
    std::allocate_shared[abi:ne180100]<SipTcpTransport,std::allocator<SipTcpTransport>,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,void>(&v61, &v63, &v64);
    v44 = v62;
    if (v62)
    {
      v45 = (unint64_t *)&v62->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    SipTcpTransport::initialize(v64, a3, &v70, (uint64_t)__p, *(unsigned __int16 *)(a1 + 242), (uint64_t)&v61);
    ImsResult::operator=((uint64_t)v72, (uint64_t)&v61);
    ImsResult::~ImsResult((ImsResult *)&v61);
    if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)&v72[8] + 24))(*(_QWORD *)&v72[8], *(unsigned int *)&v72[16]) & 1) != 0)
    {
      v47 = 0x40000000;
    }
    else
    {
      std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 208), (uint64_t *)&v66);
      std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 224), (uint64_t *)&v64);
      v47 = 0;
      *(_BYTE *)(a1 + 240) = 1;
    }
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = v47;
    v48 = v65;
    if (v65)
    {
      v49 = (unint64_t *)&v65->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  ImsResult::~ImsResult((ImsResult *)v72);
  v51 = v67;
  if (v67)
  {
    v52 = (unint64_t *)&v67->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (SHIBYTE(v69) < 0)
    operator delete(__p[0]);
  v54 = v71;
  if (v71)
  {
    v55 = (unint64_t *)&v71->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v9 = v74;
  if (v74)
  {
LABEL_81:
    v57 = (unint64_t *)&v9->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEE6E130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;

  if (a28 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v32 - 104);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [33]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE6E280(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipInsecureTransportGroup::transportLayerRequestedClose(SipInsecureTransportGroup *this)
{
  char *v1;
  uint64_t v2;

  v1 = (char *)this + 72;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"InsecureTransport close", 23);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v1[168] = 0;
  *((_WORD *)v1 + 85) = 0;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)v1 + 17);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)v1 + 19);
}

void SipInsecureTransportGroup::sendData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, ImsResult *a7@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  char *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  const ImsResult *v21;
  const void *v22;
  uint64_t v23;
  const ImsResult *v24;
  const ImsResult *v25;
  char *v26;
  unsigned __int8 *v27;
  void (**v28)(ImsResult *__hidden);
  uint64_t *v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v8 = *(_QWORD *)(a1 + 208);
  if (!v8)
  {
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v28 = &off_1E78B7238;
    v29 = &_bambiDomain;
    v30 = 1073741827;
    v21 = (const ImsResult *)ImsResult::operator<<<char [41]>((uint64_t)&v28, "send() called on uninitialized transport");
    ImsResult::ImsResult(a7, v21);
LABEL_16:
    ImsResult::~ImsResult((ImsResult *)&v28);
    return;
  }
  v10 = *(unsigned __int8 *)(a4 + 23);
  v11 = *(_QWORD *)(a4 + 8);
  if ((v10 & 0x80u) == 0)
    v12 = *(unsigned __int8 *)(a4 + 23);
  else
    v12 = *(_QWORD *)(a4 + 8);
  if (v12 != 3)
    goto LABEL_15;
  if ((v10 & 0x80) == 0)
  {
    if (*(_BYTE *)(a4 + 23))
    {
      v18 = &SipTransport::kTransportUDP;
      v19 = (unsigned __int8 *)a4;
      v20 = *(unsigned __int8 *)(a4 + 23);
      while (*v19 == *v18)
      {
        ++v19;
        ++v18;
        if (!--v20)
          goto LABEL_17;
      }
      v26 = &SipTransport::kTransportTCP;
      v27 = (unsigned __int8 *)a4;
      while (*v27 == *v26)
      {
        ++v27;
        ++v26;
        if (!--v10)
          goto LABEL_24;
      }
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  v22 = *(const void **)a4;
  if (memcmp(*(const void **)a4, &SipTransport::kTransportUDP, *(_QWORD *)(a4 + 8)))
  {
    if (!memcmp(v22, &SipTransport::kTransportTCP, v11))
    {
LABEL_24:
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD *))(**(_QWORD **)(a1 + 224) + 32))(*(_QWORD *)(a1 + 224), a2, a3, a5, a6);
      return;
    }
LABEL_15:
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v28 = &off_1E78B7238;
    v29 = &_bambiDomain;
    v30 = 1073741825;
    v23 = ImsResult::operator<<<char [24]>((uint64_t)&v28, "unknown transport type ");
    v24 = (const ImsResult *)ImsResult::operator<<<std::string>(v23, a4);
    ImsResult::ImsResult(a7, v24);
    goto LABEL_16;
  }
LABEL_17:
  if (a6 && *a6)
  {
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v28 = &off_1E78B7238;
    v29 = &_bambiDomain;
    v30 = 1073741825;
    v25 = (const ImsResult *)ImsResult::operator<<<char [53]>((uint64_t)&v28, "UDP transport specified, but TCP connection provided");
    ImsResult::ImsResult(a7, v25);
    goto LABEL_16;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, a2, a3, a5, 0);
}

void sub_1BEE6E5B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t SipInsecureTransportGroup::localClientAddress@<X0>(SipInsecureTransportGroup *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 26);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t SipInsecureTransportGroup::localServerAddress@<X0>(SipInsecureTransportGroup *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 26);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t SipInsecureTransportGroup::remoteServerUri(SipInsecureTransportGroup *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 24);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 120))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void sub_1BEE6E6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipInsecureTransportGroup::processMessageFromTransport(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  std::__shared_weak_count *v9;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  v33 = 0;
  v34 = 0;
  v9 = (std::__shared_weak_count *)a1[25];
  if (v9)
  {
    v34 = std::__shared_weak_count::lock(v9);
    if (v34)
    {
      v16 = a1[24];
      v33 = v16;
      if (v16)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v31, a1 + 22);
        v17 = (std::__shared_weak_count *)a8[1];
        v29 = *a8;
        v30 = v17;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v16 + 128))(v16, a2, a3, a4, a5, a6, &v31, &v29);
        v20 = v30;
        if (v30)
        {
          v21 = (unint64_t *)&v30->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v23 = v32;
        if (v32)
        {
          v24 = (unint64_t *)&v32->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
    }
  }
  v26 = v34;
  if (v34)
  {
    v27 = (unint64_t *)&v34->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1BEE6E82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void SipInsecureTransportGroup::printTransportInfo(SipInsecureTransportGroup *this, ImsOutStream *a2, int a3)
{
  uint64_t v6;
  void *__p[2];
  char v8;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 24))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (!a3)
      return;
  }
  else if (!a3)
  {
    return;
  }
  v6 = *((_QWORD *)this + 28);
  if (v6)
  {
    if (*(_QWORD *)(v6 + 224))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Open connections:", 19);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      SipTcpTransport::printConnectionMap(*((ImsOutStream **)this + 28), a2);
    }
  }
}

void sub_1BEE6E938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipInsecureTransportGroup::addTransportSpecificHeaders(SipInsecureTransportGroup *this, SipMessage *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v22 = 0;
  v23 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v4)
  {
    v5 = 0;
LABEL_8:
    v8 = *((_QWORD *)this + 9);
    v7 = (char *)this + 72;
    v9 = (*(uint64_t (**)(char *))(v8 + 56))(v7);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))(v7, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"No transport layer found. Not adding P-ANI to insecure ", 55);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(void **__return_ptr, SipMessage *))(*(_QWORD *)a2 + 48))(__p, a2);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 32))(v9, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v23 = v5;
  if (!v5)
    goto LABEL_8;
  v6 = *((_QWORD *)this + 24);
  v22 = v6;
  if (!v6)
    goto LABEL_8;
  if (!*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) + 438)
    || *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) + 580))
  {
LABEL_6:
    SipTransportGroup::addAccessNetworkInfoHeader(this, a2);
    SipTransportGroup::addRoutableLocalAddressHeader(this, a2);
    goto LABEL_11;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6))
  {
    v12 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
    v13 = (__int128 *)(v12 + 64);
    if (!v12)
      v13 = &ims::kEmptyString;
    v14 = *((unsigned __int8 *)v13 + 23);
    v15 = (v14 & 0x80u) == 0 ? *((unsigned __int8 *)v13 + 23) : *((_QWORD *)v13 + 1);
    if (v15 != 8)
      goto LABEL_31;
    if ((v14 & 0x80) == 0)
    {
      if (*((_BYTE *)v13 + 23))
      {
        v16 = "REGISTER";
        while (*(unsigned __int8 *)v13 == *(unsigned __int8 *)v16)
        {
          v13 = (__int128 *)((char *)v13 + 1);
          ++v16;
          if (!--v14)
            goto LABEL_33;
        }
        goto LABEL_31;
      }
      goto LABEL_33;
    }
    if (memcmp(*(const void **)v13, "REGISTER", *((_QWORD *)v13 + 1)))
    {
LABEL_31:
      v17 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"this is the emergency stack. Allowing P-Access-Network-Info in insecure ", 72);
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(void **__return_ptr, SipMessage *))(*(_QWORD *)a2 + 48))(__p, a2);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v17 + 32))(v17, __p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
      if (v21 < 0)
        operator delete(__p[0]);
      goto LABEL_6;
    }
  }
LABEL_33:
  v19 = *((_QWORD *)this + 9);
  v18 = (char *)this + 72;
  v9 = (*(uint64_t (**)(char *))(v19 + 64))(v18);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v18 + 16))(v18, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"not adding P-Access-Network-Info to insecure ", 45);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(void **__return_ptr, SipMessage *))(*(_QWORD *)a2 + 48))(__p, a2);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 32))(v9, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
  *(_BYTE *)(v9 + 17) = 0;
  if (v21 < 0)
    operator delete(__p[0]);
LABEL_11:
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEE6EC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void SipInsecureTransportGroup::updateServiceClass(SipInsecureTransportGroup *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v11 = 0;
  v12 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v12 = v3;
    if (v3)
    {
      v4 = *((_QWORD *)this + 24);
      v11 = v4;
      if (v4)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 200))(&v10);
        v5 = v10;
        goto LABEL_7;
      }
    }
  }
  else
  {
    v3 = 0;
  }
  v5 = 104;
LABEL_7:
  v6 = *((_QWORD *)this + 26);
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, v5);
  v7 = *((_QWORD *)this + 28);
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v5);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BEE6ED98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipInsecureTransportGroup::updateCrlfKeepAliveInterval(SipInsecureTransportGroup *this, int a2, int a3)
{
  SipTcpTransport *v3;

  v3 = (SipTcpTransport *)*((_QWORD *)this + 28);
  if (v3)
    SipTcpTransport::updateCrlfKeepAliveInterval(v3, a2, a3);
}

void SipInsecureTransportGroup::updateCrlfKeepAliveNetwork(SipInsecureTransportGroup *this)
{
  SipTcpTransport *v1;

  v1 = (SipTcpTransport *)*((_QWORD *)this + 28);
  if (v1)
    SipTcpTransport::updateCrlfKeepAliveNetwork(v1);
}

void SipInsecureTransportGroup::handleKeepAliveWake(SipInsecureTransportGroup *this)
{
  SipTcpTransport *v1;

  v1 = (SipTcpTransport *)*((_QWORD *)this + 28);
  if (v1)
    SipTcpTransport::handleKeepAliveWake(v1);
}

void SipInsecureTransportGroup::triggerTcpErrors(SipTcpTransport **this, const ImsResult *a2)
{
  SipTcpTransport::triggerSocketErrors(this[28], a2);
}

uint64_t SipInsecureTransportGroup::udpTransport@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 216);
  *a2 = *(_QWORD *)(this + 208);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t SipInsecureTransportGroup::tcpTransport@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 232);
  *a2 = *(_QWORD *)(this + 224);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t SipInsecureTransportGroup::initialized(SipInsecureTransportGroup *this)
{
  return *((unsigned __int8 *)this + 240);
}

uint64_t SipInsecureTransportGroup::localPort(SipInsecureTransportGroup *this)
{
  return *((unsigned __int16 *)this + 121);
}

uint64_t SipInsecureTransportGroup::isSecure(SipInsecureTransportGroup *this)
{
  return 0;
}

void SipConversationIdHeader::~SipConversationIdHeader(void **this)
{
  *this = off_1E78B8320;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78B8320;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

SipStringHeader *SipConversationIdHeader::clone(SipConversationIdHeader *this)
{
  SipStringHeader *v2;

  v2 = (SipStringHeader *)operator new();
  SipStringHeader::SipStringHeader(v2, this);
  *(_QWORD *)v2 = off_1E78BE560;
  *((_BYTE *)v2 + 88) = 1;
  return v2;
}

void sub_1BEE6EF2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40EE8ABE80);
  _Unwind_Resume(a1);
}

void SipUnsupportedHeader::~SipUnsupportedHeader(char **this)
{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipMultiStringHeader *SipUnsupportedHeader::clone(SipUnsupportedHeader *this)
{
  SipMultiStringHeader *v2;

  v2 = (SipMultiStringHeader *)operator new();
  SipMultiStringHeader::SipMultiStringHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78BE5F8;
  return v2;
}

void sub_1BEE6F01C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

time_t ims::AccessNetwork::set(std::string *this, const std::string *a2)
{
  return ims::AccessNetwork::set(this, a2, a2 + 1);
}

BOOL ims::AccessNetwork::isIMS(ims::AccessNetwork *this)
{
  return ims::AccessNetwork::isLTE(this) || ims::AccessNetwork::isWifi(this) || ims::AccessNetwork::isNR(this);
}

BOOL ims::AccessNetwork::isCellularIMS(ims::AccessNetwork *this)
{
  return ims::AccessNetwork::isLTE(this) || ims::AccessNetwork::isNR(this);
}

BOOL ims::AccessNetwork::isUMTS(ims::AccessNetwork *this)
{
  uint64_t v1;
  size_t v2;
  uint64_t v3;
  const char *v4;
  ims::AccessNetwork *v5;
  uint64_t v6;
  _BOOL8 v7;
  const void *v8;
  uint64_t v10;
  const char *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  BOOL v18;

  v1 = *((unsigned __int8 *)this + 23);
  v2 = *((_QWORD *)this + 1);
  if ((v1 & 0x80u) == 0)
    v3 = *((unsigned __int8 *)this + 23);
  else
    v3 = *((_QWORD *)this + 1);
  if (v3 != 14)
    return 0;
  if ((v1 & 0x80) != 0)
  {
    v8 = *(const void **)this;
    if (memcmp(*(const void **)this, "3GPP-UTRAN-FDD", v2))
      return memcmp(v8, "3GPP-UTRAN-TDD", v2) == 0;
    return 1;
  }
  if (!*((_BYTE *)this + 23))
    return 1;
  v4 = "3GPP-UTRAN-FDD";
  v5 = this;
  v6 = *((unsigned __int8 *)this + 23);
  while (*(unsigned __int8 *)v5 == *(unsigned __int8 *)v4)
  {
    v5 = (ims::AccessNetwork *)((char *)v5 + 1);
    ++v4;
    if (!--v6)
      return 1;
  }
  v10 = v1 - 1;
  v11 = "3GPP-UTRAN-TDD";
  do
  {
    v13 = *(unsigned __int8 *)this;
    this = (ims::AccessNetwork *)((char *)this + 1);
    v12 = v13;
    v15 = *(unsigned __int8 *)v11++;
    v14 = v15;
    v17 = v10-- != 0;
    v18 = v12 == v14;
    v7 = v12 == v14;
  }
  while (v18 && v17);
  return v7;
}

BOOL ims::AccessNetwork::isGSM(ims::AccessNetwork *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v10;
  BOOL v11;
  _BOOL8 v12;

  v1 = *((unsigned __int8 *)this + 23);
  if ((v1 & 0x80u) == 0)
    v2 = *((unsigned __int8 *)this + 23);
  else
    v2 = *((_QWORD *)this + 1);
  if (v2 != 10)
    return 0;
  if ((v1 & 0x80) != 0)
    return memcmp(*(const void **)this, "3GPP-GERAN", *((_QWORD *)this + 1)) == 0;
  if (!*((_BYTE *)this + 23))
    return 1;
  v3 = v1 - 1;
  v4 = "3GPP-GERAN";
  do
  {
    v6 = *(unsigned __int8 *)this;
    this = (ims::AccessNetwork *)((char *)this + 1);
    v5 = v6;
    v8 = *(unsigned __int8 *)v4++;
    v7 = v8;
    v10 = v3-- != 0;
    v11 = v5 == v7;
    v12 = v5 == v7;
  }
  while (v11 && v10);
  return v12;
}

BOOL ims::AccessNetwork::is3GPP2(ims::AccessNetwork *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  char v10;
  BOOL v11;
  _BOOL8 v12;
  uint64_t v13;
  const char *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  const char *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  const char *v27;

  v1 = *((unsigned __int8 *)this + 23);
  if ((v1 & 0x80u) == 0)
    v2 = *((unsigned __int8 *)this + 23);
  else
    v2 = *((_QWORD *)this + 1);
  switch(v2)
  {
    case 8:
      if ((v1 & 0x80) != 0)
      {
        v27 = "3GPP2-1X";
        return memcmp(*(const void **)this, v27, *((_QWORD *)this + 1)) == 0;
      }
      if (!*((_BYTE *)this + 23))
        return 1;
      v13 = v1 - 1;
      v14 = "3GPP2-1X";
      do
      {
        v16 = *(unsigned __int8 *)this;
        this = (ims::AccessNetwork *)((char *)this + 1);
        v15 = v16;
        v18 = *(unsigned __int8 *)v14++;
        v17 = v18;
        v9 = v13-- != 0;
        v19 = v9;
        v11 = v15 == v17;
        v12 = v15 == v17;
      }
      while (v11 && (v19 & 1) != 0);
      break;
    case 13:
      if ((v1 & 0x80) != 0)
      {
        v27 = "3GPP2-1X-HRPD";
        return memcmp(*(const void **)this, v27, *((_QWORD *)this + 1)) == 0;
      }
      if (!*((_BYTE *)this + 23))
        return 1;
      v20 = v1 - 1;
      v21 = "3GPP2-1X-HRPD";
      do
      {
        v23 = *(unsigned __int8 *)this;
        this = (ims::AccessNetwork *)((char *)this + 1);
        v22 = v23;
        v25 = *(unsigned __int8 *)v21++;
        v24 = v25;
        v9 = v20-- != 0;
        v26 = v9;
        v11 = v22 == v24;
        v12 = v22 == v24;
      }
      while (v11 && (v26 & 1) != 0);
      break;
    case 11:
      if ((v1 & 0x80) == 0)
      {
        if (*((_BYTE *)this + 23))
        {
          v3 = v1 - 1;
          v4 = "3GPP2-EHRPD";
          do
          {
            v6 = *(unsigned __int8 *)this;
            this = (ims::AccessNetwork *)((char *)this + 1);
            v5 = v6;
            v8 = *(unsigned __int8 *)v4++;
            v7 = v8;
            v9 = v3-- != 0;
            v10 = v9;
            v11 = v5 == v7;
            v12 = v5 == v7;
          }
          while (v11 && (v10 & 1) != 0);
          return v12;
        }
        return 1;
      }
      v27 = "3GPP2-EHRPD";
      return memcmp(*(const void **)this, v27, *((_QWORD *)this + 1)) == 0;
    default:
      return 0;
  }
  return v12;
}

BOOL ims::AccessNetwork::isEHRPD(ims::AccessNetwork *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v10;
  BOOL v11;
  _BOOL8 v12;

  v1 = *((unsigned __int8 *)this + 23);
  if ((v1 & 0x80u) == 0)
    v2 = *((unsigned __int8 *)this + 23);
  else
    v2 = *((_QWORD *)this + 1);
  if (v2 != 11)
    return 0;
  if ((v1 & 0x80) != 0)
    return memcmp(*(const void **)this, "3GPP2-EHRPD", *((_QWORD *)this + 1)) == 0;
  if (!*((_BYTE *)this + 23))
    return 1;
  v3 = v1 - 1;
  v4 = "3GPP2-EHRPD";
  do
  {
    v6 = *(unsigned __int8 *)this;
    this = (ims::AccessNetwork *)((char *)this + 1);
    v5 = v6;
    v8 = *(unsigned __int8 *)v4++;
    v7 = v8;
    v10 = v3-- != 0;
    v11 = v5 == v7;
    v12 = v5 == v7;
  }
  while (v11 && v10);
  return v12;
}

BOOL ims::AccessNetwork::isTDD(ims::AccessNetwork *this)
{
  ims::AccessNetwork *v1;
  uint64_t v2;
  char *v3;
  ims::AccessNetwork *v4;
  char *v5;

  v1 = this;
  if (*((char *)this + 23) < 0)
  {
    v1 = *(ims::AccessNetwork **)this;
    v2 = *((_QWORD *)this + 1);
  }
  else
  {
    v2 = *((unsigned __int8 *)this + 23);
  }
  v3 = (char *)v1 + v2;
  if (v2 >= 3)
  {
    v4 = v1;
    do
    {
      v5 = (char *)memchr(v4, 84, v2 - 2);
      if (!v5)
        break;
      if (*(_WORD *)v5 == 17492 && v5[2] == 68)
        return v5 != v3 && v5 - (char *)v1 != -1;
      v4 = (ims::AccessNetwork *)(v5 + 1);
      v2 = v3 - (char *)v4;
    }
    while (v3 - (char *)v4 > 2);
  }
  v5 = v3;
  return v5 != v3 && v5 - (char *)v1 != -1;
}

BOOL ims::AccessNetwork::isFDD(ims::AccessNetwork *this)
{
  ims::AccessNetwork *v1;
  uint64_t v2;
  char *v3;
  ims::AccessNetwork *v4;
  char *v5;

  v1 = this;
  if (*((char *)this + 23) < 0)
  {
    v1 = *(ims::AccessNetwork **)this;
    v2 = *((_QWORD *)this + 1);
  }
  else
  {
    v2 = *((unsigned __int8 *)this + 23);
  }
  v3 = (char *)v1 + v2;
  if (v2 >= 3)
  {
    v4 = v1;
    do
    {
      v5 = (char *)memchr(v4, 70, v2 - 2);
      if (!v5)
        break;
      if (*(_WORD *)v5 == 17478 && v5[2] == 68)
        return v5 != v3 && v5 - (char *)v1 != -1;
      v4 = (ims::AccessNetwork *)(v5 + 1);
      v2 = v3 - (char *)v4;
    }
    while (v3 - (char *)v4 > 2);
  }
  v5 = v3;
  return v5 != v3 && v5 - (char *)v1 != -1;
}

void ims::AccessNetworks::log(ims::AccessNetworks *this, ImsOutStream *a2, int a3)
{
  size_t v5;
  std::string v6;
  std::string __p;

  v5 = a3;
  std::string::basic_string[abi:ne180100](&v6, a3, 32);
  LoggableString::LoggableString(&__p, &v6);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"reported: ", 10);
  *((_BYTE *)a2 + 17) = 0;
  ims::operator<<((uint64_t)a2, (uint64_t)this);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100](&v6, v5, 32);
  LoggableString::LoggableString(&__p, &v6);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"last: ", 6);
  *((_BYTE *)a2 + 17) = 0;
  ims::operator<<((uint64_t)a2, (uint64_t)this + 144);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100](&v6, v5, 32);
  LoggableString::LoggableString(&__p, &v6);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"camped: ", 8);
  *((_BYTE *)a2 + 17) = 0;
  ims::operator<<((uint64_t)a2, (uint64_t)this + 72);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BEE6F70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ims::AccessNetworks::cellular(ims::AccessNetworks *this@<X0>, uint64_t a2@<X8>)
{
  char v4;
  int v5;
  _OWORD *v6;
  char v7;
  int v8;
  std::string *v9;
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = *((_BYTE *)this + 95);
  if (v4 < 0)
  {
    if (!*((_QWORD *)this + 10))
      goto LABEL_10;
  }
  else if (!*((_BYTE *)this + 95))
  {
    goto LABEL_10;
  }
  v5 = *((char *)this + 119);
  if (v5 < 0)
  {
    if (!*((_QWORD *)this + 13))
      goto LABEL_10;
  }
  else if (!*((_BYTE *)this + 119))
  {
    goto LABEL_10;
  }
  v6 = (_OWORD *)((char *)this + 72);
  if (!ims::AccessNetwork::isWifi((ims::AccessNetworks *)((char *)this + 72)))
  {
    if (v4 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
      LOBYTE(v5) = *((_BYTE *)this + 119);
    }
    else
    {
      *(_OWORD *)a2 = *v6;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 11);
    }
    v11 = (std::string *)(a2 + 24);
    if ((v5 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
      *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 14);
    }
    *(_OWORD *)(a2 + 48) = *(_OWORD *)((char *)this + 120);
    v10 = *((_BYTE *)this + 136);
    goto LABEL_40;
  }
LABEL_10:
  v7 = *((_BYTE *)this + 23);
  if (v7 < 0)
  {
    if (!*((_QWORD *)this + 1))
      goto LABEL_21;
  }
  else if (!*((_BYTE *)this + 23))
  {
    goto LABEL_21;
  }
  v8 = *((char *)this + 47);
  if ((v8 & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 47))
      goto LABEL_21;
    goto LABEL_20;
  }
  if (!*((_QWORD *)this + 4))
  {
LABEL_21:
    if (*((char *)this + 167) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *((const std::string::value_type **)this + 18), *((_QWORD *)this + 19));
    }
    else
    {
      *(_OWORD *)a2 = *((_OWORD *)this + 9);
      *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 20);
    }
    v9 = (std::string *)(a2 + 24);
    if (*((char *)this + 191) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)this + 21), *((_QWORD *)this + 22));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 168);
      *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 23);
    }
    *(_OWORD *)(a2 + 48) = *((_OWORD *)this + 12);
    v10 = *((_BYTE *)this + 208);
    goto LABEL_40;
  }
LABEL_20:
  if (ims::AccessNetwork::isWifi(this))
    goto LABEL_21;
  if (v7 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
    LOBYTE(v8) = *((_BYTE *)this + 47);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 2);
  }
  v12 = (std::string *)(a2 + 24);
  if ((v8 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(v12, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 5);
  }
  *(_OWORD *)(a2 + 48) = *((_OWORD *)this + 3);
  v10 = *((_BYTE *)this + 64);
LABEL_40:
  *(_BYTE *)(a2 + 64) = v10;
}

void sub_1BEE6F93C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL ims::AccessNetworks::isIwlanOverCellular(ims::AccessNetworks *this)
{
  _BOOL8 result;

  if (*((char *)this + 23) < 0)
  {
    if (!*((_QWORD *)this + 1))
      return 0;
  }
  else if (!*((_BYTE *)this + 23))
  {
    return 0;
  }
  if (*((char *)this + 47) < 0)
  {
    if (!*((_QWORD *)this + 4))
      return 0;
  }
  else if (!*((_BYTE *)this + 47))
  {
    return 0;
  }
  result = ims::AccessNetwork::isWifi(this);
  if (!(_DWORD)result)
    return result;
  if (*((char *)this + 95) < 0)
  {
    if (!*((_QWORD *)this + 10))
      return 0;
  }
  else if (!*((_BYTE *)this + 95))
  {
    return 0;
  }
  if (*((char *)this + 119) < 0)
  {
    if (*((_QWORD *)this + 13))
      return !ims::AccessNetwork::isWifi((ims::AccessNetworks *)((char *)this + 72));
  }
  else if (*((_BYTE *)this + 119))
  {
    return !ims::AccessNetwork::isWifi((ims::AccessNetworks *)((char *)this + 72));
  }
  return 0;
}

void ims::AccessNetwork::extractCellularInfo(_QWORD *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  int v6;
  size_t v7;
  _QWORD *v11;
  std::string *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  const std::string *v17;
  std::string::size_type v18;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  std::string::size_type v41;
  int v42;
  int v43;
  int v44;
  int v45;
  std::string::size_type v46;
  int v47;
  std::string v48;
  char v49;

  v6 = *((char *)a1 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a1 + 23);
  else
    v7 = a1[1];
  v11 = a1;
  v12 = (std::string *)(a1 + 3);
  switch(v7)
  {
    case 0xAuLL:
      if (v6 < 0)
        a1 = (_QWORD *)*a1;
      if (memcmp(a1, "3GPP-GERAN", v7))
        return;
      *a2 = v13 & ~(v13 >> 31);
      if (*((char *)v11 + 47) < 0)
      {
        v14 = v11[4];
        if (v14 == 14)
          goto LABEL_10;
      }
      else
      {
        v14 = *((unsigned __int8 *)v11 + 47);
        if ((_DWORD)v14 == 14)
        {
LABEL_10:
          *a3 = v15 & ~(v15 >> 31);
          *a4 = v16 & ~(v16 >> 31);
          v17 = v12;
          v18 = 10;
LABEL_62:
          v41 = 4;
          goto LABEL_63;
        }
      }
      if (v14 == 13)
      {
        *a3 = v44 & ~(v44 >> 31);
        *a4 = v45 & ~(v45 >> 31);
        v17 = v12;
        v18 = 9;
        goto LABEL_62;
      }
      return;
    case 0xBuLL:
      if (v6 < 0)
        a1 = (_QWORD *)*a1;
      if ((*a1 != 0x2D524E2D50504733 || *(_QWORD *)((char *)a1 + 3) != 0x4444542D524E2D50)
        && (*a1 != 0x2D524E2D50504733 || *(_QWORD *)((char *)a1 + 3) != 0x4444462D524E2D50))
      {
        if (!memcmp(a1, "3GPP2-EHRPD", v7))
        {
          *a2 = v21 & ~(v21 >> 31);
          LODWORD(v22) = *((char *)v11 + 47);
          if ((v22 & 0x80000000) != 0)
            v22 = v11[4];
          if ((v22 & 1) != 0)
            v46 = 2;
          else
            v46 = 3;
          *a3 = v47 & ~(v47 >> 31);
        }
        return;
      }
      *a2 = v35 & ~(v35 >> 31);
      if (*((char *)v11 + 47) < 0)
      {
        v36 = v11[4];
        if (v36 == 21)
          goto LABEL_50;
      }
      else
      {
        v36 = *((unsigned __int8 *)v11 + 47);
        if ((_DWORD)v36 == 21)
        {
LABEL_50:
          *a3 = v37 & ~(v37 >> 31);
          *a4 = v38 & ~(v38 >> 31);
          v17 = v12;
          v18 = 12;
LABEL_58:
          v41 = 9;
          goto LABEL_63;
        }
      }
      if (v36 != 20)
        return;
      *a3 = v42 & ~(v42 >> 31);
      *a4 = v43 & ~(v43 >> 31);
      v17 = v12;
      v18 = 11;
      goto LABEL_58;
    case 0xEuLL:
      v23 = 0x5254552D50504733;
      if (v6 >= 0)
        v24 = a1;
      else
        v24 = (uint64_t *)*a1;
      if (*v24 == 0x5254552D50504733 && *(uint64_t *)((char *)v24 + 6) == 0x4444462D4E415254)
        goto LABEL_45;
      v26 = *v24;
      v27 = *(uint64_t *)((char *)v24 + 6);
      goto LABEL_40;
    case 0x10uLL:
      v23 = 0x552D452D50504733;
      if (v6 >= 0)
        v28 = a1;
      else
        v28 = (uint64_t *)*a1;
      if (*v28 == 0x552D452D50504733 && v28[1] == 0x4444462D4E415254)
        goto LABEL_45;
      v26 = *v28;
      v27 = v28[1];
LABEL_40:
      if (v26 != v23 || v27 != 0x4444542D4E415254)
        return;
LABEL_45:
      *a2 = v31 & ~(v31 >> 31);
      if (*((char *)v11 + 47) < 0)
      {
        v32 = v11[4];
        if (v32 == 17)
          goto LABEL_47;
      }
      else
      {
        v32 = *((unsigned __int8 *)v11 + 47);
        if ((_DWORD)v32 == 17)
        {
LABEL_47:
          *a3 = v33 & ~(v33 >> 31);
          *a4 = v34 & ~(v34 >> 31);
          v17 = v12;
          v18 = 10;
          goto LABEL_54;
        }
      }
      if (v32 != 16)
        return;
      *a3 = v39 & ~(v39 >> 31);
      *a4 = v40 & ~(v40 >> 31);
      v17 = v12;
      v18 = 9;
LABEL_54:
      v41 = 7;
LABEL_63:
      std::string::basic_string(&v48, v17, v18, v41, (std::allocator<char> *)&v49);
      if (*(char *)(a5 + 23) < 0)
        operator delete(*(void **)a5);
      *(std::string *)a5 = v48;
      return;
    default:
      return;
  }
}

uint64_t `anonymous namespace'::parseNetinfo(std::string *__str, std::string::size_type __pos, std::string::size_type __n)
{
  int v3;
  std::string::size_type size;
  int v5;
  uint64_t v6;
  std::string v8;
  std::string __stra;
  char v10;

  v3 = __pos;
  memset(&__stra, 0, sizeof(__stra));
  std::string::basic_string(&v8, __str, __pos, __n, (std::allocator<char> *)&v10);
  __stra = v8;
  size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __stra.__r_.__value_.__l.__size_;
  if (size)
  {
    if (v3 <= 4)
      v5 = 10;
    else
      v5 = 16;
    v6 = std::stoi(&__stra, 0, v5);
  }
  else
  {
    v6 = 0xFFFFFFFFLL;
  }
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BEE70000(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 25) < 0)
    operator delete(*(void **)(v1 - 48));
  _Unwind_Resume(a1);
}

void sub_1BEE70008(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  MEMORY[0x1C3B86D70](&a15);
  __cxa_end_catch();
  JUMPOUT(0x1BEE70048);
}

BOOL SDPMediaTTYSettings::operator!=(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 280) != *(_DWORD *)(a2 + 280)
      || *(_DWORD *)(a1 + 284) != *(_DWORD *)(a2 + 284)
      || *(unsigned __int16 *)(a1 + 290) != *(unsigned __int16 *)(a2 + 290)
      || *(unsigned __int16 *)(a1 + 288) != *(unsigned __int16 *)(a2 + 288)
      || SDPMediaSettings::operator!=(a1, a2);
}

void SDPMediaTTYSettings::~SDPMediaTTYSettings(SDPMediaTTYSettings *this)
{
  SDPMediaSettings::~SDPMediaSettings(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipHeader::SipHeader(uint64_t a1, const std::string *a2)
{
  *(_QWORD *)a1 = off_1E78BE6E0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 1;
  std::string::operator=((std::string *)(a1 + 8), a2);
  return a1;
}

void sub_1BEE70130(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*(void **)(v1 + 32));
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void SipHeader::SipHeader(SipHeader *this, const SipHeader *a2)
{
  std::string *v3;

  *(_QWORD *)this = off_1E78BE6E0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v3 = (std::string *)((char *)this + 32);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_BYTE *)this + 56) = 1;
  std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
  std::string::operator=(v3, (const std::string *)((char *)a2 + 32));
}

void sub_1BEE701CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t SipHeader::log(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, a2, 0);
  return a2;
}

uint64_t SipHeader::valueAndParamsAsString(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t SipHeader::valueAsString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v8, 1);
  v4 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 48))(a1, &v8);
  if ((v4 & 1) != 0)
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v9 + 1) + 8, &v6);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
  }
  *(_QWORD *)&v8 = &off_1E78D7A10;
  if ((_BYTE)v9 && *((_QWORD *)&v8 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 8))(*((_QWORD *)&v8 + 1));
  return v4;
}

void sub_1BEE702F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15)
  {
    if (a14)
      (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void SipHeader::encode(SipHeader *this, ImsOutStream *a2, int a3)
{
  std::string v5;
  std::string v6;
  void *__p[2];
  __int128 v8;
  uint64_t v9;

  if (a3)
  {
    if (*((char *)this + 55) < 0)
    {
      if (*((_QWORD *)this + 5))
        goto LABEL_4;
    }
    else if (*((_BYTE *)this + 55))
    {
LABEL_4:
      LoggableString::LoggableString((std::string *)__p, (const std::string *)((char *)this + 32));
      (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
      goto LABEL_7;
    }
  }
  LoggableString::LoggableString((std::string *)__p, (const std::string *)((char *)this + 8));
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
LABEL_7:
  *((_BYTE *)a2 + 17) = 0;
  if (SBYTE7(v8) < 0)
    operator delete(__p[0]);
  if (*((_BYTE *)this + 56))
  {
    (*(void (**)(SipHeader *, ImsOutStream *))(*(_QWORD *)this + 48))(this, a2);
  }
  else
  {
    v9 = 0;
    *(_OWORD *)__p = 0u;
    v8 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__p, 1);
    (*(void (**)(SipHeader *, void **))(*(_QWORD *)this + 48))(this, __p);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v8 + 1) + 8, &v5);
    LoggableString::LoggableString(&v6, &v5);
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v6);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
    __p[0] = &off_1E78D7A10;
    if ((_BYTE)v8)
    {
      if (__p[1])
        (*(void (**)(void *))(*(_QWORD *)__p[1] + 8))(__p[1]);
    }
  }
}

void sub_1BEE704B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,char a23,int a24,__int16 a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a23)
  {
    if (a22)
      (*(void (**)(uint64_t))(*(_QWORD *)a22 + 8))(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipHeader::decode(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t _GLOBAL__sub_I_SipHeader_cpp()
{
  void (*v0)(void *);

  std::string::basic_string[abi:ne180100]<0>(&SipHeader::kHeaderPChargingFunctionAddresses, "P-Charging-Function-Addresses");
  v0 = (void (*)(void *))MEMORY[0x1E0DE44D0];
  __cxa_atexit(MEMORY[0x1E0DE44D0], &SipHeader::kHeaderPChargingFunctionAddresses, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&SipHeader::kHeaderPLastAccessNetworkInfo, "P-Last-Access-Network-Info");
  __cxa_atexit(v0, &SipHeader::kHeaderPLastAccessNetworkInfo, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&SipHeader::kHeaderPComNameIdReputation, "P-Com.NameId-Reputation");
  __cxa_atexit(v0, &SipHeader::kHeaderPComNameIdReputation, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&SipHeader::kHeaderPCellularNetworkInfo, "P-Cellular-Network-Info");
  __cxa_atexit(v0, &SipHeader::kHeaderPCellularNetworkInfo, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(SipHeader::kInReplyToContributionId, "InReplyTo-Contribution-ID");
  return __cxa_atexit(v0, SipHeader::kInReplyToContributionId, &dword_1BEDF4000);
}

void LazuliByteRangeHeader::create(std::__shared_weak_count **a1@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)operator new(0x58uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BE840;
  v5 = v3 + 1;
  LazuliHeader::LazuliHeader((std::string *)&v3[1], (const std::string *)"Byte-Range");
  v3[3].__shared_owners_ = 0;
  HIDWORD(v3[3].__vftable) = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BE890;
  shared_weak_owners = (std::__shared_weak_count *)v3[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v3[1].__shared_owners_ = (uint64_t)v5;
    v3[1].__shared_weak_owners_ = (uint64_t)v3;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v3[1].__shared_owners_ = (uint64_t)v5;
    v3[1].__shared_weak_owners_ = (uint64_t)v3;
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_14:
  *a1 = v5;
  a1[1] = v3;
}

void sub_1BEE7074C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t LazuliByteRangeHeader::encodeValue(LazuliByteRangeHeader *this, ImsOutStream *a2)
{
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"-", 1);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"/", 1);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  return 1;
}

uint64_t LazuliByteRangeHeader::setValueFromString(_DWORD *a1, std::string *this)
{
  std::string::size_type v4;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;

  v4 = std::string::find(this, 45, 0);
  if (v4 == -1)
    return 0;
  v5 = v4;
  v6 = std::string::find(this, 47, v4);
  if (v6 == -1)
    return 0;
  v7 = v6;
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = this;
  else
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  a1[13] = strtoul((const char *)v8, 0, 10);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = this;
  else
    v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  a1[14] = strtoul(&v9->__r_.__value_.__s.__data_[v5 + 1], 0, 10);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = this;
  else
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
  a1[15] = strtoul(&v10->__r_.__value_.__s.__data_[v7 + 1], 0, 10);
  return 1;
}

void LazuliByteRangeHeader::~LazuliByteRangeHeader(void **this)
{
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C3B87100);
}

std::string *LazuliHeader::loggableName@<X0>(const std::string *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, this + 1);
}

double LazuliByteRangeHeader::clone@<D0>(LazuliByteRangeHeader *this@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  std::string *v5;
  double result;
  __int128 v7;

  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E78BE7F0;
  *((_QWORD *)v4 + 3) = off_1E78DE938;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = 0;
  v5 = (std::string *)(v4 + 48);
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    *((_QWORD *)v4 + 8) = *((_QWORD *)this + 5);
  }
  v4[72] = *((_BYTE *)this + 48);
  *((_QWORD *)v4 + 3) = &off_1E78BE778;
  *(_QWORD *)(v4 + 76) = *(_QWORD *)((char *)this + 52);
  *((_DWORD *)v4 + 21) = *((_DWORD *)this + 15);
  *(_QWORD *)&v7 = v4 + 24;
  *((_QWORD *)&v7 + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v7, (_QWORD *)v4 + 4, (uint64_t)(v4 + 24));
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

void sub_1BEE709D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *shared_weak_owners;
  void *v4;

  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void LazuliHeader::~LazuliHeader(void **this)
{
  std::__shared_weak_count *v2;

  *this = off_1E78DE938;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = (std::__shared_weak_count *)this[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void std::__shared_ptr_emplace<LazuliByteRangeHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BE7F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliByteRangeHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BE7F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliByteRangeHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<LazuliByteRangeHeader::create(void)::HeaderWrapper,std::allocator<LazuliByteRangeHeader::create(void)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BE840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliByteRangeHeader::create(void)::HeaderWrapper,std::allocator<LazuliByteRangeHeader::create(void)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BE840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliByteRangeHeader::create(void)::HeaderWrapper,std::allocator<LazuliByteRangeHeader::create(void)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void LazuliByteRangeHeader::create(void)::HeaderWrapper::~HeaderWrapper(void **a1)
{
  LazuliHeader::~LazuliHeader(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t MsrpTransportTls::MsrpTransportTls(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void **v10;
  std::string __p;
  std::string v13;

  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  *(_QWORD *)a1 = off_1E78D2580;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_1E78D25C0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v4;
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    std::__shared_weak_count::__release_weak(v4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "msrp.tport");
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a2 + 48))(&__p);
  ImsLogContainer::ImsLogContainer(a1 + 80, &v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E78BE908;
  *(_QWORD *)(a1 + 24) = &unk_1E78BE970;
  *(_QWORD *)(a1 + 80) = &unk_1E78BE9C0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  v10 = (void **)(a1 + 216);
  *(_QWORD *)(a1 + 232) = 0;
  ims::convertBundleIdToUuid(&v13);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 232) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  return a1;
}

void sub_1BEE70C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  char *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;

  if (v20[239] < 0)
    operator delete(*v24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22);
  ImsLogContainer::~ImsLogContainer(v21);
  MsrpTransportInterface::~MsrpTransportInterface((MsrpTransportInterface *)v20);
  _Unwind_Resume(a1);
}

void MsrpTransportTls::~MsrpTransportTls(MsrpTransportTls *this)
{
  *(_QWORD *)this = &off_1E78BE908;
  *((_QWORD *)this + 3) = &unk_1E78BE970;
  *((_QWORD *)this + 10) = &unk_1E78BE9C0;
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  *((_QWORD *)this + 10) = off_1E78CFE68;
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  MsrpTransportInterface::~MsrpTransportInterface(this);
}

{
  MsrpTransportTls::~MsrpTransportTls(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'MsrpTransportTls::~MsrpTransportTls(MsrpTransportTls *this)
{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)((char *)this - 24));
}

{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)((char *)this - 80));
}

{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)((char *)this - 80));
  JUMPOUT(0x1C3B87100);
}

double MsrpTransportTls::createListener@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  const void *v34;
  _QWORD *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  int v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  double result;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v66;
  std::__shared_weak_count *v67;
  char v68;
  void (**v69)(ims::CFType *__hidden);
  CFTypeRef cf;
  uint64_t v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 __p;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  dispatch_object_t v84;

  v78 = 0uLL;
  v10 = (std::__shared_weak_count *)operator new(0x108uLL);
  v11 = v10;
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEAF8;
  v13 = &v10[1].__vftable;
  v14 = *a1;
  v15 = (std::__shared_weak_count *)a1[1];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
  }
  *(_QWORD *)&__p = v14;
  *((_QWORD *)&__p + 1) = v15;
  MsrpTransportTls::MsrpTransportTls((uint64_t)&v10[1], &__p);
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEB48;
    v11[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78BEBB0;
    v11[4].__shared_owners_ = (uint64_t)&unk_1E78BEC00;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEB48;
    v11[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78BEBB0;
    v11[4].__shared_owners_ = (uint64_t)&unk_1E78BEC00;
  }
  *(_QWORD *)&v78 = v13;
  *((_QWORD *)&v78 + 1) = v11;
  shared_weak_owners = (std::__shared_weak_count *)v11[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_28;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    v11[1].__shared_owners_ = (uint64_t)v13;
    v11[1].__shared_weak_owners_ = (uint64_t)v11;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    v27 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v11[1].__shared_owners_ = (uint64_t)v13;
    v11[1].__shared_weak_owners_ = (uint64_t)v11;
  }
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_28:
  v77 = 0;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v30 = (_QWORD *)v78;
  v31 = a2[1];
  v71 = *a2;
  v72 = (std::__shared_weak_count *)v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *(const void **)(a4 + 8);
  v69 = off_1E78EAB00;
  cf = v34;
  if (v34)
    CFRetain(v34);
  v69 = (void (**)(ims::CFType *__hidden))&off_1E78B7BD8;
  v35 = (_QWORD *)(v78 + 32);
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v78 + 32), &v71);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v66, v30 + 1);
  LODWORD(v84) = 0;
  std::allocate_shared[abi:ne180100]<ImsListenSocket,std::allocator<ImsListenSocket>,std::shared_ptr<MsrpTransportInterface>,DscpClass,void>((uint64_t *)&v66, (int *)&v84, &__p);
  v36 = v30 + 23;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(v30 + 23), &__p);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v67;
  if (v67)
  {
    v41 = (unint64_t *)&v67->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v35 + 64))(*v35, 0);
  v77 = 0;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v43 = *v36;
  v44 = sImsDispatchQueue;
  if (sImsDispatchQueue)
  {
    v84 = (dispatch_object_t)sImsDispatchQueue;
  }
  else
  {
    v44 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v44;
    v84 = v44;
    if (!v44)
      goto LABEL_47;
  }
  dispatch_retain(v44);
LABEL_47:
  v66 = off_1E78EAB00;
  v67 = (std::__shared_weak_count *)cf;
  if (cf)
    CFRetain(cf);
  v66 = &off_1E78B7BD8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *, dispatch_object_t *, _QWORD *, uint64_t, void **, uint64_t, __int128 *, _BYTE))(*(_QWORD *)v43 + 40))(&v73, v43, &v71, &v84, v30 + 27, a3, &v66, a5, &__p, 0);
  if (SHIBYTE(v80) < 0)
    operator delete((void *)__p);
  ims::CFType::~CFType((ims::CFType *)&v66);
  if (v84)
    dispatch_release(v84);
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  *(_QWORD *)&__p = &off_1E78B7238;
  *((_QWORD *)&__p + 1) = &_bambiDomain;
  LODWORD(v80) = 0;
  if (*((uint64_t **)&v73 + 1) == &_bambiDomain)
  {
    v45 = v74;
    ImsResult::~ImsResult((ImsResult *)&__p);
    if (!v45)
    {
      v46 = *(_QWORD *)(*v36 + 32);
      *(_QWORD *)&__p = *(_QWORD *)(*v36 + 24);
      *((_QWORD *)&__p + 1) = v46;
      if (v46)
      {
        v47 = (unint64_t *)(v46 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      std::shared_ptr<IpAddress>::operator=[abi:ne180100](v30 + 4, (uint64_t *)&__p);
      v49 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v53 = v30[10];
      v52 = v30 + 10;
      v54 = (*(uint64_t (**)(_QWORD *))(v53 + 64))(v52);
      (*(void (**)(_QWORD *, uint64_t))(*v52 + 16))(v52, v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"initialized listener on local port ", 35);
      *(_BYTE *)(v54 + 17) = 0;
      (*(void (**)(_QWORD))(*(_QWORD *)*v35 + 56))(*v35);
      std::ostream::operator<<();
      *(_BYTE *)(v54 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v54 + 17) = 0;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  ims::CFType::~CFType((ims::CFType *)&v69);
  v55 = v72;
  if (v72)
  {
    v56 = (unint64_t *)&v72->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  *(_QWORD *)&__p = &off_1E78B7238;
  *((_QWORD *)&__p + 1) = &_bambiDomain;
  LODWORD(v80) = 0;
  if (*((uint64_t **)&v73 + 1) == &_bambiDomain)
  {
    v58 = v74;
    ImsResult::~ImsResult((ImsResult *)&__p);
    if (!v58)
    {
      ImsResult::~ImsResult((ImsResult *)&v73);
      result = *(double *)&v78;
      *(_OWORD *)a6 = v78;
      return result;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  __p = 0uLL;
  v80 = 0;
  if (*a1)
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 48))(&__p);
  else
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v66, "msrp.tport");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v59 = ImsLogger::error(ims::_logger, (uint64_t)&v66, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v59 + 8), (uint64_t)"Failed to init listner! ", 24);
  *(_BYTE *)(v59 + 17) = 0;
  (*(void (**)(__int128 *, uint64_t))(v73 + 16))(&v73, v59);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v59 + 64))(v59, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v59 + 17) = 0;
  if (v68 < 0)
    operator delete(v66);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  if (SHIBYTE(v80) < 0)
    operator delete((void *)__p);
  ImsResult::~ImsResult((ImsResult *)&v73);
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return result;
}

void sub_1BEE714A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  NSObject *v40;

  if (v40)
    dispatch_release(v40);
  ims::CFType::~CFType((ims::CFType *)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

double MsrpTransportTls::createConnection@<D0>(void (***a1)(ImsResult *__hidden this)@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  _QWORD *v13;
  void (**v14)(ImsResult *__hidden);
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  const void *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  dispatch_object_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  char *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  NSObject *v72;
  int v73;
  int v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  NSObject *v83;
  unint64_t *v84;
  unint64_t v85;
  void (**v86)(ImsResult *__hidden);
  uint64_t *v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  void (**v102)(ImsResult *__hidden);
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  double result;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unsigned int v113;
  _QWORD *v114;
  uint64_t v117;
  std::__shared_weak_count *v118;
  void (**v119)(ims::CFType *__hidden);
  CFTypeRef cf;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  void *__p;
  std::__shared_weak_count *v132;
  uint64_t v133;
  void (**v134)(ImsResult *__hidden);
  uint64_t *v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  dispatch_object_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  dispatch_object_t v143[3];

  v130 = 0uLL;
  v10 = (std::__shared_weak_count *)operator new(0x108uLL);
  v11 = v10;
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEC78;
  v13 = &v10[1].__vftable;
  v14 = *a1;
  v15 = (std::__shared_weak_count *)a1[1];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
  }
  v134 = v14;
  v135 = (uint64_t *)v15;
  MsrpTransportTls::MsrpTransportTls((uint64_t)&v10[1], &v134);
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BECC8;
    v11[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78BED30;
    v11[4].__shared_owners_ = (uint64_t)&unk_1E78BED80;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BECC8;
    v11[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78BED30;
    v11[4].__shared_owners_ = (uint64_t)&unk_1E78BED80;
  }
  *(_QWORD *)&v130 = v13;
  *((_QWORD *)&v130 + 1) = v11;
  shared_weak_owners = (std::__shared_weak_count *)v11[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_28;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    v11[1].__shared_owners_ = (uint64_t)v13;
    v11[1].__shared_weak_owners_ = (uint64_t)v11;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    v27 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v11[1].__shared_owners_ = (uint64_t)v13;
    v11[1].__shared_weak_owners_ = (uint64_t)v11;
  }
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_28:
  v129 = 0;
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v30 = (_QWORD *)v130;
  v31 = a2[1];
  v123 = *a2;
  v124 = (std::__shared_weak_count *)v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = a3[1];
  v121 = *a3;
  v122 = (std::__shared_weak_count *)v34;
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = *(const void **)(a4 + 8);
  v119 = off_1E78EAB00;
  cf = v37;
  if (v37)
    CFRetain(v37);
  v119 = (void (**)(ims::CFType *__hidden))&off_1E78B7BD8;
  v38 = (_QWORD *)(v130 + 32);
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v130 + 32), &v123);
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](v30 + 6, &v121);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v140, v30 + 1);
  v39 = (std::__shared_weak_count *)operator new(0xF0uLL);
  v40 = v39;
  v39->__shared_owners_ = 0;
  v39->__shared_weak_owners_ = 0;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEAA8;
  v41 = v39 + 1;
  v42 = v141;
  if (v140)
    v43 = v140 + 3;
  else
    v43 = 0;
  v134 = (void (**)(ImsResult *__hidden))v43;
  v135 = (uint64_t *)v141;
  v140 = 0;
  v141 = 0;
  ImsTlsSocket::ImsTlsSocket((uint64_t)&v39[1], (uint64_t *)&v134, 0, 0);
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  __p = v41;
  v132 = v40;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&__p, &v40[1].__shared_owners_, (uint64_t)v41);
  v46 = v132;
  if (__p)
    v47 = (char *)__p + 80;
  else
    v47 = 0;
  __p = 0;
  v132 = 0;
  v48 = (std::__shared_weak_count *)v30[26];
  v30[25] = v47;
  v30[26] = v46;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v132;
  if (v132)
  {
    v52 = (unint64_t *)&v132->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v141;
  if (v141)
  {
    v55 = (unint64_t *)&v141->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v38 + 64))(*v38, 0);
  v114 = v30 + 4;
  v126 = 0uLL;
  v129 = 0;
  v128 = 0uLL;
  *(_QWORD *)&v125 = &off_1E78B7238;
  *((_QWORD *)&v125 + 1) = &_bambiDomain;
  v127 = 0uLL;
  v57 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 128))(v123);
  v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 128))(v121);
  v59 = v57[23];
  if ((v59 & 0x80u) == 0)
    v60 = v57[23];
  else
    v60 = *((_QWORD *)v57 + 1);
  v61 = *(unsigned __int8 *)(v58 + 23);
  v62 = (char)v61;
  if ((v61 & 0x80u) != 0)
    v61 = *(_QWORD *)(v58 + 8);
  if (v60 != v61)
    goto LABEL_77;
  if (v62 >= 0)
    v63 = (unsigned __int8 *)v58;
  else
    v63 = *(unsigned __int8 **)v58;
  if ((v59 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v57, v63, *((_QWORD *)v57 + 1)))
      goto LABEL_77;
LABEL_80:
    v71 = v30[25];
    __p = 0;
    v132 = 0;
    v133 = 0;
    v72 = sImsDispatchQueue;
    if (sImsDispatchQueue)
    {
      v143[0] = (dispatch_object_t)sImsDispatchQueue;
    }
    else
    {
      v72 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v72;
      v143[0] = v72;
      if (!v72)
      {
LABEL_92:
        v140 = (dispatch_object_t)off_1E78EAB00;
        v141 = (std::__shared_weak_count *)cf;
        if (cf)
          CFRetain(cf);
        v140 = (dispatch_object_t)&off_1E78B7BD8;
        LOBYTE(v113) = 0;
        (*(void (**)(void (***__return_ptr)(ImsResult *__hidden), uint64_t, uint64_t *, uint64_t *, void **, dispatch_object_t *, _QWORD *, uint64_t, dispatch_object_t *, uint64_t, _QWORD))(*(_QWORD *)v71 + 16))(&v134, v71, &v123, &v121, &__p, v143, v30 + 27, 1, &v140, a5, v113);
        ImsResult::operator=((uint64_t)&v125, (uint64_t)&v134);
        ImsResult::~ImsResult((ImsResult *)&v134);
        ims::CFType::~CFType((ims::CFType *)&v140);
        if (v143[0])
          dispatch_release(v143[0]);
        if (SHIBYTE(v133) < 0)
          operator delete(__p);
        goto LABEL_98;
      }
    }
    dispatch_retain(v72);
    goto LABEL_92;
  }
  if (!v57[23])
    goto LABEL_80;
  while (*v57 == *v63)
  {
    ++v57;
    ++v63;
    if (!--v59)
      goto LABEL_80;
  }
LABEL_77:
  v64 = (*(uint64_t (**)(_QWORD *))(v30[10] + 64))(v30 + 10);
  (*(void (**)(_QWORD *, uint64_t))(v30[10] + 16))(v30 + 10, v64);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)"Ignoring local address recommendation ", 38);
  *(_BYTE *)(v64 + 17) = 0;
  v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 128))(v123);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 32))(v64, v65);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)" to match destination address type ", 35);
  *(_BYTE *)(v64 + 17) = 0;
  v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 128))(v121);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 32))(v64, v66);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v64 + 17) = 0;
  v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 72))(v121);
  v68 = socket(*(unsigned __int8 *)(v67 + 1), 1, 0);
  if ((_DWORD)v68 != -1)
  {
    v69 = v30[25];
    v70 = sImsDispatchQueue;
    if (sImsDispatchQueue)
    {
      v140 = (dispatch_object_t)sImsDispatchQueue;
    }
    else
    {
      v70 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v70;
      v140 = v70;
      if (!v70)
      {
LABEL_86:
        __p = off_1E78EAB00;
        v132 = (std::__shared_weak_count *)cf;
        if (cf)
          CFRetain(cf);
        __p = &off_1E78B7BD8;
        (*(void (**)(void (***__return_ptr)(ImsResult *__hidden), uint64_t, uint64_t, uint64_t *, dispatch_object_t *, _QWORD *, uint64_t, void **, uint64_t, _DWORD))(*(_QWORD *)v69 + 24))(&v134, v69, v68, &v121, &v140, v30 + 27, 1, &__p, a5, 0);
        ImsResult::operator=((uint64_t)&v125, (uint64_t)&v134);
        ImsResult::~ImsResult((ImsResult *)&v134);
        ims::CFType::~CFType((ims::CFType *)&__p);
        if (v140)
          dispatch_release(v140);
        goto LABEL_98;
      }
    }
    dispatch_retain(v70);
    goto LABEL_86;
  }
  v73 = *__error();
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v134 = &off_1E78B7238;
  v135 = &_posixDomain;
  LODWORD(v136) = v73;
  ImsResult::operator=((uint64_t)&v125, (uint64_t)&v134);
  ImsResult::~ImsResult((ImsResult *)&v134);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v125 + 1) + 24))(*((_QWORD *)&v125 + 1), v126) & 1) == 0)
  {
    v137 = 0u;
    v138 = 0u;
    v139 = 0u;
    v134 = &off_1E78B7238;
    v135 = &_bambiDomain;
    LODWORD(v136) = 1073741842;
    ImsResult::operator=((uint64_t)&v125, (uint64_t)&v134);
    ImsResult::~ImsResult((ImsResult *)&v134);
  }
LABEL_98:
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v134 = &off_1E78B7238;
  v135 = &_bambiDomain;
  LODWORD(v136) = 0;
  if (*((uint64_t **)&v125 + 1) == &_bambiDomain)
  {
    v74 = v126;
    ImsResult::~ImsResult((ImsResult *)&v134);
    if (!v74)
    {
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v30[25] + 136))(&v134);
      std::shared_ptr<IpAddress>::operator=[abi:ne180100](v114, (uint64_t *)&v134);
      v75 = (std::__shared_weak_count *)v135;
      if (v135)
      {
        v76 = (unint64_t *)(v135 + 1);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = (*(uint64_t (**)(_QWORD *))(v30[10] + 64))(v30 + 10);
      (*(void (**)(_QWORD *, uint64_t))(v30[10] + 16))(v30 + 10, v78);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)"initialized on local port ", 26);
      *(_BYTE *)(v78 + 17) = 0;
      (*(void (**)(_QWORD))(*(_QWORD *)*v114 + 56))(*v114);
      std::ostream::operator<<();
      *(_BYTE *)(v78 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v78 + 17) = 0;
      v80 = v30[8];
      v79 = (std::__shared_weak_count *)v30[9];
      if (v79)
      {
        v81 = (unint64_t *)&v79->__shared_weak_owners_;
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      v134 = 0;
      v135 = 0;
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v30[25] + 104))(&v134);
      v83 = sImsDispatchQueue;
      if (!sImsDispatchQueue)
      {
        v83 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
        sImsDispatchQueue = (uint64_t)v83;
      }
      if (v79)
      {
        v84 = (unint64_t *)&v79->__shared_weak_owners_;
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v86 = v134;
      v87 = v135;
      if (v135)
      {
        v88 = (unint64_t *)(v135 + 1);
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      v90 = (_QWORD *)operator new();
      *v90 = v80;
      v90[1] = v79;
      v90[2] = v86;
      v90[3] = v87;
      v142 = 0;
      v143[0] = 0;
      dispatch_async_f(v83, v90, (dispatch_function_t)dispatch::async<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>(dispatch_queue_s *,std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>)::{lambda(void *)#1}::__invoke);
      std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>::~unique_ptr[abi:ne180100](&v142);
      std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)v143);
      v91 = (std::__shared_weak_count *)v135;
      if (v135)
      {
        v92 = (unint64_t *)(v135 + 1);
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      if (v79)
        std::__shared_weak_count::__release_weak(v79);
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v134);
  }
  ims::CFType::~CFType((ims::CFType *)&v119);
  v94 = v122;
  if (v122)
  {
    v95 = (unint64_t *)&v122->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v124;
  if (v124)
  {
    v98 = (unint64_t *)&v124->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v134 = &off_1E78B7238;
  v135 = &_bambiDomain;
  LODWORD(v136) = 0;
  if (*((uint64_t **)&v125 + 1) == &_bambiDomain)
  {
    v100 = v126;
    ImsResult::~ImsResult((ImsResult *)&v134);
    if (!v100)
    {
      ImsResult::~ImsResult((ImsResult *)&v125);
      result = *(double *)&v130;
      *(_OWORD *)a6 = v130;
      return result;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v134);
  }
  v134 = 0;
  v135 = 0;
  v136 = 0;
  if (*a1)
    (*((void (**)(_QWORD *__return_ptr))**a1 + 6))(&v134);
  else
    std::string::basic_string[abi:ne180100]<0>(&v134, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "msrp.tport");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v101 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v134);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v101 + 8), (uint64_t)"Failed to init connection! ", 27);
  *(_BYTE *)(v101 + 17) = 0;
  (*(void (**)(__int128 *, uint64_t))(v125 + 16))(&v125, v101);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v101 + 64))(v101, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v101 + 17) = 0;
  if (SHIBYTE(v133) < 0)
    operator delete(__p);
  v102 = *a1;
  if (*a1)
  {
    v103 = a3[1];
    v117 = *a3;
    v118 = (std::__shared_weak_count *)v103;
    if (v103)
    {
      v104 = (unint64_t *)(v103 + 8);
      do
        v105 = __ldxr(v104);
      while (__stxr(v105 + 1, v104));
    }
    (*((void (**)(void (**)(ImsResult *__hidden), uint64_t *))*v102 + 3))(v102, &v117);
    v106 = v118;
    if (v118)
    {
      v107 = (unint64_t *)&v118->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
  }
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  if (SHIBYTE(v136) < 0)
    operator delete(v134);
  ImsResult::~ImsResult((ImsResult *)&v125);
  v110 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
  if (*((_QWORD *)&v130 + 1))
  {
    v111 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  return result;
}

void sub_1BEE72238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::__shared_weak_count *v40;

  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  ImsResult::~ImsResult((ImsResult *)&a23);
  ims::CFType::~CFType((ims::CFType *)&a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void MsrpTransportTls::send(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void (**v18)(ImsResult *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v20;
  _BYTE v21[72];
  void (**v22)(ImsResult *__hidden);
  uint64_t *v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[2];
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v5 = *(_QWORD *)(a1 + 200);
  if (v5)
  {
    v32 = 0;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(&v28, v5, a2);
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v22 = &off_1E78B7238;
    v23 = &_bambiDomain;
    v24 = 0;
    if (*((uint64_t **)&v28 + 1) == &_bambiDomain)
    {
      v13 = v29;
      ImsResult::~ImsResult((ImsResult *)&v22);
      if (!v13)
      {
LABEL_21:
        ImsResult::~ImsResult((ImsResult *)&v28);
        return;
      }
    }
    else
    {
      ImsResult::~ImsResult((ImsResult *)&v22);
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 56))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"send ", 5);
    *(_BYTE *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" bytes failed to ", 17);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v14);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    v15 = *(std::__shared_weak_count **)(a1 + 72);
    if (v15)
    {
      v16 = std::__shared_weak_count::lock(v15);
      v23 = (uint64_t *)v16;
      if (v16)
      {
        v17 = v16;
        v18 = *(void (***)(ImsResult *__hidden))(a1 + 64);
        v22 = v18;
        if (v18)
        {
          ImsResult::ImsResult((ImsResult *)v21, (const ImsResult *)&v28);
          (*((void (**)(void (**)(ImsResult *__hidden), uint64_t, _BYTE *))*v18 + 5))(v18, a3, v21);
          ImsResult::~ImsResult((ImsResult *)v21);
        }
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    goto LABEL_21;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 56))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"drop ", 5);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" bytes on null socket", 21);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 72);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    *((_QWORD *)&v28 + 1) = v8;
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)&v28 = v10;
      if (v10)
      {
        v35 = 0u;
        v37 = 0u;
        v36 = 0u;
        v33[0] = &off_1E78B7238;
        v33[1] = &_bambiDomain;
        v34 = 1073741840;
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v10 + 40))(v10, a3, v33);
        ImsResult::~ImsResult((ImsResult *)v33);
      }
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BEE72748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  ImsResult::~ImsResult((ImsResult *)(v27 - 136));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

ImsOutStream *MsrpTransportTls::toStream(MsrpTransportTls *this, ImsOutStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *__p[2];
  uint64_t v9;

  v4 = *((_QWORD *)this + 4);
  if (!v4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"MSRP secure transport w/o local info", 36);
    *((_BYTE *)a2 + 17) = 0;
    goto LABEL_5;
  }
  v5 = *((_QWORD *)this + 6);
  (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)v4 + 40))(v4, a2);
  v6 = (_QWORD *)*((_QWORD *)a2 + 1);
  if (v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" <-> ", 5);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(_QWORD, ImsOutStream *))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), a2);
LABEL_5:
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    return a2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" is ", 4);
  *((_BYTE *)a2 + 17) = 0;
  if (*((_QWORD *)this + 23))
  {
    __p[0] = 0;
    __p[1] = 0;
    v9 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "not ");
  }
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 32))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"listening", 9);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return a2;
}

void sub_1BEE728E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MsrpTransportTls::handleIncomingConnection(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v4 = a1 + 25;
  v5 = a1[25];
  v6 = a1 + 10;
  v7 = (*(uint64_t (**)(_QWORD *))(a1[10] + 56))(a1 + 10);
  (*(void (**)(_QWORD *, uint64_t))(*v6 + 16))(v6, v7);
  v8 = *(_QWORD **)(v7 + 8);
  if (v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"socket already set: ", 20);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v4 + 104))(&v38);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" ignoring: ", 11);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 104))(&v36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 40))(v36, v7);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    v9 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v39;
    if (v39)
    {
      v13 = (unint64_t *)&v39->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
LABEL_40:
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"incoming connection ", 20);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 104))(&v38);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v7);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    v15 = v39;
    if (v39)
    {
      v16 = (unint64_t *)&v39->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](v4, a2);
    v18 = a1[25];
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v38, a1 + 1);
    if (v38)
      v19 = v38 + 24;
    else
      v19 = 0;
    v34 = v19;
    v35 = v39;
    v38 = 0;
    v39 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 184))(v18, &v34);
    v20 = v35;
    if (v35)
    {
      v21 = (unint64_t *)&v35->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v39;
    if (v39)
    {
      v24 = (unint64_t *)&v39->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v38 = 0;
    v39 = 0;
    v26 = (std::__shared_weak_count *)a1[9];
    if (v26)
    {
      v39 = std::__shared_weak_count::lock(v26);
      if (v39)
      {
        v27 = a1[8];
        v38 = v27;
        if (v27)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 104))(&v32);
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 16))(v27, &v32);
          v28 = v33;
          if (v33)
          {
            v29 = (unint64_t *)&v33->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
      }
    }
    v12 = v39;
    if (v39)
    {
      v31 = (unint64_t *)&v39->__shared_owners_;
      do
        v14 = __ldaxr(v31);
      while (__stlxr(v14 - 1, v31));
      goto LABEL_40;
    }
  }
}

void sub_1BEE72C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MsrpTransportTls::handleDisconnect(MsrpTransportTls *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v2)
  {
    v13 = std::__shared_weak_count::lock(v2);
    if (v13)
    {
      v3 = *((_QWORD *)this + 8);
      v12 = v3;
      if (v3)
      {
        (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 25) + 104))(&v10);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 24))(v3, &v10);
        v4 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
      }
    }
  }
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 25);
}

void sub_1BEE72DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void MsrpTransportTls::connectionClosedByPeer(MsrpTransportTls *this)
{
  _QWORD **v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (_QWORD **)((char *)this + 80);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 56))((char *)this + 80);
  ((void (*)(_QWORD **, uint64_t))(*v2)[2])(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"closed by peer ", 15);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v2[15] + 104))(&v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v3);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  MsrpTransportTls::handleDisconnect(this);
}

void sub_1BEE72EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MsrpTransportTls::connectionClosedByPeer(MsrpTransportTls *this)
{
  MsrpTransportTls::connectionClosedByPeer((MsrpTransportTls *)((char *)this - 24));
}

void MsrpTransportTls::connectionResetByPeer(MsrpTransportTls *this)
{
  _QWORD **v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (_QWORD **)((char *)this + 80);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 56))((char *)this + 80);
  ((void (*)(_QWORD **, uint64_t))(*v2)[2])(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"reset by peer ", 14);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v2[15] + 104))(&v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v3);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  MsrpTransportTls::handleDisconnect(this);
}

void sub_1BEE72FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MsrpTransportTls::connectionResetByPeer(MsrpTransportTls *this)
{
  MsrpTransportTls::connectionResetByPeer((MsrpTransportTls *)((char *)this - 24));
}

void MsrpTransportTls::handleConnectError(MsrpTransportTls *this, const ImsResult *a2)
{
  _QWORD **v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char v12;

  v4 = (_QWORD **)((char *)this + 80);
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 56))((char *)this + 80);
  ((void (*)(_QWORD **, uint64_t))(*v4)[2])(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"connection error ", 17);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v4[15] + 104))(&v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v5);
  v6 = *(_QWORD **)(v5 + 8);
  v12 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v12, 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  MsrpTransportTls::handleDisconnect(this);
}

void sub_1BEE7311C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MsrpTransportTls::handleConnectError(MsrpTransportTls *this, const ImsResult *a2)
{
  MsrpTransportTls::handleConnectError((MsrpTransportTls *)((char *)this - 24), a2);
}

void MsrpTransportTls::handleSocketError(MsrpTransportTls *this, const ImsResult *a2)
{
  _QWORD **v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char v12;

  v4 = (_QWORD **)((char *)this + 80);
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 56))((char *)this + 80);
  ((void (*)(_QWORD **, uint64_t))(*v4)[2])(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"socket error ", 13);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v4[15] + 104))(&v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v5);
  v6 = *(_QWORD **)(v5 + 8);
  v12 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v12, 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  MsrpTransportTls::handleDisconnect(this);
}

void sub_1BEE73260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MsrpTransportTls::handleSocketError(MsrpTransportTls *this, const ImsResult *a2)
{
  MsrpTransportTls::handleSocketError((MsrpTransportTls *)((char *)this - 24), a2);
}

void MsrpTransportTls::processDataFromSocket(_QWORD *a1, void *a2, size_t a3, _QWORD *a4)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  v7 = (std::__shared_weak_count *)a1[9];
  if (!v7)
  {
    v9 = 0;
    goto LABEL_7;
  }
  v9 = std::__shared_weak_count::lock(v7);
  v22 = v9;
  if (!v9 || (v10 = a1[8], (v21 = v10) == 0))
  {
LABEL_7:
    v15 = a1[10];
    v14 = a1 + 10;
    v16 = (*(uint64_t (**)(_QWORD *))(v15 + 56))(v14);
    (*(void (**)(_QWORD *, uint64_t))(*v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"No delegate: dropping ", 22);
    *(_BYTE *)(v16 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v16 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" bytes from ", 12);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 40))(*a4, v16);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (!v9)
      return;
    goto LABEL_8;
  }
  v12 = a1[10];
  v11 = a1 + 10;
  v13 = (*(uint64_t (**)(_QWORD *))(v12 + 64))(v11);
  (*(void (**)(_QWORD *, uint64_t))(*v11 + 16))(v11, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Received ", 9);
  *(_BYTE *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" bytes from ", 12);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 40))(*a4, v13);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v20 = 0;
  std::string::basic_string[abi:ne180100](__p, a2, a3);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, __p);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
LABEL_8:
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1BEE73494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MsrpTransportTls::processDataFromSocket(uint64_t a1, void *a2, size_t a3, _QWORD *a4)
{
  MsrpTransportTls::processDataFromSocket((_QWORD *)(a1 - 24), a2, a3, a4);
}

_QWORD *MsrpTransportTls::type@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "TLS");
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::allocate_shared[abi:ne180100]<ImsListenSocket,std::allocator<ImsListenSocket>,std::shared_ptr<MsrpTransportInterface>,DscpClass,void>(uint64_t *a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0xA0uLL);
  std::__shared_ptr_emplace<ImsListenSocket>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<MsrpTransportInterface>,DscpClass,std::allocator<ImsListenSocket>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1BEE735E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ImsListenSocket>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<MsrpTransportInterface>,DscpClass,std::allocator<ImsListenSocket>,0>(_QWORD *a1, uint64_t *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78BEA58;
  std::construct_at[abi:ne180100]<ImsListenSocket,std::shared_ptr<MsrpTransportInterface>,DscpClass,ImsListenSocket*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1BEE73628(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ImsListenSocket>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEA58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsListenSocket>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEA58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<ImsListenSocket>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<ImsListenSocket,std::shared_ptr<MsrpTransportInterface>,DscpClass,ImsListenSocket*>(uint64_t a1, uint64_t *a2, int *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v8[0] = *a2;
  v8[1] = (uint64_t)v4;
  *a2 = 0;
  a2[1] = 0;
  ImsListenSocket::ImsListenSocket(a1, v8, *a3);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1BEE73700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ImsTlsSocket>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEAA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsTlsSocket>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEAA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<ImsTlsSocket>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

uint64_t *std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 + 16);
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    MEMORY[0x1C3B87100](v2, 0x20C40DC1BFBCFLL);
  }
  return a1;
}

uint64_t *dispatch::async<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>(dispatch_queue_s *,std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v15 = a1;
  v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *a1;
      if (*a1)
      {
        v6 = (std::__shared_weak_count *)a1[3];
        v16 = a1[2];
        v17 = v6;
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldxr(p_shared_owners);
          while (__stxr(v8 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 16))(v5, &v16);
        v9 = v17;
        if (v17)
        {
          v10 = (unint64_t *)&v17->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      v12 = (unint64_t *)&v4->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v15);
}

void sub_1BEE738A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v14 = a12;
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (unint64_t *)&v12->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper,std::allocator<MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEAF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper,std::allocator<MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEAF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper,std::allocator<MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper::~MsrpTransportTlsWrapper(MsrpTransportTls *a1)
{
  MsrpTransportTls::~MsrpTransportTls(a1);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'MsrpTransportTls::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,BOOL,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper::~MsrpTransportTlsWrapper(uint64_t a1)
{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)(a1 - 24));
}

{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)(a1 - 24));
  JUMPOUT(0x1C3B87100);
}

{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)(a1 - 80));
}

{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)(a1 - 80));
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper,std::allocator<MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEC78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper,std::allocator<MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEC78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper,std::allocator<MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper::~MsrpTransportTlsWrapper(MsrpTransportTls *a1)
{
  MsrpTransportTls::~MsrpTransportTls(a1);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'MsrpTransportTls::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::MsrpTransportTlsWrapper::~MsrpTransportTlsWrapper(uint64_t a1)
{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)(a1 - 24));
}

{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)(a1 - 24));
  JUMPOUT(0x1C3B87100);
}

{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)(a1 - 80));
}

{
  MsrpTransportTls::~MsrpTransportTls((MsrpTransportTls *)(a1 - 80));
  JUMPOUT(0x1C3B87100);
}

void SipDialogInfoBody::SipDialogInfoBody(SipDialogInfoBody *this)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "<?xml version=\"1.0\" encoding=\"UTF-8\"?><dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"></dialog-info>");
  SipGenericXmlBody::SipGenericXmlBody(this, &SipDialogInfoBody::kContentType, (uint64_t)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = &off_1E78BEDF8;
  *((_BYTE *)this + 240) = 1;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 31) = (char *)this + 256;
  *((_BYTE *)this + 272) = 1;
  *((_DWORD *)this + 69) = 0;
  *((_BYTE *)this + 280) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 36) = 0;
}

void sub_1BEE73B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipGenericXmlBody::~SipGenericXmlBody(void **this)
{
  *this = off_1E78C5ED8;
  XmlParserGenericItem::~XmlParserGenericItem((XmlParserGenericItem *)(this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  *this = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78C5ED8;
  XmlParserGenericItem::~XmlParserGenericItem((XmlParserGenericItem *)(this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  *this = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78C5ED8;
  XmlParserGenericItem::~XmlParserGenericItem((XmlParserGenericItem *)(this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  *this = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

void SipDialogTable::~SipDialogTable(void **this)
{
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy((uint64_t)this, this[1]);
}

double SipDialogInfoBody::setContent@<D0>(uint64_t a1@<X0>, bambi::XmlParser *a2@<X1>, uint64_t a3@<X2>, bambi::XmlParserItem *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t **v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  double result;
  uint64_t v16;
  int v17;
  std::string::size_type size;
  std::string *p_str;
  BOOL v20;
  int v21;
  std::string *v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v32;
  int v33;
  int v35;
  int v36;
  void **v37;
  std::string *v38;
  uint64_t *v39;
  void **v40;
  void **v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  std::string::size_type v50;
  int v51;
  std::string *v52;
  std::string::size_type v53;
  int v54;
  BOOL v55;
  BOOL v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t **v59;
  char v60;
  uint64_t v61;
  uint64_t *v62;
  int v63;
  int v64;
  BOOL v65;
  int v66;
  int v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  uint64_t *v72;
  char *v73;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  BOOL v78;
  int v79;
  uint64_t *v80;
  int v81;
  int v82;
  char v84;
  uint64_t *v85;
  int v86;
  int v87;
  char v89;
  uint64_t *v90;
  int v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  int v97;
  int v98;
  const char *v99;
  void *v100;
  int v101;
  int v102;
  void *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v107;
  int v108;
  _BYTE *v109;
  char v110;
  _BYTE *v111;
  int v112;
  int v113;
  int v115;
  int v116;
  int v117;
  int v118;
  char v119;
  int v120;
  char v121;
  std::string *v122;
  std::string *v123;
  std::string *v124;
  void **v125;
  void **v126;
  char v127[8];
  uint64_t v128;
  unsigned int v129;
  void *v130;
  _QWORD *v131;
  uint64_t v132;
  std::string __str;
  void *__p;
  uint64_t *v135;
  uint64_t v136;
  std::string v137;
  std::string v138;
  std::string v139;
  std::string v140;
  std::string v141;
  std::string v142;
  _BYTE v143[32];
  __int128 v144;
  std::string v145;
  std::string v146;
  std::string v147;

  SipGenericXmlBody::setContent(a1, a2, a3, a4, (uint64_t)v127);
  if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v128 + 24))(v128, v129) & 1) != 0)
    goto LABEL_13;
  v7 = (uint64_t **)(a1 + 248);
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(a1 + 248, *(_QWORD **)(a1 + 256));
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_BYTE *)(a1 + 280) = 0;
  v8 = *(unsigned __int8 *)(a1 + 143);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 128);
  if (v8 != 11
    || (v9 >= 0 ? (v10 = (uint64_t *)(a1 + 120)) : (v10 = *(uint64_t **)(a1 + 120)),
        (v11 = *v10, v12 = *(uint64_t *)((char *)v10 + 3), v11 == 0x692D676F6C616964)
      ? (v13 = v12 == 0x6F666E692D676F6CLL)
      : (v13 = 0),
        !v13))
  {
    *(_BYTE *)(a1 + 240) = 0;
LABEL_13:
    ImsResult::~ImsResult((ImsResult *)v127);
    goto LABEL_14;
  }
  memset(&__str, 0, sizeof(__str));
  std::string::basic_string[abi:ne180100]<0>(v143, "state");
  v16 = a1 + 56;
  v17 = (*(uint64_t (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)(a1 + 56) + 104))(a1 + 56, v143, &__str);
  if ((v143[23] & 0x80000000) != 0)
    operator delete(*(void **)v143);
  if (v17)
  {
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      if (size == 4)
      {
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        v20 = LODWORD(p_str->__r_.__value_.__l.__data_) == 1819047270;
      }
      else
      {
        v20 = 0;
      }
      *(_BYTE *)(a1 + 272) = v20;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v143, "version");
  v21 = (*(uint64_t (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v16 + 104))(a1 + 56, v143, &__str);
  if ((v143[23] & 0x80000000) != 0)
    operator delete(*(void **)v143);
  if (v21)
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__str.__r_.__value_.__l.__size_)
        goto LABEL_37;
      v22 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
        goto LABEL_37;
      v22 = &__str;
    }
    *(_DWORD *)(a1 + 276) = strtoul((const char *)v22, 0, 10);
    *(_BYTE *)(a1 + 280) = 1;
  }
LABEL_37:
  std::string::basic_string[abi:ne180100]<0>(v143, "entity");
  v23 = (*(uint64_t (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v16 + 104))(a1 + 56, v143, &__str);
  v24 = v23;
  if ((v143[23] & 0x80000000) == 0)
  {
    if (!v23)
      goto LABEL_42;
    goto LABEL_41;
  }
  operator delete(*(void **)v143);
  if (v24)
LABEL_41:
    std::string::operator=((std::string *)(a1 + 288), &__str);
LABEL_42:
  v130 = 0;
  v131 = 0;
  v132 = 0;
  std::vector<XmlParserGenericItem *>::__init_with_size[abi:ne180100]<XmlParserGenericItem **,XmlParserGenericItem **>(&v130, *(const void **)(a1 + 216), *(_QWORD *)(a1 + 224), (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 3);
  v26 = v130;
  v25 = v131;
  if (v130 == v131)
  {
LABEL_305:
    if (v26)
    {
      v131 = v26;
      operator delete(v26);
    }
    v121 = 1;
    goto LABEL_308;
  }
  v125 = (void **)(a1 + 256);
  while (1)
  {
    v27 = *v26;
    if (!*v26)
      goto LABEL_300;
    v28 = *(unsigned __int8 *)(v27 + 87);
    v29 = (char)v28;
    if ((v28 & 0x80u) != 0)
      v28 = *(_QWORD *)(v27 + 72);
    if (v28 != 6)
      goto LABEL_300;
    v30 = v29 >= 0 ? v27 + 64 : *(_QWORD *)(v27 + 64);
    if (*(_DWORD *)v30 != 1818323300 || *(_WORD *)(v30 + 4) != 26479)
      goto LABEL_300;
    v32 = *(_DWORD *)v30;
    v33 = *(unsigned __int16 *)(v30 + 4);
    if (v32 != 1818323300 || v33 != 26479)
      break;
    memset(&v140, 0, sizeof(v140));
    memset(&v139, 0, sizeof(v139));
    std::string::basic_string[abi:ne180100]<0>(v143, "id");
    v35 = (*(uint64_t (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v27 + 104))(v27, v143, &v140);
    v36 = v35;
    if ((v143[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v143);
      if (!v36)
        goto LABEL_66;
LABEL_65:
      std::string::operator=(&v139, &v140);
      goto LABEL_66;
    }
    if (v35)
      goto LABEL_65;
LABEL_66:
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v138, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
    else
      v138 = v139;
    v37 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v7, (void **)&v138.__r_.__value_.__l.__data_);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
    if (v125 == v37)
    {
      v38 = (std::string *)operator new();
      bzero(v38, 0x258uLL);
      SipDialogInfo::SipDialogInfo((SipDialogInfo *)v38);
      std::string::operator=(v38, &v139);
      if (v125 != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v7, (void **)&v38->__r_.__value_.__l.__data_))
      {
        *(_QWORD *)v143 = v38;
        if (std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)&v38->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)v143)+ 7 == (uint64_t *)v38)
        {
LABEL_76:
          SipDialogInfo::~SipDialogInfo((void **)&v38->__r_.__value_.__l.__data_);
          MEMORY[0x1C3B87100]();
          goto LABEL_77;
        }
        std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__erase_unique<std::string>(v7, (void **)&v38->__r_.__value_.__l.__data_);
      }
      *(_QWORD *)v143 = v38;
      v39 = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)&v38->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)v143);
      SipDialogInfo::operator=((uint64_t)(v39 + 7), (uint64_t)v38);
      goto LABEL_76;
    }
LABEL_77:
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v137, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
    else
      v137 = v139;
    v40 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v7, (void **)&v137.__r_.__value_.__l.__data_);
    if (v125 == v40)
      v41 = 0;
    else
      v41 = v40 + 7;
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v137.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(v143, "call-id");
    v42 = (*(uint64_t (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v27 + 104))(v27, v143, &v140);
    v43 = v42;
    if ((v143[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v143);
      if (!v43)
        goto LABEL_90;
LABEL_89:
      std::string::operator=((std::string *)v41 + 1, &v140);
      goto LABEL_90;
    }
    if (v42)
      goto LABEL_89;
LABEL_90:
    std::string::basic_string[abi:ne180100]<0>(v143, "local-tag");
    v44 = (*(uint64_t (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v27 + 104))(v27, v143, &v140);
    v45 = v44;
    if ((v143[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v143);
      if (!v45)
        goto LABEL_95;
LABEL_94:
      std::string::operator=((std::string *)v41 + 2, &v140);
      goto LABEL_95;
    }
    if (v44)
      goto LABEL_94;
LABEL_95:
    std::string::basic_string[abi:ne180100]<0>(v143, "remote-tag");
    v46 = (*(uint64_t (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v27 + 104))(v27, v143, &v140);
    v47 = v46;
    if ((v143[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v143);
      if (!v47)
        goto LABEL_100;
LABEL_99:
      std::string::operator=((std::string *)v41 + 3, &v140);
      goto LABEL_100;
    }
    if (v46)
      goto LABEL_99;
LABEL_100:
    std::string::basic_string[abi:ne180100]<0>(v143, "direction");
    v48 = (*(uint64_t (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v27 + 104))(v27, v143, &v140);
    v49 = v48;
    if ((v143[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v143);
      if (!v49)
        goto LABEL_121;
    }
    else if (!v48)
    {
      goto LABEL_121;
    }
    v143[0] = 1;
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v143[8], v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
      v50 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v50 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
      *(std::string *)&v143[8] = v140;
    }
    v51 = (char)v50;
    if ((v50 & 0x80u) != 0)
      v50 = v140.__r_.__value_.__l.__size_;
    if (v50 == 9)
    {
      v52 = (std::string *)v140.__r_.__value_.__r.__words[0];
      if (v51 >= 0)
        v52 = &v140;
      v53 = v52->__r_.__value_.__r.__words[0];
      v54 = v52->__r_.__value_.__s.__data_[8];
      v55 = v53 == 0x6F74616974696E69 && v54 == 114;
      v56 = v55;
    }
    else
    {
      v56 = 0;
    }
    LOBYTE(v144) = v56;
    *((_BYTE *)v41 + 96) = v143[0];
    std::string::operator=((std::string *)(v41 + 13), (const std::string *)&v143[8]);
    *((_BYTE *)v41 + 128) = v144;
    if ((v143[31] & 0x80000000) != 0)
      operator delete(*(void **)&v143[8]);
LABEL_121:
    v126 = v41;
    __p = 0;
    v135 = 0;
    v136 = 0;
    std::vector<XmlParserGenericItem *>::__init_with_size[abi:ne180100]<XmlParserGenericItem **,XmlParserGenericItem **>(&__p, *(const void **)(v27 + 160), *(_QWORD *)(v27 + 168), (uint64_t)(*(_QWORD *)(v27 + 168) - *(_QWORD *)(v27 + 160)) >> 3);
    v57 = (uint64_t *)__p;
    if (__p != v135)
    {
      v124 = (std::string *)(v41 + 18);
      v122 = (std::string *)(v41 + 37);
      v123 = (std::string *)(v41 + 34);
      while (1)
      {
        v58 = *v57;
        if (!*v57)
          goto LABEL_285;
        v59 = (uint64_t **)(v58 + 64);
        v60 = *(_BYTE *)(v58 + 87);
        v61 = v60 >= 0 ? *(unsigned __int8 *)(v58 + 87) : *(_QWORD *)(v58 + 72);
        if (v61 != 8)
          break;
        if (v60 >= 0)
          v68 = (uint64_t *)(v58 + 64);
        else
          v68 = *v59;
        if (*v68 != 0x6E6F697461727564)
          goto LABEL_144;
        memset(v143, 0, 24);
        if (*(char *)(v58 + 111) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v143, *(const std::string::value_type **)(v58 + 88), *(_QWORD *)(v58 + 96));
        }
        else
        {
          *(_OWORD *)v143 = *(_OWORD *)(v58 + 88);
          *(_QWORD *)&v143[16] = *(_QWORD *)(v58 + 104);
        }
        if ((v143[23] & 0x80000000) != 0)
        {
          if (!*(_QWORD *)&v143[8])
            goto LABEL_213;
          v99 = *(const char **)v143;
        }
        else
        {
          if (!v143[23])
            goto LABEL_285;
          v99 = v143;
        }
        *((_DWORD *)v126 + 45) = strtoul(v99, 0, 10);
        *((_BYTE *)v126 + 184) = 1;
        if ((v143[23] & 0x80000000) != 0)
        {
LABEL_213:
          v100 = *(void **)v143;
LABEL_284:
          operator delete(v100);
        }
LABEL_285:
        if (++v57 == v135)
        {
          v57 = (uint64_t *)__p;
          goto LABEL_291;
        }
      }
      if (v61 != 5
        || (v60 >= 0 ? (v62 = (uint64_t *)(v58 + 64)) : (v62 = *v59),
            (v63 = *(_DWORD *)v62, v64 = *((unsigned __int8 *)v62 + 4), v63 == 1952543859)
          ? (v65 = v64 == 101)
          : (v65 = 0),
            !v65))
      {
LABEL_144:
        v69 = (uint64_t *)(v58 + 64);
        v70 = *(unsigned __int8 *)(v58 + 87);
        if ((*(_BYTE *)(v58 + 87) & 0x80) != 0)
        {
          v69 = *v59;
          v70 = *(_QWORD *)(v58 + 72);
        }
        if (v70 >= 9)
        {
          v71 = (char *)v69 + v70;
          v72 = v69;
          while (1)
          {
            v73 = (char *)memchr(v72, 101, v70 - 8);
            if (!v73)
              goto LABEL_165;
            if (*(_QWORD *)v73 == 0x766973756C637865 && v73[8] == 101)
              break;
            v72 = (uint64_t *)(v73 + 1);
            v70 = v71 - (char *)v72;
            if (v71 - (char *)v72 < 9)
              goto LABEL_165;
          }
          if (v73 == v71 || v73 - (char *)v69 == -1)
            goto LABEL_165;
          if (v61 != 9)
          {
            if (v61 == 12)
            {
              if (v60 >= 0)
                v75 = (uint64_t *)(v58 + 64);
              else
                v75 = *v59;
              v76 = *v75;
              v77 = *((_DWORD *)v75 + 2);
              v78 = v76 == 0x756C6378653A6173;
              v79 = 1702259059;
              goto LABEL_233;
            }
            goto LABEL_302;
          }
          if (v60 >= 0)
            v104 = (uint64_t *)(v58 + 64);
          else
            v104 = *v59;
          v105 = *v104;
          v77 = *((unsigned __int8 *)v104 + 8);
          v78 = v105 == 0x766973756C637865;
          v79 = 101;
LABEL_233:
          if (!v78 || v77 != v79)
          {
LABEL_302:
            if (__p)
            {
              v135 = (uint64_t *)__p;
              operator delete(__p);
            }
            v120 = 0;
            goto LABEL_294;
          }
          memset(v143, 0, 24);
          if (*(char *)(v58 + 111) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v143, *(const std::string::value_type **)(v58 + 88), *(_QWORD *)(v58 + 96));
          }
          else
          {
            *(_OWORD *)v143 = *(_OWORD *)(v58 + 88);
            *(_QWORD *)&v143[16] = *(_QWORD *)(v58 + 104);
          }
          v107 = v143[23];
          v108 = v143[23];
          if (v143[23] < 0)
            v107 = *(_QWORD *)&v143[8];
          if (v107 == 5)
          {
            v110 = 0;
            v111 = *(_BYTE **)v143;
            if (v143[23] >= 0)
              v111 = v143;
            v112 = *(_DWORD *)v111;
            v113 = v111[4];
            if (v112 == 1936482662 && v113 == 101)
            {
              v119 = 0;
              goto LABEL_289;
            }
            if ((v143[23] & 0x80000000) == 0)
              goto LABEL_258;
          }
          else
          {
            if (v107 != 4)
              goto LABEL_248;
            v109 = *(_BYTE **)v143;
            if (v143[23] >= 0)
              v109 = v143;
            if (*(_DWORD *)v109 != 1702195828)
            {
LABEL_248:
              v110 = 0;
              if ((v143[23] & 0x80000000) != 0)
                goto LABEL_249;
LABEL_258:
              if ((v110 & 1) != 0)
                goto LABEL_285;
              goto LABEL_302;
            }
            v119 = 1;
LABEL_289:
            *((_BYTE *)v126 + 176) = v119;
            v110 = 1;
            if ((v108 & 0x80000000) == 0)
              goto LABEL_258;
          }
LABEL_249:
          operator delete(*(void **)v143);
          if ((v110 & 1) != 0)
            goto LABEL_285;
          goto LABEL_302;
        }
LABEL_165:
        switch(v61)
        {
          case 5:
            if (v60 >= 0)
              v80 = (uint64_t *)(v58 + 64);
            else
              v80 = *v59;
            v81 = *(_DWORD *)v80;
            v82 = *((unsigned __int8 *)v80 + 4);
            if (v81 != 1633906540 || v82 != 108)
              goto LABEL_285;
            std::string::basic_string[abi:ne180100]<0>(v143, "local");
            v84 = SipDialogTableParser::parseParticipant(v58, (SipDialogInfo *)v126, v143);
            goto LABEL_184;
          case 6:
            if (v60 >= 0)
              v85 = (uint64_t *)(v58 + 64);
            else
              v85 = *v59;
            v86 = *(_DWORD *)v85;
            v87 = *((unsigned __int16 *)v85 + 2);
            if (v86 != 1869440370 || v87 != 25972)
              goto LABEL_285;
            std::string::basic_string[abi:ne180100]<0>(v143, "remote");
            v84 = SipDialogTableParser::parseParticipant(v58, (SipDialogInfo *)v126, v143);
LABEL_184:
            v89 = v84;
            if ((v143[23] & 0x80000000) != 0)
              operator delete(*(void **)v143);
            if ((v89 & 1) == 0)
              goto LABEL_302;
            goto LABEL_285;
          case 8:
            if (v60 >= 0)
              v90 = (uint64_t *)(v58 + 64);
            else
              v90 = *v59;
            if (*v90 != 0x736563616C706572)
              goto LABEL_285;
            memset(&v147, 0, sizeof(v147));
            v144 = 0u;
            memset(&v145, 0, sizeof(v145));
            memset(v143, 0, sizeof(v143));
            std::string::basic_string[abi:ne180100]<0>(&v146, "call-id");
            v91 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v58 + 104))(v58, &v146, &v147);
            v92 = v91;
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v146.__r_.__value_.__l.__data_);
              if (!v92)
                goto LABEL_262;
            }
            else if (!v91)
            {
              goto LABEL_262;
            }
            std::string::operator=((std::string *)v143, &v147);
LABEL_262:
            std::string::basic_string[abi:ne180100]<0>(&v146, "local-tag");
            v115 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v58 + 104))(v58, &v146, &v147);
            v116 = v115;
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v146.__r_.__value_.__l.__data_);
              if (!v116)
                goto LABEL_270;
            }
            else if (!v115)
            {
              goto LABEL_270;
            }
            std::string::operator=((std::string *)&v143[24], &v147);
LABEL_270:
            std::string::basic_string[abi:ne180100]<0>(&v146, "remote-tag");
            v117 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v58 + 104))(v58, &v146, &v147);
            v118 = v117;
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v146.__r_.__value_.__l.__data_);
              if (!v118)
                goto LABEL_275;
            }
            else if (!v117)
            {
              goto LABEL_275;
            }
            std::string::operator=(&v145, &v147);
LABEL_275:
            SipDialogInfo::setReplaces((std::string *)v126, (const std::string *)v143);
            if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v145.__r_.__value_.__l.__data_);
            goto LABEL_277;
          case 11:
            if (v60 >= 0)
              v93 = (uint64_t *)(v58 + 64);
            else
              v93 = *v59;
            v94 = *v93;
            v95 = *(uint64_t *)((char *)v93 + 3);
            if (v94 != 0x6465727265666572 || v95 != 0x79622D6465727265)
              goto LABEL_285;
            memset(&v147, 0, sizeof(v147));
            v144 = 0u;
            memset(v143, 0, sizeof(v143));
            std::string::basic_string[abi:ne180100]<0>(&v146, "display");
            v97 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v58 + 104))(v58, &v146, &v147);
            v98 = v97;
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v146.__r_.__value_.__l.__data_);
              if (!v98)
                goto LABEL_267;
            }
            else if (!v97)
            {
              goto LABEL_267;
            }
            std::string::operator=((std::string *)v143, &v147);
LABEL_267:
            std::string::operator=((std::string *)&v143[24], (const std::string *)(v58 + 88));
            std::string::operator=(v123, (const std::string *)v143);
            std::string::operator=(v122, (const std::string *)&v143[24]);
            *((_BYTE *)v126 + 320) = 1;
LABEL_277:
            if (SHIBYTE(v144) < 0)
              operator delete(*(void **)&v143[24]);
            if ((v143[23] & 0x80000000) == 0)
              goto LABEL_282;
            v103 = *(void **)v143;
            break;
          default:
            goto LABEL_285;
        }
        goto LABEL_281;
      }
      memset(&v147, 0, sizeof(v147));
      memset(&v146, 0, sizeof(v146));
      memset(&v142, 0, sizeof(v142));
      memset(&v141, 0, sizeof(v141));
      std::string::basic_string[abi:ne180100]<0>(v143, "code");
      v66 = (*(uint64_t (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v58 + 104))(v58, v143, &v147);
      v67 = v66;
      if ((v143[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v143);
        if (!v67)
          goto LABEL_216;
      }
      else if (!v66)
      {
LABEL_216:
        std::string::basic_string[abi:ne180100]<0>(v143, "event");
        v101 = (*(uint64_t (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v58 + 104))(v58, v143, &v147);
        v102 = v101;
        if ((v143[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v143);
          if (!v102)
          {
LABEL_221:
            std::string::operator=(&v141, (const std::string *)(v58 + 88));
            SipDialogState::SipDialogState((uint64_t)v143, (uint64_t *)&v141, &v142, (uint64_t)&v146);
            *((_DWORD *)v126 + 34) = *(_DWORD *)v143;
            std::string::operator=(v124, (const std::string *)&v143[8]);
            *((_WORD *)v126 + 84) = v144;
            *((_BYTE *)v126 + 170) = BYTE2(v144);
            if ((v143[31] & 0x80000000) != 0)
              operator delete(*(void **)&v143[8]);
            if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v141.__r_.__value_.__l.__data_);
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v142.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_282:
              if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
              {
                v100 = (void *)v147.__r_.__value_.__r.__words[0];
                goto LABEL_284;
              }
              goto LABEL_285;
            }
            v103 = (void *)v146.__r_.__value_.__r.__words[0];
LABEL_281:
            operator delete(v103);
            goto LABEL_282;
          }
        }
        else if (!v101)
        {
          goto LABEL_221;
        }
        std::string::operator=(&v142, &v147);
        goto LABEL_221;
      }
      std::string::operator=(&v146, &v147);
      goto LABEL_216;
    }
LABEL_291:
    if (v57)
    {
      v135 = v57;
      operator delete(v57);
    }
    v120 = 1;
LABEL_294:
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v139.__r_.__value_.__l.__data_);
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    if (!v120)
      break;
    v25 = v131;
    v7 = (uint64_t **)(a1 + 248);
LABEL_300:
    if (++v26 == v25)
    {
      v26 = v130;
      goto LABEL_305;
    }
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  v121 = 0;
LABEL_308:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 240) = v121;
  ImsResult::~ImsResult((ImsResult *)v127);
  if ((v121 & 1) != 0)
  {
    v14 = 0;
    goto LABEL_15;
  }
LABEL_14:
  v14 = 1073741835;
LABEL_15:
  result = 0.0;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_QWORD *)a5 = &off_1E78B7238;
  *(_QWORD *)(a5 + 8) = &_bambiDomain;
  *(_DWORD *)(a5 + 16) = v14;
  return result;
}

void sub_1BEE74BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a53 < 0)
    operator delete(__p);
  if (a59 < 0)
    operator delete(a54);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  if (a36 < 0)
    operator delete(a31);
  ImsResult::~ImsResult((ImsResult *)&a19);
  _Unwind_Resume(a1);
}

uint64_t SipDialogInfoBody::decode(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 120))(&v3);
  v1 = (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(v4, v5) ^ 1;
  ImsResult::~ImsResult((ImsResult *)&v3);
  return v1;
}

void sub_1BEE74EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipDialogInfoBody::~SipDialogInfoBody(void **this)
{
  SipDialogInfoBody::~SipDialogInfoBody(this);
  JUMPOUT(0x1C3B87100);
}

{
  char *v2;

  *this = &off_1E78BEDF8;
  v2 = (char *)(this + 31);
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy((uint64_t)v2, this[32]);
  *this = off_1E78C5ED8;
  XmlParserGenericItem::~XmlParserGenericItem((XmlParserGenericItem *)(this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  *this = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t SipDialogInfoBody::clone(SipDialogInfoBody *this)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  SipGenericXmlBody::SipGenericXmlBody((SipGenericXmlBody *)v2, this);
  *(_QWORD *)v2 = &off_1E78BEDF8;
  *(_BYTE *)(v2 + 240) = *((_BYTE *)this + 240);
  std::map<std::string,SipDialogInfo>::map[abi:ne180100]((uint64_t *)(v2 + 248), (uint64_t)this + 248);
  *(_QWORD *)(v2 + 272) = *((_QWORD *)this + 34);
  *(_BYTE *)(v2 + 280) = *((_BYTE *)this + 280);
  v3 = (std::string *)(v2 + 288);
  if (*((char *)this + 311) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)this + 36), *((_QWORD *)this + 37));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *((_OWORD *)this + 18);
    *(_QWORD *)(v2 + 304) = *((_QWORD *)this + 38);
  }
  return v2;
}

void sub_1BEE74FA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(v2, *(_QWORD **)(v1 + 256));
  SipGenericXmlBody::~SipGenericXmlBody((void **)v1);
  MEMORY[0x1C3B87100](v1, 0x10B3C40E8B2BFBALL);
  _Unwind_Resume(a1);
}

uint64_t SipGenericXmlBody::contentType(SipGenericXmlBody *this)
{
  return (uint64_t)this + 32;
}

uint64_t SipGenericXmlBody::rootItem(SipGenericXmlBody *this)
{
  return (uint64_t)this + 56;
}

uint64_t *std::map<std::string,SipDialogInfo>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,SipDialogInfo>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,SipDialogInfo>,std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1BEE7503C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,SipDialogInfo>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,SipDialogInfo>,std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,SipDialogInfo> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,SipDialogInfo> const&>(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  void **v12;

  v11 = 0;
  v12 = 0;
  v6 = std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__construct_node<std::pair<std::string const,SipDialogInfo> const&>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__construct_node<std::pair<std::string const,SipDialogInfo> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x290uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = std::pair<std::string const,SipDialogInfo>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1BEE751D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,SipDialogInfo>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  SipDialogInfo::SipDialogInfo(this + 1, (const SipDialogInfo *)((char *)a2 + 24));
  return this;
}

void sub_1BEE75240(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void SipDialogInfo::SipDialogInfo(std::string *this, const SipDialogInfo *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::string::size_type v8;
  __int128 v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  SipDialogDirection::SipDialogDirection(&this[4], (uint64_t)a2 + 96);
  SipDialogState::SipDialogState((uint64_t)&this[5].__r_.__value_.__r.__words[2], (uint64_t)a2 + 136);
  v8 = *((_QWORD *)a2 + 22);
  this[7].__r_.__value_.__s.__data_[16] = *((_BYTE *)a2 + 184);
  this[7].__r_.__value_.__l.__size_ = v8;
  if (*((char *)a2 + 215) < 0)
  {
    std::string::__init_copy_ctor_external(this + 8, *((const std::string::value_type **)a2 + 24), *((_QWORD *)a2 + 25));
  }
  else
  {
    v9 = *((_OWORD *)a2 + 12);
    this[8].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 26);
    *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a2 + 239) < 0)
  {
    std::string::__init_copy_ctor_external(this + 9, *((const std::string::value_type **)a2 + 27), *((_QWORD *)a2 + 28));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 216);
    this[9].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 29);
    *(_OWORD *)&this[9].__r_.__value_.__l.__data_ = v10;
  }
  v11 = this + 10;
  if (*((char *)a2 + 263) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)a2 + 30), *((_QWORD *)a2 + 31));
  }
  else
  {
    v12 = *((_OWORD *)a2 + 15);
    this[10].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 32);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  this[11].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 264);
  if (*((char *)a2 + 295) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 272), *((const std::string::value_type **)a2 + 34), *((_QWORD *)a2 + 35));
  }
  else
  {
    v13 = *((_OWORD *)a2 + 17);
    this[12].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 36);
    *(_OWORD *)&this[11].__r_.__value_.__r.__words[1] = v13;
  }
  v14 = (std::string *)((char *)this + 296);
  if (*((char *)a2 + 319) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)a2 + 37), *((_QWORD *)a2 + 38));
  }
  else
  {
    v15 = *(_OWORD *)((char *)a2 + 296);
    this[13].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 39);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  this[13].__r_.__value_.__s.__data_[8] = *((_BYTE *)a2 + 320);
  SipDialogParticipantInfo::SipDialogParticipantInfo((SipDialogParticipantInfo *)&this[13].__r_.__value_.__r.__words[2], (const SipDialogInfo *)((char *)a2 + 328));
  this[19].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 456);
  SipDialogParticipantInfo::SipDialogParticipantInfo((SipDialogParticipantInfo *)&this[19].__r_.__value_.__r.__words[1], (const SipDialogInfo *)((char *)a2 + 464));
  this[24].__r_.__value_.__s.__data_[16] = *((_BYTE *)a2 + 592);
}

void sub_1BEE7549C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 295) < 0)
    operator delete(*v6);
  SipLazuliManager::OutgoingMsrp::~OutgoingMsrp(v5);
  if (*(char *)(v1 + 167) < 0)
    operator delete(*(void **)(v1 + 144));
  if (*(char *)(v1 + 127) < 0)
    operator delete(*(void **)(v1 + 104));
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void SipDialogParticipantInfo::~SipDialogParticipantInfo(void **this)
{
  void *v2;
  void **v3;

  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  v2 = this[9];
  if (v2)
  {
    this[10] = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 6), this[7]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v3 = this;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&v3);
}

_BYTE *SipDialogDirection::SipDialogDirection(_BYTE *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *a1 = *(_BYTE *)a2;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a1[32] = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t SipDialogState::SipDialogState(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

void SipDialogParticipantInfo::SipDialogParticipantInfo(SipDialogParticipantInfo *this, const SipDialogParticipantInfo *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<SipDialogParticipantIdentity>::__init_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(this, *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4));
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 24);
    *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)((char *)this + 24) = v4;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 6, (uint64_t)a2 + 48);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  std::vector<SipDialogParticipantMediaAttribute>::__init_with_size[abi:ne180100]<SipDialogParticipantMediaAttribute*,SipDialogParticipantMediaAttribute*>((_QWORD *)this + 9, *((const void **)a2 + 9), *((_QWORD *)a2 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2));
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  v5 = (std::string *)((char *)this + 104);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 104);
    *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1BEE757D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  BambiEmergencyUrnMap *v11;
  void **v12;
  void *v14;

  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 80) = v14;
    operator delete(v14);
  }
  BambiEmergencyUrnMap::~BambiEmergencyUrnMap(v11);
  a10 = v10;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<SipDialogParticipantIdentity>::__init_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<bambi::XmlTreeNs>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipDialogParticipantIdentity>,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BEE7588C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipDialogParticipantIdentity>,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<SipDialogParticipantIdentity,SipDialogParticipantIdentity&,SipDialogParticipantIdentity*>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1BEE75908(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<SipDialogParticipantIdentity,SipDialogParticipantIdentity&,SipDialogParticipantIdentity*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1BEE759A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<SipDialogParticipantMediaAttribute>::__init_with_size[abi:ne180100]<SipDialogParticipantMediaAttribute*,SipDialogParticipantMediaAttribute*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<SipDialogParticipantMediaAttribute>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 3);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BEE75A1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<SipDialogParticipantMediaAttribute>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogParticipantMediaAttribute>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogParticipantMediaAttribute>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a2);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipDialogInfo>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipDialogInfo>,0>(uint64_t a1)
{
  SipDialogInfo::~SipDialogInfo((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void SipDialogInfo::~SipDialogInfo(void **this)
{
  void *v2;
  void *v3;
  void **v4;

  if (*((char *)this + 591) < 0)
    operator delete(this[71]);
  v2 = this[67];
  if (v2)
  {
    this[68] = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 64), this[65]);
  if (*((char *)this + 511) < 0)
    operator delete(this[61]);
  v4 = this + 58;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 455) < 0)
    operator delete(this[54]);
  v3 = this[50];
  if (v3)
  {
    this[51] = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 47), this[48]);
  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
  v4 = this + 41;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 319) < 0)
    operator delete(this[37]);
  if (*((char *)this + 295) < 0)
    operator delete(this[34]);
  if (*((char *)this + 263) < 0)
    operator delete(this[30]);
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipDialogInfo>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_QWORD *std::vector<XmlParserGenericItem *>::__init_with_size[abi:ne180100]<XmlParserGenericItem **,XmlParserGenericItem **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(result + 2), a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1BEE75D84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipDialogTableParser::parseParticipant(uint64_t a1, SipDialogInfo *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v27;
  int v28;
  int v29;
  int v30;
  int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  std::string::size_type size;
  uint64_t *v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  int v45;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v50;
  unsigned int v52;
  BOOL v53;
  int v54;
  void *v55;
  std::string *p_p;
  const char *v57;
  int v58;
  unint64_t v59;
  const char *v60;
  int v61;
  void *v62;
  std::string *v63;
  int v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  std::string::size_type v94;
  std::string::size_type v95;
  __int128 v96;
  __int128 v97;
  int64x2_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char v105;
  int v106;
  uint64_t v107;
  int v108;
  int *v109;
  int v110;
  int v111;
  BOOL v112;
  unsigned __int8 *v114;
  SipDialogInfo *v115;
  uint64_t v116;
  void *v117;
  _QWORD *v118;
  uint64_t v119;
  int64x2_t v120;
  void *v121[2];
  __int128 v122;
  uint64_t *v123;
  _QWORD *v124[2];
  char *v125;
  __int128 v126;
  uint64_t v127;
  std::string v128;
  std::string __p;
  char *v130;
  void **v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  std::string v138;
  __int128 *v139[2];
  char v140;
  std::string v141;
  std::string __str;

  v3 = a3;
  v4 = *(unsigned __int8 *)(a1 + 87);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 87);
  else
    v5 = *(_QWORD *)(a1 + 72);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  v10 = (const void **)(a1 + 64);
  if (v7 >= 0)
    v11 = a3;
  else
    v11 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v10, v11, *(_QWORD *)(a1 + 72)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 87))
  {
    while (*(unsigned __int8 *)v10 == *v11)
    {
      v10 = (const void **)((char *)v10 + 1);
      ++v11;
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v124[1] = 0;
  v122 = 0u;
  v124[0] = 0;
  v120 = 0u;
  *(_OWORD *)v121 = 0u;
  v123 = (uint64_t *)v124;
  memset(&v128, 0, sizeof(v128));
  v127 = 0;
  v126 = 0uLL;
  v125 = 0;
  v117 = 0;
  v118 = 0;
  v13 = *(const void **)(a1 + 160);
  v14 = *(_QWORD *)(a1 + 168);
  v119 = 0;
  std::vector<XmlParserGenericItem *>::__init_with_size[abi:ne180100]<XmlParserGenericItem **,XmlParserGenericItem **>(&v117, v13, v14, (v14 - (uint64_t)v13) >> 3);
  v15 = v117;
  if (v117 == v118)
    goto LABEL_226;
  v114 = v3;
  v115 = a2;
  do
  {
    v16 = *v15;
    if (!*v15)
      goto LABEL_223;
    v17 = (uint64_t *)(v16 + 64);
    v18 = *(unsigned __int8 *)(v16 + 87);
    v19 = (char)v18;
    if ((v18 & 0x80u) != 0)
      v18 = *(_QWORD *)(v16 + 72);
    if (v18 > 14)
    {
      if (v18 != 15)
      {
        if (v18 != 19)
          goto LABEL_223;
        if (v19 < 0)
          v17 = (uint64_t *)*v17;
        v22 = (uint64_t *)*v17;
        v23 = v17[1];
        v24 = *(uint64_t *)((char *)v17 + 11);
        v25 = v22 == (uint64_t *)0x2D6E6F6973736573 && v23 == 0x7470697263736564;
        if (!v25 || v24 != 0x6E6F697470697263)
          goto LABEL_223;
        v135 = 0uLL;
        *(_QWORD *)&v136 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "type");
        v27 = (*(uint64_t (**)(uint64_t, std::string *, __int128 *))(*(_QWORD *)v16 + 104))(v16, &__p, &v135);
        v28 = v27;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!v28)
            goto LABEL_157;
        }
        else if (!v27)
        {
LABEL_157:
          if (SBYTE7(v136) < 0)
            operator delete((void *)v135);
          goto LABEL_223;
        }
        std::string::operator=(&v128, (const std::string *)&v135);
        goto LABEL_157;
      }
      if (v19 < 0)
        v17 = (uint64_t *)*v17;
      v34 = (uint64_t *)*v17;
      v35 = *(uint64_t *)((char *)v17 + 7);
      if (v34 != (uint64_t *)0x747441616964656DLL || v35 != 0x7365747562697274)
        goto LABEL_223;
      memset(&__str, 0, sizeof(__str));
      std::vector<XmlParserGenericItem *>::__init_with_size[abi:ne180100]<XmlParserGenericItem **,XmlParserGenericItem **>(&__str, *(const void **)(v16 + 160), *(_QWORD *)(v16 + 168), (uint64_t)(*(_QWORD *)(v16 + 168) - *(_QWORD *)(v16 + 160)) >> 3);
      size = __str.__r_.__value_.__l.__size_;
      v38 = (uint64_t *)__str.__r_.__value_.__r.__words[0];
      if (__str.__r_.__value_.__r.__words[0] == __str.__r_.__value_.__l.__size_)
      {
        v116 = 0;
        v39 = 0;
LABEL_133:
        v65 = v126;
        if ((unint64_t)v126 >= *((_QWORD *)&v126 + 1))
        {
          v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v126 - (_QWORD)v125) >> 2);
          v68 = v67 + 1;
          if (v67 + 1 > 0x1555555555555555)
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v126 + 1) - (_QWORD)v125) >> 2) > v68)
            v68 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v126 + 1) - (_QWORD)v125) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v126 + 1) - (_QWORD)v125) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v69 = 0x1555555555555555;
          else
            v69 = v68;
          if (v69)
            v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogParticipantMediaAttribute>>((uint64_t)&v126 + 8, v69);
          else
            v70 = 0;
          v100 = &v70[12 * v67];
          *(_DWORD *)v100 = HIDWORD(v116);
          *((_DWORD *)v100 + 1) = v116;
          v100[8] = v39;
          *(_WORD *)(v100 + 9) = 0;
          v100[11] = 0;
          v102 = v125;
          v101 = (char *)v126;
          v103 = v100;
          if ((char *)v126 != v125)
          {
            do
            {
              v104 = *(_QWORD *)(v101 - 12);
              v101 -= 12;
              v105 = v101[8];
              *(_QWORD *)(v103 - 12) = v104;
              v103 -= 12;
              v103[8] = v105;
            }
            while (v101 != v102);
            v101 = v125;
          }
          v66 = v100 + 12;
          v125 = v103;
          *(_QWORD *)&v126 = v100 + 12;
          *((_QWORD *)&v126 + 1) = &v70[12 * v69];
          if (v101)
            operator delete(v101);
        }
        else
        {
          *(_DWORD *)v126 = HIDWORD(v116);
          *(_DWORD *)(v65 + 4) = v116;
          *(_BYTE *)(v65 + 8) = v39;
          *(_WORD *)(v65 + 9) = 0;
          v66 = (char *)(v65 + 12);
          *(_BYTE *)(v65 + 11) = 0;
        }
        *(_QWORD *)&v126 = v66;
        v106 = 1;
LABEL_220:
        if (__str.__r_.__value_.__r.__words[0])
        {
          __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v106)
          goto LABEL_223;
        if (v117)
        {
          v118 = v117;
          operator delete(v117);
        }
        v12 = 0;
        goto LABEL_240;
      }
      v116 = 0;
      v39 = 0;
      while (1)
      {
        v40 = *v38;
        if (!*v38)
          goto LABEL_114;
        v41 = (uint64_t *)(v40 + 64);
        v42 = *(unsigned __int8 *)(v40 + 87);
        v43 = (char)v42;
        if ((v42 & 0x80u) != 0)
          v42 = *(_QWORD *)(v40 + 72);
        switch(v42)
        {
          case 5:
            v50 = (uint64_t *)*v41;
            if (v43 >= 0)
              v50 = v41;
            if (*((_BYTE *)v50 + 4) == 48 && *(_DWORD *)v50 == 1953656688)
              v39 = 1;
            goto LABEL_114;
          case 14:
            if (v43 < 0)
              v41 = (uint64_t *)*v41;
            v47 = (uint64_t *)*v41;
            v48 = *(uint64_t *)((char *)v41 + 6);
            if (v47 != (uint64_t *)0x726944616964656DLL || v48 != 0x6E6F697463657269)
              goto LABEL_114;
            v135 = 0uLL;
            *(_QWORD *)&v136 = 0;
            if (*(char *)(v40 + 111) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v135, *(const std::string::value_type **)(v40 + 88), *(_QWORD *)(v40 + 96));
            }
            else
            {
              v135 = *(_OWORD *)(v40 + 88);
              *(_QWORD *)&v136 = *(_QWORD *)(v40 + 104);
            }
            v52 = 0;
            v53 = 1;
            while (1)
            {
              LODWORD(v141.__r_.__value_.__l.__data_) = v52;
              ims::toString<MediaDirection>((unsigned int *)&v141, &__p);
              v54 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              v55 = (void *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((SBYTE7(v136) & 0x80u) == 0)
                v57 = (const char *)&v135;
              else
                v57 = (const char *)v135;
              v58 = strcasecmp((const char *)p_p, v57);
              if (v54 < 0)
                operator delete(v55);
              if (!v58)
                break;
              v53 = v52++ < 4;
              if (v52 == 5)
              {
                v53 = 0;
                goto LABEL_111;
              }
            }
            HIDWORD(v116) = v52;
LABEL_111:
            if ((SBYTE7(v136) & 0x80000000) == 0)
              goto LABEL_113;
            break;
          case 9:
            if (v43 < 0)
              v41 = (uint64_t *)*v41;
            v44 = (uint64_t *)*v41;
            v45 = *((unsigned __int8 *)v41 + 8);
            if (v44 != (uint64_t *)0x707954616964656DLL || v45 != 101)
              goto LABEL_114;
            v135 = 0uLL;
            *(_QWORD *)&v136 = 0;
            if (*(char *)(v40 + 111) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v135, *(const std::string::value_type **)(v40 + 88), *(_QWORD *)(v40 + 96));
            }
            else
            {
              v135 = *(_OWORD *)(v40 + 88);
              *(_QWORD *)&v136 = *(_QWORD *)(v40 + 104);
            }
            v59 = 0;
            v53 = 1;
            while (1)
            {
              if ((SBYTE7(v136) & 0x80u) == 0)
                v60 = (const char *)&v135;
              else
                v60 = (const char *)v135;
              v61 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              v62 = (void *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v63 = &__p;
              else
                v63 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v64 = strcasecmp(v60, (const char *)v63);
              if (v61 < 0)
                operator delete(v62);
              if (!v64)
                break;
              v53 = v59++ < 6;
              if (v59 == 7)
              {
                v53 = 0;
                goto LABEL_130;
              }
            }
            LODWORD(v116) = v59;
LABEL_130:
            if ((SBYTE7(v136) & 0x80000000) == 0)
              goto LABEL_113;
            break;
          default:
            goto LABEL_114;
        }
        operator delete((void *)v135);
LABEL_113:
        if (!v53)
        {
          v106 = 0;
          goto LABEL_220;
        }
LABEL_114:
        if (++v38 == (uint64_t *)size)
          goto LABEL_133;
      }
    }
    if (v18 != 6)
    {
      if (v18 != 8)
        goto LABEL_223;
      if (v19 < 0)
        v17 = (uint64_t *)*v17;
      if (*v17 != 0x797469746E656469)
        goto LABEL_223;
      memset(&__str, 0, sizeof(__str));
      v136 = 0u;
      v137 = 0u;
      v135 = 0u;
      std::string::basic_string[abi:ne180100]<0>(&__p, "display");
      v20 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v16 + 104))(v16, &__p, &__str);
      v21 = v20;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v21)
          goto LABEL_145;
      }
      else if (!v20)
      {
LABEL_145:
        std::string::operator=((std::string *)((char *)&v136 + 8), (const std::string *)(v16 + 88));
        v71 = v120.i64[1];
        if ((void *)v120.i64[1] >= v121[0])
        {
          v73 = 0xAAAAAAAAAAAAAAABLL * ((v120.i64[1] - v120.i64[0]) >> 4);
          v74 = v73 + 1;
          if (v73 + 1 > 0x555555555555555)
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((uint64_t)v121[0] - v120.i64[0]) >> 4) > v74)
            v74 = 0x5555555555555556 * (((uint64_t)v121[0] - v120.i64[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v121[0] - v120.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v75 = 0x555555555555555;
          else
            v75 = v74;
          v131 = v121;
          if (v75)
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>>((uint64_t)v121, v75);
          else
            v76 = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v76[48 * v73];
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          v130 = &v76[48 * v75];
          std::construct_at[abi:ne180100]<SipDialogParticipantIdentity,SipDialogParticipantIdentity const&,SipDialogParticipantIdentity*>((std::string *)__p.__r_.__value_.__l.__size_, &v135);
          v92 = v120.i64[1];
          v93 = v120.i64[0];
          v94 = __p.__r_.__value_.__r.__words[2];
          v95 = __p.__r_.__value_.__l.__size_;
          if (v120.i64[1] == v120.i64[0])
          {
            v98 = vdupq_n_s64(v120.u64[1]);
          }
          else
          {
            do
            {
              v96 = *(_OWORD *)(v92 - 48);
              *(_QWORD *)(v95 - 32) = *(_QWORD *)(v92 - 32);
              *(_OWORD *)(v95 - 48) = v96;
              *(_QWORD *)(v92 - 40) = 0;
              *(_QWORD *)(v92 - 32) = 0;
              *(_QWORD *)(v92 - 48) = 0;
              v97 = *(_OWORD *)(v92 - 24);
              *(_QWORD *)(v95 - 8) = *(_QWORD *)(v92 - 8);
              *(_OWORD *)(v95 - 24) = v97;
              v95 -= 48;
              *(_QWORD *)(v92 - 16) = 0;
              *(_QWORD *)(v92 - 8) = 0;
              *(_QWORD *)(v92 - 24) = 0;
              v92 -= 48;
            }
            while (v92 != v93);
            v98 = v120;
          }
          v72 = v94 + 48;
          v120.i64[0] = v95;
          v120.i64[1] = v94 + 48;
          *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v98;
          v99 = (char *)v121[0];
          v121[0] = v130;
          v130 = v99;
          __p.__r_.__value_.__r.__words[0] = v98.i64[0];
          std::__split_buffer<bambi::XmlTreeNs>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          std::construct_at[abi:ne180100]<SipDialogParticipantIdentity,SipDialogParticipantIdentity const&,SipDialogParticipantIdentity*>((std::string *)v120.i64[1], &v135);
          v72 = v71 + 48;
        }
        v120.i64[1] = v72;
        if (SHIBYTE(v137) < 0)
          operator delete(*((void **)&v136 + 1));
        if (SBYTE7(v136) < 0)
          operator delete((void *)v135);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          v91 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_212:
          operator delete(v91);
        }
        goto LABEL_223;
      }
      std::string::operator=((std::string *)&v135, &__str);
      goto LABEL_145;
    }
    if (v19 < 0)
      v17 = (uint64_t *)*v17;
    v29 = *(_DWORD *)v17;
    v30 = *((unsigned __int16 *)v17 + 2);
    if (v29 != 1735549300 || v30 != 29797)
      goto LABEL_223;
    memset(&v138, 0, sizeof(v138));
    *(_QWORD *)&v136 = 0;
    v137 = 0u;
    v135 = 0u;
    *((_QWORD *)&v136 + 1) = &v137;
    std::string::basic_string[abi:ne180100]<0>(&__p, "uri");
    v32 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v16 + 104))(v16, &__p, &v138);
    v33 = v32;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v33)
        goto LABEL_162;
LABEL_161:
      std::string::operator=((std::string *)&v135, &v138);
      goto LABEL_162;
    }
    if (v32)
      goto LABEL_161;
LABEL_162:
    v132 = 0;
    v133 = 0;
    v134 = 0;
    std::vector<XmlParserGenericItem *>::__init_with_size[abi:ne180100]<XmlParserGenericItem **,XmlParserGenericItem **>(&v132, *(const void **)(v16 + 160), *(_QWORD *)(v16 + 168), (uint64_t)(*(_QWORD *)(v16 + 168) - *(_QWORD *)(v16 + 160)) >> 3);
    v78 = v132;
    v77 = v133;
    if (v132 == v133)
      goto LABEL_194;
    do
    {
      v79 = *v78;
      if (*v78)
      {
        v80 = *(unsigned __int8 *)(v79 + 87);
        v81 = (char)v80;
        if ((v80 & 0x80u) != 0)
          v80 = *(_QWORD *)(v79 + 72);
        if (v80 == 5)
        {
          v82 = v81 >= 0 ? v79 + 64 : *(_QWORD *)(v79 + 64);
          v83 = *(_DWORD *)v82;
          v84 = *(unsigned __int8 *)(v82 + 4);
          if (v83 == 1634886000 && v84 == 109)
          {
            memset(&__p, 0, sizeof(__p));
            memset(&__str, 0, sizeof(__str));
            memset(&v141, 0, sizeof(v141));
            std::string::basic_string[abi:ne180100]<0>(v139, "pname");
            v86 = (*(uint64_t (**)(uint64_t, __int128 **, std::string *))(*(_QWORD *)v79 + 104))(v79, v139, &__p);
            v87 = v86;
            if (v140 < 0)
            {
              operator delete(v139[0]);
              if (!v87)
                goto LABEL_180;
            }
            else if (!v86)
            {
LABEL_180:
              std::string::basic_string[abi:ne180100]<0>(v139, "pval");
              v88 = (*(uint64_t (**)(uint64_t, __int128 **, std::string *))(*(_QWORD *)v79 + 104))(v79, v139, &__p);
              v89 = v88;
              if (v140 < 0)
              {
                operator delete(v139[0]);
                if (!v89)
                {
LABEL_185:
                  v139[0] = (__int128 *)&__str;
                  v90 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v136 + 1, (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v139);
                  std::string::operator=((std::string *)(v90 + 7), &v141);
                  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v141.__r_.__value_.__l.__data_);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  v77 = v133;
                  goto LABEL_192;
                }
              }
              else if (!v88)
              {
                goto LABEL_185;
              }
              std::string::operator=(&v141, &__p);
              goto LABEL_185;
            }
            std::string::operator=(&__str, &__p);
            goto LABEL_180;
          }
        }
      }
LABEL_192:
      ++v78;
    }
    while (v78 != v77);
    v78 = v132;
LABEL_194:
    if (v78)
    {
      v133 = v78;
      operator delete(v78);
    }
    std::string::operator=((std::string *)&v121[1], (const std::string *)&v135);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(&v123, *((__int128 **)&v136 + 1), &v137);
    LOBYTE(v127) = 1;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v136 + 8, (_QWORD *)v137);
    if (SBYTE7(v136) < 0)
      operator delete((void *)v135);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    {
      v91 = (void *)v138.__r_.__value_.__r.__words[0];
      goto LABEL_212;
    }
LABEL_223:
    ++v15;
  }
  while (v15 != v118);
  v15 = v117;
  v3 = v114;
  a2 = v115;
LABEL_226:
  if (v15)
  {
    v118 = v15;
    operator delete(v15);
  }
  v107 = v3[23];
  v108 = (char)v107;
  if ((v107 & 0x80u) != 0)
    v107 = *((_QWORD *)v3 + 1);
  if (v107 == 5
    && (v108 >= 0 ? (v109 = (int *)v3) : (v109 = *(int **)v3),
        (v110 = *v109, v111 = *((unsigned __int8 *)v109 + 4), v110 == 1633906540) ? (v112 = v111 == 108) : (v112 = 0),
        v112))
  {
    SipDialogInfo::setLocal(a2, (const SipDialogParticipantInfo *)&v120);
  }
  else
  {
    SipDialogInfo::setRemote(a2, (const SipDialogParticipantInfo *)&v120);
  }
  v12 = 1;
LABEL_240:
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (v125)
  {
    *(_QWORD *)&v126 = v125;
    operator delete(v125);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v123, v124[0]);
  if (SHIBYTE(v122) < 0)
    operator delete(v121[1]);
  *(_QWORD *)&v135 = &v120;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  return v12;
}

void sub_1BEE76A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  void *v50;

  v50 = *(void **)(v48 - 120);
  if (v50)
  {
    *(_QWORD *)(v48 - 112) = v50;
    operator delete(v50);
  }
  if (__p)
    operator delete(__p);
  SipDialogParticipantInfo::~SipDialogParticipantInfo(&a23);
  _Unwind_Resume(a1);
}

void SipDialogInfo::SipDialogInfo(SipDialogInfo *this)
{
  void *__p[2];
  char v3;
  std::string __str;
  void *v5[2];
  char v6;

  *((_BYTE *)this + 96) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 13, "");
  *((_BYTE *)this + 128) = 0;
  std::string::basic_string[abi:ne180100]<0>(v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  SipDialogState::SipDialogState((uint64_t)this + 136, (uint64_t *)v5, &__str, (uint64_t)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete(v5[0]);
  *((_BYTE *)this + 176) = 0;
  *((_DWORD *)this + 45) = 0;
  *((_BYTE *)this + 184) = 0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *(_OWORD *)((char *)this + 249) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_BYTE *)this + 320) = 0;
  *((_QWORD *)this + 47) = (char *)this + 384;
  *((_QWORD *)this + 48) = 0;
  *((_BYTE *)this + 424) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 66) = 0;
  *((_QWORD *)this + 65) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_BYTE *)this + 456) = 0;
  *((_QWORD *)this + 64) = (char *)this + 520;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_BYTE *)this + 560) = 0;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 72) = 0;
  *((_BYTE *)this + 592) = 0;
}

void sub_1BEE76D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void **v28;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 + 127) < 0)
    operator delete(*v28);
  if (*(char *)(v27 + 95) < 0)
    operator delete(*(void **)(v27 + 72));
  if (*(char *)(v27 + 71) < 0)
    operator delete(*(void **)(v27 + 48));
  if (*(char *)(v27 + 47) < 0)
    operator delete(*(void **)(v27 + 24));
  if (*(char *)(v27 + 23) < 0)
    operator delete(*(void **)v27);
  _Unwind_Resume(exception_object);
}

uint64_t SipDialogState::SipDialogState(uint64_t a1, uint64_t *a2, std::string *__str, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t *v8;
  int v9;
  int v10;
  int v12;
  int *v13;
  int v14;
  int v15;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t *v21;
  uint64_t v23;
  int v24;
  uint64_t v26;
  const char *v27;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  v6 = *((unsigned __int8 *)a2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  switch(v6)
  {
    case 5:
      if (v7 >= 0)
        v8 = a2;
      else
        v8 = (uint64_t *)*a2;
      v9 = *(_DWORD *)v8;
      v10 = *((unsigned __int8 *)v8 + 4);
      if (v9 == 1819435365 && v10 == 121)
      {
        v12 = 3;
        goto LABEL_45;
      }
      goto LABEL_46;
    case 6:
      if (v7 >= 0)
        v13 = (int *)a2;
      else
        v13 = (int *)*a2;
      v14 = *v13;
      v15 = *((unsigned __int16 *)v13 + 2);
      if (v14 == 1769566836 && v15 == 26478)
      {
        v12 = 1;
        goto LABEL_45;
      }
      goto LABEL_46;
    case 9:
      if (v7 >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      v18 = *v17;
      v19 = *((unsigned __int8 *)v17 + 8);
      if (v18 == 0x656D7269666E6F63 && v19 == 100)
      {
        v12 = 4;
        goto LABEL_45;
      }
      goto LABEL_46;
    case 10:
      if (v7 >= 0)
        v21 = a2;
      else
        v21 = (uint64_t *)*a2;
      if (*v21 == 0x69646565636F7270 && *((_WORD *)v21 + 4) == 26478)
      {
        v12 = 2;
        goto LABEL_45;
      }
      v23 = *v21;
      v24 = *((unsigned __int16 *)v21 + 4);
      if (v23 == 0x74616E696D726574 && v24 == 25701)
      {
        v12 = 5;
LABEL_45:
        *(_DWORD *)a1 = v12;
      }
LABEL_46:
      std::string::operator=((std::string *)(a1 + 8), __str);
      v26 = *(unsigned __int8 *)(a4 + 23);
      if ((v26 & 0x80u) != 0)
        v26 = *(_QWORD *)(a4 + 8);
      if (v26)
      {
        *(_BYTE *)(a1 + 34) = 1;
        if (*(char *)(a4 + 23) >= 0)
          v27 = (const char *)a4;
        else
          v27 = *(const char **)a4;
        *(_WORD *)(a1 + 32) = strtoul(v27, 0, 10);
      }
      return a1;
    default:
      goto LABEL_46;
  }
}

void sub_1BEE76FB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t SipDialogInfo::operator=(uint64_t a1, uint64_t a2)
{
  char v4;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 104));
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  v4 = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = v4;
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  std::string::operator=((std::string *)(a1 + 240), (const std::string *)(a2 + 240));
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  std::string::operator=((std::string *)(a1 + 272), (const std::string *)(a2 + 272));
  std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a2 + 296));
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  if (a1 != a2)
  {
    std::vector<SipDialogParticipantIdentity>::__assign_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(a1 + 328, *(std::string **)(a2 + 328), *(std::string **)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 336) - *(_QWORD *)(a2 + 328)) >> 4));
    std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 376), *(__int128 **)(a2 + 376), (__int128 *)(a2 + 384));
    std::vector<SipDialogParticipantMediaAttribute>::__assign_with_size[abi:ne180100]<SipDialogParticipantMediaAttribute*,SipDialogParticipantMediaAttribute*>((char *)(a1 + 400), *(char **)(a2 + 400), *(_QWORD *)(a2 + 408), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 408) - *(_QWORD *)(a2 + 400)) >> 2));
  }
  *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
  std::string::operator=((std::string *)(a1 + 432), (const std::string *)(a2 + 432));
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  if (a1 != a2)
  {
    std::vector<SipDialogParticipantIdentity>::__assign_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(a1 + 464, *(std::string **)(a2 + 464), *(std::string **)(a2 + 472), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 472) - *(_QWORD *)(a2 + 464)) >> 4));
    std::string::operator=((std::string *)(a1 + 488), (const std::string *)(a2 + 488));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 512), *(__int128 **)(a2 + 512), (__int128 *)(a2 + 520));
    std::vector<SipDialogParticipantMediaAttribute>::__assign_with_size[abi:ne180100]<SipDialogParticipantMediaAttribute*,SipDialogParticipantMediaAttribute*>((char *)(a1 + 536), *(char **)(a2 + 536), *(_QWORD *)(a2 + 544), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 2));
  }
  *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
  std::string::operator=((std::string *)(a1 + 568), (const std::string *)(a2 + 568));
  *(_BYTE *)(a1 + 592) = *(_BYTE *)(a2 + 592);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x290uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = std::pair<std::string const,SipDialogInfo>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1BEE772C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,SipDialogInfo>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  bzero(&this[1], 0x258uLL);
  SipDialogInfo::SipDialogInfo((SipDialogInfo *)&this[1]);
  return this;
}

void sub_1BEE7733C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__erase_unique<std::string>(uint64_t **a1, void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipDialogInfo>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void std::vector<SipDialogParticipantIdentity>::__assign_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<SipDialogParticipantIdentity>::__vdeallocate((void **)a1);
    if (a4 > 0x555555555555555)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    std::vector<bambi::XmlTreeNs>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipDialogParticipantIdentity>,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(v8, (uint64_t)__str, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipDialogParticipantIdentity *,SipDialogParticipantIdentity *,SipDialogParticipantIdentity *>((int)&v17, __str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipDialogParticipantIdentity>,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipDialogParticipantIdentity *,SipDialogParticipantIdentity *,SipDialogParticipantIdentity *>((int)&v18, __str, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 48;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1BEE7751C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BEE77524(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<SipDialogParticipantIdentity>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipDialogParticipantIdentity *,SipDialogParticipantIdentity *,SipDialogParticipantIdentity *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    this += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

char *std::vector<SipDialogParticipantMediaAttribute>::__assign_with_size[abi:ne180100]<SipDialogParticipantMediaAttribute*,SipDialogParticipantMediaAttribute*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1555555555555555)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v11;
    result = std::vector<SipDialogParticipantMediaAttribute>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v17 - 3;
      v19 = v9;
      v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9 - 3);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 - 3;
    v19 = v9;
    v20 = v16;
LABEL_18:
    result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

std::string *SipDialogInfo::setReplaces(std::string *a1, const std::string *a2)
{
  std::string *result;

  std::string::operator=(a1 + 8, a2);
  std::string::operator=(a1 + 9, a2 + 1);
  result = std::string::operator=(a1 + 10, a2 + 2);
  a1[11].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

std::string *SipDialogInfo::setLocal(SipDialogInfo *this, const SipDialogParticipantInfo *a2)
{
  const SipDialogParticipantInfo *v4;
  std::string *result;

  v4 = (SipDialogInfo *)((char *)this + 328);
  if (v4 == a2)
  {
    std::string::operator=((std::string *)((char *)this + 352), (const std::string *)a2 + 1);
  }
  else
  {
    std::vector<SipDialogParticipantIdentity>::__assign_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>((uint64_t)v4, *(std::string **)a2, *((std::string **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4));
    std::string::operator=((std::string *)((char *)this + 352), (const std::string *)a2 + 1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 47, *((__int128 **)a2 + 6), (__int128 *)((char *)a2 + 56));
    std::vector<SipDialogParticipantMediaAttribute>::__assign_with_size[abi:ne180100]<SipDialogParticipantMediaAttribute*,SipDialogParticipantMediaAttribute*>((char *)this + 400, *((char **)a2 + 9), *((_QWORD *)a2 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2));
  }
  *((_BYTE *)this + 424) = *((_BYTE *)a2 + 96);
  result = std::string::operator=((std::string *)this + 18, (const std::string *)((char *)a2 + 104));
  *((_BYTE *)this + 456) = 1;
  return result;
}

std::string *SipDialogInfo::setRemote(SipDialogInfo *this, const SipDialogParticipantInfo *a2)
{
  const SipDialogParticipantInfo *v4;
  std::string *result;

  v4 = (SipDialogInfo *)((char *)this + 464);
  if (v4 == a2)
  {
    std::string::operator=((std::string *)((char *)this + 488), (const std::string *)a2 + 1);
  }
  else
  {
    std::vector<SipDialogParticipantIdentity>::__assign_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>((uint64_t)v4, *(std::string **)a2, *((std::string **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4));
    std::string::operator=((std::string *)((char *)this + 488), (const std::string *)a2 + 1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 64, *((__int128 **)a2 + 6), (__int128 *)((char *)a2 + 56));
    std::vector<SipDialogParticipantMediaAttribute>::__assign_with_size[abi:ne180100]<SipDialogParticipantMediaAttribute*,SipDialogParticipantMediaAttribute*>((char *)this + 536, *((char **)a2 + 9), *((_QWORD *)a2 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2));
  }
  *((_BYTE *)this + 560) = *((_BYTE *)a2 + 96);
  result = std::string::operator=((std::string *)((char *)this + 568), (const std::string *)((char *)a2 + 104));
  *((_BYTE *)this + 592) = 1;
  return result;
}

std::string *std::construct_at[abi:ne180100]<SipDialogParticipantIdentity,SipDialogParticipantIdentity const&,SipDialogParticipantIdentity*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1BEE7795C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_SipDialogInfoBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&SipDialogInfoBody::kContentType, "application/dialog-info+xml");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &SipDialogInfoBody::kContentType, &dword_1BEDF4000);
}

const char *ims::analytics::asString(unsigned int a1)
{
  if (a1 > 0x3D)
    return "RtpError Undefined";
  else
    return off_1E78BEE90[a1];
}

uint64_t awd::metrics::protobuf_ShutdownFile_CATM_2eproto(awd::metrics *this)
{
  uint64_t result;

  if (qword_1ED70E918)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E918 + 8))(qword_1ED70E918);
  if (qword_1ED70E920)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E920 + 8))(qword_1ED70E920);
  if (qword_1ED70E928)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E928 + 8))(qword_1ED70E928);
  if (qword_1ED70E930)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E930 + 8))(qword_1ED70E930);
  if (qword_1ED70E938)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E938 + 8))(qword_1ED70E938);
  if (qword_1ED70E940)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E940 + 8))(qword_1ED70E940);
  if (qword_1ED70E948)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E948 + 8))(qword_1ED70E948);
  if (qword_1ED70E950)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E950 + 8))(qword_1ED70E950);
  if (qword_1ED70E958)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E958 + 8))(qword_1ED70E958);
  if (qword_1ED70E960)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E960 + 8))(qword_1ED70E960);
  if (qword_1ED70E968)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E968 + 8))(qword_1ED70E968);
  if (qword_1ED70E970)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E970 + 8))(qword_1ED70E970);
  if (qword_1ED70E978)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E978 + 8))(qword_1ED70E978);
  if (qword_1ED70E980)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E980 + 8))(qword_1ED70E980);
  if (qword_1ED70E988)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E988 + 8))(qword_1ED70E988);
  if (qword_1ED70E990)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E990 + 8))(qword_1ED70E990);
  if (qword_1ED70E998)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ED70E998 + 8))(qword_1ED70E998);
  result = qword_1ED70E9A0;
  if (qword_1ED70E9A0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1ED70E9A0 + 8))(qword_1ED70E9A0);
  return result;
}

uint64_t awd::metrics::session_termination_reason_IsValid(awd::metrics *this)
{
  int v1;
  uint64_t result;
  unsigned int v3;

  v1 = (int)this;
  result = 1;
  if ((v1 - 1) >= 0xA)
  {
    v3 = v1 - 101;
    if (v3 > 9 || ((1 << v3) & 0x27F) == 0)
      return 0;
  }
  return result;
}

BOOL awd::metrics::enum_ATM_CallEndReason_IsValid(awd::metrics *this)
{
  int v1;
  _BOOL8 result;
  uint64_t v3;

  v1 = (int)this;
  result = 1;
  v3 = (v1 + 1);
  if (v3 > 0x2A || v3 == 19)
    return v1 == 99;
  return result;
}

uint64_t awd::metrics::RESPONSE_Code_IsValid(awd::metrics *this)
{
  int v1;
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v1 = (int)this;
  result = 1;
  if (v1 > 477)
  {
    if (v1 > 999)
    {
      if (((v1 - 1000) > 0x1F || v1 == 1018)
        && ((v1 - 1500) > 0xD || ((1 << (v1 + 36)) & 0x203F) == 0)
        && v1 != 1580)
      {
        return 0;
      }
      return result;
    }
    if (v1 > 579)
    {
      if (((v1 - 580) > 0x1A || ((1 << (v1 - 68)) & 0x5900001) == 0) && v1 != 700 && v1 != 800)
        return 0;
      return result;
    }
    v7 = v1 - 478;
    if (v7 > 0x23)
      return 0;
    v5 = 1 << v7;
    v6 = 0x80FC1A7FDLL;
LABEL_23:
    if ((v5 & v6) != 0)
      return result;
    return 0;
  }
  if (v1 <= 179)
  {
    if (v1 < 0x1F)
      return result;
    v4 = v1 - 50;
    if (v4 > 0x32)
      return 0;
    v5 = 1 << v4;
    v6 = 0x4000000000C03;
    goto LABEL_23;
  }
  if (((v1 - 380) > 0x2B || ((1 << (v1 - 124)) & 0xF1E7FF00001) == 0)
    && ((v1 - 180) > 0x16 || ((1 << (v1 + 76)) & 0x58000F) == 0))
  {
    v3 = v1 - 300;
    if (v3 > 5 || ((1 << v3) & 0x27) == 0)
      return 0;
  }
  return result;
}

double awd::metrics::ATM_Registration_Attempt::SharedCtor(awd::metrics::ATM_Registration_Attempt *this)
{
  uint64_t v1;
  double result;

  v1 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v1;
  *((_BYTE *)this + 60) = 0;
  *(_QWORD *)&result = 0x100000001;
  *((_QWORD *)this + 3) = 0x100000001;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 4) = v1;
  *((_QWORD *)this + 5) = v1;
  *(_WORD *)((char *)this + 61) = 0;
  *((_QWORD *)this + 6) = v1;
  *((_QWORD *)this + 8) = v1;
  *((_QWORD *)this + 9) = v1;
  *((_QWORD *)this + 10) = v1;
  *((_QWORD *)this + 11) = v1;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = v1;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = v1;
  *((_QWORD *)this + 19) = 0;
  return result;
}

_QWORD *awd::metrics::ATM_Registration_Attempt::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = this;
  v2 = this[2];
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x1C3B87100](v2, 0x1012C40EC159624);
  }
  v5 = v1[4];
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (_QWORD *)MEMORY[0x1C3B87100](v5, 0x1012C40EC159624);
  }
  v7 = v1[5];
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (_QWORD *)MEMORY[0x1C3B87100](v7, 0x1012C40EC159624);
  }
  v9 = v1[6];
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    this = (_QWORD *)MEMORY[0x1C3B87100](v9, 0x1012C40EC159624);
  }
  v11 = v1[8];
  if (v11 != v3 && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    this = (_QWORD *)MEMORY[0x1C3B87100](v11, 0x1012C40EC159624);
  }
  v12 = v1[9];
  if (v12 != v3 && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    this = (_QWORD *)MEMORY[0x1C3B87100](v12, 0x1012C40EC159624);
  }
  v13 = v1[10];
  if (v13 != v3 && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    this = (_QWORD *)MEMORY[0x1C3B87100](v13, 0x1012C40EC159624);
  }
  v14 = v1[11];
  if (v14 != v3 && v14)
  {
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    this = (_QWORD *)MEMORY[0x1C3B87100](v14, 0x1012C40EC159624);
  }
  v15 = v1[15];
  if (v15 != v3 && v15)
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    this = (_QWORD *)MEMORY[0x1C3B87100](v15, 0x1012C40EC159624);
  }
  v16 = v1[18];
  if (v16 != v3 && v16)
  {
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
    JUMPOUT(0x1C3B87100);
  }
  return this;
}

void awd::metrics::ATM_Registration_Attempt::~ATM_Registration_Attempt(awd::metrics::ATM_Registration_Attempt *this)
{
  *(_QWORD *)this = &off_1E78BF090;
  awd::metrics::ATM_Registration_Attempt::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF090;
  awd::metrics::ATM_Registration_Attempt::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

awd::metrics::ATM_Registration_Attempt *awd::metrics::ATM_Registration_Attempt::New(awd::metrics::ATM_Registration_Attempt *this)
{
  awd::metrics::ATM_Registration_Attempt *v1;

  v1 = (awd::metrics::ATM_Registration_Attempt *)operator new();
  *(_QWORD *)v1 = &off_1E78BF090;
  awd::metrics::ATM_Registration_Attempt::SharedCtor(v1);
  return v1;
}

uint64_t awd::metrics::ATM_Registration_Attempt::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_BYTE *)(this + 156);
  if (v1)
  {
    *(_QWORD *)(this + 8) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(this + 16);
      if (v2 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(this + 60) = 0;
    *(_QWORD *)(this + 24) = 0x100000001;
    *(_DWORD *)(this + 56) = 0;
    if ((*(_BYTE *)(this + 156) & 0x40) != 0)
    {
      v3 = *(_QWORD *)(this + 32);
      if (v3 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 156) & 0x80) != 0)
    {
      v4 = *(_QWORD *)(this + 40);
      if (v4 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  v5 = *(_DWORD *)(this + 156);
  if ((v5 & 0xFF00) != 0)
  {
    *(_BYTE *)(this + 61) = 0;
    if ((v5 & 0x200) != 0)
    {
      v6 = *(_QWORD *)(this + 48);
      if (v6 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 157) & 4) != 0)
    {
      v7 = *(_QWORD *)(this + 64);
      if (v7 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 157) & 8) != 0)
    {
      v8 = *(_QWORD *)(this + 72);
      if (v8 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(_BYTE **)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v8 = 0;
          *(_BYTE *)(v8 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 157) & 0x10) != 0)
    {
      v9 = *(_QWORD *)(this + 80);
      if (v9 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v9 + 23) < 0)
        {
          **(_BYTE **)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v9 = 0;
          *(_BYTE *)(v9 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 157) & 0x20) != 0)
    {
      v10 = *(_QWORD *)(this + 88);
      if (v10 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(_BYTE **)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v10 = 0;
          *(_BYTE *)(v10 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(this + 96) = 0;
    v5 = *(_DWORD *)(this + 156);
  }
  if ((v5 & 0xFF0000) != 0)
  {
    *(_DWORD *)(this + 128) = 0;
    *(_QWORD *)(this + 104) = 0;
    *(_QWORD *)(this + 112) = 0;
    if ((v5 & 0x200000) != 0)
    {
      v11 = *(_QWORD *)(this + 120);
      if (v11 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(_BYTE **)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v11 = 0;
          *(_BYTE *)(v11 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 132) = 0;
    *(_DWORD *)(this + 136) = 0;
    v5 = *(_DWORD *)(this + 156);
  }
  if (HIBYTE(v5))
  {
    *(_BYTE *)(this + 62) = 0;
    *(_DWORD *)(this + 140) = 0;
    if ((v5 & 0x4000000) != 0)
    {
      v12 = *(_QWORD *)(this + 144);
      if (v12 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v12 + 23) < 0)
        {
          **(_BYTE **)v12 = 0;
          *(_QWORD *)(v12 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v12 = 0;
          *(_BYTE *)(v12 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 156) = 0;
  return this;
}

uint64_t awd::metrics::ATM_Registration_Attempt::MergePartialFromCodedStream(awd::metrics::ATM_Registration_Attempt *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  char *v11;
  uint64_t TagFallback;
  unsigned int v13;
  int v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  int v18;
  _QWORD *v19;
  uint64_t result;
  int v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  int v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  int v41;
  _QWORD *v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  _QWORD *v54;
  _BYTE *v55;
  unsigned int v56;
  _BYTE *v57;
  unsigned int v58;
  _BYTE *v59;
  unsigned int v60;
  _BYTE *v61;
  _BYTE *v62;
  _QWORD *v63;
  _BYTE *v64;
  _QWORD *v65;
  _BYTE *v66;
  unsigned int v67;
  _BYTE *v68;
  _QWORD *v69;
  _BYTE *v70;
  _QWORD *v71;
  _BYTE *v72;
  _QWORD *v73;
  _BYTE *v74;
  _QWORD *v75;
  _BYTE *v76;
  _QWORD *v77;
  _BYTE *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unint64_t *v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;

  v4 = (unsigned int *)((char *)this + 56);
  v5 = (unsigned int *)((char *)this + 96);
  v6 = (unsigned int *)((char *)this + 100);
  v7 = (unsigned int *)((char *)this + 104);
  v90 = (unsigned int *)((char *)this + 112);
  v91 = (unsigned int *)((char *)this + 108);
  v86 = (unint64_t *)((char *)this + 8);
  v87 = (unsigned int *)((char *)this + 128);
  v8 = (unsigned int *)((char *)this + 132);
  v9 = (unsigned int *)((char *)this + 136);
  v88 = (unsigned int *)((char *)this + 140);
  v89 = (unsigned int *)((char *)this + 116);
  v10 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v11;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    v13 = TagFallback >> 3;
    switch(TagFallback >> 3)
    {
      case 1u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v86);
          if (!(_DWORD)result)
            return result;
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v86 = *v16;
          v17 = v16 + 1;
          *((_QWORD *)a2 + 1) = v17;
        }
        v21 = *((_DWORD *)this + 39) | 1;
        *((_DWORD *)this + 39) = v21;
        if ((unint64_t)v17 < v15 && *v17 == 18)
        {
          *((_QWORD *)a2 + 1) = v17 + 1;
          goto LABEL_125;
        }
        continue;
      case 2u:
        v14 = TagFallback & 7;
        if (v14 != 2)
          goto LABEL_84;
        v21 = *((_DWORD *)this + 39);
LABEL_125:
        *((_DWORD *)this + 39) = v21 | 2;
        if (*((_QWORD *)this + 2) == v10)
        {
          v54 = (_QWORD *)operator new();
          v54[1] = 0;
          v54[2] = 0;
          *v54 = 0;
          *((_QWORD *)this + 2) = v54;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v55 = (_BYTE *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v55 >= v22 || *v55 != 24)
          continue;
        v23 = v55 + 1;
        *((_QWORD *)a2 + 1) = v23;
LABEL_131:
        v92 = 0;
        if ((unint64_t)v23 >= v22 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v92);
          if (!(_DWORD)result)
            return result;
          v56 = v92;
          v57 = (_BYTE *)*((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v56 = *v23;
          v57 = v23 + 1;
          *((_QWORD *)a2 + 1) = v57;
        }
        *((_BYTE *)this + 60) = v56 != 0;
        *((_DWORD *)this + 39) |= 4u;
        if ((unint64_t)v57 >= v22 || *v57 != 32)
          continue;
        v24 = v57 + 1;
        *((_QWORD *)a2 + 1) = v24;
LABEL_139:
        v92 = 0;
        if ((unint64_t)v24 >= v22 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v92);
          if (!(_DWORD)result)
            return result;
          v58 = v92;
        }
        else
        {
          v58 = *v24;
          *((_QWORD *)a2 + 1) = v24 + 1;
        }
        if (v58 - 1 <= 0xC)
        {
          *((_DWORD *)this + 39) |= 8u;
          *((_DWORD *)this + 6) = v58;
        }
        v59 = (_BYTE *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v59 >= v25 || *v59 != 40)
          continue;
        v26 = v59 + 1;
        *((_QWORD *)a2 + 1) = v26;
LABEL_149:
        v92 = 0;
        if ((unint64_t)v26 >= v25 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v92);
          if (!(_DWORD)result)
            return result;
          v60 = v92;
        }
        else
        {
          v60 = *v26;
          *((_QWORD *)a2 + 1) = v26 + 1;
        }
        if (v60 - 1 <= 3)
        {
          *((_DWORD *)this + 39) |= 0x10u;
          *((_DWORD *)this + 7) = v60;
        }
        v61 = (_BYTE *)*((_QWORD *)a2 + 1);
        v27 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v61 >= v27 || *v61 != 48)
          continue;
        v28 = v61 + 1;
        *((_QWORD *)a2 + 1) = v28;
LABEL_159:
        if ((unint64_t)v28 >= v27 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v62 = (_BYTE *)*((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v28;
          v62 = v28 + 1;
          *((_QWORD *)a2 + 1) = v62;
        }
        v29 = *((_DWORD *)this + 39) | 0x20;
        *((_DWORD *)this + 39) = v29;
        if ((unint64_t)v62 >= v27 || *v62 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v62 + 1;
LABEL_167:
        *((_DWORD *)this + 39) = v29 | 0x40;
        if (*((_QWORD *)this + 4) == v10)
        {
          v63 = (_QWORD *)operator new();
          v63[1] = 0;
          v63[2] = 0;
          *v63 = 0;
          *((_QWORD *)this + 4) = v63;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v64 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v64 >= *((_QWORD *)a2 + 2) || *v64 != 66)
          continue;
        *((_QWORD *)a2 + 1) = v64 + 1;
LABEL_173:
        *((_DWORD *)this + 39) |= 0x80u;
        if (*((_QWORD *)this + 5) == v10)
        {
          v65 = (_QWORD *)operator new();
          v65[1] = 0;
          v65[2] = 0;
          *v65 = 0;
          *((_QWORD *)this + 5) = v65;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v66 = (_BYTE *)*((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v66 >= v30 || *v66 != 72)
          continue;
        v31 = v66 + 1;
        *((_QWORD *)a2 + 1) = v31;
LABEL_179:
        v92 = 0;
        if ((unint64_t)v31 >= v30 || *v31 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v92);
          if (!(_DWORD)result)
            return result;
          v67 = v92;
          v68 = (_BYTE *)*((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v67 = *v31;
          v68 = v31 + 1;
          *((_QWORD *)a2 + 1) = v68;
        }
        *((_BYTE *)this + 61) = v67 != 0;
        v32 = *((_DWORD *)this + 39) | 0x100;
        *((_DWORD *)this + 39) = v32;
        if ((unint64_t)v68 >= v30 || *v68 != 82)
          continue;
        *((_QWORD *)a2 + 1) = v68 + 1;
LABEL_187:
        *((_DWORD *)this + 39) = v32 | 0x200;
        if (*((_QWORD *)this + 6) == v10)
        {
          v69 = (_QWORD *)operator new();
          v69[1] = 0;
          v69[2] = 0;
          *v69 = 0;
          *((_QWORD *)this + 6) = v69;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v70 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v70 >= *((_QWORD *)a2 + 2) || *v70 != 90)
          continue;
        *((_QWORD *)a2 + 1) = v70 + 1;
LABEL_193:
        *((_DWORD *)this + 39) |= 0x400u;
        if (*((_QWORD *)this + 8) == v10)
        {
          v71 = (_QWORD *)operator new();
          v71[1] = 0;
          v71[2] = 0;
          *v71 = 0;
          *((_QWORD *)this + 8) = v71;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v72 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v72 >= *((_QWORD *)a2 + 2) || *v72 != 98)
          continue;
        *((_QWORD *)a2 + 1) = v72 + 1;
LABEL_199:
        *((_DWORD *)this + 39) |= 0x800u;
        if (*((_QWORD *)this + 9) == v10)
        {
          v73 = (_QWORD *)operator new();
          v73[1] = 0;
          v73[2] = 0;
          *v73 = 0;
          *((_QWORD *)this + 9) = v73;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v74 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v74 >= *((_QWORD *)a2 + 2) || *v74 != 106)
          continue;
        *((_QWORD *)a2 + 1) = v74 + 1;
LABEL_205:
        *((_DWORD *)this + 39) |= 0x1000u;
        if (*((_QWORD *)this + 10) == v10)
        {
          v75 = (_QWORD *)operator new();
          v75[1] = 0;
          v75[2] = 0;
          *v75 = 0;
          *((_QWORD *)this + 10) = v75;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v76 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v76 >= *((_QWORD *)a2 + 2) || *v76 != 114)
          continue;
        *((_QWORD *)a2 + 1) = v76 + 1;
LABEL_211:
        *((_DWORD *)this + 39) |= 0x2000u;
        if (*((_QWORD *)this + 11) == v10)
        {
          v77 = (_QWORD *)operator new();
          v77[1] = 0;
          v77[2] = 0;
          *v77 = 0;
          *((_QWORD *)this + 11) = v77;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v78 = (_BYTE *)*((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v78 >= v33 || *v78 != 120)
          continue;
        v34 = v78 + 1;
        *((_QWORD *)a2 + 1) = v34;
LABEL_217:
        if ((unint64_t)v34 >= v33 || (char)*v34 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v79 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v33 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v34;
          v79 = v34 + 1;
          *((_QWORD *)a2 + 1) = v79;
        }
        *((_DWORD *)this + 39) |= 0x4000u;
        if ((int)v33 - (int)v79 < 2 || *v79 != 128 || v79[1] != 1)
          continue;
        v35 = v79 + 2;
        *((_QWORD *)a2 + 1) = v35;
LABEL_226:
        if ((unint64_t)v35 >= v33 || (char)*v35 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v80 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v33 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v35;
          v80 = v35 + 1;
          *((_QWORD *)a2 + 1) = v80;
        }
        *((_DWORD *)this + 39) |= 0x8000u;
        if ((int)v33 - (int)v80 < 2 || *v80 != 136 || v80[1] != 1)
          continue;
        v36 = v80 + 2;
        *((_QWORD *)a2 + 1) = v36;
LABEL_235:
        if ((unint64_t)v36 >= v33 || (char)*v36 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v81 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v33 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v36;
          v81 = v36 + 1;
          *((_QWORD *)a2 + 1) = v81;
        }
        *((_DWORD *)this + 39) |= 0x10000u;
        if ((int)v33 - (int)v81 < 2 || *v81 != 144 || v81[1] != 1)
          continue;
        v37 = v81 + 2;
        *((_QWORD *)a2 + 1) = v37;
LABEL_244:
        if ((unint64_t)v37 >= v33 || (char)*v37 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v91);
          if (!(_DWORD)result)
            return result;
          v82 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v33 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v91 = *v37;
          v82 = v37 + 1;
          *((_QWORD *)a2 + 1) = v82;
        }
        *((_DWORD *)this + 39) |= 0x20000u;
        if ((int)v33 - (int)v82 < 2 || *v82 != 152 || v82[1] != 1)
          continue;
        v38 = v82 + 2;
        *((_QWORD *)a2 + 1) = v38;
LABEL_253:
        if ((unint64_t)v38 >= v33 || (char)*v38 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v90);
          if (!(_DWORD)result)
            return result;
          v83 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v33 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v90 = *v38;
          v83 = v38 + 1;
          *((_QWORD *)a2 + 1) = v83;
        }
        *((_DWORD *)this + 39) |= 0x40000u;
        if ((int)v33 - (int)v83 < 2 || *v83 != 160 || v83[1] != 1)
          continue;
        v39 = v83 + 2;
        *((_QWORD *)a2 + 1) = v39;
LABEL_262:
        if ((unint64_t)v39 >= v33 || (char)*v39 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v89);
          if (!(_DWORD)result)
            return result;
          v84 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v33 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v89 = *v39;
          v84 = v39 + 1;
          *((_QWORD *)a2 + 1) = v84;
        }
        *((_DWORD *)this + 39) |= 0x80000u;
        if ((int)v33 - (int)v84 < 2 || *v84 != 168 || v84[1] != 1)
          continue;
        v40 = v84 + 2;
        *((_QWORD *)a2 + 1) = v40;
LABEL_271:
        if ((unint64_t)v40 >= v33 || (char)*v40 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v87);
          if (!(_DWORD)result)
            return result;
          v85 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v33 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v87 = *v40;
          v85 = v40 + 1;
          *((_QWORD *)a2 + 1) = v85;
        }
        v41 = *((_DWORD *)this + 39) | 0x100000;
        *((_DWORD *)this + 39) = v41;
        if ((int)v33 - (int)v85 < 2 || *v85 != 178 || v85[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v85 + 2;
LABEL_65:
        *((_DWORD *)this + 39) = v41 | 0x200000;
        if (*((_QWORD *)this + 15) == v10)
        {
          v42 = (_QWORD *)operator new();
          v42[1] = 0;
          v42[2] = 0;
          *v42 = 0;
          *((_QWORD *)this + 15) = v42;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v44 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        if ((int)v43 - (int)v44 < 2 || *v44 != 184 || v44[1] != 1)
          continue;
        v45 = v44 + 2;
        *((_QWORD *)a2 + 1) = v45;
LABEL_74:
        if ((unint64_t)v45 >= v43 || (char)*v45 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v46 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v43 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v45;
          v46 = v45 + 1;
          *((_QWORD *)a2 + 1) = v46;
        }
        *((_DWORD *)this + 39) |= 0x400000u;
        if ((int)v43 - (int)v46 < 2 || *v46 != 192 || v46[1] != 1)
          continue;
        v47 = v46 + 2;
        *((_QWORD *)a2 + 1) = v47;
LABEL_93:
        if ((unint64_t)v47 >= v43 || (char)*v47 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!(_DWORD)result)
            return result;
          v50 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v43 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v9 = *v47;
          v50 = v47 + 1;
          *((_QWORD *)a2 + 1) = v50;
        }
        *((_DWORD *)this + 39) |= 0x800000u;
        if ((int)v43 - (int)v50 < 2 || *v50 != 200 || v50[1] != 1)
          continue;
        v48 = v50 + 2;
        *((_QWORD *)a2 + 1) = v48;
LABEL_102:
        v92 = 0;
        if ((unint64_t)v48 >= v43 || (char)*v48 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v92);
          if (!(_DWORD)result)
            return result;
          v51 = v92;
          v52 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v43 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v51 = *v48;
          v52 = v48 + 1;
          *((_QWORD *)a2 + 1) = v52;
        }
        *((_BYTE *)this + 62) = v51 != 0;
        *((_DWORD *)this + 39) |= 0x1000000u;
        if ((int)v43 - (int)v52 < 2 || *v52 != 240 || v52[1] != 34)
          continue;
        v49 = v52 + 2;
        *((_QWORD *)a2 + 1) = v49;
        goto LABEL_111;
      case 3u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        goto LABEL_131;
      case 4u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        goto LABEL_139;
      case 5u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v26 = (char *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        goto LABEL_149;
      case 6u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v28 = (char *)*((_QWORD *)a2 + 1);
        v27 = *((_QWORD *)a2 + 2);
        goto LABEL_159;
      case 7u:
        v14 = TagFallback & 7;
        if (v14 != 2)
          goto LABEL_84;
        v29 = *((_DWORD *)this + 39);
        goto LABEL_167;
      case 8u:
        v14 = TagFallback & 7;
        if (v14 == 2)
          goto LABEL_173;
        goto LABEL_84;
      case 9u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v31 = (char *)*((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        goto LABEL_179;
      case 0xAu:
        v14 = TagFallback & 7;
        if (v14 != 2)
          goto LABEL_84;
        v32 = *((_DWORD *)this + 39);
        goto LABEL_187;
      case 0xBu:
        v14 = TagFallback & 7;
        if (v14 == 2)
          goto LABEL_193;
        goto LABEL_84;
      case 0xCu:
        v14 = TagFallback & 7;
        if (v14 == 2)
          goto LABEL_199;
        goto LABEL_84;
      case 0xDu:
        v14 = TagFallback & 7;
        if (v14 == 2)
          goto LABEL_205;
        goto LABEL_84;
      case 0xEu:
        v14 = TagFallback & 7;
        if (v14 == 2)
          goto LABEL_211;
        goto LABEL_84;
      case 0xFu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v34 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        goto LABEL_217;
      case 0x10u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v35 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        goto LABEL_226;
      case 0x11u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v36 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        goto LABEL_235;
      case 0x12u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v37 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        goto LABEL_244;
      case 0x13u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v38 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        goto LABEL_253;
      case 0x14u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v39 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        goto LABEL_262;
      case 0x15u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v40 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        goto LABEL_271;
      case 0x16u:
        v14 = TagFallback & 7;
        if (v14 != 2)
          goto LABEL_84;
        v41 = *((_DWORD *)this + 39);
        goto LABEL_65;
      case 0x17u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v45 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        goto LABEL_74;
      case 0x18u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v47 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        goto LABEL_93;
      case 0x19u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_84;
        v48 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        goto LABEL_102;
      default:
        if (v13 == 558)
        {
          v14 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_84;
          v49 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v43 = *((_QWORD *)a2 + 2);
LABEL_111:
          if ((unint64_t)v49 >= v43 || (char)*v49 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v88);
            if (!(_DWORD)result)
              return result;
            v53 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v43 = *((_QWORD *)a2 + 2);
          }
          else
          {
            *v88 = *v49;
            v53 = v49 + 1;
            *((_QWORD *)a2 + 1) = v53;
          }
          v18 = *((_DWORD *)this + 39) | 0x2000000;
          *((_DWORD *)this + 39) = v18;
          if ((int)v43 - (int)v53 >= 2 && *v53 == 250 && v53[1] == 34)
          {
            *((_QWORD *)a2 + 1) = v53 + 2;
            goto LABEL_16;
          }
          continue;
        }
        if (v13 == 559)
        {
          v14 = TagFallback & 7;
          if (v14 != 2)
            goto LABEL_84;
          v18 = *((_DWORD *)this + 39);
LABEL_16:
          *((_DWORD *)this + 39) = v18 | 0x4000000;
          if (*((_QWORD *)this + 18) == v10)
          {
            v19 = (_QWORD *)operator new();
            v19[1] = 0;
            v19[2] = 0;
            *v19 = 0;
            *((_QWORD *)this + 18) = v19;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!(_DWORD)result)
            return result;
          if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        v14 = TagFallback & 7;
LABEL_84:
        if (v14 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
          continue;
        }
        return 1;
    }
  }
}

uint64_t awd::metrics::ATM_Registration_Attempt::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 156);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 156);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 60), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 56), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 61), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(unsigned int *)(v5 + 96), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 100), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(unsigned int *)(v5 + 104), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *(unsigned int *)(v5 + 108), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(unsigned int *)(v5 + 112), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(unsigned int *)(v5 + 116), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned int *)(v5 + 128), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, *(unsigned int *)(v5 + 132), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, *(unsigned int *)(v5 + 136), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19, *(unsigned __int8 *)(v5 + 62), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 156);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
LABEL_54:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22E, *(unsigned int *)(v5 + 140), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 156) & 0x4000000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::metrics::ATM_Registration_Attempt::ByteSize(awd::metrics::ATM_Registration_Attempt *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v58;
  int v59;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v60;
  int v61;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v62;
  int v63;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v64;
  int v65;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v66;
  int v67;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v68;
  int v69;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v70;
  int v71;
  uint64_t v72;
  int v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v78;
  int v79;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v80;
  int v81;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v82;
  int v83;
  uint64_t v84;
  int v85;
  char v86;
  uint64_t v87;
  unint64_t v88;
  int v89;

  v2 = *((_DWORD *)this + 39);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_59;
  }
  if ((v2 & 1) != 0)
  {
    LODWORD(v3) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 1;
    v2 = *((_DWORD *)this + 39);
    if ((v2 & 2) == 0)
      goto LABEL_16;
  }
  else
  {
    LODWORD(v3) = 0;
    if ((v2 & 2) == 0)
      goto LABEL_16;
  }
  v4 = *((_QWORD *)this + 2);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v2 = *((_DWORD *)this + 39);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 1;
  }
  if (v6 < 0)
    v5 = v7;
  LODWORD(v3) = v3 + v9 + v5 + 1;
LABEL_16:
  if ((v2 & 4) != 0)
    v3 = (v3 + 2);
  else
    v3 = v3;
  if ((v2 & 8) != 0)
  {
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v10 & 0x80000000) != 0)
    {
      v11 = 10;
    }
    else if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
      v2 = *((_DWORD *)this + 39);
    }
    else
    {
      v11 = 1;
    }
    v3 = (v3 + v11 + 1);
    if ((v2 & 0x10) == 0)
    {
LABEL_21:
      if ((v2 & 0x20) == 0)
        goto LABEL_22;
      goto LABEL_37;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_21;
  }
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if ((v12 & 0x80000000) != 0)
  {
    v13 = 10;
  }
  else if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
    v2 = *((_DWORD *)this + 39);
  }
  else
  {
    v13 = 1;
  }
  v3 = (v3 + v13 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_41;
  }
LABEL_37:
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
  if (v14 >= 0x80)
  {
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    v2 = *((_DWORD *)this + 39);
  }
  else
  {
    v15 = 1;
  }
  v3 = (v3 + v15 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_59;
    goto LABEL_50;
  }
LABEL_41:
  v16 = *((_QWORD *)this + 4);
  v17 = *(unsigned __int8 *)(v16 + 23);
  v18 = v17;
  v19 = *(_QWORD *)(v16 + 8);
  if ((v17 & 0x80u) == 0)
    v20 = *(unsigned __int8 *)(v16 + 23);
  else
    v20 = v19;
  if (v20 >= 0x80)
  {
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20);
    v17 = *(unsigned __int8 *)(v16 + 23);
    v19 = *(_QWORD *)(v16 + 8);
    v2 = *((_DWORD *)this + 39);
    v18 = *(_BYTE *)(v16 + 23);
  }
  else
  {
    v21 = 1;
  }
  if (v18 < 0)
    v17 = v19;
  v3 = (v3 + v21 + v17 + 1);
  if ((v2 & 0x80) != 0)
  {
LABEL_50:
    v22 = *((_QWORD *)this + 5);
    v23 = *(unsigned __int8 *)(v22 + 23);
    v24 = v23;
    v25 = *(_QWORD *)(v22 + 8);
    if ((v23 & 0x80u) == 0)
      v26 = *(unsigned __int8 *)(v22 + 23);
    else
      v26 = v25;
    if (v26 >= 0x80)
    {
      v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26);
      v23 = *(unsigned __int8 *)(v22 + 23);
      v25 = *(_QWORD *)(v22 + 8);
      v2 = *((_DWORD *)this + 39);
      v24 = *(_BYTE *)(v22 + 23);
    }
    else
    {
      v27 = 1;
    }
    if (v24 < 0)
      v23 = v25;
    v3 = (v3 + v27 + v23 + 1);
  }
LABEL_59:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_124;
  if ((v2 & 0x100) != 0)
    v3 = (v3 + 2);
  else
    v3 = v3;
  if ((v2 & 0x200) != 0)
  {
    v28 = *((_QWORD *)this + 6);
    v29 = *(unsigned __int8 *)(v28 + 23);
    v30 = v29;
    v31 = *(_QWORD *)(v28 + 8);
    if ((v29 & 0x80u) == 0)
      v32 = *(unsigned __int8 *)(v28 + 23);
    else
      v32 = v31;
    if (v32 >= 0x80)
    {
      v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32);
      v29 = *(unsigned __int8 *)(v28 + 23);
      v31 = *(_QWORD *)(v28 + 8);
      v2 = *((_DWORD *)this + 39);
      v30 = *(_BYTE *)(v28 + 23);
    }
    else
    {
      v33 = 1;
    }
    if (v30 < 0)
      v29 = v31;
    v3 = (v3 + v33 + v29 + 1);
    if ((v2 & 0x400) == 0)
    {
LABEL_65:
      if ((v2 & 0x800) == 0)
        goto LABEL_66;
      goto LABEL_89;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_65;
  }
  v34 = *((_QWORD *)this + 8);
  v35 = *(unsigned __int8 *)(v34 + 23);
  v36 = v35;
  v37 = *(_QWORD *)(v34 + 8);
  if ((v35 & 0x80u) == 0)
    v38 = *(unsigned __int8 *)(v34 + 23);
  else
    v38 = v37;
  if (v38 >= 0x80)
  {
    v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v38);
    v35 = *(unsigned __int8 *)(v34 + 23);
    v37 = *(_QWORD *)(v34 + 8);
    v2 = *((_DWORD *)this + 39);
    v36 = *(_BYTE *)(v34 + 23);
  }
  else
  {
    v39 = 1;
  }
  if (v36 < 0)
    v35 = v37;
  v3 = (v3 + v39 + v35 + 1);
  if ((v2 & 0x800) == 0)
  {
LABEL_66:
    if ((v2 & 0x1000) == 0)
      goto LABEL_67;
    goto LABEL_98;
  }
LABEL_89:
  v40 = *((_QWORD *)this + 9);
  v41 = *(unsigned __int8 *)(v40 + 23);
  v42 = v41;
  v43 = *(_QWORD *)(v40 + 8);
  if ((v41 & 0x80u) == 0)
    v44 = *(unsigned __int8 *)(v40 + 23);
  else
    v44 = v43;
  if (v44 >= 0x80)
  {
    v45 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v44);
    v41 = *(unsigned __int8 *)(v40 + 23);
    v43 = *(_QWORD *)(v40 + 8);
    v2 = *((_DWORD *)this + 39);
    v42 = *(_BYTE *)(v40 + 23);
  }
  else
  {
    v45 = 1;
  }
  if (v42 < 0)
    v41 = v43;
  v3 = (v3 + v45 + v41 + 1);
  if ((v2 & 0x1000) == 0)
  {
LABEL_67:
    if ((v2 & 0x2000) == 0)
      goto LABEL_68;
    goto LABEL_107;
  }
LABEL_98:
  v46 = *((_QWORD *)this + 10);
  v47 = *(unsigned __int8 *)(v46 + 23);
  v48 = v47;
  v49 = *(_QWORD *)(v46 + 8);
  if ((v47 & 0x80u) == 0)
    v50 = *(unsigned __int8 *)(v46 + 23);
  else
    v50 = v49;
  if (v50 >= 0x80)
  {
    v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v50);
    v47 = *(unsigned __int8 *)(v46 + 23);
    v49 = *(_QWORD *)(v46 + 8);
    v2 = *((_DWORD *)this + 39);
    v48 = *(_BYTE *)(v46 + 23);
  }
  else
  {
    v51 = 1;
  }
  if (v48 < 0)
    v47 = v49;
  v3 = (v3 + v51 + v47 + 1);
  if ((v2 & 0x2000) == 0)
  {
LABEL_68:
    if ((v2 & 0x4000) == 0)
      goto LABEL_69;
    goto LABEL_116;
  }
LABEL_107:
  v52 = *((_QWORD *)this + 11);
  v53 = *(unsigned __int8 *)(v52 + 23);
  v54 = v53;
  v55 = *(_QWORD *)(v52 + 8);
  if ((v53 & 0x80u) == 0)
    v56 = *(unsigned __int8 *)(v52 + 23);
  else
    v56 = v55;
  if (v56 >= 0x80)
  {
    v57 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v56);
    v53 = *(unsigned __int8 *)(v52 + 23);
    v55 = *(_QWORD *)(v52 + 8);
    v2 = *((_DWORD *)this + 39);
    v54 = *(_BYTE *)(v52 + 23);
  }
  else
  {
    v57 = 1;
  }
  if (v54 < 0)
    v53 = v55;
  v3 = (v3 + v57 + v53 + 1);
  if ((v2 & 0x4000) == 0)
  {
LABEL_69:
    if ((v2 & 0x8000) == 0)
      goto LABEL_124;
    goto LABEL_120;
  }
LABEL_116:
  v58 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 24);
  if (v58 >= 0x80)
  {
    v59 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v58);
    v2 = *((_DWORD *)this + 39);
  }
  else
  {
    v59 = 1;
  }
  v3 = (v3 + v59 + 1);
  if ((v2 & 0x8000) != 0)
  {
LABEL_120:
    v60 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 25);
    if (v60 >= 0x80)
    {
      v61 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v60);
      v2 = *((_DWORD *)this + 39);
    }
    else
    {
      v61 = 1;
    }
    v3 = (v3 + v61 + 2);
  }
LABEL_124:
  if ((v2 & 0xFF0000) == 0)
    goto LABEL_171;
  if ((v2 & 0x10000) != 0)
  {
    v62 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 26);
    if (v62 >= 0x80)
    {
      v63 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v62);
      v2 = *((_DWORD *)this + 39);
    }
    else
    {
      v63 = 1;
    }
    v3 = (v3 + v63 + 2);
    if ((v2 & 0x20000) == 0)
    {
LABEL_127:
      if ((v2 & 0x40000) == 0)
        goto LABEL_128;
      goto LABEL_142;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_127;
  }
  v64 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 27);
  if (v64 >= 0x80)
  {
    v65 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v64);
    v2 = *((_DWORD *)this + 39);
  }
  else
  {
    v65 = 1;
  }
  v3 = (v3 + v65 + 2);
  if ((v2 & 0x40000) == 0)
  {
LABEL_128:
    if ((v2 & 0x80000) == 0)
      goto LABEL_129;
    goto LABEL_146;
  }
LABEL_142:
  v66 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 28);
  if (v66 >= 0x80)
  {
    v67 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v66) + 2;
    v2 = *((_DWORD *)this + 39);
  }
  else
  {
    v67 = 3;
  }
  v3 = (v67 + v3);
  if ((v2 & 0x80000) == 0)
  {
LABEL_129:
    if ((v2 & 0x100000) == 0)
      goto LABEL_130;
    goto LABEL_150;
  }
LABEL_146:
  v68 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 29);
  if (v68 >= 0x80)
  {
    v69 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v68) + 2;
    v2 = *((_DWORD *)this + 39);
  }
  else
  {
    v69 = 3;
  }
  v3 = (v69 + v3);
  if ((v2 & 0x100000) == 0)
  {
LABEL_130:
    if ((v2 & 0x200000) == 0)
      goto LABEL_131;
    goto LABEL_154;
  }
LABEL_150:
  v70 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 32);
  if (v70 >= 0x80)
  {
    v71 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v70) + 2;
    v2 = *((_DWORD *)this + 39);
  }
  else
  {
    v71 = 3;
  }
  v3 = (v71 + v3);
  if ((v2 & 0x200000) == 0)
  {
LABEL_131:
    if ((v2 & 0x400000) == 0)
      goto LABEL_132;
    goto LABEL_163;
  }
LABEL_154:
  v72 = *((_QWORD *)this + 15);
  v73 = *(unsigned __int8 *)(v72 + 23);
  v74 = v73;
  v75 = *(_QWORD *)(v72 + 8);
  if ((v73 & 0x80u) == 0)
    v76 = *(unsigned __int8 *)(v72 + 23);
  else
    v76 = v75;
  if (v76 >= 0x80)
  {
    v77 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v76);
    v73 = *(unsigned __int8 *)(v72 + 23);
    v75 = *(_QWORD *)(v72 + 8);
    v2 = *((_DWORD *)this + 39);
    v74 = *(_BYTE *)(v72 + 23);
  }
  else
  {
    v77 = 1;
  }
  if (v74 < 0)
    v73 = v75;
  v3 = (v3 + v77 + v73 + 2);
  if ((v2 & 0x400000) == 0)
  {
LABEL_132:
    if ((v2 & 0x800000) == 0)
      goto LABEL_171;
    goto LABEL_167;
  }
LABEL_163:
  v78 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 33);
  if (v78 >= 0x80)
  {
    v79 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v78) + 2;
    v2 = *((_DWORD *)this + 39);
  }
  else
  {
    v79 = 3;
  }
  v3 = (v79 + v3);
  if ((v2 & 0x800000) != 0)
  {
LABEL_167:
    v80 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 34);
    if (v80 >= 0x80)
    {
      v81 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v80) + 2;
      v2 = *((_DWORD *)this + 39);
    }
    else
    {
      v81 = 3;
    }
    v3 = (v81 + v3);
  }
LABEL_171:
  if (HIBYTE(v2))
  {
    if ((v2 & 0x1000000) != 0)
      v3 = (v3 + 3);
    else
      v3 = v3;
    if ((v2 & 0x2000000) != 0)
    {
      v82 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 35);
      if (v82 >= 0x80)
      {
        v83 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v82) + 2;
        v2 = *((_DWORD *)this + 39);
      }
      else
      {
        v83 = 3;
      }
      v3 = (v83 + v3);
    }
    if ((v2 & 0x4000000) != 0)
    {
      v84 = *((_QWORD *)this + 18);
      v85 = *(unsigned __int8 *)(v84 + 23);
      v86 = v85;
      v87 = *(_QWORD *)(v84 + 8);
      if ((v85 & 0x80u) == 0)
        v88 = *(unsigned __int8 *)(v84 + 23);
      else
        v88 = v87;
      if (v88 >= 0x80)
      {
        v89 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v88);
        v85 = *(unsigned __int8 *)(v84 + 23);
        v87 = *(_QWORD *)(v84 + 8);
        v86 = *(_BYTE *)(v84 + 23);
      }
      else
      {
        v89 = 1;
      }
      if (v86 < 0)
        v85 = v87;
      v3 = (v3 + v89 + v85 + 2);
    }
  }
  *((_DWORD *)this + 38) = v3;
  return v3;
}

void awd::metrics::ATM_Registration_Attempt::CheckTypeAndMergeFrom(const std::string **this, const std::string **lpsrc)
{
  unsigned int v4;
  const std::string *v5;
  const std::string *v6;
  std::string *v7;
  char v8;
  int v9;
  int v10;
  int v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  int v16;
  int v17;
  char v18;
  const std::string *v19;
  std::string *v20;
  const std::string *v21;
  std::string *v22;
  const std::string *v23;
  std::string *v24;
  const std::string *v25;
  std::string *v26;
  const std::string *v27;
  std::string *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  const std::string *v35;
  std::string *v36;
  int v37;
  char v38;
  int v39;
  const std::string *v40;
  std::string *v41;
  char v42[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v42);
  }
  v4 = *((_DWORD *)lpsrc + 39);
  if (!(_BYTE)v4)
    goto LABEL_30;
  if ((v4 & 1) != 0)
  {
    v5 = lpsrc[1];
    *((_DWORD *)this + 39) |= 1u;
    this[1] = v5;
    v4 = *((_DWORD *)lpsrc + 39);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0)
        goto LABEL_8;
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  v6 = lpsrc[2];
  *((_DWORD *)this + 39) |= 2u;
  v7 = (std::string *)this[2];
  if (v7 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v7 = (std::string *)operator new();
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    this[2] = v7;
  }
  std::string::operator=(v7, v6);
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_BYTE *)lpsrc + 60);
  *((_DWORD *)this + 39) |= 4u;
  *((_BYTE *)this + 60) = v8;
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_19:
  v9 = *((_DWORD *)lpsrc + 6);
  if ((v9 - 1) >= 0xD)
    __assert_rtn("set_type", "CATM.pb.h", 6747, "::awd::metrics::enum_ims_reg_type_IsValid(value)");
  *((_DWORD *)this + 39) |= 8u;
  *((_DWORD *)this + 6) = v9;
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
LABEL_23:
    v11 = *((_DWORD *)lpsrc + 14);
    *((_DWORD *)this + 39) |= 0x20u;
    *((_DWORD *)this + 14) = v11;
    v4 = *((_DWORD *)lpsrc + 39);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0)
        goto LABEL_30;
      goto LABEL_27;
    }
    goto LABEL_24;
  }
LABEL_21:
  v10 = *((_DWORD *)lpsrc + 7);
  if ((v10 - 1) >= 4)
    __assert_rtn("set_feature", "CATM.pb.h", 6770, "::awd::metrics::enum_ims_reg_feature_IsValid(value)");
  *((_DWORD *)this + 39) |= 0x10u;
  *((_DWORD *)this + 7) = v10;
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x20) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v4 & 0x40) == 0)
    goto LABEL_12;
LABEL_24:
  v12 = lpsrc[4];
  *((_DWORD *)this + 39) |= 0x40u;
  v13 = (std::string *)this[4];
  if (v13 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v13 = (std::string *)operator new();
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    this[4] = v13;
  }
  std::string::operator=(v13, v12);
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x80) != 0)
  {
LABEL_27:
    v14 = lpsrc[5];
    *((_DWORD *)this + 39) |= 0x80u;
    v15 = (std::string *)this[5];
    if (v15 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v15 = (std::string *)operator new();
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      this[5] = v15;
    }
    std::string::operator=(v15, v14);
    v4 = *((_DWORD *)lpsrc + 39);
  }
LABEL_30:
  if ((v4 & 0xFF00) == 0)
    goto LABEL_40;
  if ((v4 & 0x100) != 0)
  {
    v18 = *((_BYTE *)lpsrc + 61);
    *((_DWORD *)this + 39) |= 0x100u;
    *((_BYTE *)this + 61) = v18;
    v4 = *((_DWORD *)lpsrc + 39);
    if ((v4 & 0x200) == 0)
    {
LABEL_33:
      if ((v4 & 0x400) == 0)
        goto LABEL_34;
      goto LABEL_59;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_33;
  }
  v19 = lpsrc[6];
  *((_DWORD *)this + 39) |= 0x200u;
  v20 = (std::string *)this[6];
  if (v20 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v20 = (std::string *)operator new();
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    this[6] = v20;
  }
  std::string::operator=(v20, v19);
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x400) == 0)
  {
LABEL_34:
    if ((v4 & 0x800) == 0)
      goto LABEL_35;
    goto LABEL_62;
  }
LABEL_59:
  v21 = lpsrc[8];
  *((_DWORD *)this + 39) |= 0x400u;
  v22 = (std::string *)this[8];
  if (v22 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v22 = (std::string *)operator new();
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    this[8] = v22;
  }
  std::string::operator=(v22, v21);
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x800) == 0)
  {
LABEL_35:
    if ((v4 & 0x1000) == 0)
      goto LABEL_36;
    goto LABEL_65;
  }
LABEL_62:
  v23 = lpsrc[9];
  *((_DWORD *)this + 39) |= 0x800u;
  v24 = (std::string *)this[9];
  if (v24 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v24 = (std::string *)operator new();
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    this[9] = v24;
  }
  std::string::operator=(v24, v23);
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x1000) == 0)
  {
LABEL_36:
    if ((v4 & 0x2000) == 0)
      goto LABEL_37;
    goto LABEL_68;
  }
LABEL_65:
  v25 = lpsrc[10];
  *((_DWORD *)this + 39) |= 0x1000u;
  v26 = (std::string *)this[10];
  if (v26 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v26 = (std::string *)operator new();
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    this[10] = v26;
  }
  std::string::operator=(v26, v25);
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x2000) == 0)
  {
LABEL_37:
    if ((v4 & 0x4000) == 0)
      goto LABEL_38;
    goto LABEL_71;
  }
LABEL_68:
  v27 = lpsrc[11];
  *((_DWORD *)this + 39) |= 0x2000u;
  v28 = (std::string *)this[11];
  if (v28 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v28 = (std::string *)operator new();
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    this[11] = v28;
  }
  std::string::operator=(v28, v27);
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x4000) == 0)
  {
LABEL_38:
    if ((v4 & 0x8000) == 0)
      goto LABEL_40;
    goto LABEL_39;
  }
LABEL_71:
  v29 = *((_DWORD *)lpsrc + 24);
  *((_DWORD *)this + 39) |= 0x4000u;
  *((_DWORD *)this + 24) = v29;
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x8000) != 0)
  {
LABEL_39:
    v16 = *((_DWORD *)lpsrc + 25);
    *((_DWORD *)this + 39) |= 0x8000u;
    *((_DWORD *)this + 25) = v16;
    v4 = *((_DWORD *)lpsrc + 39);
  }
LABEL_40:
  if ((v4 & 0xFF0000) == 0)
    goto LABEL_50;
  if ((v4 & 0x10000) != 0)
  {
    v30 = *((_DWORD *)lpsrc + 26);
    *((_DWORD *)this + 39) |= 0x10000u;
    *((_DWORD *)this + 26) = v30;
    v4 = *((_DWORD *)lpsrc + 39);
    if ((v4 & 0x20000) == 0)
    {
LABEL_43:
      if ((v4 & 0x40000) == 0)
        goto LABEL_44;
      goto LABEL_75;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_43;
  }
  v31 = *((_DWORD *)lpsrc + 27);
  *((_DWORD *)this + 39) |= 0x20000u;
  *((_DWORD *)this + 27) = v31;
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x40000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80000) == 0)
      goto LABEL_45;
    goto LABEL_76;
  }
LABEL_75:
  v32 = *((_DWORD *)lpsrc + 28);
  *((_DWORD *)this + 39) |= 0x40000u;
  *((_DWORD *)this + 28) = v32;
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x80000) == 0)
  {
LABEL_45:
    if ((v4 & 0x100000) == 0)
      goto LABEL_46;
    goto LABEL_77;
  }
LABEL_76:
  v33 = *((_DWORD *)lpsrc + 29);
  *((_DWORD *)this + 39) |= 0x80000u;
  *((_DWORD *)this + 29) = v33;
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x100000) == 0)
  {
LABEL_46:
    if ((v4 & 0x200000) == 0)
      goto LABEL_47;
    goto LABEL_78;
  }
LABEL_77:
  v34 = *((_DWORD *)lpsrc + 32);
  *((_DWORD *)this + 39) |= 0x100000u;
  *((_DWORD *)this + 32) = v34;
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x200000) == 0)
  {
LABEL_47:
    if ((v4 & 0x400000) == 0)
      goto LABEL_48;
    goto LABEL_81;
  }
LABEL_78:
  v35 = lpsrc[15];
  *((_DWORD *)this + 39) |= 0x200000u;
  v36 = (std::string *)this[15];
  if (v36 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v36 = (std::string *)operator new();
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    this[15] = v36;
  }
  std::string::operator=(v36, v35);
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x400000) == 0)
  {
LABEL_48:
    if ((v4 & 0x800000) == 0)
      goto LABEL_50;
    goto LABEL_49;
  }
LABEL_81:
  v37 = *((_DWORD *)lpsrc + 33);
  *((_DWORD *)this + 39) |= 0x400000u;
  *((_DWORD *)this + 33) = v37;
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x800000) != 0)
  {
LABEL_49:
    v17 = *((_DWORD *)lpsrc + 34);
    *((_DWORD *)this + 39) |= 0x800000u;
    *((_DWORD *)this + 34) = v17;
    v4 = *((_DWORD *)lpsrc + 39);
  }
LABEL_50:
  if (!HIBYTE(v4))
    return;
  if ((v4 & 0x1000000) == 0)
  {
    if ((v4 & 0x2000000) == 0)
      goto LABEL_53;
LABEL_84:
    v39 = *((_DWORD *)lpsrc + 35);
    *((_DWORD *)this + 39) |= 0x2000000u;
    *((_DWORD *)this + 35) = v39;
    if ((*((_DWORD *)lpsrc + 39) & 0x4000000) == 0)
      return;
    goto LABEL_85;
  }
  v38 = *((_BYTE *)lpsrc + 62);
  *((_DWORD *)this + 39) |= 0x1000000u;
  *((_BYTE *)this + 62) = v38;
  v4 = *((_DWORD *)lpsrc + 39);
  if ((v4 & 0x2000000) != 0)
    goto LABEL_84;
LABEL_53:
  if ((v4 & 0x4000000) == 0)
    return;
LABEL_85:
  v40 = lpsrc[18];
  *((_DWORD *)this + 39) |= 0x4000000u;
  v41 = (std::string *)this[18];
  if (v41 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v41 = (std::string *)operator new();
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    this[18] = v41;
  }
  std::string::operator=(v41, v40);
}

void sub_1BEE7A344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::ATM_Registration_Attempt::IsInitialized(awd::metrics::ATM_Registration_Attempt *this)
{
  return 1;
}

_QWORD *awd::metrics::ATM_Registration_Attempt::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_Registration_Attempt");
}

double awd::metrics::ATM_Registration_Result::ATM_Registration_Result(awd::metrics::ATM_Registration_Result *this)
{
  uint64_t v1;
  double result;

  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_DWORD *)this + 52) = 0;
  *(_QWORD *)this = &off_1E78BF108;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x100000001;
  v1 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 3) = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 4) = v1;
  *((_QWORD *)this + 5) = v1;
  result = 0.0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 10) = v1;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = v1;
  *((_DWORD *)this + 45) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 162) = 0u;
  *((_QWORD *)this + 23) = v1;
  *((_QWORD *)this + 25) = v1;
  *((_QWORD *)this + 24) = 0;
  *((_BYTE *)this + 178) = 0;
  *(_QWORD *)((char *)this + 212) = 0;
  return result;
}

void awd::metrics::ATM_Registration_Result::~ATM_Registration_Result(awd::metrics::ATM_Registration_Result *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E78BF108;
  v2 = *((_QWORD *)this + 3);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B87100](v2, 0x1012C40EC159624);
  }
  v5 = *((_QWORD *)this + 4);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x1C3B87100](v5, 0x1012C40EC159624);
  }
  v7 = *((_QWORD *)this + 5);
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x1C3B87100](v7, 0x1012C40EC159624);
  }
  v9 = *((_QWORD *)this + 10);
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    MEMORY[0x1C3B87100](v9, 0x1012C40EC159624);
  }
  v11 = *((_QWORD *)this + 12);
  if (v11 != v3 && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x1C3B87100](v11, 0x1012C40EC159624);
  }
  v12 = *((_QWORD *)this + 23);
  if (v12 != v3 && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    MEMORY[0x1C3B87100](v12, 0x1012C40EC159624);
  }
  v13 = *((_QWORD *)this + 25);
  if (v13 != v3 && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    MEMORY[0x1C3B87100](v13, 0x1012C40EC159624);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 14);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::metrics::ATM_Registration_Result::~ATM_Registration_Result(this);
  JUMPOUT(0x1C3B87100);
}

double awd::metrics::ATM_Registration_Result::New(awd::metrics::ATM_Registration_Result *this)
{
  awd::metrics::ATM_Registration_Result *v1;

  v1 = (awd::metrics::ATM_Registration_Result *)operator new();
  return awd::metrics::ATM_Registration_Result::ATM_Registration_Result(v1);
}

uint64_t awd::metrics::ATM_Registration_Result::Clear(awd::metrics::ATM_Registration_Result *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = *((_DWORD *)this + 53);
  if ((_BYTE)v2)
  {
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0x100000001;
    if ((v2 & 8) != 0)
    {
      v3 = *((_QWORD *)this + 3);
      if (v3 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 212) & 0x10) != 0)
    {
      v4 = *((_QWORD *)this + 4);
      if (v4 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 12) = 0;
    if ((*((_BYTE *)this + 212) & 0x40) != 0)
    {
      v5 = *((_QWORD *)this + 5);
      if (v5 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 13) = 0;
    v2 = *((_DWORD *)this + 53);
  }
  if ((v2 & 0x1FE00) != 0)
  {
    if ((v2 & 0x200) != 0)
    {
      v6 = *((_QWORD *)this + 10);
      if (v6 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
    *((_QWORD *)this + 11) = 0;
    if ((*((_BYTE *)this + 213) & 0x10) != 0)
    {
      v7 = *((_QWORD *)this + 12);
      if (v7 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    v2 = *((_DWORD *)this + 53);
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *((_BYTE *)this + 176) = 0;
    *(_OWORD *)((char *)this + 116) = 0u;
    *(_OWORD *)((char *)this + 132) = 0u;
    *((_DWORD *)this + 37) = 0;
  }
  if (HIBYTE(v2))
  {
    *((_DWORD *)this + 45) = 0;
    *((_BYTE *)this + 177) = 0;
    *((_DWORD *)this + 48) = 0;
    *((_QWORD *)this + 20) = 0;
    *((_QWORD *)this + 21) = 0;
    *((_QWORD *)this + 19) = 0;
    if ((v2 & 0x40000000) != 0)
    {
      v8 = *((_QWORD *)this + 23);
      if (v8 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(_BYTE **)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v8 = 0;
          *(_BYTE *)(v8 + 23) = 0;
        }
      }
    }
    if ((*((_DWORD *)this + 53) & 0x80000000) != 0)
    {
      v10 = *((_QWORD *)this + 25);
      if (v10 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(_BYTE **)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v10 = 0;
          *(_BYTE *)(v10 + 23) = 0;
        }
      }
    }
  }
  if (*((_BYTE *)this + 216))
  {
    *((_DWORD *)this + 49) = 0;
    *((_BYTE *)this + 178) = 0;
  }
  result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Clear<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56);
  *(_QWORD *)((char *)this + 212) = 0;
  return result;
}

uint64_t awd::metrics::ATM_Registration_Result::MergePartialFromCodedStream(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  char *v12;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  unint64_t v19;
  char *v20;
  int v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  int v36;
  unint64_t v37;
  char *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  _QWORD *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned __int8 *v60;
  unsigned int v61;
  _BYTE *v62;
  unsigned int v63;
  _BYTE *v64;
  _QWORD *v65;
  _BYTE *v66;
  _QWORD *v67;
  _BYTE *v68;
  _BYTE *v69;
  _QWORD *v70;
  _BYTE *v71;
  _BYTE *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  _BYTE *v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int *v85;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v86;
  unint64_t *v87;
  unint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  _QWORD *v91;
  _BYTE *v92;
  _BYTE *v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  unsigned int v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned int v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned int *v112;
  unsigned int *v113;
  unsigned int *v114;
  unint64_t *v115;
  unint64_t *v116;
  unint64_t *v117;
  unint64_t *v118;
  unint64_t *v119;
  unsigned int *v120;
  unsigned int *v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int v126;

  v3 = this;
  v4 = (unint64_t *)(this + 8);
  v5 = (unsigned int *)(this + 48);
  v6 = (unsigned int *)(this + 52);
  v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 56);
  v8 = (unsigned int *)(this + 92);
  v9 = (unsigned int *)(this + 104);
  v10 = (unsigned int *)(this + 108);
  v11 = (unsigned int *)(this + 112);
  v123 = (unsigned int *)(this + 120);
  v124 = (unsigned int *)(this + 116);
  v121 = (unsigned int *)(this + 128);
  v122 = (unsigned int *)(this + 124);
  v119 = (unint64_t *)(this + 136);
  v120 = (unsigned int *)(this + 132);
  v117 = (unint64_t *)(this + 152);
  v118 = (unint64_t *)(this + 144);
  v115 = (unint64_t *)(this + 168);
  v116 = (unint64_t *)(this + 160);
  v113 = (unsigned int *)(this + 192);
  v114 = (unsigned int *)(this + 180);
  v125 = (unsigned int *)(this + 196);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
LABEL_2:
          v12 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 < 0)
          {
            this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            v13 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)this;
            *((_DWORD *)a2 + 8) = this;
            if (!(_DWORD)this)
              return 1;
          }
          else
          {
            v13 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v12;
            *((_DWORD *)a2 + 8) = (_DWORD)v13;
            *((_QWORD *)a2 + 1) = v12 + 1;
            if (!(_DWORD)v13)
              return 1;
          }
          v14 = v13 >> 3;
          if (v13 >> 3 <= 0x22D)
          {
            switch(v14)
            {
              case 1u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v17 = (char *)*((_QWORD *)a2 + 1);
                v16 = *((_QWORD *)a2 + 2);
                if ((unint64_t)v17 >= v16 || *v17 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
                  if (!(_DWORD)this)
                    return this;
                  v18 = (_BYTE *)*((_QWORD *)a2 + 1);
                  v16 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v4 = *v17;
                  v18 = v17 + 1;
                  *((_QWORD *)a2 + 1) = v18;
                }
                *(_DWORD *)(v3 + 212) |= 1u;
                if ((unint64_t)v18 >= v16 || *v18 != 16)
                  continue;
                v24 = v18 + 1;
                *((_QWORD *)a2 + 1) = v24;
LABEL_125:
                v126 = 0;
                if ((unint64_t)v24 >= v16 || *v24 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v126);
                  if (!(_DWORD)this)
                    return this;
                  v61 = v126;
                }
                else
                {
                  v61 = *v24;
                  *((_QWORD *)a2 + 1) = v24 + 1;
                }
                if (v61 - 1 <= 0xC)
                {
                  *(_DWORD *)(v3 + 212) |= 2u;
                  *(_DWORD *)(v3 + 16) = v61;
                }
                v62 = (_BYTE *)*((_QWORD *)a2 + 1);
                v25 = *((_QWORD *)a2 + 2);
                if ((unint64_t)v62 >= v25 || *v62 != 24)
                  continue;
                v26 = v62 + 1;
                *((_QWORD *)a2 + 1) = v26;
LABEL_135:
                v126 = 0;
                if ((unint64_t)v26 >= v25 || *v26 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v126);
                  if (!(_DWORD)this)
                    return this;
                  v63 = v126;
                }
                else
                {
                  v63 = *v26;
                  *((_QWORD *)a2 + 1) = v26 + 1;
                }
                if (v63 - 1 <= 3)
                {
                  *(_DWORD *)(v3 + 212) |= 4u;
                  *(_DWORD *)(v3 + 20) = v63;
                }
                v64 = (_BYTE *)*((_QWORD *)a2 + 1);
                if ((unint64_t)v64 >= *((_QWORD *)a2 + 2) || *v64 != 34)
                  continue;
                *((_QWORD *)a2 + 1) = v64 + 1;
LABEL_145:
                *(_DWORD *)(v3 + 212) |= 8u;
                if (*(_QWORD *)(v3 + 24) == MEMORY[0x1E0DE8338])
                {
                  v65 = (_QWORD *)operator new();
                  v65[1] = 0;
                  v65[2] = 0;
                  *v65 = 0;
                  *(_QWORD *)(v3 + 24) = v65;
                }
                this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                if (!(_DWORD)this)
                  return this;
                v66 = (_BYTE *)*((_QWORD *)a2 + 1);
                if ((unint64_t)v66 >= *((_QWORD *)a2 + 2) || *v66 != 42)
                  continue;
                *((_QWORD *)a2 + 1) = v66 + 1;
LABEL_151:
                *(_DWORD *)(v3 + 212) |= 0x10u;
                if (*(_QWORD *)(v3 + 32) == MEMORY[0x1E0DE8338])
                {
                  v67 = (_QWORD *)operator new();
                  v67[1] = 0;
                  v67[2] = 0;
                  *v67 = 0;
                  *(_QWORD *)(v3 + 32) = v67;
                }
                this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                if (!(_DWORD)this)
                  return this;
                v68 = (_BYTE *)*((_QWORD *)a2 + 1);
                v27 = *((_QWORD *)a2 + 2);
                if ((unint64_t)v68 >= v27 || *v68 != 48)
                  continue;
                v28 = v68 + 1;
                *((_QWORD *)a2 + 1) = v28;
LABEL_157:
                if ((unint64_t)v28 >= v27 || *v28 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
                  if (!(_DWORD)this)
                    return this;
                  v69 = (_BYTE *)*((_QWORD *)a2 + 1);
                  v27 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v5 = *v28;
                  v69 = v28 + 1;
                  *((_QWORD *)a2 + 1) = v69;
                }
                v29 = *(_DWORD *)(v3 + 212) | 0x20;
                *(_DWORD *)(v3 + 212) = v29;
                if ((unint64_t)v69 >= v27 || *v69 != 58)
                  continue;
                *((_QWORD *)a2 + 1) = v69 + 1;
LABEL_165:
                *(_DWORD *)(v3 + 212) = v29 | 0x40;
                if (*(_QWORD *)(v3 + 40) == MEMORY[0x1E0DE8338])
                {
                  v70 = (_QWORD *)operator new();
                  v70[1] = 0;
                  v70[2] = 0;
                  *v70 = 0;
                  *(_QWORD *)(v3 + 40) = v70;
                }
                this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                if (!(_DWORD)this)
                  return this;
                v71 = (_BYTE *)*((_QWORD *)a2 + 1);
                v30 = *((_QWORD *)a2 + 2);
                if ((unint64_t)v71 >= v30 || *v71 != 64)
                  continue;
                v31 = v71 + 1;
                *((_QWORD *)a2 + 1) = v31;
LABEL_171:
                if ((unint64_t)v31 >= v30 || *v31 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
                  if (!(_DWORD)this)
                    return this;
                  v72 = (_BYTE *)*((_QWORD *)a2 + 1);
                  v30 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v6 = *v31;
                  v72 = v31 + 1;
                  *((_QWORD *)a2 + 1) = v72;
                }
                *(_DWORD *)(v3 + 212) |= 0x80u;
                if ((unint64_t)v72 >= v30 || *v72 != 74)
                  continue;
                do
                {
                  *((_QWORD *)a2 + 1) = v72 + 1;
LABEL_179:
                  v73 = *(_DWORD *)(v3 + 68);
                  v74 = *(_DWORD *)(v3 + 64);
                  if (v74 >= v73)
                  {
                    if (v73 == *(_DWORD *)(v3 + 72))
                    {
                      this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7);
                      v73 = *(_DWORD *)(v3 + 68);
                    }
                    *(_DWORD *)(v3 + 68) = v73 + 1;
                    v75 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)this);
                    v76 = *(_QWORD *)(v3 + 56);
                    v77 = *(int *)(v3 + 64);
                    *(_DWORD *)(v3 + 64) = v77 + 1;
                    *(_QWORD *)(v76 + 8 * v77) = v75;
                  }
                  else
                  {
                    *(_DWORD *)(v3 + 64) = v74 + 1;
                  }
                  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                  if (!(_DWORD)this)
                    return this;
                  v72 = (_BYTE *)*((_QWORD *)a2 + 1);
                  if ((unint64_t)v72 >= *((_QWORD *)a2 + 2))
                    goto LABEL_2;
                  v78 = *v72;
                }
                while (v78 == 74);
                if (v78 != 82)
                  continue;
                *((_QWORD *)a2 + 1) = v72 + 1;
LABEL_189:
                *(_DWORD *)(v3 + 212) |= 0x200u;
                if (*(_QWORD *)(v3 + 80) == MEMORY[0x1E0DE8338])
                {
                  v79 = (_QWORD *)operator new();
                  v79[1] = 0;
                  v79[2] = 0;
                  *v79 = 0;
                  *(_QWORD *)(v3 + 80) = v79;
                }
                this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                if (!(_DWORD)this)
                  return this;
                v80 = (_BYTE *)*((_QWORD *)a2 + 1);
                v32 = *((_QWORD *)a2 + 2);
                if ((unint64_t)v80 >= v32 || *v80 != 88)
                  continue;
                v33 = v80 + 1;
                *((_QWORD *)a2 + 1) = v33;
LABEL_195:
                v126 = 0;
                v112 = v11;
                if ((unint64_t)v33 >= v32 || *v33 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v126);
                  if (!(_DWORD)this)
                    return this;
                  v81 = v10;
                  v82 = v9;
                  v83 = v6;
                  v84 = v5;
                  v85 = v8;
                  v86 = v7;
                  v87 = v4;
                  v88 = v126;
                }
                else
                {
                  v81 = v10;
                  v82 = v9;
                  v83 = v6;
                  v84 = v5;
                  v85 = v8;
                  v86 = v7;
                  v87 = v4;
                  v88 = *v33;
                  *((_QWORD *)a2 + 1) = v33 + 1;
                }
                this = awd::metrics::RESPONSE_Code_IsValid((awd::metrics *)v88);
                if ((_DWORD)this)
                {
                  *(_DWORD *)(v3 + 212) |= 0x400u;
                  *(_DWORD *)(v3 + 88) = v88;
                }
                v89 = (_BYTE *)*((_QWORD *)a2 + 1);
                v34 = *((_QWORD *)a2 + 2);
                v4 = v87;
                v7 = v86;
                v8 = v85;
                v5 = v84;
                v6 = v83;
                v9 = v82;
                v10 = v81;
                v11 = v112;
                if ((unint64_t)v89 >= v34 || *v89 != 96)
                  continue;
                v35 = v89 + 1;
                *((_QWORD *)a2 + 1) = v35;
LABEL_205:
                if ((unint64_t)v35 >= v34 || *v35 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
                  if (!(_DWORD)this)
                    return this;
                  v90 = (_BYTE *)*((_QWORD *)a2 + 1);
                  v34 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v8 = *v35;
                  v90 = v35 + 1;
                  *((_QWORD *)a2 + 1) = v90;
                }
                v36 = *(_DWORD *)(v3 + 212) | 0x800;
                *(_DWORD *)(v3 + 212) = v36;
                if ((unint64_t)v90 >= v34 || *v90 != 106)
                  continue;
                *((_QWORD *)a2 + 1) = v90 + 1;
LABEL_213:
                *(_DWORD *)(v3 + 212) = v36 | 0x1000;
                if (*(_QWORD *)(v3 + 96) == MEMORY[0x1E0DE8338])
                {
                  v91 = (_QWORD *)operator new();
                  v91[1] = 0;
                  v91[2] = 0;
                  *v91 = 0;
                  *(_QWORD *)(v3 + 96) = v91;
                }
                this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                if (!(_DWORD)this)
                  return this;
                v92 = (_BYTE *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                if ((unint64_t)v92 >= v37 || *v92 != 112)
                  continue;
                v38 = v92 + 1;
                *((_QWORD *)a2 + 1) = v38;
LABEL_219:
                if ((unint64_t)v38 >= v37 || *v38 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
                  if (!(_DWORD)this)
                    return this;
                  v93 = (_BYTE *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v9 = *v38;
                  v93 = v38 + 1;
                  *((_QWORD *)a2 + 1) = v93;
                }
                *(_DWORD *)(v3 + 212) |= 0x2000u;
                if ((unint64_t)v93 >= v37 || *v93 != 120)
                  continue;
                v39 = v93 + 1;
                *((_QWORD *)a2 + 1) = v39;
LABEL_227:
                if ((unint64_t)v39 >= v37 || (char)*v39 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
                  if (!(_DWORD)this)
                    return this;
                  v94 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v10 = *v39;
                  v94 = v39 + 1;
                  *((_QWORD *)a2 + 1) = v94;
                }
                *(_DWORD *)(v3 + 212) |= 0x4000u;
                if ((int)v37 - (int)v94 < 2 || *v94 != 128 || v94[1] != 1)
                  continue;
                v40 = v94 + 2;
                *((_QWORD *)a2 + 1) = v40;
LABEL_236:
                if ((unint64_t)v40 >= v37 || (char)*v40 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v11);
                  if (!(_DWORD)this)
                    return this;
                  v95 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v11 = *v40;
                  v95 = v40 + 1;
                  *((_QWORD *)a2 + 1) = v95;
                }
                *(_DWORD *)(v3 + 212) |= 0x8000u;
                if ((int)v37 - (int)v95 < 2 || *v95 != 136 || v95[1] != 1)
                  continue;
                v41 = v95 + 2;
                *((_QWORD *)a2 + 1) = v41;
LABEL_245:
                v126 = 0;
                if ((unint64_t)v41 >= v37 || (char)*v41 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v126);
                  if (!(_DWORD)this)
                    return this;
                  v96 = v126;
                  v97 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  v96 = *v41;
                  v97 = v41 + 1;
                  *((_QWORD *)a2 + 1) = v97;
                }
                *(_BYTE *)(v3 + 176) = v96 != 0;
                *(_DWORD *)(v3 + 212) |= 0x10000u;
                if ((int)v37 - (int)v97 < 2 || *v97 != 144 || v97[1] != 1)
                  continue;
                v42 = v97 + 2;
                *((_QWORD *)a2 + 1) = v42;
LABEL_254:
                if ((unint64_t)v42 >= v37 || (char)*v42 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v124);
                  if (!(_DWORD)this)
                    return this;
                  v98 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v124 = *v42;
                  v98 = v42 + 1;
                  *((_QWORD *)a2 + 1) = v98;
                }
                *(_DWORD *)(v3 + 212) |= 0x20000u;
                if ((int)v37 - (int)v98 < 2 || *v98 != 152 || v98[1] != 1)
                  continue;
                v43 = v98 + 2;
                *((_QWORD *)a2 + 1) = v43;
LABEL_263:
                if ((unint64_t)v43 >= v37 || (char)*v43 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v123);
                  if (!(_DWORD)this)
                    return this;
                  v99 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v123 = *v43;
                  v99 = v43 + 1;
                  *((_QWORD *)a2 + 1) = v99;
                }
                *(_DWORD *)(v3 + 212) |= 0x40000u;
                if ((int)v37 - (int)v99 < 2 || *v99 != 160 || v99[1] != 1)
                  continue;
                v44 = v99 + 2;
                *((_QWORD *)a2 + 1) = v44;
LABEL_272:
                if ((unint64_t)v44 >= v37 || (char)*v44 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v122);
                  if (!(_DWORD)this)
                    return this;
                  v100 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v122 = *v44;
                  v100 = v44 + 1;
                  *((_QWORD *)a2 + 1) = v100;
                }
                *(_DWORD *)(v3 + 212) |= 0x80000u;
                if ((int)v37 - (int)v100 < 2 || *v100 != 168 || v100[1] != 1)
                  continue;
                v45 = v100 + 2;
                *((_QWORD *)a2 + 1) = v45;
LABEL_281:
                if ((unint64_t)v45 >= v37 || (char)*v45 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v121);
                  if (!(_DWORD)this)
                    return this;
                  v101 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v121 = *v45;
                  v101 = v45 + 1;
                  *((_QWORD *)a2 + 1) = v101;
                }
                *(_DWORD *)(v3 + 212) |= 0x100000u;
                if ((int)v37 - (int)v101 < 2 || *v101 != 176 || v101[1] != 1)
                  continue;
                v46 = v101 + 2;
                *((_QWORD *)a2 + 1) = v46;
LABEL_290:
                if ((unint64_t)v46 >= v37 || (char)*v46 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v120);
                  if (!(_DWORD)this)
                    return this;
                  v102 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v120 = *v46;
                  v102 = v46 + 1;
                  *((_QWORD *)a2 + 1) = v102;
                }
                *(_DWORD *)(v3 + 212) |= 0x200000u;
                if ((int)v37 - (int)v102 < 2 || *v102 != 184 || v102[1] != 1)
                  continue;
                v47 = v102 + 2;
                *((_QWORD *)a2 + 1) = v47;
LABEL_299:
                if ((unint64_t)v47 >= v37 || (char)*v47 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v119);
                  if (!(_DWORD)this)
                    return this;
                  v103 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v119 = *v47;
                  v103 = v47 + 1;
                  *((_QWORD *)a2 + 1) = v103;
                }
                *(_DWORD *)(v3 + 212) |= 0x400000u;
                if ((int)v37 - (int)v103 < 2 || *v103 != 192 || v103[1] != 1)
                  continue;
                v48 = v103 + 2;
                *((_QWORD *)a2 + 1) = v48;
LABEL_308:
                if ((unint64_t)v48 >= v37 || (char)*v48 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v118);
                  if (!(_DWORD)this)
                    return this;
                  v104 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v118 = *v48;
                  v104 = v48 + 1;
                  *((_QWORD *)a2 + 1) = v104;
                }
                *(_DWORD *)(v3 + 212) |= 0x800000u;
                if ((int)v37 - (int)v104 < 2 || *v104 != 200 || v104[1] != 1)
                  continue;
                v49 = v104 + 2;
                *((_QWORD *)a2 + 1) = v49;
LABEL_317:
                if ((unint64_t)v49 >= v37 || (char)*v49 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v117);
                  if (!(_DWORD)this)
                    return this;
                  v105 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v117 = *v49;
                  v105 = v49 + 1;
                  *((_QWORD *)a2 + 1) = v105;
                }
                *(_DWORD *)(v3 + 212) |= 0x1000000u;
                if ((int)v37 - (int)v105 < 2 || *v105 != 208 || v105[1] != 1)
                  continue;
                v50 = v105 + 2;
                *((_QWORD *)a2 + 1) = v50;
LABEL_326:
                if ((unint64_t)v50 >= v37 || (char)*v50 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v116);
                  if (!(_DWORD)this)
                    return this;
                  v106 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v116 = *v50;
                  v106 = v50 + 1;
                  *((_QWORD *)a2 + 1) = v106;
                }
                *(_DWORD *)(v3 + 212) |= 0x2000000u;
                if ((int)v37 - (int)v106 < 2 || *v106 != 216 || v106[1] != 1)
                  continue;
                v51 = v106 + 2;
                *((_QWORD *)a2 + 1) = v51;
LABEL_335:
                if ((unint64_t)v51 >= v37 || (char)*v51 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v115);
                  if (!(_DWORD)this)
                    return this;
                  v107 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v115 = *v51;
                  v107 = v51 + 1;
                  *((_QWORD *)a2 + 1) = v107;
                }
                *(_DWORD *)(v3 + 212) |= 0x4000000u;
                if ((int)v37 - (int)v107 < 2 || *v107 != 224 || v107[1] != 1)
                  continue;
                v52 = v107 + 2;
                *((_QWORD *)a2 + 1) = v52;
LABEL_344:
                if ((unint64_t)v52 >= v37 || (char)*v52 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v114);
                  if (!(_DWORD)this)
                    return this;
                  v108 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v114 = *v52;
                  v108 = v52 + 1;
                  *((_QWORD *)a2 + 1) = v108;
                }
                *(_DWORD *)(v3 + 212) |= 0x8000000u;
                if ((int)v37 - (int)v108 < 2 || *v108 != 232 || v108[1] != 1)
                  continue;
                v53 = v108 + 2;
                *((_QWORD *)a2 + 1) = v53;
LABEL_353:
                v126 = 0;
                if ((unint64_t)v53 >= v37 || (char)*v53 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v126);
                  if (!(_DWORD)this)
                    return this;
                  v109 = v126;
                  v110 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v37 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  v109 = *v53;
                  v110 = v53 + 1;
                  *((_QWORD *)a2 + 1) = v110;
                }
                *(_BYTE *)(v3 + 177) = v109 != 0;
                *(_DWORD *)(v3 + 212) |= 0x10000000u;
                if ((int)v37 - (int)v110 < 2 || *v110 != 240 || v110[1] != 34)
                  continue;
                v58 = v110 + 2;
                *((_QWORD *)a2 + 1) = v58;
                break;
              case 2u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v24 = (char *)*((_QWORD *)a2 + 1);
                v16 = *((_QWORD *)a2 + 2);
                goto LABEL_125;
              case 3u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v26 = (char *)*((_QWORD *)a2 + 1);
                v25 = *((_QWORD *)a2 + 2);
                goto LABEL_135;
              case 4u:
                v15 = v13 & 7;
                if (v15 != 2)
                  goto LABEL_102;
                goto LABEL_145;
              case 5u:
                v15 = v13 & 7;
                if (v15 != 2)
                  goto LABEL_102;
                goto LABEL_151;
              case 6u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v28 = (char *)*((_QWORD *)a2 + 1);
                v27 = *((_QWORD *)a2 + 2);
                goto LABEL_157;
              case 7u:
                v15 = v13 & 7;
                if (v15 != 2)
                  goto LABEL_102;
                v29 = *(_DWORD *)(v3 + 212);
                goto LABEL_165;
              case 8u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v31 = (char *)*((_QWORD *)a2 + 1);
                v30 = *((_QWORD *)a2 + 2);
                goto LABEL_171;
              case 9u:
                v15 = v13 & 7;
                if (v15 != 2)
                  goto LABEL_102;
                goto LABEL_179;
              case 0xAu:
                v15 = v13 & 7;
                if (v15 != 2)
                  goto LABEL_102;
                goto LABEL_189;
              case 0xBu:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v33 = (char *)*((_QWORD *)a2 + 1);
                v32 = *((_QWORD *)a2 + 2);
                goto LABEL_195;
              case 0xCu:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v35 = (char *)*((_QWORD *)a2 + 1);
                v34 = *((_QWORD *)a2 + 2);
                goto LABEL_205;
              case 0xDu:
                v15 = v13 & 7;
                if (v15 != 2)
                  goto LABEL_102;
                v36 = *(_DWORD *)(v3 + 212);
                goto LABEL_213;
              case 0xEu:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v38 = (char *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_219;
              case 0xFu:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v39 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_227;
              case 0x10u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v40 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_236;
              case 0x11u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v41 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_245;
              case 0x12u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v42 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_254;
              case 0x13u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v43 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_263;
              case 0x14u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v44 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_272;
              case 0x15u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v45 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_281;
              case 0x16u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v46 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_290;
              case 0x17u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v47 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_299;
              case 0x18u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v48 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_308;
              case 0x19u:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v49 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_317;
              case 0x1Au:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v50 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_326;
              case 0x1Bu:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v51 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_335;
              case 0x1Cu:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v52 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_344;
              case 0x1Du:
                v15 = v13 & 7;
                if ((v13 & 7) != 0)
                  goto LABEL_102;
                v53 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                goto LABEL_353;
              default:
                goto LABEL_101;
            }
            goto LABEL_362;
          }
          if (v13 >> 3 > 0x257)
            break;
          if (v14 == 558)
          {
            v15 = v13 & 7;
            if ((v13 & 7) != 0)
              goto LABEL_102;
            v58 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v37 = *((_QWORD *)a2 + 2);
LABEL_362:
            if ((unint64_t)v58 >= v37 || (char)*v58 < 0)
            {
              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v113);
              if (!(_DWORD)this)
                return this;
              v111 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
              v37 = *((_QWORD *)a2 + 2);
            }
            else
            {
              *v113 = *v58;
              v111 = v58 + 1;
              *((_QWORD *)a2 + 1) = v111;
            }
            v21 = *(_DWORD *)(v3 + 212) | 0x20000000;
            *(_DWORD *)(v3 + 212) = v21;
            if ((int)v37 - (int)v111 >= 2 && *v111 == 250 && v111[1] == 34)
            {
              *((_QWORD *)a2 + 1) = v111 + 2;
              goto LABEL_23;
            }
          }
          else
          {
            if (v14 != 559)
            {
LABEL_101:
              v15 = v13 & 7;
              goto LABEL_102;
            }
            v15 = v13 & 7;
            if (v15 != 2)
              goto LABEL_102;
            v21 = *(_DWORD *)(v3 + 212);
LABEL_23:
            *(_DWORD *)(v3 + 212) = v21 | 0x40000000;
            if (*(_QWORD *)(v3 + 184) == MEMORY[0x1E0DE8338])
            {
              v22 = (_QWORD *)operator new();
              v22[1] = 0;
              v22[2] = 0;
              *v22 = 0;
              *(_QWORD *)(v3 + 184) = v22;
            }
            this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
            if (!(_DWORD)this)
              return this;
            v23 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            if (*((_DWORD *)a2 + 4) - (int)v23 >= 2 && *v23 == 194 && v23[1] == 37)
            {
              *((_QWORD *)a2 + 1) = v23 + 2;
LABEL_87:
              *(_DWORD *)(v3 + 212) |= 0x80000000;
              if (*(_QWORD *)(v3 + 200) == MEMORY[0x1E0DE8338])
              {
                v54 = (_QWORD *)operator new();
                v54[1] = 0;
                v54[2] = 0;
                *v54 = 0;
                *(_QWORD *)(v3 + 200) = v54;
              }
              this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
              if (!(_DWORD)this)
                return this;
              v55 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
              v19 = *((_QWORD *)a2 + 2);
              if ((int)v19 - (int)v55 >= 2 && *v55 == 200 && v55[1] == 37)
              {
                v56 = v55 + 2;
                *((_QWORD *)a2 + 1) = v56;
                goto LABEL_96;
              }
            }
          }
        }
        if (v14 != 600)
          break;
        v15 = v13 & 7;
        if (v15 == 2)
          goto LABEL_87;
LABEL_102:
        if (v15 == 4)
          return 1;
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, v13);
        if ((this & 1) == 0)
          return 0;
      }
      if (v14 != 601)
        break;
      v15 = v13 & 7;
      if ((v13 & 7) != 0)
        goto LABEL_102;
      v56 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v19 = *((_QWORD *)a2 + 2);
LABEL_96:
      if ((unint64_t)v56 >= v19 || (char)*v56 < 0)
      {
        this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v125);
        if (!(_DWORD)this)
          return this;
        v57 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v125 = *v56;
        v57 = v56 + 1;
        *((_QWORD *)a2 + 1) = v57;
      }
      *(_DWORD *)(v3 + 216) |= 1u;
      if ((int)v19 - (int)v57 >= 2 && *v57 == 208 && v57[1] == 37)
      {
        v20 = (char *)(v57 + 2);
        *((_QWORD *)a2 + 1) = v20;
        goto LABEL_111;
      }
    }
    if (v14 != 602)
      goto LABEL_101;
    v15 = v13 & 7;
    if ((v13 & 7) != 0)
      goto LABEL_102;
    v20 = (char *)*((_QWORD *)a2 + 1);
    v19 = *((_QWORD *)a2 + 2);
LABEL_111:
    v126 = 0;
    if ((unint64_t)v20 >= v19 || *v20 < 0)
    {
      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v126);
      if (!(_DWORD)this)
        return this;
      v59 = v126;
      v60 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v19 = *((_QWORD *)a2 + 2);
    }
    else
    {
      v59 = *v20;
      v60 = (unsigned __int8 *)(v20 + 1);
      *((_QWORD *)a2 + 1) = v60;
    }
    *(_BYTE *)(v3 + 178) = v59 != 0;
    *(_DWORD *)(v3 + 216) |= 2u;
  }
  while (v60 != (unsigned __int8 *)v19 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  this = 1;
  *((_BYTE *)a2 + 36) = 1;
  return this;
}

uint64_t awd::metrics::ATM_Registration_Result::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  v5 = this;
  v6 = *(_DWORD *)(this + 212);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 212);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 212);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 212);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 212);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 212);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_45:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 212);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_46:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if ((*(_DWORD *)(v5 + 212) & 0x80) != 0)
LABEL_9:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 52), (uint64_t)a2, a4);
LABEL_10:
  if (*(int *)(v5 + 64) >= 1)
  {
    v7 = 0;
    do
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
      ++v7;
    }
    while (v7 < *(int *)(v5 + 64));
  }
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x200) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    v8 = *(_DWORD *)(v5 + 212);
    if ((v8 & 0x400) == 0)
    {
LABEL_15:
      if ((v8 & 0x800) == 0)
        goto LABEL_16;
      goto LABEL_50;
    }
  }
  else if ((v8 & 0x400) == 0)
  {
    goto LABEL_15;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 88), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x800) == 0)
  {
LABEL_16:
    if ((v8 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 92), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x1000) == 0)
  {
LABEL_17:
    if ((v8 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x2000) == 0)
  {
LABEL_18:
    if ((v8 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned int *)(v5 + 104), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x4000) == 0)
  {
LABEL_19:
    if ((v8 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(unsigned int *)(v5 + 108), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x8000) == 0)
  {
LABEL_20:
    if ((v8 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 112), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x10000) == 0)
  {
LABEL_21:
    if ((v8 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(unsigned __int8 *)(v5 + 176), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x20000) == 0)
  {
LABEL_22:
    if ((v8 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *(unsigned int *)(v5 + 116), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x40000) == 0)
  {
LABEL_23:
    if ((v8 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(unsigned int *)(v5 + 120), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x80000) == 0)
  {
LABEL_24:
    if ((v8 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(unsigned int *)(v5 + 124), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x100000) == 0)
  {
LABEL_25:
    if ((v8 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned int *)(v5 + 128), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x200000) == 0)
  {
LABEL_26:
    if ((v8 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(unsigned int *)(v5 + 132), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x400000) == 0)
  {
LABEL_27:
    if ((v8 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, *(_QWORD *)(v5 + 136), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x800000) == 0)
  {
LABEL_28:
    if ((v8 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, *(_QWORD *)(v5 + 144), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19, *(_QWORD *)(v5 + 152), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_30:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A, *(_QWORD *)(v5 + 160), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_32;
    goto LABEL_66;
  }
LABEL_65:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, *(_QWORD *)(v5 + 168), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_32:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_67;
  }
LABEL_66:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, *(unsigned int *)(v5 + 180), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_68;
  }
LABEL_67:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, *(unsigned __int8 *)(v5 + 177), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_35;
LABEL_69:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v5 + 212) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_70;
  }
LABEL_68:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22E, *(unsigned int *)(v5 + 192), (uint64_t)a2, a4);
  v8 = *(_DWORD *)(v5 + 212);
  if ((v8 & 0x40000000) != 0)
    goto LABEL_69;
LABEL_35:
  if ((v8 & 0x80000000) == 0)
    goto LABEL_36;
LABEL_70:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
LABEL_36:
  v9 = *(_DWORD *)(v5 + 216);
  if ((v9 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x259, *(unsigned int *)(v5 + 196), (uint64_t)a2, a4);
    v9 = *(_DWORD *)(v5 + 216);
  }
  if ((v9 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25A, *(unsigned __int8 *)(v5 + 178), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::ATM_Registration_Result::ByteSize(awd::metrics::ATM_Registration_Result *this)
{
  unsigned int v2;
  int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v36;
  int v37;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v46;
  int v47;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v48;
  int v49;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v50;
  int v51;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v52;
  int v53;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v54;
  int v55;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v56;
  int v57;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v58;
  int v59;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v60;
  int v61;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v62;
  int v63;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v64;
  int v65;
  uint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t i;
  uint64_t v84;
  int v85;
  char v86;
  uint64_t v87;
  unint64_t v88;
  int v89;

  v2 = *((_DWORD *)this + 53);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_61;
  }
  if ((v2 & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                     + 1))
       + 1;
    v2 = *((_DWORD *)this + 53);
    if ((v2 & 2) == 0)
      goto LABEL_13;
  }
  else
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_13;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if ((v4 & 0x80000000) != 0)
  {
    v5 = 10;
  }
  else if (v4 >= 0x80)
  {
    v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    v2 = *((_DWORD *)this + 53);
  }
  else
  {
    v5 = 1;
  }
  v3 += v5 + 1;
LABEL_13:
  if ((v2 & 4) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = 10;
    }
    else if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
      v2 = *((_DWORD *)this + 53);
    }
    else
    {
      v7 = 1;
    }
    v3 += v7 + 1;
    if ((v2 & 8) == 0)
    {
LABEL_15:
      if ((v2 & 0x10) == 0)
        goto LABEL_16;
      goto LABEL_35;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_15;
  }
  v8 = *((_QWORD *)this + 3);
  v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = v9;
  v11 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v12 = *(unsigned __int8 *)(v8 + 23);
  else
    v12 = v11;
  if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
    v9 = *(unsigned __int8 *)(v8 + 23);
    v11 = *(_QWORD *)(v8 + 8);
    v2 = *((_DWORD *)this + 53);
    v10 = *(_BYTE *)(v8 + 23);
  }
  else
  {
    v13 = 1;
  }
  if (v10 < 0)
    v9 = v11;
  v3 += v13 + v9 + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_35:
  v14 = *((_QWORD *)this + 4);
  v15 = *(unsigned __int8 *)(v14 + 23);
  v16 = v15;
  v17 = *(_QWORD *)(v14 + 8);
  if ((v15 & 0x80u) == 0)
    v18 = *(unsigned __int8 *)(v14 + 23);
  else
    v18 = v17;
  if (v18 >= 0x80)
  {
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v17 = *(_QWORD *)(v14 + 8);
    v2 = *((_DWORD *)this + 53);
    v16 = *(_BYTE *)(v14 + 23);
  }
  else
  {
    v19 = 1;
  }
  if (v16 < 0)
    v15 = v17;
  v3 += v19 + v15 + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_44:
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
  if (v20 >= 0x80)
  {
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
    v2 = *((_DWORD *)this + 53);
  }
  else
  {
    v21 = 1;
  }
  v3 += v21 + 1;
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_61;
    goto LABEL_57;
  }
LABEL_48:
  v22 = *((_QWORD *)this + 5);
  v23 = *(unsigned __int8 *)(v22 + 23);
  v24 = v23;
  v25 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v26 = *(unsigned __int8 *)(v22 + 23);
  else
    v26 = v25;
  if (v26 >= 0x80)
  {
    v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26);
    v23 = *(unsigned __int8 *)(v22 + 23);
    v25 = *(_QWORD *)(v22 + 8);
    v2 = *((_DWORD *)this + 53);
    v24 = *(_BYTE *)(v22 + 23);
  }
  else
  {
    v27 = 1;
  }
  if (v24 < 0)
    v23 = v25;
  v3 += v27 + v23 + 1;
  if ((v2 & 0x80) != 0)
  {
LABEL_57:
    v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
    if (v28 >= 0x80)
    {
      v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28);
      v2 = *((_DWORD *)this + 53);
    }
    else
    {
      v29 = 1;
    }
    v3 += v29 + 1;
  }
LABEL_61:
  if ((v2 & 0x1FE00) == 0)
    goto LABEL_110;
  if ((v2 & 0x200) != 0)
  {
    v30 = *((_QWORD *)this + 10);
    v31 = *(unsigned __int8 *)(v30 + 23);
    v32 = v31;
    v33 = *(_QWORD *)(v30 + 8);
    if ((v31 & 0x80u) == 0)
      v34 = *(unsigned __int8 *)(v30 + 23);
    else
      v34 = v33;
    if (v34 >= 0x80)
    {
      v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
      v31 = *(unsigned __int8 *)(v30 + 23);
      v33 = *(_QWORD *)(v30 + 8);
      v2 = *((_DWORD *)this + 53);
      v32 = *(_BYTE *)(v30 + 23);
    }
    else
    {
      v35 = 1;
    }
    if (v32 < 0)
      v31 = v33;
    v3 += v35 + v31 + 1;
    if ((v2 & 0x400) == 0)
    {
LABEL_64:
      if ((v2 & 0x800) == 0)
        goto LABEL_65;
      goto LABEL_85;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_64;
  }
  v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
  if ((v36 & 0x80000000) != 0)
  {
    v37 = 10;
  }
  else if (v36 >= 0x80)
  {
    v37 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36);
    v2 = *((_DWORD *)this + 53);
  }
  else
  {
    v37 = 1;
  }
  v3 += v37 + 1;
  if ((v2 & 0x800) == 0)
  {
LABEL_65:
    if ((v2 & 0x1000) == 0)
      goto LABEL_66;
    goto LABEL_89;
  }
LABEL_85:
  v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 23);
  if (v38 >= 0x80)
  {
    v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38);
    v2 = *((_DWORD *)this + 53);
  }
  else
  {
    v39 = 1;
  }
  v3 += v39 + 1;
  if ((v2 & 0x1000) == 0)
  {
LABEL_66:
    if ((v2 & 0x2000) == 0)
      goto LABEL_67;
    goto LABEL_98;
  }
LABEL_89:
  v40 = *((_QWORD *)this + 12);
  v41 = *(unsigned __int8 *)(v40 + 23);
  v42 = v41;
  v43 = *(_QWORD *)(v40 + 8);
  if ((v41 & 0x80u) == 0)
    v44 = *(unsigned __int8 *)(v40 + 23);
  else
    v44 = v43;
  if (v44 >= 0x80)
  {
    v45 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v44);
    v41 = *(unsigned __int8 *)(v40 + 23);
    v43 = *(_QWORD *)(v40 + 8);
    v2 = *((_DWORD *)this + 53);
    v42 = *(_BYTE *)(v40 + 23);
  }
  else
  {
    v45 = 1;
  }
  if (v42 < 0)
    v41 = v43;
  v3 += v45 + v41 + 1;
  if ((v2 & 0x2000) == 0)
  {
LABEL_67:
    if ((v2 & 0x4000) == 0)
      goto LABEL_68;
    goto LABEL_102;
  }
LABEL_98:
  v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 26);
  if (v46 >= 0x80)
  {
    v47 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v46);
    v2 = *((_DWORD *)this + 53);
  }
  else
  {
    v47 = 1;
  }
  v3 += v47 + 1;
  if ((v2 & 0x4000) == 0)
  {
LABEL_68:
    if ((v2 & 0x8000) == 0)
      goto LABEL_110;
    goto LABEL_106;
  }
LABEL_102:
  v48 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 27);
  if (v48 >= 0x80)
  {
    v49 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v48);
    v2 = *((_DWORD *)this + 53);
  }
  else
  {
    v49 = 1;
  }
  v3 += v49 + 1;
  if ((v2 & 0x8000) != 0)
  {
LABEL_106:
    v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 28);
    if (v50 >= 0x80)
    {
      v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v50);
      v2 = *((_DWORD *)this + 53);
    }
    else
    {
      v51 = 1;
    }
    v3 += v51 + 2;
  }
LABEL_110:
  if ((v2 & 0xFF0000) == 0)
    goto LABEL_121;
  if ((v2 & 0x10000) != 0)
    v3 += 3;
  if ((v2 & 0x20000) != 0)
  {
    v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 29);
    if (v52 >= 0x80)
    {
      v53 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52);
      v2 = *((_DWORD *)this + 53);
    }
    else
    {
      v53 = 1;
    }
    v3 += v53 + 2;
    if ((v2 & 0x40000) == 0)
    {
LABEL_115:
      if ((v2 & 0x80000) == 0)
        goto LABEL_116;
      goto LABEL_140;
    }
  }
  else if ((v2 & 0x40000) == 0)
  {
    goto LABEL_115;
  }
  v56 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 30);
  if (v56 >= 0x80)
  {
    v57 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v56);
    v2 = *((_DWORD *)this + 53);
  }
  else
  {
    v57 = 1;
  }
  v3 += v57 + 2;
  if ((v2 & 0x80000) == 0)
  {
LABEL_116:
    if ((v2 & 0x100000) == 0)
      goto LABEL_117;
    goto LABEL_144;
  }
LABEL_140:
  v58 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 31);
  if (v58 >= 0x80)
  {
    v59 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v58);
    v2 = *((_DWORD *)this + 53);
  }
  else
  {
    v59 = 1;
  }
  v3 += v59 + 2;
  if ((v2 & 0x100000) == 0)
  {
LABEL_117:
    if ((v2 & 0x200000) == 0)
      goto LABEL_118;
    goto LABEL_148;
  }
LABEL_144:
  v60 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 32);
  if (v60 >= 0x80)
  {
    v61 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v60);
    v2 = *((_DWORD *)this + 53);
  }
  else
  {
    v61 = 1;
  }
  v3 += v61 + 2;
  if ((v2 & 0x200000) == 0)
  {
LABEL_118:
    if ((v2 & 0x400000) == 0)
      goto LABEL_119;
    goto LABEL_152;
  }
LABEL_148:
  v62 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 33);
  if (v62 >= 0x80)
  {
    v63 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v62);
    v2 = *((_DWORD *)this + 53);
  }
  else
  {
    v63 = 1;
  }
  v3 += v63 + 2;
  if ((v2 & 0x400000) == 0)
  {
LABEL_119:
    if ((v2 & 0x800000) == 0)
      goto LABEL_121;
    goto LABEL_120;
  }
LABEL_152:
  v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 17))
      + 2;
  v2 = *((_DWORD *)this + 53);
  if ((v2 & 0x800000) != 0)
  {
LABEL_120:
    v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                      + 18))
        + 2;
    v2 = *((_DWORD *)this + 53);
  }
LABEL_121:
  if (!HIBYTE(v2))
    goto LABEL_184;
  if ((v2 & 0x1000000) != 0)
  {
    v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                      + 19))
        + 2;
    v2 = *((_DWORD *)this + 53);
    if ((v2 & 0x2000000) == 0)
    {
LABEL_124:
      if ((v2 & 0x4000000) == 0)
        goto LABEL_125;
      goto LABEL_131;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_124;
  }
  v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 20))
      + 2;
  v2 = *((_DWORD *)this + 53);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_125:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_156;
    goto LABEL_132;
  }
LABEL_131:
  v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 21))
      + 2;
  v2 = *((_DWORD *)this + 53);
  if ((v2 & 0x8000000) == 0)
    goto LABEL_156;
LABEL_132:
  v54 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 45);
  if (v54 >= 0x80)
  {
    v55 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v54) + 2;
    v2 = *((_DWORD *)this + 53);
  }
  else
  {
    v55 = 3;
  }
  v3 += v55;
LABEL_156:
  if ((v2 & 0x10000000) != 0)
    v3 += 3;
  if ((v2 & 0x20000000) != 0)
  {
    v64 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 48);
    if (v64 >= 0x80)
    {
      v65 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v64) + 2;
      v2 = *((_DWORD *)this + 53);
    }
    else
    {
      v65 = 3;
    }
    v3 += v65;
    if ((v2 & 0x40000000) == 0)
    {
LABEL_160:
      if ((v2 & 0x80000000) == 0)
        goto LABEL_184;
      goto LABEL_175;
    }
  }
  else if ((v2 & 0x40000000) == 0)
  {
    goto LABEL_160;
  }
  v66 = *((_QWORD *)this + 23);
  v67 = *(unsigned __int8 *)(v66 + 23);
  v68 = v67;
  v69 = *(_QWORD *)(v66 + 8);
  if ((v67 & 0x80u) == 0)
    v70 = *(unsigned __int8 *)(v66 + 23);
  else
    v70 = v69;
  if (v70 >= 0x80)
  {
    v71 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v70);
    v67 = *(unsigned __int8 *)(v66 + 23);
    v69 = *(_QWORD *)(v66 + 8);
    v2 = *((_DWORD *)this + 53);
    v68 = *(_BYTE *)(v66 + 23);
  }
  else
  {
    v71 = 1;
  }
  if (v68 < 0)
    v67 = v69;
  v3 += v71 + v67 + 2;
  if ((v2 & 0x80000000) != 0)
  {
LABEL_175:
    v72 = *((_QWORD *)this + 25);
    v73 = *(unsigned __int8 *)(v72 + 23);
    v74 = v73;
    v75 = *(_QWORD *)(v72 + 8);
    if ((v73 & 0x80u) == 0)
      v76 = *(unsigned __int8 *)(v72 + 23);
    else
      v76 = v75;
    if (v76 >= 0x80)
    {
      v77 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v76);
      v73 = *(unsigned __int8 *)(v72 + 23);
      v75 = *(_QWORD *)(v72 + 8);
      v74 = *(_BYTE *)(v72 + 23);
    }
    else
    {
      v77 = 1;
    }
    if (v74 < 0)
      v73 = v75;
    v3 += v77 + v73 + 2;
  }
LABEL_184:
  LOBYTE(v78) = *((_BYTE *)this + 216);
  if ((_BYTE)v78)
  {
    if ((*((_BYTE *)this + 216) & 1) != 0)
    {
      v79 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 49);
      if (v79 >= 0x80)
      {
        v80 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v79) + 2;
        v78 = *((_DWORD *)this + 54);
      }
      else
      {
        v80 = 3;
      }
      v3 += v80;
    }
    if ((v78 & 2) != 0)
      v3 += 3;
  }
  v81 = *((_DWORD *)this + 16);
  v82 = (v81 + v3);
  if (v81 >= 1)
  {
    for (i = 0; i < v81; ++i)
    {
      v84 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * i);
      v85 = *(unsigned __int8 *)(v84 + 23);
      v86 = v85;
      v87 = *(_QWORD *)(v84 + 8);
      if ((v85 & 0x80u) == 0)
        v88 = *(unsigned __int8 *)(v84 + 23);
      else
        v88 = v87;
      if (v88 >= 0x80)
      {
        v89 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v88);
        v85 = *(unsigned __int8 *)(v84 + 23);
        v87 = *(_QWORD *)(v84 + 8);
        v81 = *((_DWORD *)this + 16);
        v86 = *(_BYTE *)(v84 + 23);
      }
      else
      {
        v89 = 1;
      }
      if (v86 < 0)
        v85 = v87;
      v82 = (v89 + v82 + v85);
    }
  }
  *((_DWORD *)this + 52) = v82;
  return v82;
}

uint64_t awd::metrics::ATM_Registration_Result::CheckTypeAndMergeFrom(const std::string **this, const std::string **lpsrc)
{
  uint64_t result;
  uint64_t v5;
  const std::string *v6;
  int v7;
  uint64_t v8;
  const std::string *v9;
  std::string *v10;
  const std::string *v11;
  uint64_t v12;
  unsigned int v13;
  const std::string *v14;
  int v15;
  int v16;
  std::string *v17;
  int v18;
  const std::string *v19;
  std::string *v20;
  unsigned int v21;
  int v22;
  const std::string *v23;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  const std::string *v30;
  const std::string *v31;
  std::string *v32;
  const std::string *v33;
  std::string *v34;
  int v35;
  const std::string *v36;
  std::string *v37;
  int v38;
  const std::string *v39;
  std::string *v40;
  int v41;
  int v42;
  const std::string *v43;
  const std::string *v44;
  const std::string *v45;
  int v46;
  char v47;
  int v48;
  const std::string *v49;
  std::string *v50;
  const std::string *v51;
  std::string *v52;
  int v53;
  int v54;
  char v55;
  char v56[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v56);
  }
  result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 7));
  if (*((int *)lpsrc + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = (const std::string *)*((_QWORD *)&lpsrc[7]->__r_.__value_.__l.__data_ + v5);
      v7 = *((_DWORD *)this + 17);
      v8 = *((int *)this + 16);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 18))
        {
          result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 7));
          v7 = *((_DWORD *)this + 17);
        }
        *((_DWORD *)this + 17) = v7 + 1;
        v10 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
        v11 = this[7];
        v12 = *((int *)this + 16);
        *((_DWORD *)this + 16) = v12 + 1;
        v11->__r_.__value_.__r.__words[v12] = (std::string::size_type)v10;
      }
      else
      {
        v9 = this[7];
        *((_DWORD *)this + 16) = v8 + 1;
        v10 = (std::string *)*((_QWORD *)&v9->__r_.__value_.__l.__data_ + v8);
      }
      result = (uint64_t)std::string::operator=(v10, v6);
      ++v5;
    }
    while (v5 < *((int *)lpsrc + 16));
  }
  v13 = *((_DWORD *)lpsrc + 53);
  if (!(_BYTE)v13)
    goto LABEL_27;
  if ((v13 & 1) != 0)
  {
    v14 = lpsrc[1];
    *((_DWORD *)this + 53) |= 1u;
    this[1] = v14;
    v13 = *((_DWORD *)lpsrc + 53);
  }
  if ((v13 & 2) != 0)
  {
    v15 = *((_DWORD *)lpsrc + 4);
    if ((v15 - 1) >= 0xD)
      __assert_rtn("set_type", "CATM.pb.h", 7735, "::awd::metrics::enum_ims_reg_type_IsValid(value)");
    *((_DWORD *)this + 53) |= 2u;
    *((_DWORD *)this + 4) = v15;
    v13 = *((_DWORD *)lpsrc + 53);
  }
  if ((v13 & 4) != 0)
  {
    v16 = *((_DWORD *)lpsrc + 5);
    if ((v16 - 1) >= 4)
      __assert_rtn("set_feature", "CATM.pb.h", 7758, "::awd::metrics::enum_ims_reg_feature_IsValid(value)");
    *((_DWORD *)this + 53) |= 4u;
    *((_DWORD *)this + 5) = v16;
    v13 = *((_DWORD *)lpsrc + 53);
  }
  v17 = (std::string *)MEMORY[0x1E0DE8338];
  if ((v13 & 8) != 0)
  {
    v31 = lpsrc[3];
    *((_DWORD *)this + 53) |= 8u;
    v32 = (std::string *)this[3];
    if (v32 == v17)
    {
      v32 = (std::string *)operator new();
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      this[3] = v32;
    }
    result = (uint64_t)std::string::operator=(v32, v31);
    v13 = *((_DWORD *)lpsrc + 53);
    if ((v13 & 0x10) == 0)
    {
LABEL_23:
      if ((v13 & 0x20) == 0)
        goto LABEL_24;
LABEL_75:
      v35 = *((_DWORD *)lpsrc + 12);
      *((_DWORD *)this + 53) |= 0x20u;
      *((_DWORD *)this + 12) = v35;
      v13 = *((_DWORD *)lpsrc + 53);
      if ((v13 & 0x40) == 0)
      {
LABEL_25:
        if ((v13 & 0x80) == 0)
          goto LABEL_27;
        goto LABEL_26;
      }
      goto LABEL_76;
    }
  }
  else if ((v13 & 0x10) == 0)
  {
    goto LABEL_23;
  }
  v33 = lpsrc[4];
  *((_DWORD *)this + 53) |= 0x10u;
  v34 = (std::string *)this[4];
  if (v34 == v17)
  {
    v34 = (std::string *)operator new();
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    this[4] = v34;
  }
  result = (uint64_t)std::string::operator=(v34, v33);
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x20) != 0)
    goto LABEL_75;
LABEL_24:
  if ((v13 & 0x40) == 0)
    goto LABEL_25;
LABEL_76:
  v36 = lpsrc[5];
  *((_DWORD *)this + 53) |= 0x40u;
  v37 = (std::string *)this[5];
  if (v37 == v17)
  {
    v37 = (std::string *)operator new();
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    this[5] = v37;
  }
  result = (uint64_t)std::string::operator=(v37, v36);
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x80) != 0)
  {
LABEL_26:
    v18 = *((_DWORD *)lpsrc + 13);
    *((_DWORD *)this + 53) |= 0x80u;
    *((_DWORD *)this + 13) = v18;
    v13 = *((_DWORD *)lpsrc + 53);
  }
LABEL_27:
  if ((v13 & 0x1FE00) == 0)
    goto LABEL_41;
  if ((v13 & 0x200) != 0)
  {
    v19 = lpsrc[10];
    *((_DWORD *)this + 53) |= 0x200u;
    v20 = (std::string *)this[10];
    if (v20 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v20 = (std::string *)operator new();
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      this[10] = v20;
    }
    result = (uint64_t)std::string::operator=(v20, v19);
    v13 = *((_DWORD *)lpsrc + 53);
  }
  if ((v13 & 0x400) != 0)
  {
    v21 = *((_DWORD *)lpsrc + 22);
    result = awd::metrics::RESPONSE_Code_IsValid((awd::metrics *)v21);
    if ((result & 1) == 0)
      __assert_rtn("set_result", "CATM.pb.h", 8149, "::awd::metrics::RESPONSE_Code_IsValid(value)");
    *((_DWORD *)this + 53) |= 0x400u;
    *((_DWORD *)this + 22) = v21;
    v13 = *((_DWORD *)lpsrc + 53);
  }
  if ((v13 & 0x800) != 0)
  {
    v38 = *((_DWORD *)lpsrc + 23);
    *((_DWORD *)this + 53) |= 0x800u;
    *((_DWORD *)this + 23) = v38;
    v13 = *((_DWORD *)lpsrc + 53);
    if ((v13 & 0x1000) == 0)
    {
LABEL_37:
      if ((v13 & 0x2000) == 0)
        goto LABEL_38;
      goto LABEL_84;
    }
  }
  else if ((v13 & 0x1000) == 0)
  {
    goto LABEL_37;
  }
  v39 = lpsrc[12];
  *((_DWORD *)this + 53) |= 0x1000u;
  v40 = (std::string *)this[12];
  if (v40 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v40 = (std::string *)operator new();
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    this[12] = v40;
  }
  result = (uint64_t)std::string::operator=(v40, v39);
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x2000) == 0)
  {
LABEL_38:
    if ((v13 & 0x4000) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  v41 = *((_DWORD *)lpsrc + 26);
  *((_DWORD *)this + 53) |= 0x2000u;
  *((_DWORD *)this + 26) = v41;
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x4000) == 0)
  {
LABEL_39:
    if ((v13 & 0x8000) == 0)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_85:
  v42 = *((_DWORD *)lpsrc + 27);
  *((_DWORD *)this + 53) |= 0x4000u;
  *((_DWORD *)this + 27) = v42;
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x8000) != 0)
  {
LABEL_40:
    v22 = *((_DWORD *)lpsrc + 28);
    *((_DWORD *)this + 53) |= 0x8000u;
    *((_DWORD *)this + 28) = v22;
    v13 = *((_DWORD *)lpsrc + 53);
  }
LABEL_41:
  if ((v13 & 0xFF0000) == 0)
    goto LABEL_51;
  if ((v13 & 0x10000) != 0)
  {
    v24 = *((_BYTE *)lpsrc + 176);
    *((_DWORD *)this + 53) |= 0x10000u;
    *((_BYTE *)this + 176) = v24;
    v13 = *((_DWORD *)lpsrc + 53);
    if ((v13 & 0x20000) == 0)
    {
LABEL_44:
      if ((v13 & 0x40000) == 0)
        goto LABEL_45;
      goto LABEL_63;
    }
  }
  else if ((v13 & 0x20000) == 0)
  {
    goto LABEL_44;
  }
  v25 = *((_DWORD *)lpsrc + 29);
  *((_DWORD *)this + 53) |= 0x20000u;
  *((_DWORD *)this + 29) = v25;
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x40000) == 0)
  {
LABEL_45:
    if ((v13 & 0x80000) == 0)
      goto LABEL_46;
    goto LABEL_64;
  }
LABEL_63:
  v26 = *((_DWORD *)lpsrc + 30);
  *((_DWORD *)this + 53) |= 0x40000u;
  *((_DWORD *)this + 30) = v26;
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x80000) == 0)
  {
LABEL_46:
    if ((v13 & 0x100000) == 0)
      goto LABEL_47;
    goto LABEL_65;
  }
LABEL_64:
  v27 = *((_DWORD *)lpsrc + 31);
  *((_DWORD *)this + 53) |= 0x80000u;
  *((_DWORD *)this + 31) = v27;
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x100000) == 0)
  {
LABEL_47:
    if ((v13 & 0x200000) == 0)
      goto LABEL_48;
    goto LABEL_66;
  }
LABEL_65:
  v28 = *((_DWORD *)lpsrc + 32);
  *((_DWORD *)this + 53) |= 0x100000u;
  *((_DWORD *)this + 32) = v28;
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x200000) == 0)
  {
LABEL_48:
    if ((v13 & 0x400000) == 0)
      goto LABEL_49;
    goto LABEL_67;
  }
LABEL_66:
  v29 = *((_DWORD *)lpsrc + 33);
  *((_DWORD *)this + 53) |= 0x200000u;
  *((_DWORD *)this + 33) = v29;
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x400000) == 0)
  {
LABEL_49:
    if ((v13 & 0x800000) == 0)
      goto LABEL_51;
    goto LABEL_50;
  }
LABEL_67:
  v30 = lpsrc[17];
  *((_DWORD *)this + 53) |= 0x400000u;
  this[17] = v30;
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x800000) != 0)
  {
LABEL_50:
    v23 = lpsrc[18];
    *((_DWORD *)this + 53) |= 0x800000u;
    this[18] = v23;
    v13 = *((_DWORD *)lpsrc + 53);
  }
LABEL_51:
  if (!HIBYTE(v13))
    goto LABEL_99;
  if ((v13 & 0x1000000) != 0)
  {
    v43 = lpsrc[19];
    *((_DWORD *)this + 53) |= 0x1000000u;
    this[19] = v43;
    v13 = *((_DWORD *)lpsrc + 53);
    if ((v13 & 0x2000000) == 0)
    {
LABEL_54:
      if ((v13 & 0x4000000) == 0)
        goto LABEL_55;
      goto LABEL_89;
    }
  }
  else if ((v13 & 0x2000000) == 0)
  {
    goto LABEL_54;
  }
  v44 = lpsrc[20];
  *((_DWORD *)this + 53) |= 0x2000000u;
  this[20] = v44;
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x4000000) == 0)
  {
LABEL_55:
    if ((v13 & 0x8000000) == 0)
      goto LABEL_56;
    goto LABEL_90;
  }
LABEL_89:
  v45 = lpsrc[21];
  *((_DWORD *)this + 53) |= 0x4000000u;
  this[21] = v45;
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x8000000) == 0)
  {
LABEL_56:
    if ((v13 & 0x10000000) == 0)
      goto LABEL_57;
    goto LABEL_91;
  }
LABEL_90:
  v46 = *((_DWORD *)lpsrc + 45);
  *((_DWORD *)this + 53) |= 0x8000000u;
  *((_DWORD *)this + 45) = v46;
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x10000000) == 0)
  {
LABEL_57:
    if ((v13 & 0x20000000) == 0)
      goto LABEL_58;
    goto LABEL_92;
  }
LABEL_91:
  v47 = *((_BYTE *)lpsrc + 177);
  *((_DWORD *)this + 53) |= 0x10000000u;
  *((_BYTE *)this + 177) = v47;
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x20000000) == 0)
  {
LABEL_58:
    if ((v13 & 0x40000000) == 0)
      goto LABEL_59;
    goto LABEL_93;
  }
LABEL_92:
  v48 = *((_DWORD *)lpsrc + 48);
  *((_DWORD *)this + 53) |= 0x20000000u;
  *((_DWORD *)this + 48) = v48;
  v13 = *((_DWORD *)lpsrc + 53);
  if ((v13 & 0x40000000) == 0)
  {
LABEL_59:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_99;
    goto LABEL_96;
  }
LABEL_93:
  v49 = lpsrc[23];
  *((_DWORD *)this + 53) |= 0x40000000u;
  v50 = (std::string *)this[23];
  if (v50 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v50 = (std::string *)operator new();
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    this[23] = v50;
  }
  result = (uint64_t)std::string::operator=(v50, v49);
  if ((*((_DWORD *)lpsrc + 53) & 0x80000000) != 0)
  {
LABEL_96:
    v51 = lpsrc[25];
    *((_DWORD *)this + 53) |= 0x80000000;
    v52 = (std::string *)this[25];
    if (v52 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v52 = (std::string *)operator new();
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      this[25] = v52;
    }
    result = (uint64_t)std::string::operator=(v52, v51);
  }
LABEL_99:
  LOBYTE(v53) = *((_BYTE *)lpsrc + 216);
  if ((_BYTE)v53)
  {
    if (((_BYTE)lpsrc[27] & 1) != 0)
    {
      v54 = *((_DWORD *)lpsrc + 49);
      *((_DWORD *)this + 54) |= 1u;
      *((_DWORD *)this + 49) = v54;
      v53 = *((_DWORD *)lpsrc + 54);
    }
    if ((v53 & 2) != 0)
    {
      v55 = *((_BYTE *)lpsrc + 178);
      *((_DWORD *)this + 54) |= 2u;
      *((_BYTE *)this + 178) = v55;
    }
  }
  return result;
}

void sub_1BEE7CE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::ATM_Registration_Result::IsInitialized(awd::metrics::ATM_Registration_Result *this)
{
  return 1;
}

_QWORD *awd::metrics::ATM_Registration_Result::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_Registration_Result");
}

double awd::metrics::ATM_CallAttemptEvent::SharedCtor(awd::metrics::ATM_CallAttemptEvent *this)
{
  uint64_t v1;
  double result;

  v1 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v1;
  *((_QWORD *)this + 3) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 4) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 5) = v1;
  *((_QWORD *)this + 6) = v1;
  *((_QWORD *)this + 7) = v1;
  *((_QWORD *)this + 8) = v1;
  *((_QWORD *)this + 10) = v1;
  *((_QWORD *)this + 11) = v1;
  *((_QWORD *)this + 13) = v1;
  *((_QWORD *)this + 14) = v1;
  *((_QWORD *)this + 9) = 0;
  result = 0.0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = v1;
  *((_QWORD *)this + 17) = v1;
  *((_WORD *)this + 94) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_QWORD *)this + 18) = v1;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = v1;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 27) = v1;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = v1;
  *((_QWORD *)this + 33) = 0;
  return result;
}

void awd::metrics::ATM_CallAttemptEvent::~ATM_CallAttemptEvent(awd::metrics::ATM_CallAttemptEvent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)this = &off_1E78BF180;
  v2 = *((_QWORD *)this + 2);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B87100](v2, 0x1012C40EC159624);
  }
  v5 = *((_QWORD *)this + 5);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x1C3B87100](v5, 0x1012C40EC159624);
  }
  v7 = *((_QWORD *)this + 6);
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x1C3B87100](v7, 0x1012C40EC159624);
  }
  v9 = *((_QWORD *)this + 7);
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    MEMORY[0x1C3B87100](v9, 0x1012C40EC159624);
  }
  v11 = *((_QWORD *)this + 8);
  if (v11 != v3 && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x1C3B87100](v11, 0x1012C40EC159624);
  }
  v12 = *((_QWORD *)this + 10);
  if (v12 != v3 && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    MEMORY[0x1C3B87100](v12, 0x1012C40EC159624);
  }
  v13 = *((_QWORD *)this + 11);
  if (v13 != v3 && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    MEMORY[0x1C3B87100](v13, 0x1012C40EC159624);
  }
  v14 = *((_QWORD *)this + 13);
  if (v14 != v3 && v14)
  {
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    MEMORY[0x1C3B87100](v14, 0x1012C40EC159624);
  }
  v15 = *((_QWORD *)this + 14);
  if (v15 != v3 && v15)
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    MEMORY[0x1C3B87100](v15, 0x1012C40EC159624);
  }
  v16 = *((_QWORD *)this + 16);
  if (v16 != v3 && v16)
  {
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
    MEMORY[0x1C3B87100](v16, 0x1012C40EC159624);
  }
  v17 = *((_QWORD *)this + 17);
  if (v17 != v3 && v17)
  {
    if (*(char *)(v17 + 23) < 0)
      operator delete(*(void **)v17);
    MEMORY[0x1C3B87100](v17, 0x1012C40EC159624);
  }
  v18 = *((_QWORD *)this + 18);
  if (v18 != v3 && v18)
  {
    if (*(char *)(v18 + 23) < 0)
      operator delete(*(void **)v18);
    MEMORY[0x1C3B87100](v18, 0x1012C40EC159624);
  }
  v19 = *((_QWORD *)this + 22);
  if (v19 != v3 && v19)
  {
    if (*(char *)(v19 + 23) < 0)
      operator delete(*(void **)v19);
    MEMORY[0x1C3B87100](v19, 0x1012C40EC159624);
  }
  v20 = *((_QWORD *)this + 27);
  if (v20 != v3 && v20)
  {
    if (*(char *)(v20 + 23) < 0)
      operator delete(*(void **)v20);
    MEMORY[0x1C3B87100](v20, 0x1012C40EC159624);
  }
  v21 = *((_QWORD *)this + 31);
  if (v21 != v3 && v21)
  {
    if (*(char *)(v21 + 23) < 0)
      operator delete(*(void **)v21);
    MEMORY[0x1C3B87100](v21, 0x1012C40EC159624);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 48);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::metrics::ATM_CallAttemptEvent::~ATM_CallAttemptEvent(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t awd::metrics::ATM_CallAttemptEvent::New(awd::metrics::ATM_CallAttemptEvent *this)
{
  uint64_t v1;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E78BF180;
  *(_QWORD *)(v1 + 192) = 0;
  *(_QWORD *)(v1 + 200) = 0;
  *(_DWORD *)(v1 + 208) = 0;
  awd::metrics::ATM_CallAttemptEvent::SharedCtor((awd::metrics::ATM_CallAttemptEvent *)v1);
  return v1;
}

uint64_t awd::metrics::ATM_CallAttemptEvent::Clear(awd::metrics::ATM_CallAttemptEvent *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v2 = *((_DWORD *)this + 66);
  if ((_BYTE)v2)
  {
    *((_QWORD *)this + 1) = 0;
    if ((v2 & 2) != 0)
    {
      v3 = *((_QWORD *)this + 2);
      if (v3 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *((_QWORD *)this + 3) = 0xFFFFFFFFLL;
    *((_BYTE *)this + 72) = 0;
    v2 = *((_DWORD *)this + 66);
  }
  if ((v2 & 0xFF00) != 0)
  {
    *((_DWORD *)this + 8) = -1;
    if ((v2 & 0x200) != 0)
    {
      v4 = *((_QWORD *)this + 5);
      if (v4 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 9) = 0;
    if ((*((_BYTE *)this + 265) & 8) != 0)
    {
      v5 = *((_QWORD *)this + 6);
      if (v5 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    *((_BYTE *)this + 73) = 0;
    if ((*((_BYTE *)this + 265) & 0x20) != 0)
    {
      v6 = *((_QWORD *)this + 7);
      if (v6 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 265) & 0x40) != 0)
    {
      v7 = *((_QWORD *)this + 8);
      if (v7 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 19) = 0;
    v2 = *((_DWORD *)this + 66);
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *((_DWORD *)this + 24) = 0;
    *((_BYTE *)this + 74) = 0;
    if ((v2 & 0x40000) != 0)
    {
      v8 = *((_QWORD *)this + 10);
      if (v8 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(_BYTE **)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v8 = 0;
          *(_BYTE *)(v8 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 266) & 8) != 0)
    {
      v9 = *((_QWORD *)this + 11);
      if (v9 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v9 + 23) < 0)
        {
          **(_BYTE **)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v9 = 0;
          *(_BYTE *)(v9 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 266) & 0x10) != 0)
    {
      v10 = *((_QWORD *)this + 13);
      if (v10 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(_BYTE **)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v10 = 0;
          *(_BYTE *)(v10 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 266) & 0x20) != 0)
    {
      v11 = *((_QWORD *)this + 14);
      if (v11 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(_BYTE **)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v11 = 0;
          *(_BYTE *)(v11 + 23) = 0;
        }
      }
    }
    *((_BYTE *)this + 75) = 0;
    *((_DWORD *)this + 25) = 0;
    v2 = *((_DWORD *)this + 66);
  }
  if (HIBYTE(v2))
  {
    *((_QWORD *)this + 15) = 0;
    if ((v2 & 0x4000000) != 0)
    {
      v12 = *((_QWORD *)this + 16);
      if (v12 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v12 + 23) < 0)
        {
          **(_BYTE **)v12 = 0;
          *(_QWORD *)(v12 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v12 = 0;
          *(_BYTE *)(v12 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 267) & 8) != 0)
    {
      v13 = *((_QWORD *)this + 17);
      if (v13 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v13 + 23) < 0)
        {
          **(_BYTE **)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v13 = 0;
          *(_BYTE *)(v13 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 267) & 0x10) != 0)
    {
      v14 = *((_QWORD *)this + 18);
      if (v14 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v14 + 23) < 0)
        {
          **(_BYTE **)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v14 = 0;
          *(_BYTE *)(v14 + 23) = 0;
        }
      }
    }
    *((_QWORD *)this + 19) = 0;
    *((_BYTE *)this + 188) = 0;
  }
  v15 = *((_DWORD *)this + 67);
  if ((_BYTE)v15)
  {
    *((_DWORD *)this + 46) = 0;
    *((_QWORD *)this + 20) = 0;
    *((_QWORD *)this + 21) = 0;
    if ((v15 & 0x10) != 0)
    {
      v16 = *((_QWORD *)this + 22);
      if (v16 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v16 + 23) < 0)
        {
          **(_BYTE **)v16 = 0;
          *(_QWORD *)(v16 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v16 = 0;
          *(_BYTE *)(v16 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 268) & 0x40) != 0)
    {
      v17 = *((_QWORD *)this + 27);
      if (v17 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v17 + 23) < 0)
        {
          **(_BYTE **)v17 = 0;
          *(_QWORD *)(v17 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v17 = 0;
          *(_BYTE *)(v17 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 56) = 0;
    v15 = *((_DWORD *)this + 67);
  }
  if ((v15 & 0xFF00) != 0)
  {
    *((_BYTE *)this + 189) = 0;
    *((_DWORD *)this + 64) = 0;
    *(_QWORD *)((char *)this + 236) = 0;
    *(_QWORD *)((char *)this + 228) = 0;
    *((_DWORD *)this + 61) = 0;
    if ((v15 & 0x8000) != 0)
    {
      v18 = *((_QWORD *)this + 31);
      if (v18 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v18 + 23) < 0)
        {
          **(_BYTE **)v18 = 0;
          *(_QWORD *)(v18 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v18 = 0;
          *(_BYTE *)(v18 + 23) = 0;
        }
      }
    }
  }
  result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Clear<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 192);
  *((_QWORD *)this + 33) = 0;
  return result;
}

uint64_t awd::metrics::ATM_CallAttemptEvent::MergePartialFromCodedStream(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  char *v11;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  int v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  int v32;
  unint64_t v33;
  char *v34;
  int v35;
  unint64_t v36;
  unsigned __int8 *v37;
  int v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  _QWORD *v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  unint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  _QWORD *v64;
  unint64_t v65;
  unsigned __int8 *v66;
  char *v67;
  unsigned int v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  unsigned int v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  _QWORD *v98;
  _BYTE *v99;
  unsigned int v100;
  _BYTE *v101;
  unsigned int v102;
  _BYTE *v103;
  unsigned int v104;
  _BYTE *v105;
  unsigned int v106;
  _BYTE *v107;
  unsigned int v108;
  _BYTE *v109;
  unsigned int v110;
  _BYTE *v111;
  unsigned int v112;
  _BYTE *v114;
  _QWORD *v115;
  _BYTE *v116;
  _BYTE *v117;
  _QWORD *v118;
  _BYTE *v119;
  unsigned int v120;
  _BYTE *v121;
  _QWORD *v122;
  _BYTE *v123;
  _QWORD *v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  _QWORD *v127;
  unsigned __int8 *v128;
  _QWORD *v129;
  unsigned __int8 *v130;
  _QWORD *v131;
  unsigned __int8 *v132;
  _QWORD *v133;
  unsigned __int8 *v134;
  unsigned int v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  unsigned __int8 *v145;
  unsigned int v146;
  unsigned __int8 *v147;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v148;
  unint64_t *v149;
  unsigned int *v150;
  unint64_t *v151;
  unsigned int *v152;
  unsigned int *v153;
  unsigned int *v154;
  unsigned int *v155;
  unsigned int *v156;
  unsigned int *v157;
  unsigned int *v158;
  unsigned int *v159;
  unsigned int *v160;
  unsigned int v161;

  v3 = this;
  v4 = (unsigned int *)(this + 36);
  v5 = (unsigned int *)(this + 76);
  v6 = (unsigned int *)(this + 152);
  v159 = (unsigned int *)(this + 156);
  v160 = (unsigned int *)(this + 100);
  v153 = (unsigned int *)(this + 184);
  v151 = (unint64_t *)(this + 168);
  v148 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 192);
  v149 = (unint64_t *)(this + 8);
  v157 = (unsigned int *)(this + 96);
  v158 = (unsigned int *)(this + 124);
  v155 = (unsigned int *)(this + 164);
  v156 = (unsigned int *)(this + 224);
  v154 = (unsigned int *)(this + 228);
  v152 = (unsigned int *)(this + 232);
  v150 = (unsigned int *)(this + 236);
  v7 = (unsigned int *)(this + 240);
  v8 = (unsigned int *)(this + 244);
  v9 = (unsigned int *)(this + 256);
  v10 = MEMORY[0x1E0DE8338];
LABEL_2:
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      v12 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)this;
      *((_DWORD *)a2 + 8) = this;
      if (!(_DWORD)this)
        return 1;
    }
    else
    {
      v12 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v11;
      *((_DWORD *)a2 + 8) = (_DWORD)v12;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)v12)
        return 1;
    }
    v13 = v12 >> 3;
    switch(v12 >> 3)
    {
      case 1u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v149);
          if (!(_DWORD)this)
            return this;
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v149 = *v16;
          v17 = v16 + 1;
          *((_QWORD *)a2 + 1) = v17;
        }
        v20 = *(_DWORD *)(v3 + 264) | 1;
        *(_DWORD *)(v3 + 264) = v20;
        if ((unint64_t)v17 < v15 && *v17 == 18)
        {
          *((_QWORD *)a2 + 1) = v17 + 1;
          goto LABEL_303;
        }
        continue;
      case 2u:
        v14 = v12 & 7;
        if (v14 != 2)
          goto LABEL_153;
        v20 = *(_DWORD *)(v3 + 264);
LABEL_303:
        *(_DWORD *)(v3 + 264) = v20 | 2;
        if (*(_QWORD *)(v3 + 16) == v10)
        {
          v98 = (_QWORD *)operator new();
          v98[1] = 0;
          v98[2] = 0;
          *v98 = 0;
          *(_QWORD *)(v3 + 16) = v98;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)this)
          return this;
        v99 = (_BYTE *)*((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v99 >= v21 || *v99 != 24)
          continue;
        v22 = v99 + 1;
        *((_QWORD *)a2 + 1) = v22;
LABEL_309:
        v161 = 0;
        if ((unint64_t)v22 >= v21 || *v22 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v161);
          if (!(_DWORD)this)
            return this;
          v100 = v161;
          v101 = (_BYTE *)*((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v100 = *v22;
          v101 = v22 + 1;
          *((_QWORD *)a2 + 1) = v101;
        }
        *(_BYTE *)(v3 + 28) = v100 != 0;
        *(_DWORD *)(v3 + 264) |= 4u;
        if ((unint64_t)v101 >= v21 || *v101 != 32)
          continue;
        v23 = v101 + 1;
        *((_QWORD *)a2 + 1) = v23;
LABEL_317:
        v161 = 0;
        if ((unint64_t)v23 >= v21 || *v23 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v161);
          if (!(_DWORD)this)
            return this;
          v102 = v161;
        }
        else
        {
          v102 = *v23;
          *((_QWORD *)a2 + 1) = v23 + 1;
        }
        if (v102 + 1 <= 7)
        {
          *(_DWORD *)(v3 + 264) |= 8u;
          *(_DWORD *)(v3 + 24) = v102;
        }
        v103 = (_BYTE *)*((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v103 >= v24 || *v103 != 40)
          continue;
        v25 = v103 + 1;
        *((_QWORD *)a2 + 1) = v25;
LABEL_327:
        v161 = 0;
        if ((unint64_t)v25 >= v24 || *v25 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v161);
          if (!(_DWORD)this)
            return this;
          v104 = v161;
          v105 = (_BYTE *)*((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v104 = *v25;
          v105 = v25 + 1;
          *((_QWORD *)a2 + 1) = v105;
        }
        *(_BYTE *)(v3 + 29) = v104 != 0;
        *(_DWORD *)(v3 + 264) |= 0x10u;
        if ((unint64_t)v105 >= v24 || *v105 != 48)
          continue;
        v26 = v105 + 1;
        *((_QWORD *)a2 + 1) = v26;
LABEL_335:
        v161 = 0;
        if ((unint64_t)v26 >= v24 || *v26 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v161);
          if (!(_DWORD)this)
            return this;
          v106 = v161;
          v107 = (_BYTE *)*((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v106 = *v26;
          v107 = v26 + 1;
          *((_QWORD *)a2 + 1) = v107;
        }
        *(_BYTE *)(v3 + 30) = v106 != 0;
        *(_DWORD *)(v3 + 264) |= 0x20u;
        if ((unint64_t)v107 >= v24 || *v107 != 56)
          continue;
        v27 = v107 + 1;
        *((_QWORD *)a2 + 1) = v27;
LABEL_343:
        v161 = 0;
        if ((unint64_t)v27 >= v24 || *v27 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v161);
          if (!(_DWORD)this)
            return this;
          v108 = v161;
          v109 = (_BYTE *)*((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v108 = *v27;
          v109 = v27 + 1;
          *((_QWORD *)a2 + 1) = v109;
        }
        *(_BYTE *)(v3 + 31) = v108 != 0;
        *(_DWORD *)(v3 + 264) |= 0x40u;
        if ((unint64_t)v109 >= v24 || *v109 != 64)
          continue;
        v28 = v109 + 1;
        *((_QWORD *)a2 + 1) = v28;
LABEL_351:
        v161 = 0;
        if ((unint64_t)v28 >= v24 || *v28 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v161);
          if (!(_DWORD)this)
            return this;
          v110 = v161;
          v111 = (_BYTE *)*((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v110 = *v28;
          v111 = v28 + 1;
          *((_QWORD *)a2 + 1) = v111;
        }
        *(_BYTE *)(v3 + 72) = v110 != 0;
        *(_DWORD *)(v3 + 264) |= 0x80u;
        if ((unint64_t)v111 >= v24 || *v111 != 72)
          continue;
        v29 = v111 + 1;
        *((_QWORD *)a2 + 1) = v29;
LABEL_359:
        v161 = 0;
        if ((unint64_t)v29 >= v24 || *v29 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v161);
          if (!(_DWORD)this)
            return this;
          v112 = v161;
        }
        else
        {
          v112 = *v29;
          *((_QWORD *)a2 + 1) = v29 + 1;
        }
        if (v112 - 1 < 6 || v112 == -1)
        {
          *(_DWORD *)(v3 + 264) |= 0x100u;
          *(_DWORD *)(v3 + 32) = v112;
        }
        v114 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v114 >= *((_QWORD *)a2 + 2) || *v114 != 82)
          continue;
        *((_QWORD *)a2 + 1) = v114 + 1;
LABEL_373:
        *(_DWORD *)(v3 + 264) |= 0x200u;
        if (*(_QWORD *)(v3 + 40) == v10)
        {
          v115 = (_QWORD *)operator new();
          v115[1] = 0;
          v115[2] = 0;
          *v115 = 0;
          *(_QWORD *)(v3 + 40) = v115;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)this)
          return this;
        v116 = (_BYTE *)*((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v116 >= v30 || *v116 != 88)
          continue;
        v31 = v116 + 1;
        *((_QWORD *)a2 + 1) = v31;
LABEL_379:
        if ((unint64_t)v31 >= v30 || *v31 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)this)
            return this;
          v117 = (_BYTE *)*((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v31;
          v117 = v31 + 1;
          *((_QWORD *)a2 + 1) = v117;
        }
        v32 = *(_DWORD *)(v3 + 264) | 0x400;
        *(_DWORD *)(v3 + 264) = v32;
        if ((unint64_t)v117 >= v30 || *v117 != 98)
          continue;
        *((_QWORD *)a2 + 1) = v117 + 1;
LABEL_387:
        *(_DWORD *)(v3 + 264) = v32 | 0x800;
        if (*(_QWORD *)(v3 + 48) == v10)
        {
          v118 = (_QWORD *)operator new();
          v118[1] = 0;
          v118[2] = 0;
          *v118 = 0;
          *(_QWORD *)(v3 + 48) = v118;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)this)
          return this;
        v119 = (_BYTE *)*((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v119 >= v33 || *v119 != 104)
          continue;
        v34 = v119 + 1;
        *((_QWORD *)a2 + 1) = v34;
LABEL_393:
        v161 = 0;
        if ((unint64_t)v34 >= v33 || *v34 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v161);
          if (!(_DWORD)this)
            return this;
          v120 = v161;
          v121 = (_BYTE *)*((_QWORD *)a2 + 1);
          v33 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v120 = *v34;
          v121 = v34 + 1;
          *((_QWORD *)a2 + 1) = v121;
        }
        *(_BYTE *)(v3 + 73) = v120 != 0;
        v35 = *(_DWORD *)(v3 + 264) | 0x1000;
        *(_DWORD *)(v3 + 264) = v35;
        if ((unint64_t)v121 >= v33 || *v121 != 114)
          continue;
        *((_QWORD *)a2 + 1) = v121 + 1;
LABEL_401:
        *(_DWORD *)(v3 + 264) = v35 | 0x2000;
        if (*(_QWORD *)(v3 + 56) == v10)
        {
          v122 = (_QWORD *)operator new();
          v122[1] = 0;
          v122[2] = 0;
          *v122 = 0;
          *(_QWORD *)(v3 + 56) = v122;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)this)
          return this;
        v123 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v123 >= *((_QWORD *)a2 + 2) || *v123 != 122)
          continue;
        *((_QWORD *)a2 + 1) = v123 + 1;
LABEL_407:
        *(_DWORD *)(v3 + 264) |= 0x4000u;
        if (*(_QWORD *)(v3 + 64) == v10)
        {
          v124 = (_QWORD *)operator new();
          v124[1] = 0;
          v124[2] = 0;
          *v124 = 0;
          *(_QWORD *)(v3 + 64) = v124;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)this)
          return this;
        v125 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v36 = *((_QWORD *)a2 + 2);
        if ((int)v36 - (int)v125 < 2 || *v125 != 128 || v125[1] != 1)
          continue;
        v37 = v125 + 2;
        *((_QWORD *)a2 + 1) = v37;
LABEL_414:
        if ((unint64_t)v37 >= v36 || (char)*v37 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)this)
            return this;
          v126 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v36 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v37;
          v126 = v37 + 1;
          *((_QWORD *)a2 + 1) = v126;
        }
        v38 = *(_DWORD *)(v3 + 264) | 0x8000;
        *(_DWORD *)(v3 + 264) = v38;
        if ((int)v36 - (int)v126 < 2 || *v126 != 138 || v126[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v126 + 2;
LABEL_423:
        *(_DWORD *)(v3 + 264) = v38 | 0x40000;
        if (*(_QWORD *)(v3 + 80) == v10)
        {
          v127 = (_QWORD *)operator new();
          v127[1] = 0;
          v127[2] = 0;
          *v127 = 0;
          *(_QWORD *)(v3 + 80) = v127;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)this)
          return this;
        v128 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v128 < 2 || *v128 != 146 || v128[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v128 + 2;
LABEL_430:
        *(_DWORD *)(v3 + 264) |= 0x80000u;
        if (*(_QWORD *)(v3 + 88) == v10)
        {
          v129 = (_QWORD *)operator new();
          v129[1] = 0;
          v129[2] = 0;
          *v129 = 0;
          *(_QWORD *)(v3 + 88) = v129;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)this)
          return this;
        v130 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v130 < 2 || *v130 != 154 || v130[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v130 + 2;
LABEL_437:
        *(_DWORD *)(v3 + 264) |= 0x100000u;
        if (*(_QWORD *)(v3 + 104) == v10)
        {
          v131 = (_QWORD *)operator new();
          v131[1] = 0;
          v131[2] = 0;
          *v131 = 0;
          *(_QWORD *)(v3 + 104) = v131;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)this)
          return this;
        v132 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v132 < 2 || *v132 != 162 || v132[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v132 + 2;
LABEL_444:
        *(_DWORD *)(v3 + 264) |= 0x200000u;
        if (*(_QWORD *)(v3 + 112) == v10)
        {
          v133 = (_QWORD *)operator new();
          v133[1] = 0;
          v133[2] = 0;
          *v133 = 0;
          *(_QWORD *)(v3 + 112) = v133;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)this)
          return this;
        v134 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v39 = *((_QWORD *)a2 + 2);
        if ((int)v39 - (int)v134 < 2 || *v134 != 168 || v134[1] != 1)
          continue;
        v40 = v134 + 2;
        *((_QWORD *)a2 + 1) = v40;
LABEL_451:
        v161 = 0;
        if ((unint64_t)v40 >= v39 || (char)*v40 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v161);
          if (!(_DWORD)this)
            return this;
          v135 = v161;
          v136 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v39 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v135 = *v40;
          v136 = v40 + 1;
          *((_QWORD *)a2 + 1) = v136;
        }
        *(_BYTE *)(v3 + 75) = v135 != 0;
        *(_DWORD *)(v3 + 264) |= 0x400000u;
        if ((int)v39 - (int)v136 < 2 || *v136 != 176 || v136[1] != 1)
          continue;
        v41 = v136 + 2;
        *((_QWORD *)a2 + 1) = v41;
LABEL_460:
        if ((unint64_t)v41 >= v39 || (char)*v41 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v160);
          if (!(_DWORD)this)
            return this;
          v137 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v39 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v160 = *v41;
          v137 = v41 + 1;
          *((_QWORD *)a2 + 1) = v137;
        }
        *(_DWORD *)(v3 + 264) |= 0x800000u;
        if ((int)v39 - (int)v137 < 2 || *v137 != 184 || v137[1] != 1)
          continue;
        v42 = v137 + 2;
        *((_QWORD *)a2 + 1) = v42;
LABEL_469:
        if ((unint64_t)v42 >= v39 || (char)*v42 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v158);
          if (!(_DWORD)this)
            return this;
          v138 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v39 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v158 = *v42;
          v138 = v42 + 1;
          *((_QWORD *)a2 + 1) = v138;
        }
        v43 = *(_DWORD *)(v3 + 264) | 0x2000000;
        *(_DWORD *)(v3 + 264) = v43;
        if ((int)v39 - (int)v138 < 2 || *v138 != 194 || v138[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v138 + 2;
LABEL_69:
        *(_DWORD *)(v3 + 264) = v43 | 0x4000000;
        if (*(_QWORD *)(v3 + 128) == v10)
        {
          v44 = (_QWORD *)operator new();
          v44[1] = 0;
          v44[2] = 0;
          *v44 = 0;
          *(_QWORD *)(v3 + 128) = v44;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)this)
          return this;
        v45 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v45 < 2 || *v45 != 202 || v45[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v45 + 2;
LABEL_77:
        *(_DWORD *)(v3 + 264) |= 0x8000000u;
        if (*(_QWORD *)(v3 + 136) == v10)
        {
          v46 = (_QWORD *)operator new();
          v46[1] = 0;
          v46[2] = 0;
          *v46 = 0;
          *(_QWORD *)(v3 + 136) = v46;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)this)
          return this;
        v47 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v47 < 2 || *v47 != 210 || v47[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v47 + 2;
LABEL_85:
        *(_DWORD *)(v3 + 264) |= 0x10000000u;
        if (*(_QWORD *)(v3 + 144) == v10)
        {
          v48 = (_QWORD *)operator new();
          v48[1] = 0;
          v48[2] = 0;
          *v48 = 0;
          *(_QWORD *)(v3 + 144) = v48;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)this)
          return this;
        v50 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v49 = *((_QWORD *)a2 + 2);
        if ((int)v49 - (int)v50 < 2 || *v50 != 216 || v50[1] != 1)
          continue;
        v51 = v50 + 2;
        *((_QWORD *)a2 + 1) = v51;
LABEL_94:
        if ((unint64_t)v51 >= v49 || (char)*v51 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)this)
            return this;
          v52 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v49 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v51;
          v52 = v51 + 1;
          *((_QWORD *)a2 + 1) = v52;
        }
        *(_DWORD *)(v3 + 264) |= 0x20000000u;
        if ((int)v49 - (int)v52 < 2 || *v52 != 224 || v52[1] != 1)
          continue;
        v53 = v52 + 2;
        *((_QWORD *)a2 + 1) = v53;
LABEL_162:
        if ((unint64_t)v53 >= v49 || (char)*v53 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v159);
          if (!(_DWORD)this)
            return this;
          v80 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v49 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v159 = *v53;
          v80 = v53 + 1;
          *((_QWORD *)a2 + 1) = v80;
        }
        *(_DWORD *)(v3 + 264) |= 0x40000000u;
        if ((int)v49 - (int)v80 < 2 || *v80 != 232 || v80[1] != 1)
          continue;
        v54 = v80 + 2;
        *((_QWORD *)a2 + 1) = v54;
LABEL_182:
        v161 = 0;
        if ((unint64_t)v54 >= v49 || (char)*v54 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v161);
          if (!(_DWORD)this)
            return this;
          v83 = v161;
          v84 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v49 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v83 = *v54;
          v84 = v54 + 1;
          *((_QWORD *)a2 + 1) = v84;
        }
        *(_BYTE *)(v3 + 188) = v83 != 0;
        *(_DWORD *)(v3 + 264) |= 0x80000000;
        if ((int)v49 - (int)v84 < 2 || *v84 != 240 || v84[1] != 1)
          continue;
        v55 = v84 + 2;
        *((_QWORD *)a2 + 1) = v55;
LABEL_202:
        if ((unint64_t)v55 >= v49 || (char)*v55 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v155);
          if (!(_DWORD)this)
            return this;
          v87 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v49 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v155 = *v55;
          v87 = v55 + 1;
          *((_QWORD *)a2 + 1) = v87;
        }
        *(_DWORD *)(v3 + 268) |= 2u;
        if ((int)v49 - (int)v87 < 2 || *v87 != 248 || v87[1] != 1)
          continue;
        v56 = v87 + 2;
        *((_QWORD *)a2 + 1) = v56;
LABEL_220:
        if ((unint64_t)v56 >= v49 || (char)*v56 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v153);
          if (!(_DWORD)this)
            return this;
          v89 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v49 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v153 = *v56;
          v89 = v56 + 1;
          *((_QWORD *)a2 + 1) = v89;
        }
        *(_DWORD *)(v3 + 268) |= 4u;
        if ((int)v49 - (int)v89 < 2 || *v89 != 128 || v89[1] != 2)
          continue;
        v57 = v89 + 2;
        *((_QWORD *)a2 + 1) = v57;
LABEL_238:
        if ((unint64_t)v57 >= v49 || (char)*v57 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v151);
          if (!(_DWORD)this)
            return this;
          v91 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v49 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v151 = *v57;
          v91 = v57 + 1;
          *((_QWORD *)a2 + 1) = v91;
        }
        v58 = *(_DWORD *)(v3 + 268) | 8;
        *(_DWORD *)(v3 + 268) = v58;
        if ((int)v49 - (int)v91 < 2 || *v91 != 138 || v91[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v91 + 2;
LABEL_109:
        *(_DWORD *)(v3 + 268) = v58 | 0x10;
        if (*(_QWORD *)(v3 + 176) == v10)
        {
          v59 = (_QWORD *)operator new();
          v59[1] = 0;
          v59[2] = 0;
          *v59 = 0;
          *(_QWORD *)(v3 + 176) = v59;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)this)
          return this;
        v60 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v60 < 2 || *v60 != 146)
          continue;
        while (1)
        {
          if (v60[1] != 2)
            goto LABEL_2;
          *((_QWORD *)a2 + 1) = v60 + 2;
LABEL_480:
          v139 = *(_DWORD *)(v3 + 204);
          v140 = *(_DWORD *)(v3 + 200);
          if (v140 >= v139)
          {
            if (v139 == *(_DWORD *)(v3 + 208))
            {
              this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v148);
              v139 = *(_DWORD *)(v3 + 204);
            }
            *(_DWORD *)(v3 + 204) = v139 + 1;
            v141 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)this);
            v142 = *(_QWORD *)(v3 + 192);
            v143 = *(int *)(v3 + 200);
            *(_DWORD *)(v3 + 200) = v143 + 1;
            *(_QWORD *)(v142 + 8 * v143) = v141;
          }
          else
          {
            *(_DWORD *)(v3 + 200) = v140 + 1;
          }
          this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!(_DWORD)this)
            return this;
          v60 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v61 = *((_QWORD *)a2 + 2);
          if ((int)v61 - (int)v60 < 2)
            goto LABEL_2;
          v144 = *v60;
          if (v144 == 152)
            break;
          if (v144 != 146)
            goto LABEL_2;
        }
        if (v60[1] != 2)
          continue;
        v62 = v60 + 2;
        *((_QWORD *)a2 + 1) = v62;
LABEL_492:
        if ((unint64_t)v62 >= v61 || (char)*v62 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v157);
          if (!(_DWORD)this)
            return this;
          v145 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v61 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v157 = *v62;
          v145 = v62 + 1;
          *((_QWORD *)a2 + 1) = v145;
        }
        *(_DWORD *)(v3 + 264) |= 0x10000u;
        if ((int)v61 - (int)v145 < 2 || *v145 != 160 || v145[1] != 2)
          continue;
        v63 = v145 + 2;
        *((_QWORD *)a2 + 1) = v63;
LABEL_501:
        v161 = 0;
        if ((unint64_t)v63 >= v61 || (char)*v63 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v161);
          if (!(_DWORD)this)
            return this;
          v146 = v161;
          v147 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v61 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v146 = *v63;
          v147 = v63 + 1;
          *((_QWORD *)a2 + 1) = v147;
        }
        *(_BYTE *)(v3 + 74) = v146 != 0;
        *(_DWORD *)(v3 + 264) |= 0x20000u;
        if ((int)v61 - (int)v147 < 2 || *v147 != 170 || v147[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v147 + 2;
LABEL_122:
        *(_DWORD *)(v3 + 268) |= 0x40u;
        if (*(_QWORD *)(v3 + 216) == v10)
        {
          v64 = (_QWORD *)operator new();
          v64[1] = 0;
          v64[2] = 0;
          *v64 = 0;
          *(_QWORD *)(v3 + 216) = v64;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)this)
          return this;
        v66 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v65 = *((_QWORD *)a2 + 2);
        if ((int)v65 - (int)v66 < 2 || *v66 != 176 || v66[1] != 2)
          continue;
        v67 = (char *)(v66 + 2);
        *((_QWORD *)a2 + 1) = v67;
LABEL_131:
        v161 = 0;
        if ((unint64_t)v67 >= v65 || *v67 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v161);
          if (!(_DWORD)this)
            return this;
          v68 = v161;
        }
        else
        {
          v68 = *v67;
          *((_QWORD *)a2 + 1) = v67 + 1;
        }
        if (v68 <= 5)
        {
          *(_DWORD *)(v3 + 264) |= 0x1000000u;
          *(_DWORD *)(v3 + 120) = v68;
        }
        v81 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v69 = *((_QWORD *)a2 + 2);
        if ((int)v69 - (int)v81 < 2 || *v81 != 184 || v81[1] != 2)
          continue;
        v70 = (char *)(v81 + 2);
        *((_QWORD *)a2 + 1) = v70;
LABEL_173:
        v161 = 0;
        if ((unint64_t)v70 >= v69 || *v70 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v161);
          if (!(_DWORD)this)
            return this;
          v82 = v161;
        }
        else
        {
          v82 = *v70;
          *((_QWORD *)a2 + 1) = v70 + 1;
        }
        if (v82 <= 2)
        {
          *(_DWORD *)(v3 + 268) |= 1u;
          *(_DWORD *)(v3 + 160) = v82;
        }
        v85 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v71 = *((_QWORD *)a2 + 2);
        if ((int)v71 - (int)v85 < 2 || *v85 != 192 || v85[1] != 2)
          continue;
        v72 = v85 + 2;
        *((_QWORD *)a2 + 1) = v72;
LABEL_193:
        if ((unint64_t)v72 >= v71 || (char)*v72 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v156);
          if (!(_DWORD)this)
            return this;
          v86 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v71 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v156 = *v72;
          v86 = v72 + 1;
          *((_QWORD *)a2 + 1) = v86;
        }
        *(_DWORD *)(v3 + 268) |= 0x80u;
        if ((int)v71 - (int)v86 < 2 || *v86 != 200 || v86[1] != 2)
          continue;
        v73 = v86 + 2;
        *((_QWORD *)a2 + 1) = v73;
LABEL_211:
        if ((unint64_t)v73 >= v71 || (char)*v73 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v154);
          if (!(_DWORD)this)
            return this;
          v88 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v71 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v154 = *v73;
          v88 = v73 + 1;
          *((_QWORD *)a2 + 1) = v88;
        }
        *(_DWORD *)(v3 + 268) |= 0x100u;
        if ((int)v71 - (int)v88 < 2 || *v88 != 208 || v88[1] != 2)
          continue;
        v74 = v88 + 2;
        *((_QWORD *)a2 + 1) = v74;
LABEL_229:
        if ((unint64_t)v74 >= v71 || (char)*v74 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v152);
          if (!(_DWORD)this)
            return this;
          v90 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v71 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v152 = *v74;
          v90 = v74 + 1;
          *((_QWORD *)a2 + 1) = v90;
        }
        *(_DWORD *)(v3 + 268) |= 0x200u;
        if ((int)v71 - (int)v90 < 2 || *v90 != 216 || v90[1] != 2)
          continue;
        v75 = v90 + 2;
        *((_QWORD *)a2 + 1) = v75;
LABEL_247:
        if ((unint64_t)v75 >= v71 || (char)*v75 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v150);
          if (!(_DWORD)this)
            return this;
          v92 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v71 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v150 = *v75;
          v92 = v75 + 1;
          *((_QWORD *)a2 + 1) = v92;
        }
        *(_DWORD *)(v3 + 268) |= 0x400u;
        if ((int)v71 - (int)v92 < 2 || *v92 != 224 || v92[1] != 2)
          continue;
        v76 = v92 + 2;
        *((_QWORD *)a2 + 1) = v76;
LABEL_262:
        if ((unint64_t)v76 >= v71 || (char)*v76 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)this)
            return this;
          v93 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v71 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v76;
          v93 = v76 + 1;
          *((_QWORD *)a2 + 1) = v93;
        }
        *(_DWORD *)(v3 + 268) |= 0x800u;
        if ((int)v71 - (int)v93 < 2 || *v93 != 232 || v93[1] != 2)
          continue;
        v77 = v93 + 2;
        *((_QWORD *)a2 + 1) = v77;
LABEL_271:
        if ((unint64_t)v77 >= v71 || (char)*v77 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)this)
            return this;
          v94 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v71 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v77;
          v94 = v77 + 1;
          *((_QWORD *)a2 + 1) = v94;
        }
        *(_DWORD *)(v3 + 268) |= 0x1000u;
        if ((int)v71 - (int)v94 < 2 || *v94 != 240 || v94[1] != 2)
          continue;
        v78 = v94 + 2;
        *((_QWORD *)a2 + 1) = v78;
LABEL_280:
        v161 = 0;
        if ((unint64_t)v78 >= v71 || (char)*v78 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v161);
          if (!(_DWORD)this)
            return this;
          v95 = v161;
          v96 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v71 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v95 = *v78;
          v96 = v78 + 1;
          *((_QWORD *)a2 + 1) = v96;
        }
        *(_BYTE *)(v3 + 189) = v95 != 0;
        *(_DWORD *)(v3 + 268) |= 0x2000u;
        if ((int)v71 - (int)v96 < 2 || *v96 != 240 || v96[1] != 34)
          continue;
        v79 = v96 + 2;
        *((_QWORD *)a2 + 1) = v79;
        goto LABEL_289;
      case 3u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        goto LABEL_309;
      case 4u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        goto LABEL_317;
      case 5u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v25 = (char *)*((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        goto LABEL_327;
      case 6u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v26 = (char *)*((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        goto LABEL_335;
      case 7u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        goto LABEL_343;
      case 8u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v28 = (char *)*((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        goto LABEL_351;
      case 9u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v29 = (char *)*((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        goto LABEL_359;
      case 0xAu:
        v14 = v12 & 7;
        if (v14 == 2)
          goto LABEL_373;
        goto LABEL_153;
      case 0xBu:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v31 = (char *)*((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        goto LABEL_379;
      case 0xCu:
        v14 = v12 & 7;
        if (v14 != 2)
          goto LABEL_153;
        v32 = *(_DWORD *)(v3 + 264);
        goto LABEL_387;
      case 0xDu:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v34 = (char *)*((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        goto LABEL_393;
      case 0xEu:
        v14 = v12 & 7;
        if (v14 != 2)
          goto LABEL_153;
        v35 = *(_DWORD *)(v3 + 264);
        goto LABEL_401;
      case 0xFu:
        v14 = v12 & 7;
        if (v14 == 2)
          goto LABEL_407;
        goto LABEL_153;
      case 0x10u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v37 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v36 = *((_QWORD *)a2 + 2);
        goto LABEL_414;
      case 0x11u:
        v14 = v12 & 7;
        if (v14 != 2)
          goto LABEL_153;
        v38 = *(_DWORD *)(v3 + 264);
        goto LABEL_423;
      case 0x12u:
        v14 = v12 & 7;
        if (v14 == 2)
          goto LABEL_430;
        goto LABEL_153;
      case 0x13u:
        v14 = v12 & 7;
        if (v14 == 2)
          goto LABEL_437;
        goto LABEL_153;
      case 0x14u:
        v14 = v12 & 7;
        if (v14 == 2)
          goto LABEL_444;
        goto LABEL_153;
      case 0x15u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v40 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v39 = *((_QWORD *)a2 + 2);
        goto LABEL_451;
      case 0x16u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v41 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v39 = *((_QWORD *)a2 + 2);
        goto LABEL_460;
      case 0x17u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v42 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v39 = *((_QWORD *)a2 + 2);
        goto LABEL_469;
      case 0x18u:
        v14 = v12 & 7;
        if (v14 != 2)
          goto LABEL_153;
        v43 = *(_DWORD *)(v3 + 264);
        goto LABEL_69;
      case 0x19u:
        v14 = v12 & 7;
        if (v14 == 2)
          goto LABEL_77;
        goto LABEL_153;
      case 0x1Au:
        v14 = v12 & 7;
        if (v14 == 2)
          goto LABEL_85;
        goto LABEL_153;
      case 0x1Bu:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v51 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v49 = *((_QWORD *)a2 + 2);
        goto LABEL_94;
      case 0x1Cu:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v53 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v49 = *((_QWORD *)a2 + 2);
        goto LABEL_162;
      case 0x1Du:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v54 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v49 = *((_QWORD *)a2 + 2);
        goto LABEL_182;
      case 0x1Eu:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v55 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v49 = *((_QWORD *)a2 + 2);
        goto LABEL_202;
      case 0x1Fu:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v56 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v49 = *((_QWORD *)a2 + 2);
        goto LABEL_220;
      case 0x20u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v57 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v49 = *((_QWORD *)a2 + 2);
        goto LABEL_238;
      case 0x21u:
        v14 = v12 & 7;
        if (v14 != 2)
          goto LABEL_153;
        v58 = *(_DWORD *)(v3 + 268);
        goto LABEL_109;
      case 0x22u:
        v14 = v12 & 7;
        if (v14 == 2)
          goto LABEL_480;
        goto LABEL_153;
      case 0x23u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v62 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v61 = *((_QWORD *)a2 + 2);
        goto LABEL_492;
      case 0x24u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v63 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v61 = *((_QWORD *)a2 + 2);
        goto LABEL_501;
      case 0x25u:
        v14 = v12 & 7;
        if (v14 == 2)
          goto LABEL_122;
        goto LABEL_153;
      case 0x26u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v67 = (char *)*((_QWORD *)a2 + 1);
        v65 = *((_QWORD *)a2 + 2);
        goto LABEL_131;
      case 0x27u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v70 = (char *)*((_QWORD *)a2 + 1);
        v69 = *((_QWORD *)a2 + 2);
        goto LABEL_173;
      case 0x28u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v72 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v71 = *((_QWORD *)a2 + 2);
        goto LABEL_193;
      case 0x29u:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v73 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v71 = *((_QWORD *)a2 + 2);
        goto LABEL_211;
      case 0x2Au:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v74 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v71 = *((_QWORD *)a2 + 2);
        goto LABEL_229;
      case 0x2Bu:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v75 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v71 = *((_QWORD *)a2 + 2);
        goto LABEL_247;
      case 0x2Cu:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v76 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v71 = *((_QWORD *)a2 + 2);
        goto LABEL_262;
      case 0x2Du:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v77 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v71 = *((_QWORD *)a2 + 2);
        goto LABEL_271;
      case 0x2Eu:
        v14 = v12 & 7;
        if ((v12 & 7) != 0)
          goto LABEL_153;
        v78 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v71 = *((_QWORD *)a2 + 2);
        goto LABEL_280;
      default:
        if (v13 == 558)
        {
          v14 = v12 & 7;
          if ((v12 & 7) != 0)
            goto LABEL_153;
          v79 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v71 = *((_QWORD *)a2 + 2);
LABEL_289:
          if ((unint64_t)v79 >= v71 || (char)*v79 < 0)
          {
            this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
            if (!(_DWORD)this)
              return this;
            v97 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v71 = *((_QWORD *)a2 + 2);
          }
          else
          {
            *v9 = *v79;
            v97 = v79 + 1;
            *((_QWORD *)a2 + 1) = v97;
          }
          v18 = *(_DWORD *)(v3 + 268) | 0x4000;
          *(_DWORD *)(v3 + 268) = v18;
          if ((int)v71 - (int)v97 >= 2 && *v97 == 250 && v97[1] == 34)
          {
            *((_QWORD *)a2 + 1) = v97 + 2;
            goto LABEL_16;
          }
          continue;
        }
        if (v13 == 559)
        {
          v14 = v12 & 7;
          if (v14 != 2)
            goto LABEL_153;
          v18 = *(_DWORD *)(v3 + 268);
LABEL_16:
          *(_DWORD *)(v3 + 268) = v18 | 0x8000;
          if (*(_QWORD *)(v3 + 248) == v10)
          {
            v19 = (_QWORD *)operator new();
            v19[1] = 0;
            v19[2] = 0;
            *v19 = 0;
            *(_QWORD *)(v3 + 248) = v19;
          }
          this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!(_DWORD)this)
            return this;
          if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            this = 1;
            *((_BYTE *)a2 + 36) = 1;
            return this;
          }
          continue;
        }
        v14 = v12 & 7;
LABEL_153:
        if (v14 != 4)
        {
          this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, v12);
          if ((this & 1) == 0)
            return 0;
          continue;
        }
        return 1;
    }
  }
}

uint64_t awd::metrics::ATM_CallAttemptEvent::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  v5 = this;
  v6 = *(_DWORD *)(this + 264);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 264);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_59;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_60;
  }
LABEL_59:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_61;
  }
LABEL_60:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_62;
  }
LABEL_61:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_63;
  }
LABEL_62:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 30), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_64;
  }
LABEL_63:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 31), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_65;
  }
LABEL_64:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 72), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_66;
  }
LABEL_65:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_67;
  }
LABEL_66:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_68;
  }
LABEL_67:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_69;
  }
LABEL_68:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_70;
  }
LABEL_69:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned __int8 *)(v5 + 73), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_71;
  }
LABEL_70:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_72;
  }
LABEL_71:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_73;
  }
LABEL_72:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x40000) == 0)
  {
LABEL_18:
    if ((v6 & 0x80000) == 0)
      goto LABEL_19;
    goto LABEL_74;
  }
LABEL_73:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x80000) == 0)
  {
LABEL_19:
    if ((v6 & 0x100000) == 0)
      goto LABEL_20;
    goto LABEL_75;
  }
LABEL_74:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x100000) == 0)
  {
LABEL_20:
    if ((v6 & 0x200000) == 0)
      goto LABEL_21;
    goto LABEL_76;
  }
LABEL_75:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x200000) == 0)
  {
LABEL_21:
    if ((v6 & 0x400000) == 0)
      goto LABEL_22;
    goto LABEL_77;
  }
LABEL_76:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x400000) == 0)
  {
LABEL_22:
    if ((v6 & 0x800000) == 0)
      goto LABEL_23;
    goto LABEL_78;
  }
LABEL_77:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned __int8 *)(v5 + 75), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x800000) == 0)
  {
LABEL_23:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_24;
    goto LABEL_79;
  }
LABEL_78:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(unsigned int *)(v5 + 100), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_80;
  }
LABEL_79:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, *(unsigned int *)(v5 + 124), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_26;
    goto LABEL_81;
  }
LABEL_80:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_27;
    goto LABEL_82;
  }
LABEL_81:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_28;
    goto LABEL_83;
  }
LABEL_82:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_29;
LABEL_84:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, *(unsigned int *)(v5 + 156), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 264) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_85;
  }
LABEL_83:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, *(unsigned int *)(v5 + 152), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x40000000) != 0)
    goto LABEL_84;
LABEL_29:
  if ((v6 & 0x80000000) == 0)
    goto LABEL_30;
LABEL_85:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, *(unsigned __int8 *)(v5 + 188), (uint64_t)a2, a4);
LABEL_30:
  v7 = *(_DWORD *)(v5 + 268);
  if ((v7 & 2) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, *(unsigned int *)(v5 + 164), (uint64_t)a2, a4);
    v7 = *(_DWORD *)(v5 + 268);
    if ((v7 & 4) == 0)
    {
LABEL_32:
      if ((v7 & 8) == 0)
        goto LABEL_33;
      goto LABEL_88;
    }
  }
  else if ((v7 & 4) == 0)
  {
    goto LABEL_32;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F, *(unsigned int *)(v5 + 184), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 268);
  if ((v7 & 8) == 0)
  {
LABEL_33:
    if ((v7 & 0x10) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_88:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20, *(_QWORD *)(v5 + 168), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 268) & 0x10) != 0)
LABEL_34:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
LABEL_35:
  if (*(int *)(v5 + 200) >= 1)
  {
    v8 = 0;
    do
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
      ++v8;
    }
    while (v8 < *(int *)(v5 + 200));
  }
  v9 = *(_DWORD *)(v5 + 264);
  if ((v9 & 0x10000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23, *(unsigned int *)(v5 + 96), (uint64_t)a2, a4);
    v9 = *(_DWORD *)(v5 + 264);
  }
  if ((v9 & 0x20000) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x24, *(unsigned __int8 *)(v5 + 74), (uint64_t)a2, a4);
  if ((*(_BYTE *)(v5 + 268) & 0x40) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if ((*(_BYTE *)(v5 + 267) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x26, *(unsigned int *)(v5 + 120), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x27, *(unsigned int *)(v5 + 160), (uint64_t)a2, a4);
    v10 = *(_DWORD *)(v5 + 268);
    if ((v10 & 0x80) == 0)
    {
LABEL_48:
      if ((v10 & 0x100) == 0)
        goto LABEL_49;
      goto LABEL_92;
    }
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_48;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x28, *(unsigned int *)(v5 + 224), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 0x100) == 0)
  {
LABEL_49:
    if ((v10 & 0x200) == 0)
      goto LABEL_50;
    goto LABEL_93;
  }
LABEL_92:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x29, *(unsigned int *)(v5 + 228), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 0x200) == 0)
  {
LABEL_50:
    if ((v10 & 0x400) == 0)
      goto LABEL_51;
    goto LABEL_94;
  }
LABEL_93:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2A, *(unsigned int *)(v5 + 232), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 0x400) == 0)
  {
LABEL_51:
    if ((v10 & 0x800) == 0)
      goto LABEL_52;
    goto LABEL_95;
  }
LABEL_94:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2B, *(unsigned int *)(v5 + 236), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 0x800) == 0)
  {
LABEL_52:
    if ((v10 & 0x1000) == 0)
      goto LABEL_53;
    goto LABEL_96;
  }
LABEL_95:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2C, *(unsigned int *)(v5 + 240), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 0x1000) == 0)
  {
LABEL_53:
    if ((v10 & 0x2000) == 0)
      goto LABEL_54;
    goto LABEL_97;
  }
LABEL_96:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2D, *(unsigned int *)(v5 + 244), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 0x2000) == 0)
  {
LABEL_54:
    if ((v10 & 0x4000) == 0)
      goto LABEL_55;
    goto LABEL_98;
  }
LABEL_97:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2E, *(unsigned __int8 *)(v5 + 189), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 0x4000) == 0)
  {
LABEL_55:
    if ((v10 & 0x8000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
LABEL_98:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22E, *(unsigned int *)(v5 + 256), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 268) & 0x8000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::metrics::ATM_CallAttemptEvent::ByteSize(awd::metrics::ATM_CallAttemptEvent *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v42;
  int v43;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v44;
  int v45;
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v70;
  int v71;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v72;
  int v73;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v74;
  int v75;
  uint64_t v76;
  int v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v94;
  int v95;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v96;
  int v97;
  int v98;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v99;
  int v100;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v101;
  int v102;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v103;
  int v104;
  uint64_t v105;
  int v106;
  char v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  char v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v117;
  int v118;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v119;
  int v120;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v121;
  int v122;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v123;
  int v124;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v125;
  int v126;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v127;
  int v128;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v129;
  int v130;
  uint64_t v131;
  int v132;
  char v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t i;
  uint64_t v140;
  int v141;
  char v142;
  uint64_t v143;
  unint64_t v144;
  int v145;

  v2 = *((_DWORD *)this + 66);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_34;
  }
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_16;
LABEL_7:
    v5 = *((_QWORD *)this + 2);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = v8;
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v8 = *(_QWORD *)(v5 + 8);
      v2 = *((_DWORD *)this + 66);
      v7 = *(_BYTE *)(v5 + 23);
    }
    else
    {
      v10 = 1;
    }
    if (v7 < 0)
      v6 = v8;
    v3 += v10 + v6 + 1;
    goto LABEL_16;
  }
  v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 1))
     + 1;
  v2 = *((_DWORD *)this + 66);
  if ((v2 & 2) != 0)
    goto LABEL_7;
LABEL_16:
  if ((v2 & 4) != 0)
    v3 += 2;
  if ((v2 & 8) != 0)
  {
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v11 & 0x80000000) != 0)
    {
      v12 = 10;
    }
    else if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
      v2 = *((_DWORD *)this + 66);
    }
    else
    {
      v12 = 1;
    }
    v3 += v12 + 1;
  }
  v13 = v3 + 2;
  if ((v2 & 0x10) == 0)
    v13 = v3;
  if ((v2 & 0x20) != 0)
    v13 += 2;
  if ((v2 & 0x40) != 0)
    v13 += 2;
  if ((v2 & 0x80) != 0)
    v4 = v13 + 2;
  else
    v4 = v13;
LABEL_34:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_96;
  if ((v2 & 0x100) != 0)
  {
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if ((v14 & 0x80000000) != 0)
    {
      v15 = 10;
    }
    else if (v14 >= 0x80)
    {
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      v2 = *((_DWORD *)this + 66);
    }
    else
    {
      v15 = 1;
    }
    v4 += v15 + 1;
    if ((v2 & 0x200) == 0)
    {
LABEL_37:
      if ((v2 & 0x400) == 0)
        goto LABEL_38;
LABEL_55:
      v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
      if (v22 >= 0x80)
      {
        v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
        v2 = *((_DWORD *)this + 66);
      }
      else
      {
        v23 = 1;
      }
      v4 += v23 + 1;
      if ((v2 & 0x800) == 0)
        goto LABEL_68;
      goto LABEL_59;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_37;
  }
  v16 = *((_QWORD *)this + 5);
  v17 = *(unsigned __int8 *)(v16 + 23);
  v18 = v17;
  v19 = *(_QWORD *)(v16 + 8);
  if ((v17 & 0x80u) == 0)
    v20 = *(unsigned __int8 *)(v16 + 23);
  else
    v20 = v19;
  if (v20 >= 0x80)
  {
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20);
    v17 = *(unsigned __int8 *)(v16 + 23);
    v19 = *(_QWORD *)(v16 + 8);
    v2 = *((_DWORD *)this + 66);
    v18 = *(_BYTE *)(v16 + 23);
  }
  else
  {
    v21 = 1;
  }
  if (v18 < 0)
    v17 = v19;
  v4 += v21 + v17 + 1;
  if ((v2 & 0x400) != 0)
    goto LABEL_55;
LABEL_38:
  if ((v2 & 0x800) == 0)
    goto LABEL_68;
LABEL_59:
  v24 = *((_QWORD *)this + 6);
  v25 = *(unsigned __int8 *)(v24 + 23);
  v26 = v25;
  v27 = *(_QWORD *)(v24 + 8);
  if ((v25 & 0x80u) == 0)
    v28 = *(unsigned __int8 *)(v24 + 23);
  else
    v28 = v27;
  if (v28 >= 0x80)
  {
    v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28);
    v25 = *(unsigned __int8 *)(v24 + 23);
    v27 = *(_QWORD *)(v24 + 8);
    v2 = *((_DWORD *)this + 66);
    v26 = *(_BYTE *)(v24 + 23);
  }
  else
  {
    v29 = 1;
  }
  if (v26 < 0)
    v25 = v27;
  v4 += v29 + v25 + 1;
LABEL_68:
  if ((v2 & 0x1000) != 0)
    v4 += 2;
  if ((v2 & 0x2000) != 0)
  {
    v30 = *((_QWORD *)this + 7);
    v31 = *(unsigned __int8 *)(v30 + 23);
    v32 = v31;
    v33 = *(_QWORD *)(v30 + 8);
    if ((v31 & 0x80u) == 0)
      v34 = *(unsigned __int8 *)(v30 + 23);
    else
      v34 = v33;
    if (v34 >= 0x80)
    {
      v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
      v31 = *(unsigned __int8 *)(v30 + 23);
      v33 = *(_QWORD *)(v30 + 8);
      v2 = *((_DWORD *)this + 66);
      v32 = *(_BYTE *)(v30 + 23);
    }
    else
    {
      v35 = 1;
    }
    if (v32 < 0)
      v31 = v33;
    v4 += v35 + v31 + 1;
    if ((v2 & 0x4000) == 0)
    {
LABEL_72:
      if ((v2 & 0x8000) == 0)
        goto LABEL_96;
      goto LABEL_92;
    }
  }
  else if ((v2 & 0x4000) == 0)
  {
    goto LABEL_72;
  }
  v36 = *((_QWORD *)this + 8);
  v37 = *(unsigned __int8 *)(v36 + 23);
  v38 = v37;
  v39 = *(_QWORD *)(v36 + 8);
  if ((v37 & 0x80u) == 0)
    v40 = *(unsigned __int8 *)(v36 + 23);
  else
    v40 = v39;
  if (v40 >= 0x80)
  {
    v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v40);
    v37 = *(unsigned __int8 *)(v36 + 23);
    v39 = *(_QWORD *)(v36 + 8);
    v2 = *((_DWORD *)this + 66);
    v38 = *(_BYTE *)(v36 + 23);
  }
  else
  {
    v41 = 1;
  }
  if (v38 < 0)
    v37 = v39;
  v4 += v41 + v37 + 1;
  if ((v2 & 0x8000) != 0)
  {
LABEL_92:
    v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 19);
    if (v42 >= 0x80)
    {
      v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42);
      v2 = *((_DWORD *)this + 66);
    }
    else
    {
      v43 = 1;
    }
    v4 += v43 + 2;
  }
LABEL_96:
  if ((v2 & 0xFF0000) == 0)
    goto LABEL_152;
  if ((v2 & 0x10000) != 0)
  {
    v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 24);
    if (v44 >= 0x80)
    {
      v45 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v44);
      v2 = *((_DWORD *)this + 66);
    }
    else
    {
      v45 = 1;
    }
    v4 += v45 + 2;
  }
  if ((v2 & 0x20000) != 0)
    v4 += 3;
  if ((v2 & 0x40000) != 0)
  {
    v46 = *((_QWORD *)this + 10);
    v47 = *(unsigned __int8 *)(v46 + 23);
    v48 = v47;
    v49 = *(_QWORD *)(v46 + 8);
    if ((v47 & 0x80u) == 0)
      v50 = *(unsigned __int8 *)(v46 + 23);
    else
      v50 = v49;
    if (v50 >= 0x80)
    {
      v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v50);
      v47 = *(unsigned __int8 *)(v46 + 23);
      v49 = *(_QWORD *)(v46 + 8);
      v2 = *((_DWORD *)this + 66);
      v48 = *(_BYTE *)(v46 + 23);
    }
    else
    {
      v51 = 1;
    }
    if (v48 < 0)
      v47 = v49;
    v4 += v51 + v47 + 2;
    if ((v2 & 0x80000) == 0)
    {
LABEL_106:
      if ((v2 & 0x100000) == 0)
        goto LABEL_107;
LABEL_127:
      v58 = *((_QWORD *)this + 13);
      v59 = *(unsigned __int8 *)(v58 + 23);
      v60 = v59;
      v61 = *(_QWORD *)(v58 + 8);
      if ((v59 & 0x80u) == 0)
        v62 = *(unsigned __int8 *)(v58 + 23);
      else
        v62 = v61;
      if (v62 >= 0x80)
      {
        v63 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v62);
        v59 = *(unsigned __int8 *)(v58 + 23);
        v61 = *(_QWORD *)(v58 + 8);
        v2 = *((_DWORD *)this + 66);
        v60 = *(_BYTE *)(v58 + 23);
      }
      else
      {
        v63 = 1;
      }
      if (v60 < 0)
        v59 = v61;
      v4 += v63 + v59 + 2;
      if ((v2 & 0x200000) == 0)
        goto LABEL_145;
      goto LABEL_136;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_106;
  }
  v52 = *((_QWORD *)this + 11);
  v53 = *(unsigned __int8 *)(v52 + 23);
  v54 = v53;
  v55 = *(_QWORD *)(v52 + 8);
  if ((v53 & 0x80u) == 0)
    v56 = *(unsigned __int8 *)(v52 + 23);
  else
    v56 = v55;
  if (v56 >= 0x80)
  {
    v57 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v56);
    v53 = *(unsigned __int8 *)(v52 + 23);
    v55 = *(_QWORD *)(v52 + 8);
    v2 = *((_DWORD *)this + 66);
    v54 = *(_BYTE *)(v52 + 23);
  }
  else
  {
    v57 = 1;
  }
  if (v54 < 0)
    v53 = v55;
  v4 += v57 + v53 + 2;
  if ((v2 & 0x100000) != 0)
    goto LABEL_127;
LABEL_107:
  if ((v2 & 0x200000) != 0)
  {
LABEL_136:
    v64 = *((_QWORD *)this + 14);
    v65 = *(unsigned __int8 *)(v64 + 23);
    v66 = v65;
    v67 = *(_QWORD *)(v64 + 8);
    if ((v65 & 0x80u) == 0)
      v68 = *(unsigned __int8 *)(v64 + 23);
    else
      v68 = v67;
    if (v68 >= 0x80)
    {
      v69 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v68);
      v65 = *(unsigned __int8 *)(v64 + 23);
      v67 = *(_QWORD *)(v64 + 8);
      v2 = *((_DWORD *)this + 66);
      v66 = *(_BYTE *)(v64 + 23);
    }
    else
    {
      v69 = 1;
    }
    if (v66 < 0)
      v65 = v67;
    v4 += v69 + v65 + 2;
  }
LABEL_145:
  if ((v2 & 0x400000) != 0)
    v4 += 3;
  if ((v2 & 0x800000) != 0)
  {
    v70 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 25);
    if (v70 >= 0x80)
    {
      v71 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v70);
      v2 = *((_DWORD *)this + 66);
    }
    else
    {
      v71 = 1;
    }
    v4 += v71 + 2;
  }
LABEL_152:
  if (!HIBYTE(v2))
    goto LABEL_208;
  if ((v2 & 0x1000000) != 0)
  {
    v72 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 30);
    if ((v72 & 0x80000000) != 0)
    {
      v73 = 10;
    }
    else if (v72 >= 0x80)
    {
      v73 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v72);
      v2 = *((_DWORD *)this + 66);
    }
    else
    {
      v73 = 1;
    }
    v4 += v73 + 2;
    if ((v2 & 0x2000000) == 0)
    {
LABEL_155:
      if ((v2 & 0x4000000) == 0)
        goto LABEL_156;
      goto LABEL_171;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_155;
  }
  v74 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 31);
  if (v74 >= 0x80)
  {
    v75 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v74);
    v2 = *((_DWORD *)this + 66);
  }
  else
  {
    v75 = 1;
  }
  v4 += v75 + 2;
  if ((v2 & 0x4000000) == 0)
  {
LABEL_156:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_157;
    goto LABEL_180;
  }
LABEL_171:
  v76 = *((_QWORD *)this + 16);
  v77 = *(unsigned __int8 *)(v76 + 23);
  v78 = v77;
  v79 = *(_QWORD *)(v76 + 8);
  if ((v77 & 0x80u) == 0)
    v80 = *(unsigned __int8 *)(v76 + 23);
  else
    v80 = v79;
  if (v80 >= 0x80)
  {
    v81 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v80);
    v77 = *(unsigned __int8 *)(v76 + 23);
    v79 = *(_QWORD *)(v76 + 8);
    v2 = *((_DWORD *)this + 66);
    v78 = *(_BYTE *)(v76 + 23);
  }
  else
  {
    v81 = 1;
  }
  if (v78 < 0)
    v77 = v79;
  v4 += v81 + v77 + 2;
  if ((v2 & 0x8000000) == 0)
  {
LABEL_157:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_158;
    goto LABEL_189;
  }
LABEL_180:
  v82 = *((_QWORD *)this + 17);
  v83 = *(unsigned __int8 *)(v82 + 23);
  v84 = v83;
  v85 = *(_QWORD *)(v82 + 8);
  if ((v83 & 0x80u) == 0)
    v86 = *(unsigned __int8 *)(v82 + 23);
  else
    v86 = v85;
  if (v86 >= 0x80)
  {
    v87 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v86);
    v83 = *(unsigned __int8 *)(v82 + 23);
    v85 = *(_QWORD *)(v82 + 8);
    v2 = *((_DWORD *)this + 66);
    v84 = *(_BYTE *)(v82 + 23);
  }
  else
  {
    v87 = 1;
  }
  if (v84 < 0)
    v83 = v85;
  v4 += v87 + v83 + 2;
  if ((v2 & 0x10000000) == 0)
  {
LABEL_158:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_159;
    goto LABEL_198;
  }
LABEL_189:
  v88 = *((_QWORD *)this + 18);
  v89 = *(unsigned __int8 *)(v88 + 23);
  v90 = v89;
  v91 = *(_QWORD *)(v88 + 8);
  if ((v89 & 0x80u) == 0)
    v92 = *(unsigned __int8 *)(v88 + 23);
  else
    v92 = v91;
  if (v92 >= 0x80)
  {
    v93 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v92);
    v89 = *(unsigned __int8 *)(v88 + 23);
    v91 = *(_QWORD *)(v88 + 8);
    v2 = *((_DWORD *)this + 66);
    v90 = *(_BYTE *)(v88 + 23);
  }
  else
  {
    v93 = 1;
  }
  if (v90 < 0)
    v89 = v91;
  v4 += v93 + v89 + 2;
  if ((v2 & 0x20000000) == 0)
  {
LABEL_159:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_206;
    goto LABEL_202;
  }
LABEL_198:
  v94 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 38);
  if (v94 >= 0x80)
  {
    v95 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v94);
    v2 = *((_DWORD *)this + 66);
  }
  else
  {
    v95 = 1;
  }
  v4 += v95 + 2;
  if ((v2 & 0x40000000) != 0)
  {
LABEL_202:
    v96 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 39);
    if (v96 >= 0x80)
    {
      v97 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v96);
      v2 = *((_DWORD *)this + 66);
    }
    else
    {
      v97 = 1;
    }
    v4 += v97 + 2;
  }
LABEL_206:
  if (v2 < 0)
    v4 += 3;
LABEL_208:
  v98 = *((_DWORD *)this + 67);
  if (!(_BYTE)v98)
    goto LABEL_254;
  if ((v98 & 1) != 0)
  {
    v99 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 40);
    if ((v99 & 0x80000000) != 0)
    {
      v100 = 10;
    }
    else if (v99 >= 0x80)
    {
      v100 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v99);
      v98 = *((_DWORD *)this + 67);
    }
    else
    {
      v100 = 1;
    }
    v4 += v100 + 2;
    if ((v98 & 2) == 0)
    {
LABEL_211:
      if ((v98 & 4) == 0)
        goto LABEL_212;
      goto LABEL_227;
    }
  }
  else if ((v98 & 2) == 0)
  {
    goto LABEL_211;
  }
  v101 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 41);
  if (v101 >= 0x80)
  {
    v102 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v101);
    v98 = *((_DWORD *)this + 67);
  }
  else
  {
    v102 = 1;
  }
  v4 += v102 + 2;
  if ((v98 & 4) == 0)
  {
LABEL_212:
    if ((v98 & 8) == 0)
      goto LABEL_213;
    goto LABEL_231;
  }
LABEL_227:
  v103 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 46);
  if (v103 >= 0x80)
  {
    v104 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v103);
    v98 = *((_DWORD *)this + 67);
  }
  else
  {
    v104 = 1;
  }
  v4 += v104 + 2;
  if ((v98 & 8) == 0)
  {
LABEL_213:
    if ((v98 & 0x10) == 0)
      goto LABEL_214;
    goto LABEL_232;
  }
LABEL_231:
  v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 21))
      + 2;
  v98 = *((_DWORD *)this + 67);
  if ((v98 & 0x10) == 0)
  {
LABEL_214:
    if ((v98 & 0x40) == 0)
      goto LABEL_215;
    goto LABEL_241;
  }
LABEL_232:
  v105 = *((_QWORD *)this + 22);
  v106 = *(unsigned __int8 *)(v105 + 23);
  v107 = v106;
  v108 = *(_QWORD *)(v105 + 8);
  if ((v106 & 0x80u) == 0)
    v109 = *(unsigned __int8 *)(v105 + 23);
  else
    v109 = v108;
  if (v109 >= 0x80)
  {
    v110 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v109);
    v106 = *(unsigned __int8 *)(v105 + 23);
    v108 = *(_QWORD *)(v105 + 8);
    v98 = *((_DWORD *)this + 67);
    v107 = *(_BYTE *)(v105 + 23);
  }
  else
  {
    v110 = 1;
  }
  if (v107 < 0)
    v106 = v108;
  v4 += v110 + v106 + 2;
  if ((v98 & 0x40) == 0)
  {
LABEL_215:
    if ((v98 & 0x80) == 0)
      goto LABEL_254;
    goto LABEL_250;
  }
LABEL_241:
  v111 = *((_QWORD *)this + 27);
  v112 = *(unsigned __int8 *)(v111 + 23);
  v113 = v112;
  v114 = *(_QWORD *)(v111 + 8);
  if ((v112 & 0x80u) == 0)
    v115 = *(unsigned __int8 *)(v111 + 23);
  else
    v115 = v114;
  if (v115 >= 0x80)
  {
    v116 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v115);
    v112 = *(unsigned __int8 *)(v111 + 23);
    v114 = *(_QWORD *)(v111 + 8);
    v98 = *((_DWORD *)this + 67);
    v113 = *(_BYTE *)(v111 + 23);
  }
  else
  {
    v116 = 1;
  }
  if (v113 < 0)
    v112 = v114;
  v4 += v116 + v112 + 2;
  if ((v98 & 0x80) != 0)
  {
LABEL_250:
    v117 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 56);
    if (v117 >= 0x80)
    {
      v118 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v117);
      v98 = *((_DWORD *)this + 67);
    }
    else
    {
      v118 = 1;
    }
    v4 += v118 + 2;
  }
LABEL_254:
  if ((v98 & 0xFF00) == 0)
    goto LABEL_298;
  if ((v98 & 0x100) != 0)
  {
    v119 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 57);
    if (v119 >= 0x80)
    {
      v120 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v119) + 2;
      v98 = *((_DWORD *)this + 67);
    }
    else
    {
      v120 = 3;
    }
    v4 += v120;
    if ((v98 & 0x200) == 0)
    {
LABEL_257:
      if ((v98 & 0x400) == 0)
        goto LABEL_258;
      goto LABEL_269;
    }
  }
  else if ((v98 & 0x200) == 0)
  {
    goto LABEL_257;
  }
  v121 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 58);
  if (v121 >= 0x80)
  {
    v122 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v121) + 2;
    v98 = *((_DWORD *)this + 67);
  }
  else
  {
    v122 = 3;
  }
  v4 += v122;
  if ((v98 & 0x400) == 0)
  {
LABEL_258:
    if ((v98 & 0x800) == 0)
      goto LABEL_259;
LABEL_273:
    v125 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 60);
    if (v125 >= 0x80)
    {
      v126 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v125) + 2;
      v98 = *((_DWORD *)this + 67);
    }
    else
    {
      v126 = 3;
    }
    v4 += v126;
    if ((v98 & 0x1000) == 0)
      goto LABEL_281;
    goto LABEL_277;
  }
LABEL_269:
  v123 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 59);
  if (v123 >= 0x80)
  {
    v124 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v123) + 2;
    v98 = *((_DWORD *)this + 67);
  }
  else
  {
    v124 = 3;
  }
  v4 += v124;
  if ((v98 & 0x800) != 0)
    goto LABEL_273;
LABEL_259:
  if ((v98 & 0x1000) != 0)
  {
LABEL_277:
    v127 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 61);
    if (v127 >= 0x80)
    {
      v128 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v127) + 2;
      v98 = *((_DWORD *)this + 67);
    }
    else
    {
      v128 = 3;
    }
    v4 += v128;
  }
LABEL_281:
  if ((v98 & 0x2000) != 0)
    v4 += 3;
  if ((v98 & 0x4000) != 0)
  {
    v129 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 64);
    if (v129 >= 0x80)
    {
      v130 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v129) + 2;
      v98 = *((_DWORD *)this + 67);
    }
    else
    {
      v130 = 3;
    }
    v4 += v130;
  }
  if ((v98 & 0x8000) != 0)
  {
    v131 = *((_QWORD *)this + 31);
    v132 = *(unsigned __int8 *)(v131 + 23);
    v133 = v132;
    v134 = *(_QWORD *)(v131 + 8);
    if ((v132 & 0x80u) == 0)
      v135 = *(unsigned __int8 *)(v131 + 23);
    else
      v135 = v134;
    if (v135 >= 0x80)
    {
      v136 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v135);
      v132 = *(unsigned __int8 *)(v131 + 23);
      v134 = *(_QWORD *)(v131 + 8);
      v133 = *(_BYTE *)(v131 + 23);
    }
    else
    {
      v136 = 1;
    }
    if (v133 < 0)
      v132 = v134;
    v4 += v136 + v132 + 2;
  }
LABEL_298:
  v137 = *((_DWORD *)this + 50);
  v138 = (v4 + 2 * v137);
  if (v137 >= 1)
  {
    for (i = 0; i < v137; ++i)
    {
      v140 = *(_QWORD *)(*((_QWORD *)this + 24) + 8 * i);
      v141 = *(unsigned __int8 *)(v140 + 23);
      v142 = v141;
      v143 = *(_QWORD *)(v140 + 8);
      if ((v141 & 0x80u) == 0)
        v144 = *(unsigned __int8 *)(v140 + 23);
      else
        v144 = v143;
      if (v144 >= 0x80)
      {
        v145 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v144);
        v141 = *(unsigned __int8 *)(v140 + 23);
        v143 = *(_QWORD *)(v140 + 8);
        v137 = *((_DWORD *)this + 50);
        v142 = *(_BYTE *)(v140 + 23);
      }
      else
      {
        v145 = 1;
      }
      if (v142 < 0)
        v141 = v143;
      v138 = (v145 + v138 + v141);
    }
  }
  *((_DWORD *)this + 65) = v138;
  return v138;
}

std::string *awd::metrics::ATM_CallAttemptEvent::CheckTypeAndMergeFrom(awd::metrics::ATM_CallAttemptEvent *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  std::string *result;
  uint64_t v5;
  const std::string *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  const std::string *v23;
  std::string *v24;
  char v25;
  int v26;
  char v27;
  char v28;
  char v29;
  int v30;
  char v31;
  const std::string *v32;
  std::string *v33;
  const std::string *v34;
  std::string *v35;
  const std::string *v36;
  std::string *v37;
  const std::string *v38;
  std::string *v39;
  char v40;
  const std::string *v41;
  std::string *v42;
  int v43;
  const std::string *v44;
  std::string *v45;
  char v46;
  const std::string *v47;
  std::string *v48;
  const std::string *v49;
  std::string *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  char v56;
  int v57;
  const std::string *v58;
  std::string *v59;
  int v60;
  int v61;
  uint64_t v62;
  const std::string *v63;
  std::string *v64;
  const std::string *v65;
  std::string *v66;
  int v67;
  const std::string *v68;
  std::string *v69;
  const std::string *v70;
  std::string *v71;
  const std::string *v72;
  std::string *v73;
  int v74;
  int v75;
  char v76;
  _BYTE v77[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v77);
  }
  result = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::ATM_CallAttemptEvent *)((char *)this + 192));
  if (*((int *)lpsrc + 50) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(const std::string **)(*((_QWORD *)lpsrc + 24) + 8 * v5);
      v7 = *((_DWORD *)this + 51);
      v8 = *((int *)this + 50);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 52))
        {
          result = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::ATM_CallAttemptEvent *)((char *)this + 192));
          v7 = *((_DWORD *)this + 51);
        }
        *((_DWORD *)this + 51) = v7 + 1;
        v10 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
        v11 = *((_QWORD *)this + 24);
        v12 = *((int *)this + 50);
        *((_DWORD *)this + 50) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *((_QWORD *)this + 24);
        *((_DWORD *)this + 50) = v8 + 1;
        v10 = *(std::string **)(v9 + 8 * v8);
      }
      result = std::string::operator=(v10, v6);
      ++v5;
    }
    while (v5 < *((int *)lpsrc + 50));
  }
  v13 = *((_DWORD *)lpsrc + 66);
  if (!(_BYTE)v13)
    goto LABEL_22;
  if ((v13 & 1) != 0)
  {
    v22 = *((_QWORD *)lpsrc + 1);
    *((_DWORD *)this + 66) |= 1u;
    *((_QWORD *)this + 1) = v22;
    v13 = *((_DWORD *)lpsrc + 66);
    if ((v13 & 2) == 0)
    {
LABEL_15:
      if ((v13 & 4) == 0)
        goto LABEL_16;
      goto LABEL_80;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_15;
  }
  v23 = (const std::string *)*((_QWORD *)lpsrc + 2);
  *((_DWORD *)this + 66) |= 2u;
  v24 = (std::string *)*((_QWORD *)this + 2);
  if (v24 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v24 = (std::string *)operator new();
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 2) = v24;
  }
  result = std::string::operator=(v24, v23);
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 4) == 0)
  {
LABEL_16:
    if ((v13 & 8) == 0)
      goto LABEL_17;
    goto LABEL_81;
  }
LABEL_80:
  v25 = *((_BYTE *)lpsrc + 28);
  *((_DWORD *)this + 66) |= 4u;
  *((_BYTE *)this + 28) = v25;
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 8) == 0)
  {
LABEL_17:
    if ((v13 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_83;
  }
LABEL_81:
  v26 = *((_DWORD *)lpsrc + 6);
  if ((v26 + 1) >= 8)
    __assert_rtn("set_type", "CATM.pb.h", 8940, "::awd::metrics::enum_ATM_call_type_IsValid(value)");
  *((_DWORD *)this + 66) |= 8u;
  *((_DWORD *)this + 6) = v26;
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x10) == 0)
  {
LABEL_18:
    if ((v13 & 0x20) == 0)
      goto LABEL_19;
LABEL_84:
    v28 = *((_BYTE *)lpsrc + 30);
    *((_DWORD *)this + 66) |= 0x20u;
    *((_BYTE *)this + 30) = v28;
    v13 = *((_DWORD *)lpsrc + 66);
    if ((v13 & 0x40) == 0)
    {
LABEL_20:
      if ((v13 & 0x80) == 0)
        goto LABEL_22;
      goto LABEL_21;
    }
    goto LABEL_85;
  }
LABEL_83:
  v27 = *((_BYTE *)lpsrc + 29);
  *((_DWORD *)this + 66) |= 0x10u;
  *((_BYTE *)this + 29) = v27;
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x20) != 0)
    goto LABEL_84;
LABEL_19:
  if ((v13 & 0x40) == 0)
    goto LABEL_20;
LABEL_85:
  v29 = *((_BYTE *)lpsrc + 31);
  *((_DWORD *)this + 66) |= 0x40u;
  *((_BYTE *)this + 31) = v29;
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x80) != 0)
  {
LABEL_21:
    v14 = *((_BYTE *)lpsrc + 72);
    *((_DWORD *)this + 66) |= 0x80u;
    *((_BYTE *)this + 72) = v14;
    v13 = *((_DWORD *)lpsrc + 66);
  }
LABEL_22:
  if ((v13 & 0xFF00) == 0)
    goto LABEL_34;
  if ((v13 & 0x100) != 0)
  {
    v15 = *((_DWORD *)lpsrc + 8);
    if ((v15 - 1) >= 6 && v15 != -1)
      __assert_rtn("set_invite_type", "CATM.pb.h", 9051, "::awd::metrics::enum_ATM_invite_call_type_IsValid(value)");
    *((_DWORD *)this + 66) |= 0x100u;
    *((_DWORD *)this + 8) = v15;
    v13 = *((_DWORD *)lpsrc + 66);
  }
  if ((v13 & 0x200) != 0)
  {
    v41 = (const std::string *)*((_QWORD *)lpsrc + 5);
    *((_DWORD *)this + 66) |= 0x200u;
    v42 = (std::string *)*((_QWORD *)this + 5);
    if (v42 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v42 = (std::string *)operator new();
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 5) = v42;
    }
    result = std::string::operator=(v42, v41);
    v13 = *((_DWORD *)lpsrc + 66);
    if ((v13 & 0x400) == 0)
    {
LABEL_28:
      if ((v13 & 0x800) == 0)
        goto LABEL_29;
      goto LABEL_107;
    }
  }
  else if ((v13 & 0x400) == 0)
  {
    goto LABEL_28;
  }
  v43 = *((_DWORD *)lpsrc + 9);
  *((_DWORD *)this + 66) |= 0x400u;
  *((_DWORD *)this + 9) = v43;
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x800) == 0)
  {
LABEL_29:
    if ((v13 & 0x1000) == 0)
      goto LABEL_30;
    goto LABEL_110;
  }
LABEL_107:
  v44 = (const std::string *)*((_QWORD *)lpsrc + 6);
  *((_DWORD *)this + 66) |= 0x800u;
  v45 = (std::string *)*((_QWORD *)this + 6);
  if (v45 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v45 = (std::string *)operator new();
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 6) = v45;
  }
  result = std::string::operator=(v45, v44);
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x1000) == 0)
  {
LABEL_30:
    if ((v13 & 0x2000) == 0)
      goto LABEL_31;
    goto LABEL_111;
  }
LABEL_110:
  v46 = *((_BYTE *)lpsrc + 73);
  *((_DWORD *)this + 66) |= 0x1000u;
  *((_BYTE *)this + 73) = v46;
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x2000) == 0)
  {
LABEL_31:
    if ((v13 & 0x4000) == 0)
      goto LABEL_32;
    goto LABEL_114;
  }
LABEL_111:
  v47 = (const std::string *)*((_QWORD *)lpsrc + 7);
  *((_DWORD *)this + 66) |= 0x2000u;
  v48 = (std::string *)*((_QWORD *)this + 7);
  if (v48 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v48 = (std::string *)operator new();
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 7) = v48;
  }
  result = std::string::operator=(v48, v47);
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x4000) == 0)
  {
LABEL_32:
    if ((v13 & 0x8000) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
LABEL_114:
  v49 = (const std::string *)*((_QWORD *)lpsrc + 8);
  *((_DWORD *)this + 66) |= 0x4000u;
  v50 = (std::string *)*((_QWORD *)this + 8);
  if (v50 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v50 = (std::string *)operator new();
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 8) = v50;
  }
  result = std::string::operator=(v50, v49);
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x8000) != 0)
  {
LABEL_33:
    v16 = *((_DWORD *)lpsrc + 19);
    *((_DWORD *)this + 66) |= 0x8000u;
    *((_DWORD *)this + 19) = v16;
    v13 = *((_DWORD *)lpsrc + 66);
  }
LABEL_34:
  if ((v13 & 0xFF0000) == 0)
    goto LABEL_44;
  if ((v13 & 0x10000) != 0)
  {
    v30 = *((_DWORD *)lpsrc + 24);
    *((_DWORD *)this + 66) |= 0x10000u;
    *((_DWORD *)this + 24) = v30;
    v13 = *((_DWORD *)lpsrc + 66);
    if ((v13 & 0x20000) == 0)
    {
LABEL_37:
      if ((v13 & 0x40000) == 0)
        goto LABEL_38;
      goto LABEL_89;
    }
  }
  else if ((v13 & 0x20000) == 0)
  {
    goto LABEL_37;
  }
  v31 = *((_BYTE *)lpsrc + 74);
  *((_DWORD *)this + 66) |= 0x20000u;
  *((_BYTE *)this + 74) = v31;
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x40000) == 0)
  {
LABEL_38:
    if ((v13 & 0x80000) == 0)
      goto LABEL_39;
    goto LABEL_92;
  }
LABEL_89:
  v32 = (const std::string *)*((_QWORD *)lpsrc + 10);
  *((_DWORD *)this + 66) |= 0x40000u;
  v33 = (std::string *)*((_QWORD *)this + 10);
  if (v33 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v33 = (std::string *)operator new();
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 10) = v33;
  }
  result = std::string::operator=(v33, v32);
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x80000) == 0)
  {
LABEL_39:
    if ((v13 & 0x100000) == 0)
      goto LABEL_40;
    goto LABEL_95;
  }
LABEL_92:
  v34 = (const std::string *)*((_QWORD *)lpsrc + 11);
  *((_DWORD *)this + 66) |= 0x80000u;
  v35 = (std::string *)*((_QWORD *)this + 11);
  if (v35 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v35 = (std::string *)operator new();
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 11) = v35;
  }
  result = std::string::operator=(v35, v34);
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x100000) == 0)
  {
LABEL_40:
    if ((v13 & 0x200000) == 0)
      goto LABEL_41;
    goto LABEL_98;
  }
LABEL_95:
  v36 = (const std::string *)*((_QWORD *)lpsrc + 13);
  *((_DWORD *)this + 66) |= 0x100000u;
  v37 = (std::string *)*((_QWORD *)this + 13);
  if (v37 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v37 = (std::string *)operator new();
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 13) = v37;
  }
  result = std::string::operator=(v37, v36);
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x200000) == 0)
  {
LABEL_41:
    if ((v13 & 0x400000) == 0)
      goto LABEL_42;
    goto LABEL_101;
  }
LABEL_98:
  v38 = (const std::string *)*((_QWORD *)lpsrc + 14);
  *((_DWORD *)this + 66) |= 0x200000u;
  v39 = (std::string *)*((_QWORD *)this + 14);
  if (v39 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v39 = (std::string *)operator new();
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 14) = v39;
  }
  result = std::string::operator=(v39, v38);
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x400000) == 0)
  {
LABEL_42:
    if ((v13 & 0x800000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_101:
  v40 = *((_BYTE *)lpsrc + 75);
  *((_DWORD *)this + 66) |= 0x400000u;
  *((_BYTE *)this + 75) = v40;
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x800000) != 0)
  {
LABEL_43:
    v17 = *((_DWORD *)lpsrc + 25);
    *((_DWORD *)this + 66) |= 0x800000u;
    *((_DWORD *)this + 25) = v17;
    v13 = *((_DWORD *)lpsrc + 66);
  }
LABEL_44:
  if (!HIBYTE(v13))
    goto LABEL_55;
  if ((v13 & 0x1000000) != 0)
  {
    v18 = *((_DWORD *)lpsrc + 30);
    if (v18 >= 6)
      __assert_rtn("set_codec", "CATM.pb.h", 9788, "::awd::metrics::enum_codec_type_IsValid(value)");
    *((_DWORD *)this + 66) |= 0x1000000u;
    *((_DWORD *)this + 30) = v18;
    v13 = *((_DWORD *)lpsrc + 66);
  }
  if ((v13 & 0x2000000) != 0)
  {
    v67 = *((_DWORD *)lpsrc + 31);
    *((_DWORD *)this + 66) |= 0x2000000u;
    *((_DWORD *)this + 31) = v67;
    v13 = *((_DWORD *)lpsrc + 66);
    if ((v13 & 0x4000000) == 0)
    {
LABEL_50:
      if ((v13 & 0x8000000) == 0)
        goto LABEL_51;
      goto LABEL_143;
    }
  }
  else if ((v13 & 0x4000000) == 0)
  {
    goto LABEL_50;
  }
  v68 = (const std::string *)*((_QWORD *)lpsrc + 16);
  *((_DWORD *)this + 66) |= 0x4000000u;
  v69 = (std::string *)*((_QWORD *)this + 16);
  if (v69 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v69 = (std::string *)operator new();
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 16) = v69;
  }
  result = std::string::operator=(v69, v68);
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x8000000) == 0)
  {
LABEL_51:
    if ((v13 & 0x10000000) == 0)
      goto LABEL_52;
    goto LABEL_146;
  }
LABEL_143:
  v70 = (const std::string *)*((_QWORD *)lpsrc + 17);
  *((_DWORD *)this + 66) |= 0x8000000u;
  v71 = (std::string *)*((_QWORD *)this + 17);
  if (v71 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v71 = (std::string *)operator new();
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 17) = v71;
  }
  result = std::string::operator=(v71, v70);
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x10000000) == 0)
  {
LABEL_52:
    if ((v13 & 0x20000000) == 0)
      goto LABEL_53;
    goto LABEL_149;
  }
LABEL_146:
  v72 = (const std::string *)*((_QWORD *)lpsrc + 18);
  *((_DWORD *)this + 66) |= 0x10000000u;
  v73 = (std::string *)*((_QWORD *)this + 18);
  if (v73 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v73 = (std::string *)operator new();
    v73->__r_.__value_.__l.__size_ = 0;
    v73->__r_.__value_.__r.__words[2] = 0;
    v73->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 18) = v73;
  }
  result = std::string::operator=(v73, v72);
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x20000000) == 0)
  {
LABEL_53:
    if ((v13 & 0x40000000) == 0)
      goto LABEL_54;
LABEL_150:
    v75 = *((_DWORD *)lpsrc + 39);
    *((_DWORD *)this + 66) |= 0x40000000u;
    *((_DWORD *)this + 39) = v75;
    if ((*((_DWORD *)lpsrc + 66) & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_151;
  }
LABEL_149:
  v74 = *((_DWORD *)lpsrc + 38);
  *((_DWORD *)this + 66) |= 0x20000000u;
  *((_DWORD *)this + 38) = v74;
  v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x40000000) != 0)
    goto LABEL_150;
LABEL_54:
  if ((v13 & 0x80000000) == 0)
    goto LABEL_55;
LABEL_151:
  v76 = *((_BYTE *)lpsrc + 188);
  *((_DWORD *)this + 66) |= 0x80000000;
  *((_BYTE *)this + 188) = v76;
LABEL_55:
  v19 = *((_DWORD *)lpsrc + 67);
  if (!(_BYTE)v19)
    goto LABEL_66;
  if ((v19 & 1) != 0)
  {
    v20 = *((_DWORD *)lpsrc + 40);
    if (v20 >= 3)
      __assert_rtn("set_amr_format", "CATM.pb.h", 10109, "::awd::metrics::enum_codec_format_IsValid(value)");
    *((_DWORD *)this + 67) |= 1u;
    *((_DWORD *)this + 40) = v20;
    v19 = *((_DWORD *)lpsrc + 67);
  }
  if ((v19 & 2) != 0)
  {
    v60 = *((_DWORD *)lpsrc + 41);
    *((_DWORD *)this + 67) |= 2u;
    *((_DWORD *)this + 41) = v60;
    v19 = *((_DWORD *)lpsrc + 67);
    if ((v19 & 4) == 0)
    {
LABEL_61:
      if ((v19 & 8) == 0)
        goto LABEL_62;
      goto LABEL_131;
    }
  }
  else if ((v19 & 4) == 0)
  {
    goto LABEL_61;
  }
  v61 = *((_DWORD *)lpsrc + 46);
  *((_DWORD *)this + 67) |= 4u;
  *((_DWORD *)this + 46) = v61;
  v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 8) == 0)
  {
LABEL_62:
    if ((v19 & 0x10) == 0)
      goto LABEL_63;
    goto LABEL_132;
  }
LABEL_131:
  v62 = *((_QWORD *)lpsrc + 21);
  *((_DWORD *)this + 67) |= 8u;
  *((_QWORD *)this + 21) = v62;
  v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x10) == 0)
  {
LABEL_63:
    if ((v19 & 0x40) == 0)
      goto LABEL_64;
    goto LABEL_135;
  }
LABEL_132:
  v63 = (const std::string *)*((_QWORD *)lpsrc + 22);
  *((_DWORD *)this + 67) |= 0x10u;
  v64 = (std::string *)*((_QWORD *)this + 22);
  if (v64 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v64 = (std::string *)operator new();
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 22) = v64;
  }
  result = std::string::operator=(v64, v63);
  v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x40) == 0)
  {
LABEL_64:
    if ((v19 & 0x80) == 0)
      goto LABEL_66;
    goto LABEL_65;
  }
LABEL_135:
  v65 = (const std::string *)*((_QWORD *)lpsrc + 27);
  *((_DWORD *)this + 67) |= 0x40u;
  v66 = (std::string *)*((_QWORD *)this + 27);
  if (v66 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v66 = (std::string *)operator new();
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 27) = v66;
  }
  result = std::string::operator=(v66, v65);
  v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x80) != 0)
  {
LABEL_65:
    v21 = *((_DWORD *)lpsrc + 56);
    *((_DWORD *)this + 67) |= 0x80u;
    *((_DWORD *)this + 56) = v21;
    v19 = *((_DWORD *)lpsrc + 67);
  }
LABEL_66:
  if ((v19 & 0xFF00) == 0)
    return result;
  if ((v19 & 0x100) != 0)
  {
    v51 = *((_DWORD *)lpsrc + 57);
    *((_DWORD *)this + 67) |= 0x100u;
    *((_DWORD *)this + 57) = v51;
    v19 = *((_DWORD *)lpsrc + 67);
    if ((v19 & 0x200) == 0)
    {
LABEL_69:
      if ((v19 & 0x400) == 0)
        goto LABEL_70;
      goto LABEL_120;
    }
  }
  else if ((v19 & 0x200) == 0)
  {
    goto LABEL_69;
  }
  v52 = *((_DWORD *)lpsrc + 58);
  *((_DWORD *)this + 67) |= 0x200u;
  *((_DWORD *)this + 58) = v52;
  v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x400) == 0)
  {
LABEL_70:
    if ((v19 & 0x800) == 0)
      goto LABEL_71;
    goto LABEL_121;
  }
LABEL_120:
  v53 = *((_DWORD *)lpsrc + 59);
  *((_DWORD *)this + 67) |= 0x400u;
  *((_DWORD *)this + 59) = v53;
  v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x800) == 0)
  {
LABEL_71:
    if ((v19 & 0x1000) == 0)
      goto LABEL_72;
    goto LABEL_122;
  }
LABEL_121:
  v54 = *((_DWORD *)lpsrc + 60);
  *((_DWORD *)this + 67) |= 0x800u;
  *((_DWORD *)this + 60) = v54;
  v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x1000) == 0)
  {
LABEL_72:
    if ((v19 & 0x2000) == 0)
      goto LABEL_73;
    goto LABEL_123;
  }
LABEL_122:
  v55 = *((_DWORD *)lpsrc + 61);
  *((_DWORD *)this + 67) |= 0x1000u;
  *((_DWORD *)this + 61) = v55;
  v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x2000) == 0)
  {
LABEL_73:
    if ((v19 & 0x4000) == 0)
      goto LABEL_74;
LABEL_124:
    v57 = *((_DWORD *)lpsrc + 64);
    *((_DWORD *)this + 67) |= 0x4000u;
    *((_DWORD *)this + 64) = v57;
    if ((*((_DWORD *)lpsrc + 67) & 0x8000) == 0)
      return result;
    goto LABEL_125;
  }
LABEL_123:
  v56 = *((_BYTE *)lpsrc + 189);
  *((_DWORD *)this + 67) |= 0x2000u;
  *((_BYTE *)this + 189) = v56;
  v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x4000) != 0)
    goto LABEL_124;
LABEL_74:
  if ((v19 & 0x8000) == 0)
    return result;
LABEL_125:
  v58 = (const std::string *)*((_QWORD *)lpsrc + 31);
  *((_DWORD *)this + 67) |= 0x8000u;
  v59 = (std::string *)*((_QWORD *)this + 31);
  if (v59 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v59 = (std::string *)operator new();
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 31) = v59;
  }
  return std::string::operator=(v59, v58);
}

void sub_1BEE80DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::ATM_CallAttemptEvent::IsInitialized(awd::metrics::ATM_CallAttemptEvent *this)
{
  return 1;
}

_QWORD *awd::metrics::ATM_CallAttemptEvent::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_CallAttemptEvent");
}

double awd::metrics::ATM_CallConnectEvent::SharedCtor(awd::metrics::ATM_CallConnectEvent *this)
{
  uint64_t v1;
  double result;

  *((_DWORD *)this + 58) = 0;
  v1 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v1;
  *((_QWORD *)this + 3) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 4) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 5) = v1;
  *((_QWORD *)this + 6) = v1;
  *((_QWORD *)this + 7) = v1;
  *((_QWORD *)this + 8) = v1;
  result = 0.0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = v1;
  *((_QWORD *)this + 11) = v1;
  *((_QWORD *)this + 13) = v1;
  *((_QWORD *)this + 14) = v1;
  *((_QWORD *)this + 15) = v1;
  *((_QWORD *)this + 16) = v1;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_WORD *)this + 98) = 0;
  *((_QWORD *)this + 18) = v1;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = v1;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 48) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = v1;
  *(_QWORD *)((char *)this + 236) = 0;
  return result;
}

_QWORD *awd::metrics::ATM_CallConnectEvent::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = this;
  v2 = this[2];
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x1C3B87100](v2, 0x1012C40EC159624);
  }
  v5 = v1[5];
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (_QWORD *)MEMORY[0x1C3B87100](v5, 0x1012C40EC159624);
  }
  v7 = v1[6];
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (_QWORD *)MEMORY[0x1C3B87100](v7, 0x1012C40EC159624);
  }
  v9 = v1[7];
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    this = (_QWORD *)MEMORY[0x1C3B87100](v9, 0x1012C40EC159624);
  }
  v11 = v1[8];
  if (v11 != v3 && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    this = (_QWORD *)MEMORY[0x1C3B87100](v11, 0x1012C40EC159624);
  }
  v12 = v1[10];
  if (v12 != v3 && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    this = (_QWORD *)MEMORY[0x1C3B87100](v12, 0x1012C40EC159624);
  }
  v13 = v1[11];
  if (v13 != v3 && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    this = (_QWORD *)MEMORY[0x1C3B87100](v13, 0x1012C40EC159624);
  }
  v14 = v1[13];
  if (v14 != v3 && v14)
  {
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    this = (_QWORD *)MEMORY[0x1C3B87100](v14, 0x1012C40EC159624);
  }
  v15 = v1[14];
  if (v15 != v3 && v15)
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    this = (_QWORD *)MEMORY[0x1C3B87100](v15, 0x1012C40EC159624);
  }
  v16 = v1[15];
  if (v16 != v3 && v16)
  {
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
    this = (_QWORD *)MEMORY[0x1C3B87100](v16, 0x1012C40EC159624);
  }
  v17 = v1[16];
  if (v17 != v3 && v17)
  {
    if (*(char *)(v17 + 23) < 0)
      operator delete(*(void **)v17);
    this = (_QWORD *)MEMORY[0x1C3B87100](v17, 0x1012C40EC159624);
  }
  v18 = v1[18];
  if (v18 != v3 && v18)
  {
    if (*(char *)(v18 + 23) < 0)
      operator delete(*(void **)v18);
    this = (_QWORD *)MEMORY[0x1C3B87100](v18, 0x1012C40EC159624);
  }
  v19 = v1[22];
  if (v19 != v3 && v19)
  {
    if (*(char *)(v19 + 23) < 0)
      operator delete(*(void **)v19);
    this = (_QWORD *)MEMORY[0x1C3B87100](v19, 0x1012C40EC159624);
  }
  v20 = v1[28];
  if (v20 != v3 && v20)
  {
    if (*(char *)(v20 + 23) < 0)
      operator delete(*(void **)v20);
    JUMPOUT(0x1C3B87100);
  }
  return this;
}

void awd::metrics::ATM_CallConnectEvent::~ATM_CallConnectEvent(awd::metrics::ATM_CallConnectEvent *this)
{
  *(_QWORD *)this = &off_1E78BF1F8;
  awd::metrics::ATM_CallConnectEvent::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF1F8;
  awd::metrics::ATM_CallConnectEvent::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

awd::metrics::ATM_CallConnectEvent *awd::metrics::ATM_CallConnectEvent::New(awd::metrics::ATM_CallConnectEvent *this)
{
  awd::metrics::ATM_CallConnectEvent *v1;

  v1 = (awd::metrics::ATM_CallConnectEvent *)operator new();
  *(_QWORD *)v1 = &off_1E78BF1F8;
  awd::metrics::ATM_CallConnectEvent::SharedCtor(v1);
  return v1;
}

uint64_t awd::metrics::ATM_CallConnectEvent::Clear(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_DWORD *)(this + 236);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(this + 8) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(this + 16);
      if (v2 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(this + 24) = 0xFFFFFFFFLL;
    *(_BYTE *)(this + 96) = 0;
    v1 = *(_DWORD *)(this + 236);
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_DWORD *)(this + 32) = -1;
    if ((v1 & 0x200) != 0)
    {
      v3 = *(_QWORD *)(this + 40);
      if (v3 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 36) = 0;
    if ((*(_BYTE *)(this + 237) & 8) != 0)
    {
      v4 = *(_QWORD *)(this + 48);
      if (v4 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(this + 97) = 0;
    if ((*(_BYTE *)(this + 237) & 0x20) != 0)
    {
      v5 = *(_QWORD *)(this + 56);
      if (v5 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 237) & 0x40) != 0)
    {
      v6 = *(_QWORD *)(this + 64);
      if (v6 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 72) = 0;
    v1 = *(_DWORD *)(this + 236);
  }
  if ((v1 & 0xFF0000) != 0)
  {
    *(_DWORD *)(this + 76) = 0;
    if ((v1 & 0x20000) != 0)
    {
      v7 = *(_QWORD *)(this + 80);
      if (v7 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 238) & 4) != 0)
    {
      v8 = *(_QWORD *)(this + 88);
      if (v8 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(_BYTE **)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v8 = 0;
          *(_BYTE *)(v8 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 238) & 8) != 0)
    {
      v9 = *(_QWORD *)(this + 104);
      if (v9 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v9 + 23) < 0)
        {
          **(_BYTE **)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v9 = 0;
          *(_BYTE *)(v9 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 238) & 0x10) != 0)
    {
      v10 = *(_QWORD *)(this + 112);
      if (v10 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(_BYTE **)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v10 = 0;
          *(_BYTE *)(v10 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(this + 98) = 0;
    *(_DWORD *)(this + 100) = 0;
    *(_DWORD *)(this + 136) = 0;
    v1 = *(_DWORD *)(this + 236);
  }
  if (HIBYTE(v1))
  {
    if ((v1 & 0x1000000) != 0)
    {
      v11 = *(_QWORD *)(this + 120);
      if (v11 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(_BYTE **)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v11 = 0;
          *(_BYTE *)(v11 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 239) & 2) != 0)
    {
      v12 = *(_QWORD *)(this + 128);
      if (v12 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v12 + 23) < 0)
        {
          **(_BYTE **)v12 = 0;
          *(_QWORD *)(v12 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v12 = 0;
          *(_BYTE *)(v12 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 239) & 4) != 0)
    {
      v13 = *(_QWORD *)(this + 144);
      if (v13 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v13 + 23) < 0)
        {
          **(_BYTE **)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v13 = 0;
          *(_BYTE *)(v13 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 140) = 0;
    *(_BYTE *)(this + 99) = 0;
    *(_QWORD *)(this + 152) = 0;
    *(_DWORD *)(this + 168) = 0;
  }
  v14 = *(_DWORD *)(this + 240);
  if ((_BYTE)v14)
  {
    *(_QWORD *)(this + 160) = 0;
    *(_DWORD *)(this + 172) = 0;
    *(_BYTE *)(this + 196) = 0;
    if ((v14 & 8) != 0)
    {
      v15 = *(_QWORD *)(this + 176);
      if (v15 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v15 + 23) < 0)
        {
          **(_BYTE **)v15 = 0;
          *(_QWORD *)(v15 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v15 = 0;
          *(_BYTE *)(v15 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(this + 184) = 0;
    *(_DWORD *)(this + 192) = 0;
    *(_DWORD *)(this + 200) = 0;
    v14 = *(_DWORD *)(this + 240);
  }
  if ((v14 & 0xFF00) != 0)
  {
    *(_BYTE *)(this + 197) = 0;
    *(_QWORD *)(this + 212) = 0;
    *(_QWORD *)(this + 204) = 0;
    *(_DWORD *)(this + 220) = 0;
    if ((v14 & 0x4000) != 0)
    {
      v16 = *(_QWORD *)(this + 224);
      if (v16 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v16 + 23) < 0)
        {
          **(_BYTE **)v16 = 0;
          *(_QWORD *)(v16 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v16 = 0;
          *(_BYTE *)(v16 + 23) = 0;
        }
      }
    }
  }
  *(_QWORD *)(this + 236) = 0;
  return this;
}

uint64_t awd::metrics::ATM_CallConnectEvent::MergePartialFromCodedStream(awd::metrics::ATM_CallConnectEvent *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  char *v11;
  uint64_t TagFallback;
  unsigned int v13;
  int v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  int v18;
  _QWORD *v19;
  uint64_t result;
  int v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  int v33;
  unint64_t v34;
  char *v35;
  int v36;
  unint64_t v37;
  unsigned __int8 *v38;
  int v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  int v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  _QWORD *v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  int v62;
  _QWORD *v63;
  unint64_t v64;
  unsigned __int8 *v65;
  char *v66;
  unsigned int v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  unsigned int v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  unsigned int v97;
  unsigned __int8 *v98;
  unsigned int v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  _QWORD *v102;
  _BYTE *v103;
  unsigned int v104;
  _BYTE *v105;
  unsigned int v106;
  _BYTE *v107;
  unsigned int v108;
  _BYTE *v109;
  unsigned int v110;
  _BYTE *v111;
  unsigned int v112;
  _BYTE *v113;
  unsigned int v114;
  _BYTE *v115;
  unsigned int v116;
  _BYTE *v118;
  _QWORD *v119;
  _BYTE *v120;
  _BYTE *v121;
  _QWORD *v122;
  _BYTE *v123;
  unsigned int v124;
  _BYTE *v125;
  _QWORD *v126;
  _BYTE *v127;
  _QWORD *v128;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  _QWORD *v131;
  unsigned __int8 *v132;
  _QWORD *v133;
  unsigned __int8 *v134;
  _QWORD *v135;
  unsigned __int8 *v136;
  _QWORD *v137;
  unsigned __int8 *v138;
  unsigned int v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  unint64_t *v143;
  unsigned int *v144;
  unsigned int *v145;
  unint64_t *v146;
  unsigned int *v147;
  unsigned int *v148;
  unsigned int *v149;
  unsigned int *v150;
  unsigned int *v151;
  unsigned int *v152;
  unsigned int *v153;
  unsigned int *v154;
  unsigned int v155;

  v143 = (unint64_t *)((char *)this + 8);
  v4 = (unsigned int *)((char *)this + 36);
  v5 = (unsigned int *)((char *)this + 72);
  v6 = (unsigned int *)((char *)this + 140);
  v153 = (unsigned int *)((char *)this + 152);
  v154 = (unsigned int *)((char *)this + 100);
  v146 = (unint64_t *)((char *)this + 160);
  v145 = (unsigned int *)((char *)this + 76);
  v151 = (unsigned int *)((char *)this + 192);
  v152 = (unsigned int *)((char *)this + 136);
  v149 = (unsigned int *)((char *)this + 200);
  v150 = (unsigned int *)((char *)this + 156);
  v147 = (unsigned int *)((char *)this + 204);
  v148 = (unsigned int *)((char *)this + 168);
  v144 = (unsigned int *)((char *)this + 208);
  v7 = (unsigned int *)((char *)this + 212);
  v8 = (unsigned int *)((char *)this + 216);
  v9 = (unsigned int *)((char *)this + 220);
  v10 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v11;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    v13 = TagFallback >> 3;
    switch(TagFallback >> 3)
    {
      case 1u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v143);
          if (!(_DWORD)result)
            return result;
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v143 = *v16;
          v17 = v16 + 1;
          *((_QWORD *)a2 + 1) = v17;
        }
        v21 = *((_DWORD *)this + 59) | 1;
        *((_DWORD *)this + 59) = v21;
        if ((unint64_t)v17 < v15 && *v17 == 18)
        {
          *((_QWORD *)a2 + 1) = v17 + 1;
          goto LABEL_323;
        }
        continue;
      case 2u:
        v14 = TagFallback & 7;
        if (v14 != 2)
          goto LABEL_146;
        v21 = *((_DWORD *)this + 59);
LABEL_323:
        *((_DWORD *)this + 59) = v21 | 2;
        if (*((_QWORD *)this + 2) == v10)
        {
          v102 = (_QWORD *)operator new();
          v102[1] = 0;
          v102[2] = 0;
          *v102 = 0;
          *((_QWORD *)this + 2) = v102;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v103 = (_BYTE *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v103 >= v22 || *v103 != 24)
          continue;
        v23 = v103 + 1;
        *((_QWORD *)a2 + 1) = v23;
LABEL_329:
        v155 = 0;
        if ((unint64_t)v23 >= v22 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v104 = v155;
          v105 = (_BYTE *)*((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v104 = *v23;
          v105 = v23 + 1;
          *((_QWORD *)a2 + 1) = v105;
        }
        *((_BYTE *)this + 28) = v104 != 0;
        *((_DWORD *)this + 59) |= 4u;
        if ((unint64_t)v105 >= v22 || *v105 != 32)
          continue;
        v24 = v105 + 1;
        *((_QWORD *)a2 + 1) = v24;
LABEL_337:
        v155 = 0;
        if ((unint64_t)v24 >= v22 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v106 = v155;
        }
        else
        {
          v106 = *v24;
          *((_QWORD *)a2 + 1) = v24 + 1;
        }
        if (v106 + 1 <= 7)
        {
          *((_DWORD *)this + 59) |= 8u;
          *((_DWORD *)this + 6) = v106;
        }
        v107 = (_BYTE *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v107 >= v25 || *v107 != 40)
          continue;
        v26 = v107 + 1;
        *((_QWORD *)a2 + 1) = v26;
LABEL_347:
        v155 = 0;
        if ((unint64_t)v26 >= v25 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v108 = v155;
          v109 = (_BYTE *)*((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v108 = *v26;
          v109 = v26 + 1;
          *((_QWORD *)a2 + 1) = v109;
        }
        *((_BYTE *)this + 29) = v108 != 0;
        *((_DWORD *)this + 59) |= 0x10u;
        if ((unint64_t)v109 >= v25 || *v109 != 48)
          continue;
        v27 = v109 + 1;
        *((_QWORD *)a2 + 1) = v27;
LABEL_355:
        v155 = 0;
        if ((unint64_t)v27 >= v25 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v110 = v155;
          v111 = (_BYTE *)*((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v110 = *v27;
          v111 = v27 + 1;
          *((_QWORD *)a2 + 1) = v111;
        }
        *((_BYTE *)this + 30) = v110 != 0;
        *((_DWORD *)this + 59) |= 0x20u;
        if ((unint64_t)v111 >= v25 || *v111 != 56)
          continue;
        v28 = v111 + 1;
        *((_QWORD *)a2 + 1) = v28;
LABEL_363:
        v155 = 0;
        if ((unint64_t)v28 >= v25 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v112 = v155;
          v113 = (_BYTE *)*((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v112 = *v28;
          v113 = v28 + 1;
          *((_QWORD *)a2 + 1) = v113;
        }
        *((_BYTE *)this + 31) = v112 != 0;
        *((_DWORD *)this + 59) |= 0x40u;
        if ((unint64_t)v113 >= v25 || *v113 != 64)
          continue;
        v29 = v113 + 1;
        *((_QWORD *)a2 + 1) = v29;
LABEL_371:
        v155 = 0;
        if ((unint64_t)v29 >= v25 || *v29 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v114 = v155;
          v115 = (_BYTE *)*((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v114 = *v29;
          v115 = v29 + 1;
          *((_QWORD *)a2 + 1) = v115;
        }
        *((_BYTE *)this + 96) = v114 != 0;
        *((_DWORD *)this + 59) |= 0x80u;
        if ((unint64_t)v115 >= v25 || *v115 != 72)
          continue;
        v30 = v115 + 1;
        *((_QWORD *)a2 + 1) = v30;
LABEL_379:
        v155 = 0;
        if ((unint64_t)v30 >= v25 || *v30 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v116 = v155;
        }
        else
        {
          v116 = *v30;
          *((_QWORD *)a2 + 1) = v30 + 1;
        }
        if (v116 - 1 < 6 || v116 == -1)
        {
          *((_DWORD *)this + 59) |= 0x100u;
          *((_DWORD *)this + 8) = v116;
        }
        v118 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v118 >= *((_QWORD *)a2 + 2) || *v118 != 82)
          continue;
        *((_QWORD *)a2 + 1) = v118 + 1;
LABEL_393:
        *((_DWORD *)this + 59) |= 0x200u;
        if (*((_QWORD *)this + 5) == v10)
        {
          v119 = (_QWORD *)operator new();
          v119[1] = 0;
          v119[2] = 0;
          *v119 = 0;
          *((_QWORD *)this + 5) = v119;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v120 = (_BYTE *)*((_QWORD *)a2 + 1);
        v31 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v120 >= v31 || *v120 != 88)
          continue;
        v32 = v120 + 1;
        *((_QWORD *)a2 + 1) = v32;
LABEL_399:
        if ((unint64_t)v32 >= v31 || *v32 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v121 = (_BYTE *)*((_QWORD *)a2 + 1);
          v31 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v32;
          v121 = v32 + 1;
          *((_QWORD *)a2 + 1) = v121;
        }
        v33 = *((_DWORD *)this + 59) | 0x400;
        *((_DWORD *)this + 59) = v33;
        if ((unint64_t)v121 >= v31 || *v121 != 98)
          continue;
        *((_QWORD *)a2 + 1) = v121 + 1;
LABEL_407:
        *((_DWORD *)this + 59) = v33 | 0x800;
        if (*((_QWORD *)this + 6) == v10)
        {
          v122 = (_QWORD *)operator new();
          v122[1] = 0;
          v122[2] = 0;
          *v122 = 0;
          *((_QWORD *)this + 6) = v122;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v123 = (_BYTE *)*((_QWORD *)a2 + 1);
        v34 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v123 >= v34 || *v123 != 104)
          continue;
        v35 = v123 + 1;
        *((_QWORD *)a2 + 1) = v35;
LABEL_413:
        v155 = 0;
        if ((unint64_t)v35 >= v34 || *v35 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v124 = v155;
          v125 = (_BYTE *)*((_QWORD *)a2 + 1);
          v34 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v124 = *v35;
          v125 = v35 + 1;
          *((_QWORD *)a2 + 1) = v125;
        }
        *((_BYTE *)this + 97) = v124 != 0;
        v36 = *((_DWORD *)this + 59) | 0x1000;
        *((_DWORD *)this + 59) = v36;
        if ((unint64_t)v125 >= v34 || *v125 != 114)
          continue;
        *((_QWORD *)a2 + 1) = v125 + 1;
LABEL_421:
        *((_DWORD *)this + 59) = v36 | 0x2000;
        if (*((_QWORD *)this + 7) == v10)
        {
          v126 = (_QWORD *)operator new();
          v126[1] = 0;
          v126[2] = 0;
          *v126 = 0;
          *((_QWORD *)this + 7) = v126;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v127 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v127 >= *((_QWORD *)a2 + 2) || *v127 != 122)
          continue;
        *((_QWORD *)a2 + 1) = v127 + 1;
LABEL_427:
        *((_DWORD *)this + 59) |= 0x4000u;
        if (*((_QWORD *)this + 8) == v10)
        {
          v128 = (_QWORD *)operator new();
          v128[1] = 0;
          v128[2] = 0;
          *v128 = 0;
          *((_QWORD *)this + 8) = v128;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v129 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v37 = *((_QWORD *)a2 + 2);
        if ((int)v37 - (int)v129 < 2 || *v129 != 128 || v129[1] != 1)
          continue;
        v38 = v129 + 2;
        *((_QWORD *)a2 + 1) = v38;
LABEL_434:
        if ((unint64_t)v38 >= v37 || (char)*v38 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v130 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v37 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v38;
          v130 = v38 + 1;
          *((_QWORD *)a2 + 1) = v130;
        }
        v39 = *((_DWORD *)this + 59) | 0x8000;
        *((_DWORD *)this + 59) = v39;
        if ((int)v37 - (int)v130 < 2 || *v130 != 138 || v130[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v130 + 2;
LABEL_443:
        *((_DWORD *)this + 59) = v39 | 0x20000;
        if (*((_QWORD *)this + 10) == v10)
        {
          v131 = (_QWORD *)operator new();
          v131[1] = 0;
          v131[2] = 0;
          *v131 = 0;
          *((_QWORD *)this + 10) = v131;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v132 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v132 < 2 || *v132 != 146 || v132[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v132 + 2;
LABEL_450:
        *((_DWORD *)this + 59) |= 0x40000u;
        if (*((_QWORD *)this + 11) == v10)
        {
          v133 = (_QWORD *)operator new();
          v133[1] = 0;
          v133[2] = 0;
          *v133 = 0;
          *((_QWORD *)this + 11) = v133;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v134 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v134 < 2 || *v134 != 154 || v134[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v134 + 2;
LABEL_457:
        *((_DWORD *)this + 59) |= 0x80000u;
        if (*((_QWORD *)this + 13) == v10)
        {
          v135 = (_QWORD *)operator new();
          v135[1] = 0;
          v135[2] = 0;
          *v135 = 0;
          *((_QWORD *)this + 13) = v135;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v136 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v136 < 2 || *v136 != 162 || v136[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v136 + 2;
LABEL_464:
        *((_DWORD *)this + 59) |= 0x100000u;
        if (*((_QWORD *)this + 14) == v10)
        {
          v137 = (_QWORD *)operator new();
          v137[1] = 0;
          v137[2] = 0;
          *v137 = 0;
          *((_QWORD *)this + 14) = v137;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v138 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v40 = *((_QWORD *)a2 + 2);
        if ((int)v40 - (int)v138 < 2 || *v138 != 168 || v138[1] != 1)
          continue;
        v41 = v138 + 2;
        *((_QWORD *)a2 + 1) = v41;
LABEL_471:
        v155 = 0;
        if ((unint64_t)v41 >= v40 || (char)*v41 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v139 = v155;
          v140 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v40 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v139 = *v41;
          v140 = v41 + 1;
          *((_QWORD *)a2 + 1) = v140;
        }
        *((_BYTE *)this + 98) = v139 != 0;
        *((_DWORD *)this + 59) |= 0x200000u;
        if ((int)v40 - (int)v140 < 2 || *v140 != 176 || v140[1] != 1)
          continue;
        v42 = v140 + 2;
        *((_QWORD *)a2 + 1) = v42;
LABEL_480:
        if ((unint64_t)v42 >= v40 || (char)*v42 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v154);
          if (!(_DWORD)result)
            return result;
          v141 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v40 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v154 = *v42;
          v141 = v42 + 1;
          *((_QWORD *)a2 + 1) = v141;
        }
        *((_DWORD *)this + 59) |= 0x400000u;
        if ((int)v40 - (int)v141 < 2 || *v141 != 184 || v141[1] != 1)
          continue;
        v43 = v141 + 2;
        *((_QWORD *)a2 + 1) = v43;
LABEL_489:
        if ((unint64_t)v43 >= v40 || (char)*v43 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v152);
          if (!(_DWORD)result)
            return result;
          v142 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v40 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v152 = *v43;
          v142 = v43 + 1;
          *((_QWORD *)a2 + 1) = v142;
        }
        v44 = *((_DWORD *)this + 59) | 0x800000;
        *((_DWORD *)this + 59) = v44;
        if ((int)v40 - (int)v142 < 2 || *v142 != 194 || v142[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v142 + 2;
LABEL_69:
        *((_DWORD *)this + 59) = v44 | 0x1000000;
        if (*((_QWORD *)this + 15) == v10)
        {
          v45 = (_QWORD *)operator new();
          v45[1] = 0;
          v45[2] = 0;
          *v45 = 0;
          *((_QWORD *)this + 15) = v45;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v46 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v46 < 2 || *v46 != 202 || v46[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v46 + 2;
LABEL_77:
        *((_DWORD *)this + 59) |= 0x2000000u;
        if (*((_QWORD *)this + 16) == v10)
        {
          v47 = (_QWORD *)operator new();
          v47[1] = 0;
          v47[2] = 0;
          *v47 = 0;
          *((_QWORD *)this + 16) = v47;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v48 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v48 < 2 || *v48 != 210 || v48[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v48 + 2;
LABEL_85:
        *((_DWORD *)this + 59) |= 0x4000000u;
        if (*((_QWORD *)this + 18) == v10)
        {
          v49 = (_QWORD *)operator new();
          v49[1] = 0;
          v49[2] = 0;
          *v49 = 0;
          *((_QWORD *)this + 18) = v49;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v51 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v50 = *((_QWORD *)a2 + 2);
        if ((int)v50 - (int)v51 < 2 || *v51 != 216 || v51[1] != 1)
          continue;
        v52 = v51 + 2;
        *((_QWORD *)a2 + 1) = v52;
LABEL_94:
        if ((unint64_t)v52 >= v50 || (char)*v52 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v53 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v50 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v52;
          v53 = v52 + 1;
          *((_QWORD *)a2 + 1) = v53;
        }
        *((_DWORD *)this + 59) |= 0x8000000u;
        if ((int)v50 - (int)v53 < 2 || *v53 != 224 || v53[1] != 1)
          continue;
        v54 = v53 + 2;
        *((_QWORD *)a2 + 1) = v54;
LABEL_155:
        if ((unint64_t)v54 >= v50 || (char)*v54 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v153);
          if (!(_DWORD)result)
            return result;
          v79 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v50 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v153 = *v54;
          v79 = v54 + 1;
          *((_QWORD *)a2 + 1) = v79;
        }
        *((_DWORD *)this + 59) |= 0x10000000u;
        if ((int)v50 - (int)v79 < 2 || *v79 != 232 || v79[1] != 1)
          continue;
        v55 = v79 + 2;
        *((_QWORD *)a2 + 1) = v55;
LABEL_175:
        v155 = 0;
        if ((unint64_t)v55 >= v50 || (char)*v55 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v82 = v155;
          v83 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v50 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v82 = *v55;
          v83 = v55 + 1;
          *((_QWORD *)a2 + 1) = v83;
        }
        *((_BYTE *)this + 99) = v82 != 0;
        *((_DWORD *)this + 59) |= 0x20000000u;
        if ((int)v50 - (int)v83 < 2 || *v83 != 240 || v83[1] != 1)
          continue;
        v56 = v83 + 2;
        *((_QWORD *)a2 + 1) = v56;
LABEL_195:
        if ((unint64_t)v56 >= v50 || (char)*v56 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v150);
          if (!(_DWORD)result)
            return result;
          v86 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v50 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v150 = *v56;
          v86 = v56 + 1;
          *((_QWORD *)a2 + 1) = v86;
        }
        *((_DWORD *)this + 59) |= 0x40000000u;
        if ((int)v50 - (int)v86 < 2 || *v86 != 248 || v86[1] != 1)
          continue;
        v57 = v86 + 2;
        *((_QWORD *)a2 + 1) = v57;
LABEL_213:
        if ((unint64_t)v57 >= v50 || (char)*v57 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v148);
          if (!(_DWORD)result)
            return result;
          v88 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v50 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v148 = *v57;
          v88 = v57 + 1;
          *((_QWORD *)a2 + 1) = v88;
        }
        *((_DWORD *)this + 59) |= 0x80000000;
        if ((int)v50 - (int)v88 < 2 || *v88 != 128 || v88[1] != 2)
          continue;
        v58 = v88 + 2;
        *((_QWORD *)a2 + 1) = v58;
LABEL_231:
        if ((unint64_t)v58 >= v50 || (char)*v58 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v146);
          if (!(_DWORD)result)
            return result;
          v90 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v50 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v146 = *v58;
          v90 = v58 + 1;
          *((_QWORD *)a2 + 1) = v90;
        }
        *((_DWORD *)this + 60) |= 1u;
        if ((int)v50 - (int)v90 < 2 || *v90 != 136 || v90[1] != 2)
          continue;
        v59 = v90 + 2;
        *((_QWORD *)a2 + 1) = v59;
LABEL_249:
        if ((unint64_t)v59 >= v50 || (char)*v59 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v145);
          if (!(_DWORD)result)
            return result;
          v92 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v50 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v145 = *v59;
          v92 = v59 + 1;
          *((_QWORD *)a2 + 1) = v92;
        }
        *((_DWORD *)this + 59) |= 0x10000u;
        if ((int)v50 - (int)v92 < 2 || *v92 != 144 || v92[1] != 2)
          continue;
        v60 = v92 + 2;
        *((_QWORD *)a2 + 1) = v60;
LABEL_267:
        v155 = 0;
        if ((unint64_t)v60 >= v50 || (char)*v60 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v94 = v155;
          v95 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v50 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v94 = *v60;
          v95 = v60 + 1;
          *((_QWORD *)a2 + 1) = v95;
        }
        *((_DWORD *)this + 43) = -(v94 & 1) ^ (v94 >> 1);
        *((_DWORD *)this + 60) |= 2u;
        if ((int)v50 - (int)v95 < 2 || *v95 != 152 || v95[1] != 2)
          continue;
        v61 = v95 + 2;
        *((_QWORD *)a2 + 1) = v61;
LABEL_285:
        v155 = 0;
        if ((unint64_t)v61 >= v50 || (char)*v61 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v97 = v155;
          v98 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v50 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v97 = *v61;
          v98 = v61 + 1;
          *((_QWORD *)a2 + 1) = v98;
        }
        *((_BYTE *)this + 196) = v97 != 0;
        v62 = *((_DWORD *)this + 60) | 4;
        *((_DWORD *)this + 60) = v62;
        if ((int)v50 - (int)v98 < 2 || *v98 != 162 || v98[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v98 + 2;
LABEL_115:
        *((_DWORD *)this + 60) = v62 | 8;
        if (*((_QWORD *)this + 22) == v10)
        {
          v63 = (_QWORD *)operator new();
          v63[1] = 0;
          v63[2] = 0;
          *v63 = 0;
          *((_QWORD *)this + 22) = v63;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v65 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v64 = *((_QWORD *)a2 + 2);
        if ((int)v64 - (int)v65 < 2 || *v65 != 168 || v65[1] != 2)
          continue;
        v66 = (char *)(v65 + 2);
        *((_QWORD *)a2 + 1) = v66;
LABEL_124:
        v155 = 0;
        if ((unint64_t)v66 >= v64 || *v66 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v67 = v155;
        }
        else
        {
          v67 = *v66;
          *((_QWORD *)a2 + 1) = v66 + 1;
        }
        if (v67 <= 2)
        {
          *((_DWORD *)this + 60) |= 0x10u;
          *((_DWORD *)this + 46) = v67;
        }
        v80 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v68 = *((_QWORD *)a2 + 2);
        if ((int)v68 - (int)v80 < 2 || *v80 != 176 || v80[1] != 2)
          continue;
        v69 = (char *)(v80 + 2);
        *((_QWORD *)a2 + 1) = v69;
LABEL_166:
        v155 = 0;
        if ((unint64_t)v69 >= v68 || *v69 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v81 = v155;
        }
        else
        {
          v81 = *v69;
          *((_QWORD *)a2 + 1) = v69 + 1;
        }
        if (v81 <= 5)
        {
          *((_DWORD *)this + 60) |= 0x20u;
          *((_DWORD *)this + 47) = v81;
        }
        v84 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v70 = *((_QWORD *)a2 + 2);
        if ((int)v70 - (int)v84 < 2 || *v84 != 184 || v84[1] != 2)
          continue;
        v71 = v84 + 2;
        *((_QWORD *)a2 + 1) = v71;
LABEL_186:
        if ((unint64_t)v71 >= v70 || (char)*v71 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v151);
          if (!(_DWORD)result)
            return result;
          v85 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v151 = *v71;
          v85 = v71 + 1;
          *((_QWORD *)a2 + 1) = v85;
        }
        *((_DWORD *)this + 60) |= 0x40u;
        if ((int)v70 - (int)v85 < 2 || *v85 != 192 || v85[1] != 2)
          continue;
        v72 = v85 + 2;
        *((_QWORD *)a2 + 1) = v72;
LABEL_204:
        if ((unint64_t)v72 >= v70 || (char)*v72 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v149);
          if (!(_DWORD)result)
            return result;
          v87 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v149 = *v72;
          v87 = v72 + 1;
          *((_QWORD *)a2 + 1) = v87;
        }
        *((_DWORD *)this + 60) |= 0x80u;
        if ((int)v70 - (int)v87 < 2 || *v87 != 200 || v87[1] != 2)
          continue;
        v73 = v87 + 2;
        *((_QWORD *)a2 + 1) = v73;
LABEL_222:
        if ((unint64_t)v73 >= v70 || (char)*v73 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v147);
          if (!(_DWORD)result)
            return result;
          v89 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v147 = *v73;
          v89 = v73 + 1;
          *((_QWORD *)a2 + 1) = v89;
        }
        *((_DWORD *)this + 60) |= 0x100u;
        if ((int)v70 - (int)v89 < 2 || *v89 != 208 || v89[1] != 2)
          continue;
        v74 = v89 + 2;
        *((_QWORD *)a2 + 1) = v74;
LABEL_240:
        if ((unint64_t)v74 >= v70 || (char)*v74 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v144);
          if (!(_DWORD)result)
            return result;
          v91 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v144 = *v74;
          v91 = v74 + 1;
          *((_QWORD *)a2 + 1) = v91;
        }
        *((_DWORD *)this + 60) |= 0x200u;
        if ((int)v70 - (int)v91 < 2 || *v91 != 216 || v91[1] != 2)
          continue;
        v75 = v91 + 2;
        *((_QWORD *)a2 + 1) = v75;
LABEL_258:
        if ((unint64_t)v75 >= v70 || (char)*v75 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v93 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v75;
          v93 = v75 + 1;
          *((_QWORD *)a2 + 1) = v93;
        }
        *((_DWORD *)this + 60) |= 0x400u;
        if ((int)v70 - (int)v93 < 2 || *v93 != 224 || v93[1] != 2)
          continue;
        v76 = v93 + 2;
        *((_QWORD *)a2 + 1) = v76;
LABEL_276:
        if ((unint64_t)v76 >= v70 || (char)*v76 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v96 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v76;
          v96 = v76 + 1;
          *((_QWORD *)a2 + 1) = v96;
        }
        *((_DWORD *)this + 60) |= 0x800u;
        if ((int)v70 - (int)v96 < 2 || *v96 != 232 || v96[1] != 2)
          continue;
        v77 = v96 + 2;
        *((_QWORD *)a2 + 1) = v77;
LABEL_294:
        v155 = 0;
        if ((unint64_t)v77 >= v70 || (char)*v77 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v155);
          if (!(_DWORD)result)
            return result;
          v99 = v155;
          v100 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v99 = *v77;
          v100 = v77 + 1;
          *((_QWORD *)a2 + 1) = v100;
        }
        *((_BYTE *)this + 197) = v99 != 0;
        *((_DWORD *)this + 60) |= 0x1000u;
        if ((int)v70 - (int)v100 < 2 || *v100 != 240 || v100[1] != 34)
          continue;
        v78 = v100 + 2;
        *((_QWORD *)a2 + 1) = v78;
        goto LABEL_309;
      case 3u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        goto LABEL_329;
      case 4u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        goto LABEL_337;
      case 5u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v26 = (char *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        goto LABEL_347;
      case 6u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        goto LABEL_355;
      case 7u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v28 = (char *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        goto LABEL_363;
      case 8u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v29 = (char *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        goto LABEL_371;
      case 9u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v30 = (char *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        goto LABEL_379;
      case 0xAu:
        v14 = TagFallback & 7;
        if (v14 == 2)
          goto LABEL_393;
        goto LABEL_146;
      case 0xBu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v32 = (char *)*((_QWORD *)a2 + 1);
        v31 = *((_QWORD *)a2 + 2);
        goto LABEL_399;
      case 0xCu:
        v14 = TagFallback & 7;
        if (v14 != 2)
          goto LABEL_146;
        v33 = *((_DWORD *)this + 59);
        goto LABEL_407;
      case 0xDu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v35 = (char *)*((_QWORD *)a2 + 1);
        v34 = *((_QWORD *)a2 + 2);
        goto LABEL_413;
      case 0xEu:
        v14 = TagFallback & 7;
        if (v14 != 2)
          goto LABEL_146;
        v36 = *((_DWORD *)this + 59);
        goto LABEL_421;
      case 0xFu:
        v14 = TagFallback & 7;
        if (v14 == 2)
          goto LABEL_427;
        goto LABEL_146;
      case 0x10u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v38 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v37 = *((_QWORD *)a2 + 2);
        goto LABEL_434;
      case 0x11u:
        v14 = TagFallback & 7;
        if (v14 != 2)
          goto LABEL_146;
        v39 = *((_DWORD *)this + 59);
        goto LABEL_443;
      case 0x12u:
        v14 = TagFallback & 7;
        if (v14 == 2)
          goto LABEL_450;
        goto LABEL_146;
      case 0x13u:
        v14 = TagFallback & 7;
        if (v14 == 2)
          goto LABEL_457;
        goto LABEL_146;
      case 0x14u:
        v14 = TagFallback & 7;
        if (v14 == 2)
          goto LABEL_464;
        goto LABEL_146;
      case 0x15u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v41 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v40 = *((_QWORD *)a2 + 2);
        goto LABEL_471;
      case 0x16u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v42 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v40 = *((_QWORD *)a2 + 2);
        goto LABEL_480;
      case 0x17u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v43 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v40 = *((_QWORD *)a2 + 2);
        goto LABEL_489;
      case 0x18u:
        v14 = TagFallback & 7;
        if (v14 != 2)
          goto LABEL_146;
        v44 = *((_DWORD *)this + 59);
        goto LABEL_69;
      case 0x19u:
        v14 = TagFallback & 7;
        if (v14 == 2)
          goto LABEL_77;
        goto LABEL_146;
      case 0x1Au:
        v14 = TagFallback & 7;
        if (v14 == 2)
          goto LABEL_85;
        goto LABEL_146;
      case 0x1Bu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v52 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v50 = *((_QWORD *)a2 + 2);
        goto LABEL_94;
      case 0x1Cu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v54 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v50 = *((_QWORD *)a2 + 2);
        goto LABEL_155;
      case 0x1Du:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v55 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v50 = *((_QWORD *)a2 + 2);
        goto LABEL_175;
      case 0x1Eu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v56 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v50 = *((_QWORD *)a2 + 2);
        goto LABEL_195;
      case 0x1Fu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v57 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v50 = *((_QWORD *)a2 + 2);
        goto LABEL_213;
      case 0x20u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v58 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v50 = *((_QWORD *)a2 + 2);
        goto LABEL_231;
      case 0x21u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v59 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v50 = *((_QWORD *)a2 + 2);
        goto LABEL_249;
      case 0x22u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v60 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v50 = *((_QWORD *)a2 + 2);
        goto LABEL_267;
      case 0x23u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v61 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v50 = *((_QWORD *)a2 + 2);
        goto LABEL_285;
      case 0x24u:
        v14 = TagFallback & 7;
        if (v14 != 2)
          goto LABEL_146;
        v62 = *((_DWORD *)this + 60);
        goto LABEL_115;
      case 0x25u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v66 = (char *)*((_QWORD *)a2 + 1);
        v64 = *((_QWORD *)a2 + 2);
        goto LABEL_124;
      case 0x26u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v69 = (char *)*((_QWORD *)a2 + 1);
        v68 = *((_QWORD *)a2 + 2);
        goto LABEL_166;
      case 0x27u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v71 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v70 = *((_QWORD *)a2 + 2);
        goto LABEL_186;
      case 0x28u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v72 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v70 = *((_QWORD *)a2 + 2);
        goto LABEL_204;
      case 0x29u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v73 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v70 = *((_QWORD *)a2 + 2);
        goto LABEL_222;
      case 0x2Au:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v74 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v70 = *((_QWORD *)a2 + 2);
        goto LABEL_240;
      case 0x2Bu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v75 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v70 = *((_QWORD *)a2 + 2);
        goto LABEL_258;
      case 0x2Cu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v76 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v70 = *((_QWORD *)a2 + 2);
        goto LABEL_276;
      case 0x2Du:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_146;
        v77 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v70 = *((_QWORD *)a2 + 2);
        goto LABEL_294;
      default:
        if (v13 == 558)
        {
          v14 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_146;
          v78 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
LABEL_309:
          if ((unint64_t)v78 >= v70 || (char)*v78 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
            if (!(_DWORD)result)
              return result;
            v101 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v70 = *((_QWORD *)a2 + 2);
          }
          else
          {
            *v9 = *v78;
            v101 = v78 + 1;
            *((_QWORD *)a2 + 1) = v101;
          }
          v18 = *((_DWORD *)this + 60) | 0x2000;
          *((_DWORD *)this + 60) = v18;
          if ((int)v70 - (int)v101 >= 2 && *v101 == 250 && v101[1] == 34)
          {
            *((_QWORD *)a2 + 1) = v101 + 2;
            goto LABEL_16;
          }
          continue;
        }
        if (v13 == 559)
        {
          v14 = TagFallback & 7;
          if (v14 != 2)
            goto LABEL_146;
          v18 = *((_DWORD *)this + 60);
LABEL_16:
          *((_DWORD *)this + 60) = v18 | 0x4000;
          if (*((_QWORD *)this + 28) == v10)
          {
            v19 = (_QWORD *)operator new();
            v19[1] = 0;
            v19[2] = 0;
            *v19 = 0;
            *((_QWORD *)this + 28) = v19;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!(_DWORD)result)
            return result;
          if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        v14 = TagFallback & 7;
LABEL_146:
        if (v14 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
          continue;
        }
        return 1;
    }
  }
}

uint64_t awd::metrics::ATM_CallConnectEvent::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 236);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 236);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_53;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_54;
  }
LABEL_53:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_55;
  }
LABEL_54:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_56;
  }
LABEL_55:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_57;
  }
LABEL_56:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 30), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_58;
  }
LABEL_57:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 31), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_59;
  }
LABEL_58:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 96), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_60;
  }
LABEL_59:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_61;
  }
LABEL_60:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_62;
  }
LABEL_61:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_63;
  }
LABEL_62:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_64;
  }
LABEL_63:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned __int8 *)(v5 + 97), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_65;
  }
LABEL_64:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_66;
  }
LABEL_65:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_67;
  }
LABEL_66:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 72), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x20000) == 0)
  {
LABEL_18:
    if ((v6 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_68;
  }
LABEL_67:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x40000) == 0)
  {
LABEL_19:
    if ((v6 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_69;
  }
LABEL_68:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x80000) == 0)
  {
LABEL_20:
    if ((v6 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_70;
  }
LABEL_69:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x100000) == 0)
  {
LABEL_21:
    if ((v6 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_71;
  }
LABEL_70:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x200000) == 0)
  {
LABEL_22:
    if ((v6 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_72;
  }
LABEL_71:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned __int8 *)(v5 + 98), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x400000) == 0)
  {
LABEL_23:
    if ((v6 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_73;
  }
LABEL_72:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(unsigned int *)(v5 + 100), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x800000) == 0)
  {
LABEL_24:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_74;
  }
LABEL_73:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, *(unsigned int *)(v5 + 136), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_75;
  }
LABEL_74:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_76;
  }
LABEL_75:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_77;
  }
LABEL_76:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_78;
  }
LABEL_77:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, *(unsigned int *)(v5 + 140), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_79;
  }
LABEL_78:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, *(unsigned int *)(v5 + 152), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_31;
LABEL_80:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, *(unsigned int *)(v5 + 156), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 236) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_81;
  }
LABEL_79:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, *(unsigned __int8 *)(v5 + 99), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x40000000) != 0)
    goto LABEL_80;
LABEL_31:
  if ((v6 & 0x80000000) == 0)
    goto LABEL_32;
LABEL_81:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F, *(unsigned int *)(v5 + 168), (uint64_t)a2, a4);
LABEL_32:
  if ((*(_BYTE *)(v5 + 240) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20, *(_QWORD *)(v5 + 160), (uint64_t)a2, a4);
  if ((*(_BYTE *)(v5 + 238) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 2) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22, *(unsigned int *)(v5 + 172), (uint64_t)a2, a4);
    v7 = *(_DWORD *)(v5 + 240);
    if ((v7 & 4) == 0)
    {
LABEL_38:
      if ((v7 & 8) == 0)
        goto LABEL_39;
      goto LABEL_84;
    }
  }
  else if ((v7 & 4) == 0)
  {
    goto LABEL_38;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23, *(unsigned __int8 *)(v5 + 196), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 8) == 0)
  {
LABEL_39:
    if ((v7 & 0x10) == 0)
      goto LABEL_40;
    goto LABEL_85;
  }
LABEL_84:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x10) == 0)
  {
LABEL_40:
    if ((v7 & 0x20) == 0)
      goto LABEL_41;
    goto LABEL_86;
  }
LABEL_85:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25, *(unsigned int *)(v5 + 184), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x20) == 0)
  {
LABEL_41:
    if ((v7 & 0x40) == 0)
      goto LABEL_42;
    goto LABEL_87;
  }
LABEL_86:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x26, *(unsigned int *)(v5 + 188), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x40) == 0)
  {
LABEL_42:
    if ((v7 & 0x80) == 0)
      goto LABEL_43;
    goto LABEL_88;
  }
LABEL_87:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x27, *(unsigned int *)(v5 + 192), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x80) == 0)
  {
LABEL_43:
    if ((v7 & 0x100) == 0)
      goto LABEL_44;
    goto LABEL_89;
  }
LABEL_88:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x28, *(unsigned int *)(v5 + 200), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x100) == 0)
  {
LABEL_44:
    if ((v7 & 0x200) == 0)
      goto LABEL_45;
    goto LABEL_90;
  }
LABEL_89:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x29, *(unsigned int *)(v5 + 204), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x200) == 0)
  {
LABEL_45:
    if ((v7 & 0x400) == 0)
      goto LABEL_46;
    goto LABEL_91;
  }
LABEL_90:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2A, *(unsigned int *)(v5 + 208), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x400) == 0)
  {
LABEL_46:
    if ((v7 & 0x800) == 0)
      goto LABEL_47;
    goto LABEL_92;
  }
LABEL_91:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2B, *(unsigned int *)(v5 + 212), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x800) == 0)
  {
LABEL_47:
    if ((v7 & 0x1000) == 0)
      goto LABEL_48;
    goto LABEL_93;
  }
LABEL_92:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2C, *(unsigned int *)(v5 + 216), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x1000) == 0)
  {
LABEL_48:
    if ((v7 & 0x2000) == 0)
      goto LABEL_49;
    goto LABEL_94;
  }
LABEL_93:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2D, *(unsigned __int8 *)(v5 + 197), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x2000) == 0)
  {
LABEL_49:
    if ((v7 & 0x4000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
LABEL_94:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22E, *(unsigned int *)(v5 + 220), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 240) & 0x4000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::metrics::ATM_CallConnectEvent::ByteSize(awd::metrics::ATM_CallConnectEvent *this)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  unsigned int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v42;
  int v43;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v44;
  int v45;
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v70;
  int v71;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v72;
  int v73;
  uint64_t v74;
  int v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  char v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v92;
  int v93;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v94;
  int v95;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v96;
  int v97;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v98;
  int v99;
  int v100;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v101;
  int v102;
  uint64_t v103;
  int v104;
  char v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v109;
  int v110;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v111;
  int v112;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v113;
  int v114;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v115;
  int v116;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v117;
  int v118;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v119;
  int v120;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v121;
  int v122;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v123;
  int v124;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v125;
  int v126;
  uint64_t v127;
  int v128;
  char v129;
  uint64_t v130;
  unint64_t v131;
  int v132;

  v2 = *((_DWORD *)this + 59);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_34;
  }
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_16;
LABEL_7:
    v5 = *((_QWORD *)this + 2);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = v8;
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v8 = *(_QWORD *)(v5 + 8);
      v2 = *((_DWORD *)this + 59);
      v7 = *(_BYTE *)(v5 + 23);
    }
    else
    {
      v10 = 1;
    }
    if (v7 < 0)
      v6 = v8;
    v3 += v10 + v6 + 1;
    goto LABEL_16;
  }
  v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 1))
     + 1;
  v2 = *((_DWORD *)this + 59);
  if ((v2 & 2) != 0)
    goto LABEL_7;
LABEL_16:
  if ((v2 & 4) != 0)
    v3 += 2;
  if ((v2 & 8) != 0)
  {
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v11 & 0x80000000) != 0)
    {
      v12 = 10;
    }
    else if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
      v2 = *((_DWORD *)this + 59);
    }
    else
    {
      v12 = 1;
    }
    v3 += v12 + 1;
  }
  v13 = v3 + 2;
  if ((v2 & 0x10) == 0)
    v13 = v3;
  if ((v2 & 0x20) != 0)
    v13 += 2;
  if ((v2 & 0x40) != 0)
    v13 += 2;
  if ((v2 & 0x80) != 0)
    v4 = v13 + 2;
  else
    v4 = v13;
LABEL_34:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_97;
  if ((v2 & 0x100) != 0)
  {
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if ((v14 & 0x80000000) != 0)
    {
      v15 = 10;
    }
    else if (v14 >= 0x80)
    {
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      v2 = *((_DWORD *)this + 59);
    }
    else
    {
      v15 = 1;
    }
    LODWORD(v4) = v4 + v15 + 1;
    if ((v2 & 0x200) == 0)
    {
LABEL_37:
      if ((v2 & 0x400) == 0)
        goto LABEL_38;
LABEL_55:
      v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
      if (v22 >= 0x80)
      {
        v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
        v2 = *((_DWORD *)this + 59);
      }
      else
      {
        v23 = 1;
      }
      LODWORD(v4) = v4 + v23 + 1;
      if ((v2 & 0x800) == 0)
        goto LABEL_68;
      goto LABEL_59;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_37;
  }
  v16 = *((_QWORD *)this + 5);
  v17 = *(unsigned __int8 *)(v16 + 23);
  v18 = v17;
  v19 = *(_QWORD *)(v16 + 8);
  if ((v17 & 0x80u) == 0)
    v20 = *(unsigned __int8 *)(v16 + 23);
  else
    v20 = v19;
  if (v20 >= 0x80)
  {
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20);
    v17 = *(unsigned __int8 *)(v16 + 23);
    v19 = *(_QWORD *)(v16 + 8);
    v2 = *((_DWORD *)this + 59);
    v18 = *(_BYTE *)(v16 + 23);
  }
  else
  {
    v21 = 1;
  }
  if (v18 < 0)
    v17 = v19;
  LODWORD(v4) = v4 + v21 + v17 + 1;
  if ((v2 & 0x400) != 0)
    goto LABEL_55;
LABEL_38:
  if ((v2 & 0x800) == 0)
    goto LABEL_68;
LABEL_59:
  v24 = *((_QWORD *)this + 6);
  v25 = *(unsigned __int8 *)(v24 + 23);
  v26 = v25;
  v27 = *(_QWORD *)(v24 + 8);
  if ((v25 & 0x80u) == 0)
    v28 = *(unsigned __int8 *)(v24 + 23);
  else
    v28 = v27;
  if (v28 >= 0x80)
  {
    v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28);
    v25 = *(unsigned __int8 *)(v24 + 23);
    v27 = *(_QWORD *)(v24 + 8);
    v2 = *((_DWORD *)this + 59);
    v26 = *(_BYTE *)(v24 + 23);
  }
  else
  {
    v29 = 1;
  }
  if (v26 < 0)
    v25 = v27;
  LODWORD(v4) = v4 + v29 + v25 + 1;
LABEL_68:
  if ((v2 & 0x1000) != 0)
    v4 = (v4 + 2);
  else
    v4 = v4;
  if ((v2 & 0x2000) != 0)
  {
    v30 = *((_QWORD *)this + 7);
    v31 = *(unsigned __int8 *)(v30 + 23);
    v32 = v31;
    v33 = *(_QWORD *)(v30 + 8);
    if ((v31 & 0x80u) == 0)
      v34 = *(unsigned __int8 *)(v30 + 23);
    else
      v34 = v33;
    if (v34 >= 0x80)
    {
      v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
      v31 = *(unsigned __int8 *)(v30 + 23);
      v33 = *(_QWORD *)(v30 + 8);
      v2 = *((_DWORD *)this + 59);
      v32 = *(_BYTE *)(v30 + 23);
    }
    else
    {
      v35 = 1;
    }
    if (v32 < 0)
      v31 = v33;
    v4 = (v4 + v35 + v31 + 1);
    if ((v2 & 0x4000) == 0)
    {
LABEL_73:
      if ((v2 & 0x8000) == 0)
        goto LABEL_97;
      goto LABEL_93;
    }
  }
  else if ((v2 & 0x4000) == 0)
  {
    goto LABEL_73;
  }
  v36 = *((_QWORD *)this + 8);
  v37 = *(unsigned __int8 *)(v36 + 23);
  v38 = v37;
  v39 = *(_QWORD *)(v36 + 8);
  if ((v37 & 0x80u) == 0)
    v40 = *(unsigned __int8 *)(v36 + 23);
  else
    v40 = v39;
  if (v40 >= 0x80)
  {
    v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v40);
    v37 = *(unsigned __int8 *)(v36 + 23);
    v39 = *(_QWORD *)(v36 + 8);
    v2 = *((_DWORD *)this + 59);
    v38 = *(_BYTE *)(v36 + 23);
  }
  else
  {
    v41 = 1;
  }
  if (v38 < 0)
    v37 = v39;
  v4 = (v4 + v41 + v37 + 1);
  if ((v2 & 0x8000) != 0)
  {
LABEL_93:
    v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
    if (v42 >= 0x80)
    {
      v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42);
      v2 = *((_DWORD *)this + 59);
    }
    else
    {
      v43 = 1;
    }
    v4 = (v4 + v43 + 2);
  }
LABEL_97:
  if ((v2 & 0xFF0000) == 0)
    goto LABEL_157;
  if ((v2 & 0x10000) != 0)
  {
    v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 19);
    if (v44 >= 0x80)
    {
      v45 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v44);
      v2 = *((_DWORD *)this + 59);
    }
    else
    {
      v45 = 1;
    }
    LODWORD(v4) = v4 + v45 + 2;
    if ((v2 & 0x20000) == 0)
    {
LABEL_100:
      if ((v2 & 0x40000) == 0)
        goto LABEL_101;
      goto LABEL_117;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_100;
  }
  v46 = *((_QWORD *)this + 10);
  v47 = *(unsigned __int8 *)(v46 + 23);
  v48 = v47;
  v49 = *(_QWORD *)(v46 + 8);
  if ((v47 & 0x80u) == 0)
    v50 = *(unsigned __int8 *)(v46 + 23);
  else
    v50 = v49;
  if (v50 >= 0x80)
  {
    v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v50);
    v47 = *(unsigned __int8 *)(v46 + 23);
    v49 = *(_QWORD *)(v46 + 8);
    v2 = *((_DWORD *)this + 59);
    v48 = *(_BYTE *)(v46 + 23);
  }
  else
  {
    v51 = 1;
  }
  if (v48 < 0)
    v47 = v49;
  LODWORD(v4) = v4 + v51 + v47 + 2;
  if ((v2 & 0x40000) == 0)
  {
LABEL_101:
    if ((v2 & 0x80000) == 0)
      goto LABEL_102;
LABEL_126:
    v58 = *((_QWORD *)this + 13);
    v59 = *(unsigned __int8 *)(v58 + 23);
    v60 = v59;
    v61 = *(_QWORD *)(v58 + 8);
    if ((v59 & 0x80u) == 0)
      v62 = *(unsigned __int8 *)(v58 + 23);
    else
      v62 = v61;
    if (v62 >= 0x80)
    {
      v63 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v62);
      v59 = *(unsigned __int8 *)(v58 + 23);
      v61 = *(_QWORD *)(v58 + 8);
      v2 = *((_DWORD *)this + 59);
      v60 = *(_BYTE *)(v58 + 23);
    }
    else
    {
      v63 = 1;
    }
    if (v60 < 0)
      v59 = v61;
    LODWORD(v4) = v4 + v63 + v59 + 2;
    if ((v2 & 0x100000) == 0)
      goto LABEL_144;
    goto LABEL_135;
  }
LABEL_117:
  v52 = *((_QWORD *)this + 11);
  v53 = *(unsigned __int8 *)(v52 + 23);
  v54 = v53;
  v55 = *(_QWORD *)(v52 + 8);
  if ((v53 & 0x80u) == 0)
    v56 = *(unsigned __int8 *)(v52 + 23);
  else
    v56 = v55;
  if (v56 >= 0x80)
  {
    v57 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v56);
    v53 = *(unsigned __int8 *)(v52 + 23);
    v55 = *(_QWORD *)(v52 + 8);
    v2 = *((_DWORD *)this + 59);
    v54 = *(_BYTE *)(v52 + 23);
  }
  else
  {
    v57 = 1;
  }
  if (v54 < 0)
    v53 = v55;
  LODWORD(v4) = v4 + v57 + v53 + 2;
  if ((v2 & 0x80000) != 0)
    goto LABEL_126;
LABEL_102:
  if ((v2 & 0x100000) != 0)
  {
LABEL_135:
    v64 = *((_QWORD *)this + 14);
    v65 = *(unsigned __int8 *)(v64 + 23);
    v66 = v65;
    v67 = *(_QWORD *)(v64 + 8);
    if ((v65 & 0x80u) == 0)
      v68 = *(unsigned __int8 *)(v64 + 23);
    else
      v68 = v67;
    if (v68 >= 0x80)
    {
      v69 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v68);
      v65 = *(unsigned __int8 *)(v64 + 23);
      v67 = *(_QWORD *)(v64 + 8);
      v2 = *((_DWORD *)this + 59);
      v66 = *(_BYTE *)(v64 + 23);
    }
    else
    {
      v69 = 1;
    }
    if (v66 < 0)
      v65 = v67;
    LODWORD(v4) = v4 + v69 + v65 + 2;
  }
LABEL_144:
  if ((v2 & 0x200000) != 0)
    v4 = (v4 + 3);
  else
    v4 = v4;
  if ((v2 & 0x400000) != 0)
  {
    v70 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 25);
    if (v70 >= 0x80)
    {
      v71 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v70);
      v2 = *((_DWORD *)this + 59);
    }
    else
    {
      v71 = 1;
    }
    v4 = (v4 + v71 + 2);
  }
  if ((v2 & 0x800000) != 0)
  {
    v72 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 34);
    if (v72 >= 0x80)
    {
      v73 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v72);
      v2 = *((_DWORD *)this + 59);
    }
    else
    {
      v73 = 1;
    }
    v4 = (v4 + v73 + 2);
  }
LABEL_157:
  if (!HIBYTE(v2))
    goto LABEL_212;
  if ((v2 & 0x1000000) != 0)
  {
    v74 = *((_QWORD *)this + 15);
    v75 = *(unsigned __int8 *)(v74 + 23);
    v76 = v75;
    v77 = *(_QWORD *)(v74 + 8);
    if ((v75 & 0x80u) == 0)
      v78 = *(unsigned __int8 *)(v74 + 23);
    else
      v78 = v77;
    if (v78 >= 0x80)
    {
      v79 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v78);
      v75 = *(unsigned __int8 *)(v74 + 23);
      v77 = *(_QWORD *)(v74 + 8);
      v2 = *((_DWORD *)this + 59);
      v76 = *(_BYTE *)(v74 + 23);
    }
    else
    {
      v79 = 1;
    }
    if (v76 < 0)
      v75 = v77;
    LODWORD(v4) = v4 + v79 + v75 + 2;
    if ((v2 & 0x2000000) == 0)
    {
LABEL_160:
      if ((v2 & 0x4000000) == 0)
        goto LABEL_161;
      goto LABEL_182;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_160;
  }
  v80 = *((_QWORD *)this + 16);
  v81 = *(unsigned __int8 *)(v80 + 23);
  v82 = v81;
  v83 = *(_QWORD *)(v80 + 8);
  if ((v81 & 0x80u) == 0)
    v84 = *(unsigned __int8 *)(v80 + 23);
  else
    v84 = v83;
  if (v84 >= 0x80)
  {
    v85 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v84);
    v81 = *(unsigned __int8 *)(v80 + 23);
    v83 = *(_QWORD *)(v80 + 8);
    v2 = *((_DWORD *)this + 59);
    v82 = *(_BYTE *)(v80 + 23);
  }
  else
  {
    v85 = 1;
  }
  if (v82 < 0)
    v81 = v83;
  LODWORD(v4) = v4 + v85 + v81 + 2;
  if ((v2 & 0x4000000) == 0)
  {
LABEL_161:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_162;
LABEL_191:
    v92 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 35);
    if (v92 >= 0x80)
    {
      v93 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v92);
      v2 = *((_DWORD *)this + 59);
    }
    else
    {
      v93 = 1;
    }
    LODWORD(v4) = v4 + v93 + 2;
    if ((v2 & 0x10000000) == 0)
      goto LABEL_199;
    goto LABEL_195;
  }
LABEL_182:
  v86 = *((_QWORD *)this + 18);
  v87 = *(unsigned __int8 *)(v86 + 23);
  v88 = v87;
  v89 = *(_QWORD *)(v86 + 8);
  if ((v87 & 0x80u) == 0)
    v90 = *(unsigned __int8 *)(v86 + 23);
  else
    v90 = v89;
  if (v90 >= 0x80)
  {
    v91 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v90);
    v87 = *(unsigned __int8 *)(v86 + 23);
    v89 = *(_QWORD *)(v86 + 8);
    v2 = *((_DWORD *)this + 59);
    v88 = *(_BYTE *)(v86 + 23);
  }
  else
  {
    v91 = 1;
  }
  if (v88 < 0)
    v87 = v89;
  LODWORD(v4) = v4 + v91 + v87 + 2;
  if ((v2 & 0x8000000) != 0)
    goto LABEL_191;
LABEL_162:
  if ((v2 & 0x10000000) != 0)
  {
LABEL_195:
    v94 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 38);
    if (v94 >= 0x80)
    {
      v95 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v94);
      v2 = *((_DWORD *)this + 59);
    }
    else
    {
      v95 = 1;
    }
    LODWORD(v4) = v4 + v95 + 2;
  }
LABEL_199:
  if ((v2 & 0x20000000) != 0)
    v4 = (v4 + 3);
  else
    v4 = v4;
  if ((v2 & 0x40000000) != 0)
  {
    v96 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 39);
    if (v96 >= 0x80)
    {
      v97 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v96);
      v2 = *((_DWORD *)this + 59);
    }
    else
    {
      v97 = 1;
    }
    v4 = (v4 + v97 + 2);
  }
  if ((v2 & 0x80000000) != 0)
  {
    v98 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 42);
    if (v98 >= 0x80)
      v99 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v98);
    else
      v99 = 1;
    v4 = (v4 + v99 + 2);
  }
LABEL_212:
  v100 = *((_DWORD *)this + 60);
  if (!(_BYTE)v100)
    goto LABEL_258;
  if ((v100 & 1) != 0)
  {
    LODWORD(v4) = v4
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 20))
                + 2;
    v100 = *((_DWORD *)this + 60);
  }
  if ((v100 & 2) != 0)
  {
    v101 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * *((_DWORD *)this + 43)) ^ (*((int *)this + 43) >> 31));
    if (v101 >= 0x80)
    {
      v102 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v101);
      v100 = *((_DWORD *)this + 60);
    }
    else
    {
      v102 = 1;
    }
    LODWORD(v4) = v4 + v102 + 2;
  }
  if ((v100 & 4) != 0)
    v4 = (v4 + 3);
  else
    v4 = v4;
  if ((v100 & 8) != 0)
  {
    v103 = *((_QWORD *)this + 22);
    v104 = *(unsigned __int8 *)(v103 + 23);
    v105 = v104;
    v106 = *(_QWORD *)(v103 + 8);
    if ((v104 & 0x80u) == 0)
      v107 = *(unsigned __int8 *)(v103 + 23);
    else
      v107 = v106;
    if (v107 >= 0x80)
    {
      v108 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v107);
      v104 = *(unsigned __int8 *)(v103 + 23);
      v106 = *(_QWORD *)(v103 + 8);
      v100 = *((_DWORD *)this + 60);
      v105 = *(_BYTE *)(v103 + 23);
    }
    else
    {
      v108 = 1;
    }
    if (v105 < 0)
      v104 = v106;
    v4 = (v4 + v108 + v104 + 2);
    if ((v100 & 0x10) == 0)
    {
LABEL_225:
      if ((v100 & 0x20) == 0)
        goto LABEL_226;
      goto LABEL_244;
    }
  }
  else if ((v100 & 0x10) == 0)
  {
    goto LABEL_225;
  }
  v109 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 46);
  if ((v109 & 0x80000000) != 0)
  {
    v110 = 10;
  }
  else if (v109 >= 0x80)
  {
    v110 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v109);
    v100 = *((_DWORD *)this + 60);
  }
  else
  {
    v110 = 1;
  }
  v4 = (v4 + v110 + 2);
  if ((v100 & 0x20) == 0)
  {
LABEL_226:
    if ((v100 & 0x40) == 0)
      goto LABEL_227;
    goto LABEL_250;
  }
LABEL_244:
  v111 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 47);
  if ((v111 & 0x80000000) != 0)
  {
    v112 = 10;
  }
  else if (v111 >= 0x80)
  {
    v112 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v111);
    v100 = *((_DWORD *)this + 60);
  }
  else
  {
    v112 = 1;
  }
  v4 = (v4 + v112 + 2);
  if ((v100 & 0x40) == 0)
  {
LABEL_227:
    if ((v100 & 0x80) == 0)
      goto LABEL_258;
    goto LABEL_254;
  }
LABEL_250:
  v113 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 48);
  if (v113 >= 0x80)
  {
    v114 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v113) + 2;
    v100 = *((_DWORD *)this + 60);
  }
  else
  {
    v114 = 3;
  }
  v4 = (v114 + v4);
  if ((v100 & 0x80) != 0)
  {
LABEL_254:
    v115 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 50);
    if (v115 >= 0x80)
    {
      v116 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v115) + 2;
      v100 = *((_DWORD *)this + 60);
    }
    else
    {
      v116 = 3;
    }
    v4 = (v116 + v4);
  }
LABEL_258:
  if ((v100 & 0xFF00) == 0)
    goto LABEL_298;
  if ((v100 & 0x100) != 0)
  {
    v117 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 51);
    if (v117 >= 0x80)
    {
      v118 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v117) + 2;
      v100 = *((_DWORD *)this + 60);
    }
    else
    {
      v118 = 3;
    }
    LODWORD(v4) = v118 + v4;
    if ((v100 & 0x200) == 0)
    {
LABEL_261:
      if ((v100 & 0x400) == 0)
        goto LABEL_262;
LABEL_272:
      v121 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 53);
      if (v121 >= 0x80)
      {
        v122 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v121) + 2;
        v100 = *((_DWORD *)this + 60);
      }
      else
      {
        v122 = 3;
      }
      LODWORD(v4) = v122 + v4;
      if ((v100 & 0x800) == 0)
        goto LABEL_280;
      goto LABEL_276;
    }
  }
  else if ((v100 & 0x200) == 0)
  {
    goto LABEL_261;
  }
  v119 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 52);
  if (v119 >= 0x80)
  {
    v120 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v119) + 2;
    v100 = *((_DWORD *)this + 60);
  }
  else
  {
    v120 = 3;
  }
  LODWORD(v4) = v120 + v4;
  if ((v100 & 0x400) != 0)
    goto LABEL_272;
LABEL_262:
  if ((v100 & 0x800) != 0)
  {
LABEL_276:
    v123 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 54);
    if (v123 >= 0x80)
    {
      v124 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v123) + 2;
      v100 = *((_DWORD *)this + 60);
    }
    else
    {
      v124 = 3;
    }
    LODWORD(v4) = v124 + v4;
  }
LABEL_280:
  if ((v100 & 0x1000) != 0)
    v4 = (v4 + 3);
  else
    v4 = v4;
  if ((v100 & 0x2000) != 0)
  {
    v125 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 55);
    if (v125 >= 0x80)
    {
      v126 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v125) + 2;
      v100 = *((_DWORD *)this + 60);
    }
    else
    {
      v126 = 3;
    }
    v4 = (v126 + v4);
  }
  if ((v100 & 0x4000) != 0)
  {
    v127 = *((_QWORD *)this + 28);
    v128 = *(unsigned __int8 *)(v127 + 23);
    v129 = v128;
    v130 = *(_QWORD *)(v127 + 8);
    if ((v128 & 0x80u) == 0)
      v131 = *(unsigned __int8 *)(v127 + 23);
    else
      v131 = v130;
    if (v131 >= 0x80)
    {
      v132 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v131);
      v128 = *(unsigned __int8 *)(v127 + 23);
      v130 = *(_QWORD *)(v127 + 8);
      v129 = *(_BYTE *)(v127 + 23);
    }
    else
    {
      v132 = 1;
    }
    if (v129 < 0)
      v128 = v130;
    v4 = (v4 + v132 + v128 + 2);
  }
LABEL_298:
  *((_DWORD *)this + 58) = v4;
  return v4;
}

void awd::metrics::ATM_CallConnectEvent::CheckTypeAndMergeFrom(awd::metrics::ATM_CallConnectEvent *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  unsigned int v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  const std::string *v13;
  std::string *v14;
  char v15;
  int v16;
  char v17;
  char v18;
  char v19;
  int v20;
  const std::string *v21;
  std::string *v22;
  const std::string *v23;
  std::string *v24;
  const std::string *v25;
  std::string *v26;
  const std::string *v27;
  std::string *v28;
  char v29;
  int v30;
  uint64_t v31;
  int v32;
  char v33;
  const std::string *v34;
  std::string *v35;
  unsigned int v36;
  unsigned int v37;
  const std::string *v38;
  std::string *v39;
  int v40;
  const std::string *v41;
  std::string *v42;
  char v43;
  const std::string *v44;
  std::string *v45;
  const std::string *v46;
  std::string *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char v52;
  int v53;
  const std::string *v54;
  std::string *v55;
  const std::string *v56;
  std::string *v57;
  const std::string *v58;
  std::string *v59;
  const std::string *v60;
  std::string *v61;
  int v62;
  int v63;
  char v64;
  int v65;
  int v66;
  _BYTE v67[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v67);
  }
  v4 = *((_DWORD *)lpsrc + 59);
  if (!(_BYTE)v4)
    goto LABEL_14;
  if ((v4 & 1) != 0)
  {
    v12 = *((_QWORD *)lpsrc + 1);
    *((_DWORD *)this + 59) |= 1u;
    *((_QWORD *)this + 1) = v12;
    v4 = *((_DWORD *)lpsrc + 59);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0)
        goto LABEL_8;
      goto LABEL_69;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  v13 = (const std::string *)*((_QWORD *)lpsrc + 2);
  *((_DWORD *)this + 59) |= 2u;
  v14 = (std::string *)*((_QWORD *)this + 2);
  if (v14 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v14 = (std::string *)operator new();
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 2) = v14;
  }
  std::string::operator=(v14, v13);
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_70;
  }
LABEL_69:
  v15 = *((_BYTE *)lpsrc + 28);
  *((_DWORD *)this + 59) |= 4u;
  *((_BYTE *)this + 28) = v15;
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_72;
  }
LABEL_70:
  v16 = *((_DWORD *)lpsrc + 6);
  if ((v16 + 1) >= 8)
    __assert_rtn("set_type", "CATM.pb.h", 10746, "::awd::metrics::enum_ATM_call_type_IsValid(value)");
  *((_DWORD *)this + 59) |= 8u;
  *((_DWORD *)this + 6) = v16;
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
LABEL_73:
    v18 = *((_BYTE *)lpsrc + 30);
    *((_DWORD *)this + 59) |= 0x20u;
    *((_BYTE *)this + 30) = v18;
    v4 = *((_DWORD *)lpsrc + 59);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    goto LABEL_74;
  }
LABEL_72:
  v17 = *((_BYTE *)lpsrc + 29);
  *((_DWORD *)this + 59) |= 0x10u;
  *((_BYTE *)this + 29) = v17;
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x20) != 0)
    goto LABEL_73;
LABEL_11:
  if ((v4 & 0x40) == 0)
    goto LABEL_12;
LABEL_74:
  v19 = *((_BYTE *)lpsrc + 31);
  *((_DWORD *)this + 59) |= 0x40u;
  *((_BYTE *)this + 31) = v19;
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    v5 = *((_BYTE *)lpsrc + 96);
    *((_DWORD *)this + 59) |= 0x80u;
    *((_BYTE *)this + 96) = v5;
    v4 = *((_DWORD *)lpsrc + 59);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0)
    goto LABEL_26;
  if ((v4 & 0x100) != 0)
  {
    v6 = *((_DWORD *)lpsrc + 8);
    if ((v6 - 1) >= 6 && v6 != -1)
      __assert_rtn("set_invite_type", "CATM.pb.h", 10857, "::awd::metrics::enum_ATM_invite_call_type_IsValid(value)");
    *((_DWORD *)this + 59) |= 0x100u;
    *((_DWORD *)this + 8) = v6;
    v4 = *((_DWORD *)lpsrc + 59);
  }
  if ((v4 & 0x200) != 0)
  {
    v38 = (const std::string *)*((_QWORD *)lpsrc + 5);
    *((_DWORD *)this + 59) |= 0x200u;
    v39 = (std::string *)*((_QWORD *)this + 5);
    if (v39 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v39 = (std::string *)operator new();
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 5) = v39;
    }
    std::string::operator=(v39, v38);
    v4 = *((_DWORD *)lpsrc + 59);
    if ((v4 & 0x400) == 0)
    {
LABEL_20:
      if ((v4 & 0x800) == 0)
        goto LABEL_21;
      goto LABEL_107;
    }
  }
  else if ((v4 & 0x400) == 0)
  {
    goto LABEL_20;
  }
  v40 = *((_DWORD *)lpsrc + 9);
  *((_DWORD *)this + 59) |= 0x400u;
  *((_DWORD *)this + 9) = v40;
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x800) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_110;
  }
LABEL_107:
  v41 = (const std::string *)*((_QWORD *)lpsrc + 6);
  *((_DWORD *)this + 59) |= 0x800u;
  v42 = (std::string *)*((_QWORD *)this + 6);
  if (v42 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v42 = (std::string *)operator new();
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 6) = v42;
  }
  std::string::operator=(v42, v41);
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x1000) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_111;
  }
LABEL_110:
  v43 = *((_BYTE *)lpsrc + 97);
  *((_DWORD *)this + 59) |= 0x1000u;
  *((_BYTE *)this + 97) = v43;
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x2000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_114;
  }
LABEL_111:
  v44 = (const std::string *)*((_QWORD *)lpsrc + 7);
  *((_DWORD *)this + 59) |= 0x2000u;
  v45 = (std::string *)*((_QWORD *)this + 7);
  if (v45 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v45 = (std::string *)operator new();
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 7) = v45;
  }
  std::string::operator=(v45, v44);
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x4000) == 0)
  {
LABEL_24:
    if ((v4 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_114:
  v46 = (const std::string *)*((_QWORD *)lpsrc + 8);
  *((_DWORD *)this + 59) |= 0x4000u;
  v47 = (std::string *)*((_QWORD *)this + 8);
  if (v47 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v47 = (std::string *)operator new();
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 8) = v47;
  }
  std::string::operator=(v47, v46);
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x8000) != 0)
  {
LABEL_25:
    v7 = *((_DWORD *)lpsrc + 18);
    *((_DWORD *)this + 59) |= 0x8000u;
    *((_DWORD *)this + 18) = v7;
    v4 = *((_DWORD *)lpsrc + 59);
  }
LABEL_26:
  if ((v4 & 0xFF0000) == 0)
    goto LABEL_36;
  if ((v4 & 0x10000) != 0)
  {
    v20 = *((_DWORD *)lpsrc + 19);
    *((_DWORD *)this + 59) |= 0x10000u;
    *((_DWORD *)this + 19) = v20;
    v4 = *((_DWORD *)lpsrc + 59);
    if ((v4 & 0x20000) == 0)
    {
LABEL_29:
      if ((v4 & 0x40000) == 0)
        goto LABEL_30;
      goto LABEL_80;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_29;
  }
  v21 = (const std::string *)*((_QWORD *)lpsrc + 10);
  *((_DWORD *)this + 59) |= 0x20000u;
  v22 = (std::string *)*((_QWORD *)this + 10);
  if (v22 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v22 = (std::string *)operator new();
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 10) = v22;
  }
  std::string::operator=(v22, v21);
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x40000) == 0)
  {
LABEL_30:
    if ((v4 & 0x80000) == 0)
      goto LABEL_31;
    goto LABEL_83;
  }
LABEL_80:
  v23 = (const std::string *)*((_QWORD *)lpsrc + 11);
  *((_DWORD *)this + 59) |= 0x40000u;
  v24 = (std::string *)*((_QWORD *)this + 11);
  if (v24 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v24 = (std::string *)operator new();
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 11) = v24;
  }
  std::string::operator=(v24, v23);
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x80000) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000) == 0)
      goto LABEL_32;
    goto LABEL_86;
  }
LABEL_83:
  v25 = (const std::string *)*((_QWORD *)lpsrc + 13);
  *((_DWORD *)this + 59) |= 0x80000u;
  v26 = (std::string *)*((_QWORD *)this + 13);
  if (v26 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v26 = (std::string *)operator new();
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 13) = v26;
  }
  std::string::operator=(v26, v25);
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x100000) == 0)
  {
LABEL_32:
    if ((v4 & 0x200000) == 0)
      goto LABEL_33;
    goto LABEL_89;
  }
LABEL_86:
  v27 = (const std::string *)*((_QWORD *)lpsrc + 14);
  *((_DWORD *)this + 59) |= 0x100000u;
  v28 = (std::string *)*((_QWORD *)this + 14);
  if (v28 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v28 = (std::string *)operator new();
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 14) = v28;
  }
  std::string::operator=(v28, v27);
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x200000) == 0)
  {
LABEL_33:
    if ((v4 & 0x400000) == 0)
      goto LABEL_34;
    goto LABEL_90;
  }
LABEL_89:
  v29 = *((_BYTE *)lpsrc + 98);
  *((_DWORD *)this + 59) |= 0x200000u;
  *((_BYTE *)this + 98) = v29;
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x400000) == 0)
  {
LABEL_34:
    if ((v4 & 0x800000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_90:
  v30 = *((_DWORD *)lpsrc + 25);
  *((_DWORD *)this + 59) |= 0x400000u;
  *((_DWORD *)this + 25) = v30;
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x800000) != 0)
  {
LABEL_35:
    v8 = *((_DWORD *)lpsrc + 34);
    *((_DWORD *)this + 59) |= 0x800000u;
    *((_DWORD *)this + 34) = v8;
    v4 = *((_DWORD *)lpsrc + 59);
  }
LABEL_36:
  if (!HIBYTE(v4))
    goto LABEL_45;
  if ((v4 & 0x1000000) != 0)
  {
    v56 = (const std::string *)*((_QWORD *)lpsrc + 15);
    *((_DWORD *)this + 59) |= 0x1000000u;
    v57 = (std::string *)*((_QWORD *)this + 15);
    if (v57 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v57 = (std::string *)operator new();
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 15) = v57;
    }
    std::string::operator=(v57, v56);
    v4 = *((_DWORD *)lpsrc + 59);
    if ((v4 & 0x2000000) == 0)
    {
LABEL_39:
      if ((v4 & 0x4000000) == 0)
        goto LABEL_40;
      goto LABEL_134;
    }
  }
  else if ((v4 & 0x2000000) == 0)
  {
    goto LABEL_39;
  }
  v58 = (const std::string *)*((_QWORD *)lpsrc + 16);
  *((_DWORD *)this + 59) |= 0x2000000u;
  v59 = (std::string *)*((_QWORD *)this + 16);
  if (v59 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v59 = (std::string *)operator new();
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 16) = v59;
  }
  std::string::operator=(v59, v58);
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_40:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_41;
    goto LABEL_137;
  }
LABEL_134:
  v60 = (const std::string *)*((_QWORD *)lpsrc + 18);
  *((_DWORD *)this + 59) |= 0x4000000u;
  v61 = (std::string *)*((_QWORD *)this + 18);
  if (v61 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v61 = (std::string *)operator new();
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 18) = v61;
  }
  std::string::operator=(v61, v60);
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_42;
    goto LABEL_138;
  }
LABEL_137:
  v62 = *((_DWORD *)lpsrc + 35);
  *((_DWORD *)this + 59) |= 0x8000000u;
  *((_DWORD *)this + 35) = v62;
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_43;
    goto LABEL_139;
  }
LABEL_138:
  v63 = *((_DWORD *)lpsrc + 38);
  *((_DWORD *)this + 59) |= 0x10000000u;
  *((_DWORD *)this + 38) = v63;
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_44;
LABEL_140:
    v65 = *((_DWORD *)lpsrc + 39);
    *((_DWORD *)this + 59) |= 0x40000000u;
    *((_DWORD *)this + 39) = v65;
    if ((*((_DWORD *)lpsrc + 59) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_141;
  }
LABEL_139:
  v64 = *((_BYTE *)lpsrc + 99);
  *((_DWORD *)this + 59) |= 0x20000000u;
  *((_BYTE *)this + 99) = v64;
  v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x40000000) != 0)
    goto LABEL_140;
LABEL_44:
  if ((v4 & 0x80000000) == 0)
    goto LABEL_45;
LABEL_141:
  v66 = *((_DWORD *)lpsrc + 42);
  *((_DWORD *)this + 59) |= 0x80000000;
  *((_DWORD *)this + 42) = v66;
LABEL_45:
  v9 = *((_DWORD *)lpsrc + 60);
  if (!(_BYTE)v9)
    goto LABEL_56;
  if ((v9 & 1) != 0)
  {
    v31 = *((_QWORD *)lpsrc + 20);
    *((_DWORD *)this + 60) |= 1u;
    *((_QWORD *)this + 20) = v31;
    v9 = *((_DWORD *)lpsrc + 60);
    if ((v9 & 2) == 0)
    {
LABEL_48:
      if ((v9 & 4) == 0)
        goto LABEL_49;
      goto LABEL_94;
    }
  }
  else if ((v9 & 2) == 0)
  {
    goto LABEL_48;
  }
  v32 = *((_DWORD *)lpsrc + 43);
  *((_DWORD *)this + 60) |= 2u;
  *((_DWORD *)this + 43) = v32;
  v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 4) == 0)
  {
LABEL_49:
    if ((v9 & 8) == 0)
      goto LABEL_50;
    goto LABEL_95;
  }
LABEL_94:
  v33 = *((_BYTE *)lpsrc + 196);
  *((_DWORD *)this + 60) |= 4u;
  *((_BYTE *)this + 196) = v33;
  v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 8) == 0)
  {
LABEL_50:
    if ((v9 & 0x10) == 0)
      goto LABEL_51;
    goto LABEL_98;
  }
LABEL_95:
  v34 = (const std::string *)*((_QWORD *)lpsrc + 22);
  *((_DWORD *)this + 60) |= 8u;
  v35 = (std::string *)*((_QWORD *)this + 22);
  if (v35 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v35 = (std::string *)operator new();
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 22) = v35;
  }
  std::string::operator=(v35, v34);
  v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 0x10) == 0)
  {
LABEL_51:
    if ((v9 & 0x20) == 0)
      goto LABEL_52;
    goto LABEL_100;
  }
LABEL_98:
  v36 = *((_DWORD *)lpsrc + 46);
  if (v36 >= 3)
    __assert_rtn("set_amr_format", "CATM.pb.h", 12050, "::awd::metrics::enum_codec_format_IsValid(value)");
  *((_DWORD *)this + 60) |= 0x10u;
  *((_DWORD *)this + 46) = v36;
  v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 0x20) == 0)
  {
LABEL_52:
    if ((v9 & 0x40) == 0)
      goto LABEL_54;
    goto LABEL_53;
  }
LABEL_100:
  v37 = *((_DWORD *)lpsrc + 47);
  if (v37 >= 6)
    __assert_rtn("set_codec", "CATM.pb.h", 12073, "::awd::metrics::enum_codec_type_IsValid(value)");
  *((_DWORD *)this + 60) |= 0x20u;
  *((_DWORD *)this + 47) = v37;
  v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 0x40) == 0)
    goto LABEL_54;
LABEL_53:
  v10 = *((_DWORD *)lpsrc + 48);
  *((_DWORD *)this + 60) |= 0x40u;
  *((_DWORD *)this + 48) = v10;
  v9 = *((_DWORD *)lpsrc + 60);
LABEL_54:
  if ((v9 & 0x80) != 0)
  {
    v11 = *((_DWORD *)lpsrc + 50);
    *((_DWORD *)this + 60) |= 0x80u;
    *((_DWORD *)this + 50) = v11;
    v9 = *((_DWORD *)lpsrc + 60);
  }
LABEL_56:
  if ((v9 & 0xFF00) == 0)
    return;
  if ((v9 & 0x100) != 0)
  {
    v48 = *((_DWORD *)lpsrc + 51);
    *((_DWORD *)this + 60) |= 0x100u;
    *((_DWORD *)this + 51) = v48;
    v9 = *((_DWORD *)lpsrc + 60);
    if ((v9 & 0x200) == 0)
    {
LABEL_59:
      if ((v9 & 0x400) == 0)
        goto LABEL_60;
      goto LABEL_120;
    }
  }
  else if ((v9 & 0x200) == 0)
  {
    goto LABEL_59;
  }
  v49 = *((_DWORD *)lpsrc + 52);
  *((_DWORD *)this + 60) |= 0x200u;
  *((_DWORD *)this + 52) = v49;
  v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 0x400) == 0)
  {
LABEL_60:
    if ((v9 & 0x800) == 0)
      goto LABEL_61;
    goto LABEL_121;
  }
LABEL_120:
  v50 = *((_DWORD *)lpsrc + 53);
  *((_DWORD *)this + 60) |= 0x400u;
  *((_DWORD *)this + 53) = v50;
  v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 0x800) == 0)
  {
LABEL_61:
    if ((v9 & 0x1000) == 0)
      goto LABEL_62;
    goto LABEL_122;
  }
LABEL_121:
  v51 = *((_DWORD *)lpsrc + 54);
  *((_DWORD *)this + 60) |= 0x800u;
  *((_DWORD *)this + 54) = v51;
  v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 0x1000) == 0)
  {
LABEL_62:
    if ((v9 & 0x2000) == 0)
      goto LABEL_63;
LABEL_123:
    v53 = *((_DWORD *)lpsrc + 55);
    *((_DWORD *)this + 60) |= 0x2000u;
    *((_DWORD *)this + 55) = v53;
    if ((*((_DWORD *)lpsrc + 60) & 0x4000) == 0)
      return;
    goto LABEL_124;
  }
LABEL_122:
  v52 = *((_BYTE *)lpsrc + 197);
  *((_DWORD *)this + 60) |= 0x1000u;
  *((_BYTE *)this + 197) = v52;
  v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 0x2000) != 0)
    goto LABEL_123;
LABEL_63:
  if ((v9 & 0x4000) == 0)
    return;
LABEL_124:
  v54 = (const std::string *)*((_QWORD *)lpsrc + 28);
  *((_DWORD *)this + 60) |= 0x4000u;
  v55 = (std::string *)*((_QWORD *)this + 28);
  if (v55 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v55 = (std::string *)operator new();
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 28) = v55;
  }
  std::string::operator=(v55, v54);
}

void sub_1BEE849D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::ATM_CallConnectEvent::IsInitialized(awd::metrics::ATM_CallConnectEvent *this)
{
  return 1;
}

_QWORD *awd::metrics::ATM_CallConnectEvent::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_CallConnectEvent");
}

void awd::metrics::ATM_CallEndEvent_myreason::MergeFrom(awd::metrics::ATM_CallEndEvent_myreason *this, const awd::metrics::ATM_CallEndEvent_myreason *a2)
{
  int v4;
  std::string *v5;
  const std::string *v6;
  std::string *v7;
  int v8;
  const std::string *v9;
  std::string *v10;
  const std::string *v11;
  std::string *v12;
  const std::string *v13;
  std::string *v14;
  _BYTE v15[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 48);
  if (!(_BYTE)v4)
    return;
  v5 = (std::string *)MEMORY[0x1E0DE8338];
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
  {
    v6 = (const std::string *)*((_QWORD *)a2 + 1);
    *((_DWORD *)this + 12) |= 1u;
    v7 = (std::string *)*((_QWORD *)this + 1);
    if (v7 == v5)
    {
      v7 = (std::string *)operator new();
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 1) = v7;
    }
    std::string::operator=(v7, v6);
    v4 = *((_DWORD *)a2 + 12);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0)
        goto LABEL_7;
LABEL_14:
      v9 = (const std::string *)*((_QWORD *)a2 + 2);
      *((_DWORD *)this + 12) |= 4u;
      v10 = (std::string *)*((_QWORD *)this + 2);
      if (v10 == v5)
      {
        v10 = (std::string *)operator new();
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 2) = v10;
      }
      std::string::operator=(v10, v9);
      v4 = *((_DWORD *)a2 + 12);
      if ((v4 & 8) == 0)
      {
LABEL_8:
        if ((v4 & 0x10) == 0)
          return;
        goto LABEL_20;
      }
      goto LABEL_17;
    }
  }
  else if ((*((_BYTE *)a2 + 48) & 2) == 0)
  {
    goto LABEL_6;
  }
  v8 = *((_DWORD *)a2 + 10);
  *((_DWORD *)this + 12) |= 2u;
  *((_DWORD *)this + 10) = v8;
  v4 = *((_DWORD *)a2 + 12);
  if ((v4 & 4) != 0)
    goto LABEL_14;
LABEL_7:
  if ((v4 & 8) == 0)
    goto LABEL_8;
LABEL_17:
  v11 = (const std::string *)*((_QWORD *)a2 + 3);
  *((_DWORD *)this + 12) |= 8u;
  v12 = (std::string *)*((_QWORD *)this + 3);
  if (v12 == v5)
  {
    v12 = (std::string *)operator new();
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 3) = v12;
  }
  std::string::operator=(v12, v11);
  if ((*((_DWORD *)a2 + 12) & 0x10) != 0)
  {
LABEL_20:
    v13 = (const std::string *)*((_QWORD *)a2 + 4);
    *((_DWORD *)this + 12) |= 0x10u;
    v14 = (std::string *)*((_QWORD *)this + 4);
    if (v14 == v5)
    {
      v14 = (std::string *)operator new();
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 4) = v14;
    }
    std::string::operator=(v14, v13);
  }
}

void sub_1BEE84BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *awd::metrics::ATM_CallEndEvent_myreason::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;

  v1 = this;
  v2 = this[1];
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x1C3B87100](v2, 0x1012C40EC159624);
  }
  v5 = v1[2];
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (_QWORD *)MEMORY[0x1C3B87100](v5, 0x1012C40EC159624);
  }
  v7 = v1[3];
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (_QWORD *)MEMORY[0x1C3B87100](v7, 0x1012C40EC159624);
  }
  v9 = v1[4];
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    JUMPOUT(0x1C3B87100);
  }
  return this;
}

void awd::metrics::ATM_CallEndEvent_myreason::~ATM_CallEndEvent_myreason(awd::metrics::ATM_CallEndEvent_myreason *this)
{
  *(_QWORD *)this = &off_1E78BF270;
  awd::metrics::ATM_CallEndEvent_myreason::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF270;
  awd::metrics::ATM_CallEndEvent_myreason::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t awd::metrics::ATM_CallEndEvent_myreason::New(awd::metrics::ATM_CallEndEvent_myreason *this)
{
  uint64_t result;
  uint64_t v2;

  result = operator new();
  v2 = MEMORY[0x1E0DE8338];
  *(_QWORD *)result = &off_1E78BF270;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v2;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t awd::metrics::ATM_CallEndEvent_myreason::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(this + 48))
  {
    v1 = MEMORY[0x1E0DE8338];
    if ((*(_BYTE *)(this + 48) & 1) != 0)
    {
      v2 = *(_QWORD *)(this + 8);
      if (v2 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 40) = 0;
    if ((*(_BYTE *)(this + 48) & 4) != 0)
    {
      v3 = *(_QWORD *)(this + 16);
      if (v3 != v1)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 48) & 8) != 0)
    {
      v4 = *(_QWORD *)(this + 24);
      if (v4 != v1)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 48) & 0x10) != 0)
    {
      v5 = *(_QWORD *)(this + 32);
      if (v5 != v1)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t awd::metrics::ATM_CallEndEvent_myreason::MergePartialFromCodedStream(awd::metrics::ATM_CallEndEvent_myreason *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  _QWORD *v9;
  uint64_t result;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  _BYTE *v14;
  int v15;
  _QWORD *v16;
  _BYTE *v17;
  _QWORD *v18;
  _BYTE *v19;
  _QWORD *v20;

  v4 = (unsigned int *)((char *)this + 40);
  v5 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 < *((_QWORD *)a2 + 2) && (*v6 & 0x80000000) == 0)
    {
      TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
LABEL_7:
      switch(TagFallback >> 3)
      {
        case 1u:
          v8 = TagFallback & 7;
          if (v8 != 2)
            goto LABEL_26;
          *((_DWORD *)this + 12) |= 1u;
          if (*((_QWORD *)this + 1) == v5)
          {
            v9 = (_QWORD *)operator new();
            v9[1] = 0;
            v9[2] = 0;
            *v9 = 0;
            *((_QWORD *)this + 1) = v9;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if ((_DWORD)result)
          {
            v12 = (_BYTE *)*((_QWORD *)a2 + 1);
            v11 = *((_QWORD *)a2 + 2);
            if ((unint64_t)v12 < v11 && *v12 == 16)
            {
              v13 = v12 + 1;
              *((_QWORD *)a2 + 1) = v13;
              goto LABEL_18;
            }
            continue;
          }
          return result;
        case 2u:
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_26;
          v13 = (char *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
LABEL_18:
          if ((unint64_t)v13 >= v11 || *v13 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
            if (!(_DWORD)result)
              return result;
            v14 = (_BYTE *)*((_QWORD *)a2 + 1);
            v11 = *((_QWORD *)a2 + 2);
          }
          else
          {
            *v4 = *v13;
            v14 = v13 + 1;
            *((_QWORD *)a2 + 1) = v14;
          }
          v15 = *((_DWORD *)this + 12) | 2;
          *((_DWORD *)this + 12) = v15;
          if ((unint64_t)v14 < v11 && *v14 == 26)
          {
            *((_QWORD *)a2 + 1) = v14 + 1;
            goto LABEL_34;
          }
          continue;
        case 3u:
          v8 = TagFallback & 7;
          if (v8 != 2)
            goto LABEL_26;
          v15 = *((_DWORD *)this + 12);
LABEL_34:
          *((_DWORD *)this + 12) = v15 | 4;
          if (*((_QWORD *)this + 2) == v5)
          {
            v16 = (_QWORD *)operator new();
            v16[1] = 0;
            v16[2] = 0;
            *v16 = 0;
            *((_QWORD *)this + 2) = v16;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!(_DWORD)result)
            return result;
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 != 34)
            continue;
          *((_QWORD *)a2 + 1) = v17 + 1;
LABEL_40:
          *((_DWORD *)this + 12) |= 8u;
          if (*((_QWORD *)this + 3) == v5)
          {
            v18 = (_QWORD *)operator new();
            v18[1] = 0;
            v18[2] = 0;
            *v18 = 0;
            *((_QWORD *)this + 3) = v18;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!(_DWORD)result)
            return result;
          v19 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 != 42)
            continue;
          *((_QWORD *)a2 + 1) = v19 + 1;
LABEL_46:
          *((_DWORD *)this + 12) |= 0x10u;
          if (*((_QWORD *)this + 4) == v5)
          {
            v20 = (_QWORD *)operator new();
            v20[1] = 0;
            v20[2] = 0;
            *v20 = 0;
            *((_QWORD *)this + 4) = v20;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!(_DWORD)result)
            return result;
          if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
            || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          {
            continue;
          }
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        case 4u:
          v8 = TagFallback & 7;
          if (v8 == 2)
            goto LABEL_40;
          goto LABEL_26;
        case 5u:
          v8 = TagFallback & 7;
          if (v8 != 2)
            goto LABEL_26;
          goto LABEL_46;
        default:
          v8 = TagFallback & 7;
LABEL_26:
          if (v8 == 4)
            return 1;
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
          return 0;
      }
    }
    break;
  }
  TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
  *((_DWORD *)a2 + 8) = TagFallback;
  if ((_DWORD)TagFallback)
    goto LABEL_7;
  return 1;
}

uint64_t awd::metrics::ATM_CallEndEvent_myreason::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 48);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if ((*(_DWORD *)(v5 + 48) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::metrics::ATM_CallEndEvent_myreason::ByteSize(awd::metrics::ATM_CallEndEvent_myreason *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  int v30;

  LOBYTE(v2) = *((_BYTE *)this + 48);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_50;
  }
  if ((*((_BYTE *)this + 48) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 48) & 2) == 0)
      goto LABEL_19;
    goto LABEL_15;
  }
  v4 = *((_QWORD *)this + 1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v9 = v10 + 1;
    v2 = *((_DWORD *)this + 12);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 2;
  }
  if (v6 < 0)
    v5 = v7;
  v3 = (v9 + v5);
  if ((v2 & 2) != 0)
  {
LABEL_15:
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11) + 1;
      v2 = *((_DWORD *)this + 12);
    }
    else
    {
      v12 = 2;
    }
    v3 = (v12 + v3);
  }
LABEL_19:
  if ((v2 & 4) != 0)
  {
    v13 = *((_QWORD *)this + 2);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v15 = v14;
    v16 = *(_QWORD *)(v13 + 8);
    if ((v14 & 0x80u) == 0)
      v17 = *(unsigned __int8 *)(v13 + 23);
    else
      v17 = v16;
    if (v17 >= 0x80)
    {
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17);
      v14 = *(unsigned __int8 *)(v13 + 23);
      v16 = *(_QWORD *)(v13 + 8);
      v2 = *((_DWORD *)this + 12);
      v15 = *(_BYTE *)(v13 + 23);
    }
    else
    {
      v18 = 1;
    }
    if (v15 < 0)
      v14 = v16;
    v3 = (v3 + v18 + v14 + 1);
    if ((v2 & 8) == 0)
    {
LABEL_21:
      if ((v2 & 0x10) == 0)
        goto LABEL_50;
      goto LABEL_41;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_21;
  }
  v19 = *((_QWORD *)this + 3);
  v20 = *(unsigned __int8 *)(v19 + 23);
  v21 = v20;
  v22 = *(_QWORD *)(v19 + 8);
  if ((v20 & 0x80u) == 0)
    v23 = *(unsigned __int8 *)(v19 + 23);
  else
    v23 = v22;
  if (v23 >= 0x80)
  {
    v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23);
    v20 = *(unsigned __int8 *)(v19 + 23);
    v22 = *(_QWORD *)(v19 + 8);
    v2 = *((_DWORD *)this + 12);
    v21 = *(_BYTE *)(v19 + 23);
  }
  else
  {
    v24 = 1;
  }
  if (v21 < 0)
    v20 = v22;
  v3 = (v3 + v24 + v20 + 1);
  if ((v2 & 0x10) != 0)
  {
LABEL_41:
    v25 = *((_QWORD *)this + 4);
    v26 = *(unsigned __int8 *)(v25 + 23);
    v27 = v26;
    v28 = *(_QWORD *)(v25 + 8);
    if ((v26 & 0x80u) == 0)
      v29 = *(unsigned __int8 *)(v25 + 23);
    else
      v29 = v28;
    if (v29 >= 0x80)
    {
      v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v29);
      v26 = *(unsigned __int8 *)(v25 + 23);
      v28 = *(_QWORD *)(v25 + 8);
      v27 = *(_BYTE *)(v25 + 23);
    }
    else
    {
      v30 = 1;
    }
    if (v27 < 0)
      v26 = v28;
    v3 = (v3 + v30 + v26 + 1);
  }
LABEL_50:
  *((_DWORD *)this + 11) = v3;
  return v3;
}

void awd::metrics::ATM_CallEndEvent_myreason::CheckTypeAndMergeFrom(awd::metrics::ATM_CallEndEvent_myreason *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  awd::metrics::ATM_CallEndEvent_myreason::MergeFrom(this, lpsrc);
}

uint64_t awd::metrics::ATM_CallEndEvent_myreason::IsInitialized(awd::metrics::ATM_CallEndEvent_myreason *this)
{
  return 1;
}

_QWORD *awd::metrics::ATM_CallEndEvent_myreason::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_CallEndEvent.myreason");
}

void awd::metrics::ATM_CallEndEvent_handover::MergeFrom(awd::metrics::ATM_CallEndEvent_handover *this, const awd::metrics::ATM_CallEndEvent_handover *a2)
{
  int v4;
  int v5;
  char v6;
  _BYTE v7[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 20);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 20) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 5) |= 1u;
      *((_DWORD *)this + 2) = v5;
      v4 = *((_DWORD *)a2 + 5);
    }
    if ((v4 & 2) != 0)
    {
      v6 = *((_BYTE *)a2 + 12);
      *((_DWORD *)this + 5) |= 2u;
      *((_BYTE *)this + 12) = v6;
    }
  }
}

void sub_1BEE855B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::metrics::ATM_CallEndEvent_handover::~ATM_CallEndEvent_handover(awd::metrics::ATM_CallEndEvent_handover *this)
{
  *(_QWORD *)this = &off_1E78BF2E8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF2E8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t awd::metrics::ATM_CallEndEvent_handover::New(awd::metrics::ATM_CallEndEvent_handover *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_1E78BF2E8;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t awd::metrics::ATM_CallEndEvent_handover::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 20))
  {
    *(_DWORD *)(this + 8) = 0;
    *(_BYTE *)(this + 12) = 0;
  }
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t awd::metrics::ATM_CallEndEvent_handover::MergePartialFromCodedStream(awd::metrics::ATM_CallEndEvent_handover *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  int v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v6 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v16 = 0;
      v9 = (char *)*((_QWORD *)a2 + 1);
      v7 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v9 >= v7 || *v9 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v16);
        if (!(_DWORD)result)
          return result;
        v10 = v16;
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        v7 = *((_QWORD *)a2 + 2);
      }
      else
      {
        v10 = *v9;
        v11 = v9 + 1;
        *((_QWORD *)a2 + 1) = v11;
      }
      *((_DWORD *)this + 2) = v10;
      *((_DWORD *)this + 5) |= 1u;
      if ((unint64_t)v11 < v7 && *v11 == 16)
      {
        v8 = v11 + 1;
        *((_QWORD *)a2 + 1) = v8;
LABEL_23:
        v15 = 0;
        if ((unint64_t)v8 >= v7 || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v15);
          if (!(_DWORD)result)
            return result;
          v12 = v15;
          v13 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v7 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v12 = *v8;
          v13 = (unsigned __int8 *)(v8 + 1);
          *((_QWORD *)a2 + 1) = v13;
        }
        *((_BYTE *)this + 12) = v12 != 0;
        *((_DWORD *)this + 5) |= 2u;
        if (v13 == (unsigned __int8 *)v7 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v6 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v8 = (char *)*((_QWORD *)a2 + 1);
        v7 = *((_QWORD *)a2 + 2);
        goto LABEL_23;
      }
    }
    else
    {
      v6 = TagFallback & 7;
    }
LABEL_15:
    if (v6 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t awd::metrics::ATM_CallEndEvent_handover::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 20);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 12), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::ATM_CallEndEvent_handover::ByteSize(awd::metrics::ATM_CallEndEvent_handover *this)
{
  int v2;
  unsigned int v3;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;

  LOBYTE(v2) = *((_BYTE *)this + 20);
  if ((_BYTE)v2)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if ((v5 & 0x80000000) != 0)
      {
        v3 = 11;
      }
      else if (v5 >= 0x80)
      {
        v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
        v2 = *((_DWORD *)this + 5);
      }
      else
      {
        v3 = 2;
      }
    }
    else
    {
      v3 = 0;
    }
    if ((v2 & 2) != 0)
      result = v3 + 2;
    else
      result = v3;
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

void awd::metrics::ATM_CallEndEvent_handover::CheckTypeAndMergeFrom(awd::metrics::ATM_CallEndEvent_handover *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  awd::metrics::ATM_CallEndEvent_handover::MergeFrom(this, lpsrc);
}

uint64_t awd::metrics::ATM_CallEndEvent_handover::IsInitialized(awd::metrics::ATM_CallEndEvent_handover *this)
{
  return 1;
}

_QWORD *awd::metrics::ATM_CallEndEvent_handover::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_CallEndEvent.handover");
}

double awd::metrics::ATM_CallEndEvent::SharedCtor(awd::metrics::ATM_CallEndEvent *this)
{
  uint64_t v1;
  double result;

  *((_DWORD *)this + 167) = 0;
  v1 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v1;
  *((_QWORD *)this + 3) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 4) = v1;
  *((_QWORD *)this + 5) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 6) = v1;
  *((_QWORD *)this + 7) = v1;
  *((_QWORD *)this + 8) = v1;
  *((_QWORD *)this + 9) = v1;
  *((_QWORD *)this + 10) = v1;
  *((_QWORD *)this + 11) = v1;
  *((_QWORD *)this + 13) = v1;
  *((_QWORD *)this + 14) = v1;
  result = 0.0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = v1;
  *((_QWORD *)this + 19) = v1;
  *((_QWORD *)this + 20) = v1;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 23) = 0;
  *(_OWORD *)((char *)this + 168) = xmmword_1BF29C350;
  *((_QWORD *)this + 25) = v1;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 26) = 0x100000000;
  *((_DWORD *)this + 72) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 29) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 32) = v1;
  *((_QWORD *)this + 50) = 0;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *(_OWORD *)((char *)this + 324) = 0u;
  *(_OWORD *)((char *)this + 340) = 0u;
  *(_OWORD *)((char *)this + 356) = 0u;
  *(_OWORD *)((char *)this + 372) = 0u;
  *(_OWORD *)((char *)this + 382) = 0u;
  *((_QWORD *)this + 51) = v1;
  *((_QWORD *)this + 52) = 0;
  *((_WORD *)this + 199) = 0;
  *((_QWORD *)this + 69) = 0;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_DWORD *)this + 158) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_QWORD *)((char *)this + 636) = 1;
  *((_QWORD *)this + 81) = v1;
  *((_QWORD *)this + 82) = 0;
  *((_DWORD *)this + 161) = 0;
  *((_BYTE *)this + 664) = 0;
  *((_DWORD *)this + 172) = 0;
  *((_OWORD *)this + 42) = 0u;
  return result;
}

void awd::metrics::ATM_CallEndEvent::~ATM_CallEndEvent(awd::metrics::ATM_CallEndEvent *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78BF360;
  awd::metrics::ATM_CallEndEvent::SharedDtor(this);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::ATM_CallEndEvent_myreason>::TypeHandler>((uint64_t *)this + 70);
  v2 = *((_QWORD *)this + 67);
  if (v2)
    MEMORY[0x1C3B870E8](v2, 0x1000C8077774924);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::ATM_CallEndEvent_myreason>::TypeHandler>((uint64_t *)this + 64);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 106);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 66);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::metrics::ATM_CallEndEvent::~ATM_CallEndEvent(this);
  JUMPOUT(0x1C3B87100);
}

_QWORD *awd::metrics::ATM_CallEndEvent::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = this;
  v2 = this[2];
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x1C3B87100](v2, 0x1012C40EC159624);
  }
  v5 = v1[4];
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (_QWORD *)MEMORY[0x1C3B87100](v5, 0x1012C40EC159624);
  }
  v7 = v1[6];
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (_QWORD *)MEMORY[0x1C3B87100](v7, 0x1012C40EC159624);
  }
  v9 = v1[7];
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    this = (_QWORD *)MEMORY[0x1C3B87100](v9, 0x1012C40EC159624);
  }
  v11 = v1[8];
  if (v11 != v3 && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    this = (_QWORD *)MEMORY[0x1C3B87100](v11, 0x1012C40EC159624);
  }
  v12 = v1[9];
  if (v12 != v3 && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    this = (_QWORD *)MEMORY[0x1C3B87100](v12, 0x1012C40EC159624);
  }
  v13 = v1[10];
  if (v13 != v3 && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    this = (_QWORD *)MEMORY[0x1C3B87100](v13, 0x1012C40EC159624);
  }
  v14 = v1[11];
  if (v14 != v3 && v14)
  {
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    this = (_QWORD *)MEMORY[0x1C3B87100](v14, 0x1012C40EC159624);
  }
  v15 = v1[13];
  if (v15 != v3 && v15)
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    this = (_QWORD *)MEMORY[0x1C3B87100](v15, 0x1012C40EC159624);
  }
  v16 = v1[14];
  if (v16 != v3 && v16)
  {
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
    this = (_QWORD *)MEMORY[0x1C3B87100](v16, 0x1012C40EC159624);
  }
  v17 = v1[17];
  if (v17 != v3 && v17)
  {
    if (*(char *)(v17 + 23) < 0)
      operator delete(*(void **)v17);
    this = (_QWORD *)MEMORY[0x1C3B87100](v17, 0x1012C40EC159624);
  }
  v18 = v1[19];
  if (v18 != v3 && v18)
  {
    if (*(char *)(v18 + 23) < 0)
      operator delete(*(void **)v18);
    this = (_QWORD *)MEMORY[0x1C3B87100](v18, 0x1012C40EC159624);
  }
  v19 = v1[20];
  if (v19 != v3 && v19)
  {
    if (*(char *)(v19 + 23) < 0)
      operator delete(*(void **)v19);
    this = (_QWORD *)MEMORY[0x1C3B87100](v19, 0x1012C40EC159624);
  }
  v20 = v1[25];
  if (v20 != v3 && v20)
  {
    if (*(char *)(v20 + 23) < 0)
      operator delete(*(void **)v20);
    this = (_QWORD *)MEMORY[0x1C3B87100](v20, 0x1012C40EC159624);
  }
  v21 = v1[32];
  if (v21 != v3 && v21)
  {
    if (*(char *)(v21 + 23) < 0)
      operator delete(*(void **)v21);
    this = (_QWORD *)MEMORY[0x1C3B87100](v21, 0x1012C40EC159624);
  }
  v22 = v1[51];
  if (v22 != v3 && v22)
  {
    if (*(char *)(v22 + 23) < 0)
      operator delete(*(void **)v22);
    this = (_QWORD *)MEMORY[0x1C3B87100](v22, 0x1012C40EC159624);
  }
  v23 = v1[81];
  if (v23 != v3 && v23)
  {
    if (*(char *)(v23 + 23) < 0)
      operator delete(*(void **)v23);
    JUMPOUT(0x1C3B87100);
  }
  return this;
}

uint64_t awd::metrics::ATM_CallEndEvent::New(awd::metrics::ATM_CallEndEvent *this)
{
  uint64_t v1;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E78BF360;
  *(_DWORD *)(v1 + 280) = 0;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_DWORD *)(v1 + 440) = 0;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_DWORD *)(v1 + 528) = 0;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_OWORD *)(v1 + 560) = 0u;
  *(_DWORD *)(v1 + 576) = 0;
  awd::metrics::ATM_CallEndEvent::SharedCtor((awd::metrics::ATM_CallEndEvent *)v1);
  return v1;
}

uint64_t awd::metrics::ATM_CallEndEvent::Clear(awd::metrics::ATM_CallEndEvent *this)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *((_DWORD *)this + 168);
  if ((_BYTE)v2)
  {
    *((_QWORD *)this + 1) = 0;
    if ((v2 & 2) != 0)
    {
      v3 = *((_QWORD *)this + 2);
      if (v3 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *((_QWORD *)this + 3) = 0xFFFFFFFFLL;
    *((_BYTE *)this + 100) = 0;
    v2 = *((_DWORD *)this + 168);
  }
  v4 = (_QWORD *)((char *)this + 672);
  if ((v2 & 0xFF00) != 0)
  {
    *((_DWORD *)this + 10) = -1;
    if ((v2 & 0x200) != 0)
    {
      v5 = *((_QWORD *)this + 4);
      if (v5 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 11) = 0;
    if ((*((_BYTE *)this + 673) & 8) != 0)
    {
      v6 = *((_QWORD *)this + 6);
      if (v6 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
    *((_BYTE *)this + 101) = 0;
    if ((*((_BYTE *)this + 673) & 0x20) != 0)
    {
      v7 = *((_QWORD *)this + 7);
      if (v7 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 673) & 0x40) != 0)
    {
      v8 = *((_QWORD *)this + 8);
      if (v8 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(_BYTE **)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v8 = 0;
          *(_BYTE *)(v8 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 24) = 0;
    v2 = *((_DWORD *)this + 168);
  }
  if ((v2 & 0xFF0000) != 0)
  {
    if ((v2 & 0x10000) != 0)
    {
      v9 = *((_QWORD *)this + 9);
      if (v9 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v9 + 23) < 0)
        {
          **(_BYTE **)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v9 = 0;
          *(_BYTE *)(v9 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 674) & 2) != 0)
    {
      v10 = *((_QWORD *)this + 10);
      if (v10 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(_BYTE **)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v10 = 0;
          *(_BYTE *)(v10 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 674) & 4) != 0)
    {
      v11 = *((_QWORD *)this + 11);
      if (v11 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(_BYTE **)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v11 = 0;
          *(_BYTE *)(v11 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 674) & 8) != 0)
    {
      v12 = *((_QWORD *)this + 13);
      if (v12 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v12 + 23) < 0)
        {
          **(_BYTE **)v12 = 0;
          *(_QWORD *)(v12 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v12 = 0;
          *(_BYTE *)(v12 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 674) & 0x10) != 0)
    {
      v13 = *((_QWORD *)this + 14);
      if (v13 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v13 + 23) < 0)
        {
          **(_BYTE **)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v13 = 0;
          *(_BYTE *)(v13 + 23) = 0;
        }
      }
    }
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    v2 = *((_DWORD *)this + 168);
  }
  if (HIBYTE(v2))
  {
    *((_BYTE *)this + 102) = 0;
    *((_DWORD *)this + 33) = 0;
    *((_DWORD *)this + 36) = 0;
    if ((v2 & 0x8000000) != 0)
    {
      v14 = *((_QWORD *)this + 17);
      if (v14 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v14 + 23) < 0)
        {
          **(_BYTE **)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v14 = 0;
          *(_BYTE *)(v14 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 675) & 0x10) != 0)
    {
      v15 = *((_QWORD *)this + 19);
      if (v15 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v15 + 23) < 0)
        {
          **(_BYTE **)v15 = 0;
          *(_QWORD *)(v15 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v15 = 0;
          *(_BYTE *)(v15 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 675) & 0x20) != 0)
    {
      v16 = *((_QWORD *)this + 20);
      if (v16 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v16 + 23) < 0)
        {
          **(_BYTE **)v16 = 0;
          *(_QWORD *)(v16 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v16 = 0;
          *(_BYTE *)(v16 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 37) = 0;
    *((_DWORD *)this + 42) = 0;
  }
  v17 = *((_BYTE *)this + 676);
  if (v17)
  {
    *((_BYTE *)this + 103) = 0;
    *((_DWORD *)this + 43) = 0;
    *((_DWORD *)this + 44) = 0;
    *((_QWORD *)this + 23) = 0;
    *((_DWORD *)this + 45) = -1;
    *((_DWORD *)this + 48) = 0;
    *((_BYTE *)this + 236) = 0;
    if (v17 < 0)
    {
      v18 = *((_QWORD *)this + 25);
      if (v18 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v18 + 23) < 0)
        {
          **(_BYTE **)v18 = 0;
          *(_QWORD *)(v18 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v18 = 0;
          *(_BYTE *)(v18 + 23) = 0;
        }
      }
    }
  }
  v19 = *((_DWORD *)this + 169);
  if ((v19 & 0xFF00) != 0)
  {
    *((_BYTE *)this + 237) = 0;
    *((_DWORD *)this + 49) = 0;
    *((_QWORD *)this + 26) = 0x100000000;
    *((_QWORD *)this + 27) = 0;
    *((_QWORD *)this + 28) = 0;
    *((_DWORD *)this + 58) = 0;
  }
  if ((v19 & 0xFF0000) != 0)
  {
    *((_DWORD *)this + 72) = 0;
    *((_QWORD *)this + 30) = 0;
    *((_QWORD *)this + 31) = 0;
    if ((v19 & 0x200000) != 0)
    {
      v20 = *((_QWORD *)this + 32);
      if (v20 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v20 + 23) < 0)
        {
          **(_BYTE **)v20 = 0;
          *(_QWORD *)(v20 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v20 = 0;
          *(_BYTE *)(v20 + 23) = 0;
        }
      }
    }
    *((_BYTE *)this + 238) = 0;
    v19 = *((_DWORD *)this + 169);
  }
  if (HIBYTE(v19))
  {
    *((_BYTE *)this + 239) = 0;
    *((_BYTE *)this + 396) = 0;
    *(_QWORD *)((char *)this + 300) = 0;
    *(_QWORD *)((char *)this + 308) = 0;
    *(_QWORD *)((char *)this + 292) = 0;
  }
  v21 = *((_DWORD *)this + 170);
  if ((_BYTE)v21)
  {
    *(_OWORD *)((char *)this + 316) = 0u;
    *(_OWORD *)((char *)this + 332) = 0u;
  }
  if ((v21 & 0xFF00) != 0)
  {
    *(_OWORD *)((char *)this + 348) = 0u;
    *(_OWORD *)((char *)this + 364) = 0u;
  }
  if ((v21 & 0xFF0000) != 0)
  {
    *((_BYTE *)this + 397) = 0;
    *((_QWORD *)this + 50) = 0;
    *(_QWORD *)((char *)this + 388) = 0;
    *(_QWORD *)((char *)this + 380) = 0;
    if ((v21 & 0x800000) != 0)
    {
      v22 = *((_QWORD *)this + 51);
      if (v22 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v22 + 23) < 0)
        {
          **(_BYTE **)v22 = 0;
          *(_QWORD *)(v22 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v22 = 0;
          *(_BYTE *)(v22 + 23) = 0;
        }
      }
    }
  }
  if (*((_BYTE *)this + 683))
  {
    *((_QWORD *)this + 52) = 0;
    *((_BYTE *)this + 398) = 0;
    *((_QWORD *)this + 57) = 0;
    *((_QWORD *)this + 58) = 0;
    *((_QWORD *)this + 56) = 0;
  }
  v23 = *((_DWORD *)this + 171);
  if ((_BYTE)v23)
  {
    *((_BYTE *)this + 399) = 0;
    *((_DWORD *)this + 126) = 0;
    *(_OWORD *)((char *)this + 472) = 0u;
    *(_OWORD *)((char *)this + 488) = 0u;
  }
  if ((v23 & 0xFF00) != 0)
  {
    *((_DWORD *)this + 127) = 0;
    *((_BYTE *)this + 620) = 0;
    *((_QWORD *)this + 69) = 0;
    *((_DWORD *)this + 146) = 0;
  }
  if ((v23 & 0xFF0000) != 0)
  {
    *(_OWORD *)((char *)this + 588) = 0u;
    *(_OWORD *)((char *)this + 604) = 0u;
  }
  if (HIBYTE(v23))
  {
    *((_BYTE *)this + 644) = 0;
    *(_QWORD *)((char *)this + 621) = 0;
    *(_QWORD *)((char *)this + 628) = 0;
    *((_DWORD *)this + 159) = 1;
  }
  v24 = *((_BYTE *)this + 688);
  if (v24)
  {
    *((_BYTE *)this + 645) = 0;
    *((_DWORD *)this + 160) = 0;
    *((_DWORD *)this + 164) = 0;
    if ((v24 & 8) != 0)
    {
      v25 = *((_QWORD *)this + 81);
      if (v25 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v25 + 23) < 0)
        {
          **(_BYTE **)v25 = 0;
          *(_QWORD *)(v25 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v25 = 0;
          *(_BYTE *)(v25 + 23) = 0;
        }
      }
    }
    *((_WORD *)this + 323) = 0;
    *((_DWORD *)this + 165) = 0;
    *((_BYTE *)this + 664) = 0;
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Clear<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 264);
  result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Clear<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 424);
  if (*((int *)this + 130) >= 1)
  {
    v27 = 0;
    do
    {
      v28 = *(_QWORD *)(*((_QWORD *)this + 64) + 8 * v27);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
      ++v27;
    }
    while (v27 < *((int *)this + 130));
  }
  *((_DWORD *)this + 130) = 0;
  *((_DWORD *)this + 136) = 0;
  if (*((int *)this + 142) >= 1)
  {
    v29 = 0;
    do
    {
      v30 = *(_QWORD *)(*((_QWORD *)this + 70) + 8 * v29);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
      ++v29;
    }
    while (v29 < *((int *)this + 142));
  }
  *((_DWORD *)this + 142) = 0;
  *v4 = 0;
  *((_QWORD *)this + 85) = 0;
  *((_DWORD *)this + 172) = 0;
  return result;
}

uint64_t awd::metrics::ATM_CallEndEvent::MergePartialFromCodedStream(awd::metrics::ATM_CallEndEvent *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t TagFallback;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unint64_t v13;
  char *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t result;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33[13];

  v4 = (unint64_t *)((char *)a2 + 8);
  v5 = (unint64_t *)((char *)a2 + 16);
  v31 = (unsigned int *)((char *)this + 656);
  v32 = (unsigned int *)((char *)this + 660);
  v6 = MEMORY[0x1E0DE8338];
  do
  {
    while (1)
    {
      v7 = (char *)*v4;
      if (*v4 >= *v5 || *v7 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v7;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      v9 = TagFallback >> 3;
      if (TagFallback >> 3 <= 0x22D)
      {
        v10 = v9 - 1;
        if (v10 <= 0x81)
          __asm { BR              X9 }
        goto LABEL_39;
      }
      if (TagFallback >> 3 > 0x258)
        break;
      switch(v9)
      {
        case 0x22Eu:
          v11 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_40;
          v15 = (unsigned __int8 *)*v4;
          v16 = *v5;
          if ((unint64_t)v15 >= v16 || (char)*v15 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v31);
            if (!(_DWORD)result)
              return result;
            v16 = *v5;
            v30 = (unsigned __int8 *)*v4;
          }
          else
          {
            *v31 = *v15;
            v30 = v15 + 1;
            *v4 = (unint64_t)v30;
          }
          v17 = *((_DWORD *)this + 172) | 4;
          *((_DWORD *)this + 172) = v17;
          if ((int)v16 - (int)v30 >= 2 && *v30 == 250 && v30[1] == 34)
          {
            *v4 = (unint64_t)(v30 + 2);
LABEL_25:
            *((_DWORD *)this + 172) = v17 | 8;
            if (*((_QWORD *)this + 81) == v6)
            {
              v18 = (_QWORD *)operator new();
              v18[1] = 0;
              v18[2] = 0;
              *v18 = 0;
              *((_QWORD *)this + 81) = v18;
            }
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
            if (!(_DWORD)result)
              return result;
            v13 = *v5;
            v20 = (unsigned __int8 *)*v4;
            if ((int)(*v5 - *v4) >= 2 && *v20 == 128 && v20[1] == 35)
            {
              v12 = v20 + 2;
              *v4 = (unint64_t)v12;
LABEL_32:
              v33[0] = 0;
              if ((unint64_t)v12 >= v13 || (char)*v12 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v33);
                if (!(_DWORD)result)
                  return result;
                v21 = v33[0];
                v13 = *v5;
                v22 = (unsigned __int8 *)*v4;
              }
              else
              {
                v21 = *v12;
                v22 = v12 + 1;
                *v4 = (unint64_t)v22;
              }
              *((_BYTE *)this + 646) = v21 != 0;
              *((_DWORD *)this + 172) |= 0x10u;
              if ((int)v13 - (int)v22 >= 2 && *v22 == 200 && v22[1] == 37)
              {
                v23 = v22 + 2;
                *v4 = (unint64_t)v23;
LABEL_49:
                if ((unint64_t)v23 >= v13 || (char)*v23 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v32);
                  if (!(_DWORD)result)
                    return result;
                  v13 = *v5;
                  v25 = (unsigned __int8 *)*v4;
                }
                else
                {
                  *v32 = *v23;
                  v25 = v23 + 1;
                  *v4 = (unint64_t)v25;
                }
                *((_DWORD *)this + 172) |= 0x20u;
                if ((int)v13 - (int)v25 >= 2 && *v25 == 208 && v25[1] == 37)
                {
                  v24 = v25 + 2;
                  *v4 = (unint64_t)v24;
LABEL_58:
                  v33[0] = 0;
                  if ((unint64_t)v24 >= v13 || (char)*v24 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v33);
                    if (!(_DWORD)result)
                      return result;
                    v26 = v33[0];
                    v13 = *v5;
                    v27 = (unsigned __int8 *)*v4;
                  }
                  else
                  {
                    v26 = *v24;
                    v27 = v24 + 1;
                    *v4 = (unint64_t)v27;
                  }
                  *((_BYTE *)this + 647) = v26 != 0;
                  *((_DWORD *)this + 172) |= 0x40u;
                  if ((int)v13 - (int)v27 >= 2 && *v27 == 216 && v27[1] == 37)
                  {
                    v14 = (char *)(v27 + 2);
                    *v4 = (unint64_t)v14;
                    goto LABEL_67;
                  }
                }
              }
            }
          }
          break;
        case 0x22Fu:
          v11 = TagFallback & 7;
          if (v11 != 2)
            goto LABEL_40;
          v17 = *((_DWORD *)this + 172);
          goto LABEL_25;
        case 0x230u:
          v11 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_40;
          v12 = (unsigned __int8 *)*v4;
          v13 = *v5;
          goto LABEL_32;
        default:
LABEL_39:
          v11 = TagFallback & 7;
LABEL_40:
          if (v11 == 4)
            return 1;
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
          break;
      }
    }
    if (v9 == 601)
    {
      v11 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_40;
      v23 = (unsigned __int8 *)*v4;
      v13 = *v5;
      goto LABEL_49;
    }
    if (v9 == 602)
    {
      v11 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_40;
      v24 = (unsigned __int8 *)*v4;
      v13 = *v5;
      goto LABEL_58;
    }
    if (v9 != 603)
      goto LABEL_39;
    v11 = TagFallback & 7;
    if ((TagFallback & 7) != 0)
      goto LABEL_40;
    v14 = (char *)*v4;
    v13 = *v5;
LABEL_67:
    v33[0] = 0;
    if ((unint64_t)v14 >= v13 || *v14 < 0)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v33);
      if (!(_DWORD)result)
        return result;
      v28 = v33[0];
      v29 = (unsigned __int8 *)*v4;
      v13 = *v5;
    }
    else
    {
      v28 = *v14;
      v29 = (unsigned __int8 *)(v14 + 1);
      *v4 = (unint64_t)v29;
    }
    *((_BYTE *)this + 664) = v28 != 0;
    *((_DWORD *)this + 172) |= 0x80u;
  }
  while (v29 != (unsigned __int8 *)v13 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

void sub_1BEE8BA84(_Unwind_Exception *a1)
{
  uint64_t v1;

  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::ATM_CallEndEvent::set_status_code(uint64_t a1, awd::metrics *this)
{
  int v2;
  uint64_t result;

  v2 = (int)this;
  result = awd::metrics::RESPONSE_Code_IsValid(this);
  if ((result & 1) == 0)
    __assert_rtn("set_status_code", "CATM.pb.h", 14141, "::awd::metrics::RESPONSE_Code_IsValid(value)");
  *(_DWORD *)(a1 + 676) |= 0x20u;
  *(_DWORD *)(a1 + 192) = v2;
  return result;
}

uint64_t awd::metrics::ATM_CallEndEvent::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v5 = this;
  v6 = *(_DWORD *)(this + 672);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 672);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_161;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_162;
  }
LABEL_161:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_163;
  }
LABEL_162:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_164;
  }
LABEL_163:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_165;
  }
LABEL_164:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 30), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_166;
  }
LABEL_165:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 31), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_167;
  }
LABEL_166:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 100), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_168;
  }
LABEL_167:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_169;
  }
LABEL_168:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_170;
  }
LABEL_169:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_171;
  }
LABEL_170:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_172;
  }
LABEL_171:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned __int8 *)(v5 + 101), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_173;
  }
LABEL_172:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_174;
  }
LABEL_173:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_175;
  }
LABEL_174:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 96), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_176;
  }
LABEL_175:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x40000) == 0)
  {
LABEL_19:
    if ((v6 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_177;
  }
LABEL_176:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x80000) == 0)
  {
LABEL_20:
    if ((v6 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_178;
  }
LABEL_177:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x100000) == 0)
  {
LABEL_21:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_179;
  }
LABEL_178:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_180;
  }
LABEL_179:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned __int8 *)(v5 + 102), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_24;
    goto LABEL_181;
  }
LABEL_180:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(unsigned int *)(v5 + 132), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_24:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_25;
    goto LABEL_182;
  }
LABEL_181:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, *(unsigned int *)(v5 + 144), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_25:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_26;
    goto LABEL_183;
  }
LABEL_182:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_27;
    goto LABEL_184;
  }
LABEL_183:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_28;
LABEL_185:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, *(unsigned int *)(v5 + 148), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 672) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_186;
  }
LABEL_184:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x40000000) != 0)
    goto LABEL_185;
LABEL_28:
  if ((v6 & 0x80000000) == 0)
    goto LABEL_29;
LABEL_186:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, *(unsigned int *)(v5 + 168), (uint64_t)a2, a4);
LABEL_29:
  v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, *(unsigned __int8 *)(v5 + 103), (uint64_t)a2, a4);
    v7 = *(_DWORD *)(v5 + 676);
    if ((v7 & 2) == 0)
    {
LABEL_31:
      if ((v7 & 4) == 0)
        goto LABEL_32;
      goto LABEL_189;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_31;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, *(unsigned int *)(v5 + 172), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 4) == 0)
  {
LABEL_32:
    if ((v7 & 8) == 0)
      goto LABEL_33;
    goto LABEL_190;
  }
LABEL_189:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F, *(unsigned int *)(v5 + 176), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 8) == 0)
  {
LABEL_33:
    if ((v7 & 0x10) == 0)
      goto LABEL_34;
    goto LABEL_191;
  }
LABEL_190:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20, *(_QWORD *)(v5 + 184), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x10) == 0)
  {
LABEL_34:
    if ((v7 & 0x20) == 0)
      goto LABEL_35;
    goto LABEL_192;
  }
LABEL_191:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21, *(unsigned int *)(v5 + 180), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x20) == 0)
  {
LABEL_35:
    if ((v7 & 0x40) == 0)
      goto LABEL_36;
    goto LABEL_193;
  }
LABEL_192:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22, *(unsigned int *)(v5 + 192), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x40) == 0)
  {
LABEL_36:
    if ((v7 & 0x1000) == 0)
      goto LABEL_37;
    goto LABEL_194;
  }
LABEL_193:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23, *(unsigned __int8 *)(v5 + 236), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x1000) == 0)
  {
LABEL_37:
    if ((v7 & 0x2000) == 0)
      goto LABEL_38;
    goto LABEL_195;
  }
LABEL_194:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x24, *(_QWORD *)(v5 + 216), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x2000) == 0)
  {
LABEL_38:
    if ((v7 & 0x10000) == 0)
      goto LABEL_39;
    goto LABEL_196;
  }
LABEL_195:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25, *(unsigned int *)(v5 + 224), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x10000) == 0)
  {
LABEL_39:
    if ((v7 & 0x20000) == 0)
      goto LABEL_40;
    goto LABEL_197;
  }
LABEL_196:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x26, *(unsigned int *)(v5 + 240), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x20000) == 0)
  {
LABEL_40:
    if ((v7 & 0x100000) == 0)
      goto LABEL_41;
    goto LABEL_198;
  }
LABEL_197:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x27, *(unsigned int *)(v5 + 244), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x100000) == 0)
  {
LABEL_41:
    if ((v7 & 0x200000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
LABEL_198:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x28, *(unsigned int *)(v5 + 288), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 676) & 0x200000) != 0)
LABEL_42:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
LABEL_43:
  if (*(int *)(v5 + 272) >= 1)
  {
    v8 = 0;
    do
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
      ++v8;
    }
    while (v8 < *(int *)(v5 + 272));
  }
  v9 = *(_DWORD *)(v5 + 676);
  if ((v9 & 0x4000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2B, *(unsigned int *)(v5 + 228), (uint64_t)a2, a4);
    v9 = *(_DWORD *)(v5 + 676);
    if ((v9 & 0x80) == 0)
    {
LABEL_48:
      if ((v9 & 0x100) == 0)
        goto LABEL_49;
      goto LABEL_202;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_48;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v9 = *(_DWORD *)(v5 + 676);
  if ((v9 & 0x100) == 0)
  {
LABEL_49:
    if ((v9 & 0x200) == 0)
      goto LABEL_50;
    goto LABEL_203;
  }
LABEL_202:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2D, *(unsigned __int8 *)(v5 + 237), (uint64_t)a2, a4);
  v9 = *(_DWORD *)(v5 + 676);
  if ((v9 & 0x200) == 0)
  {
LABEL_50:
    if ((v9 & 0x400) == 0)
      goto LABEL_51;
    goto LABEL_204;
  }
LABEL_203:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2E, *(unsigned int *)(v5 + 196), (uint64_t)a2, a4);
  v9 = *(_DWORD *)(v5 + 676);
  if ((v9 & 0x400) == 0)
  {
LABEL_51:
    if ((v9 & 0x800) == 0)
      goto LABEL_52;
    goto LABEL_205;
  }
LABEL_204:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2F, *(unsigned int *)(v5 + 208), (uint64_t)a2, a4);
  v9 = *(_DWORD *)(v5 + 676);
  if ((v9 & 0x800) == 0)
  {
LABEL_52:
    if ((v9 & 0x8000) == 0)
      goto LABEL_53;
    goto LABEL_206;
  }
LABEL_205:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x30, *(unsigned int *)(v5 + 212), (uint64_t)a2, a4);
  v9 = *(_DWORD *)(v5 + 676);
  if ((v9 & 0x8000) == 0)
  {
LABEL_53:
    if ((v9 & 0x40000) == 0)
      goto LABEL_54;
    goto LABEL_207;
  }
LABEL_206:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x31, *(unsigned int *)(v5 + 232), (uint64_t)a2, a4);
  v9 = *(_DWORD *)(v5 + 676);
  if ((v9 & 0x40000) == 0)
  {
LABEL_54:
    if ((v9 & 0x80000) == 0)
      goto LABEL_56;
    goto LABEL_55;
  }
LABEL_207:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x32, *(unsigned int *)(v5 + 248), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 676) & 0x80000) != 0)
LABEL_55:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x33, *(unsigned int *)(v5 + 252), (uint64_t)a2, a4);
LABEL_56:
  v10 = *(_DWORD *)(v5 + 672);
  if ((v10 & 0x200000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x34, *(unsigned int *)(v5 + 120), (uint64_t)a2, a4);
    v10 = *(_DWORD *)(v5 + 672);
    if ((v10 & 0x400000) == 0)
    {
LABEL_58:
      if ((v10 & 0x800000) == 0)
        goto LABEL_60;
      goto LABEL_59;
    }
  }
  else if ((v10 & 0x400000) == 0)
  {
    goto LABEL_58;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x35, *(unsigned int *)(v5 + 124), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 672) & 0x800000) != 0)
LABEL_59:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x36, *(unsigned int *)(v5 + 128), (uint64_t)a2, a4);
LABEL_60:
  v11 = *(_DWORD *)(v5 + 676);
  if ((v11 & 0x2000000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x37, *(unsigned __int8 *)(v5 + 396), (uint64_t)a2, a4);
    v11 = *(_DWORD *)(v5 + 676);
    if ((v11 & 0x4000000) == 0)
    {
LABEL_62:
      if ((v11 & 0x8000000) == 0)
        goto LABEL_63;
      goto LABEL_214;
    }
  }
  else if ((v11 & 0x4000000) == 0)
  {
    goto LABEL_62;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x38, *(unsigned int *)(v5 + 292), (uint64_t)a2, a4);
  v11 = *(_DWORD *)(v5 + 676);
  if ((v11 & 0x8000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x10000000) == 0)
      goto LABEL_64;
    goto LABEL_215;
  }
LABEL_214:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x39, *(unsigned int *)(v5 + 296), (uint64_t)a2, a4);
  v11 = *(_DWORD *)(v5 + 676);
  if ((v11 & 0x10000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x20000000) == 0)
      goto LABEL_65;
    goto LABEL_216;
  }
LABEL_215:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3A, *(unsigned int *)(v5 + 300), (uint64_t)a2, a4);
  v11 = *(_DWORD *)(v5 + 676);
  if ((v11 & 0x20000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x40000000) == 0)
      goto LABEL_66;
LABEL_217:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3C, *(unsigned int *)(v5 + 308), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 676) & 0x80000000) == 0)
      goto LABEL_67;
    goto LABEL_218;
  }
LABEL_216:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3B, *(unsigned int *)(v5 + 304), (uint64_t)a2, a4);
  v11 = *(_DWORD *)(v5 + 676);
  if ((v11 & 0x40000000) != 0)
    goto LABEL_217;
LABEL_66:
  if ((v11 & 0x80000000) == 0)
    goto LABEL_67;
LABEL_218:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3D, *(unsigned int *)(v5 + 312), (uint64_t)a2, a4);
LABEL_67:
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3E, *(unsigned int *)(v5 + 316), (uint64_t)a2, a4);
    v12 = *(_DWORD *)(v5 + 680);
    if ((v12 & 2) == 0)
    {
LABEL_69:
      if ((v12 & 4) == 0)
        goto LABEL_70;
      goto LABEL_221;
    }
  }
  else if ((v12 & 2) == 0)
  {
    goto LABEL_69;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F, *(unsigned int *)(v5 + 320), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 4) == 0)
  {
LABEL_70:
    if ((v12 & 8) == 0)
      goto LABEL_71;
    goto LABEL_222;
  }
LABEL_221:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x40, *(unsigned int *)(v5 + 324), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 8) == 0)
  {
LABEL_71:
    if ((v12 & 0x10) == 0)
      goto LABEL_72;
    goto LABEL_223;
  }
LABEL_222:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x41, *(unsigned int *)(v5 + 328), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x10) == 0)
  {
LABEL_72:
    if ((v12 & 0x20) == 0)
      goto LABEL_73;
    goto LABEL_224;
  }
LABEL_223:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x42, *(unsigned int *)(v5 + 332), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x20) == 0)
  {
LABEL_73:
    if ((v12 & 0x40) == 0)
      goto LABEL_74;
    goto LABEL_225;
  }
LABEL_224:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x43, *(unsigned int *)(v5 + 336), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x40) == 0)
  {
LABEL_74:
    if ((v12 & 0x80) == 0)
      goto LABEL_75;
    goto LABEL_226;
  }
LABEL_225:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x44, *(unsigned int *)(v5 + 340), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x80) == 0)
  {
LABEL_75:
    if ((v12 & 0x100) == 0)
      goto LABEL_76;
    goto LABEL_227;
  }
LABEL_226:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x45, *(unsigned int *)(v5 + 344), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x100) == 0)
  {
LABEL_76:
    if ((v12 & 0x200) == 0)
      goto LABEL_77;
    goto LABEL_228;
  }
LABEL_227:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x46, *(unsigned int *)(v5 + 348), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x200) == 0)
  {
LABEL_77:
    if ((v12 & 0x400) == 0)
      goto LABEL_78;
    goto LABEL_229;
  }
LABEL_228:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x47, *(unsigned int *)(v5 + 352), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x400) == 0)
  {
LABEL_78:
    if ((v12 & 0x800) == 0)
      goto LABEL_79;
    goto LABEL_230;
  }
LABEL_229:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x48, *(unsigned int *)(v5 + 356), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x800) == 0)
  {
LABEL_79:
    if ((v12 & 0x1000) == 0)
      goto LABEL_80;
    goto LABEL_231;
  }
LABEL_230:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x49, *(unsigned int *)(v5 + 360), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x1000) == 0)
  {
LABEL_80:
    if ((v12 & 0x2000) == 0)
      goto LABEL_81;
    goto LABEL_232;
  }
LABEL_231:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4A, *(unsigned int *)(v5 + 364), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x2000) == 0)
  {
LABEL_81:
    if ((v12 & 0x4000) == 0)
      goto LABEL_82;
    goto LABEL_233;
  }
LABEL_232:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4B, *(unsigned int *)(v5 + 368), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x4000) == 0)
  {
LABEL_82:
    if ((v12 & 0x8000) == 0)
      goto LABEL_83;
    goto LABEL_234;
  }
LABEL_233:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4C, *(unsigned int *)(v5 + 372), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x8000) == 0)
  {
LABEL_83:
    if ((v12 & 0x10000) == 0)
      goto LABEL_84;
    goto LABEL_235;
  }
LABEL_234:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4D, *(unsigned int *)(v5 + 376), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x10000) == 0)
  {
LABEL_84:
    if ((v12 & 0x20000) == 0)
      goto LABEL_85;
    goto LABEL_236;
  }
LABEL_235:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4E, *(unsigned int *)(v5 + 380), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x20000) == 0)
  {
LABEL_85:
    if ((v12 & 0x40000) == 0)
      goto LABEL_86;
    goto LABEL_237;
  }
LABEL_236:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4F, *(unsigned int *)(v5 + 384), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x40000) == 0)
  {
LABEL_86:
    if ((v12 & 0x80000) == 0)
      goto LABEL_87;
    goto LABEL_238;
  }
LABEL_237:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x50, *(unsigned int *)(v5 + 388), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x80000) == 0)
  {
LABEL_87:
    if ((v12 & 0x100000) == 0)
      goto LABEL_88;
    goto LABEL_239;
  }
LABEL_238:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x51, *(unsigned int *)(v5 + 392), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x100000) == 0)
  {
LABEL_88:
    if ((v12 & 0x200000) == 0)
      goto LABEL_89;
    goto LABEL_240;
  }
LABEL_239:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x52, *(unsigned int *)(v5 + 400), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x200000) == 0)
  {
LABEL_89:
    if ((v12 & 0x400000) == 0)
      goto LABEL_90;
    goto LABEL_241;
  }
LABEL_240:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x53, *(unsigned __int8 *)(v5 + 397), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x400000) == 0)
  {
LABEL_90:
    if ((v12 & 0x800000) == 0)
      goto LABEL_91;
    goto LABEL_242;
  }
LABEL_241:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x54, *(unsigned int *)(v5 + 404), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x800000) == 0)
  {
LABEL_91:
    if ((v12 & 0x1000000) == 0)
      goto LABEL_92;
    goto LABEL_243;
  }
LABEL_242:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x1000000) == 0)
  {
LABEL_92:
    if ((v12 & 0x2000000) == 0)
      goto LABEL_93;
    goto LABEL_244;
  }
LABEL_243:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x56, *(unsigned int *)(v5 + 416), (uint64_t)a2, a4);
  v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x2000000) == 0)
  {
LABEL_93:
    if ((v12 & 0x4000000) == 0)
      goto LABEL_95;
    goto LABEL_94;
  }
LABEL_244:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x57, *(unsigned int *)(v5 + 420), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 680) & 0x4000000) != 0)
LABEL_94:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x58, *(unsigned __int8 *)(v5 + 398), (uint64_t)a2, a4);
LABEL_95:
  if (*(int *)(v5 + 432) >= 1)
  {
    v13 = 0;
    do
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
      ++v13;
    }
    while (v13 < *(int *)(v5 + 432));
  }
  v14 = *(_DWORD *)(v5 + 680);
  if ((v14 & 0x10000000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x5A, *(unsigned int *)(v5 + 456), (uint64_t)a2, a4);
    v14 = *(_DWORD *)(v5 + 680);
    if ((v14 & 0x20000000) == 0)
    {
LABEL_100:
      if ((v14 & 0x40000000) == 0)
        goto LABEL_101;
LABEL_248:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x5C, *(_QWORD *)(v5 + 464), (uint64_t)a2, a4);
      if ((*(_DWORD *)(v5 + 680) & 0x80000000) == 0)
        goto LABEL_102;
      goto LABEL_249;
    }
  }
  else if ((v14 & 0x20000000) == 0)
  {
    goto LABEL_100;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x5B, *(_QWORD *)(v5 + 448), (uint64_t)a2, a4);
  v14 = *(_DWORD *)(v5 + 680);
  if ((v14 & 0x40000000) != 0)
    goto LABEL_248;
LABEL_101:
  if ((v14 & 0x80000000) == 0)
    goto LABEL_102;
LABEL_249:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x5D, *(unsigned int *)(v5 + 460), (uint64_t)a2, a4);
LABEL_102:
  v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x5E, *(unsigned int *)(v5 + 480), (uint64_t)a2, a4);
    v15 = *(_DWORD *)(v5 + 684);
    if ((v15 & 2) == 0)
    {
LABEL_104:
      if ((v15 & 4) == 0)
        goto LABEL_105;
      goto LABEL_252;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_104;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x5F, *(_QWORD *)(v5 + 472), (uint64_t)a2, a4);
  v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 4) == 0)
  {
LABEL_105:
    if ((v15 & 8) == 0)
      goto LABEL_106;
    goto LABEL_253;
  }
LABEL_252:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x60, *(_QWORD *)(v5 + 488), (uint64_t)a2, a4);
  v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 8) == 0)
  {
LABEL_106:
    if ((v15 & 0x10) == 0)
      goto LABEL_107;
    goto LABEL_254;
  }
LABEL_253:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x61, *(unsigned int *)(v5 + 484), (uint64_t)a2, a4);
  v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 0x10) == 0)
  {
LABEL_107:
    if ((v15 & 0x20) == 0)
      goto LABEL_108;
    goto LABEL_255;
  }
LABEL_254:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x62, *(unsigned int *)(v5 + 496), (uint64_t)a2, a4);
  v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 0x20) == 0)
  {
LABEL_108:
    if ((v15 & 0x40) == 0)
      goto LABEL_109;
    goto LABEL_256;
  }
LABEL_255:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x63, *(unsigned int *)(v5 + 500), (uint64_t)a2, a4);
  v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 0x40) == 0)
  {
LABEL_109:
    if ((v15 & 0x80) == 0)
      goto LABEL_110;
    goto LABEL_257;
  }
LABEL_256:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x64, *(unsigned __int8 *)(v5 + 399), (uint64_t)a2, a4);
  v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 0x80) == 0)
  {
LABEL_110:
    if ((v15 & 0x100) == 0)
      goto LABEL_111;
    goto LABEL_258;
  }
LABEL_257:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x65, *(unsigned int *)(v5 + 504), (uint64_t)a2, a4);
  v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 0x100) == 0)
  {
LABEL_111:
    if ((v15 & 0x200) == 0)
      goto LABEL_113;
    goto LABEL_112;
  }
LABEL_258:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x66, *(unsigned int *)(v5 + 508), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 684) & 0x200) != 0)
LABEL_112:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x67, *(unsigned __int8 *)(v5 + 620), (uint64_t)a2, a4);
LABEL_113:
  if (*(int *)(v5 + 520) >= 1)
  {
    v16 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x68, *(_QWORD *)(*(_QWORD *)(v5 + 512) + 8 * v16++), a2, a4);
    while (v16 < *(int *)(v5 + 520));
  }
  if (*(int *)(v5 + 544) >= 1)
  {
    v17 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x69, *(unsigned __int8 *)(*(_QWORD *)(v5 + 536) + v17++), (uint64_t)a2, a4);
    while (v17 < *(int *)(v5 + 544));
  }
  v18 = *(_DWORD *)(v5 + 684);
  if ((v18 & 0x1000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x6A, *(unsigned int *)(v5 + 552), (uint64_t)a2, a4);
    v18 = *(_DWORD *)(v5 + 684);
    if ((v18 & 0x2000) == 0)
    {
LABEL_121:
      if ((v18 & 0x4000) == 0)
        goto LABEL_123;
      goto LABEL_122;
    }
  }
  else if ((v18 & 0x2000) == 0)
  {
    goto LABEL_121;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x6B, *(unsigned int *)(v5 + 556), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 684) & 0x4000) != 0)
LABEL_122:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x6C, *(unsigned int *)(v5 + 584), (uint64_t)a2, a4);
LABEL_123:
  if (*(int *)(v5 + 568) >= 1)
  {
    v19 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x6D, *(_QWORD *)(*(_QWORD *)(v5 + 560) + 8 * v19++), a2, a4);
    while (v19 < *(int *)(v5 + 568));
  }
  v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x10000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x6E, *(unsigned int *)(v5 + 588), (uint64_t)a2, a4);
    v20 = *(_DWORD *)(v5 + 684);
    if ((v20 & 0x20000) == 0)
    {
LABEL_128:
      if ((v20 & 0x40000) == 0)
        goto LABEL_129;
      goto LABEL_265;
    }
  }
  else if ((v20 & 0x20000) == 0)
  {
    goto LABEL_128;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x6F, *(unsigned int *)(v5 + 592), (uint64_t)a2, a4);
  v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x40000) == 0)
  {
LABEL_129:
    if ((v20 & 0x80000) == 0)
      goto LABEL_130;
    goto LABEL_266;
  }
LABEL_265:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x70, *(unsigned int *)(v5 + 596), (uint64_t)a2, a4);
  v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x80000) == 0)
  {
LABEL_130:
    if ((v20 & 0x100000) == 0)
      goto LABEL_131;
    goto LABEL_267;
  }
LABEL_266:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x71, *(unsigned int *)(v5 + 600), (uint64_t)a2, a4);
  v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x100000) == 0)
  {
LABEL_131:
    if ((v20 & 0x200000) == 0)
      goto LABEL_132;
    goto LABEL_268;
  }
LABEL_267:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x72, *(unsigned int *)(v5 + 604), (uint64_t)a2, a4);
  v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x200000) == 0)
  {
LABEL_132:
    if ((v20 & 0x400000) == 0)
      goto LABEL_133;
    goto LABEL_269;
  }
LABEL_268:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x73, *(unsigned int *)(v5 + 608), (uint64_t)a2, a4);
  v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x400000) == 0)
  {
LABEL_133:
    if ((v20 & 0x800000) == 0)
      goto LABEL_134;
    goto LABEL_270;
  }
LABEL_269:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x74, *(unsigned int *)(v5 + 612), (uint64_t)a2, a4);
  v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x800000) == 0)
  {
LABEL_134:
    if ((v20 & 0x1000000) == 0)
      goto LABEL_135;
    goto LABEL_271;
  }
LABEL_270:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x75, *(unsigned int *)(v5 + 616), (uint64_t)a2, a4);
  v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x1000000) == 0)
  {
LABEL_135:
    if ((v20 & 0x2000000) == 0)
      goto LABEL_136;
    goto LABEL_272;
  }
LABEL_271:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x76, *(unsigned int *)(v5 + 624), (uint64_t)a2, a4);
  v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x2000000) == 0)
  {
LABEL_136:
    if ((v20 & 0x4000000) == 0)
      goto LABEL_137;
    goto LABEL_273;
  }
LABEL_272:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x77, *(unsigned int *)(v5 + 628), (uint64_t)a2, a4);
  v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x4000000) == 0)
  {
LABEL_137:
    if ((v20 & 0x8000000) == 0)
      goto LABEL_138;
    goto LABEL_274;
  }
LABEL_273:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x78, *(unsigned int *)(v5 + 632), (uint64_t)a2, a4);
  v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x8000000) == 0)
  {
LABEL_138:
    if ((v20 & 0x10000000) == 0)
      goto LABEL_139;
    goto LABEL_275;
  }
LABEL_274:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x79, *(unsigned __int8 *)(v5 + 621), (uint64_t)a2, a4);
  v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x10000000) == 0)
  {
LABEL_139:
    if ((v20 & 0x20000000) == 0)
      goto LABEL_140;
    goto LABEL_276;
  }
LABEL_275:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7A, *(unsigned __int8 *)(v5 + 622), (uint64_t)a2, a4);
  v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x20000000) == 0)
  {
LABEL_140:
    if ((v20 & 0x40000000) == 0)
      goto LABEL_141;
LABEL_277:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7C, *(unsigned __int8 *)(v5 + 644), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 684) & 0x80000000) == 0)
      goto LABEL_142;
    goto LABEL_278;
  }
LABEL_276:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7B, *(unsigned __int8 *)(v5 + 623), (uint64_t)a2, a4);
  v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x40000000) != 0)
    goto LABEL_277;
LABEL_141:
  if ((v20 & 0x80000000) == 0)
    goto LABEL_142;
LABEL_278:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D, *(unsigned int *)(v5 + 636), (uint64_t)a2, a4);
LABEL_142:
  if ((*(_BYTE *)(v5 + 688) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7E, *(unsigned __int8 *)(v5 + 645), (uint64_t)a2, a4);
  if ((*(_BYTE *)(v5 + 674) & 2) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if ((*(_BYTE *)(v5 + 688) & 2) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x80, *(unsigned int *)(v5 + 640), (uint64_t)a2, a4);
  v21 = *(_DWORD *)(v5 + 676);
  if ((v21 & 0x800000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x81, *(unsigned __int8 *)(v5 + 238), (uint64_t)a2, a4);
    v21 = *(_DWORD *)(v5 + 676);
  }
  if ((v21 & 0x1000000) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x82, *(unsigned __int8 *)(v5 + 239), (uint64_t)a2, a4);
  v22 = *(_DWORD *)(v5 + 688);
  if ((v22 & 4) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22E, *(unsigned int *)(v5 + 656), (uint64_t)a2, a4);
    v22 = *(_DWORD *)(v5 + 688);
    if ((v22 & 8) == 0)
    {
LABEL_154:
      if ((v22 & 0x10) == 0)
        goto LABEL_155;
      goto LABEL_281;
    }
  }
  else if ((v22 & 8) == 0)
  {
    goto LABEL_154;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v22 = *(_DWORD *)(v5 + 688);
  if ((v22 & 0x10) == 0)
  {
LABEL_155:
    if ((v22 & 0x20) == 0)
      goto LABEL_156;
    goto LABEL_282;
  }
LABEL_281:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x230, *(unsigned __int8 *)(v5 + 646), (uint64_t)a2, a4);
  v22 = *(_DWORD *)(v5 + 688);
  if ((v22 & 0x20) == 0)
  {
LABEL_156:
    if ((v22 & 0x40) == 0)
      goto LABEL_157;
    goto LABEL_283;
  }
LABEL_282:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x259, *(unsigned int *)(v5 + 660), (uint64_t)a2, a4);
  v22 = *(_DWORD *)(v5 + 688);
  if ((v22 & 0x40) == 0)
  {
LABEL_157:
    if ((v22 & 0x80) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25B, *(unsigned __int8 *)(v5 + 664), (uint64_t)a2, a4);
  }
LABEL_283:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25A, *(unsigned __int8 *)(v5 + 647), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 688) & 0x80) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25B, *(unsigned __int8 *)(v5 + 664), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::ATM_CallEndEvent::ByteSize(awd::metrics::ATM_CallEndEvent *this)
{
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v42;
  int v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v74;
  int v75;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v76;
  int v77;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v78;
  int v79;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v80;
  int v81;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v82;
  int v83;
  uint64_t v84;
  int v85;
  char v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  char v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  char v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v102;
  int v103;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v104;
  int v105;
  unsigned int v106;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v107;
  int v108;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v109;
  int v110;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v111;
  int v112;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v113;
  int v114;
  uint64_t v115;
  int v116;
  char v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v121;
  int v122;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v123;
  int v124;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v125;
  int v126;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v127;
  int v128;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v129;
  int v130;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v131;
  int v132;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v133;
  int v134;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v135;
  int v136;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v137;
  int v138;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v139;
  int v140;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v141;
  int v142;
  uint64_t v143;
  int v144;
  char v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  int v149;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v150;
  int v151;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v152;
  int v153;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v154;
  int v155;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v156;
  int v157;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v158;
  int v159;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v160;
  int v161;
  unsigned int v162;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v163;
  int v164;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v165;
  int v166;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v167;
  int v168;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v169;
  int v170;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v171;
  int v172;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v173;
  int v174;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v175;
  int v176;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v177;
  int v178;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v179;
  int v180;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v181;
  int v182;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v183;
  int v184;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v185;
  int v186;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v187;
  int v188;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v189;
  int v190;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v191;
  int v192;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v193;
  int v194;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v195;
  int v196;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v197;
  int v198;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v199;
  int v200;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v201;
  int v202;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v203;
  int v204;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v205;
  int v206;
  uint64_t v207;
  int v208;
  char v209;
  uint64_t v210;
  unint64_t v211;
  int v212;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v213;
  int v214;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v215;
  int v216;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v217;
  int v218;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v219;
  int v220;
  unsigned int v221;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v222;
  int v223;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v224;
  int v225;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v226;
  int v227;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v228;
  int v229;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v230;
  int v231;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v232;
  int v233;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v234;
  int v235;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v236;
  int v237;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v238;
  int v239;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v240;
  int v241;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v242;
  int v243;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v244;
  int v245;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v246;
  int v247;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v248;
  int v249;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v250;
  int v251;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v252;
  int v253;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v254;
  int v255;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v256;
  int v257;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v258;
  int v259;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v260;
  int v261;
  int v262;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v263;
  int v264;
  int v265;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v266;
  int v267;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v268;
  int v269;
  uint64_t v270;
  int v271;
  char v272;
  uint64_t v273;
  unint64_t v274;
  int v275;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v276;
  int v277;
  int v278;
  int v279;
  int v280;
  uint64_t i;
  uint64_t v282;
  int v283;
  char v284;
  uint64_t v285;
  unint64_t v286;
  int v287;
  int v288;
  int v289;
  uint64_t j;
  uint64_t v291;
  int v292;
  char v293;
  uint64_t v294;
  unint64_t v295;
  int v296;
  int v297;
  int v298;
  uint64_t v299;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v300;
  int v301;
  int v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v306;
  int v307;
  int v308;

  v2 = *((_DWORD *)this + 168);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_34;
  }
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_16;
LABEL_7:
    v5 = *((_QWORD *)this + 2);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = v8;
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v8 = *(_QWORD *)(v5 + 8);
      v2 = *((_DWORD *)this + 168);
      v7 = *(_BYTE *)(v5 + 23);
    }
    else
    {
      v10 = 1;
    }
    if (v7 < 0)
      v6 = v8;
    v3 += v10 + v6 + 1;
    goto LABEL_16;
  }
  v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 1))
     + 1;
  v2 = *((_DWORD *)this + 168);
  if ((v2 & 2) != 0)
    goto LABEL_7;
LABEL_16:
  if ((v2 & 4) != 0)
    v3 += 2;
  if ((v2 & 8) != 0)
  {
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v11 & 0x80000000) != 0)
    {
      v12 = 10;
    }
    else if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
      v2 = *((_DWORD *)this + 168);
    }
    else
    {
      v12 = 1;
    }
    v3 += v12 + 1;
  }
  v13 = v3 + 2;
  if ((v2 & 0x10) == 0)
    v13 = v3;
  if ((v2 & 0x20) != 0)
    v13 += 2;
  if ((v2 & 0x40) != 0)
    v13 += 2;
  if ((v2 & 0x80) != 0)
    v4 = v13 + 2;
  else
    v4 = v13;
LABEL_34:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_96;
  if ((v2 & 0x100) != 0)
  {
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if ((v14 & 0x80000000) != 0)
    {
      v15 = 10;
    }
    else if (v14 >= 0x80)
    {
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      v2 = *((_DWORD *)this + 168);
    }
    else
    {
      v15 = 1;
    }
    v4 += v15 + 1;
    if ((v2 & 0x200) == 0)
    {
LABEL_37:
      if ((v2 & 0x400) == 0)
        goto LABEL_38;
LABEL_55:
      v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
      if (v22 >= 0x80)
      {
        v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
        v2 = *((_DWORD *)this + 168);
      }
      else
      {
        v23 = 1;
      }
      v4 += v23 + 1;
      if ((v2 & 0x800) == 0)
        goto LABEL_68;
      goto LABEL_59;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_37;
  }
  v16 = *((_QWORD *)this + 4);
  v17 = *(unsigned __int8 *)(v16 + 23);
  v18 = v17;
  v19 = *(_QWORD *)(v16 + 8);
  if ((v17 & 0x80u) == 0)
    v20 = *(unsigned __int8 *)(v16 + 23);
  else
    v20 = v19;
  if (v20 >= 0x80)
  {
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20);
    v17 = *(unsigned __int8 *)(v16 + 23);
    v19 = *(_QWORD *)(v16 + 8);
    v2 = *((_DWORD *)this + 168);
    v18 = *(_BYTE *)(v16 + 23);
  }
  else
  {
    v21 = 1;
  }
  if (v18 < 0)
    v17 = v19;
  v4 += v21 + v17 + 1;
  if ((v2 & 0x400) != 0)
    goto LABEL_55;
LABEL_38:
  if ((v2 & 0x800) == 0)
    goto LABEL_68;
LABEL_59:
  v24 = *((_QWORD *)this + 6);
  v25 = *(unsigned __int8 *)(v24 + 23);
  v26 = v25;
  v27 = *(_QWORD *)(v24 + 8);
  if ((v25 & 0x80u) == 0)
    v28 = *(unsigned __int8 *)(v24 + 23);
  else
    v28 = v27;
  if (v28 >= 0x80)
  {
    v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28);
    v25 = *(unsigned __int8 *)(v24 + 23);
    v27 = *(_QWORD *)(v24 + 8);
    v2 = *((_DWORD *)this + 168);
    v26 = *(_BYTE *)(v24 + 23);
  }
  else
  {
    v29 = 1;
  }
  if (v26 < 0)
    v25 = v27;
  v4 += v29 + v25 + 1;
LABEL_68:
  if ((v2 & 0x1000) != 0)
    v4 += 2;
  if ((v2 & 0x2000) != 0)
  {
    v30 = *((_QWORD *)this + 7);
    v31 = *(unsigned __int8 *)(v30 + 23);
    v32 = v31;
    v33 = *(_QWORD *)(v30 + 8);
    if ((v31 & 0x80u) == 0)
      v34 = *(unsigned __int8 *)(v30 + 23);
    else
      v34 = v33;
    if (v34 >= 0x80)
    {
      v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
      v31 = *(unsigned __int8 *)(v30 + 23);
      v33 = *(_QWORD *)(v30 + 8);
      v2 = *((_DWORD *)this + 168);
      v32 = *(_BYTE *)(v30 + 23);
    }
    else
    {
      v35 = 1;
    }
    if (v32 < 0)
      v31 = v33;
    v4 += v35 + v31 + 1;
    if ((v2 & 0x4000) == 0)
    {
LABEL_72:
      if ((v2 & 0x8000) == 0)
        goto LABEL_96;
      goto LABEL_92;
    }
  }
  else if ((v2 & 0x4000) == 0)
  {
    goto LABEL_72;
  }
  v36 = *((_QWORD *)this + 8);
  v37 = *(unsigned __int8 *)(v36 + 23);
  v38 = v37;
  v39 = *(_QWORD *)(v36 + 8);
  if ((v37 & 0x80u) == 0)
    v40 = *(unsigned __int8 *)(v36 + 23);
  else
    v40 = v39;
  if (v40 >= 0x80)
  {
    v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v40);
    v37 = *(unsigned __int8 *)(v36 + 23);
    v39 = *(_QWORD *)(v36 + 8);
    v2 = *((_DWORD *)this + 168);
    v38 = *(_BYTE *)(v36 + 23);
  }
  else
  {
    v41 = 1;
  }
  if (v38 < 0)
    v37 = v39;
  v4 += v41 + v37 + 1;
  if ((v2 & 0x8000) != 0)
  {
LABEL_92:
    v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 24);
    if (v42 >= 0x80)
    {
      v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42);
      v2 = *((_DWORD *)this + 168);
    }
    else
    {
      v43 = 1;
    }
    v4 += v43 + 2;
  }
LABEL_96:
  if ((v2 & 0xFF0000) == 0)
    goto LABEL_163;
  if ((v2 & 0x10000) != 0)
  {
    v44 = *((_QWORD *)this + 9);
    v45 = *(unsigned __int8 *)(v44 + 23);
    v46 = v45;
    v47 = *(_QWORD *)(v44 + 8);
    if ((v45 & 0x80u) == 0)
      v48 = *(unsigned __int8 *)(v44 + 23);
    else
      v48 = v47;
    if (v48 >= 0x80)
    {
      v49 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v48);
      v45 = *(unsigned __int8 *)(v44 + 23);
      v47 = *(_QWORD *)(v44 + 8);
      v2 = *((_DWORD *)this + 168);
      v46 = *(_BYTE *)(v44 + 23);
    }
    else
    {
      v49 = 1;
    }
    if (v46 < 0)
      v45 = v47;
    v4 += v49 + v45 + 2;
    if ((v2 & 0x20000) == 0)
    {
LABEL_99:
      if ((v2 & 0x40000) == 0)
        goto LABEL_100;
      goto LABEL_124;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_99;
  }
  v50 = *((_QWORD *)this + 10);
  v51 = *(unsigned __int8 *)(v50 + 23);
  v52 = v51;
  v53 = *(_QWORD *)(v50 + 8);
  if ((v51 & 0x80u) == 0)
    v54 = *(unsigned __int8 *)(v50 + 23);
  else
    v54 = v53;
  if (v54 >= 0x80)
  {
    v55 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v54);
    v51 = *(unsigned __int8 *)(v50 + 23);
    v53 = *(_QWORD *)(v50 + 8);
    v2 = *((_DWORD *)this + 168);
    v52 = *(_BYTE *)(v50 + 23);
  }
  else
  {
    v55 = 1;
  }
  if (v52 < 0)
    v51 = v53;
  v4 += v55 + v51 + 2;
  if ((v2 & 0x40000) == 0)
  {
LABEL_100:
    if ((v2 & 0x80000) == 0)
      goto LABEL_101;
    goto LABEL_133;
  }
LABEL_124:
  v56 = *((_QWORD *)this + 11);
  v57 = *(unsigned __int8 *)(v56 + 23);
  v58 = v57;
  v59 = *(_QWORD *)(v56 + 8);
  if ((v57 & 0x80u) == 0)
    v60 = *(unsigned __int8 *)(v56 + 23);
  else
    v60 = v59;
  if (v60 >= 0x80)
  {
    v61 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v60);
    v57 = *(unsigned __int8 *)(v56 + 23);
    v59 = *(_QWORD *)(v56 + 8);
    v2 = *((_DWORD *)this + 168);
    v58 = *(_BYTE *)(v56 + 23);
  }
  else
  {
    v61 = 1;
  }
  if (v58 < 0)
    v57 = v59;
  v4 += v61 + v57 + 2;
  if ((v2 & 0x80000) == 0)
  {
LABEL_101:
    if ((v2 & 0x100000) == 0)
      goto LABEL_102;
    goto LABEL_142;
  }
LABEL_133:
  v62 = *((_QWORD *)this + 13);
  v63 = *(unsigned __int8 *)(v62 + 23);
  v64 = v63;
  v65 = *(_QWORD *)(v62 + 8);
  if ((v63 & 0x80u) == 0)
    v66 = *(unsigned __int8 *)(v62 + 23);
  else
    v66 = v65;
  if (v66 >= 0x80)
  {
    v67 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v66);
    v63 = *(unsigned __int8 *)(v62 + 23);
    v65 = *(_QWORD *)(v62 + 8);
    v2 = *((_DWORD *)this + 168);
    v64 = *(_BYTE *)(v62 + 23);
  }
  else
  {
    v67 = 1;
  }
  if (v64 < 0)
    v63 = v65;
  v4 += v67 + v63 + 2;
  if ((v2 & 0x100000) == 0)
  {
LABEL_102:
    if ((v2 & 0x200000) == 0)
      goto LABEL_103;
    goto LABEL_151;
  }
LABEL_142:
  v68 = *((_QWORD *)this + 14);
  v69 = *(unsigned __int8 *)(v68 + 23);
  v70 = v69;
  v71 = *(_QWORD *)(v68 + 8);
  if ((v69 & 0x80u) == 0)
    v72 = *(unsigned __int8 *)(v68 + 23);
  else
    v72 = v71;
  if (v72 >= 0x80)
  {
    v73 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v72);
    v69 = *(unsigned __int8 *)(v68 + 23);
    v71 = *(_QWORD *)(v68 + 8);
    v2 = *((_DWORD *)this + 168);
    v70 = *(_BYTE *)(v68 + 23);
  }
  else
  {
    v73 = 1;
  }
  if (v70 < 0)
    v69 = v71;
  v4 += v73 + v69 + 2;
  if ((v2 & 0x200000) == 0)
  {
LABEL_103:
    if ((v2 & 0x400000) == 0)
      goto LABEL_104;
    goto LABEL_155;
  }
LABEL_151:
  v74 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 30);
  if (v74 >= 0x80)
  {
    v75 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v74);
    v2 = *((_DWORD *)this + 168);
  }
  else
  {
    v75 = 1;
  }
  v4 += v75 + 2;
  if ((v2 & 0x400000) == 0)
  {
LABEL_104:
    if ((v2 & 0x800000) == 0)
      goto LABEL_163;
    goto LABEL_159;
  }
LABEL_155:
  v76 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 31);
  if (v76 >= 0x80)
  {
    v77 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v76);
    v2 = *((_DWORD *)this + 168);
  }
  else
  {
    v77 = 1;
  }
  v4 += v77 + 2;
  if ((v2 & 0x800000) != 0)
  {
LABEL_159:
    v78 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 32);
    if (v78 >= 0x80)
    {
      v79 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v78);
      v2 = *((_DWORD *)this + 168);
    }
    else
    {
      v79 = 1;
    }
    v4 += v79 + 2;
  }
LABEL_163:
  if (!HIBYTE(v2))
    goto LABEL_217;
  if ((v2 & 0x1000000) != 0)
    v4 += 3;
  if ((v2 & 0x2000000) != 0)
  {
    v80 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 33);
    if (v80 >= 0x80)
    {
      v81 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v80);
      v2 = *((_DWORD *)this + 168);
    }
    else
    {
      v81 = 1;
    }
    v4 += v81 + 2;
    if ((v2 & 0x4000000) == 0)
    {
LABEL_168:
      if ((v2 & 0x8000000) == 0)
        goto LABEL_169;
      goto LABEL_182;
    }
  }
  else if ((v2 & 0x4000000) == 0)
  {
    goto LABEL_168;
  }
  v82 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 36);
  if (v82 >= 0x80)
  {
    v83 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v82);
    v2 = *((_DWORD *)this + 168);
  }
  else
  {
    v83 = 1;
  }
  v4 += v83 + 2;
  if ((v2 & 0x8000000) == 0)
  {
LABEL_169:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_170;
    goto LABEL_191;
  }
LABEL_182:
  v84 = *((_QWORD *)this + 17);
  v85 = *(unsigned __int8 *)(v84 + 23);
  v86 = v85;
  v87 = *(_QWORD *)(v84 + 8);
  if ((v85 & 0x80u) == 0)
    v88 = *(unsigned __int8 *)(v84 + 23);
  else
    v88 = v87;
  if (v88 >= 0x80)
  {
    v89 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v88);
    v85 = *(unsigned __int8 *)(v84 + 23);
    v87 = *(_QWORD *)(v84 + 8);
    v2 = *((_DWORD *)this + 168);
    v86 = *(_BYTE *)(v84 + 23);
  }
  else
  {
    v89 = 1;
  }
  if (v86 < 0)
    v85 = v87;
  v4 += v89 + v85 + 2;
  if ((v2 & 0x10000000) == 0)
  {
LABEL_170:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_171;
    goto LABEL_200;
  }
LABEL_191:
  v90 = *((_QWORD *)this + 19);
  v91 = *(unsigned __int8 *)(v90 + 23);
  v92 = v91;
  v93 = *(_QWORD *)(v90 + 8);
  if ((v91 & 0x80u) == 0)
    v94 = *(unsigned __int8 *)(v90 + 23);
  else
    v94 = v93;
  if (v94 >= 0x80)
  {
    v95 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v94);
    v91 = *(unsigned __int8 *)(v90 + 23);
    v93 = *(_QWORD *)(v90 + 8);
    v2 = *((_DWORD *)this + 168);
    v92 = *(_BYTE *)(v90 + 23);
  }
  else
  {
    v95 = 1;
  }
  if (v92 < 0)
    v91 = v93;
  v4 += v95 + v91 + 2;
  if ((v2 & 0x20000000) == 0)
  {
LABEL_171:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_172;
    goto LABEL_209;
  }
LABEL_200:
  v96 = *((_QWORD *)this + 20);
  v97 = *(unsigned __int8 *)(v96 + 23);
  v98 = v97;
  v99 = *(_QWORD *)(v96 + 8);
  if ((v97 & 0x80u) == 0)
    v100 = *(unsigned __int8 *)(v96 + 23);
  else
    v100 = v99;
  if (v100 >= 0x80)
  {
    v101 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v100);
    v97 = *(unsigned __int8 *)(v96 + 23);
    v99 = *(_QWORD *)(v96 + 8);
    v2 = *((_DWORD *)this + 168);
    v98 = *(_BYTE *)(v96 + 23);
  }
  else
  {
    v101 = 1;
  }
  if (v98 < 0)
    v97 = v99;
  v4 += v101 + v97 + 2;
  if ((v2 & 0x40000000) == 0)
  {
LABEL_172:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_217;
    goto LABEL_213;
  }
LABEL_209:
  v102 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 37);
  if (v102 >= 0x80)
  {
    v103 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v102);
    v2 = *((_DWORD *)this + 168);
  }
  else
  {
    v103 = 1;
  }
  v4 += v103 + 2;
  if ((v2 & 0x80000000) != 0)
  {
LABEL_213:
    v104 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 42);
    if (v104 >= 0x80)
      v105 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v104);
    else
      v105 = 1;
    v4 += v105 + 2;
  }
LABEL_217:
  v106 = *((_DWORD *)this + 169);
  if (!(_BYTE)v106)
    goto LABEL_259;
  if ((v106 & 1) != 0)
    v4 += 3;
  if ((v106 & 2) != 0)
  {
    v107 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 43);
    if (v107 >= 0x80)
    {
      v108 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v107);
      v106 = *((_DWORD *)this + 169);
    }
    else
    {
      v108 = 1;
    }
    v4 += v108 + 2;
    if ((v106 & 4) == 0)
    {
LABEL_222:
      if ((v106 & 8) == 0)
        goto LABEL_223;
      goto LABEL_234;
    }
  }
  else if ((v106 & 4) == 0)
  {
    goto LABEL_222;
  }
  v109 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 44);
  if (v109 >= 0x80)
  {
    v110 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v109);
    v106 = *((_DWORD *)this + 169);
  }
  else
  {
    v110 = 1;
  }
  v4 += v110 + 2;
  if ((v106 & 8) == 0)
  {
LABEL_223:
    if ((v106 & 0x10) == 0)
      goto LABEL_224;
LABEL_235:
    v111 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 45);
    if ((v111 & 0x80000000) != 0)
    {
      v112 = 10;
    }
    else if (v111 >= 0x80)
    {
      v112 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v111);
      v106 = *((_DWORD *)this + 169);
    }
    else
    {
      v112 = 1;
    }
    v4 += v112 + 2;
    if ((v106 & 0x20) == 0)
      goto LABEL_247;
    goto LABEL_241;
  }
LABEL_234:
  v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 23))
      + 2;
  v106 = *((_DWORD *)this + 169);
  if ((v106 & 0x10) != 0)
    goto LABEL_235;
LABEL_224:
  if ((v106 & 0x20) != 0)
  {
LABEL_241:
    v113 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 48);
    if ((v113 & 0x80000000) != 0)
    {
      v114 = 10;
    }
    else if (v113 >= 0x80)
    {
      v114 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v113);
      v106 = *((_DWORD *)this + 169);
    }
    else
    {
      v114 = 1;
    }
    v4 += v114 + 2;
  }
LABEL_247:
  if ((v106 & 0x40) != 0)
    v4 += 3;
  if ((v106 & 0x80) != 0)
  {
    v115 = *((_QWORD *)this + 25);
    v116 = *(unsigned __int8 *)(v115 + 23);
    v117 = v116;
    v118 = *(_QWORD *)(v115 + 8);
    if ((v116 & 0x80u) == 0)
      v119 = *(unsigned __int8 *)(v115 + 23);
    else
      v119 = v118;
    if (v119 >= 0x80)
    {
      v120 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v119);
      v116 = *(unsigned __int8 *)(v115 + 23);
      v118 = *(_QWORD *)(v115 + 8);
      v106 = *((_DWORD *)this + 169);
      v117 = *(_BYTE *)(v115 + 23);
    }
    else
    {
      v120 = 1;
    }
    if (v117 < 0)
      v116 = v118;
    v4 += v120 + v116 + 2;
  }
LABEL_259:
  if ((v106 & 0xFF00) == 0)
    goto LABEL_299;
  if ((v106 & 0x100) != 0)
    v4 += 3;
  if ((v106 & 0x200) != 0)
  {
    v121 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 49);
    if ((v121 & 0x80000000) != 0)
    {
      v122 = 10;
    }
    else if (v121 >= 0x80)
    {
      v122 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v121);
      v106 = *((_DWORD *)this + 169);
    }
    else
    {
      v122 = 1;
    }
    v4 += v122 + 2;
    if ((v106 & 0x400) == 0)
    {
LABEL_264:
      if ((v106 & 0x800) == 0)
        goto LABEL_265;
      goto LABEL_280;
    }
  }
  else if ((v106 & 0x400) == 0)
  {
    goto LABEL_264;
  }
  v123 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 52);
  if (v123 >= 0x80)
  {
    v124 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v123);
    v106 = *((_DWORD *)this + 169);
  }
  else
  {
    v124 = 1;
  }
  v4 += v124 + 2;
  if ((v106 & 0x800) == 0)
  {
LABEL_265:
    if ((v106 & 0x1000) == 0)
      goto LABEL_266;
    goto LABEL_286;
  }
LABEL_280:
  v125 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 53);
  if ((v125 & 0x80000000) != 0)
  {
    v126 = 10;
  }
  else if (v125 >= 0x80)
  {
    v126 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v125);
    v106 = *((_DWORD *)this + 169);
  }
  else
  {
    v126 = 1;
  }
  v4 += v126 + 2;
  if ((v106 & 0x1000) == 0)
  {
LABEL_266:
    if ((v106 & 0x2000) == 0)
      goto LABEL_267;
    goto LABEL_287;
  }
LABEL_286:
  v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 27))
      + 2;
  v106 = *((_DWORD *)this + 169);
  if ((v106 & 0x2000) == 0)
  {
LABEL_267:
    if ((v106 & 0x4000) == 0)
      goto LABEL_268;
    goto LABEL_291;
  }
LABEL_287:
  v127 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 56);
  if (v127 >= 0x80)
  {
    v128 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v127);
    v106 = *((_DWORD *)this + 169);
  }
  else
  {
    v128 = 1;
  }
  v4 += v128 + 2;
  if ((v106 & 0x4000) == 0)
  {
LABEL_268:
    if ((v106 & 0x8000) == 0)
      goto LABEL_299;
    goto LABEL_295;
  }
LABEL_291:
  v129 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 57);
  if (v129 >= 0x80)
  {
    v130 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v129);
    v106 = *((_DWORD *)this + 169);
  }
  else
  {
    v130 = 1;
  }
  v4 += v130 + 2;
  if ((v106 & 0x8000) != 0)
  {
LABEL_295:
    v131 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * *((_DWORD *)this + 58)) ^ (*((int *)this + 58) >> 31));
    if (v131 >= 0x80)
    {
      v132 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v131);
      v106 = *((_DWORD *)this + 169);
    }
    else
    {
      v132 = 1;
    }
    v4 += v132 + 2;
  }
LABEL_299:
  if ((v106 & 0xFF0000) == 0)
    goto LABEL_338;
  if ((v106 & 0x10000) != 0)
  {
    v133 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 60);
    if (v133 >= 0x80)
    {
      v134 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v133);
      v106 = *((_DWORD *)this + 169);
    }
    else
    {
      v134 = 1;
    }
    v4 += v134 + 2;
    if ((v106 & 0x20000) == 0)
    {
LABEL_302:
      if ((v106 & 0x40000) == 0)
        goto LABEL_303;
      goto LABEL_315;
    }
  }
  else if ((v106 & 0x20000) == 0)
  {
    goto LABEL_302;
  }
  v135 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 61);
  if (v135 >= 0x80)
  {
    v136 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v135);
    v106 = *((_DWORD *)this + 169);
  }
  else
  {
    v136 = 1;
  }
  v4 += v136 + 2;
  if ((v106 & 0x40000) == 0)
  {
LABEL_303:
    if ((v106 & 0x80000) == 0)
      goto LABEL_304;
    goto LABEL_319;
  }
LABEL_315:
  v137 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 62);
  if (v137 >= 0x80)
  {
    v138 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v137);
    v106 = *((_DWORD *)this + 169);
  }
  else
  {
    v138 = 1;
  }
  v4 += v138 + 2;
  if ((v106 & 0x80000) == 0)
  {
LABEL_304:
    if ((v106 & 0x100000) == 0)
      goto LABEL_305;
    goto LABEL_323;
  }
LABEL_319:
  v139 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 63);
  if (v139 >= 0x80)
  {
    v140 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v139);
    v106 = *((_DWORD *)this + 169);
  }
  else
  {
    v140 = 1;
  }
  v4 += v140 + 2;
  if ((v106 & 0x100000) == 0)
  {
LABEL_305:
    if ((v106 & 0x200000) == 0)
      goto LABEL_336;
LABEL_327:
    v143 = *((_QWORD *)this + 32);
    v144 = *(unsigned __int8 *)(v143 + 23);
    v145 = v144;
    v146 = *(_QWORD *)(v143 + 8);
    if ((v144 & 0x80u) == 0)
      v147 = *(unsigned __int8 *)(v143 + 23);
    else
      v147 = v146;
    if (v147 >= 0x80)
    {
      v148 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v147);
      v144 = *(unsigned __int8 *)(v143 + 23);
      v146 = *(_QWORD *)(v143 + 8);
      v106 = *((_DWORD *)this + 169);
      v145 = *(_BYTE *)(v143 + 23);
    }
    else
    {
      v148 = 1;
    }
    if (v145 < 0)
      v144 = v146;
    v4 += v148 + v144 + 2;
    goto LABEL_336;
  }
LABEL_323:
  v141 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 72);
  if (v141 >= 0x80)
  {
    v142 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v141);
    v106 = *((_DWORD *)this + 169);
  }
  else
  {
    v142 = 1;
  }
  v4 += v142 + 2;
  if ((v106 & 0x200000) != 0)
    goto LABEL_327;
LABEL_336:
  if ((v106 & 0x800000) != 0)
    v4 += 3;
LABEL_338:
  if (!HIBYTE(v106))
    goto LABEL_375;
  v149 = v4 + 3;
  if ((v106 & 0x1000000) == 0)
    v149 = v4;
  if ((v106 & 0x2000000) != 0)
    v4 = v149 + 3;
  else
    v4 = v149;
  if ((v106 & 0x4000000) != 0)
  {
    v150 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 73);
    if (v150 >= 0x80)
    {
      v151 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v150);
      v106 = *((_DWORD *)this + 169);
    }
    else
    {
      v151 = 1;
    }
    v4 += v151 + 2;
    if ((v106 & 0x8000000) == 0)
    {
LABEL_346:
      if ((v106 & 0x10000000) == 0)
        goto LABEL_347;
      goto LABEL_359;
    }
  }
  else if ((v106 & 0x8000000) == 0)
  {
    goto LABEL_346;
  }
  v152 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 74);
  if (v152 >= 0x80)
  {
    v153 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v152);
    v106 = *((_DWORD *)this + 169);
  }
  else
  {
    v153 = 1;
  }
  v4 += v153 + 2;
  if ((v106 & 0x10000000) == 0)
  {
LABEL_347:
    if ((v106 & 0x20000000) == 0)
      goto LABEL_348;
    goto LABEL_363;
  }
LABEL_359:
  v154 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 75);
  if (v154 >= 0x80)
  {
    v155 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v154);
    v106 = *((_DWORD *)this + 169);
  }
  else
  {
    v155 = 1;
  }
  v4 += v155 + 2;
  if ((v106 & 0x20000000) == 0)
  {
LABEL_348:
    if ((v106 & 0x40000000) == 0)
      goto LABEL_349;
    goto LABEL_367;
  }
LABEL_363:
  v156 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 76);
  if (v156 >= 0x80)
  {
    v157 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v156);
    v106 = *((_DWORD *)this + 169);
  }
  else
  {
    v157 = 1;
  }
  v4 += v157 + 2;
  if ((v106 & 0x40000000) == 0)
  {
LABEL_349:
    if ((v106 & 0x80000000) == 0)
      goto LABEL_375;
    goto LABEL_371;
  }
LABEL_367:
  v158 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 77);
  if (v158 >= 0x80)
  {
    v159 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v158);
    v106 = *((_DWORD *)this + 169);
  }
  else
  {
    v159 = 1;
  }
  v4 += v159 + 2;
  if ((v106 & 0x80000000) != 0)
  {
LABEL_371:
    v160 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 78);
    if (v160 >= 0x80)
      v161 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v160);
    else
      v161 = 1;
    v4 += v161 + 2;
  }
LABEL_375:
  v162 = *((_DWORD *)this + 170);
  if (!(_BYTE)v162)
    goto LABEL_417;
  if ((v162 & 1) != 0)
  {
    v163 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 79);
    if (v163 >= 0x80)
    {
      v164 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v163);
      v162 = *((_DWORD *)this + 170);
    }
    else
    {
      v164 = 1;
    }
    v4 += v164 + 2;
    if ((v162 & 2) == 0)
    {
LABEL_378:
      if ((v162 & 4) == 0)
        goto LABEL_379;
      goto LABEL_393;
    }
  }
  else if ((v162 & 2) == 0)
  {
    goto LABEL_378;
  }
  v165 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 80);
  if (v165 >= 0x80)
  {
    v166 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v165);
    v162 = *((_DWORD *)this + 170);
  }
  else
  {
    v166 = 1;
  }
  v4 += v166 + 2;
  if ((v162 & 4) == 0)
  {
LABEL_379:
    if ((v162 & 8) == 0)
      goto LABEL_380;
    goto LABEL_397;
  }
LABEL_393:
  v167 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 81);
  if (v167 >= 0x80)
  {
    v168 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v167);
    v162 = *((_DWORD *)this + 170);
  }
  else
  {
    v168 = 1;
  }
  v4 += v168 + 2;
  if ((v162 & 8) == 0)
  {
LABEL_380:
    if ((v162 & 0x10) == 0)
      goto LABEL_381;
    goto LABEL_401;
  }
LABEL_397:
  v169 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 82);
  if (v169 >= 0x80)
  {
    v170 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v169);
    v162 = *((_DWORD *)this + 170);
  }
  else
  {
    v170 = 1;
  }
  v4 += v170 + 2;
  if ((v162 & 0x10) == 0)
  {
LABEL_381:
    if ((v162 & 0x20) == 0)
      goto LABEL_382;
    goto LABEL_405;
  }
LABEL_401:
  v171 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 83);
  if (v171 >= 0x80)
  {
    v172 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v171);
    v162 = *((_DWORD *)this + 170);
  }
  else
  {
    v172 = 1;
  }
  v4 += v172 + 2;
  if ((v162 & 0x20) == 0)
  {
LABEL_382:
    if ((v162 & 0x40) == 0)
      goto LABEL_383;
    goto LABEL_409;
  }
LABEL_405:
  v173 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 84);
  if (v173 >= 0x80)
  {
    v174 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v173);
    v162 = *((_DWORD *)this + 170);
  }
  else
  {
    v174 = 1;
  }
  v4 += v174 + 2;
  if ((v162 & 0x40) == 0)
  {
LABEL_383:
    if ((v162 & 0x80) == 0)
      goto LABEL_417;
    goto LABEL_413;
  }
LABEL_409:
  v175 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 85);
  if (v175 >= 0x80)
  {
    v176 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v175);
    v162 = *((_DWORD *)this + 170);
  }
  else
  {
    v176 = 1;
  }
  v4 += v176 + 2;
  if ((v162 & 0x80) != 0)
  {
LABEL_413:
    v177 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 86);
    if (v177 >= 0x80)
    {
      v178 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v177);
      v162 = *((_DWORD *)this + 170);
    }
    else
    {
      v178 = 1;
    }
    v4 += v178 + 2;
  }
LABEL_417:
  if ((v162 & 0xFF00) == 0)
    goto LABEL_459;
  if ((v162 & 0x100) != 0)
  {
    v179 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 87);
    if (v179 >= 0x80)
    {
      v180 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v179);
      v162 = *((_DWORD *)this + 170);
    }
    else
    {
      v180 = 1;
    }
    v4 += v180 + 2;
    if ((v162 & 0x200) == 0)
    {
LABEL_420:
      if ((v162 & 0x400) == 0)
        goto LABEL_421;
      goto LABEL_435;
    }
  }
  else if ((v162 & 0x200) == 0)
  {
    goto LABEL_420;
  }
  v181 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 88);
  if (v181 >= 0x80)
  {
    v182 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v181);
    v162 = *((_DWORD *)this + 170);
  }
  else
  {
    v182 = 1;
  }
  v4 += v182 + 2;
  if ((v162 & 0x400) == 0)
  {
LABEL_421:
    if ((v162 & 0x800) == 0)
      goto LABEL_422;
    goto LABEL_439;
  }
LABEL_435:
  v183 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 89);
  if (v183 >= 0x80)
  {
    v184 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v183);
    v162 = *((_DWORD *)this + 170);
  }
  else
  {
    v184 = 1;
  }
  v4 += v184 + 2;
  if ((v162 & 0x800) == 0)
  {
LABEL_422:
    if ((v162 & 0x1000) == 0)
      goto LABEL_423;
    goto LABEL_443;
  }
LABEL_439:
  v185 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 90);
  if (v185 >= 0x80)
  {
    v186 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v185);
    v162 = *((_DWORD *)this + 170);
  }
  else
  {
    v186 = 1;
  }
  v4 += v186 + 2;
  if ((v162 & 0x1000) == 0)
  {
LABEL_423:
    if ((v162 & 0x2000) == 0)
      goto LABEL_424;
    goto LABEL_447;
  }
LABEL_443:
  v187 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 91);
  if (v187 >= 0x80)
  {
    v188 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v187);
    v162 = *((_DWORD *)this + 170);
  }
  else
  {
    v188 = 1;
  }
  v4 += v188 + 2;
  if ((v162 & 0x2000) == 0)
  {
LABEL_424:
    if ((v162 & 0x4000) == 0)
      goto LABEL_425;
    goto LABEL_451;
  }
LABEL_447:
  v189 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 92);
  if (v189 >= 0x80)
  {
    v190 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v189);
    v162 = *((_DWORD *)this + 170);
  }
  else
  {
    v190 = 1;
  }
  v4 += v190 + 2;
  if ((v162 & 0x4000) == 0)
  {
LABEL_425:
    if ((v162 & 0x8000) == 0)
      goto LABEL_459;
    goto LABEL_455;
  }
LABEL_451:
  v191 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 93);
  if (v191 >= 0x80)
  {
    v192 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v191);
    v162 = *((_DWORD *)this + 170);
  }
  else
  {
    v192 = 1;
  }
  v4 += v192 + 2;
  if ((v162 & 0x8000) != 0)
  {
LABEL_455:
    v193 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 94);
    if (v193 >= 0x80)
    {
      v194 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v193);
      v162 = *((_DWORD *)this + 170);
    }
    else
    {
      v194 = 1;
    }
    v4 += v194 + 2;
  }
LABEL_459:
  if ((v162 & 0xFF0000) == 0)
    goto LABEL_503;
  if ((v162 & 0x10000) != 0)
  {
    v195 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 95);
    if (v195 >= 0x80)
    {
      v196 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v195);
      v162 = *((_DWORD *)this + 170);
    }
    else
    {
      v196 = 1;
    }
    v4 += v196 + 2;
    if ((v162 & 0x20000) == 0)
    {
LABEL_462:
      if ((v162 & 0x40000) == 0)
        goto LABEL_463;
      goto LABEL_474;
    }
  }
  else if ((v162 & 0x20000) == 0)
  {
    goto LABEL_462;
  }
  v197 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 96);
  if (v197 >= 0x80)
  {
    v198 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v197);
    v162 = *((_DWORD *)this + 170);
  }
  else
  {
    v198 = 1;
  }
  v4 += v198 + 2;
  if ((v162 & 0x40000) == 0)
  {
LABEL_463:
    if ((v162 & 0x80000) == 0)
      goto LABEL_464;
LABEL_478:
    v201 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 98);
    if (v201 >= 0x80)
    {
      v202 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v201);
      v162 = *((_DWORD *)this + 170);
    }
    else
    {
      v202 = 1;
    }
    v4 += v202 + 2;
    if ((v162 & 0x100000) == 0)
      goto LABEL_486;
    goto LABEL_482;
  }
LABEL_474:
  v199 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 97);
  if (v199 >= 0x80)
  {
    v200 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v199);
    v162 = *((_DWORD *)this + 170);
  }
  else
  {
    v200 = 1;
  }
  v4 += v200 + 2;
  if ((v162 & 0x80000) != 0)
    goto LABEL_478;
LABEL_464:
  if ((v162 & 0x100000) != 0)
  {
LABEL_482:
    v203 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 100);
    if (v203 >= 0x80)
    {
      v204 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v203);
      v162 = *((_DWORD *)this + 170);
    }
    else
    {
      v204 = 1;
    }
    v4 += v204 + 2;
  }
LABEL_486:
  if ((v162 & 0x200000) != 0)
    v4 += 3;
  if ((v162 & 0x400000) != 0)
  {
    v205 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 101);
    if (v205 >= 0x80)
    {
      v206 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v205);
      v162 = *((_DWORD *)this + 170);
    }
    else
    {
      v206 = 1;
    }
    v4 += v206 + 2;
  }
  if ((v162 & 0x800000) != 0)
  {
    v207 = *((_QWORD *)this + 51);
    v208 = *(unsigned __int8 *)(v207 + 23);
    v209 = v208;
    v210 = *(_QWORD *)(v207 + 8);
    if ((v208 & 0x80u) == 0)
      v211 = *(unsigned __int8 *)(v207 + 23);
    else
      v211 = v210;
    if (v211 >= 0x80)
    {
      v212 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v211);
      v208 = *(unsigned __int8 *)(v207 + 23);
      v210 = *(_QWORD *)(v207 + 8);
      v162 = *((_DWORD *)this + 170);
      v209 = *(_BYTE *)(v207 + 23);
    }
    else
    {
      v212 = 1;
    }
    if (v209 < 0)
      v208 = v210;
    v4 += v212 + v208 + 2;
  }
LABEL_503:
  if (!HIBYTE(v162))
    goto LABEL_535;
  if ((v162 & 0x1000000) != 0)
  {
    v213 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 104);
    if ((v213 & 0x80000000) != 0)
    {
      v214 = 10;
    }
    else if (v213 >= 0x80)
    {
      v214 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v213);
      v162 = *((_DWORD *)this + 170);
    }
    else
    {
      v214 = 1;
    }
    v4 += v214 + 2;
  }
  if ((v162 & 0x2000000) != 0)
  {
    v215 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 105);
    if ((v215 & 0x80000000) != 0)
    {
      v216 = 10;
    }
    else if (v215 >= 0x80)
    {
      v216 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v215);
      v162 = *((_DWORD *)this + 170);
    }
    else
    {
      v216 = 1;
    }
    v4 += v216 + 2;
  }
  if ((v162 & 0x4000000) != 0)
    v4 += 3;
  if ((v162 & 0x10000000) != 0)
  {
    v217 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 114);
    if (v217 >= 0x80)
    {
      v218 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v217);
      v162 = *((_DWORD *)this + 170);
    }
    else
    {
      v218 = 1;
    }
    v4 += v218 + 2;
    if ((v162 & 0x20000000) == 0)
    {
LABEL_522:
      if ((v162 & 0x40000000) == 0)
        goto LABEL_523;
LABEL_530:
      v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                        + 58))
          + 2;
      if ((*((_DWORD *)this + 170) & 0x80000000) == 0)
        goto LABEL_535;
      goto LABEL_531;
    }
  }
  else if ((v162 & 0x20000000) == 0)
  {
    goto LABEL_522;
  }
  v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 56))
      + 2;
  v162 = *((_DWORD *)this + 170);
  if ((v162 & 0x40000000) != 0)
    goto LABEL_530;
LABEL_523:
  if ((v162 & 0x80000000) == 0)
    goto LABEL_535;
LABEL_531:
  v219 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 115);
  if (v219 >= 0x80)
    v220 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v219);
  else
    v220 = 1;
  v4 += v220 + 2;
LABEL_535:
  v221 = *((_DWORD *)this + 171);
  if (!(_BYTE)v221)
    goto LABEL_568;
  if ((v221 & 1) != 0)
  {
    v222 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 120);
    if (v222 >= 0x80)
    {
      v223 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v222);
      v221 = *((_DWORD *)this + 171);
    }
    else
    {
      v223 = 1;
    }
    v4 += v223 + 2;
    if ((v221 & 2) == 0)
    {
LABEL_538:
      if ((v221 & 4) == 0)
        goto LABEL_539;
      goto LABEL_548;
    }
  }
  else if ((v221 & 2) == 0)
  {
    goto LABEL_538;
  }
  v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 59))
      + 2;
  v221 = *((_DWORD *)this + 171);
  if ((v221 & 4) == 0)
  {
LABEL_539:
    if ((v221 & 8) == 0)
      goto LABEL_540;
    goto LABEL_549;
  }
LABEL_548:
  v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 61))
      + 2;
  v221 = *((_DWORD *)this + 171);
  if ((v221 & 8) == 0)
  {
LABEL_540:
    if ((v221 & 0x10) == 0)
      goto LABEL_541;
LABEL_553:
    v226 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 124);
    if (v226 >= 0x80)
    {
      v227 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v226);
      v221 = *((_DWORD *)this + 171);
    }
    else
    {
      v227 = 1;
    }
    v4 += v227 + 2;
    if ((v221 & 0x20) == 0)
      goto LABEL_561;
    goto LABEL_557;
  }
LABEL_549:
  v224 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 121);
  if (v224 >= 0x80)
  {
    v225 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v224);
    v221 = *((_DWORD *)this + 171);
  }
  else
  {
    v225 = 1;
  }
  v4 += v225 + 2;
  if ((v221 & 0x10) != 0)
    goto LABEL_553;
LABEL_541:
  if ((v221 & 0x20) != 0)
  {
LABEL_557:
    v228 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 125);
    if (v228 >= 0x80)
    {
      v229 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v228);
      v221 = *((_DWORD *)this + 171);
    }
    else
    {
      v229 = 1;
    }
    v4 += v229 + 2;
  }
LABEL_561:
  if ((v221 & 0x40) != 0)
    v4 += 3;
  if ((v221 & 0x80) != 0)
  {
    v230 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 126);
    if (v230 >= 0x80)
    {
      v231 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v230);
      v221 = *((_DWORD *)this + 171);
    }
    else
    {
      v231 = 1;
    }
    v4 += v231 + 2;
  }
LABEL_568:
  if ((v221 & 0xFF00) == 0)
    goto LABEL_592;
  if ((v221 & 0x100) != 0)
  {
    v232 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 127);
    if (v232 >= 0x80)
    {
      v233 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v232);
      v221 = *((_DWORD *)this + 171);
    }
    else
    {
      v233 = 1;
    }
    v4 += v233 + 2;
  }
  if ((v221 & 0x200) != 0)
    v4 += 3;
  if ((v221 & 0x1000) != 0)
  {
    v234 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 138);
    if (v234 >= 0x80)
    {
      v235 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v234);
      v221 = *((_DWORD *)this + 171);
    }
    else
    {
      v235 = 1;
    }
    v4 += v235 + 2;
    if ((v221 & 0x2000) == 0)
    {
LABEL_578:
      if ((v221 & 0x4000) == 0)
        goto LABEL_592;
      goto LABEL_588;
    }
  }
  else if ((v221 & 0x2000) == 0)
  {
    goto LABEL_578;
  }
  v236 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 139);
  if (v236 >= 0x80)
  {
    v237 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v236);
    v221 = *((_DWORD *)this + 171);
  }
  else
  {
    v237 = 1;
  }
  v4 += v237 + 2;
  if ((v221 & 0x4000) != 0)
  {
LABEL_588:
    v238 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 146);
    if (v238 >= 0x80)
    {
      v239 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v238);
      v221 = *((_DWORD *)this + 171);
    }
    else
    {
      v239 = 1;
    }
    v4 += v239 + 2;
  }
LABEL_592:
  if ((v221 & 0xFF0000) == 0)
    goto LABEL_634;
  if ((v221 & 0x10000) != 0)
  {
    v240 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 147);
    if (v240 >= 0x80)
    {
      v241 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v240);
      v221 = *((_DWORD *)this + 171);
    }
    else
    {
      v241 = 1;
    }
    v4 += v241 + 2;
    if ((v221 & 0x20000) == 0)
    {
LABEL_595:
      if ((v221 & 0x40000) == 0)
        goto LABEL_596;
      goto LABEL_610;
    }
  }
  else if ((v221 & 0x20000) == 0)
  {
    goto LABEL_595;
  }
  v242 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 148);
  if (v242 >= 0x80)
  {
    v243 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v242);
    v221 = *((_DWORD *)this + 171);
  }
  else
  {
    v243 = 1;
  }
  v4 += v243 + 2;
  if ((v221 & 0x40000) == 0)
  {
LABEL_596:
    if ((v221 & 0x80000) == 0)
      goto LABEL_597;
    goto LABEL_614;
  }
LABEL_610:
  v244 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 149);
  if (v244 >= 0x80)
  {
    v245 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v244);
    v221 = *((_DWORD *)this + 171);
  }
  else
  {
    v245 = 1;
  }
  v4 += v245 + 2;
  if ((v221 & 0x80000) == 0)
  {
LABEL_597:
    if ((v221 & 0x100000) == 0)
      goto LABEL_598;
    goto LABEL_618;
  }
LABEL_614:
  v246 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 150);
  if (v246 >= 0x80)
  {
    v247 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v246);
    v221 = *((_DWORD *)this + 171);
  }
  else
  {
    v247 = 1;
  }
  v4 += v247 + 2;
  if ((v221 & 0x100000) == 0)
  {
LABEL_598:
    if ((v221 & 0x200000) == 0)
      goto LABEL_599;
    goto LABEL_622;
  }
LABEL_618:
  v248 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 151);
  if (v248 >= 0x80)
  {
    v249 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v248);
    v221 = *((_DWORD *)this + 171);
  }
  else
  {
    v249 = 1;
  }
  v4 += v249 + 2;
  if ((v221 & 0x200000) == 0)
  {
LABEL_599:
    if ((v221 & 0x400000) == 0)
      goto LABEL_600;
    goto LABEL_626;
  }
LABEL_622:
  v250 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 152);
  if (v250 >= 0x80)
  {
    v251 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v250);
    v221 = *((_DWORD *)this + 171);
  }
  else
  {
    v251 = 1;
  }
  v4 += v251 + 2;
  if ((v221 & 0x400000) == 0)
  {
LABEL_600:
    if ((v221 & 0x800000) == 0)
      goto LABEL_634;
    goto LABEL_630;
  }
LABEL_626:
  v252 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 153);
  if (v252 >= 0x80)
  {
    v253 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v252);
    v221 = *((_DWORD *)this + 171);
  }
  else
  {
    v253 = 1;
  }
  v4 += v253 + 2;
  if ((v221 & 0x800000) != 0)
  {
LABEL_630:
    v254 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 154);
    if (v254 >= 0x80)
    {
      v255 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v254);
      v221 = *((_DWORD *)this + 171);
    }
    else
    {
      v255 = 1;
    }
    v4 += v255 + 2;
  }
LABEL_634:
  if (!HIBYTE(v221))
    goto LABEL_667;
  if ((v221 & 0x1000000) == 0)
  {
    if ((v221 & 0x2000000) == 0)
      goto LABEL_637;
LABEL_643:
    v258 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 157);
    if (v258 >= 0x80)
    {
      v259 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v258);
      v221 = *((_DWORD *)this + 171);
    }
    else
    {
      v259 = 1;
    }
    v4 += v259 + 2;
    if ((v221 & 0x4000000) == 0)
      goto LABEL_651;
    goto LABEL_647;
  }
  v256 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 156);
  if (v256 >= 0x80)
  {
    v257 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v256);
    v221 = *((_DWORD *)this + 171);
  }
  else
  {
    v257 = 1;
  }
  v4 += v257 + 2;
  if ((v221 & 0x2000000) != 0)
    goto LABEL_643;
LABEL_637:
  if ((v221 & 0x4000000) != 0)
  {
LABEL_647:
    v260 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 158);
    if (v260 >= 0x80)
    {
      v261 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v260);
      v221 = *((_DWORD *)this + 171);
    }
    else
    {
      v261 = 1;
    }
    v4 += v261 + 2;
  }
LABEL_651:
  v262 = v4 + 3;
  if ((v221 & 0x8000000) == 0)
    v262 = v4;
  if ((v221 & 0x10000000) != 0)
    v262 += 3;
  if ((v221 & 0x20000000) != 0)
    v262 += 3;
  if ((v221 & 0x40000000) != 0)
    v4 = v262 + 3;
  else
    v4 = v262;
  if ((v221 & 0x80000000) != 0)
  {
    v263 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 159);
    if ((v263 & 0x80000000) != 0)
    {
      v264 = 10;
    }
    else if (v263 >= 0x80)
    {
      v264 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v263);
    }
    else
    {
      v264 = 1;
    }
    v4 += v264 + 2;
  }
LABEL_667:
  LOBYTE(v265) = *((_BYTE *)this + 688);
  if (!(_BYTE)v265)
    goto LABEL_703;
  if ((*((_BYTE *)this + 688) & 1) != 0)
    v4 += 3;
  if ((*((_BYTE *)this + 688) & 2) == 0)
  {
    if ((*((_BYTE *)this + 688) & 4) == 0)
      goto LABEL_672;
LABEL_678:
    v268 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 164);
    if (v268 >= 0x80)
    {
      v269 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v268) + 2;
      v265 = *((_DWORD *)this + 172);
    }
    else
    {
      v269 = 3;
    }
    v4 += v269;
    if ((v265 & 8) == 0)
      goto LABEL_691;
LABEL_682:
    v270 = *((_QWORD *)this + 81);
    v271 = *(unsigned __int8 *)(v270 + 23);
    v272 = v271;
    v273 = *(_QWORD *)(v270 + 8);
    if ((v271 & 0x80u) == 0)
      v274 = *(unsigned __int8 *)(v270 + 23);
    else
      v274 = v273;
    if (v274 >= 0x80)
    {
      v275 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v274);
      v271 = *(unsigned __int8 *)(v270 + 23);
      v273 = *(_QWORD *)(v270 + 8);
      v265 = *((_DWORD *)this + 172);
      v272 = *(_BYTE *)(v270 + 23);
    }
    else
    {
      v275 = 1;
    }
    if (v272 < 0)
      v271 = v273;
    v4 += v275 + v271 + 2;
    goto LABEL_691;
  }
  v266 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 160);
  if (v266 >= 0x80)
  {
    v267 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v266);
    v265 = *((_DWORD *)this + 172);
  }
  else
  {
    v267 = 1;
  }
  v4 += v267 + 2;
  if ((v265 & 4) != 0)
    goto LABEL_678;
LABEL_672:
  if ((v265 & 8) != 0)
    goto LABEL_682;
LABEL_691:
  if ((v265 & 0x10) != 0)
    v4 += 3;
  if ((v265 & 0x20) != 0)
  {
    v276 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 165);
    if (v276 >= 0x80)
    {
      v277 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v276) + 2;
      v265 = *((_DWORD *)this + 172);
    }
    else
    {
      v277 = 3;
    }
    v4 += v277;
  }
  v278 = v4 + 3;
  if ((v265 & 0x40) == 0)
    v278 = v4;
  if ((v265 & 0x80) != 0)
    v4 = v278 + 3;
  else
    v4 = v278;
LABEL_703:
  v279 = *((_DWORD *)this + 68);
  v280 = v4 + 2 * v279;
  if (v279 >= 1)
  {
    for (i = 0; i < v279; ++i)
    {
      v282 = *(_QWORD *)(*((_QWORD *)this + 33) + 8 * i);
      v283 = *(unsigned __int8 *)(v282 + 23);
      v284 = v283;
      v285 = *(_QWORD *)(v282 + 8);
      if ((v283 & 0x80u) == 0)
        v286 = *(unsigned __int8 *)(v282 + 23);
      else
        v286 = v285;
      if (v286 >= 0x80)
      {
        v287 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v286);
        v283 = *(unsigned __int8 *)(v282 + 23);
        v285 = *(_QWORD *)(v282 + 8);
        v279 = *((_DWORD *)this + 68);
        v284 = *(_BYTE *)(v282 + 23);
      }
      else
      {
        v287 = 1;
      }
      if (v284 < 0)
        v283 = v285;
      v280 += v287 + v283;
    }
  }
  v288 = *((_DWORD *)this + 108);
  v289 = v280 + 2 * v288;
  if (v288 >= 1)
  {
    for (j = 0; j < v288; ++j)
    {
      v291 = *(_QWORD *)(*((_QWORD *)this + 53) + 8 * j);
      v292 = *(unsigned __int8 *)(v291 + 23);
      v293 = v292;
      v294 = *(_QWORD *)(v291 + 8);
      if ((v292 & 0x80u) == 0)
        v295 = *(unsigned __int8 *)(v291 + 23);
      else
        v295 = v294;
      if (v295 >= 0x80)
      {
        v296 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v295);
        v292 = *(unsigned __int8 *)(v291 + 23);
        v294 = *(_QWORD *)(v291 + 8);
        v288 = *((_DWORD *)this + 108);
        v293 = *(_BYTE *)(v291 + 23);
      }
      else
      {
        v296 = 1;
      }
      if (v293 < 0)
        v292 = v294;
      v289 += v296 + v292;
    }
  }
  v297 = *((_DWORD *)this + 130);
  v298 = v289 + 2 * v297;
  if (v297 >= 1)
  {
    v299 = 0;
    do
    {
      v300 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::metrics::ATM_CallEndEvent_myreason::ByteSize(*(awd::metrics::ATM_CallEndEvent_myreason **)(*((_QWORD *)this + 64) + 8 * v299));
      v301 = (int)v300;
      if (v300 >= 0x80)
        v302 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v300);
      else
        v302 = 1;
      v298 += v301 + v302;
      ++v299;
    }
    while (v299 < *((int *)this + 130));
  }
  v303 = *((_DWORD *)this + 142);
  v304 = (3 * *((_DWORD *)this + 136) + v298 + 2 * v303);
  if (v303 >= 1)
  {
    v305 = 0;
    do
    {
      v306 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::metrics::ATM_CallEndEvent_handover::ByteSize(*(awd::metrics::ATM_CallEndEvent_handover **)(*((_QWORD *)this + 70) + 8 * v305));
      v307 = (int)v306;
      if (v306 >= 0x80)
        v308 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v306);
      else
        v308 = 1;
      v304 = (v307 + v304 + v308);
      ++v305;
    }
    while (v305 < *((int *)this + 142));
  }
  *((_DWORD *)this + 167) = v304;
  return v304;
}

void awd::metrics::ATM_CallEndEvent::CheckTypeAndMergeFrom(const void **this, const void **lpsrc)
{
  wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *v4;
  uint64_t v5;
  const std::string *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  std::string *v10;
  _QWORD *v11;
  uint64_t v12;
  wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *v13;
  uint64_t v14;
  const std::string *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  std::string *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const awd::metrics::ATM_CallEndEvent_myreason *v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  const awd::metrics::ATM_CallEndEvent_handover *v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  char v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  char v46;
  const std::string *v47;
  std::string *v48;
  char v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  char v54;
  unsigned int v55;
  int v56;
  int v57;
  const void *v58;
  const std::string *v59;
  std::string *v60;
  char v61;
  int v62;
  char v63;
  char v64;
  char v65;
  const std::string *v66;
  std::string *v67;
  const std::string *v68;
  std::string *v69;
  const std::string *v70;
  std::string *v71;
  const std::string *v72;
  std::string *v73;
  const std::string *v74;
  std::string *v75;
  int v76;
  int v77;
  char v78;
  int v79;
  int v80;
  const void *v81;
  unsigned int v82;
  unsigned int v83;
  const std::string *v84;
  std::string *v85;
  int v86;
  const std::string *v87;
  std::string *v88;
  char v89;
  const std::string *v90;
  std::string *v91;
  const std::string *v92;
  std::string *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  const std::string *v99;
  std::string *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  char v120;
  int v121;
  const std::string *v122;
  std::string *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  int v128;
  int v129;
  const void *v130;
  int v131;
  int v132;
  int v133;
  const void *v134;
  const void *v135;
  int v136;
  int v137;
  int v138;
  char v139;
  int v140;
  char v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  char v151;
  int v152;
  int v153;
  const std::string *v154;
  std::string *v155;
  const std::string *v156;
  std::string *v157;
  const std::string *v158;
  std::string *v159;
  int v160;
  int v161;
  char v162;
  char v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  char v173;
  char v174;
  char v175;
  char v176;
  int v177;
  int v178;
  char v179;
  char v180;
  int v181;
  int v182;
  const std::string *v183;
  std::string *v184;
  char v185;
  int v186;
  char v187;
  char v188;
  int v189;
  const void *v190;
  const void *v191;
  int v192;
  char v193[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v193);
  }
  v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 33));
  if (*((int *)lpsrc + 68) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = (const std::string *)*((_QWORD *)lpsrc[33] + v5);
      v7 = *((int *)this + 68);
      v8 = *((_DWORD *)this + 69);
      if ((int)v7 >= v8)
      {
        if (v8 == *((_DWORD *)this + 70))
        {
          v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 33));
          v8 = *((_DWORD *)this + 69);
        }
        *((_DWORD *)this + 69) = v8 + 1;
        v10 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(v4);
        v11 = this[33];
        v12 = *((int *)this + 68);
        *((_DWORD *)this + 68) = v12 + 1;
        v11[v12] = v10;
      }
      else
      {
        v9 = this[33];
        *((_DWORD *)this + 68) = v7 + 1;
        v10 = (std::string *)v9[v7];
      }
      v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)std::string::operator=(v10, v6);
      ++v5;
    }
    while (v5 < *((int *)lpsrc + 68));
  }
  v13 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 53));
  if (*((int *)lpsrc + 108) >= 1)
  {
    v14 = 0;
    do
    {
      v15 = (const std::string *)*((_QWORD *)lpsrc[53] + v14);
      v16 = *((int *)this + 108);
      v17 = *((_DWORD *)this + 109);
      if ((int)v16 >= v17)
      {
        if (v17 == *((_DWORD *)this + 110))
        {
          v13 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 53));
          v17 = *((_DWORD *)this + 109);
        }
        *((_DWORD *)this + 109) = v17 + 1;
        v19 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(v13);
        v20 = this[53];
        v21 = *((int *)this + 108);
        *((_DWORD *)this + 108) = v21 + 1;
        v20[v21] = v19;
      }
      else
      {
        v18 = this[53];
        *((_DWORD *)this + 108) = v16 + 1;
        v19 = (std::string *)v18[v16];
      }
      v13 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)std::string::operator=(v19, v15);
      ++v14;
    }
    while (v14 < *((int *)lpsrc + 108));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 64));
  if (*((int *)lpsrc + 130) >= 1)
  {
    v22 = 0;
    v23 = MEMORY[0x1E0DE8338];
    do
    {
      v24 = (const awd::metrics::ATM_CallEndEvent_myreason *)*((_QWORD *)lpsrc[64] + v22);
      v25 = *((int *)this + 130);
      v26 = *((_DWORD *)this + 131);
      if ((int)v25 >= v26)
      {
        if (v26 == *((_DWORD *)this + 132))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 64));
          v26 = *((_DWORD *)this + 131);
        }
        *((_DWORD *)this + 131) = v26 + 1;
        v28 = operator new();
        *(_QWORD *)v28 = &off_1E78BF270;
        *(_QWORD *)(v28 + 8) = v23;
        *(_QWORD *)(v28 + 32) = v23;
        *(_QWORD *)(v28 + 40) = 0;
        *(_QWORD *)(v28 + 16) = v23;
        *(_QWORD *)(v28 + 24) = v23;
        *(_DWORD *)(v28 + 48) = 0;
        v29 = this[64];
        v30 = *((int *)this + 130);
        *((_DWORD *)this + 130) = v30 + 1;
        v29[v30] = v28;
      }
      else
      {
        v27 = this[64];
        *((_DWORD *)this + 130) = v25 + 1;
        v28 = v27[v25];
      }
      awd::metrics::ATM_CallEndEvent_myreason::MergeFrom((awd::metrics::ATM_CallEndEvent_myreason *)v28, v24);
      ++v22;
    }
    while (v22 < *((int *)lpsrc + 130));
  }
  v31 = *((_DWORD *)lpsrc + 136);
  if (v31)
  {
    wireless_diagnostics::google::protobuf::RepeatedField<BOOL>::Reserve((_DWORD *)this + 134, *((_DWORD *)this + 136) + v31);
    memcpy((char *)this[67] + *((int *)this + 136), lpsrc[67], *((int *)lpsrc + 136));
    *((_DWORD *)this + 136) += *((_DWORD *)lpsrc + 136);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 70));
  if (*((int *)lpsrc + 142) >= 1)
  {
    v32 = 0;
    do
    {
      v33 = (const awd::metrics::ATM_CallEndEvent_handover *)*((_QWORD *)lpsrc[70] + v32);
      v34 = *((int *)this + 142);
      v35 = *((_DWORD *)this + 143);
      if ((int)v34 >= v35)
      {
        if (v35 == *((_DWORD *)this + 144))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 70));
          v35 = *((_DWORD *)this + 143);
        }
        *((_DWORD *)this + 143) = v35 + 1;
        v37 = operator new();
        *(_QWORD *)v37 = &off_1E78BF2E8;
        *(_DWORD *)(v37 + 8) = 0;
        *(_BYTE *)(v37 + 12) = 0;
        *(_QWORD *)(v37 + 16) = 0;
        v38 = this[70];
        v39 = *((int *)this + 142);
        *((_DWORD *)this + 142) = v39 + 1;
        v38[v39] = v37;
      }
      else
      {
        v36 = this[70];
        *((_DWORD *)this + 142) = v34 + 1;
        v37 = v36[v34];
      }
      awd::metrics::ATM_CallEndEvent_handover::MergeFrom((awd::metrics::ATM_CallEndEvent_handover *)v37, v33);
      ++v32;
    }
    while (v32 < *((int *)lpsrc + 142));
  }
  v40 = *((_DWORD *)lpsrc + 168);
  if (!(_BYTE)v40)
    goto LABEL_48;
  if ((v40 & 1) != 0)
  {
    v58 = lpsrc[1];
    *((_DWORD *)this + 168) |= 1u;
    this[1] = v58;
    v40 = *((_DWORD *)lpsrc + 168);
    if ((v40 & 2) == 0)
    {
LABEL_41:
      if ((v40 & 4) == 0)
        goto LABEL_42;
      goto LABEL_160;
    }
  }
  else if ((v40 & 2) == 0)
  {
    goto LABEL_41;
  }
  v59 = (const std::string *)lpsrc[2];
  *((_DWORD *)this + 168) |= 2u;
  v60 = (std::string *)this[2];
  if (v60 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v60 = (std::string *)operator new();
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    this[2] = v60;
  }
  std::string::operator=(v60, v59);
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 4) == 0)
  {
LABEL_42:
    if ((v40 & 8) == 0)
      goto LABEL_43;
    goto LABEL_161;
  }
LABEL_160:
  v61 = *((_BYTE *)lpsrc + 28);
  *((_DWORD *)this + 168) |= 4u;
  *((_BYTE *)this + 28) = v61;
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 8) == 0)
  {
LABEL_43:
    if ((v40 & 0x10) == 0)
      goto LABEL_44;
    goto LABEL_163;
  }
LABEL_161:
  v62 = *((_DWORD *)lpsrc + 6);
  if ((v62 + 1) >= 8)
    __assert_rtn("set_type", "CATM.pb.h", 12814, "::awd::metrics::enum_ATM_call_type_IsValid(value)");
  *((_DWORD *)this + 168) |= 8u;
  *((_DWORD *)this + 6) = v62;
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x10) == 0)
  {
LABEL_44:
    if ((v40 & 0x20) == 0)
      goto LABEL_45;
LABEL_164:
    v64 = *((_BYTE *)lpsrc + 30);
    *((_DWORD *)this + 168) |= 0x20u;
    *((_BYTE *)this + 30) = v64;
    v40 = *((_DWORD *)lpsrc + 168);
    if ((v40 & 0x40) == 0)
    {
LABEL_46:
      if ((v40 & 0x80) == 0)
        goto LABEL_48;
      goto LABEL_47;
    }
    goto LABEL_165;
  }
LABEL_163:
  v63 = *((_BYTE *)lpsrc + 29);
  *((_DWORD *)this + 168) |= 0x10u;
  *((_BYTE *)this + 29) = v63;
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x20) != 0)
    goto LABEL_164;
LABEL_45:
  if ((v40 & 0x40) == 0)
    goto LABEL_46;
LABEL_165:
  v65 = *((_BYTE *)lpsrc + 31);
  *((_DWORD *)this + 168) |= 0x40u;
  *((_BYTE *)this + 31) = v65;
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x80) != 0)
  {
LABEL_47:
    v41 = *((_BYTE *)lpsrc + 100);
    *((_DWORD *)this + 168) |= 0x80u;
    *((_BYTE *)this + 100) = v41;
    v40 = *((_DWORD *)lpsrc + 168);
  }
LABEL_48:
  if ((v40 & 0xFF00) == 0)
    goto LABEL_60;
  if ((v40 & 0x100) != 0)
  {
    v42 = *((_DWORD *)lpsrc + 10);
    if ((v42 - 1) >= 6 && v42 != -1)
      __assert_rtn("set_invite_type", "CATM.pb.h", 12925, "::awd::metrics::enum_ATM_invite_call_type_IsValid(value)");
    *((_DWORD *)this + 168) |= 0x100u;
    *((_DWORD *)this + 10) = v42;
    v40 = *((_DWORD *)lpsrc + 168);
  }
  if ((v40 & 0x200) != 0)
  {
    v84 = (const std::string *)lpsrc[4];
    *((_DWORD *)this + 168) |= 0x200u;
    v85 = (std::string *)this[4];
    if (v85 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v85 = (std::string *)operator new();
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      this[4] = v85;
    }
    std::string::operator=(v85, v84);
    v40 = *((_DWORD *)lpsrc + 168);
    if ((v40 & 0x400) == 0)
    {
LABEL_54:
      if ((v40 & 0x800) == 0)
        goto LABEL_55;
      goto LABEL_198;
    }
  }
  else if ((v40 & 0x400) == 0)
  {
    goto LABEL_54;
  }
  v86 = *((_DWORD *)lpsrc + 11);
  *((_DWORD *)this + 168) |= 0x400u;
  *((_DWORD *)this + 11) = v86;
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x800) == 0)
  {
LABEL_55:
    if ((v40 & 0x1000) == 0)
      goto LABEL_56;
    goto LABEL_201;
  }
LABEL_198:
  v87 = (const std::string *)lpsrc[6];
  *((_DWORD *)this + 168) |= 0x800u;
  v88 = (std::string *)this[6];
  if (v88 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v88 = (std::string *)operator new();
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    this[6] = v88;
  }
  std::string::operator=(v88, v87);
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x1000) == 0)
  {
LABEL_56:
    if ((v40 & 0x2000) == 0)
      goto LABEL_57;
    goto LABEL_202;
  }
LABEL_201:
  v89 = *((_BYTE *)lpsrc + 101);
  *((_DWORD *)this + 168) |= 0x1000u;
  *((_BYTE *)this + 101) = v89;
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x2000) == 0)
  {
LABEL_57:
    if ((v40 & 0x4000) == 0)
      goto LABEL_58;
    goto LABEL_205;
  }
LABEL_202:
  v90 = (const std::string *)lpsrc[7];
  *((_DWORD *)this + 168) |= 0x2000u;
  v91 = (std::string *)this[7];
  if (v91 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v91 = (std::string *)operator new();
    v91->__r_.__value_.__l.__size_ = 0;
    v91->__r_.__value_.__r.__words[2] = 0;
    v91->__r_.__value_.__r.__words[0] = 0;
    this[7] = v91;
  }
  std::string::operator=(v91, v90);
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x4000) == 0)
  {
LABEL_58:
    if ((v40 & 0x8000) == 0)
      goto LABEL_60;
    goto LABEL_59;
  }
LABEL_205:
  v92 = (const std::string *)lpsrc[8];
  *((_DWORD *)this + 168) |= 0x4000u;
  v93 = (std::string *)this[8];
  if (v93 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v93 = (std::string *)operator new();
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    this[8] = v93;
  }
  std::string::operator=(v93, v92);
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x8000) != 0)
  {
LABEL_59:
    v43 = *((_DWORD *)lpsrc + 24);
    *((_DWORD *)this + 168) |= 0x8000u;
    *((_DWORD *)this + 24) = v43;
    v40 = *((_DWORD *)lpsrc + 168);
  }
LABEL_60:
  if ((v40 & 0xFF0000) == 0)
    goto LABEL_70;
  if ((v40 & 0x10000) != 0)
  {
    v66 = (const std::string *)lpsrc[9];
    *((_DWORD *)this + 168) |= 0x10000u;
    v67 = (std::string *)this[9];
    if (v67 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v67 = (std::string *)operator new();
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      this[9] = v67;
    }
    std::string::operator=(v67, v66);
    v40 = *((_DWORD *)lpsrc + 168);
    if ((v40 & 0x20000) == 0)
    {
LABEL_63:
      if ((v40 & 0x40000) == 0)
        goto LABEL_64;
      goto LABEL_173;
    }
  }
  else if ((v40 & 0x20000) == 0)
  {
    goto LABEL_63;
  }
  v68 = (const std::string *)lpsrc[10];
  *((_DWORD *)this + 168) |= 0x20000u;
  v69 = (std::string *)this[10];
  if (v69 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v69 = (std::string *)operator new();
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    this[10] = v69;
  }
  std::string::operator=(v69, v68);
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x40000) == 0)
  {
LABEL_64:
    if ((v40 & 0x80000) == 0)
      goto LABEL_65;
    goto LABEL_176;
  }
LABEL_173:
  v70 = (const std::string *)lpsrc[11];
  *((_DWORD *)this + 168) |= 0x40000u;
  v71 = (std::string *)this[11];
  if (v71 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v71 = (std::string *)operator new();
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    this[11] = v71;
  }
  std::string::operator=(v71, v70);
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x80000) == 0)
  {
LABEL_65:
    if ((v40 & 0x100000) == 0)
      goto LABEL_66;
    goto LABEL_179;
  }
LABEL_176:
  v72 = (const std::string *)lpsrc[13];
  *((_DWORD *)this + 168) |= 0x80000u;
  v73 = (std::string *)this[13];
  if (v73 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v73 = (std::string *)operator new();
    v73->__r_.__value_.__l.__size_ = 0;
    v73->__r_.__value_.__r.__words[2] = 0;
    v73->__r_.__value_.__r.__words[0] = 0;
    this[13] = v73;
  }
  std::string::operator=(v73, v72);
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x100000) == 0)
  {
LABEL_66:
    if ((v40 & 0x200000) == 0)
      goto LABEL_67;
    goto LABEL_182;
  }
LABEL_179:
  v74 = (const std::string *)lpsrc[14];
  *((_DWORD *)this + 168) |= 0x100000u;
  v75 = (std::string *)this[14];
  if (v75 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v75 = (std::string *)operator new();
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    this[14] = v75;
  }
  std::string::operator=(v75, v74);
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x200000) == 0)
  {
LABEL_67:
    if ((v40 & 0x400000) == 0)
      goto LABEL_68;
    goto LABEL_183;
  }
LABEL_182:
  v76 = *((_DWORD *)lpsrc + 30);
  *((_DWORD *)this + 168) |= 0x200000u;
  *((_DWORD *)this + 30) = v76;
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x400000) == 0)
  {
LABEL_68:
    if ((v40 & 0x800000) == 0)
      goto LABEL_70;
    goto LABEL_69;
  }
LABEL_183:
  v77 = *((_DWORD *)lpsrc + 31);
  *((_DWORD *)this + 168) |= 0x400000u;
  *((_DWORD *)this + 31) = v77;
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x800000) != 0)
  {
LABEL_69:
    v44 = *((_DWORD *)lpsrc + 32);
    *((_DWORD *)this + 168) |= 0x800000u;
    *((_DWORD *)this + 32) = v44;
    v40 = *((_DWORD *)lpsrc + 168);
  }
LABEL_70:
  if (!HIBYTE(v40))
    goto LABEL_79;
  if ((v40 & 0x1000000) != 0)
  {
    v151 = *((_BYTE *)lpsrc + 102);
    *((_DWORD *)this + 168) |= 0x1000000u;
    *((_BYTE *)this + 102) = v151;
    v40 = *((_DWORD *)lpsrc + 168);
    if ((v40 & 0x2000000) == 0)
    {
LABEL_73:
      if ((v40 & 0x4000000) == 0)
        goto LABEL_74;
      goto LABEL_320;
    }
  }
  else if ((v40 & 0x2000000) == 0)
  {
    goto LABEL_73;
  }
  v152 = *((_DWORD *)lpsrc + 33);
  *((_DWORD *)this + 168) |= 0x2000000u;
  *((_DWORD *)this + 33) = v152;
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x4000000) == 0)
  {
LABEL_74:
    if ((v40 & 0x8000000) == 0)
      goto LABEL_75;
    goto LABEL_321;
  }
LABEL_320:
  v153 = *((_DWORD *)lpsrc + 36);
  *((_DWORD *)this + 168) |= 0x4000000u;
  *((_DWORD *)this + 36) = v153;
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x8000000) == 0)
  {
LABEL_75:
    if ((v40 & 0x10000000) == 0)
      goto LABEL_76;
    goto LABEL_324;
  }
LABEL_321:
  v154 = (const std::string *)lpsrc[17];
  *((_DWORD *)this + 168) |= 0x8000000u;
  v155 = (std::string *)this[17];
  if (v155 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v155 = (std::string *)operator new();
    v155->__r_.__value_.__l.__size_ = 0;
    v155->__r_.__value_.__r.__words[2] = 0;
    v155->__r_.__value_.__r.__words[0] = 0;
    this[17] = v155;
  }
  std::string::operator=(v155, v154);
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x10000000) == 0)
  {
LABEL_76:
    if ((v40 & 0x20000000) == 0)
      goto LABEL_77;
    goto LABEL_327;
  }
LABEL_324:
  v156 = (const std::string *)lpsrc[19];
  *((_DWORD *)this + 168) |= 0x10000000u;
  v157 = (std::string *)this[19];
  if (v157 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v157 = (std::string *)operator new();
    v157->__r_.__value_.__l.__size_ = 0;
    v157->__r_.__value_.__r.__words[2] = 0;
    v157->__r_.__value_.__r.__words[0] = 0;
    this[19] = v157;
  }
  std::string::operator=(v157, v156);
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x20000000) == 0)
  {
LABEL_77:
    if ((v40 & 0x40000000) == 0)
      goto LABEL_78;
LABEL_330:
    v160 = *((_DWORD *)lpsrc + 37);
    *((_DWORD *)this + 168) |= 0x40000000u;
    *((_DWORD *)this + 37) = v160;
    if (((_DWORD)lpsrc[84] & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_331;
  }
LABEL_327:
  v158 = (const std::string *)lpsrc[20];
  *((_DWORD *)this + 168) |= 0x20000000u;
  v159 = (std::string *)this[20];
  if (v159 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v159 = (std::string *)operator new();
    v159->__r_.__value_.__l.__size_ = 0;
    v159->__r_.__value_.__r.__words[2] = 0;
    v159->__r_.__value_.__r.__words[0] = 0;
    this[20] = v159;
  }
  std::string::operator=(v159, v158);
  v40 = *((_DWORD *)lpsrc + 168);
  if ((v40 & 0x40000000) != 0)
    goto LABEL_330;
LABEL_78:
  if ((v40 & 0x80000000) == 0)
    goto LABEL_79;
LABEL_331:
  v161 = *((_DWORD *)lpsrc + 42);
  *((_DWORD *)this + 168) |= 0x80000000;
  *((_DWORD *)this + 42) = v161;
LABEL_79:
  v45 = *((_DWORD *)lpsrc + 169);
  if (!(_BYTE)v45)
    goto LABEL_92;
  if ((v45 & 1) != 0)
  {
    v78 = *((_BYTE *)lpsrc + 103);
    *((_DWORD *)this + 169) |= 1u;
    *((_BYTE *)this + 103) = v78;
    v45 = *((_DWORD *)lpsrc + 169);
    if ((v45 & 2) == 0)
    {
LABEL_82:
      if ((v45 & 4) == 0)
        goto LABEL_83;
      goto LABEL_187;
    }
  }
  else if ((v45 & 2) == 0)
  {
    goto LABEL_82;
  }
  v79 = *((_DWORD *)lpsrc + 43);
  *((_DWORD *)this + 169) |= 2u;
  *((_DWORD *)this + 43) = v79;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 4) == 0)
  {
LABEL_83:
    if ((v45 & 8) == 0)
      goto LABEL_84;
    goto LABEL_188;
  }
LABEL_187:
  v80 = *((_DWORD *)lpsrc + 44);
  *((_DWORD *)this + 169) |= 4u;
  *((_DWORD *)this + 44) = v80;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 8) == 0)
  {
LABEL_84:
    if ((v45 & 0x10) == 0)
      goto LABEL_85;
    goto LABEL_189;
  }
LABEL_188:
  v81 = lpsrc[23];
  *((_DWORD *)this + 169) |= 8u;
  this[23] = v81;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x10) == 0)
  {
LABEL_85:
    if ((v45 & 0x20) == 0)
      goto LABEL_86;
    goto LABEL_191;
  }
LABEL_189:
  v82 = *((_DWORD *)lpsrc + 45);
  if (!awd::metrics::enum_ATM_CallEndReason_IsValid((awd::metrics *)v82))
    __assert_rtn("set_end_reason", "CATM.pb.h", 14118, "::awd::metrics::enum_ATM_CallEndReason_IsValid(value)");
  *((_DWORD *)this + 169) |= 0x10u;
  *((_DWORD *)this + 45) = v82;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x20) == 0)
  {
LABEL_86:
    if ((v45 & 0x40) == 0)
      goto LABEL_88;
    goto LABEL_87;
  }
LABEL_191:
  v83 = *((_DWORD *)lpsrc + 48);
  if ((awd::metrics::RESPONSE_Code_IsValid((awd::metrics *)v83) & 1) == 0)
    __assert_rtn("set_status_code", "CATM.pb.h", 14141, "::awd::metrics::RESPONSE_Code_IsValid(value)");
  *((_DWORD *)this + 169) |= 0x20u;
  *((_DWORD *)this + 48) = v83;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x40) == 0)
    goto LABEL_88;
LABEL_87:
  v46 = *((_BYTE *)lpsrc + 236);
  *((_DWORD *)this + 169) |= 0x40u;
  *((_BYTE *)this + 236) = v46;
  v45 = *((_DWORD *)lpsrc + 169);
LABEL_88:
  if ((v45 & 0x80) != 0)
  {
    v47 = (const std::string *)lpsrc[25];
    *((_DWORD *)this + 169) |= 0x80u;
    v48 = (std::string *)this[25];
    if (v48 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v48 = (std::string *)operator new();
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      this[25] = v48;
    }
    std::string::operator=(v48, v47);
    v45 = *((_DWORD *)lpsrc + 169);
  }
LABEL_92:
  if ((v45 & 0xFF00) == 0)
    goto LABEL_108;
  if ((v45 & 0x100) != 0)
  {
    v49 = *((_BYTE *)lpsrc + 237);
    *((_DWORD *)this + 169) |= 0x100u;
    *((_BYTE *)this + 237) = v49;
    v45 = *((_DWORD *)lpsrc + 169);
  }
  if ((v45 & 0x200) != 0)
  {
    v50 = *((_DWORD *)lpsrc + 49);
    if (v50 >= 4)
      __assert_rtn("set_callendstatus", "CATM.pb.h", 14278, "::awd::metrics::enum_ATM_call_end_status_IsValid(value)");
    *((_DWORD *)this + 169) |= 0x200u;
    *((_DWORD *)this + 49) = v50;
    v45 = *((_DWORD *)lpsrc + 169);
  }
  if ((v45 & 0x400) != 0)
  {
    v51 = *((_DWORD *)lpsrc + 52);
    *((_DWORD *)this + 169) |= 0x400u;
    *((_DWORD *)this + 52) = v51;
    v45 = *((_DWORD *)lpsrc + 169);
  }
  if ((v45 & 0x800) != 0)
  {
    v52 = *((_DWORD *)lpsrc + 53);
    if ((awd::metrics::session_termination_reason_IsValid((awd::metrics *)v52) & 1) == 0)
      __assert_rtn("set_bye_reason", "CATM.pb.h", 14323, "::awd::metrics::session_termination_reason_IsValid(value)");
    *((_DWORD *)this + 169) |= 0x800u;
    *((_DWORD *)this + 53) = v52;
    v45 = *((_DWORD *)lpsrc + 169);
  }
  if ((v45 & 0x1000) != 0)
  {
    v130 = lpsrc[27];
    *((_DWORD *)this + 169) |= 0x1000u;
    this[27] = v130;
    v45 = *((_DWORD *)lpsrc + 169);
    if ((v45 & 0x2000) == 0)
    {
LABEL_105:
      if ((v45 & 0x4000) == 0)
        goto LABEL_106;
      goto LABEL_295;
    }
  }
  else if ((v45 & 0x2000) == 0)
  {
    goto LABEL_105;
  }
  v131 = *((_DWORD *)lpsrc + 56);
  *((_DWORD *)this + 169) |= 0x2000u;
  *((_DWORD *)this + 56) = v131;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x4000) == 0)
  {
LABEL_106:
    if ((v45 & 0x8000) == 0)
      goto LABEL_108;
    goto LABEL_107;
  }
LABEL_295:
  v132 = *((_DWORD *)lpsrc + 57);
  *((_DWORD *)this + 169) |= 0x4000u;
  *((_DWORD *)this + 57) = v132;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x8000) != 0)
  {
LABEL_107:
    v53 = *((_DWORD *)lpsrc + 58);
    *((_DWORD *)this + 169) |= 0x8000u;
    *((_DWORD *)this + 58) = v53;
    v45 = *((_DWORD *)lpsrc + 169);
  }
LABEL_108:
  if ((v45 & 0xFF0000) == 0)
    goto LABEL_117;
  if ((v45 & 0x10000) != 0)
  {
    v94 = *((_DWORD *)lpsrc + 60);
    *((_DWORD *)this + 169) |= 0x10000u;
    *((_DWORD *)this + 60) = v94;
    v45 = *((_DWORD *)lpsrc + 169);
    if ((v45 & 0x20000) == 0)
    {
LABEL_111:
      if ((v45 & 0x40000) == 0)
        goto LABEL_112;
      goto LABEL_211;
    }
  }
  else if ((v45 & 0x20000) == 0)
  {
    goto LABEL_111;
  }
  v95 = *((_DWORD *)lpsrc + 61);
  *((_DWORD *)this + 169) |= 0x20000u;
  *((_DWORD *)this + 61) = v95;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x40000) == 0)
  {
LABEL_112:
    if ((v45 & 0x80000) == 0)
      goto LABEL_113;
    goto LABEL_212;
  }
LABEL_211:
  v96 = *((_DWORD *)lpsrc + 62);
  *((_DWORD *)this + 169) |= 0x40000u;
  *((_DWORD *)this + 62) = v96;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x80000) == 0)
  {
LABEL_113:
    if ((v45 & 0x100000) == 0)
      goto LABEL_114;
    goto LABEL_213;
  }
LABEL_212:
  v97 = *((_DWORD *)lpsrc + 63);
  *((_DWORD *)this + 169) |= 0x80000u;
  *((_DWORD *)this + 63) = v97;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x100000) == 0)
  {
LABEL_114:
    if ((v45 & 0x200000) == 0)
      goto LABEL_115;
    goto LABEL_214;
  }
LABEL_213:
  v98 = *((_DWORD *)lpsrc + 72);
  *((_DWORD *)this + 169) |= 0x100000u;
  *((_DWORD *)this + 72) = v98;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x200000) == 0)
  {
LABEL_115:
    if ((v45 & 0x800000) == 0)
      goto LABEL_117;
    goto LABEL_116;
  }
LABEL_214:
  v99 = (const std::string *)lpsrc[32];
  *((_DWORD *)this + 169) |= 0x200000u;
  v100 = (std::string *)this[32];
  if (v100 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v100 = (std::string *)operator new();
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    this[32] = v100;
  }
  std::string::operator=(v100, v99);
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x800000) != 0)
  {
LABEL_116:
    v54 = *((_BYTE *)lpsrc + 238);
    *((_DWORD *)this + 169) |= 0x800000u;
    *((_BYTE *)this + 238) = v54;
    v45 = *((_DWORD *)lpsrc + 169);
  }
LABEL_117:
  if (!HIBYTE(v45))
    goto LABEL_126;
  if ((v45 & 0x1000000) != 0)
  {
    v162 = *((_BYTE *)lpsrc + 239);
    *((_DWORD *)this + 169) |= 0x1000000u;
    *((_BYTE *)this + 239) = v162;
    v45 = *((_DWORD *)lpsrc + 169);
    if ((v45 & 0x2000000) == 0)
    {
LABEL_120:
      if ((v45 & 0x4000000) == 0)
        goto LABEL_121;
      goto LABEL_334;
    }
  }
  else if ((v45 & 0x2000000) == 0)
  {
    goto LABEL_120;
  }
  v163 = *((_BYTE *)lpsrc + 396);
  *((_DWORD *)this + 169) |= 0x2000000u;
  *((_BYTE *)this + 396) = v163;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x4000000) == 0)
  {
LABEL_121:
    if ((v45 & 0x8000000) == 0)
      goto LABEL_122;
    goto LABEL_335;
  }
LABEL_334:
  v164 = *((_DWORD *)lpsrc + 73);
  *((_DWORD *)this + 169) |= 0x4000000u;
  *((_DWORD *)this + 73) = v164;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x8000000) == 0)
  {
LABEL_122:
    if ((v45 & 0x10000000) == 0)
      goto LABEL_123;
    goto LABEL_336;
  }
LABEL_335:
  v165 = *((_DWORD *)lpsrc + 74);
  *((_DWORD *)this + 169) |= 0x8000000u;
  *((_DWORD *)this + 74) = v165;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x10000000) == 0)
  {
LABEL_123:
    if ((v45 & 0x20000000) == 0)
      goto LABEL_124;
    goto LABEL_337;
  }
LABEL_336:
  v166 = *((_DWORD *)lpsrc + 75);
  *((_DWORD *)this + 169) |= 0x10000000u;
  *((_DWORD *)this + 75) = v166;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x20000000) == 0)
  {
LABEL_124:
    if ((v45 & 0x40000000) == 0)
      goto LABEL_125;
LABEL_338:
    v168 = *((_DWORD *)lpsrc + 77);
    *((_DWORD *)this + 169) |= 0x40000000u;
    *((_DWORD *)this + 77) = v168;
    if ((*((_DWORD *)lpsrc + 169) & 0x80000000) == 0)
      goto LABEL_126;
    goto LABEL_339;
  }
LABEL_337:
  v167 = *((_DWORD *)lpsrc + 76);
  *((_DWORD *)this + 169) |= 0x20000000u;
  *((_DWORD *)this + 76) = v167;
  v45 = *((_DWORD *)lpsrc + 169);
  if ((v45 & 0x40000000) != 0)
    goto LABEL_338;
LABEL_125:
  if ((v45 & 0x80000000) == 0)
    goto LABEL_126;
LABEL_339:
  v169 = *((_DWORD *)lpsrc + 78);
  *((_DWORD *)this + 169) |= 0x80000000;
  *((_DWORD *)this + 78) = v169;
LABEL_126:
  v55 = *((_DWORD *)lpsrc + 170);
  if (!(_BYTE)v55)
    goto LABEL_136;
  if ((v55 & 1) != 0)
  {
    v101 = *((_DWORD *)lpsrc + 79);
    *((_DWORD *)this + 170) |= 1u;
    *((_DWORD *)this + 79) = v101;
    v55 = *((_DWORD *)lpsrc + 170);
    if ((v55 & 2) == 0)
    {
LABEL_129:
      if ((v55 & 4) == 0)
        goto LABEL_130;
      goto LABEL_220;
    }
  }
  else if ((v55 & 2) == 0)
  {
    goto LABEL_129;
  }
  v102 = *((_DWORD *)lpsrc + 80);
  *((_DWORD *)this + 170) |= 2u;
  *((_DWORD *)this + 80) = v102;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 4) == 0)
  {
LABEL_130:
    if ((v55 & 8) == 0)
      goto LABEL_131;
    goto LABEL_221;
  }
LABEL_220:
  v103 = *((_DWORD *)lpsrc + 81);
  *((_DWORD *)this + 170) |= 4u;
  *((_DWORD *)this + 81) = v103;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 8) == 0)
  {
LABEL_131:
    if ((v55 & 0x10) == 0)
      goto LABEL_132;
    goto LABEL_222;
  }
LABEL_221:
  v104 = *((_DWORD *)lpsrc + 82);
  *((_DWORD *)this + 170) |= 8u;
  *((_DWORD *)this + 82) = v104;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x10) == 0)
  {
LABEL_132:
    if ((v55 & 0x20) == 0)
      goto LABEL_133;
    goto LABEL_223;
  }
LABEL_222:
  v105 = *((_DWORD *)lpsrc + 83);
  *((_DWORD *)this + 170) |= 0x10u;
  *((_DWORD *)this + 83) = v105;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x20) == 0)
  {
LABEL_133:
    if ((v55 & 0x40) == 0)
      goto LABEL_134;
    goto LABEL_224;
  }
LABEL_223:
  v106 = *((_DWORD *)lpsrc + 84);
  *((_DWORD *)this + 170) |= 0x20u;
  *((_DWORD *)this + 84) = v106;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x40) == 0)
  {
LABEL_134:
    if ((v55 & 0x80) == 0)
      goto LABEL_136;
    goto LABEL_135;
  }
LABEL_224:
  v107 = *((_DWORD *)lpsrc + 85);
  *((_DWORD *)this + 170) |= 0x40u;
  *((_DWORD *)this + 85) = v107;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x80) != 0)
  {
LABEL_135:
    v56 = *((_DWORD *)lpsrc + 86);
    *((_DWORD *)this + 170) |= 0x80u;
    *((_DWORD *)this + 86) = v56;
    v55 = *((_DWORD *)lpsrc + 170);
  }
LABEL_136:
  if ((v55 & 0xFF00) == 0)
    goto LABEL_146;
  if ((v55 & 0x100) != 0)
  {
    v108 = *((_DWORD *)lpsrc + 87);
    *((_DWORD *)this + 170) |= 0x100u;
    *((_DWORD *)this + 87) = v108;
    v55 = *((_DWORD *)lpsrc + 170);
    if ((v55 & 0x200) == 0)
    {
LABEL_139:
      if ((v55 & 0x400) == 0)
        goto LABEL_140;
      goto LABEL_228;
    }
  }
  else if ((v55 & 0x200) == 0)
  {
    goto LABEL_139;
  }
  v109 = *((_DWORD *)lpsrc + 88);
  *((_DWORD *)this + 170) |= 0x200u;
  *((_DWORD *)this + 88) = v109;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x400) == 0)
  {
LABEL_140:
    if ((v55 & 0x800) == 0)
      goto LABEL_141;
    goto LABEL_229;
  }
LABEL_228:
  v110 = *((_DWORD *)lpsrc + 89);
  *((_DWORD *)this + 170) |= 0x400u;
  *((_DWORD *)this + 89) = v110;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x800) == 0)
  {
LABEL_141:
    if ((v55 & 0x1000) == 0)
      goto LABEL_142;
    goto LABEL_230;
  }
LABEL_229:
  v111 = *((_DWORD *)lpsrc + 90);
  *((_DWORD *)this + 170) |= 0x800u;
  *((_DWORD *)this + 90) = v111;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x1000) == 0)
  {
LABEL_142:
    if ((v55 & 0x2000) == 0)
      goto LABEL_143;
    goto LABEL_231;
  }
LABEL_230:
  v112 = *((_DWORD *)lpsrc + 91);
  *((_DWORD *)this + 170) |= 0x1000u;
  *((_DWORD *)this + 91) = v112;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x2000) == 0)
  {
LABEL_143:
    if ((v55 & 0x4000) == 0)
      goto LABEL_144;
    goto LABEL_232;
  }
LABEL_231:
  v113 = *((_DWORD *)lpsrc + 92);
  *((_DWORD *)this + 170) |= 0x2000u;
  *((_DWORD *)this + 92) = v113;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x4000) == 0)
  {
LABEL_144:
    if ((v55 & 0x8000) == 0)
      goto LABEL_146;
    goto LABEL_145;
  }
LABEL_232:
  v114 = *((_DWORD *)lpsrc + 93);
  *((_DWORD *)this + 170) |= 0x4000u;
  *((_DWORD *)this + 93) = v114;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x8000) != 0)
  {
LABEL_145:
    v57 = *((_DWORD *)lpsrc + 94);
    *((_DWORD *)this + 170) |= 0x8000u;
    *((_DWORD *)this + 94) = v57;
    v55 = *((_DWORD *)lpsrc + 170);
  }
LABEL_146:
  if ((v55 & 0xFF0000) == 0)
    goto LABEL_244;
  if ((v55 & 0x10000) != 0)
  {
    v115 = *((_DWORD *)lpsrc + 95);
    *((_DWORD *)this + 170) |= 0x10000u;
    *((_DWORD *)this + 95) = v115;
    v55 = *((_DWORD *)lpsrc + 170);
    if ((v55 & 0x20000) == 0)
    {
LABEL_149:
      if ((v55 & 0x40000) == 0)
        goto LABEL_150;
      goto LABEL_236;
    }
  }
  else if ((v55 & 0x20000) == 0)
  {
    goto LABEL_149;
  }
  v116 = *((_DWORD *)lpsrc + 96);
  *((_DWORD *)this + 170) |= 0x20000u;
  *((_DWORD *)this + 96) = v116;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x40000) == 0)
  {
LABEL_150:
    if ((v55 & 0x80000) == 0)
      goto LABEL_151;
    goto LABEL_237;
  }
LABEL_236:
  v117 = *((_DWORD *)lpsrc + 97);
  *((_DWORD *)this + 170) |= 0x40000u;
  *((_DWORD *)this + 97) = v117;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x80000) == 0)
  {
LABEL_151:
    if ((v55 & 0x100000) == 0)
      goto LABEL_152;
    goto LABEL_238;
  }
LABEL_237:
  v118 = *((_DWORD *)lpsrc + 98);
  *((_DWORD *)this + 170) |= 0x80000u;
  *((_DWORD *)this + 98) = v118;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x100000) == 0)
  {
LABEL_152:
    if ((v55 & 0x200000) == 0)
      goto LABEL_153;
    goto LABEL_239;
  }
LABEL_238:
  v119 = *((_DWORD *)lpsrc + 100);
  *((_DWORD *)this + 170) |= 0x100000u;
  *((_DWORD *)this + 100) = v119;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x200000) == 0)
  {
LABEL_153:
    if ((v55 & 0x400000) == 0)
      goto LABEL_154;
    goto LABEL_240;
  }
LABEL_239:
  v120 = *((_BYTE *)lpsrc + 397);
  *((_DWORD *)this + 170) |= 0x200000u;
  *((_BYTE *)this + 397) = v120;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x400000) == 0)
  {
LABEL_154:
    if ((v55 & 0x800000) == 0)
      goto LABEL_244;
    goto LABEL_241;
  }
LABEL_240:
  v121 = *((_DWORD *)lpsrc + 101);
  *((_DWORD *)this + 170) |= 0x400000u;
  *((_DWORD *)this + 101) = v121;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x800000) == 0)
    goto LABEL_244;
LABEL_241:
  v122 = (const std::string *)lpsrc[51];
  *((_DWORD *)this + 170) |= 0x800000u;
  v123 = (std::string *)this[51];
  if (v123 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v123 = (std::string *)operator new();
    v123->__r_.__value_.__l.__size_ = 0;
    v123->__r_.__value_.__r.__words[2] = 0;
    v123->__r_.__value_.__r.__words[0] = 0;
    this[51] = v123;
  }
  std::string::operator=(v123, v122);
  v55 = *((_DWORD *)lpsrc + 170);
LABEL_244:
  if (!HIBYTE(v55))
    goto LABEL_256;
  if ((v55 & 0x1000000) != 0)
  {
    v124 = *((_DWORD *)lpsrc + 104);
    if (v124 >= 3)
      __assert_rtn("set_amr_format", "CATM.pb.h", 15432, "::awd::metrics::enum_codec_format_IsValid(value)");
    *((_DWORD *)this + 170) |= 0x1000000u;
    *((_DWORD *)this + 104) = v124;
    v55 = *((_DWORD *)lpsrc + 170);
  }
  if ((v55 & 0x2000000) != 0)
  {
    v125 = *((_DWORD *)lpsrc + 105);
    if (v125 >= 6)
      __assert_rtn("set_codec", "CATM.pb.h", 15455, "::awd::metrics::enum_codec_type_IsValid(value)");
    *((_DWORD *)this + 170) |= 0x2000000u;
    *((_DWORD *)this + 105) = v125;
    v55 = *((_DWORD *)lpsrc + 170);
  }
  if ((v55 & 0x4000000) != 0)
  {
    v188 = *((_BYTE *)lpsrc + 398);
    *((_DWORD *)this + 170) |= 0x4000000u;
    *((_BYTE *)this + 398) = v188;
    v55 = *((_DWORD *)lpsrc + 170);
    if ((v55 & 0x10000000) == 0)
    {
LABEL_253:
      if ((v55 & 0x20000000) == 0)
        goto LABEL_254;
      goto LABEL_372;
    }
  }
  else if ((v55 & 0x10000000) == 0)
  {
    goto LABEL_253;
  }
  v189 = *((_DWORD *)lpsrc + 114);
  *((_DWORD *)this + 170) |= 0x10000000u;
  *((_DWORD *)this + 114) = v189;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x20000000) == 0)
  {
LABEL_254:
    if ((v55 & 0x40000000) == 0)
      goto LABEL_255;
LABEL_373:
    v191 = lpsrc[58];
    *((_DWORD *)this + 170) |= 0x40000000u;
    this[58] = v191;
    if (((_DWORD)lpsrc[85] & 0x80000000) == 0)
      goto LABEL_256;
    goto LABEL_374;
  }
LABEL_372:
  v190 = lpsrc[56];
  *((_DWORD *)this + 170) |= 0x20000000u;
  this[56] = v190;
  v55 = *((_DWORD *)lpsrc + 170);
  if ((v55 & 0x40000000) != 0)
    goto LABEL_373;
LABEL_255:
  if ((v55 & 0x80000000) == 0)
    goto LABEL_256;
LABEL_374:
  v192 = *((_DWORD *)lpsrc + 115);
  *((_DWORD *)this + 170) |= 0x80000000;
  *((_DWORD *)this + 115) = v192;
LABEL_256:
  v126 = *((_DWORD *)lpsrc + 171);
  if (!(_BYTE)v126)
    goto LABEL_266;
  if ((v126 & 1) != 0)
  {
    v133 = *((_DWORD *)lpsrc + 120);
    *((_DWORD *)this + 171) |= 1u;
    *((_DWORD *)this + 120) = v133;
    v126 = *((_DWORD *)lpsrc + 171);
    if ((v126 & 2) == 0)
    {
LABEL_259:
      if ((v126 & 4) == 0)
        goto LABEL_260;
      goto LABEL_299;
    }
  }
  else if ((v126 & 2) == 0)
  {
    goto LABEL_259;
  }
  v134 = lpsrc[59];
  *((_DWORD *)this + 171) |= 2u;
  this[59] = v134;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 4) == 0)
  {
LABEL_260:
    if ((v126 & 8) == 0)
      goto LABEL_261;
    goto LABEL_300;
  }
LABEL_299:
  v135 = lpsrc[61];
  *((_DWORD *)this + 171) |= 4u;
  this[61] = v135;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 8) == 0)
  {
LABEL_261:
    if ((v126 & 0x10) == 0)
      goto LABEL_262;
    goto LABEL_301;
  }
LABEL_300:
  v136 = *((_DWORD *)lpsrc + 121);
  *((_DWORD *)this + 171) |= 8u;
  *((_DWORD *)this + 121) = v136;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x10) == 0)
  {
LABEL_262:
    if ((v126 & 0x20) == 0)
      goto LABEL_263;
    goto LABEL_302;
  }
LABEL_301:
  v137 = *((_DWORD *)lpsrc + 124);
  *((_DWORD *)this + 171) |= 0x10u;
  *((_DWORD *)this + 124) = v137;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x20) == 0)
  {
LABEL_263:
    if ((v126 & 0x40) == 0)
      goto LABEL_264;
    goto LABEL_303;
  }
LABEL_302:
  v138 = *((_DWORD *)lpsrc + 125);
  *((_DWORD *)this + 171) |= 0x20u;
  *((_DWORD *)this + 125) = v138;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x40) == 0)
  {
LABEL_264:
    if ((v126 & 0x80) == 0)
      goto LABEL_266;
    goto LABEL_265;
  }
LABEL_303:
  v139 = *((_BYTE *)lpsrc + 399);
  *((_DWORD *)this + 171) |= 0x40u;
  *((_BYTE *)this + 399) = v139;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x80) != 0)
  {
LABEL_265:
    v127 = *((_DWORD *)lpsrc + 126);
    *((_DWORD *)this + 171) |= 0x80u;
    *((_DWORD *)this + 126) = v127;
    v126 = *((_DWORD *)lpsrc + 171);
  }
LABEL_266:
  if ((v126 & 0xFF00) == 0)
    goto LABEL_273;
  if ((v126 & 0x100) != 0)
  {
    v140 = *((_DWORD *)lpsrc + 127);
    *((_DWORD *)this + 171) |= 0x100u;
    *((_DWORD *)this + 127) = v140;
    v126 = *((_DWORD *)lpsrc + 171);
    if ((v126 & 0x200) == 0)
    {
LABEL_269:
      if ((v126 & 0x1000) == 0)
        goto LABEL_270;
      goto LABEL_307;
    }
  }
  else if ((v126 & 0x200) == 0)
  {
    goto LABEL_269;
  }
  v141 = *((_BYTE *)lpsrc + 620);
  *((_DWORD *)this + 171) |= 0x200u;
  *((_BYTE *)this + 620) = v141;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x1000) == 0)
  {
LABEL_270:
    if ((v126 & 0x2000) == 0)
      goto LABEL_271;
    goto LABEL_308;
  }
LABEL_307:
  v142 = *((_DWORD *)lpsrc + 138);
  *((_DWORD *)this + 171) |= 0x1000u;
  *((_DWORD *)this + 138) = v142;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x2000) == 0)
  {
LABEL_271:
    if ((v126 & 0x4000) == 0)
      goto LABEL_273;
    goto LABEL_272;
  }
LABEL_308:
  v143 = *((_DWORD *)lpsrc + 139);
  *((_DWORD *)this + 171) |= 0x2000u;
  *((_DWORD *)this + 139) = v143;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x4000) != 0)
  {
LABEL_272:
    v128 = *((_DWORD *)lpsrc + 146);
    *((_DWORD *)this + 171) |= 0x4000u;
    *((_DWORD *)this + 146) = v128;
    v126 = *((_DWORD *)lpsrc + 171);
  }
LABEL_273:
  if ((v126 & 0xFF0000) == 0)
    goto LABEL_283;
  if ((v126 & 0x10000) != 0)
  {
    v144 = *((_DWORD *)lpsrc + 147);
    *((_DWORD *)this + 171) |= 0x10000u;
    *((_DWORD *)this + 147) = v144;
    v126 = *((_DWORD *)lpsrc + 171);
    if ((v126 & 0x20000) == 0)
    {
LABEL_276:
      if ((v126 & 0x40000) == 0)
        goto LABEL_277;
      goto LABEL_312;
    }
  }
  else if ((v126 & 0x20000) == 0)
  {
    goto LABEL_276;
  }
  v145 = *((_DWORD *)lpsrc + 148);
  *((_DWORD *)this + 171) |= 0x20000u;
  *((_DWORD *)this + 148) = v145;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x40000) == 0)
  {
LABEL_277:
    if ((v126 & 0x80000) == 0)
      goto LABEL_278;
    goto LABEL_313;
  }
LABEL_312:
  v146 = *((_DWORD *)lpsrc + 149);
  *((_DWORD *)this + 171) |= 0x40000u;
  *((_DWORD *)this + 149) = v146;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x80000) == 0)
  {
LABEL_278:
    if ((v126 & 0x100000) == 0)
      goto LABEL_279;
    goto LABEL_314;
  }
LABEL_313:
  v147 = *((_DWORD *)lpsrc + 150);
  *((_DWORD *)this + 171) |= 0x80000u;
  *((_DWORD *)this + 150) = v147;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x100000) == 0)
  {
LABEL_279:
    if ((v126 & 0x200000) == 0)
      goto LABEL_280;
    goto LABEL_315;
  }
LABEL_314:
  v148 = *((_DWORD *)lpsrc + 151);
  *((_DWORD *)this + 171) |= 0x100000u;
  *((_DWORD *)this + 151) = v148;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x200000) == 0)
  {
LABEL_280:
    if ((v126 & 0x400000) == 0)
      goto LABEL_281;
    goto LABEL_316;
  }
LABEL_315:
  v149 = *((_DWORD *)lpsrc + 152);
  *((_DWORD *)this + 171) |= 0x200000u;
  *((_DWORD *)this + 152) = v149;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x400000) == 0)
  {
LABEL_281:
    if ((v126 & 0x800000) == 0)
      goto LABEL_283;
    goto LABEL_282;
  }
LABEL_316:
  v150 = *((_DWORD *)lpsrc + 153);
  *((_DWORD *)this + 171) |= 0x400000u;
  *((_DWORD *)this + 153) = v150;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x800000) != 0)
  {
LABEL_282:
    v129 = *((_DWORD *)lpsrc + 154);
    *((_DWORD *)this + 171) |= 0x800000u;
    *((_DWORD *)this + 154) = v129;
    v126 = *((_DWORD *)lpsrc + 171);
  }
LABEL_283:
  if (!HIBYTE(v126))
    goto LABEL_349;
  if ((v126 & 0x1000000) != 0)
  {
    v170 = *((_DWORD *)lpsrc + 156);
    *((_DWORD *)this + 171) |= 0x1000000u;
    *((_DWORD *)this + 156) = v170;
    v126 = *((_DWORD *)lpsrc + 171);
    if ((v126 & 0x2000000) == 0)
    {
LABEL_286:
      if ((v126 & 0x4000000) == 0)
        goto LABEL_287;
      goto LABEL_342;
    }
  }
  else if ((v126 & 0x2000000) == 0)
  {
    goto LABEL_286;
  }
  v171 = *((_DWORD *)lpsrc + 157);
  *((_DWORD *)this + 171) |= 0x2000000u;
  *((_DWORD *)this + 157) = v171;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x4000000) == 0)
  {
LABEL_287:
    if ((v126 & 0x8000000) == 0)
      goto LABEL_288;
    goto LABEL_343;
  }
LABEL_342:
  v172 = *((_DWORD *)lpsrc + 158);
  *((_DWORD *)this + 171) |= 0x4000000u;
  *((_DWORD *)this + 158) = v172;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x8000000) == 0)
  {
LABEL_288:
    if ((v126 & 0x10000000) == 0)
      goto LABEL_289;
    goto LABEL_344;
  }
LABEL_343:
  v173 = *((_BYTE *)lpsrc + 621);
  *((_DWORD *)this + 171) |= 0x8000000u;
  *((_BYTE *)this + 621) = v173;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x10000000) == 0)
  {
LABEL_289:
    if ((v126 & 0x20000000) == 0)
      goto LABEL_290;
    goto LABEL_345;
  }
LABEL_344:
  v174 = *((_BYTE *)lpsrc + 622);
  *((_DWORD *)this + 171) |= 0x10000000u;
  *((_BYTE *)this + 622) = v174;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x20000000) == 0)
  {
LABEL_290:
    if ((v126 & 0x40000000) == 0)
      goto LABEL_291;
LABEL_346:
    v176 = *((_BYTE *)lpsrc + 644);
    *((_DWORD *)this + 171) |= 0x40000000u;
    *((_BYTE *)this + 644) = v176;
    if ((*((_DWORD *)lpsrc + 171) & 0x80000000) == 0)
      goto LABEL_349;
    goto LABEL_347;
  }
LABEL_345:
  v175 = *((_BYTE *)lpsrc + 623);
  *((_DWORD *)this + 171) |= 0x20000000u;
  *((_BYTE *)this + 623) = v175;
  v126 = *((_DWORD *)lpsrc + 171);
  if ((v126 & 0x40000000) != 0)
    goto LABEL_346;
LABEL_291:
  if ((v126 & 0x80000000) == 0)
    goto LABEL_349;
LABEL_347:
  v177 = *((_DWORD *)lpsrc + 159);
  if ((v177 - 1) >= 9)
    __assert_rtn("set_end_state", "CATM.pb.h", 16323, "::awd::metrics::enum_ATM_call_state_IsValid(value)");
  *((_DWORD *)this + 171) |= 0x80000000;
  *((_DWORD *)this + 159) = v177;
LABEL_349:
  LOBYTE(v178) = *((_BYTE *)lpsrc + 688);
  if (!(_BYTE)v178)
    return;
  if (((_BYTE)lpsrc[86] & 1) != 0)
  {
    v180 = *((_BYTE *)lpsrc + 645);
    *((_DWORD *)this + 172) |= 1u;
    *((_BYTE *)this + 645) = v180;
    v178 = *((_DWORD *)lpsrc + 172);
    if ((v178 & 2) == 0)
    {
LABEL_352:
      if ((v178 & 4) == 0)
        goto LABEL_353;
      goto LABEL_362;
    }
  }
  else if (((_BYTE)lpsrc[86] & 2) == 0)
  {
    goto LABEL_352;
  }
  v181 = *((_DWORD *)lpsrc + 160);
  *((_DWORD *)this + 172) |= 2u;
  *((_DWORD *)this + 160) = v181;
  v178 = *((_DWORD *)lpsrc + 172);
  if ((v178 & 4) == 0)
  {
LABEL_353:
    if ((v178 & 8) == 0)
      goto LABEL_354;
    goto LABEL_363;
  }
LABEL_362:
  v182 = *((_DWORD *)lpsrc + 164);
  *((_DWORD *)this + 172) |= 4u;
  *((_DWORD *)this + 164) = v182;
  v178 = *((_DWORD *)lpsrc + 172);
  if ((v178 & 8) == 0)
  {
LABEL_354:
    if ((v178 & 0x10) == 0)
      goto LABEL_355;
    goto LABEL_366;
  }
LABEL_363:
  v183 = (const std::string *)lpsrc[81];
  *((_DWORD *)this + 172) |= 8u;
  v184 = (std::string *)this[81];
  if (v184 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v184 = (std::string *)operator new();
    v184->__r_.__value_.__l.__size_ = 0;
    v184->__r_.__value_.__r.__words[2] = 0;
    v184->__r_.__value_.__r.__words[0] = 0;
    this[81] = v184;
  }
  std::string::operator=(v184, v183);
  v178 = *((_DWORD *)lpsrc + 172);
  if ((v178 & 0x10) == 0)
  {
LABEL_355:
    if ((v178 & 0x20) == 0)
      goto LABEL_356;
    goto LABEL_367;
  }
LABEL_366:
  v185 = *((_BYTE *)lpsrc + 646);
  *((_DWORD *)this + 172) |= 0x10u;
  *((_BYTE *)this + 646) = v185;
  v178 = *((_DWORD *)lpsrc + 172);
  if ((v178 & 0x20) == 0)
  {
LABEL_356:
    if ((v178 & 0x40) == 0)
      goto LABEL_357;
    goto LABEL_368;
  }
LABEL_367:
  v186 = *((_DWORD *)lpsrc + 165);
  *((_DWORD *)this + 172) |= 0x20u;
  *((_DWORD *)this + 165) = v186;
  v178 = *((_DWORD *)lpsrc + 172);
  if ((v178 & 0x40) == 0)
  {
LABEL_357:
    if ((v178 & 0x80) == 0)
      return;
    goto LABEL_358;
  }
LABEL_368:
  v187 = *((_BYTE *)lpsrc + 647);
  *((_DWORD *)this + 172) |= 0x40u;
  *((_BYTE *)this + 647) = v187;
  if (((_DWORD)lpsrc[86] & 0x80) != 0)
  {
LABEL_358:
    v179 = *((_BYTE *)lpsrc + 664);
    *((_DWORD *)this + 172) |= 0x80u;
    *((_BYTE *)this + 664) = v179;
  }
}

void sub_1BEE8FD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::ATM_CallEndEvent::IsInitialized(awd::metrics::ATM_CallEndEvent *this)
{
  return 1;
}

_QWORD *awd::metrics::ATM_CallEndEvent::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_CallEndEvent");
}

uint64_t awd::metrics::BchannelTransmitStatistics::SharedDtor(uint64_t this)
{
  if (this != MEMORY[0x1E0DE8338] && this != 0)
  {
    if (*(char *)(this + 23) < 0)
      operator delete(*(void **)this);
    JUMPOUT(0x1C3B87100);
  }
  return this;
}

void awd::metrics::BchannelTransmitStatistics::~BchannelTransmitStatistics(awd::metrics::BchannelTransmitStatistics *this)
{
  *(_QWORD *)this = &off_1E78BF3D8;
  awd::metrics::BchannelTransmitStatistics::SharedDtor(*((_QWORD *)this + 6));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF3D8;
  awd::metrics::BchannelTransmitStatistics::SharedDtor(*((_QWORD *)this + 6));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

double awd::metrics::BchannelTransmitStatistics::New(awd::metrics::BchannelTransmitStatistics *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  result = 0.0;
  *(_QWORD *)(v1 + 36) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  *(_QWORD *)v1 = &off_1E78BF3D8;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 48) = MEMORY[0x1E0DE8338];
  *(_QWORD *)(v1 + 92) = 0;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_DWORD *)(v1 + 88) = 0;
  return result;
}

uint64_t awd::metrics::BchannelTransmitStatistics::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(this + 96);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(this + 40) = 0;
    *(_DWORD *)(this + 36) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
    *(_QWORD *)(this + 8) = 0;
    *(_BYTE *)(this + 32) = 0;
  }
  if ((v1 & 0xFF00) != 0)
  {
    if ((v1 & 0x100) != 0)
    {
      v2 = *(_QWORD *)(this + 48);
      if (v2 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 88) = 0;
    *(_QWORD *)(this + 64) = 0;
    *(_QWORD *)(this + 72) = 0;
    *(_QWORD *)(this + 56) = 0;
    v1 = *(_DWORD *)(this + 96);
  }
  if ((v1 & 0xFF0000) != 0)
    *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t awd::metrics::BchannelTransmitStatistics::MergePartialFromCodedStream(awd::metrics::BchannelTransmitStatistics *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  char *v11;
  uint64_t TagFallback;
  int v13;
  uint64_t result;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  char *v34;
  _BYTE *v35;
  _BYTE *v36;
  unsigned int v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _QWORD *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned int *v52;
  unint64_t *v53;
  unsigned int *v54;
  unint64_t *v55;
  unint64_t *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;

  v52 = (unsigned int *)((char *)this + 16);
  v55 = (unint64_t *)((char *)this + 8);
  v56 = (unint64_t *)((char *)this + 24);
  v57 = (unsigned int *)((char *)this + 20);
  v58 = (unsigned int *)((char *)this + 36);
  v59 = (unsigned int *)((char *)this + 40);
  v4 = (unsigned int *)((char *)this + 44);
  v5 = (unsigned int *)((char *)this + 56);
  v6 = (unsigned int *)((char *)this + 60);
  v7 = (unsigned int *)((char *)this + 64);
  v8 = (unsigned int *)((char *)this + 68);
  v9 = (unsigned int *)((char *)this + 72);
  v10 = (unsigned int *)((char *)this + 76);
  v53 = (unint64_t *)((char *)this + 80);
  v54 = (unsigned int *)((char *)this + 88);
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v11;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v13 = TagFallback & 7;
        if (v13 != 5)
          goto LABEL_48;
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v52);
        if ((_DWORD)result)
        {
          *((_DWORD *)this + 24) |= 1u;
          v16 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v16 < v15 && *v16 == 16)
          {
            v17 = v16 + 1;
            *((_QWORD *)a2 + 1) = v17;
            goto LABEL_16;
          }
          continue;
        }
        return result;
      case 2u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
LABEL_16:
        if ((unint64_t)v17 < v15 && (*v17 & 0x80000000) == 0)
        {
          *v55 = *v17;
          v18 = v17 + 1;
          *((_QWORD *)a2 + 1) = v18;
LABEL_54:
          *((_DWORD *)this + 24) |= 2u;
          if ((unint64_t)v18 < v15 && *v18 == 24)
          {
            v19 = v18 + 1;
            *((_QWORD *)a2 + 1) = v19;
            goto LABEL_57;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v55);
        if ((_DWORD)result)
        {
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
          goto LABEL_54;
        }
        break;
      case 3u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
LABEL_57:
        if ((unint64_t)v19 >= v15 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v56);
          if (!(_DWORD)result)
            return result;
          v35 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v56 = *v19;
          v35 = v19 + 1;
          *((_QWORD *)a2 + 1) = v35;
        }
        *((_DWORD *)this + 24) |= 4u;
        if ((unint64_t)v35 >= v15 || *v35 != 32)
          continue;
        v20 = v35 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_65:
        if ((unint64_t)v20 >= v15 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v57);
          if (!(_DWORD)result)
            return result;
          v36 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v57 = *v20;
          v36 = v20 + 1;
          *((_QWORD *)a2 + 1) = v36;
        }
        *((_DWORD *)this + 24) |= 8u;
        if ((unint64_t)v36 >= v15 || *v36 != 40)
          continue;
        v21 = v36 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_73:
        v60 = 0;
        if ((unint64_t)v21 >= v15 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60);
          if (!(_DWORD)result)
            return result;
          v37 = v60;
          v38 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v37 = *v21;
          v38 = v21 + 1;
          *((_QWORD *)a2 + 1) = v38;
        }
        *((_BYTE *)this + 32) = v37 != 0;
        *((_DWORD *)this + 24) |= 0x10u;
        if ((unint64_t)v38 >= v15 || *v38 != 48)
          continue;
        v22 = v38 + 1;
        *((_QWORD *)a2 + 1) = v22;
LABEL_81:
        if ((unint64_t)v22 >= v15 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v58);
          if (!(_DWORD)result)
            return result;
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v58 = *v22;
          v39 = v22 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *((_DWORD *)this + 24) |= 0x20u;
        if ((unint64_t)v39 >= v15 || *v39 != 56)
          continue;
        v23 = v39 + 1;
        *((_QWORD *)a2 + 1) = v23;
LABEL_89:
        if ((unint64_t)v23 >= v15 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v59);
          if (!(_DWORD)result)
            return result;
          v40 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v59 = *v23;
          v40 = v23 + 1;
          *((_QWORD *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 24) |= 0x40u;
        if ((unint64_t)v40 >= v15 || *v40 != 64)
          continue;
        v24 = v40 + 1;
        *((_QWORD *)a2 + 1) = v24;
LABEL_97:
        if ((unint64_t)v24 >= v15 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v41 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v24;
          v41 = v24 + 1;
          *((_QWORD *)a2 + 1) = v41;
        }
        v25 = *((_DWORD *)this + 24) | 0x80;
        *((_DWORD *)this + 24) = v25;
        if ((unint64_t)v41 >= v15 || *v41 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v41 + 1;
LABEL_105:
        *((_DWORD *)this + 24) = v25 | 0x100;
        if (*((_QWORD *)this + 6) == MEMORY[0x1E0DE8338])
        {
          v42 = (_QWORD *)operator new();
          v42[1] = 0;
          v42[2] = 0;
          *v42 = 0;
          *((_QWORD *)this + 6) = v42;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v43 = (_BYTE *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v43 >= v26 || *v43 != 80)
          continue;
        v27 = v43 + 1;
        *((_QWORD *)a2 + 1) = v27;
LABEL_111:
        if ((unint64_t)v27 >= v26 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v44 = (_BYTE *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v27;
          v44 = v27 + 1;
          *((_QWORD *)a2 + 1) = v44;
        }
        *((_DWORD *)this + 24) |= 0x200u;
        if ((unint64_t)v44 >= v26 || *v44 != 88)
          continue;
        v28 = v44 + 1;
        *((_QWORD *)a2 + 1) = v28;
LABEL_119:
        if ((unint64_t)v28 >= v26 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v45 = (_BYTE *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v28;
          v45 = v28 + 1;
          *((_QWORD *)a2 + 1) = v45;
        }
        *((_DWORD *)this + 24) |= 0x400u;
        if ((unint64_t)v45 >= v26 || *v45 != 96)
          continue;
        v29 = v45 + 1;
        *((_QWORD *)a2 + 1) = v29;
LABEL_127:
        if ((unint64_t)v29 >= v26 || *v29 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v46 = (_BYTE *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v29;
          v46 = v29 + 1;
          *((_QWORD *)a2 + 1) = v46;
        }
        *((_DWORD *)this + 24) |= 0x800u;
        if ((unint64_t)v46 >= v26 || *v46 != 104)
          continue;
        v30 = v46 + 1;
        *((_QWORD *)a2 + 1) = v30;
LABEL_135:
        if ((unint64_t)v30 >= v26 || *v30 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v47 = (_BYTE *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v30;
          v47 = v30 + 1;
          *((_QWORD *)a2 + 1) = v47;
        }
        *((_DWORD *)this + 24) |= 0x1000u;
        if ((unint64_t)v47 >= v26 || *v47 != 112)
          continue;
        v31 = v47 + 1;
        *((_QWORD *)a2 + 1) = v31;
LABEL_143:
        if ((unint64_t)v31 >= v26 || *v31 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!(_DWORD)result)
            return result;
          v48 = (_BYTE *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v9 = *v31;
          v48 = v31 + 1;
          *((_QWORD *)a2 + 1) = v48;
        }
        *((_DWORD *)this + 24) |= 0x2000u;
        if ((unint64_t)v48 >= v26 || *v48 != 120)
          continue;
        v32 = v48 + 1;
        *((_QWORD *)a2 + 1) = v32;
LABEL_151:
        if ((unint64_t)v32 >= v26 || (char)*v32 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!(_DWORD)result)
            return result;
          v49 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v10 = *v32;
          v49 = v32 + 1;
          *((_QWORD *)a2 + 1) = v49;
        }
        *((_DWORD *)this + 24) |= 0x4000u;
        if ((int)v26 - (int)v49 < 2 || *v49 != 128 || v49[1] != 1)
          continue;
        v33 = v49 + 2;
        *((_QWORD *)a2 + 1) = v33;
LABEL_160:
        if ((unint64_t)v33 >= v26 || (char)*v33 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v54);
          if (!(_DWORD)result)
            return result;
          v50 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v54 = *v33;
          v50 = v33 + 1;
          *((_QWORD *)a2 + 1) = v50;
        }
        *((_DWORD *)this + 24) |= 0x8000u;
        if ((int)v26 - (int)v50 < 2 || *v50 != 136 || v50[1] != 1)
          continue;
        v34 = (char *)(v50 + 2);
        *((_QWORD *)a2 + 1) = v34;
LABEL_169:
        if ((unint64_t)v34 >= v26 || *v34 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v53);
          if (!(_DWORD)result)
            return result;
          v51 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v53 = *v34;
          v51 = (unsigned __int8 *)(v34 + 1);
          *((_QWORD *)a2 + 1) = v51;
        }
        *((_DWORD *)this + 24) |= 0x10000u;
        if (v51 != (unsigned __int8 *)v26 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 4u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_65;
      case 5u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_73;
      case 6u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_81;
      case 7u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_89;
      case 8u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_97;
      case 9u:
        v13 = TagFallback & 7;
        if (v13 != 2)
          goto LABEL_48;
        v25 = *((_DWORD *)this + 24);
        goto LABEL_105;
      case 0xAu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_111;
      case 0xBu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v28 = (char *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_119;
      case 0xCu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v29 = (char *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_127;
      case 0xDu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v30 = (char *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_135;
      case 0xEu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v31 = (char *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_143;
      case 0xFu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v32 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_151;
      case 0x10u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v33 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_160;
      case 0x11u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v34 = (char *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_169;
      default:
        v13 = TagFallback & 7;
LABEL_48:
        if (v13 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::BchannelTransmitStatistics::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 96);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 96);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 8), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 56), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 60), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 68), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned int *)(v5 + 72), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(_QWORD *)(v5 + 80), (uint64_t)a2, a4);
  }
LABEL_34:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 88), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 96) & 0x10000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(_QWORD *)(v5 + 80), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::BchannelTransmitStatistics::ByteSize(awd::metrics::BchannelTransmitStatistics *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  int v28;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v29;
  int v30;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v31;
  int v32;

  v2 = *((_DWORD *)this + 24);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_32;
  }
  LODWORD(v3) = (v2 << 31 >> 31) & 5;
  if ((v2 & 2) != 0)
  {
    LODWORD(v3) = v3
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 1;
    v2 = *((_DWORD *)this + 24);
    if ((v2 & 4) == 0)
    {
LABEL_4:
      if ((v2 & 8) == 0)
        goto LABEL_13;
      goto LABEL_9;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_4;
  }
  LODWORD(v3) = v3
              + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                            + 3))
              + 1;
  v2 = *((_DWORD *)this + 24);
  if ((v2 & 8) == 0)
    goto LABEL_13;
LABEL_9:
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v4 >= 0x80)
  {
    v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v5 = 1;
  }
  LODWORD(v3) = v3 + v5 + 1;
LABEL_13:
  if ((v2 & 0x10) != 0)
    v3 = (v3 + 2);
  else
    v3 = v3;
  if ((v2 & 0x20) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
      v2 = *((_DWORD *)this + 24);
    }
    else
    {
      v7 = 1;
    }
    v3 = (v3 + v7 + 1);
    if ((v2 & 0x40) == 0)
    {
LABEL_18:
      if ((v2 & 0x80) == 0)
        goto LABEL_32;
      goto LABEL_28;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_18;
  }
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
  if (v8 >= 0x80)
  {
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v9 = 1;
  }
  v3 = (v3 + v9 + 1);
  if ((v2 & 0x80) != 0)
  {
LABEL_28:
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
      v2 = *((_DWORD *)this + 24);
    }
    else
    {
      v11 = 1;
    }
    v3 = (v3 + v11 + 1);
  }
LABEL_32:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_41;
  if ((v2 & 0x100) != 0)
  {
    v13 = *((_QWORD *)this + 6);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v15 = v14;
    v16 = *(_QWORD *)(v13 + 8);
    if ((v14 & 0x80u) == 0)
      v17 = *(unsigned __int8 *)(v13 + 23);
    else
      v17 = v16;
    if (v17 >= 0x80)
    {
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17);
      v14 = *(unsigned __int8 *)(v13 + 23);
      v16 = *(_QWORD *)(v13 + 8);
      v2 = *((_DWORD *)this + 24);
      v15 = *(_BYTE *)(v13 + 23);
    }
    else
    {
      v18 = 1;
    }
    if (v15 < 0)
      v14 = v16;
    v3 = (v3 + v18 + v14 + 1);
    if ((v2 & 0x200) == 0)
    {
LABEL_35:
      if ((v2 & 0x400) == 0)
        goto LABEL_36;
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_35;
  }
  v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
  if (v19 >= 0x80)
  {
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19) + 1;
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v20 = 2;
  }
  v3 = (v20 + v3);
  if ((v2 & 0x400) == 0)
  {
LABEL_36:
    if ((v2 & 0x800) == 0)
      goto LABEL_37;
    goto LABEL_61;
  }
LABEL_57:
  v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 15);
  if (v21 >= 0x80)
  {
    v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21) + 1;
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v22 = 2;
  }
  v3 = (v22 + v3);
  if ((v2 & 0x800) == 0)
  {
LABEL_37:
    if ((v2 & 0x1000) == 0)
      goto LABEL_38;
    goto LABEL_65;
  }
LABEL_61:
  v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if (v23 >= 0x80)
  {
    v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23) + 1;
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v24 = 2;
  }
  v3 = (v24 + v3);
  if ((v2 & 0x1000) == 0)
  {
LABEL_38:
    if ((v2 & 0x2000) == 0)
      goto LABEL_39;
    goto LABEL_69;
  }
LABEL_65:
  v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 17);
  if (v25 >= 0x80)
  {
    v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25) + 1;
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v26 = 2;
  }
  v3 = (v26 + v3);
  if ((v2 & 0x2000) == 0)
  {
LABEL_39:
    if ((v2 & 0x4000) == 0)
      goto LABEL_40;
    goto LABEL_73;
  }
LABEL_69:
  v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
  if (v27 >= 0x80)
  {
    v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27) + 1;
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v28 = 2;
  }
  v3 = (v28 + v3);
  if ((v2 & 0x4000) == 0)
  {
LABEL_40:
    if ((v2 & 0x8000) == 0)
      goto LABEL_41;
LABEL_77:
    v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
    if (v31 >= 0x80)
    {
      v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31) + 2;
      v2 = *((_DWORD *)this + 24);
    }
    else
    {
      v32 = 3;
    }
    v3 = (v32 + v3);
    if ((v2 & 0x10000) != 0)
      goto LABEL_42;
    goto LABEL_43;
  }
LABEL_73:
  v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 19);
  if (v29 >= 0x80)
  {
    v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29) + 1;
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v30 = 2;
  }
  v3 = (v30 + v3);
  if ((v2 & 0x8000) != 0)
    goto LABEL_77;
LABEL_41:
  if ((v2 & 0x10000) != 0)
LABEL_42:
    v3 = v3
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 10))
       + 2;
LABEL_43:
  *((_DWORD *)this + 23) = v3;
  return v3;
}

void awd::metrics::BchannelTransmitStatistics::CheckTypeAndMergeFrom(const std::string **this, const std::string **lpsrc)
{
  int v4;
  int v5;
  int v6;
  const std::string *v7;
  int v8;
  const std::string *v9;
  const std::string *v10;
  int v11;
  char v12;
  int v13;
  int v14;
  const std::string *v15;
  std::string *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v23);
  }
  v4 = *((_DWORD *)lpsrc + 24);
  if (!(_BYTE)v4)
    goto LABEL_14;
  if ((v4 & 1) != 0)
  {
    v8 = *((_DWORD *)lpsrc + 4);
    *((_DWORD *)this + 24) |= 1u;
    *((_DWORD *)this + 4) = v8;
    v4 = *((_DWORD *)lpsrc + 24);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0)
        goto LABEL_8;
      goto LABEL_29;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  v9 = lpsrc[1];
  *((_DWORD *)this + 24) |= 2u;
  this[1] = v9;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  v10 = lpsrc[3];
  *((_DWORD *)this + 24) |= 4u;
  this[3] = v10;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  v11 = *((_DWORD *)lpsrc + 5);
  *((_DWORD *)this + 24) |= 8u;
  *((_DWORD *)this + 5) = v11;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
LABEL_32:
    v13 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 24) |= 0x20u;
    *((_DWORD *)this + 9) = v13;
    v4 = *((_DWORD *)lpsrc + 24);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_31:
  v12 = *((_BYTE *)lpsrc + 32);
  *((_DWORD *)this + 24) |= 0x10u;
  *((_BYTE *)this + 32) = v12;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x20) != 0)
    goto LABEL_32;
LABEL_11:
  if ((v4 & 0x40) == 0)
    goto LABEL_12;
LABEL_33:
  v14 = *((_DWORD *)lpsrc + 10);
  *((_DWORD *)this + 24) |= 0x40u;
  *((_DWORD *)this + 10) = v14;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    v5 = *((_DWORD *)lpsrc + 11);
    *((_DWORD *)this + 24) |= 0x80u;
    *((_DWORD *)this + 11) = v5;
    v4 = *((_DWORD *)lpsrc + 24);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0)
    goto LABEL_24;
  if ((v4 & 0x100) != 0)
  {
    v15 = lpsrc[6];
    *((_DWORD *)this + 24) |= 0x100u;
    v16 = (std::string *)this[6];
    if (v16 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v16 = (std::string *)operator new();
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      this[6] = v16;
    }
    std::string::operator=(v16, v15);
    v4 = *((_DWORD *)lpsrc + 24);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0)
        goto LABEL_18;
      goto LABEL_39;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  v17 = *((_DWORD *)lpsrc + 14);
  *((_DWORD *)this + 24) |= 0x200u;
  *((_DWORD *)this + 14) = v17;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  v18 = *((_DWORD *)lpsrc + 15);
  *((_DWORD *)this + 24) |= 0x400u;
  *((_DWORD *)this + 15) = v18;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  v19 = *((_DWORD *)lpsrc + 16);
  *((_DWORD *)this + 24) |= 0x800u;
  *((_DWORD *)this + 16) = v19;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  v20 = *((_DWORD *)lpsrc + 17);
  *((_DWORD *)this + 24) |= 0x1000u;
  *((_DWORD *)this + 17) = v20;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x2000) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_42:
  v21 = *((_DWORD *)lpsrc + 18);
  *((_DWORD *)this + 24) |= 0x2000u;
  *((_DWORD *)this + 18) = v21;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_43:
  v22 = *((_DWORD *)lpsrc + 19);
  *((_DWORD *)this + 24) |= 0x4000u;
  *((_DWORD *)this + 19) = v22;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x8000) != 0)
  {
LABEL_23:
    v6 = *((_DWORD *)lpsrc + 22);
    *((_DWORD *)this + 24) |= 0x8000u;
    *((_DWORD *)this + 22) = v6;
    v4 = *((_DWORD *)lpsrc + 24);
  }
LABEL_24:
  if ((v4 & 0x10000) != 0)
  {
    v7 = lpsrc[10];
    *((_DWORD *)this + 24) |= 0x10000u;
    this[10] = v7;
  }
}

void sub_1BEE91060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::BchannelTransmitStatistics::IsInitialized(awd::metrics::BchannelTransmitStatistics *this)
{
  return 1;
}

_QWORD *awd::metrics::BchannelTransmitStatistics::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.BchannelTransmitStatistics");
}

void awd::metrics::BchannelReceiveStatistics::~BchannelReceiveStatistics(awd::metrics::BchannelReceiveStatistics *this)
{
  *(_QWORD *)this = &off_1E78BF450;
  awd::metrics::BchannelTransmitStatistics::SharedDtor(*((_QWORD *)this + 6));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF450;
  awd::metrics::BchannelTransmitStatistics::SharedDtor(*((_QWORD *)this + 6));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

double awd::metrics::BchannelReceiveStatistics::New(awd::metrics::BchannelReceiveStatistics *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  result = 0.0;
  *(_QWORD *)(v1 + 36) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  *(_QWORD *)v1 = &off_1E78BF450;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 48) = MEMORY[0x1E0DE8338];
  *(_QWORD *)(v1 + 92) = 0;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_DWORD *)(v1 + 88) = 0;
  return result;
}

uint64_t awd::metrics::BchannelReceiveStatistics::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(this + 96);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(this + 40) = 0;
    *(_DWORD *)(this + 36) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
    *(_QWORD *)(this + 8) = 0;
    *(_BYTE *)(this + 32) = 0;
  }
  if ((v1 & 0xFF00) != 0)
  {
    if ((v1 & 0x100) != 0)
    {
      v2 = *(_QWORD *)(this + 48);
      if (v2 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 88) = 0;
    *(_QWORD *)(this + 64) = 0;
    *(_QWORD *)(this + 72) = 0;
    *(_QWORD *)(this + 56) = 0;
    v1 = *(_DWORD *)(this + 96);
  }
  if ((v1 & 0xFF0000) != 0)
    *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t awd::metrics::BchannelReceiveStatistics::MergePartialFromCodedStream(awd::metrics::BchannelReceiveStatistics *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  char *v11;
  uint64_t TagFallback;
  int v13;
  uint64_t result;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  char *v34;
  _BYTE *v35;
  _BYTE *v36;
  unsigned int v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _QWORD *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned int *v52;
  unint64_t *v53;
  unsigned int *v54;
  unint64_t *v55;
  unint64_t *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;

  v52 = (unsigned int *)((char *)this + 16);
  v55 = (unint64_t *)((char *)this + 8);
  v56 = (unint64_t *)((char *)this + 24);
  v57 = (unsigned int *)((char *)this + 20);
  v58 = (unsigned int *)((char *)this + 36);
  v59 = (unsigned int *)((char *)this + 40);
  v4 = (unsigned int *)((char *)this + 44);
  v5 = (unsigned int *)((char *)this + 56);
  v6 = (unsigned int *)((char *)this + 60);
  v7 = (unsigned int *)((char *)this + 64);
  v8 = (unsigned int *)((char *)this + 68);
  v9 = (unsigned int *)((char *)this + 72);
  v10 = (unsigned int *)((char *)this + 76);
  v53 = (unint64_t *)((char *)this + 80);
  v54 = (unsigned int *)((char *)this + 88);
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v11;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v13 = TagFallback & 7;
        if (v13 != 5)
          goto LABEL_48;
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v52);
        if ((_DWORD)result)
        {
          *((_DWORD *)this + 24) |= 1u;
          v16 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v16 < v15 && *v16 == 16)
          {
            v17 = v16 + 1;
            *((_QWORD *)a2 + 1) = v17;
            goto LABEL_16;
          }
          continue;
        }
        return result;
      case 2u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
LABEL_16:
        if ((unint64_t)v17 < v15 && (*v17 & 0x80000000) == 0)
        {
          *v55 = *v17;
          v18 = v17 + 1;
          *((_QWORD *)a2 + 1) = v18;
LABEL_54:
          *((_DWORD *)this + 24) |= 2u;
          if ((unint64_t)v18 < v15 && *v18 == 24)
          {
            v19 = v18 + 1;
            *((_QWORD *)a2 + 1) = v19;
            goto LABEL_57;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v55);
        if ((_DWORD)result)
        {
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
          goto LABEL_54;
        }
        break;
      case 3u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
LABEL_57:
        if ((unint64_t)v19 >= v15 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v56);
          if (!(_DWORD)result)
            return result;
          v35 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v56 = *v19;
          v35 = v19 + 1;
          *((_QWORD *)a2 + 1) = v35;
        }
        *((_DWORD *)this + 24) |= 4u;
        if ((unint64_t)v35 >= v15 || *v35 != 32)
          continue;
        v20 = v35 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_65:
        if ((unint64_t)v20 >= v15 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v57);
          if (!(_DWORD)result)
            return result;
          v36 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v57 = *v20;
          v36 = v20 + 1;
          *((_QWORD *)a2 + 1) = v36;
        }
        *((_DWORD *)this + 24) |= 8u;
        if ((unint64_t)v36 >= v15 || *v36 != 40)
          continue;
        v21 = v36 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_73:
        v60 = 0;
        if ((unint64_t)v21 >= v15 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60);
          if (!(_DWORD)result)
            return result;
          v37 = v60;
          v38 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v37 = *v21;
          v38 = v21 + 1;
          *((_QWORD *)a2 + 1) = v38;
        }
        *((_BYTE *)this + 32) = v37 != 0;
        *((_DWORD *)this + 24) |= 0x10u;
        if ((unint64_t)v38 >= v15 || *v38 != 48)
          continue;
        v22 = v38 + 1;
        *((_QWORD *)a2 + 1) = v22;
LABEL_81:
        if ((unint64_t)v22 >= v15 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v58);
          if (!(_DWORD)result)
            return result;
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v58 = *v22;
          v39 = v22 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *((_DWORD *)this + 24) |= 0x20u;
        if ((unint64_t)v39 >= v15 || *v39 != 56)
          continue;
        v23 = v39 + 1;
        *((_QWORD *)a2 + 1) = v23;
LABEL_89:
        if ((unint64_t)v23 >= v15 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v59);
          if (!(_DWORD)result)
            return result;
          v40 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v59 = *v23;
          v40 = v23 + 1;
          *((_QWORD *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 24) |= 0x40u;
        if ((unint64_t)v40 >= v15 || *v40 != 64)
          continue;
        v24 = v40 + 1;
        *((_QWORD *)a2 + 1) = v24;
LABEL_97:
        if ((unint64_t)v24 >= v15 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v41 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v24;
          v41 = v24 + 1;
          *((_QWORD *)a2 + 1) = v41;
        }
        v25 = *((_DWORD *)this + 24) | 0x80;
        *((_DWORD *)this + 24) = v25;
        if ((unint64_t)v41 >= v15 || *v41 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v41 + 1;
LABEL_105:
        *((_DWORD *)this + 24) = v25 | 0x100;
        if (*((_QWORD *)this + 6) == MEMORY[0x1E0DE8338])
        {
          v42 = (_QWORD *)operator new();
          v42[1] = 0;
          v42[2] = 0;
          *v42 = 0;
          *((_QWORD *)this + 6) = v42;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v43 = (_BYTE *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v43 >= v26 || *v43 != 80)
          continue;
        v27 = v43 + 1;
        *((_QWORD *)a2 + 1) = v27;
LABEL_111:
        if ((unint64_t)v27 >= v26 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v44 = (_BYTE *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v27;
          v44 = v27 + 1;
          *((_QWORD *)a2 + 1) = v44;
        }
        *((_DWORD *)this + 24) |= 0x200u;
        if ((unint64_t)v44 >= v26 || *v44 != 88)
          continue;
        v28 = v44 + 1;
        *((_QWORD *)a2 + 1) = v28;
LABEL_119:
        if ((unint64_t)v28 >= v26 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v45 = (_BYTE *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v28;
          v45 = v28 + 1;
          *((_QWORD *)a2 + 1) = v45;
        }
        *((_DWORD *)this + 24) |= 0x400u;
        if ((unint64_t)v45 >= v26 || *v45 != 96)
          continue;
        v29 = v45 + 1;
        *((_QWORD *)a2 + 1) = v29;
LABEL_127:
        if ((unint64_t)v29 >= v26 || *v29 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v46 = (_BYTE *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v29;
          v46 = v29 + 1;
          *((_QWORD *)a2 + 1) = v46;
        }
        *((_DWORD *)this + 24) |= 0x800u;
        if ((unint64_t)v46 >= v26 || *v46 != 104)
          continue;
        v30 = v46 + 1;
        *((_QWORD *)a2 + 1) = v30;
LABEL_135:
        if ((unint64_t)v30 >= v26 || *v30 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v47 = (_BYTE *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v30;
          v47 = v30 + 1;
          *((_QWORD *)a2 + 1) = v47;
        }
        *((_DWORD *)this + 24) |= 0x1000u;
        if ((unint64_t)v47 >= v26 || *v47 != 112)
          continue;
        v31 = v47 + 1;
        *((_QWORD *)a2 + 1) = v31;
LABEL_143:
        if ((unint64_t)v31 >= v26 || *v31 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!(_DWORD)result)
            return result;
          v48 = (_BYTE *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v9 = *v31;
          v48 = v31 + 1;
          *((_QWORD *)a2 + 1) = v48;
        }
        *((_DWORD *)this + 24) |= 0x2000u;
        if ((unint64_t)v48 >= v26 || *v48 != 120)
          continue;
        v32 = v48 + 1;
        *((_QWORD *)a2 + 1) = v32;
LABEL_151:
        if ((unint64_t)v32 >= v26 || (char)*v32 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!(_DWORD)result)
            return result;
          v49 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v10 = *v32;
          v49 = v32 + 1;
          *((_QWORD *)a2 + 1) = v49;
        }
        *((_DWORD *)this + 24) |= 0x4000u;
        if ((int)v26 - (int)v49 < 2 || *v49 != 128 || v49[1] != 1)
          continue;
        v33 = v49 + 2;
        *((_QWORD *)a2 + 1) = v33;
LABEL_160:
        if ((unint64_t)v33 >= v26 || (char)*v33 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v54);
          if (!(_DWORD)result)
            return result;
          v50 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v54 = *v33;
          v50 = v33 + 1;
          *((_QWORD *)a2 + 1) = v50;
        }
        *((_DWORD *)this + 24) |= 0x8000u;
        if ((int)v26 - (int)v50 < 2 || *v50 != 136 || v50[1] != 1)
          continue;
        v34 = (char *)(v50 + 2);
        *((_QWORD *)a2 + 1) = v34;
LABEL_169:
        if ((unint64_t)v34 >= v26 || *v34 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v53);
          if (!(_DWORD)result)
            return result;
          v51 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v53 = *v34;
          v51 = (unsigned __int8 *)(v34 + 1);
          *((_QWORD *)a2 + 1) = v51;
        }
        *((_DWORD *)this + 24) |= 0x10000u;
        if (v51 != (unsigned __int8 *)v26 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 4u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_65;
      case 5u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_73;
      case 6u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_81;
      case 7u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_89;
      case 8u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_97;
      case 9u:
        v13 = TagFallback & 7;
        if (v13 != 2)
          goto LABEL_48;
        v25 = *((_DWORD *)this + 24);
        goto LABEL_105;
      case 0xAu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_111;
      case 0xBu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v28 = (char *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_119;
      case 0xCu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v29 = (char *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_127;
      case 0xDu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v30 = (char *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_135;
      case 0xEu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v31 = (char *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_143;
      case 0xFu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v32 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_151;
      case 0x10u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v33 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_160;
      case 0x11u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v34 = (char *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_169;
      default:
        v13 = TagFallback & 7;
LABEL_48:
        if (v13 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::BchannelReceiveStatistics::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 96);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 96);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 8), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 56), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 60), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 68), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned int *)(v5 + 72), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(_QWORD *)(v5 + 80), (uint64_t)a2, a4);
  }
LABEL_34:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 88), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 96) & 0x10000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(_QWORD *)(v5 + 80), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::BchannelReceiveStatistics::ByteSize(awd::metrics::BchannelReceiveStatistics *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  int v28;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v29;
  int v30;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v31;
  int v32;

  v2 = *((_DWORD *)this + 24);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_32;
  }
  LODWORD(v3) = (v2 << 31 >> 31) & 5;
  if ((v2 & 2) != 0)
  {
    LODWORD(v3) = v3
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 1;
    v2 = *((_DWORD *)this + 24);
    if ((v2 & 4) == 0)
    {
LABEL_4:
      if ((v2 & 8) == 0)
        goto LABEL_13;
      goto LABEL_9;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_4;
  }
  LODWORD(v3) = v3
              + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                            + 3))
              + 1;
  v2 = *((_DWORD *)this + 24);
  if ((v2 & 8) == 0)
    goto LABEL_13;
LABEL_9:
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v4 >= 0x80)
  {
    v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v5 = 1;
  }
  LODWORD(v3) = v3 + v5 + 1;
LABEL_13:
  if ((v2 & 0x10) != 0)
    v3 = (v3 + 2);
  else
    v3 = v3;
  if ((v2 & 0x20) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
      v2 = *((_DWORD *)this + 24);
    }
    else
    {
      v7 = 1;
    }
    v3 = (v3 + v7 + 1);
    if ((v2 & 0x40) == 0)
    {
LABEL_18:
      if ((v2 & 0x80) == 0)
        goto LABEL_32;
      goto LABEL_28;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_18;
  }
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
  if (v8 >= 0x80)
  {
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v9 = 1;
  }
  v3 = (v3 + v9 + 1);
  if ((v2 & 0x80) != 0)
  {
LABEL_28:
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
      v2 = *((_DWORD *)this + 24);
    }
    else
    {
      v11 = 1;
    }
    v3 = (v3 + v11 + 1);
  }
LABEL_32:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_41;
  if ((v2 & 0x100) != 0)
  {
    v13 = *((_QWORD *)this + 6);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v15 = v14;
    v16 = *(_QWORD *)(v13 + 8);
    if ((v14 & 0x80u) == 0)
      v17 = *(unsigned __int8 *)(v13 + 23);
    else
      v17 = v16;
    if (v17 >= 0x80)
    {
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17);
      v14 = *(unsigned __int8 *)(v13 + 23);
      v16 = *(_QWORD *)(v13 + 8);
      v2 = *((_DWORD *)this + 24);
      v15 = *(_BYTE *)(v13 + 23);
    }
    else
    {
      v18 = 1;
    }
    if (v15 < 0)
      v14 = v16;
    v3 = (v3 + v18 + v14 + 1);
    if ((v2 & 0x200) == 0)
    {
LABEL_35:
      if ((v2 & 0x400) == 0)
        goto LABEL_36;
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_35;
  }
  v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
  if (v19 >= 0x80)
  {
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19) + 1;
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v20 = 2;
  }
  v3 = (v20 + v3);
  if ((v2 & 0x400) == 0)
  {
LABEL_36:
    if ((v2 & 0x800) == 0)
      goto LABEL_37;
    goto LABEL_61;
  }
LABEL_57:
  v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 15);
  if (v21 >= 0x80)
  {
    v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21) + 1;
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v22 = 2;
  }
  v3 = (v22 + v3);
  if ((v2 & 0x800) == 0)
  {
LABEL_37:
    if ((v2 & 0x1000) == 0)
      goto LABEL_38;
    goto LABEL_65;
  }
LABEL_61:
  v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if (v23 >= 0x80)
  {
    v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23) + 1;
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v24 = 2;
  }
  v3 = (v24 + v3);
  if ((v2 & 0x1000) == 0)
  {
LABEL_38:
    if ((v2 & 0x2000) == 0)
      goto LABEL_39;
    goto LABEL_69;
  }
LABEL_65:
  v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 17);
  if (v25 >= 0x80)
  {
    v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25) + 1;
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v26 = 2;
  }
  v3 = (v26 + v3);
  if ((v2 & 0x2000) == 0)
  {
LABEL_39:
    if ((v2 & 0x4000) == 0)
      goto LABEL_40;
    goto LABEL_73;
  }
LABEL_69:
  v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
  if (v27 >= 0x80)
  {
    v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27) + 1;
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v28 = 2;
  }
  v3 = (v28 + v3);
  if ((v2 & 0x4000) == 0)
  {
LABEL_40:
    if ((v2 & 0x8000) == 0)
      goto LABEL_41;
LABEL_77:
    v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
    if (v31 >= 0x80)
    {
      v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31) + 2;
      v2 = *((_DWORD *)this + 24);
    }
    else
    {
      v32 = 3;
    }
    v3 = (v32 + v3);
    if ((v2 & 0x10000) != 0)
      goto LABEL_42;
    goto LABEL_43;
  }
LABEL_73:
  v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 19);
  if (v29 >= 0x80)
  {
    v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29) + 1;
    v2 = *((_DWORD *)this + 24);
  }
  else
  {
    v30 = 2;
  }
  v3 = (v30 + v3);
  if ((v2 & 0x8000) != 0)
    goto LABEL_77;
LABEL_41:
  if ((v2 & 0x10000) != 0)
LABEL_42:
    v3 = v3
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 10))
       + 2;
LABEL_43:
  *((_DWORD *)this + 23) = v3;
  return v3;
}

void awd::metrics::BchannelReceiveStatistics::CheckTypeAndMergeFrom(const std::string **this, const std::string **lpsrc)
{
  int v4;
  int v5;
  int v6;
  const std::string *v7;
  int v8;
  const std::string *v9;
  const std::string *v10;
  int v11;
  char v12;
  int v13;
  int v14;
  const std::string *v15;
  std::string *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v23);
  }
  v4 = *((_DWORD *)lpsrc + 24);
  if (!(_BYTE)v4)
    goto LABEL_14;
  if ((v4 & 1) != 0)
  {
    v8 = *((_DWORD *)lpsrc + 4);
    *((_DWORD *)this + 24) |= 1u;
    *((_DWORD *)this + 4) = v8;
    v4 = *((_DWORD *)lpsrc + 24);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0)
        goto LABEL_8;
      goto LABEL_29;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  v9 = lpsrc[1];
  *((_DWORD *)this + 24) |= 2u;
  this[1] = v9;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  v10 = lpsrc[3];
  *((_DWORD *)this + 24) |= 4u;
  this[3] = v10;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  v11 = *((_DWORD *)lpsrc + 5);
  *((_DWORD *)this + 24) |= 8u;
  *((_DWORD *)this + 5) = v11;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
LABEL_32:
    v13 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 24) |= 0x20u;
    *((_DWORD *)this + 9) = v13;
    v4 = *((_DWORD *)lpsrc + 24);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_31:
  v12 = *((_BYTE *)lpsrc + 32);
  *((_DWORD *)this + 24) |= 0x10u;
  *((_BYTE *)this + 32) = v12;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x20) != 0)
    goto LABEL_32;
LABEL_11:
  if ((v4 & 0x40) == 0)
    goto LABEL_12;
LABEL_33:
  v14 = *((_DWORD *)lpsrc + 10);
  *((_DWORD *)this + 24) |= 0x40u;
  *((_DWORD *)this + 10) = v14;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    v5 = *((_DWORD *)lpsrc + 11);
    *((_DWORD *)this + 24) |= 0x80u;
    *((_DWORD *)this + 11) = v5;
    v4 = *((_DWORD *)lpsrc + 24);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0)
    goto LABEL_24;
  if ((v4 & 0x100) != 0)
  {
    v15 = lpsrc[6];
    *((_DWORD *)this + 24) |= 0x100u;
    v16 = (std::string *)this[6];
    if (v16 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v16 = (std::string *)operator new();
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      this[6] = v16;
    }
    std::string::operator=(v16, v15);
    v4 = *((_DWORD *)lpsrc + 24);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0)
        goto LABEL_18;
      goto LABEL_39;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  v17 = *((_DWORD *)lpsrc + 14);
  *((_DWORD *)this + 24) |= 0x200u;
  *((_DWORD *)this + 14) = v17;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  v18 = *((_DWORD *)lpsrc + 15);
  *((_DWORD *)this + 24) |= 0x400u;
  *((_DWORD *)this + 15) = v18;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  v19 = *((_DWORD *)lpsrc + 16);
  *((_DWORD *)this + 24) |= 0x800u;
  *((_DWORD *)this + 16) = v19;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  v20 = *((_DWORD *)lpsrc + 17);
  *((_DWORD *)this + 24) |= 0x1000u;
  *((_DWORD *)this + 17) = v20;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x2000) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_42:
  v21 = *((_DWORD *)lpsrc + 18);
  *((_DWORD *)this + 24) |= 0x2000u;
  *((_DWORD *)this + 18) = v21;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_43:
  v22 = *((_DWORD *)lpsrc + 19);
  *((_DWORD *)this + 24) |= 0x4000u;
  *((_DWORD *)this + 19) = v22;
  v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x8000) != 0)
  {
LABEL_23:
    v6 = *((_DWORD *)lpsrc + 22);
    *((_DWORD *)this + 24) |= 0x8000u;
    *((_DWORD *)this + 22) = v6;
    v4 = *((_DWORD *)lpsrc + 24);
  }
LABEL_24:
  if ((v4 & 0x10000) != 0)
  {
    v7 = lpsrc[10];
    *((_DWORD *)this + 24) |= 0x10000u;
    this[10] = v7;
  }
}

void sub_1BEE922E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::BchannelReceiveStatistics::IsInitialized(awd::metrics::BchannelReceiveStatistics *this)
{
  return 1;
}

_QWORD *awd::metrics::BchannelReceiveStatistics::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.BchannelReceiveStatistics");
}

void awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::~Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock(awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  *(_QWORD *)this = &off_1E78BF4C8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF4C8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

double awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::New(awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E78BF4C8;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_DWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::Clear(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 72);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(this + 40) = 0;
    *(_QWORD *)(this + 48) = 0;
    *(_DWORD *)(this + 64) = 0;
    *(_QWORD *)(this + 56) = 0;
  }
  *(_DWORD *)(this + 72) = 0;
  return this;
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::MergePartialFromCodedStream(awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unint64_t *v10;
  char *v11;
  uint64_t TagFallback;
  int v13;
  uint64_t result;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned __int8 *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;

  v4 = (unsigned int *)((char *)this + 16);
  v5 = (unsigned int *)((char *)this + 20);
  v6 = (unsigned int *)((char *)this + 24);
  v46 = (unsigned int *)((char *)this + 32);
  v47 = (unsigned int *)((char *)this + 28);
  v44 = (unsigned int *)((char *)this + 12);
  v45 = (unsigned int *)((char *)this + 36);
  v43 = (unsigned int *)((char *)this + 40);
  v41 = (unsigned int *)((char *)this + 8);
  v42 = (unsigned int *)((char *)this + 44);
  v7 = (unsigned int *)((char *)this + 48);
  v8 = (unsigned int *)((char *)this + 52);
  v9 = (unsigned int *)((char *)this + 64);
  v10 = (unint64_t *)((char *)this + 56);
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v11;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v13 = TagFallback & 7;
        if (v13 != 5)
          goto LABEL_48;
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v41);
        if ((_DWORD)result)
        {
          *((_DWORD *)this + 18) |= 1u;
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v15 < *((_QWORD *)a2 + 2) && *v15 == 21)
          {
            *((_QWORD *)a2 + 1) = v15 + 1;
            goto LABEL_15;
          }
          continue;
        }
        return result;
      case 2u:
        v13 = TagFallback & 7;
        if (v13 != 5)
          goto LABEL_48;
LABEL_15:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v44);
        if ((_DWORD)result)
        {
          *((_DWORD *)this + 18) |= 2u;
          v16 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v16 < *((_QWORD *)a2 + 2) && *v16 == 29)
          {
            *((_QWORD *)a2 + 1) = v16 + 1;
            goto LABEL_20;
          }
          continue;
        }
        return result;
      case 3u:
        v13 = TagFallback & 7;
        if (v13 != 5)
          goto LABEL_48;
LABEL_20:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v4);
        if ((_DWORD)result)
        {
          *((_DWORD *)this + 18) |= 4u;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v18 < v17 && *v18 == 32)
          {
            v19 = v18 + 1;
            *((_QWORD *)a2 + 1) = v19;
            goto LABEL_26;
          }
          continue;
        }
        return result;
      case 4u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
LABEL_26:
        if ((unint64_t)v19 < v17 && (*v19 & 0x80000000) == 0)
        {
          *v5 = *v19;
          v20 = v19 + 1;
          *((_QWORD *)a2 + 1) = v20;
LABEL_54:
          *((_DWORD *)this + 18) |= 8u;
          if ((unint64_t)v20 < v17 && *v20 == 40)
          {
            v21 = v20 + 1;
            *((_QWORD *)a2 + 1) = v21;
            goto LABEL_57;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if ((_DWORD)result)
        {
          v20 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
          goto LABEL_54;
        }
        break;
      case 5u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
LABEL_57:
        if ((unint64_t)v21 >= v17 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v31 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v21;
          v31 = v21 + 1;
          *((_QWORD *)a2 + 1) = v31;
        }
        *((_DWORD *)this + 18) |= 0x10u;
        if ((unint64_t)v31 >= v17 || *v31 != 48)
          continue;
        v22 = v31 + 1;
        *((_QWORD *)a2 + 1) = v22;
LABEL_65:
        if ((unint64_t)v22 >= v17 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
          if (!(_DWORD)result)
            return result;
          v32 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v47 = *v22;
          v32 = v22 + 1;
          *((_QWORD *)a2 + 1) = v32;
        }
        *((_DWORD *)this + 18) |= 0x20u;
        if ((unint64_t)v32 >= v17 || *v32 != 56)
          continue;
        v23 = v32 + 1;
        *((_QWORD *)a2 + 1) = v23;
LABEL_73:
        if ((unint64_t)v23 >= v17 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v46);
          if (!(_DWORD)result)
            return result;
          v33 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v46 = *v23;
          v33 = v23 + 1;
          *((_QWORD *)a2 + 1) = v33;
        }
        *((_DWORD *)this + 18) |= 0x40u;
        if ((unint64_t)v33 >= v17 || *v33 != 64)
          continue;
        v24 = v33 + 1;
        *((_QWORD *)a2 + 1) = v24;
LABEL_81:
        if ((unint64_t)v24 >= v17 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v45);
          if (!(_DWORD)result)
            return result;
          v34 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v45 = *v24;
          v34 = v24 + 1;
          *((_QWORD *)a2 + 1) = v34;
        }
        *((_DWORD *)this + 18) |= 0x80u;
        if ((unint64_t)v34 >= v17 || *v34 != 72)
          continue;
        v25 = v34 + 1;
        *((_QWORD *)a2 + 1) = v25;
LABEL_89:
        if ((unint64_t)v25 >= v17 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v43);
          if (!(_DWORD)result)
            return result;
          v35 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v43 = *v25;
          v35 = v25 + 1;
          *((_QWORD *)a2 + 1) = v35;
        }
        *((_DWORD *)this + 18) |= 0x100u;
        if ((unint64_t)v35 >= v17 || *v35 != 80)
          continue;
        v26 = v35 + 1;
        *((_QWORD *)a2 + 1) = v26;
LABEL_97:
        if ((unint64_t)v26 >= v17 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v42);
          if (!(_DWORD)result)
            return result;
          v36 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v42 = *v26;
          v36 = v26 + 1;
          *((_QWORD *)a2 + 1) = v36;
        }
        *((_DWORD *)this + 18) |= 0x200u;
        if ((unint64_t)v36 >= v17 || *v36 != 88)
          continue;
        v27 = v36 + 1;
        *((_QWORD *)a2 + 1) = v27;
LABEL_105:
        if ((unint64_t)v27 >= v17 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v37 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v27;
          v37 = v27 + 1;
          *((_QWORD *)a2 + 1) = v37;
        }
        *((_DWORD *)this + 18) |= 0x400u;
        if ((unint64_t)v37 >= v17 || *v37 != 96)
          continue;
        v28 = v37 + 1;
        *((_QWORD *)a2 + 1) = v28;
LABEL_113:
        if ((unint64_t)v28 >= v17 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v38 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v28;
          v38 = v28 + 1;
          *((_QWORD *)a2 + 1) = v38;
        }
        *((_DWORD *)this + 18) |= 0x800u;
        if ((unint64_t)v38 >= v17 || *v38 != 104)
          continue;
        v29 = v38 + 1;
        *((_QWORD *)a2 + 1) = v29;
LABEL_121:
        if ((unint64_t)v29 >= v17 || *v29 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!(_DWORD)result)
            return result;
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v9 = *v29;
          v39 = v29 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *((_DWORD *)this + 18) |= 0x1000u;
        if ((unint64_t)v39 >= v17 || *v39 != 112)
          continue;
        v30 = v39 + 1;
        *((_QWORD *)a2 + 1) = v30;
LABEL_129:
        if ((unint64_t)v30 >= v17 || *v30 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v10);
          if (!(_DWORD)result)
            return result;
          v40 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v10 = *v30;
          v40 = (unsigned __int8 *)(v30 + 1);
          *((_QWORD *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 18) |= 0x2000u;
        if (v40 != (unsigned __int8 *)v17 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 6u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_65;
      case 7u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_73;
      case 8u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_81;
      case 9u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v25 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_89;
      case 0xAu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v26 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_97;
      case 0xBu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_105;
      case 0xCu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v28 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_113;
      case 0xDu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v29 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_121;
      case 0xEu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v30 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_129;
      default:
        v13 = TagFallback & 7;
LABEL_48:
        if (v13 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 72);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 52), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(_QWORD *)(v5 + 56), (uint64_t)a2, a4);
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x2000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(_QWORD *)(v5 + 56), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::ByteSize(awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;

  v2 = *((_DWORD *)this + 18);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_34;
  }
  v3 = (v2 << 31 >> 31) & 5;
  if ((v2 & 2) != 0)
    v3 += 5;
  if ((v2 & 4) != 0)
    v4 = v3 + 5;
  else
    v4 = v3;
  if ((v2 & 8) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      v2 = *((_DWORD *)this + 18);
    }
    else
    {
      v6 = 1;
    }
    v4 = (v4 + v6 + 1);
    if ((v2 & 0x10) == 0)
    {
LABEL_9:
      if ((v2 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_9;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v7 >= 0x80)
  {
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
    v2 = *((_DWORD *)this + 18);
  }
  else
  {
    v8 = 1;
  }
  v4 = (v4 + v8 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_22:
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    v2 = *((_DWORD *)this + 18);
  }
  else
  {
    v10 = 1;
  }
  v4 = (v4 + v10 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_34;
    goto LABEL_30;
  }
LABEL_26:
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11) + 1;
    v2 = *((_DWORD *)this + 18);
  }
  else
  {
    v12 = 2;
  }
  v4 = (v12 + v4);
  if ((v2 & 0x80) != 0)
  {
LABEL_30:
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v13 >= 0x80)
    {
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13) + 1;
      v2 = *((_DWORD *)this + 18);
    }
    else
    {
      v14 = 2;
    }
    v4 = (v14 + v4);
  }
LABEL_34:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_42;
  if ((v2 & 0x100) != 0)
  {
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16) + 1;
      v2 = *((_DWORD *)this + 18);
    }
    else
    {
      v17 = 2;
    }
    v4 = (v17 + v4);
    if ((v2 & 0x200) == 0)
    {
LABEL_37:
      if ((v2 & 0x400) == 0)
        goto LABEL_38;
      goto LABEL_51;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_37;
  }
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v18 >= 0x80)
  {
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18) + 1;
    v2 = *((_DWORD *)this + 18);
  }
  else
  {
    v19 = 2;
  }
  v4 = (v19 + v4);
  if ((v2 & 0x400) == 0)
  {
LABEL_38:
    if ((v2 & 0x800) == 0)
      goto LABEL_39;
    goto LABEL_55;
  }
LABEL_51:
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
  if (v20 >= 0x80)
  {
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20) + 1;
    v2 = *((_DWORD *)this + 18);
  }
  else
  {
    v21 = 2;
  }
  v4 = (v21 + v4);
  if ((v2 & 0x800) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000) == 0)
      goto LABEL_40;
LABEL_59:
    v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
    if (v24 >= 0x80)
    {
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24) + 1;
      v2 = *((_DWORD *)this + 18);
    }
    else
    {
      v25 = 2;
    }
    v4 = (v25 + v4);
    if ((v2 & 0x2000) != 0)
      goto LABEL_41;
    goto LABEL_42;
  }
LABEL_55:
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
  if (v22 >= 0x80)
  {
    v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22) + 1;
    v2 = *((_DWORD *)this + 18);
  }
  else
  {
    v23 = 2;
  }
  v4 = (v23 + v4);
  if ((v2 & 0x1000) != 0)
    goto LABEL_59;
LABEL_40:
  if ((v2 & 0x2000) != 0)
LABEL_41:
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 7))
       + 1;
LABEL_42:
  *((_DWORD *)this + 17) = v4;
  return v4;
}

void awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::CheckTypeAndMergeFrom(awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _BYTE v19[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  v4 = *((_DWORD *)lpsrc + 18);
  if (!(_BYTE)v4)
    goto LABEL_14;
  if ((v4 & 1) != 0)
  {
    v7 = *((_DWORD *)lpsrc + 2);
    *((_DWORD *)this + 18) |= 1u;
    *((_DWORD *)this + 2) = v7;
    v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0)
        goto LABEL_8;
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  v8 = *((_DWORD *)lpsrc + 3);
  *((_DWORD *)this + 18) |= 2u;
  *((_DWORD *)this + 3) = v8;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  v9 = *((_DWORD *)lpsrc + 4);
  *((_DWORD *)this + 18) |= 4u;
  *((_DWORD *)this + 4) = v9;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v10 = *((_DWORD *)lpsrc + 5);
  *((_DWORD *)this + 18) |= 8u;
  *((_DWORD *)this + 5) = v10;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
LABEL_28:
    v12 = *((_DWORD *)lpsrc + 7);
    *((_DWORD *)this + 18) |= 0x20u;
    *((_DWORD *)this + 7) = v12;
    v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_27:
  v11 = *((_DWORD *)lpsrc + 6);
  *((_DWORD *)this + 18) |= 0x10u;
  *((_DWORD *)this + 6) = v11;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x20) != 0)
    goto LABEL_28;
LABEL_11:
  if ((v4 & 0x40) == 0)
    goto LABEL_12;
LABEL_29:
  v13 = *((_DWORD *)lpsrc + 8);
  *((_DWORD *)this + 18) |= 0x40u;
  *((_DWORD *)this + 8) = v13;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    v5 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 18) |= 0x80u;
    *((_DWORD *)this + 9) = v5;
    v4 = *((_DWORD *)lpsrc + 18);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0)
    return;
  if ((v4 & 0x100) != 0)
  {
    v14 = *((_DWORD *)lpsrc + 10);
    *((_DWORD *)this + 18) |= 0x100u;
    *((_DWORD *)this + 10) = v14;
    v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0)
        goto LABEL_18;
      goto LABEL_33;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  v15 = *((_DWORD *)lpsrc + 11);
  *((_DWORD *)this + 18) |= 0x200u;
  *((_DWORD *)this + 11) = v15;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  v16 = *((_DWORD *)lpsrc + 12);
  *((_DWORD *)this + 18) |= 0x400u;
  *((_DWORD *)this + 12) = v16;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  v17 = *((_DWORD *)lpsrc + 13);
  *((_DWORD *)this + 18) |= 0x800u;
  *((_DWORD *)this + 13) = v17;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000) == 0)
      return;
    goto LABEL_21;
  }
LABEL_35:
  v18 = *((_DWORD *)lpsrc + 16);
  *((_DWORD *)this + 18) |= 0x1000u;
  *((_DWORD *)this + 16) = v18;
  if ((*((_DWORD *)lpsrc + 18) & 0x2000) != 0)
  {
LABEL_21:
    v6 = *((_QWORD *)lpsrc + 7);
    *((_DWORD *)this + 18) |= 0x2000u;
    *((_QWORD *)this + 7) = v6;
  }
}

void sub_1BEE93130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::IsInitialized(awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  return 1;
}

_QWORD *awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock");
}

void awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::~Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock(awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  *(_QWORD *)this = &off_1E78BF540;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF540;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

double awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::New(awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E78BF540;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_DWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::Clear(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 72);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(this + 40) = 0;
    *(_QWORD *)(this + 48) = 0;
    *(_DWORD *)(this + 64) = 0;
    *(_QWORD *)(this + 56) = 0;
  }
  *(_DWORD *)(this + 72) = 0;
  return this;
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::MergePartialFromCodedStream(awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unint64_t *v10;
  char *v11;
  uint64_t TagFallback;
  int v13;
  uint64_t result;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned __int8 *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;

  v4 = (unsigned int *)((char *)this + 16);
  v5 = (unsigned int *)((char *)this + 20);
  v6 = (unsigned int *)((char *)this + 24);
  v46 = (unsigned int *)((char *)this + 32);
  v47 = (unsigned int *)((char *)this + 28);
  v44 = (unsigned int *)((char *)this + 12);
  v45 = (unsigned int *)((char *)this + 36);
  v43 = (unsigned int *)((char *)this + 40);
  v41 = (unsigned int *)((char *)this + 8);
  v42 = (unsigned int *)((char *)this + 44);
  v7 = (unsigned int *)((char *)this + 48);
  v8 = (unsigned int *)((char *)this + 52);
  v9 = (unsigned int *)((char *)this + 64);
  v10 = (unint64_t *)((char *)this + 56);
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v11;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v13 = TagFallback & 7;
        if (v13 != 5)
          goto LABEL_48;
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v41);
        if ((_DWORD)result)
        {
          *((_DWORD *)this + 18) |= 1u;
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v15 < *((_QWORD *)a2 + 2) && *v15 == 21)
          {
            *((_QWORD *)a2 + 1) = v15 + 1;
            goto LABEL_15;
          }
          continue;
        }
        return result;
      case 2u:
        v13 = TagFallback & 7;
        if (v13 != 5)
          goto LABEL_48;
LABEL_15:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v44);
        if ((_DWORD)result)
        {
          *((_DWORD *)this + 18) |= 2u;
          v16 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v16 < *((_QWORD *)a2 + 2) && *v16 == 29)
          {
            *((_QWORD *)a2 + 1) = v16 + 1;
            goto LABEL_20;
          }
          continue;
        }
        return result;
      case 3u:
        v13 = TagFallback & 7;
        if (v13 != 5)
          goto LABEL_48;
LABEL_20:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v4);
        if ((_DWORD)result)
        {
          *((_DWORD *)this + 18) |= 4u;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v18 < v17 && *v18 == 32)
          {
            v19 = v18 + 1;
            *((_QWORD *)a2 + 1) = v19;
            goto LABEL_26;
          }
          continue;
        }
        return result;
      case 4u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
LABEL_26:
        if ((unint64_t)v19 < v17 && (*v19 & 0x80000000) == 0)
        {
          *v5 = *v19;
          v20 = v19 + 1;
          *((_QWORD *)a2 + 1) = v20;
LABEL_54:
          *((_DWORD *)this + 18) |= 8u;
          if ((unint64_t)v20 < v17 && *v20 == 40)
          {
            v21 = v20 + 1;
            *((_QWORD *)a2 + 1) = v21;
            goto LABEL_57;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if ((_DWORD)result)
        {
          v20 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
          goto LABEL_54;
        }
        break;
      case 5u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
LABEL_57:
        if ((unint64_t)v21 >= v17 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v31 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v21;
          v31 = v21 + 1;
          *((_QWORD *)a2 + 1) = v31;
        }
        *((_DWORD *)this + 18) |= 0x10u;
        if ((unint64_t)v31 >= v17 || *v31 != 48)
          continue;
        v22 = v31 + 1;
        *((_QWORD *)a2 + 1) = v22;
LABEL_65:
        if ((unint64_t)v22 >= v17 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
          if (!(_DWORD)result)
            return result;
          v32 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v47 = *v22;
          v32 = v22 + 1;
          *((_QWORD *)a2 + 1) = v32;
        }
        *((_DWORD *)this + 18) |= 0x20u;
        if ((unint64_t)v32 >= v17 || *v32 != 56)
          continue;
        v23 = v32 + 1;
        *((_QWORD *)a2 + 1) = v23;
LABEL_73:
        if ((unint64_t)v23 >= v17 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v46);
          if (!(_DWORD)result)
            return result;
          v33 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v46 = *v23;
          v33 = v23 + 1;
          *((_QWORD *)a2 + 1) = v33;
        }
        *((_DWORD *)this + 18) |= 0x40u;
        if ((unint64_t)v33 >= v17 || *v33 != 64)
          continue;
        v24 = v33 + 1;
        *((_QWORD *)a2 + 1) = v24;
LABEL_81:
        if ((unint64_t)v24 >= v17 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v45);
          if (!(_DWORD)result)
            return result;
          v34 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v45 = *v24;
          v34 = v24 + 1;
          *((_QWORD *)a2 + 1) = v34;
        }
        *((_DWORD *)this + 18) |= 0x80u;
        if ((unint64_t)v34 >= v17 || *v34 != 72)
          continue;
        v25 = v34 + 1;
        *((_QWORD *)a2 + 1) = v25;
LABEL_89:
        if ((unint64_t)v25 >= v17 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v43);
          if (!(_DWORD)result)
            return result;
          v35 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v43 = *v25;
          v35 = v25 + 1;
          *((_QWORD *)a2 + 1) = v35;
        }
        *((_DWORD *)this + 18) |= 0x100u;
        if ((unint64_t)v35 >= v17 || *v35 != 80)
          continue;
        v26 = v35 + 1;
        *((_QWORD *)a2 + 1) = v26;
LABEL_97:
        if ((unint64_t)v26 >= v17 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v42);
          if (!(_DWORD)result)
            return result;
          v36 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v42 = *v26;
          v36 = v26 + 1;
          *((_QWORD *)a2 + 1) = v36;
        }
        *((_DWORD *)this + 18) |= 0x200u;
        if ((unint64_t)v36 >= v17 || *v36 != 88)
          continue;
        v27 = v36 + 1;
        *((_QWORD *)a2 + 1) = v27;
LABEL_105:
        if ((unint64_t)v27 >= v17 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v37 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v27;
          v37 = v27 + 1;
          *((_QWORD *)a2 + 1) = v37;
        }
        *((_DWORD *)this + 18) |= 0x400u;
        if ((unint64_t)v37 >= v17 || *v37 != 96)
          continue;
        v28 = v37 + 1;
        *((_QWORD *)a2 + 1) = v28;
LABEL_113:
        if ((unint64_t)v28 >= v17 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v38 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v28;
          v38 = v28 + 1;
          *((_QWORD *)a2 + 1) = v38;
        }
        *((_DWORD *)this + 18) |= 0x800u;
        if ((unint64_t)v38 >= v17 || *v38 != 104)
          continue;
        v29 = v38 + 1;
        *((_QWORD *)a2 + 1) = v29;
LABEL_121:
        if ((unint64_t)v29 >= v17 || *v29 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!(_DWORD)result)
            return result;
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v9 = *v29;
          v39 = v29 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *((_DWORD *)this + 18) |= 0x1000u;
        if ((unint64_t)v39 >= v17 || *v39 != 112)
          continue;
        v30 = v39 + 1;
        *((_QWORD *)a2 + 1) = v30;
LABEL_129:
        if ((unint64_t)v30 >= v17 || *v30 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v10);
          if (!(_DWORD)result)
            return result;
          v40 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v10 = *v30;
          v40 = (unsigned __int8 *)(v30 + 1);
          *((_QWORD *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 18) |= 0x2000u;
        if (v40 != (unsigned __int8 *)v17 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 6u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_65;
      case 7u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_73;
      case 8u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_81;
      case 9u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v25 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_89;
      case 0xAu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v26 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_97;
      case 0xBu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_105;
      case 0xCu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v28 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_113;
      case 0xDu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v29 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_121;
      case 0xEu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_48;
        v30 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_129;
      default:
        v13 = TagFallback & 7;
LABEL_48:
        if (v13 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 72);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 52), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(_QWORD *)(v5 + 56), (uint64_t)a2, a4);
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x2000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(_QWORD *)(v5 + 56), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::ByteSize(awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;

  v2 = *((_DWORD *)this + 18);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_34;
  }
  v3 = (v2 << 31 >> 31) & 5;
  if ((v2 & 2) != 0)
    v3 += 5;
  if ((v2 & 4) != 0)
    v4 = v3 + 5;
  else
    v4 = v3;
  if ((v2 & 8) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      v2 = *((_DWORD *)this + 18);
    }
    else
    {
      v6 = 1;
    }
    v4 = (v4 + v6 + 1);
    if ((v2 & 0x10) == 0)
    {
LABEL_9:
      if ((v2 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_9;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v7 >= 0x80)
  {
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
    v2 = *((_DWORD *)this + 18);
  }
  else
  {
    v8 = 1;
  }
  v4 = (v4 + v8 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_22:
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    v2 = *((_DWORD *)this + 18);
  }
  else
  {
    v10 = 1;
  }
  v4 = (v4 + v10 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_34;
    goto LABEL_30;
  }
LABEL_26:
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11) + 1;
    v2 = *((_DWORD *)this + 18);
  }
  else
  {
    v12 = 2;
  }
  v4 = (v12 + v4);
  if ((v2 & 0x80) != 0)
  {
LABEL_30:
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v13 >= 0x80)
    {
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13) + 1;
      v2 = *((_DWORD *)this + 18);
    }
    else
    {
      v14 = 2;
    }
    v4 = (v14 + v4);
  }
LABEL_34:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_42;
  if ((v2 & 0x100) != 0)
  {
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16) + 1;
      v2 = *((_DWORD *)this + 18);
    }
    else
    {
      v17 = 2;
    }
    v4 = (v17 + v4);
    if ((v2 & 0x200) == 0)
    {
LABEL_37:
      if ((v2 & 0x400) == 0)
        goto LABEL_38;
      goto LABEL_51;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_37;
  }
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v18 >= 0x80)
  {
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18) + 1;
    v2 = *((_DWORD *)this + 18);
  }
  else
  {
    v19 = 2;
  }
  v4 = (v19 + v4);
  if ((v2 & 0x400) == 0)
  {
LABEL_38:
    if ((v2 & 0x800) == 0)
      goto LABEL_39;
    goto LABEL_55;
  }
LABEL_51:
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
  if (v20 >= 0x80)
  {
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20) + 1;
    v2 = *((_DWORD *)this + 18);
  }
  else
  {
    v21 = 2;
  }
  v4 = (v21 + v4);
  if ((v2 & 0x800) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000) == 0)
      goto LABEL_40;
LABEL_59:
    v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
    if (v24 >= 0x80)
    {
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24) + 1;
      v2 = *((_DWORD *)this + 18);
    }
    else
    {
      v25 = 2;
    }
    v4 = (v25 + v4);
    if ((v2 & 0x2000) != 0)
      goto LABEL_41;
    goto LABEL_42;
  }
LABEL_55:
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
  if (v22 >= 0x80)
  {
    v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22) + 1;
    v2 = *((_DWORD *)this + 18);
  }
  else
  {
    v23 = 2;
  }
  v4 = (v23 + v4);
  if ((v2 & 0x1000) != 0)
    goto LABEL_59;
LABEL_40:
  if ((v2 & 0x2000) != 0)
LABEL_41:
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 7))
       + 1;
LABEL_42:
  *((_DWORD *)this + 17) = v4;
  return v4;
}

void awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::CheckTypeAndMergeFrom(awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _BYTE v19[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  v4 = *((_DWORD *)lpsrc + 18);
  if (!(_BYTE)v4)
    goto LABEL_14;
  if ((v4 & 1) != 0)
  {
    v7 = *((_DWORD *)lpsrc + 2);
    *((_DWORD *)this + 18) |= 1u;
    *((_DWORD *)this + 2) = v7;
    v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0)
        goto LABEL_8;
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  v8 = *((_DWORD *)lpsrc + 3);
  *((_DWORD *)this + 18) |= 2u;
  *((_DWORD *)this + 3) = v8;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  v9 = *((_DWORD *)lpsrc + 4);
  *((_DWORD *)this + 18) |= 4u;
  *((_DWORD *)this + 4) = v9;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v10 = *((_DWORD *)lpsrc + 5);
  *((_DWORD *)this + 18) |= 8u;
  *((_DWORD *)this + 5) = v10;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
LABEL_28:
    v12 = *((_DWORD *)lpsrc + 7);
    *((_DWORD *)this + 18) |= 0x20u;
    *((_DWORD *)this + 7) = v12;
    v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_27:
  v11 = *((_DWORD *)lpsrc + 6);
  *((_DWORD *)this + 18) |= 0x10u;
  *((_DWORD *)this + 6) = v11;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x20) != 0)
    goto LABEL_28;
LABEL_11:
  if ((v4 & 0x40) == 0)
    goto LABEL_12;
LABEL_29:
  v13 = *((_DWORD *)lpsrc + 8);
  *((_DWORD *)this + 18) |= 0x40u;
  *((_DWORD *)this + 8) = v13;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    v5 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 18) |= 0x80u;
    *((_DWORD *)this + 9) = v5;
    v4 = *((_DWORD *)lpsrc + 18);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0)
    return;
  if ((v4 & 0x100) != 0)
  {
    v14 = *((_DWORD *)lpsrc + 10);
    *((_DWORD *)this + 18) |= 0x100u;
    *((_DWORD *)this + 10) = v14;
    v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0)
        goto LABEL_18;
      goto LABEL_33;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  v15 = *((_DWORD *)lpsrc + 11);
  *((_DWORD *)this + 18) |= 0x200u;
  *((_DWORD *)this + 11) = v15;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  v16 = *((_DWORD *)lpsrc + 12);
  *((_DWORD *)this + 18) |= 0x400u;
  *((_DWORD *)this + 12) = v16;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  v17 = *((_DWORD *)lpsrc + 13);
  *((_DWORD *)this + 18) |= 0x800u;
  *((_DWORD *)this + 13) = v17;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000) == 0)
      return;
    goto LABEL_21;
  }
LABEL_35:
  v18 = *((_DWORD *)lpsrc + 16);
  *((_DWORD *)this + 18) |= 0x1000u;
  *((_DWORD *)this + 16) = v18;
  if ((*((_DWORD *)lpsrc + 18) & 0x2000) != 0)
  {
LABEL_21:
    v6 = *((_QWORD *)lpsrc + 7);
    *((_DWORD *)this + 18) |= 0x2000u;
    *((_QWORD *)this + 7) = v6;
  }
}

void sub_1BEE93F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::IsInitialized(awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  return 1;
}

_QWORD *awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock");
}

void awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::~Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock(awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  *(_QWORD *)this = &off_1E78BF5B8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF5B8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

double awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::New(awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E78BF5B8;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  return result;
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::Clear(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 100);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_OWORD *)(this + 56) = 0u;
    *(_OWORD *)(this + 40) = 0u;
  }
  if ((v1 & 0xFF0000) != 0)
  {
    *(_QWORD *)(this + 72) = 0;
    *(_QWORD *)(this + 80) = 0;
    *(_QWORD *)(this + 88) = 0;
  }
  *(_DWORD *)(this + 100) = 0;
  return this;
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::MergePartialFromCodedStream(awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  char *v11;
  uint64_t TagFallback;
  int v13;
  uint64_t result;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  char *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unint64_t *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int *v70;

  v61 = (unsigned int *)((char *)this + 8);
  v65 = (unsigned int *)((char *)this + 12);
  v66 = (unsigned int *)((char *)this + 16);
  v67 = (unsigned int *)((char *)this + 20);
  v68 = (unsigned int *)((char *)this + 24);
  v69 = (unsigned int *)((char *)this + 28);
  v70 = (unsigned int *)((char *)this + 32);
  v4 = (unsigned int *)((char *)this + 36);
  v5 = (unsigned int *)((char *)this + 40);
  v6 = (unsigned int *)((char *)this + 44);
  v7 = (unsigned int *)((char *)this + 48);
  v8 = (unsigned int *)((char *)this + 52);
  v9 = (unsigned int *)((char *)this + 56);
  v10 = (unsigned int *)((char *)this + 60);
  v63 = (unsigned int *)((char *)this + 68);
  v64 = (unsigned int *)((char *)this + 64);
  v62 = (unsigned int *)((char *)this + 72);
  v59 = (unsigned int *)((char *)this + 80);
  v60 = (unsigned int *)((char *)this + 76);
  v57 = (unint64_t *)((char *)this + 88);
  v58 = (unsigned int *)((char *)this + 84);
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v11;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v13 = TagFallback & 7;
        if (v13 != 5)
          goto LABEL_56;
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v61);
        if ((_DWORD)result)
        {
          *((_DWORD *)this + 25) |= 1u;
          v16 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v16 < v15 && *v16 == 16)
          {
            v17 = v16 + 1;
            *((_QWORD *)a2 + 1) = v17;
            goto LABEL_15;
          }
          continue;
        }
        return result;
      case 2u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
LABEL_15:
        if ((unint64_t)v17 < v15 && (*v17 & 0x80000000) == 0)
        {
          *v65 = *v17;
          v18 = v17 + 1;
          *((_QWORD *)a2 + 1) = v18;
LABEL_62:
          *((_DWORD *)this + 25) |= 2u;
          if ((unint64_t)v18 < v15 && *v18 == 24)
          {
            v19 = v18 + 1;
            *((_QWORD *)a2 + 1) = v19;
            goto LABEL_65;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v65);
        if ((_DWORD)result)
        {
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
          goto LABEL_62;
        }
        break;
      case 3u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
LABEL_65:
        if ((unint64_t)v19 >= v15 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v66);
          if (!(_DWORD)result)
            return result;
          v38 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v66 = *v19;
          v38 = v19 + 1;
          *((_QWORD *)a2 + 1) = v38;
        }
        *((_DWORD *)this + 25) |= 4u;
        if ((unint64_t)v38 >= v15 || *v38 != 32)
          continue;
        v20 = v38 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_73:
        if ((unint64_t)v20 >= v15 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v67);
          if (!(_DWORD)result)
            return result;
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v67 = *v20;
          v39 = v20 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *((_DWORD *)this + 25) |= 8u;
        if ((unint64_t)v39 >= v15 || *v39 != 40)
          continue;
        v21 = v39 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_81:
        if ((unint64_t)v21 >= v15 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v68);
          if (!(_DWORD)result)
            return result;
          v40 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v68 = *v21;
          v40 = v21 + 1;
          *((_QWORD *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 25) |= 0x10u;
        if ((unint64_t)v40 >= v15 || *v40 != 48)
          continue;
        v22 = v40 + 1;
        *((_QWORD *)a2 + 1) = v22;
LABEL_89:
        if ((unint64_t)v22 >= v15 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v69);
          if (!(_DWORD)result)
            return result;
          v41 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v69 = *v22;
          v41 = v22 + 1;
          *((_QWORD *)a2 + 1) = v41;
        }
        *((_DWORD *)this + 25) |= 0x20u;
        if ((unint64_t)v41 >= v15 || *v41 != 56)
          continue;
        v23 = v41 + 1;
        *((_QWORD *)a2 + 1) = v23;
LABEL_97:
        if ((unint64_t)v23 >= v15 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v70);
          if (!(_DWORD)result)
            return result;
          v42 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v70 = *v23;
          v42 = v23 + 1;
          *((_QWORD *)a2 + 1) = v42;
        }
        *((_DWORD *)this + 25) |= 0x40u;
        if ((unint64_t)v42 >= v15 || *v42 != 64)
          continue;
        v24 = v42 + 1;
        *((_QWORD *)a2 + 1) = v24;
LABEL_105:
        if ((unint64_t)v24 >= v15 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v43 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v24;
          v43 = v24 + 1;
          *((_QWORD *)a2 + 1) = v43;
        }
        *((_DWORD *)this + 25) |= 0x80u;
        if ((unint64_t)v43 >= v15 || *v43 != 72)
          continue;
        v25 = v43 + 1;
        *((_QWORD *)a2 + 1) = v25;
LABEL_113:
        if ((unint64_t)v25 >= v15 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v44 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v25;
          v44 = v25 + 1;
          *((_QWORD *)a2 + 1) = v44;
        }
        *((_DWORD *)this + 25) |= 0x100u;
        if ((unint64_t)v44 >= v15 || *v44 != 80)
          continue;
        v26 = v44 + 1;
        *((_QWORD *)a2 + 1) = v26;
LABEL_121:
        if ((unint64_t)v26 >= v15 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v45 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v26;
          v45 = v26 + 1;
          *((_QWORD *)a2 + 1) = v45;
        }
        *((_DWORD *)this + 25) |= 0x200u;
        if ((unint64_t)v45 >= v15 || *v45 != 88)
          continue;
        v27 = v45 + 1;
        *((_QWORD *)a2 + 1) = v27;
LABEL_129:
        if ((unint64_t)v27 >= v15 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v46 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v27;
          v46 = v27 + 1;
          *((_QWORD *)a2 + 1) = v46;
        }
        *((_DWORD *)this + 25) |= 0x400u;
        if ((unint64_t)v46 >= v15 || *v46 != 96)
          continue;
        v28 = v46 + 1;
        *((_QWORD *)a2 + 1) = v28;
LABEL_137:
        if ((unint64_t)v28 >= v15 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v47 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v28;
          v47 = v28 + 1;
          *((_QWORD *)a2 + 1) = v47;
        }
        *((_DWORD *)this + 25) |= 0x800u;
        if ((unint64_t)v47 >= v15 || *v47 != 112)
          continue;
        v29 = v47 + 1;
        *((_QWORD *)a2 + 1) = v29;
LABEL_145:
        if ((unint64_t)v29 >= v15 || *v29 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!(_DWORD)result)
            return result;
          v48 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v9 = *v29;
          v48 = v29 + 1;
          *((_QWORD *)a2 + 1) = v48;
        }
        *((_DWORD *)this + 25) |= 0x1000u;
        if ((unint64_t)v48 >= v15 || *v48 != 120)
          continue;
        v30 = v48 + 1;
        *((_QWORD *)a2 + 1) = v30;
LABEL_153:
        if ((unint64_t)v30 >= v15 || (char)*v30 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!(_DWORD)result)
            return result;
          v49 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v10 = *v30;
          v49 = v30 + 1;
          *((_QWORD *)a2 + 1) = v49;
        }
        *((_DWORD *)this + 25) |= 0x2000u;
        if ((int)v15 - (int)v49 < 2 || *v49 != 128 || v49[1] != 1)
          continue;
        v31 = v49 + 2;
        *((_QWORD *)a2 + 1) = v31;
LABEL_162:
        if ((unint64_t)v31 >= v15 || (char)*v31 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v64);
          if (!(_DWORD)result)
            return result;
          v50 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v64 = *v31;
          v50 = v31 + 1;
          *((_QWORD *)a2 + 1) = v50;
        }
        *((_DWORD *)this + 25) |= 0x4000u;
        if ((int)v15 - (int)v50 < 2 || *v50 != 136 || v50[1] != 1)
          continue;
        v32 = v50 + 2;
        *((_QWORD *)a2 + 1) = v32;
LABEL_171:
        if ((unint64_t)v32 >= v15 || (char)*v32 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v63);
          if (!(_DWORD)result)
            return result;
          v51 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v63 = *v32;
          v51 = v32 + 1;
          *((_QWORD *)a2 + 1) = v51;
        }
        *((_DWORD *)this + 25) |= 0x8000u;
        if ((int)v15 - (int)v51 < 2 || *v51 != 144 || v51[1] != 1)
          continue;
        v33 = v51 + 2;
        *((_QWORD *)a2 + 1) = v33;
LABEL_180:
        if ((unint64_t)v33 >= v15 || (char)*v33 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v62);
          if (!(_DWORD)result)
            return result;
          v52 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v62 = *v33;
          v52 = v33 + 1;
          *((_QWORD *)a2 + 1) = v52;
        }
        *((_DWORD *)this + 25) |= 0x10000u;
        if ((int)v15 - (int)v52 < 2 || *v52 != 152 || v52[1] != 1)
          continue;
        v34 = v52 + 2;
        *((_QWORD *)a2 + 1) = v34;
LABEL_189:
        if ((unint64_t)v34 >= v15 || (char)*v34 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v60);
          if (!(_DWORD)result)
            return result;
          v53 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v60 = *v34;
          v53 = v34 + 1;
          *((_QWORD *)a2 + 1) = v53;
        }
        *((_DWORD *)this + 25) |= 0x20000u;
        if ((int)v15 - (int)v53 < 2 || *v53 != 160 || v53[1] != 1)
          continue;
        v35 = v53 + 2;
        *((_QWORD *)a2 + 1) = v35;
LABEL_198:
        if ((unint64_t)v35 >= v15 || (char)*v35 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v59);
          if (!(_DWORD)result)
            return result;
          v54 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v59 = *v35;
          v54 = v35 + 1;
          *((_QWORD *)a2 + 1) = v54;
        }
        *((_DWORD *)this + 25) |= 0x40000u;
        if ((int)v15 - (int)v54 < 2 || *v54 != 168 || v54[1] != 1)
          continue;
        v36 = v54 + 2;
        *((_QWORD *)a2 + 1) = v36;
LABEL_207:
        if ((unint64_t)v36 >= v15 || (char)*v36 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v58);
          if (!(_DWORD)result)
            return result;
          v55 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v58 = *v36;
          v55 = v36 + 1;
          *((_QWORD *)a2 + 1) = v55;
        }
        *((_DWORD *)this + 25) |= 0x80000u;
        if ((int)v15 - (int)v55 < 2 || *v55 != 176 || v55[1] != 1)
          continue;
        v37 = (char *)(v55 + 2);
        *((_QWORD *)a2 + 1) = v37;
LABEL_216:
        if ((unint64_t)v37 >= v15 || *v37 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v57);
          if (!(_DWORD)result)
            return result;
          v56 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v57 = *v37;
          v56 = (unsigned __int8 *)(v37 + 1);
          *((_QWORD *)a2 + 1) = v56;
        }
        *((_DWORD *)this + 25) |= 0x100000u;
        if (v56 != (unsigned __int8 *)v15 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 4u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_73;
      case 5u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_81;
      case 6u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_89;
      case 7u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_97;
      case 8u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_105;
      case 9u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v25 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_113;
      case 0xAu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v26 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_121;
      case 0xBu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_129;
      case 0xCu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v28 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_137;
      case 0xEu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v29 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_145;
      case 0xFu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v30 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_153;
      case 0x10u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v31 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_162;
      case 0x11u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v32 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_171;
      case 0x12u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v33 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_180;
      case 0x13u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v34 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_189;
      case 0x14u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v35 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_198;
      case 0x15u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v36 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_207;
      case 0x16u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v37 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_216;
      default:
        v13 = TagFallback & 7;
LABEL_56:
        if (v13 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 100);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 100);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 52), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned int *)(v5 + 56), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(unsigned int *)(v5 + 60), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(unsigned int *)(v5 + 68), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *(unsigned int *)(v5 + 72), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(unsigned int *)(v5 + 80), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(_QWORD *)(v5 + 88), (uint64_t)a2, a4);
  }
LABEL_42:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned int *)(v5 + 84), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 100) & 0x100000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(_QWORD *)(v5 + 88), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::ByteSize(awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  int v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  int v29;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v30;
  int v31;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v32;
  int v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v35;
  int v36;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v37;
  int v38;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v39;
  int v40;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v41;
  int v42;

  v2 = *((_DWORD *)this + 25);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_39;
  }
  v3 = (v2 << 31 >> 31) & 5;
  if ((v2 & 2) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v4 >= 0x80)
    {
      v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      v2 = *((_DWORD *)this + 25);
    }
    else
    {
      v5 = 1;
    }
    v3 = (v3 + v5 + 1);
    if ((v2 & 4) == 0)
    {
LABEL_4:
      if ((v2 & 8) == 0)
        goto LABEL_5;
      goto LABEL_19;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_4;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v7 = 1;
  }
  v3 = (v3 + v7 + 1);
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_19:
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v8 >= 0x80)
  {
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v9 = 1;
  }
  v3 = (v3 + v9 + 1);
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_23:
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v11 = 1;
  }
  v3 = (v3 + v11 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_27:
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v13 = 1;
  }
  v3 = (v3 + v13 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_8:
    if ((v2 & 0x80) == 0)
      goto LABEL_39;
    goto LABEL_35;
  }
LABEL_31:
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v14 >= 0x80)
  {
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v15 = 1;
  }
  v3 = (v3 + v15 + 1);
  if ((v2 & 0x80) != 0)
  {
LABEL_35:
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
      v2 = *((_DWORD *)this + 25);
    }
    else
    {
      v17 = 1;
    }
    v3 = (v3 + v17 + 1);
  }
LABEL_39:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_81;
  if ((v2 & 0x100) != 0)
  {
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v18 >= 0x80)
    {
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
      v2 = *((_DWORD *)this + 25);
    }
    else
    {
      v19 = 1;
    }
    v3 = (v3 + v19 + 1);
    if ((v2 & 0x200) == 0)
    {
LABEL_42:
      if ((v2 & 0x400) == 0)
        goto LABEL_43;
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_42;
  }
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v20 >= 0x80)
  {
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v21 = 1;
  }
  v3 = (v3 + v21 + 1);
  if ((v2 & 0x400) == 0)
  {
LABEL_43:
    if ((v2 & 0x800) == 0)
      goto LABEL_44;
    goto LABEL_61;
  }
LABEL_57:
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
  if (v22 >= 0x80)
  {
    v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v23 = 1;
  }
  v3 = (v3 + v23 + 1);
  if ((v2 & 0x800) == 0)
  {
LABEL_44:
    if ((v2 & 0x1000) == 0)
      goto LABEL_45;
    goto LABEL_65;
  }
LABEL_61:
  v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
  if (v24 >= 0x80)
  {
    v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v25 = 1;
  }
  v3 = (v3 + v25 + 1);
  if ((v2 & 0x1000) == 0)
  {
LABEL_45:
    if ((v2 & 0x2000) == 0)
      goto LABEL_46;
    goto LABEL_69;
  }
LABEL_65:
  v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
  if (v26 >= 0x80)
  {
    v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v27 = 1;
  }
  v3 = (v3 + v27 + 1);
  if ((v2 & 0x2000) == 0)
  {
LABEL_46:
    if ((v2 & 0x4000) == 0)
      goto LABEL_47;
    goto LABEL_73;
  }
LABEL_69:
  v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 15);
  if (v28 >= 0x80)
  {
    v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28) + 1;
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v29 = 2;
  }
  v3 = (v29 + v3);
  if ((v2 & 0x4000) == 0)
  {
LABEL_47:
    if ((v2 & 0x8000) == 0)
      goto LABEL_81;
    goto LABEL_77;
  }
LABEL_73:
  v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if (v30 >= 0x80)
  {
    v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30) + 2;
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v31 = 3;
  }
  v3 = (v31 + v3);
  if ((v2 & 0x8000) != 0)
  {
LABEL_77:
    v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 17);
    if (v32 >= 0x80)
    {
      v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32) + 2;
      v2 = *((_DWORD *)this + 25);
    }
    else
    {
      v33 = 3;
    }
    v3 = (v33 + v3);
  }
LABEL_81:
  if ((v2 & 0xFF0000) == 0)
    goto LABEL_88;
  if ((v2 & 0x10000) != 0)
  {
    v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
    if (v35 >= 0x80)
    {
      v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35) + 2;
      v2 = *((_DWORD *)this + 25);
    }
    else
    {
      v36 = 3;
    }
    v3 = (v36 + v3);
    if ((v2 & 0x20000) == 0)
    {
LABEL_84:
      if ((v2 & 0x40000) == 0)
        goto LABEL_85;
      goto LABEL_97;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_84;
  }
  v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 19);
  if (v37 >= 0x80)
  {
    v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37) + 2;
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v38 = 3;
  }
  v3 = (v38 + v3);
  if ((v2 & 0x40000) == 0)
  {
LABEL_85:
    if ((v2 & 0x80000) == 0)
      goto LABEL_86;
LABEL_101:
    v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 21);
    if (v41 >= 0x80)
    {
      v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v41) + 2;
      v2 = *((_DWORD *)this + 25);
    }
    else
    {
      v42 = 3;
    }
    v3 = (v42 + v3);
    if ((v2 & 0x100000) != 0)
      goto LABEL_87;
    goto LABEL_88;
  }
LABEL_97:
  v39 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 20);
  if (v39 >= 0x80)
  {
    v40 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v39) + 2;
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v40 = 3;
  }
  v3 = (v40 + v3);
  if ((v2 & 0x80000) != 0)
    goto LABEL_101;
LABEL_86:
  if ((v2 & 0x100000) != 0)
LABEL_87:
    v3 = v3
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 11))
       + 2;
LABEL_88:
  *((_DWORD *)this + 24) = v3;
  return v3;
}

void awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::CheckTypeAndMergeFrom(awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _BYTE v26[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v26);
  }
  v4 = *((_DWORD *)lpsrc + 25);
  if (!(_BYTE)v4)
    goto LABEL_14;
  if ((v4 & 1) != 0)
  {
    v8 = *((_DWORD *)lpsrc + 2);
    *((_DWORD *)this + 25) |= 1u;
    *((_DWORD *)this + 2) = v8;
    v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0)
        goto LABEL_8;
      goto LABEL_34;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  v9 = *((_DWORD *)lpsrc + 3);
  *((_DWORD *)this + 25) |= 2u;
  *((_DWORD *)this + 3) = v9;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  v10 = *((_DWORD *)lpsrc + 4);
  *((_DWORD *)this + 25) |= 4u;
  *((_DWORD *)this + 4) = v10;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  v11 = *((_DWORD *)lpsrc + 5);
  *((_DWORD *)this + 25) |= 8u;
  *((_DWORD *)this + 5) = v11;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
LABEL_37:
    v13 = *((_DWORD *)lpsrc + 7);
    *((_DWORD *)this + 25) |= 0x20u;
    *((_DWORD *)this + 7) = v13;
    v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_36:
  v12 = *((_DWORD *)lpsrc + 6);
  *((_DWORD *)this + 25) |= 0x10u;
  *((_DWORD *)this + 6) = v12;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x20) != 0)
    goto LABEL_37;
LABEL_11:
  if ((v4 & 0x40) == 0)
    goto LABEL_12;
LABEL_38:
  v14 = *((_DWORD *)lpsrc + 8);
  *((_DWORD *)this + 25) |= 0x40u;
  *((_DWORD *)this + 8) = v14;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    v5 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 25) |= 0x80u;
    *((_DWORD *)this + 9) = v5;
    v4 = *((_DWORD *)lpsrc + 25);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0)
    goto LABEL_24;
  if ((v4 & 0x100) != 0)
  {
    v15 = *((_DWORD *)lpsrc + 10);
    *((_DWORD *)this + 25) |= 0x100u;
    *((_DWORD *)this + 10) = v15;
    v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0)
        goto LABEL_18;
      goto LABEL_42;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  v16 = *((_DWORD *)lpsrc + 11);
  *((_DWORD *)this + 25) |= 0x200u;
  *((_DWORD *)this + 11) = v16;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  v17 = *((_DWORD *)lpsrc + 12);
  *((_DWORD *)this + 25) |= 0x400u;
  *((_DWORD *)this + 12) = v17;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  v18 = *((_DWORD *)lpsrc + 13);
  *((_DWORD *)this + 25) |= 0x800u;
  *((_DWORD *)this + 13) = v18;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  v19 = *((_DWORD *)lpsrc + 14);
  *((_DWORD *)this + 25) |= 0x1000u;
  *((_DWORD *)this + 14) = v19;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x2000) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  v20 = *((_DWORD *)lpsrc + 15);
  *((_DWORD *)this + 25) |= 0x2000u;
  *((_DWORD *)this + 15) = v20;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_46:
  v21 = *((_DWORD *)lpsrc + 16);
  *((_DWORD *)this + 25) |= 0x4000u;
  *((_DWORD *)this + 16) = v21;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x8000) != 0)
  {
LABEL_23:
    v6 = *((_DWORD *)lpsrc + 17);
    *((_DWORD *)this + 25) |= 0x8000u;
    *((_DWORD *)this + 17) = v6;
    v4 = *((_DWORD *)lpsrc + 25);
  }
LABEL_24:
  if ((v4 & 0xFF0000) == 0)
    return;
  if ((v4 & 0x10000) != 0)
  {
    v22 = *((_DWORD *)lpsrc + 18);
    *((_DWORD *)this + 25) |= 0x10000u;
    *((_DWORD *)this + 18) = v22;
    v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 0x20000) == 0)
    {
LABEL_27:
      if ((v4 & 0x40000) == 0)
        goto LABEL_28;
      goto LABEL_50;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_27;
  }
  v23 = *((_DWORD *)lpsrc + 19);
  *((_DWORD *)this + 25) |= 0x20000u;
  *((_DWORD *)this + 19) = v23;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x40000) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_51;
  }
LABEL_50:
  v24 = *((_DWORD *)lpsrc + 20);
  *((_DWORD *)this + 25) |= 0x40000u;
  *((_DWORD *)this + 20) = v24;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x80000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0)
      return;
    goto LABEL_30;
  }
LABEL_51:
  v25 = *((_DWORD *)lpsrc + 21);
  *((_DWORD *)this + 25) |= 0x80000u;
  *((_DWORD *)this + 21) = v25;
  if ((*((_DWORD *)lpsrc + 25) & 0x100000) != 0)
  {
LABEL_30:
    v7 = *((_QWORD *)lpsrc + 11);
    *((_DWORD *)this + 25) |= 0x100000u;
    *((_QWORD *)this + 11) = v7;
  }
}

void sub_1BEE95514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::IsInitialized(awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  return 1;
}

_QWORD *awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock");
}

void awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::~Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock(awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  *(_QWORD *)this = &off_1E78BF630;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF630;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

double awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::New(awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E78BF630;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  return result;
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::Clear(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 100);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_OWORD *)(this + 56) = 0u;
    *(_OWORD *)(this + 40) = 0u;
  }
  if ((v1 & 0xFF0000) != 0)
  {
    *(_QWORD *)(this + 72) = 0;
    *(_QWORD *)(this + 80) = 0;
    *(_QWORD *)(this + 88) = 0;
  }
  *(_DWORD *)(this + 100) = 0;
  return this;
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::MergePartialFromCodedStream(awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  char *v11;
  uint64_t TagFallback;
  int v13;
  uint64_t result;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  char *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unint64_t *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int *v70;

  v61 = (unsigned int *)((char *)this + 8);
  v65 = (unsigned int *)((char *)this + 12);
  v66 = (unsigned int *)((char *)this + 16);
  v67 = (unsigned int *)((char *)this + 20);
  v68 = (unsigned int *)((char *)this + 24);
  v69 = (unsigned int *)((char *)this + 28);
  v70 = (unsigned int *)((char *)this + 32);
  v4 = (unsigned int *)((char *)this + 36);
  v5 = (unsigned int *)((char *)this + 40);
  v6 = (unsigned int *)((char *)this + 44);
  v7 = (unsigned int *)((char *)this + 48);
  v8 = (unsigned int *)((char *)this + 52);
  v9 = (unsigned int *)((char *)this + 56);
  v10 = (unsigned int *)((char *)this + 60);
  v63 = (unsigned int *)((char *)this + 68);
  v64 = (unsigned int *)((char *)this + 64);
  v62 = (unsigned int *)((char *)this + 72);
  v59 = (unsigned int *)((char *)this + 80);
  v60 = (unsigned int *)((char *)this + 76);
  v57 = (unint64_t *)((char *)this + 88);
  v58 = (unsigned int *)((char *)this + 84);
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v11;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v13 = TagFallback & 7;
        if (v13 != 5)
          goto LABEL_56;
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v61);
        if ((_DWORD)result)
        {
          *((_DWORD *)this + 25) |= 1u;
          v16 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v16 < v15 && *v16 == 16)
          {
            v17 = v16 + 1;
            *((_QWORD *)a2 + 1) = v17;
            goto LABEL_15;
          }
          continue;
        }
        return result;
      case 2u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
LABEL_15:
        if ((unint64_t)v17 < v15 && (*v17 & 0x80000000) == 0)
        {
          *v65 = *v17;
          v18 = v17 + 1;
          *((_QWORD *)a2 + 1) = v18;
LABEL_62:
          *((_DWORD *)this + 25) |= 2u;
          if ((unint64_t)v18 < v15 && *v18 == 24)
          {
            v19 = v18 + 1;
            *((_QWORD *)a2 + 1) = v19;
            goto LABEL_65;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v65);
        if ((_DWORD)result)
        {
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
          goto LABEL_62;
        }
        break;
      case 3u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
LABEL_65:
        if ((unint64_t)v19 >= v15 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v66);
          if (!(_DWORD)result)
            return result;
          v38 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v66 = *v19;
          v38 = v19 + 1;
          *((_QWORD *)a2 + 1) = v38;
        }
        *((_DWORD *)this + 25) |= 4u;
        if ((unint64_t)v38 >= v15 || *v38 != 32)
          continue;
        v20 = v38 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_73:
        if ((unint64_t)v20 >= v15 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v67);
          if (!(_DWORD)result)
            return result;
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v67 = *v20;
          v39 = v20 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *((_DWORD *)this + 25) |= 8u;
        if ((unint64_t)v39 >= v15 || *v39 != 40)
          continue;
        v21 = v39 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_81:
        if ((unint64_t)v21 >= v15 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v68);
          if (!(_DWORD)result)
            return result;
          v40 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v68 = *v21;
          v40 = v21 + 1;
          *((_QWORD *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 25) |= 0x10u;
        if ((unint64_t)v40 >= v15 || *v40 != 48)
          continue;
        v22 = v40 + 1;
        *((_QWORD *)a2 + 1) = v22;
LABEL_89:
        if ((unint64_t)v22 >= v15 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v69);
          if (!(_DWORD)result)
            return result;
          v41 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v69 = *v22;
          v41 = v22 + 1;
          *((_QWORD *)a2 + 1) = v41;
        }
        *((_DWORD *)this + 25) |= 0x20u;
        if ((unint64_t)v41 >= v15 || *v41 != 56)
          continue;
        v23 = v41 + 1;
        *((_QWORD *)a2 + 1) = v23;
LABEL_97:
        if ((unint64_t)v23 >= v15 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v70);
          if (!(_DWORD)result)
            return result;
          v42 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v70 = *v23;
          v42 = v23 + 1;
          *((_QWORD *)a2 + 1) = v42;
        }
        *((_DWORD *)this + 25) |= 0x40u;
        if ((unint64_t)v42 >= v15 || *v42 != 64)
          continue;
        v24 = v42 + 1;
        *((_QWORD *)a2 + 1) = v24;
LABEL_105:
        if ((unint64_t)v24 >= v15 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v43 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v24;
          v43 = v24 + 1;
          *((_QWORD *)a2 + 1) = v43;
        }
        *((_DWORD *)this + 25) |= 0x80u;
        if ((unint64_t)v43 >= v15 || *v43 != 72)
          continue;
        v25 = v43 + 1;
        *((_QWORD *)a2 + 1) = v25;
LABEL_113:
        if ((unint64_t)v25 >= v15 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v44 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v25;
          v44 = v25 + 1;
          *((_QWORD *)a2 + 1) = v44;
        }
        *((_DWORD *)this + 25) |= 0x100u;
        if ((unint64_t)v44 >= v15 || *v44 != 80)
          continue;
        v26 = v44 + 1;
        *((_QWORD *)a2 + 1) = v26;
LABEL_121:
        if ((unint64_t)v26 >= v15 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v45 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v26;
          v45 = v26 + 1;
          *((_QWORD *)a2 + 1) = v45;
        }
        *((_DWORD *)this + 25) |= 0x200u;
        if ((unint64_t)v45 >= v15 || *v45 != 88)
          continue;
        v27 = v45 + 1;
        *((_QWORD *)a2 + 1) = v27;
LABEL_129:
        if ((unint64_t)v27 >= v15 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v46 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v27;
          v46 = v27 + 1;
          *((_QWORD *)a2 + 1) = v46;
        }
        *((_DWORD *)this + 25) |= 0x400u;
        if ((unint64_t)v46 >= v15 || *v46 != 96)
          continue;
        v28 = v46 + 1;
        *((_QWORD *)a2 + 1) = v28;
LABEL_137:
        if ((unint64_t)v28 >= v15 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v47 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v28;
          v47 = v28 + 1;
          *((_QWORD *)a2 + 1) = v47;
        }
        *((_DWORD *)this + 25) |= 0x800u;
        if ((unint64_t)v47 >= v15 || *v47 != 112)
          continue;
        v29 = v47 + 1;
        *((_QWORD *)a2 + 1) = v29;
LABEL_145:
        if ((unint64_t)v29 >= v15 || *v29 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!(_DWORD)result)
            return result;
          v48 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v9 = *v29;
          v48 = v29 + 1;
          *((_QWORD *)a2 + 1) = v48;
        }
        *((_DWORD *)this + 25) |= 0x1000u;
        if ((unint64_t)v48 >= v15 || *v48 != 120)
          continue;
        v30 = v48 + 1;
        *((_QWORD *)a2 + 1) = v30;
LABEL_153:
        if ((unint64_t)v30 >= v15 || (char)*v30 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!(_DWORD)result)
            return result;
          v49 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v10 = *v30;
          v49 = v30 + 1;
          *((_QWORD *)a2 + 1) = v49;
        }
        *((_DWORD *)this + 25) |= 0x2000u;
        if ((int)v15 - (int)v49 < 2 || *v49 != 128 || v49[1] != 1)
          continue;
        v31 = v49 + 2;
        *((_QWORD *)a2 + 1) = v31;
LABEL_162:
        if ((unint64_t)v31 >= v15 || (char)*v31 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v64);
          if (!(_DWORD)result)
            return result;
          v50 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v64 = *v31;
          v50 = v31 + 1;
          *((_QWORD *)a2 + 1) = v50;
        }
        *((_DWORD *)this + 25) |= 0x4000u;
        if ((int)v15 - (int)v50 < 2 || *v50 != 136 || v50[1] != 1)
          continue;
        v32 = v50 + 2;
        *((_QWORD *)a2 + 1) = v32;
LABEL_171:
        if ((unint64_t)v32 >= v15 || (char)*v32 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v63);
          if (!(_DWORD)result)
            return result;
          v51 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v63 = *v32;
          v51 = v32 + 1;
          *((_QWORD *)a2 + 1) = v51;
        }
        *((_DWORD *)this + 25) |= 0x8000u;
        if ((int)v15 - (int)v51 < 2 || *v51 != 144 || v51[1] != 1)
          continue;
        v33 = v51 + 2;
        *((_QWORD *)a2 + 1) = v33;
LABEL_180:
        if ((unint64_t)v33 >= v15 || (char)*v33 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v62);
          if (!(_DWORD)result)
            return result;
          v52 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v62 = *v33;
          v52 = v33 + 1;
          *((_QWORD *)a2 + 1) = v52;
        }
        *((_DWORD *)this + 25) |= 0x10000u;
        if ((int)v15 - (int)v52 < 2 || *v52 != 152 || v52[1] != 1)
          continue;
        v34 = v52 + 2;
        *((_QWORD *)a2 + 1) = v34;
LABEL_189:
        if ((unint64_t)v34 >= v15 || (char)*v34 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v60);
          if (!(_DWORD)result)
            return result;
          v53 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v60 = *v34;
          v53 = v34 + 1;
          *((_QWORD *)a2 + 1) = v53;
        }
        *((_DWORD *)this + 25) |= 0x20000u;
        if ((int)v15 - (int)v53 < 2 || *v53 != 160 || v53[1] != 1)
          continue;
        v35 = v53 + 2;
        *((_QWORD *)a2 + 1) = v35;
LABEL_198:
        if ((unint64_t)v35 >= v15 || (char)*v35 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v59);
          if (!(_DWORD)result)
            return result;
          v54 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v59 = *v35;
          v54 = v35 + 1;
          *((_QWORD *)a2 + 1) = v54;
        }
        *((_DWORD *)this + 25) |= 0x40000u;
        if ((int)v15 - (int)v54 < 2 || *v54 != 168 || v54[1] != 1)
          continue;
        v36 = v54 + 2;
        *((_QWORD *)a2 + 1) = v36;
LABEL_207:
        if ((unint64_t)v36 >= v15 || (char)*v36 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v58);
          if (!(_DWORD)result)
            return result;
          v55 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v58 = *v36;
          v55 = v36 + 1;
          *((_QWORD *)a2 + 1) = v55;
        }
        *((_DWORD *)this + 25) |= 0x80000u;
        if ((int)v15 - (int)v55 < 2 || *v55 != 176 || v55[1] != 1)
          continue;
        v37 = (char *)(v55 + 2);
        *((_QWORD *)a2 + 1) = v37;
LABEL_216:
        if ((unint64_t)v37 >= v15 || *v37 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v57);
          if (!(_DWORD)result)
            return result;
          v56 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v57 = *v37;
          v56 = (unsigned __int8 *)(v37 + 1);
          *((_QWORD *)a2 + 1) = v56;
        }
        *((_DWORD *)this + 25) |= 0x100000u;
        if (v56 != (unsigned __int8 *)v15 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 4u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_73;
      case 5u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_81;
      case 6u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_89;
      case 7u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_97;
      case 8u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_105;
      case 9u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v25 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_113;
      case 0xAu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v26 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_121;
      case 0xBu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_129;
      case 0xCu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v28 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_137;
      case 0xEu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v29 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_145;
      case 0xFu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v30 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_153;
      case 0x10u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v31 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_162;
      case 0x11u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v32 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_171;
      case 0x12u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v33 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_180;
      case 0x13u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v34 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_189;
      case 0x14u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v35 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_198;
      case 0x15u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v36 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_207;
      case 0x16u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v37 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_216;
      default:
        v13 = TagFallback & 7;
LABEL_56:
        if (v13 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 100);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 100);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 52), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned int *)(v5 + 56), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(unsigned int *)(v5 + 60), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(unsigned int *)(v5 + 68), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *(unsigned int *)(v5 + 72), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(unsigned int *)(v5 + 80), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(_QWORD *)(v5 + 88), (uint64_t)a2, a4);
  }
LABEL_42:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned int *)(v5 + 84), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 100) & 0x100000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(_QWORD *)(v5 + 88), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::ByteSize(awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  int v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  int v29;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v30;
  int v31;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v32;
  int v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v35;
  int v36;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v37;
  int v38;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v39;
  int v40;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v41;
  int v42;

  v2 = *((_DWORD *)this + 25);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_39;
  }
  v3 = (v2 << 31 >> 31) & 5;
  if ((v2 & 2) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v4 >= 0x80)
    {
      v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      v2 = *((_DWORD *)this + 25);
    }
    else
    {
      v5 = 1;
    }
    v3 = (v3 + v5 + 1);
    if ((v2 & 4) == 0)
    {
LABEL_4:
      if ((v2 & 8) == 0)
        goto LABEL_5;
      goto LABEL_19;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_4;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v7 = 1;
  }
  v3 = (v3 + v7 + 1);
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_19:
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v8 >= 0x80)
  {
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v9 = 1;
  }
  v3 = (v3 + v9 + 1);
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_23:
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v11 = 1;
  }
  v3 = (v3 + v11 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_27:
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v13 = 1;
  }
  v3 = (v3 + v13 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_8:
    if ((v2 & 0x80) == 0)
      goto LABEL_39;
    goto LABEL_35;
  }
LABEL_31:
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v14 >= 0x80)
  {
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v15 = 1;
  }
  v3 = (v3 + v15 + 1);
  if ((v2 & 0x80) != 0)
  {
LABEL_35:
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
      v2 = *((_DWORD *)this + 25);
    }
    else
    {
      v17 = 1;
    }
    v3 = (v3 + v17 + 1);
  }
LABEL_39:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_81;
  if ((v2 & 0x100) != 0)
  {
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v18 >= 0x80)
    {
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
      v2 = *((_DWORD *)this + 25);
    }
    else
    {
      v19 = 1;
    }
    v3 = (v3 + v19 + 1);
    if ((v2 & 0x200) == 0)
    {
LABEL_42:
      if ((v2 & 0x400) == 0)
        goto LABEL_43;
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_42;
  }
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v20 >= 0x80)
  {
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v21 = 1;
  }
  v3 = (v3 + v21 + 1);
  if ((v2 & 0x400) == 0)
  {
LABEL_43:
    if ((v2 & 0x800) == 0)
      goto LABEL_44;
    goto LABEL_61;
  }
LABEL_57:
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
  if (v22 >= 0x80)
  {
    v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v23 = 1;
  }
  v3 = (v3 + v23 + 1);
  if ((v2 & 0x800) == 0)
  {
LABEL_44:
    if ((v2 & 0x1000) == 0)
      goto LABEL_45;
    goto LABEL_65;
  }
LABEL_61:
  v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
  if (v24 >= 0x80)
  {
    v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v25 = 1;
  }
  v3 = (v3 + v25 + 1);
  if ((v2 & 0x1000) == 0)
  {
LABEL_45:
    if ((v2 & 0x2000) == 0)
      goto LABEL_46;
    goto LABEL_69;
  }
LABEL_65:
  v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
  if (v26 >= 0x80)
  {
    v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26);
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v27 = 1;
  }
  v3 = (v3 + v27 + 1);
  if ((v2 & 0x2000) == 0)
  {
LABEL_46:
    if ((v2 & 0x4000) == 0)
      goto LABEL_47;
    goto LABEL_73;
  }
LABEL_69:
  v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 15);
  if (v28 >= 0x80)
  {
    v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28) + 1;
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v29 = 2;
  }
  v3 = (v29 + v3);
  if ((v2 & 0x4000) == 0)
  {
LABEL_47:
    if ((v2 & 0x8000) == 0)
      goto LABEL_81;
    goto LABEL_77;
  }
LABEL_73:
  v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if (v30 >= 0x80)
  {
    v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30) + 2;
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v31 = 3;
  }
  v3 = (v31 + v3);
  if ((v2 & 0x8000) != 0)
  {
LABEL_77:
    v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 17);
    if (v32 >= 0x80)
    {
      v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32) + 2;
      v2 = *((_DWORD *)this + 25);
    }
    else
    {
      v33 = 3;
    }
    v3 = (v33 + v3);
  }
LABEL_81:
  if ((v2 & 0xFF0000) == 0)
    goto LABEL_88;
  if ((v2 & 0x10000) != 0)
  {
    v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
    if (v35 >= 0x80)
    {
      v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35) + 2;
      v2 = *((_DWORD *)this + 25);
    }
    else
    {
      v36 = 3;
    }
    v3 = (v36 + v3);
    if ((v2 & 0x20000) == 0)
    {
LABEL_84:
      if ((v2 & 0x40000) == 0)
        goto LABEL_85;
      goto LABEL_97;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_84;
  }
  v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 19);
  if (v37 >= 0x80)
  {
    v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37) + 2;
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v38 = 3;
  }
  v3 = (v38 + v3);
  if ((v2 & 0x40000) == 0)
  {
LABEL_85:
    if ((v2 & 0x80000) == 0)
      goto LABEL_86;
LABEL_101:
    v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 21);
    if (v41 >= 0x80)
    {
      v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v41) + 2;
      v2 = *((_DWORD *)this + 25);
    }
    else
    {
      v42 = 3;
    }
    v3 = (v42 + v3);
    if ((v2 & 0x100000) != 0)
      goto LABEL_87;
    goto LABEL_88;
  }
LABEL_97:
  v39 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 20);
  if (v39 >= 0x80)
  {
    v40 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v39) + 2;
    v2 = *((_DWORD *)this + 25);
  }
  else
  {
    v40 = 3;
  }
  v3 = (v40 + v3);
  if ((v2 & 0x80000) != 0)
    goto LABEL_101;
LABEL_86:
  if ((v2 & 0x100000) != 0)
LABEL_87:
    v3 = v3
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 11))
       + 2;
LABEL_88:
  *((_DWORD *)this + 24) = v3;
  return v3;
}

void awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::CheckTypeAndMergeFrom(awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _BYTE v26[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v26);
  }
  v4 = *((_DWORD *)lpsrc + 25);
  if (!(_BYTE)v4)
    goto LABEL_14;
  if ((v4 & 1) != 0)
  {
    v8 = *((_DWORD *)lpsrc + 2);
    *((_DWORD *)this + 25) |= 1u;
    *((_DWORD *)this + 2) = v8;
    v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0)
        goto LABEL_8;
      goto LABEL_34;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  v9 = *((_DWORD *)lpsrc + 3);
  *((_DWORD *)this + 25) |= 2u;
  *((_DWORD *)this + 3) = v9;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  v10 = *((_DWORD *)lpsrc + 4);
  *((_DWORD *)this + 25) |= 4u;
  *((_DWORD *)this + 4) = v10;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  v11 = *((_DWORD *)lpsrc + 5);
  *((_DWORD *)this + 25) |= 8u;
  *((_DWORD *)this + 5) = v11;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
LABEL_37:
    v13 = *((_DWORD *)lpsrc + 7);
    *((_DWORD *)this + 25) |= 0x20u;
    *((_DWORD *)this + 7) = v13;
    v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_36:
  v12 = *((_DWORD *)lpsrc + 6);
  *((_DWORD *)this + 25) |= 0x10u;
  *((_DWORD *)this + 6) = v12;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x20) != 0)
    goto LABEL_37;
LABEL_11:
  if ((v4 & 0x40) == 0)
    goto LABEL_12;
LABEL_38:
  v14 = *((_DWORD *)lpsrc + 8);
  *((_DWORD *)this + 25) |= 0x40u;
  *((_DWORD *)this + 8) = v14;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    v5 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 25) |= 0x80u;
    *((_DWORD *)this + 9) = v5;
    v4 = *((_DWORD *)lpsrc + 25);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0)
    goto LABEL_24;
  if ((v4 & 0x100) != 0)
  {
    v15 = *((_DWORD *)lpsrc + 10);
    *((_DWORD *)this + 25) |= 0x100u;
    *((_DWORD *)this + 10) = v15;
    v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0)
        goto LABEL_18;
      goto LABEL_42;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  v16 = *((_DWORD *)lpsrc + 11);
  *((_DWORD *)this + 25) |= 0x200u;
  *((_DWORD *)this + 11) = v16;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  v17 = *((_DWORD *)lpsrc + 12);
  *((_DWORD *)this + 25) |= 0x400u;
  *((_DWORD *)this + 12) = v17;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  v18 = *((_DWORD *)lpsrc + 13);
  *((_DWORD *)this + 25) |= 0x800u;
  *((_DWORD *)this + 13) = v18;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  v19 = *((_DWORD *)lpsrc + 14);
  *((_DWORD *)this + 25) |= 0x1000u;
  *((_DWORD *)this + 14) = v19;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x2000) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  v20 = *((_DWORD *)lpsrc + 15);
  *((_DWORD *)this + 25) |= 0x2000u;
  *((_DWORD *)this + 15) = v20;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_46:
  v21 = *((_DWORD *)lpsrc + 16);
  *((_DWORD *)this + 25) |= 0x4000u;
  *((_DWORD *)this + 16) = v21;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x8000) != 0)
  {
LABEL_23:
    v6 = *((_DWORD *)lpsrc + 17);
    *((_DWORD *)this + 25) |= 0x8000u;
    *((_DWORD *)this + 17) = v6;
    v4 = *((_DWORD *)lpsrc + 25);
  }
LABEL_24:
  if ((v4 & 0xFF0000) == 0)
    return;
  if ((v4 & 0x10000) != 0)
  {
    v22 = *((_DWORD *)lpsrc + 18);
    *((_DWORD *)this + 25) |= 0x10000u;
    *((_DWORD *)this + 18) = v22;
    v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 0x20000) == 0)
    {
LABEL_27:
      if ((v4 & 0x40000) == 0)
        goto LABEL_28;
      goto LABEL_50;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_27;
  }
  v23 = *((_DWORD *)lpsrc + 19);
  *((_DWORD *)this + 25) |= 0x20000u;
  *((_DWORD *)this + 19) = v23;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x40000) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_51;
  }
LABEL_50:
  v24 = *((_DWORD *)lpsrc + 20);
  *((_DWORD *)this + 25) |= 0x40000u;
  *((_DWORD *)this + 20) = v24;
  v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x80000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0)
      return;
    goto LABEL_30;
  }
LABEL_51:
  v25 = *((_DWORD *)lpsrc + 21);
  *((_DWORD *)this + 25) |= 0x80000u;
  *((_DWORD *)this + 21) = v25;
  if ((*((_DWORD *)lpsrc + 25) & 0x100000) != 0)
  {
LABEL_30:
    v7 = *((_QWORD *)lpsrc + 11);
    *((_DWORD *)this + 25) |= 0x100000u;
    *((_QWORD *)this + 11) = v7;
  }
}

void sub_1BEE96AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::IsInitialized(awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  return 1;
}

_QWORD *awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock");
}

void awd::metrics::MetricATM_SoundUMB_State::~MetricATM_SoundUMB_State(awd::metrics::MetricATM_SoundUMB_State *this)
{
  *(_QWORD *)this = &off_1E78BF6A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF6A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t awd::metrics::MetricATM_SoundUMB_State::New(awd::metrics::MetricATM_SoundUMB_State *this)
{
  uint64_t result;

  result = operator new();
  *(_DWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E78BF6A8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

uint64_t awd::metrics::MetricATM_SoundUMB_State::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 40))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_BYTE *)(this + 32) = 0;
    *(_QWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t awd::metrics::MetricATM_SoundUMB_State::MergePartialFromCodedStream(awd::metrics::MetricATM_SoundUMB_State *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  char *v7;
  uint64_t TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  uint64_t result;
  unsigned int v21;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unint64_t *)((char *)this + 16);
  v6 = (unint64_t *)((char *)this + 24);
  while (2)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v21 = 0;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 < v10 && (*v11 & 0x80000000) == 0)
        {
          v12 = *v11;
          v13 = v11 + 1;
          *((_QWORD *)a2 + 1) = v13;
LABEL_24:
          *((_BYTE *)this + 32) = v12 != 0;
          *((_DWORD *)this + 10) |= 1u;
          if ((unint64_t)v13 < v10 && *v13 == 16)
          {
            v14 = v13 + 1;
            *((_QWORD *)a2 + 1) = v14;
            goto LABEL_27;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
        if ((_DWORD)result)
        {
          v12 = v21;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          goto LABEL_24;
        }
        break;
      case 2u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
LABEL_27:
        if ((unint64_t)v14 >= v10 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v14;
          v17 = v14 + 1;
          *((_QWORD *)a2 + 1) = v17;
        }
        *((_DWORD *)this + 10) |= 2u;
        if ((unint64_t)v17 >= v10 || *v17 != 24)
          continue;
        v15 = v17 + 1;
        *((_QWORD *)a2 + 1) = v15;
LABEL_35:
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v15;
          v18 = v15 + 1;
          *((_QWORD *)a2 + 1) = v18;
        }
        *((_DWORD *)this + 10) |= 4u;
        if ((unint64_t)v18 >= v10 || *v18 != 32)
          continue;
        v16 = v18 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_43:
        if ((unint64_t)v16 >= v10 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v19 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v16;
          v19 = (unsigned __int8 *)(v16 + 1);
          *((_QWORD *)a2 + 1) = v19;
        }
        *((_DWORD *)this + 10) |= 8u;
        if (v19 != (unsigned __int8 *)v10 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_35;
      case 4u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_43;
      default:
        v9 = TagFallback & 7;
LABEL_18:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::MetricATM_SoundUMB_State::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 40);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 32), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 8), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 24), (uint64_t)a2, a4);
  }
LABEL_8:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 24), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::MetricATM_SoundUMB_State::ByteSize(awd::metrics::MetricATM_SoundUMB_State *this)
{
  int v2;
  uint64_t v3;

  v2 = *((_DWORD *)this + 10);
  if ((_BYTE)v2)
  {
    v3 = 2 * (v2 & 1u);
    if ((v2 & 2) != 0)
    {
      v3 = (v3 | 1)
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1));
      v2 = *((_DWORD *)this + 10);
      if ((v2 & 4) == 0)
      {
LABEL_4:
        if ((v2 & 8) == 0)
          goto LABEL_10;
        goto LABEL_9;
      }
    }
    else if ((v2 & 4) == 0)
    {
      goto LABEL_4;
    }
    v3 = v3
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 2))
       + 1;
    if ((*((_DWORD *)this + 10) & 8) != 0)
LABEL_9:
      v3 = v3
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 3))
         + 1;
  }
  else
  {
    v3 = 0;
  }
LABEL_10:
  *((_DWORD *)this + 9) = v3;
  return v3;
}

void awd::metrics::MetricATM_SoundUMB_State::CheckTypeAndMergeFrom(awd::metrics::MetricATM_SoundUMB_State *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((_BYTE *)lpsrc + 40);
  if (!(_BYTE)v4)
    return;
  if ((*((_BYTE *)lpsrc + 40) & 1) == 0)
  {
    if ((*((_BYTE *)lpsrc + 40) & 2) == 0)
      goto LABEL_7;
LABEL_12:
    v7 = *((_QWORD *)lpsrc + 1);
    *((_DWORD *)this + 10) |= 2u;
    *((_QWORD *)this + 1) = v7;
    v4 = *((_DWORD *)lpsrc + 10);
    if ((v4 & 4) == 0)
    {
LABEL_8:
      if ((v4 & 8) == 0)
        return;
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  v6 = *((_BYTE *)lpsrc + 32);
  *((_DWORD *)this + 10) |= 1u;
  *((_BYTE *)this + 32) = v6;
  v4 = *((_DWORD *)lpsrc + 10);
  if ((v4 & 2) != 0)
    goto LABEL_12;
LABEL_7:
  if ((v4 & 4) == 0)
    goto LABEL_8;
LABEL_13:
  v8 = *((_QWORD *)lpsrc + 2);
  *((_DWORD *)this + 10) |= 4u;
  *((_QWORD *)this + 2) = v8;
  if ((*((_DWORD *)lpsrc + 10) & 8) != 0)
  {
LABEL_9:
    v5 = *((_QWORD *)lpsrc + 3);
    *((_DWORD *)this + 10) |= 8u;
    *((_QWORD *)this + 3) = v5;
  }
}

void sub_1BEE97084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::MetricATM_SoundUMB_State::IsInitialized(awd::metrics::MetricATM_SoundUMB_State *this)
{
  return 1;
}

_QWORD *awd::metrics::MetricATM_SoundUMB_State::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.MetricATM_SoundUMB_State");
}

_QWORD *awd::metrics::ATM_signaling_message::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;

  v1 = this;
  v2 = this[2];
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x1C3B87100](v2, 0x1012C40EC159624);
  }
  v5 = v1[4];
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (_QWORD *)MEMORY[0x1C3B87100](v5, 0x1012C40EC159624);
  }
  v7 = v1[6];
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (_QWORD *)MEMORY[0x1C3B87100](v7, 0x1012C40EC159624);
  }
  v9 = v1[7];
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    JUMPOUT(0x1C3B87100);
  }
  return this;
}

void awd::metrics::ATM_signaling_message::~ATM_signaling_message(awd::metrics::ATM_signaling_message *this)
{
  *(_QWORD *)this = &off_1E78BF720;
  awd::metrics::ATM_signaling_message::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF720;
  awd::metrics::ATM_signaling_message::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

double awd::metrics::ATM_signaling_message::New(awd::metrics::ATM_signaling_message *this)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = operator new();
  v2 = MEMORY[0x1E0DE8338];
  *(_QWORD *)v1 = &off_1E78BF720;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = v2;
  result = NAN;
  *(_QWORD *)(v1 + 24) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 56) = v2;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 48) = v2;
  *(_DWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t awd::metrics::ATM_signaling_message::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_DWORD *)(this + 72);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_DWORD *)(this + 24) = 0;
    v2 = MEMORY[0x1E0DE8338];
    if ((v1 & 4) != 0)
    {
      v3 = *(_QWORD *)(this + 16);
      if (v3 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(this + 44) = 0;
    *(_DWORD *)(this + 28) = -1;
    if ((*(_BYTE *)(this + 72) & 0x20) != 0)
    {
      v4 = *(_QWORD *)(this + 32);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(this + 45) = 0;
    *(_DWORD *)(this + 40) = 0;
    v1 = *(_DWORD *)(this + 72);
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_BYTE *)(this + 46) = 0;
    *(_DWORD *)(this + 64) = 0;
    if ((v1 & 0x400) != 0)
    {
      v5 = *(_QWORD *)(this + 48);
      if (v5 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(this + 47) = 0;
    if ((*(_BYTE *)(this + 73) & 0x10) != 0)
    {
      v6 = *(_QWORD *)(this + 56);
      if (v6 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 72) = 0;
  return this;
}

uint64_t awd::metrics::ATM_signaling_message::MergePartialFromCodedStream(awd::metrics::ATM_signaling_message *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  uint64_t TagFallback;
  int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  int v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  unint64_t v26;
  char *v27;
  int v28;
  _BYTE *v29;
  _QWORD *v30;
  _BYTE *v31;
  unsigned int v32;
  _BYTE *v33;
  unsigned int v34;
  _BYTE *v35;
  _QWORD *v36;
  _BYTE *v37;
  unsigned int v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  _BYTE *v42;
  _BYTE *v43;
  _QWORD *v44;
  _BYTE *v45;
  unsigned int v46;
  _BYTE *v47;
  _QWORD *v48;
  uint64_t result;
  unsigned int v50;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 24);
  v6 = (unsigned int *)((char *)this + 40);
  v7 = (unsigned int *)((char *)this + 64);
  v8 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v9;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v13 < v12 && (*v13 & 0x80000000) == 0)
        {
          *v4 = *v13;
          v14 = v13 + 1;
          *((_QWORD *)a2 + 1) = v14;
LABEL_42:
          *((_DWORD *)this + 18) |= 1u;
          if ((unint64_t)v14 < v12 && *v14 == 16)
          {
            v15 = v14 + 1;
            *((_QWORD *)a2 + 1) = v15;
            goto LABEL_45;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if ((_DWORD)result)
        {
          v14 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          goto LABEL_42;
        }
        break;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
LABEL_45:
        if ((unint64_t)v15 >= v12 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v29 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v15;
          v29 = v15 + 1;
          *((_QWORD *)a2 + 1) = v29;
        }
        v16 = *((_DWORD *)this + 18) | 2;
        *((_DWORD *)this + 18) = v16;
        if ((unint64_t)v29 >= v12 || *v29 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v29 + 1;
LABEL_53:
        *((_DWORD *)this + 18) = v16 | 4;
        if (*((_QWORD *)this + 2) == v8)
        {
          v30 = (_QWORD *)operator new();
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          *((_QWORD *)this + 2) = v30;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v31 = (_BYTE *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v31 >= v17 || *v31 != 32)
          continue;
        v18 = v31 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_59:
        v50 = 0;
        if ((unint64_t)v18 >= v17 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50);
          if (!(_DWORD)result)
            return result;
          v32 = v50;
          v33 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v32 = *v18;
          v33 = v18 + 1;
          *((_QWORD *)a2 + 1) = v33;
        }
        *((_BYTE *)this + 44) = v32 != 0;
        *((_DWORD *)this + 18) |= 8u;
        if ((unint64_t)v33 >= v17 || *v33 != 40)
          continue;
        v19 = v33 + 1;
        *((_QWORD *)a2 + 1) = v19;
LABEL_67:
        v50 = 0;
        if ((unint64_t)v19 >= v17 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50);
          if (!(_DWORD)result)
            return result;
          v34 = v50;
        }
        else
        {
          v34 = *v19;
          *((_QWORD *)a2 + 1) = v19 + 1;
        }
        if (v34 + 1 <= 7)
        {
          *((_DWORD *)this + 18) |= 0x10u;
          *((_DWORD *)this + 7) = v34;
        }
        v35 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v35 >= *((_QWORD *)a2 + 2) || *v35 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v35 + 1;
LABEL_77:
        *((_DWORD *)this + 18) |= 0x20u;
        if (*((_QWORD *)this + 4) == v8)
        {
          v36 = (_QWORD *)operator new();
          v36[1] = 0;
          v36[2] = 0;
          *v36 = 0;
          *((_QWORD *)this + 4) = v36;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v37 = (_BYTE *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v37 >= v20 || *v37 != 56)
          continue;
        v21 = v37 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_83:
        v50 = 0;
        if ((unint64_t)v21 >= v20 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50);
          if (!(_DWORD)result)
            return result;
          v38 = v50;
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          v20 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v38 = *v21;
          v39 = v21 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *((_BYTE *)this + 45) = v38 != 0;
        *((_DWORD *)this + 18) |= 0x40u;
        if ((unint64_t)v39 >= v20 || *v39 != 64)
          continue;
        v22 = v39 + 1;
        *((_QWORD *)a2 + 1) = v22;
LABEL_91:
        if ((unint64_t)v22 >= v20 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v40 = (_BYTE *)*((_QWORD *)a2 + 1);
          v20 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v22;
          v40 = v22 + 1;
          *((_QWORD *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 18) |= 0x80u;
        if ((unint64_t)v40 >= v20 || *v40 != 72)
          continue;
        v23 = v40 + 1;
        *((_QWORD *)a2 + 1) = v23;
LABEL_99:
        v50 = 0;
        if ((unint64_t)v23 >= v20 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50);
          if (!(_DWORD)result)
            return result;
          v41 = v50;
          v42 = (_BYTE *)*((_QWORD *)a2 + 1);
          v20 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v41 = *v23;
          v42 = v23 + 1;
          *((_QWORD *)a2 + 1) = v42;
        }
        *((_BYTE *)this + 46) = v41 != 0;
        *((_DWORD *)this + 18) |= 0x100u;
        if ((unint64_t)v42 >= v20 || *v42 != 80)
          continue;
        v24 = v42 + 1;
        *((_QWORD *)a2 + 1) = v24;
LABEL_107:
        if ((unint64_t)v24 >= v20 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v43 = (_BYTE *)*((_QWORD *)a2 + 1);
          v20 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v24;
          v43 = v24 + 1;
          *((_QWORD *)a2 + 1) = v43;
        }
        v25 = *((_DWORD *)this + 18) | 0x200;
        *((_DWORD *)this + 18) = v25;
        if ((unint64_t)v43 >= v20 || *v43 != 90)
          continue;
        *((_QWORD *)a2 + 1) = v43 + 1;
LABEL_115:
        *((_DWORD *)this + 18) = v25 | 0x400;
        if (*((_QWORD *)this + 6) == v8)
        {
          v44 = (_QWORD *)operator new();
          v44[1] = 0;
          v44[2] = 0;
          *v44 = 0;
          *((_QWORD *)this + 6) = v44;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v45 = (_BYTE *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v45 >= v26 || *v45 != 96)
          continue;
        v27 = v45 + 1;
        *((_QWORD *)a2 + 1) = v27;
LABEL_121:
        v50 = 0;
        if ((unint64_t)v27 >= v26 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50);
          if (!(_DWORD)result)
            return result;
          v46 = v50;
          v47 = (_BYTE *)*((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v46 = *v27;
          v47 = v27 + 1;
          *((_QWORD *)a2 + 1) = v47;
        }
        *((_BYTE *)this + 47) = v46 != 0;
        v28 = *((_DWORD *)this + 18) | 0x800;
        *((_DWORD *)this + 18) = v28;
        if ((unint64_t)v47 >= v26 || *v47 != 106)
          continue;
        *((_QWORD *)a2 + 1) = v47 + 1;
LABEL_129:
        *((_DWORD *)this + 18) = v28 | 0x1000;
        if (*((_QWORD *)this + 7) == v8)
        {
          v48 = (_QWORD *)operator new();
          v48[1] = 0;
          v48[2] = 0;
          *v48 = 0;
          *((_QWORD *)this + 7) = v48;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_37;
        v16 = *((_DWORD *)this + 18);
        goto LABEL_53;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_59;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_67;
      case 6u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_77;
        goto LABEL_37;
      case 7u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        goto LABEL_83;
      case 8u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        goto LABEL_91;
      case 9u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        goto LABEL_99;
      case 0xAu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        goto LABEL_107;
      case 0xBu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_37;
        v25 = *((_DWORD *)this + 18);
        goto LABEL_115;
      case 0xCu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        goto LABEL_121;
      case 0xDu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_37;
        v28 = *((_DWORD *)this + 18);
        goto LABEL_129;
      default:
        v11 = TagFallback & 7;
LABEL_37:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::ATM_signaling_message::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 72);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 44), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 45), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 46), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned __int8 *)(v5 + 47), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x1000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::metrics::ATM_signaling_message::ByteSize(awd::metrics::ATM_signaling_message *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  int v35;

  v2 = *((_DWORD *)this + 18);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_48;
  }
  if ((v2 & 1) == 0)
  {
    LODWORD(v3) = 0;
    if ((v2 & 2) == 0)
      goto LABEL_11;
LABEL_7:
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v4 >= 0x80)
    {
      v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      v2 = *((_DWORD *)this + 18);
    }
    else
    {
      v5 = 1;
    }
    LODWORD(v3) = v3 + v5 + 1;
    goto LABEL_11;
  }
  LODWORD(v3) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                            + 1))
              + 1;
  v2 = *((_DWORD *)this + 18);
  if ((v2 & 2) != 0)
    goto LABEL_7;
LABEL_11:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)this + 2);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = v9;
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      v2 = *((_DWORD *)this + 18);
      v8 = *(_BYTE *)(v6 + 23);
    }
    else
    {
      v11 = 1;
    }
    if (v8 < 0)
      v7 = v9;
    LODWORD(v3) = v3 + v11 + v7 + 1;
  }
  if ((v2 & 8) != 0)
    LODWORD(v3) = v3 + 2;
  if ((v2 & 0x10) != 0)
  {
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
    if ((v12 & 0x80000000) != 0)
    {
      v13 = 11;
    }
    else if (v12 >= 0x80)
    {
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12) + 1;
      v2 = *((_DWORD *)this + 18);
    }
    else
    {
      v13 = 2;
    }
    LODWORD(v3) = v13 + v3;
  }
  if ((v2 & 0x20) != 0)
  {
    v14 = *((_QWORD *)this + 4);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v16 = v15;
    v17 = *(_QWORD *)(v14 + 8);
    if ((v15 & 0x80u) == 0)
      v18 = *(unsigned __int8 *)(v14 + 23);
    else
      v18 = v17;
    if (v18 >= 0x80)
    {
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18);
      v15 = *(unsigned __int8 *)(v14 + 23);
      v17 = *(_QWORD *)(v14 + 8);
      v2 = *((_DWORD *)this + 18);
      v16 = *(_BYTE *)(v14 + 23);
    }
    else
    {
      v19 = 1;
    }
    if (v16 < 0)
      v15 = v17;
    LODWORD(v3) = v3 + v19 + v15 + 1;
  }
  if ((v2 & 0x40) != 0)
    v3 = (v3 + 2);
  else
    v3 = v3;
  if ((v2 & 0x80) != 0)
  {
    v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v20 >= 0x80)
    {
      v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20) + 1;
      v2 = *((_DWORD *)this + 18);
    }
    else
    {
      v21 = 2;
    }
    v3 = (v21 + v3);
  }
LABEL_48:
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
      LODWORD(v3) = v3 + 2;
    if ((v2 & 0x200) != 0)
    {
      v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
      if (v22 >= 0x80)
      {
        v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22) + 1;
        v2 = *((_DWORD *)this + 18);
      }
      else
      {
        v23 = 2;
      }
      LODWORD(v3) = v23 + v3;
    }
    if ((v2 & 0x400) != 0)
    {
      v24 = *((_QWORD *)this + 6);
      v25 = *(unsigned __int8 *)(v24 + 23);
      v26 = v25;
      v27 = *(_QWORD *)(v24 + 8);
      if ((v25 & 0x80u) == 0)
        v28 = *(unsigned __int8 *)(v24 + 23);
      else
        v28 = v27;
      if (v28 >= 0x80)
      {
        v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28);
        v25 = *(unsigned __int8 *)(v24 + 23);
        v27 = *(_QWORD *)(v24 + 8);
        v2 = *((_DWORD *)this + 18);
        v26 = *(_BYTE *)(v24 + 23);
      }
      else
      {
        v29 = 1;
      }
      if (v26 < 0)
        v25 = v27;
      LODWORD(v3) = v3 + v29 + v25 + 1;
    }
    if ((v2 & 0x800) != 0)
      v3 = (v3 + 2);
    else
      v3 = v3;
    if ((v2 & 0x1000) != 0)
    {
      v30 = *((_QWORD *)this + 7);
      v31 = *(unsigned __int8 *)(v30 + 23);
      v32 = v31;
      v33 = *(_QWORD *)(v30 + 8);
      if ((v31 & 0x80u) == 0)
        v34 = *(unsigned __int8 *)(v30 + 23);
      else
        v34 = v33;
      if (v34 >= 0x80)
      {
        v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
        v31 = *(unsigned __int8 *)(v30 + 23);
        v33 = *(_QWORD *)(v30 + 8);
        v32 = *(_BYTE *)(v30 + 23);
      }
      else
      {
        v35 = 1;
      }
      if (v32 < 0)
        v31 = v33;
      v3 = (v3 + v35 + v31 + 1);
    }
  }
  *((_DWORD *)this + 17) = v3;
  return v3;
}

void awd::metrics::ATM_signaling_message::CheckTypeAndMergeFrom(const std::string **this, const std::string **lpsrc)
{
  int v4;
  int v5;
  const std::string *v6;
  int v7;
  const std::string *v8;
  std::string *v9;
  char v10;
  int v11;
  const std::string *v12;
  std::string *v13;
  char v14;
  char v15;
  int v16;
  const std::string *v17;
  std::string *v18;
  char v19;
  const std::string *v20;
  std::string *v21;
  char v22[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
  }
  v4 = *((_DWORD *)lpsrc + 18);
  if (!(_BYTE)v4)
    goto LABEL_14;
  if ((v4 & 1) != 0)
  {
    v6 = lpsrc[1];
    *((_DWORD *)this + 18) |= 1u;
    this[1] = v6;
    v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0)
        goto LABEL_8;
      goto LABEL_23;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  v7 = *((_DWORD *)lpsrc + 6);
  *((_DWORD *)this + 18) |= 2u;
  *((_DWORD *)this + 6) = v7;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_23:
  v8 = lpsrc[2];
  *((_DWORD *)this + 18) |= 4u;
  v9 = (std::string *)this[2];
  if (v9 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v9 = (std::string *)operator new();
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    this[2] = v9;
  }
  std::string::operator=(v9, v8);
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v10 = *((_BYTE *)lpsrc + 44);
  *((_DWORD *)this + 18) |= 8u;
  *((_BYTE *)this + 44) = v10;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
LABEL_29:
    v12 = lpsrc[4];
    *((_DWORD *)this + 18) |= 0x20u;
    v13 = (std::string *)this[4];
    if (v13 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v13 = (std::string *)operator new();
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      this[4] = v13;
    }
    std::string::operator=(v13, v12);
    v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_27:
  v11 = *((_DWORD *)lpsrc + 7);
  if ((v11 + 1) >= 8)
    __assert_rtn("set_type", "CATM.pb.h", 19210, "::awd::metrics::enum_ATM_call_type_IsValid(value)");
  *((_DWORD *)this + 18) |= 0x10u;
  *((_DWORD *)this + 7) = v11;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x20) != 0)
    goto LABEL_29;
LABEL_11:
  if ((v4 & 0x40) == 0)
    goto LABEL_12;
LABEL_32:
  v14 = *((_BYTE *)lpsrc + 45);
  *((_DWORD *)this + 18) |= 0x40u;
  *((_BYTE *)this + 45) = v14;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    v5 = *((_DWORD *)lpsrc + 10);
    *((_DWORD *)this + 18) |= 0x80u;
    *((_DWORD *)this + 10) = v5;
    v4 = *((_DWORD *)lpsrc + 18);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0)
    return;
  if ((v4 & 0x100) != 0)
  {
    v15 = *((_BYTE *)lpsrc + 46);
    *((_DWORD *)this + 18) |= 0x100u;
    *((_BYTE *)this + 46) = v15;
    v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0)
        goto LABEL_18;
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  v16 = *((_DWORD *)lpsrc + 16);
  *((_DWORD *)this + 18) |= 0x200u;
  *((_DWORD *)this + 16) = v16;
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
LABEL_39:
    v19 = *((_BYTE *)lpsrc + 47);
    *((_DWORD *)this + 18) |= 0x800u;
    *((_BYTE *)this + 47) = v19;
    if (((_DWORD)lpsrc[9] & 0x1000) == 0)
      return;
    goto LABEL_40;
  }
LABEL_36:
  v17 = lpsrc[6];
  *((_DWORD *)this + 18) |= 0x400u;
  v18 = (std::string *)this[6];
  if (v18 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v18 = (std::string *)operator new();
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    this[6] = v18;
  }
  std::string::operator=(v18, v17);
  v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x800) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v4 & 0x1000) == 0)
    return;
LABEL_40:
  v20 = lpsrc[7];
  *((_DWORD *)this + 18) |= 0x1000u;
  v21 = (std::string *)this[7];
  if (v21 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v21 = (std::string *)operator new();
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    this[7] = v21;
  }
  std::string::operator=(v21, v20);
}

void sub_1BEE982A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::ATM_signaling_message::IsInitialized(awd::metrics::ATM_signaling_message *this)
{
  return 1;
}

_QWORD *awd::metrics::ATM_signaling_message::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_signaling_message");
}

uint64_t awd::metrics::conference_call_event::SharedDtor(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = MEMORY[0x1C3B87100](v2, 0x1012C40EC159624);
  }
  v5 = *(_QWORD *)(v1 + 32);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    JUMPOUT(0x1C3B87100);
  }
  return this;
}

void awd::metrics::conference_call_event::~conference_call_event(awd::metrics::conference_call_event *this)
{
  *(_QWORD *)this = &off_1E78BF798;
  awd::metrics::conference_call_event::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF798;
  awd::metrics::conference_call_event::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

double awd::metrics::conference_call_event::New(awd::metrics::conference_call_event *this)
{
  _QWORD *v1;
  uint64_t v2;
  double result;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E78BF798;
  v1[1] = 0;
  v2 = MEMORY[0x1E0DE8338];
  v1[2] = MEMORY[0x1E0DE8338];
  *(_QWORD *)&result = 1;
  v1[3] = 1;
  v1[4] = v2;
  v1[5] = 0;
  return result;
}

uint64_t awd::metrics::conference_call_event::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(this + 44);
  if (v1)
  {
    *(_QWORD *)(this + 8) = 0;
    v2 = MEMORY[0x1E0DE8338];
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 16);
      if (v3 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(this + 24) = 1;
    if ((*(_BYTE *)(this + 44) & 0x10) != 0)
    {
      v4 = *(_QWORD *)(this + 32);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t awd::metrics::conference_call_event::MergePartialFromCodedStream(awd::metrics::conference_call_event *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  uint64_t v6;
  char *v7;
  uint64_t TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  int v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  int v18;
  _QWORD *v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  _BYTE *v23;
  _QWORD *v24;
  uint64_t result;
  unsigned int v26;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 28);
  v6 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 < v10 && (*v11 & 0x80000000) == 0)
        {
          *v4 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)a2 + 1) = v12;
LABEL_26:
          v13 = *((_DWORD *)this + 11) | 1;
          *((_DWORD *)this + 11) = v13;
          if ((unint64_t)v12 < v10 && *v12 == 18)
          {
            *((_QWORD *)a2 + 1) = v12 + 1;
            goto LABEL_29;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if ((_DWORD)result)
        {
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          goto LABEL_26;
        }
        break;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_21;
        v13 = *((_DWORD *)this + 11);
LABEL_29:
        *((_DWORD *)this + 11) = v13 | 2;
        if (*((_QWORD *)this + 2) == v6)
        {
          v19 = (_QWORD *)operator new();
          v19[1] = 0;
          v19[2] = 0;
          *v19 = 0;
          *((_QWORD *)this + 2) = v19;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v20 = (_BYTE *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v20 >= v14 || *v20 != 24)
          continue;
        v15 = v20 + 1;
        *((_QWORD *)a2 + 1) = v15;
LABEL_35:
        v26 = 0;
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v26);
          if (!(_DWORD)result)
            return result;
          v21 = v26;
        }
        else
        {
          v21 = *v15;
          *((_QWORD *)a2 + 1) = v15 + 1;
        }
        if (v21 - 1 <= 3)
        {
          *((_DWORD *)this + 11) |= 4u;
          *((_DWORD *)this + 6) = v21;
        }
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v22 >= v16 || *v22 != 32)
          continue;
        v17 = v22 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_45:
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v23 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v17;
          v23 = v17 + 1;
          *((_QWORD *)a2 + 1) = v23;
        }
        v18 = *((_DWORD *)this + 11) | 8;
        *((_DWORD *)this + 11) = v18;
        if ((unint64_t)v23 >= v16 || *v23 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v23 + 1;
LABEL_53:
        *((_DWORD *)this + 11) = v18 | 0x10;
        if (*((_QWORD *)this + 4) == v6)
        {
          v24 = (_QWORD *)operator new();
          v24[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          *((_QWORD *)this + 4) = v24;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_35;
      case 4u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_45;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_21;
        v18 = *((_DWORD *)this + 11);
        goto LABEL_53;
      default:
        v9 = TagFallback & 7;
LABEL_21:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::conference_call_event::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;

  v5 = (unsigned int *)this;
  v6 = *(_DWORD *)(this + 44);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = v5[11];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = v5[11];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[6], (uint64_t)a2, a4);
  v6 = v5[11];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[7], (uint64_t)a2, a4);
  if ((v5[11] & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::metrics::conference_call_event::ByteSize(awd::metrics::conference_call_event *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  int v19;

  LOBYTE(v2) = *((_BYTE *)this + 44);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_39;
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    v2 = *((_DWORD *)this + 11);
    if ((v2 & 2) == 0)
      goto LABEL_16;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 44) & 2) == 0)
      goto LABEL_16;
  }
  v4 = *((_QWORD *)this + 2);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v2 = *((_DWORD *)this + 11);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 1;
  }
  if (v6 < 0)
    v5 = v7;
  v3 = (v3 + v9 + v5 + 1);
LABEL_16:
  if ((v2 & 4) != 0)
  {
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v10 & 0x80000000) != 0)
    {
      v11 = 11;
    }
    else if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10) + 1;
      v2 = *((_DWORD *)this + 11);
    }
    else
    {
      v11 = 2;
    }
    v3 = (v11 + v3);
    if ((v2 & 8) == 0)
    {
LABEL_18:
      if ((v2 & 0x10) == 0)
        goto LABEL_39;
      goto LABEL_30;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_18;
  }
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12) + 1;
    v2 = *((_DWORD *)this + 11);
  }
  else
  {
    v13 = 2;
  }
  v3 = (v13 + v3);
  if ((v2 & 0x10) != 0)
  {
LABEL_30:
    v14 = *((_QWORD *)this + 4);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v16 = v15;
    v17 = *(_QWORD *)(v14 + 8);
    if ((v15 & 0x80u) == 0)
      v18 = *(unsigned __int8 *)(v14 + 23);
    else
      v18 = v17;
    if (v18 >= 0x80)
    {
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18);
      v15 = *(unsigned __int8 *)(v14 + 23);
      v17 = *(_QWORD *)(v14 + 8);
      v16 = *(_BYTE *)(v14 + 23);
    }
    else
    {
      v19 = 1;
    }
    if (v16 < 0)
      v15 = v17;
    v3 = (v3 + v19 + v15 + 1);
  }
LABEL_39:
  *((_DWORD *)this + 10) = v3;
  return v3;
}

void awd::metrics::conference_call_event::CheckTypeAndMergeFrom(const std::string **this, const std::string **lpsrc)
{
  int v4;
  int v5;
  const std::string *v6;
  std::string *v7;
  const std::string *v8;
  const std::string *v9;
  std::string *v10;
  int v11;
  char v12[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *((_BYTE *)lpsrc + 44);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)lpsrc + 44) & 1) != 0)
    {
      v8 = lpsrc[1];
      *((_DWORD *)this + 11) |= 1u;
      this[1] = v8;
      v4 = *((_DWORD *)lpsrc + 11);
      if ((v4 & 2) == 0)
      {
LABEL_7:
        if ((v4 & 4) == 0)
          goto LABEL_8;
        goto LABEL_19;
      }
    }
    else if ((*((_BYTE *)lpsrc + 44) & 2) == 0)
    {
      goto LABEL_7;
    }
    v9 = lpsrc[2];
    *((_DWORD *)this + 11) |= 2u;
    v10 = (std::string *)this[2];
    if (v10 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v10 = (std::string *)operator new();
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      this[2] = v10;
    }
    std::string::operator=(v10, v9);
    v4 = *((_DWORD *)lpsrc + 11);
    if ((v4 & 4) == 0)
    {
LABEL_8:
      if ((v4 & 8) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
LABEL_19:
    v11 = *((_DWORD *)lpsrc + 6);
    if ((v11 - 1) >= 4)
      __assert_rtn("set_state", "CATM.pb.h", 19649, "::awd::metrics::enum_conf_call_event_IsValid(value)");
    *((_DWORD *)this + 11) |= 4u;
    *((_DWORD *)this + 6) = v11;
    v4 = *((_DWORD *)lpsrc + 11);
    if ((v4 & 8) == 0)
      goto LABEL_10;
LABEL_9:
    v5 = *((_DWORD *)lpsrc + 7);
    *((_DWORD *)this + 11) |= 8u;
    *((_DWORD *)this + 7) = v5;
    v4 = *((_DWORD *)lpsrc + 11);
LABEL_10:
    if ((v4 & 0x10) != 0)
    {
      v6 = lpsrc[4];
      *((_DWORD *)this + 11) |= 0x10u;
      v7 = (std::string *)this[4];
      if (v7 == (std::string *)MEMORY[0x1E0DE8338])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        this[4] = v7;
      }
      std::string::operator=(v7, v6);
    }
  }
}

void sub_1BEE98C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::conference_call_event::IsInitialized(awd::metrics::conference_call_event *this)
{
  return 1;
}

_QWORD *awd::metrics::conference_call_event::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.conference_call_event");
}

void awd::metrics::commCenterIMSSignallingDeferral::~commCenterIMSSignallingDeferral(awd::metrics::commCenterIMSSignallingDeferral *this)
{
  *(_QWORD *)this = &off_1E78BF810;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF810;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

double awd::metrics::commCenterIMSSignallingDeferral::New(awd::metrics::commCenterIMSSignallingDeferral *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E78BF810;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_QWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t awd::metrics::commCenterIMSSignallingDeferral::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 44))
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t awd::metrics::commCenterIMSSignallingDeferral::MergePartialFromCodedStream(awd::metrics::commCenterIMSSignallingDeferral *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  unint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char *v10;
  uint64_t TagFallback;
  int v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  unsigned __int8 *v25;
  uint64_t result;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 24);
  v6 = (unint64_t *)((char *)this + 16);
  v7 = (unsigned int *)((char *)this + 28);
  v8 = (unsigned int *)((char *)this + 32);
  v9 = (unsigned int *)((char *)this + 36);
  while (2)
  {
    v10 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v10;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v10 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 < v13 && (*v14 & 0x80000000) == 0)
        {
          *v4 = *v14;
          v15 = v14 + 1;
          *((_QWORD *)a2 + 1) = v15;
LABEL_28:
          *((_DWORD *)this + 11) |= 1u;
          if ((unint64_t)v15 < v13 && *v15 == 16)
          {
            v16 = v15 + 1;
            *((_QWORD *)a2 + 1) = v16;
            goto LABEL_31;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if ((_DWORD)result)
        {
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
          goto LABEL_28;
        }
        break;
      case 2u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
LABEL_31:
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v21 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v16;
          v21 = v16 + 1;
          *((_QWORD *)a2 + 1) = v21;
        }
        *((_DWORD *)this + 11) |= 2u;
        if ((unint64_t)v21 >= v13 || *v21 != 24)
          continue;
        v17 = v21 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_39:
        if ((unint64_t)v17 >= v13 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v17;
          v22 = v17 + 1;
          *((_QWORD *)a2 + 1) = v22;
        }
        *((_DWORD *)this + 11) |= 4u;
        if ((unint64_t)v22 >= v13 || *v22 != 32)
          continue;
        v18 = v22 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_47:
        if ((unint64_t)v18 >= v13 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v23 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v18;
          v23 = v18 + 1;
          *((_QWORD *)a2 + 1) = v23;
        }
        *((_DWORD *)this + 11) |= 8u;
        if ((unint64_t)v23 >= v13 || *v23 != 40)
          continue;
        v19 = v23 + 1;
        *((_QWORD *)a2 + 1) = v19;
LABEL_55:
        if ((unint64_t)v19 >= v13 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v24 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v19;
          v24 = v19 + 1;
          *((_QWORD *)a2 + 1) = v24;
        }
        *((_DWORD *)this + 11) |= 0x10u;
        if ((unint64_t)v24 >= v13 || *v24 != 48)
          continue;
        v20 = v24 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_63:
        if ((unint64_t)v20 >= v13 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!(_DWORD)result)
            return result;
          v25 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v9 = *v20;
          v25 = (unsigned __int8 *)(v20 + 1);
          *((_QWORD *)a2 + 1) = v25;
        }
        *((_DWORD *)this + 11) |= 0x20u;
        if (v25 != (unsigned __int8 *)v13 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_39;
      case 4u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_47;
      case 5u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_55;
      case 6u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_63;
      default:
        v12 = TagFallback & 7;
LABEL_22:
        if (v12 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::commCenterIMSSignallingDeferral::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 44);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  }
LABEL_12:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 44) & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::commCenterIMSSignallingDeferral::ByteSize(awd::metrics::commCenterIMSSignallingDeferral *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;

  LOBYTE(v2) = *((_BYTE *)this + 44);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_29;
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    v2 = *((_DWORD *)this + 11);
    if ((v2 & 2) == 0)
      goto LABEL_11;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 44) & 2) == 0)
      goto LABEL_11;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v4 >= 0x80)
  {
    v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
    v2 = *((_DWORD *)this + 11);
  }
  else
  {
    v5 = 2;
  }
  v3 = (v5 + v3);
LABEL_11:
  if ((v2 & 4) != 0)
  {
    v3 = v3
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 2))
       + 1;
    v2 = *((_DWORD *)this + 11);
    if ((v2 & 8) == 0)
    {
LABEL_13:
      if ((v2 & 0x10) == 0)
        goto LABEL_14;
      goto LABEL_21;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_13;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
    v2 = *((_DWORD *)this + 11);
  }
  else
  {
    v7 = 2;
  }
  v3 = (v7 + v3);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_29;
    goto LABEL_25;
  }
LABEL_21:
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v8 >= 0x80)
  {
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8) + 1;
    v2 = *((_DWORD *)this + 11);
  }
  else
  {
    v9 = 2;
  }
  v3 = (v9 + v3);
  if ((v2 & 0x20) != 0)
  {
LABEL_25:
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v10 >= 0x80)
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10) + 1;
    else
      v11 = 2;
    v3 = (v11 + v3);
  }
LABEL_29:
  *((_DWORD *)this + 10) = v3;
  return v3;
}

void awd::metrics::commCenterIMSSignallingDeferral::CheckTypeAndMergeFrom(awd::metrics::commCenterIMSSignallingDeferral *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  _BYTE v11[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v4) = *((_BYTE *)lpsrc + 44);
  if (!(_BYTE)v4)
    return;
  if ((*((_BYTE *)lpsrc + 44) & 1) != 0)
  {
    v6 = *((_QWORD *)lpsrc + 1);
    *((_DWORD *)this + 11) |= 1u;
    *((_QWORD *)this + 1) = v6;
    v4 = *((_DWORD *)lpsrc + 11);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0)
        goto LABEL_8;
      goto LABEL_15;
    }
  }
  else if ((*((_BYTE *)lpsrc + 44) & 2) == 0)
  {
    goto LABEL_7;
  }
  v7 = *((_DWORD *)lpsrc + 6);
  *((_DWORD *)this + 11) |= 2u;
  *((_DWORD *)this + 6) = v7;
  v4 = *((_DWORD *)lpsrc + 11);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
LABEL_16:
    v9 = *((_DWORD *)lpsrc + 7);
    *((_DWORD *)this + 11) |= 8u;
    *((_DWORD *)this + 7) = v9;
    v4 = *((_DWORD *)lpsrc + 11);
    if ((v4 & 0x10) == 0)
    {
LABEL_10:
      if ((v4 & 0x20) == 0)
        return;
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_15:
  v8 = *((_QWORD *)lpsrc + 2);
  *((_DWORD *)this + 11) |= 4u;
  *((_QWORD *)this + 2) = v8;
  v4 = *((_DWORD *)lpsrc + 11);
  if ((v4 & 8) != 0)
    goto LABEL_16;
LABEL_9:
  if ((v4 & 0x10) == 0)
    goto LABEL_10;
LABEL_17:
  v10 = *((_DWORD *)lpsrc + 8);
  *((_DWORD *)this + 11) |= 0x10u;
  *((_DWORD *)this + 8) = v10;
  if ((*((_DWORD *)lpsrc + 11) & 0x20) != 0)
  {
LABEL_11:
    v5 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 11) |= 0x20u;
    *((_DWORD *)this + 9) = v5;
  }
}

void sub_1BEE993E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::commCenterIMSSignallingDeferral::IsInitialized(awd::metrics::commCenterIMSSignallingDeferral *this)
{
  return 1;
}

_QWORD *awd::metrics::commCenterIMSSignallingDeferral::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.commCenterIMSSignallingDeferral");
}

void awd::metrics::LBRSessionStatistics::~LBRSessionStatistics(awd::metrics::LBRSessionStatistics *this)
{
  *(_QWORD *)this = &off_1E78BF888;
  awd::metrics::BchannelTransmitStatistics::SharedDtor(*((_QWORD *)this + 2));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E78BF888;
  awd::metrics::BchannelTransmitStatistics::SharedDtor(*((_QWORD *)this + 2));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C3B87100);
}

double awd::metrics::LBRSessionStatistics::New(awd::metrics::LBRSessionStatistics *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E78BF888;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DE8338];
  *(_DWORD *)(v1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t awd::metrics::LBRSessionStatistics::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(this + 64);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(this + 8) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(this + 16);
      if (v2 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(this + 24) = 0;
    *(_QWORD *)(this + 32) = 0;
    *(_QWORD *)(this + 40) = 0;
    v1 = *(_DWORD *)(this + 64);
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(this + 48) = 0;
    *(_DWORD *)(this + 56) = 0;
  }
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t awd::metrics::LBRSessionStatistics::MergePartialFromCodedStream(awd::metrics::LBRSessionStatistics *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  int v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  _BYTE *v25;
  unsigned int v26;
  _BYTE *v27;
  unsigned int v28;
  _BYTE *v29;
  unsigned int v30;
  _BYTE *v31;
  unsigned int v32;
  _BYTE *v33;
  unsigned int v34;
  _BYTE *v35;
  unsigned int v36;
  _BYTE *v37;
  unsigned int v38;
  _BYTE *v39;
  unsigned int v40;
  _BYTE *v41;
  unsigned int v42;
  unsigned __int8 *v43;
  uint64_t result;
  unsigned int v45;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v10 < v9 && (*v10 & 0x80000000) == 0)
        {
          *v4 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)a2 + 1) = v11;
LABEL_38:
          v12 = *((_DWORD *)this + 16) | 1;
          *((_DWORD *)this + 16) = v12;
          if ((unint64_t)v11 < v9 && *v11 == 18)
          {
            *((_QWORD *)a2 + 1) = v11 + 1;
            goto LABEL_41;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if ((_DWORD)result)
        {
          v11 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
          goto LABEL_38;
        }
        break;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_32;
        v12 = *((_DWORD *)this + 16);
LABEL_41:
        *((_DWORD *)this + 16) = v12 | 2;
        if (*((_QWORD *)this + 2) == v5)
        {
          v24 = (_QWORD *)operator new();
          v24[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          *((_QWORD *)this + 2) = v24;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v25 = (_BYTE *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v25 >= v13 || *v25 != 24)
          continue;
        v14 = v25 + 1;
        *((_QWORD *)a2 + 1) = v14;
LABEL_47:
        v45 = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45);
          if (!(_DWORD)result)
            return result;
          v26 = v45;
        }
        else
        {
          v26 = *v14;
          *((_QWORD *)a2 + 1) = v14 + 1;
        }
        if (v26 <= 4)
        {
          *((_DWORD *)this + 16) |= 4u;
          *((_DWORD *)this + 6) = v26;
        }
        v27 = (_BYTE *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v27 >= v15 || *v27 != 32)
          continue;
        v16 = v27 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_57:
        v45 = 0;
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45);
          if (!(_DWORD)result)
            return result;
          v28 = v45;
          v29 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v28 = *v16;
          v29 = v16 + 1;
          *((_QWORD *)a2 + 1) = v29;
        }
        *((_DWORD *)this + 7) = v28;
        *((_DWORD *)this + 16) |= 8u;
        if ((unint64_t)v29 >= v15 || *v29 != 40)
          continue;
        v17 = v29 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_65:
        v45 = 0;
        if ((unint64_t)v17 >= v15 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45);
          if (!(_DWORD)result)
            return result;
          v30 = v45;
          v31 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v30 = *v17;
          v31 = v17 + 1;
          *((_QWORD *)a2 + 1) = v31;
        }
        *((_DWORD *)this + 8) = v30;
        *((_DWORD *)this + 16) |= 0x10u;
        if ((unint64_t)v31 >= v15 || *v31 != 48)
          continue;
        v18 = v31 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_73:
        v45 = 0;
        if ((unint64_t)v18 >= v15 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45);
          if (!(_DWORD)result)
            return result;
          v32 = v45;
          v33 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v32 = *v18;
          v33 = v18 + 1;
          *((_QWORD *)a2 + 1) = v33;
        }
        *((_DWORD *)this + 9) = v32;
        *((_DWORD *)this + 16) |= 0x20u;
        if ((unint64_t)v33 >= v15 || *v33 != 56)
          continue;
        v19 = v33 + 1;
        *((_QWORD *)a2 + 1) = v19;
LABEL_81:
        v45 = 0;
        if ((unint64_t)v19 >= v15 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45);
          if (!(_DWORD)result)
            return result;
          v34 = v45;
          v35 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v34 = *v19;
          v35 = v19 + 1;
          *((_QWORD *)a2 + 1) = v35;
        }
        *((_DWORD *)this + 10) = v34;
        *((_DWORD *)this + 16) |= 0x40u;
        if ((unint64_t)v35 >= v15 || *v35 != 64)
          continue;
        v20 = v35 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_89:
        v45 = 0;
        if ((unint64_t)v20 >= v15 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45);
          if (!(_DWORD)result)
            return result;
          v36 = v45;
          v37 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v36 = *v20;
          v37 = v20 + 1;
          *((_QWORD *)a2 + 1) = v37;
        }
        *((_DWORD *)this + 11) = v36;
        *((_DWORD *)this + 16) |= 0x80u;
        if ((unint64_t)v37 >= v15 || *v37 != 72)
          continue;
        v21 = v37 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_97:
        v45 = 0;
        if ((unint64_t)v21 >= v15 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45);
          if (!(_DWORD)result)
            return result;
          v38 = v45;
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v38 = *v21;
          v39 = v21 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *((_DWORD *)this + 12) = v38;
        *((_DWORD *)this + 16) |= 0x100u;
        if ((unint64_t)v39 >= v15 || *v39 != 80)
          continue;
        v22 = v39 + 1;
        *((_QWORD *)a2 + 1) = v22;
LABEL_105:
        v45 = 0;
        if ((unint64_t)v22 >= v15 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45);
          if (!(_DWORD)result)
            return result;
          v40 = v45;
          v41 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v40 = *v22;
          v41 = v22 + 1;
          *((_QWORD *)a2 + 1) = v41;
        }
        *((_DWORD *)this + 13) = v40;
        *((_DWORD *)this + 16) |= 0x200u;
        if ((unint64_t)v41 >= v15 || *v41 != 88)
          continue;
        v23 = v41 + 1;
        *((_QWORD *)a2 + 1) = v23;
LABEL_113:
        v45 = 0;
        if ((unint64_t)v23 >= v15 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45);
          if (!(_DWORD)result)
            return result;
          v42 = v45;
          v43 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v42 = *v23;
          v43 = (unsigned __int8 *)(v23 + 1);
          *((_QWORD *)a2 + 1) = v43;
        }
        *((_DWORD *)this + 14) = v42;
        *((_DWORD *)this + 16) |= 0x400u;
        if (v43 != (unsigned __int8 *)v15 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_47;
      case 4u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_57;
      case 5u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_65;
      case 6u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_73;
      case 7u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_81;
      case 8u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_89;
      case 9u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_97;
      case 0xAu:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_105;
      case 0xBu:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_113;
      default:
        v8 = TagFallback & 7;
LABEL_32:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::LBRSessionStatistics::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;

  v5 = (unsigned int *)this;
  v6 = *(_DWORD *)(this + 64);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = v5[16];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = v5[16];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[6], (uint64_t)a2, a4);
  v6 = v5[16];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[7], (uint64_t)a2, a4);
  v6 = v5[16];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[8], (uint64_t)a2, a4);
  v6 = v5[16];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[9], (uint64_t)a2, a4);
  v6 = v5[16];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v5[10], (uint64_t)a2, a4);
  v6 = v5[16];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v5[11], (uint64_t)a2, a4);
  v6 = v5[16];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v5[12], (uint64_t)a2, a4);
  v6 = v5[16];
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v5[14], (uint64_t)a2, a4);
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v5[13], (uint64_t)a2, a4);
  if ((v5[16] & 0x400) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v5[14], (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::LBRSessionStatistics::ByteSize(awd::metrics::LBRSessionStatistics *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  int v27;

  v2 = *((_DWORD *)this + 16);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_59;
  }
  if ((v2 & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    v2 = *((_DWORD *)this + 16);
    if ((v2 & 2) == 0)
      goto LABEL_16;
  }
  else
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_16;
  }
  v4 = *((_QWORD *)this + 2);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v2 = *((_DWORD *)this + 16);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 1;
  }
  if (v6 < 0)
    v5 = v7;
  v3 = (v3 + v9 + v5 + 1);
LABEL_16:
  if ((v2 & 4) != 0)
  {
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v10 & 0x80000000) != 0)
    {
      v11 = 10;
    }
    else if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
      v2 = *((_DWORD *)this + 16);
    }
    else
    {
      v11 = 1;
    }
    v3 = (v3 + v11 + 1);
    if ((v2 & 8) == 0)
    {
LABEL_18:
      if ((v2 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_35;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_18;
  }
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if ((v12 & 0x80000000) != 0)
  {
    v13 = 10;
  }
  else if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
    v2 = *((_DWORD *)this + 16);
  }
  else
  {
    v13 = 1;
  }
  v3 = (v3 + v13 + 1);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_35:
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if ((v14 & 0x80000000) != 0)
  {
    v15 = 10;
  }
  else if (v14 >= 0x80)
  {
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    v2 = *((_DWORD *)this + 16);
  }
  else
  {
    v15 = 1;
  }
  v3 = (v3 + v15 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_41:
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
  if ((v16 & 0x80000000) != 0)
  {
    v17 = 11;
  }
  else if (v16 >= 0x80)
  {
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16) + 1;
    v2 = *((_DWORD *)this + 16);
  }
  else
  {
    v17 = 2;
  }
  v3 = (v17 + v3);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0)
      goto LABEL_59;
    goto LABEL_53;
  }
LABEL_47:
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
  if ((v18 & 0x80000000) != 0)
  {
    v19 = 11;
  }
  else if (v18 >= 0x80)
  {
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18) + 1;
    v2 = *((_DWORD *)this + 16);
  }
  else
  {
    v19 = 2;
  }
  v3 = (v19 + v3);
  if ((v2 & 0x80) != 0)
  {
LABEL_53:
    v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
    if ((v20 & 0x80000000) != 0)
    {
      v21 = 11;
    }
    else if (v20 >= 0x80)
    {
      v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20) + 1;
      v2 = *((_DWORD *)this + 16);
    }
    else
    {
      v21 = 2;
    }
    v3 = (v21 + v3);
  }
LABEL_59:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_82;
  if ((v2 & 0x100) != 0)
  {
    v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
    if ((v22 & 0x80000000) != 0)
    {
      v23 = 11;
    }
    else if (v22 >= 0x80)
    {
      v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22) + 1;
      v2 = *((_DWORD *)this + 16);
    }
    else
    {
      v23 = 2;
    }
    v3 = (v23 + v3);
    if ((v2 & 0x200) == 0)
    {
LABEL_62:
      if ((v2 & 0x400) == 0)
        goto LABEL_82;
      goto LABEL_76;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_62;
  }
  v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
  if ((v24 & 0x80000000) != 0)
  {
    v25 = 11;
  }
  else if (v24 >= 0x80)
  {
    v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24) + 1;
    v2 = *((_DWORD *)this + 16);
  }
  else
  {
    v25 = 2;
  }
  v3 = (v25 + v3);
  if ((v2 & 0x400) != 0)
  {
LABEL_76:
    v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
    if ((v26 & 0x80000000) != 0)
    {
      v27 = 11;
    }
    else if (v26 >= 0x80)
    {
      v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26) + 1;
    }
    else
    {
      v27 = 2;
    }
    v3 = (v27 + v3);
  }
LABEL_82:
  *((_DWORD *)this + 15) = v3;
  return v3;
}

void awd::metrics::LBRSessionStatistics::CheckTypeAndMergeFrom(awd::metrics::LBRSessionStatistics *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  const std::string *v8;
  std::string *v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _BYTE v17[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  v4 = *((_DWORD *)lpsrc + 16);
  if (!(_BYTE)v4)
    goto LABEL_14;
  if ((v4 & 1) != 0)
  {
    v7 = *((_QWORD *)lpsrc + 1);
    *((_DWORD *)this + 16) |= 1u;
    *((_QWORD *)this + 1) = v7;
    v4 = *((_DWORD *)lpsrc + 16);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0)
        goto LABEL_8;
      goto LABEL_24;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  v8 = (const std::string *)*((_QWORD *)lpsrc + 2);
  *((_DWORD *)this + 16) |= 2u;
  v9 = (std::string *)*((_QWORD *)this + 2);
  if (v9 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v9 = (std::string *)operator new();
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 2) = v9;
  }
  std::string::operator=(v9, v8);
  v4 = *((_DWORD *)lpsrc + 16);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_24:
  v10 = *((_DWORD *)lpsrc + 6);
  if (v10 >= 5)
    __assert_rtn("set_sessionresult", "CATM.pb.h", 19996, "::awd::metrics::LBRSessionStatistics_SessionResult_IsValid(value)");
  *((_DWORD *)this + 16) |= 4u;
  *((_DWORD *)this + 6) = v10;
  v4 = *((_DWORD *)lpsrc + 16);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v11 = *((_DWORD *)lpsrc + 7);
  *((_DWORD *)this + 16) |= 8u;
  *((_DWORD *)this + 7) = v11;
  v4 = *((_DWORD *)lpsrc + 16);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
LABEL_28:
    v13 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 16) |= 0x20u;
    *((_DWORD *)this + 9) = v13;
    v4 = *((_DWORD *)lpsrc + 16);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_27:
  v12 = *((_DWORD *)lpsrc + 8);
  *((_DWORD *)this + 16) |= 0x10u;
  *((_DWORD *)this + 8) = v12;
  v4 = *((_DWORD *)lpsrc + 16);
  if ((v4 & 0x20) != 0)
    goto LABEL_28;
LABEL_11:
  if ((v4 & 0x40) == 0)
    goto LABEL_12;
LABEL_29:
  v14 = *((_DWORD *)lpsrc + 10);
  *((_DWORD *)this + 16) |= 0x40u;
  *((_DWORD *)this + 10) = v14;
  v4 = *((_DWORD *)lpsrc + 16);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    v5 = *((_DWORD *)lpsrc + 11);
    *((_DWORD *)this + 16) |= 0x80u;
    *((_DWORD *)this + 11) = v5;
    v4 = *((_DWORD *)lpsrc + 16);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0)
    return;
  if ((v4 & 0x100) != 0)
  {
    v15 = *((_DWORD *)lpsrc + 12);
    *((_DWORD *)this + 16) |= 0x100u;
    *((_DWORD *)this + 12) = v15;
    v4 = *((_DWORD *)lpsrc + 16);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0)
        return;
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  v16 = *((_DWORD *)lpsrc + 13);
  *((_DWORD *)this + 16) |= 0x200u;
  *((_DWORD *)this + 13) = v16;
  if ((*((_DWORD *)lpsrc + 16) & 0x400) != 0)
  {
LABEL_18:
    v6 = *((_DWORD *)lpsrc + 14);
    *((_DWORD *)this + 16) |= 0x400u;
    *((_DWORD *)this + 14) = v6;
  }
}

void sub_1BEE9A1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::LBRSessionStatistics::IsInitialized(awd::metrics::LBRSessionStatistics *this)
{
  return 1;
}

_QWORD *awd::metrics::LBRSessionStatistics::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.LBRSessionStatistics");
}

uint64_t awd::metrics::ATM_Registration_Attempt::GetCachedSize(awd::metrics::ATM_Registration_Attempt *this)
{
  return *((unsigned int *)this + 38);
}

uint64_t awd::metrics::ATM_Registration_Result::GetCachedSize(awd::metrics::ATM_Registration_Result *this)
{
  return *((unsigned int *)this + 52);
}

uint64_t awd::metrics::ATM_CallAttemptEvent::GetCachedSize(awd::metrics::ATM_CallAttemptEvent *this)
{
  return *((unsigned int *)this + 65);
}

uint64_t awd::metrics::ATM_CallConnectEvent::GetCachedSize(awd::metrics::ATM_CallConnectEvent *this)
{
  return *((unsigned int *)this + 58);
}

uint64_t awd::metrics::ATM_CallEndEvent_myreason::GetCachedSize(awd::metrics::ATM_CallEndEvent_myreason *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t awd::metrics::ATM_CallEndEvent_handover::GetCachedSize(awd::metrics::ATM_CallEndEvent_handover *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t awd::metrics::ATM_CallEndEvent::GetCachedSize(awd::metrics::ATM_CallEndEvent *this)
{
  return *((unsigned int *)this + 167);
}

uint64_t awd::metrics::BchannelTransmitStatistics::GetCachedSize(awd::metrics::BchannelTransmitStatistics *this)
{
  return *((unsigned int *)this + 23);
}

uint64_t awd::metrics::BchannelReceiveStatistics::GetCachedSize(awd::metrics::BchannelReceiveStatistics *this)
{
  return *((unsigned int *)this + 23);
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::GetCachedSize(awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::GetCachedSize(awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::GetCachedSize(awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  return *((unsigned int *)this + 24);
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::GetCachedSize(awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  return *((unsigned int *)this + 24);
}

uint64_t awd::metrics::MetricATM_SoundUMB_State::GetCachedSize(awd::metrics::MetricATM_SoundUMB_State *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t awd::metrics::ATM_signaling_message::GetCachedSize(awd::metrics::ATM_signaling_message *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t awd::metrics::conference_call_event::GetCachedSize(awd::metrics::conference_call_event *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t awd::metrics::commCenterIMSSignallingDeferral::GetCachedSize(awd::metrics::commCenterIMSSignallingDeferral *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t awd::metrics::LBRSessionStatistics::GetCachedSize(awd::metrics::LBRSessionStatistics *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Clear<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(int *)(result + 8) >= 1)
  {
    v1 = 0;
    do
    {
      v2 = *(_QWORD *)(*(_QWORD *)result + 8 * v1);
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v2 = 0;
        *(_BYTE *)(v2 + 23) = 0;
      }
      ++v1;
    }
    while (v1 < *(int *)(result + 8));
  }
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(int *a1)
{
  uint64_t v2;
  uint64_t result;

  if (a1[3] >= 1)
  {
    v2 = 0;
    do
    {
      wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::Delete();
      ++v2;
    }
    while (v2 < a1[3]);
  }
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    JUMPOUT(0x1C3B870E8);
  return result;
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::ATM_CallEndEvent_myreason>::TypeHandler>(uint64_t *a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = *((_DWORD *)a1 + 3);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*a1 + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)a1 + 3);
      }
    }
  }
  result = *a1;
  if (*a1)
    JUMPOUT(0x1C3B870E8);
  return result;
}

_DWORD *wireless_diagnostics::google::protobuf::RepeatedField<BOOL>::Reserve(_DWORD *result, int a2)
{
  int v2;
  _DWORD *v3;
  const void *v4;
  int v5;
  int v6;

  v2 = result[3];
  if (v2 < a2)
  {
    v3 = result;
    v4 = *(const void **)result;
    v5 = 2 * v2;
    if (v5 <= a2)
      v5 = a2;
    if (v5 <= 4)
      v6 = 4;
    else
      v6 = v5;
    v3[3] = v6;
    result = (_DWORD *)operator new[]();
    *(_QWORD *)v3 = result;
    if (v4)
    {
      memcpy(result, v4, (int)v3[2]);
      JUMPOUT(0x1C3B870E8);
    }
  }
  return result;
}

void _GLOBAL__sub_I_CATM_pb_cc(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  awd::metrics::ATM_Registration_Attempt *v4;
  awd::metrics::ATM_Registration_Result *v5;
  uint64_t v6;
  uint64_t v7;
  awd::metrics::ATM_CallConnectEvent *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);

  if ((_MergedGlobals_2 & 1) == 0)
  {
    LOBYTE(_MergedGlobals_2) = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ipTelephony/Source/Daemon/Core/AWD/cpp/CATM.pb.cc", a4);
    v4 = (awd::metrics::ATM_Registration_Attempt *)operator new();
    *(_QWORD *)v4 = &off_1E78BF090;
    awd::metrics::ATM_Registration_Attempt::SharedCtor(v4);
    qword_1ED70E918 = (uint64_t)v4;
    v5 = (awd::metrics::ATM_Registration_Result *)operator new();
    awd::metrics::ATM_Registration_Result::ATM_Registration_Result(v5);
    qword_1ED70E920 = v6;
    v7 = operator new();
    *(_QWORD *)v7 = &off_1E78BF180;
    *(_OWORD *)(v7 + 192) = 0u;
    *(_DWORD *)(v7 + 208) = 0;
    awd::metrics::ATM_CallAttemptEvent::SharedCtor((awd::metrics::ATM_CallAttemptEvent *)v7);
    qword_1ED70E928 = v7;
    v8 = (awd::metrics::ATM_CallConnectEvent *)operator new();
    *(_QWORD *)v8 = &off_1E78BF1F8;
    awd::metrics::ATM_CallConnectEvent::SharedCtor(v8);
    qword_1ED70E930 = (uint64_t)v8;
    v9 = operator new();
    *(_QWORD *)v9 = &off_1E78BF360;
    *(_DWORD *)(v9 + 280) = 0;
    *(_OWORD *)(v9 + 264) = 0u;
    *(_DWORD *)(v9 + 440) = 0;
    *(_OWORD *)(v9 + 424) = 0u;
    *(_OWORD *)(v9 + 512) = 0u;
    *(_DWORD *)(v9 + 528) = 0;
    *(_OWORD *)(v9 + 536) = 0u;
    *(_OWORD *)(v9 + 560) = 0u;
    *(_DWORD *)(v9 + 576) = 0;
    awd::metrics::ATM_CallEndEvent::SharedCtor((awd::metrics::ATM_CallEndEvent *)v9);
    qword_1ED70E938 = v9;
    v10 = operator new();
    v11 = MEMORY[0x1E0DE8338];
    *(_QWORD *)v10 = &off_1E78BF270;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 16) = v11;
    *(_QWORD *)(v10 + 24) = v11;
    *(_QWORD *)(v10 + 32) = v11;
    *(_DWORD *)(v10 + 48) = 0;
    qword_1ED70E940 = v10;
    v12 = operator new();
    *(_QWORD *)v12 = &off_1E78BF2E8;
    *(_DWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 12) = 0;
    *(_QWORD *)(v12 + 16) = 0;
    qword_1ED70E948 = v12;
    v13 = operator new();
    *(_QWORD *)(v13 + 36) = 0;
    *(_DWORD *)(v13 + 44) = 0;
    *(_QWORD *)v13 = &off_1E78BF3D8;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_BYTE *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 48) = v11;
    *(_QWORD *)(v13 + 92) = 0;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_DWORD *)(v13 + 88) = 0;
    qword_1ED70E950 = v13;
    v14 = operator new();
    *(_QWORD *)(v14 + 36) = 0;
    *(_DWORD *)(v14 + 44) = 0;
    *(_QWORD *)v14 = &off_1E78BF450;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_BYTE *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 48) = v11;
    *(_QWORD *)(v14 + 92) = 0;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_DWORD *)(v14 + 88) = 0;
    qword_1ED70E958 = v14;
    v15 = operator new();
    *(_QWORD *)v15 = &off_1E78BF4C8;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_DWORD *)(v15 + 72) = 0;
    qword_1ED70E960 = v15;
    v16 = operator new();
    *(_QWORD *)v16 = &off_1E78BF540;
    *(_OWORD *)(v16 + 8) = 0u;
    *(_OWORD *)(v16 + 24) = 0u;
    *(_OWORD *)(v16 + 40) = 0u;
    *(_OWORD *)(v16 + 56) = 0u;
    *(_DWORD *)(v16 + 72) = 0;
    qword_1ED70E968 = v16;
    v17 = operator new();
    *(_QWORD *)v17 = &off_1E78BF5B8;
    *(_OWORD *)(v17 + 8) = 0u;
    *(_OWORD *)(v17 + 24) = 0u;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    qword_1ED70E970 = v17;
    v18 = operator new();
    *(_QWORD *)v18 = &off_1E78BF630;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *(_OWORD *)(v18 + 88) = 0u;
    qword_1ED70E978 = v18;
    v19 = operator new();
    *(_QWORD *)(v19 + 36) = 0;
    *(_QWORD *)v19 = &off_1E78BF6A8;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = 0;
    *(_BYTE *)(v19 + 32) = 0;
    qword_1ED70E980 = v19;
    v20 = operator new();
    *(_QWORD *)v20 = &off_1E78BF720;
    *(_QWORD *)(v20 + 8) = 0;
    *(_QWORD *)(v20 + 16) = v11;
    *(_QWORD *)(v20 + 24) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v20 + 32) = v11;
    *(_QWORD *)(v20 + 40) = 0;
    *(_QWORD *)(v20 + 64) = 0;
    *(_QWORD *)(v20 + 48) = v11;
    *(_QWORD *)(v20 + 56) = v11;
    *(_DWORD *)(v20 + 72) = 0;
    qword_1ED70E988 = v20;
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E78BF798;
    v21[1] = 0;
    v21[2] = v11;
    v21[3] = 1;
    v21[4] = v11;
    v21[5] = 0;
    qword_1ED70E990 = (uint64_t)v21;
    v22 = operator new();
    *(_QWORD *)v22 = &off_1E78BF810;
    *(_OWORD *)(v22 + 8) = 0u;
    *(_OWORD *)(v22 + 24) = 0u;
    *(_QWORD *)(v22 + 40) = 0;
    qword_1ED70E998 = v22;
    v23 = operator new();
    *(_QWORD *)v23 = &off_1E78BF888;
    *(_QWORD *)(v23 + 8) = 0;
    *(_QWORD *)(v23 + 16) = v11;
    *(_QWORD *)(v23 + 60) = 0;
    *(_OWORD *)(v23 + 24) = 0u;
    *(_OWORD *)(v23 + 40) = 0u;
    *(_DWORD *)(v23 + 56) = 0;
    qword_1ED70E9A0 = v23;
    wireless_diagnostics::google::protobuf::internal::OnShutdown((wireless_diagnostics::google::protobuf::internal *)awd::metrics::protobuf_ShutdownFile_CATM_2eproto, v24);
  }
}

uint64_t logBytes@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char v9;
  _OWORD v10[4];
  void *__p[2];
  __int128 v12;
  __int128 v13;
  _OWORD v14[9];
  uint64_t v15;
  char v16;

  v15 = 0;
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  memset(v10, 0, sizeof(v10));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      *(_DWORD *)((char *)v10 + *(_QWORD *)(*(_QWORD *)&v10[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v10
                                                                                        + *(_QWORD *)(*(_QWORD *)&v10[0] - 24)
                                                                                        + 8) & 0xFFFFFFB5 | 8;
      v9 = 48;
      v6 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, &v9);
      *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 2;
      v7 = (_QWORD *)std::ostream::operator<<();
      v16 = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v16, 1);
      ++v4;
    }
    while (v4 != v5);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10 + 8, a2);
  *(_QWORD *)&v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(*(_QWORD *)&v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v10[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v12) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v14);
}

void sub_1BEE9AAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1BEE9AB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void SDPBandwidth::toStream(SDPBandwidth *this, ImsOutStream *a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::string __p;
  char v10;

  v6 = (_QWORD *)*((_QWORD *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 98;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&__p, 1);
  *((_BYTE *)a2 + 17) = 0;
  v7 = (_QWORD *)*((_QWORD *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&__p, 1);
  *((_BYTE *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)&SDPBandwidth::bwTypeLookup + *((unsigned int *)this + 3));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  v8 = (_QWORD *)*((_QWORD *)a2 + 1);
  v10 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v10, 1);
  *((_BYTE *)a2 + 17) = 0;
  SDPBandwidth::bandwidth(this, a3);
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEE9AC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t SDPBandwidth::bandwidth(SDPBandwidth *this, int a2)
{
  int v2;
  int v3;
  double v6;
  double v7;

  v2 = *((_DWORD *)this + 3);
  if ((v2 - 3) > 1)
    return *((_QWORD *)this + 3);
  if (!*((_BYTE *)this + 16))
    return 0;
  v3 = *((_DWORD *)this + 8);
  if (v3 == 1 && a2 == 0)
    return 0;
  if (v3 == 2)
    return *((_QWORD *)this + 3);
  if (v2 == 3)
  {
    v7 = 0.0125;
    goto LABEL_14;
  }
  v6 = 0.0;
  if (v2 == 4)
  {
    v7 = 0.0375;
LABEL_14:
    v6 = v7 * (double)(200 * *((unsigned __int16 *)this + 18));
  }
  return (unint64_t)(v6 * (double)*((unint64_t *)this + 3));
}

void SDPBandwidth::~SDPBandwidth(SDPBandwidth *this)
{
  JUMPOUT(0x1C3B87100);
}

void LazuliParameterHeader::LazuliParameterHeader(LazuliParameterHeader *this, const LazuliParameterHeader *a2)
{
  std::string *v4;
  __int128 v5;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E78DE938;
  v4 = (std::string *)((char *)this + 24);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)this = off_1E78BFB08;
  *((_QWORD *)this + 7) = &off_1E78B82D8;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)this + 8, *((void ***)a2 + 8), (void **)a2 + 9);
  *((_BYTE *)this + 89) = 1;
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
}

void sub_1BEE9ADE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

std::string::size_type LazuliParameterHeader::findParameterMarker(int a1, std::string *this)
{
  return std::string::find(this, 59, 0);
}

uint64_t LazuliParameterHeader::valueAndParamsAsString(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  void **v5;
  std::string::size_type v6;
  void *__p[2];
  unsigned __int8 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((_DWORD)v4)
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v10, 1);
    SipParameterMap::toStream((SipParameterMap *)(a1 + 56), (ImsOutStream *)&v10, 0, 0, 0, 0);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v11 + 1) + 8, __p);
    if ((v9 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v6 = v9;
    else
      v6 = (std::string::size_type)__p[1];
    std::string::append(a2, (const std::string::value_type *)v5, v6);
    if ((char)v9 < 0)
      operator delete(__p[0]);
    *(_QWORD *)&v10 = &off_1E78D7A10;
    if ((_BYTE)v11 && *((_QWORD *)&v10 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 8))(*((_QWORD *)&v10 + 1));
  }
  return v4;
}

void sub_1BEE9AF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  if (a18)
  {
    if (a17)
      (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *LazuliParameterHeader::encode(const std::string *this, ImsOutStream *a2)
{
  LazuliHeader::encode(this, a2);
  return SipParameterMap::toStream((SipParameterMap *)&this[2].__r_.__value_.__r.__words[1], a2, 0, 0, 0, 0);
}

uint64_t LazuliParameterHeader::decode(uint64_t a1, const std::string *a2)
{
  std::string::size_type v4;
  std::string::size_type v5;
  uint64_t v6;
  std::string::size_type size;
  std::string v9;
  std::string __str;
  std::string __p;
  char v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  memset(&__p, 0, sizeof(__p));
  memset(&__str, 0, sizeof(__str));
  if (v4 == -1)
  {
    std::string::operator=(&__p, a2);
  }
  else
  {
    v5 = v4;
    std::string::basic_string(&v9, a2, 0, v4, (std::allocator<char> *)&v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v9;
    std::string::basic_string(&v9, a2, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
    __str = v9;
  }
  v6 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 48))(a1, &__p);
  if ((_DWORD)v6)
  {
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
      SipParameterMap::fromString(a1 + 56, &__str, 0, 0);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BEE9B0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::weak_ptr<WakeOnWifiAssertion>::~weak_ptr(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void WakeOnWifiAssertion::WakeOnWifiAssertion(WakeOnWifiAssertion *this)
{
  uint64_t v2;
  uint64_t v3;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.wow");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_1E78BFB90;
  *((_QWORD *)this + 13) = 0;
  v2 = WiFiManagerClientCreate();
  *((_QWORD *)this + 13) = v2;
  if (v2)
  {
    WiFiManagerClientSetWoWState();
    v3 = (*(uint64_t (**)(WakeOnWifiAssertion *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(WakeOnWifiAssertion *, uint64_t))(*(_QWORD *)this + 16))(this, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Enabled wake on wifi", 20);
  }
  else
  {
    v3 = (*(uint64_t (**)(WakeOnWifiAssertion *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(WakeOnWifiAssertion *, uint64_t))(*(_QWORD *)this + 16))(this, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Failed to enable wake on wifi", 29);
  }
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
}

void sub_1BEE9B280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void WakeOnWifiAssertion::~WakeOnWifiAssertion(WakeOnWifiAssertion *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78BFB90;
  if (*((_QWORD *)this + 13))
  {
    WiFiManagerClientSetWoWState();
    CFRelease(*((CFTypeRef *)this + 13));
    *((_QWORD *)this + 13) = 0;
    v2 = (*(uint64_t (**)(WakeOnWifiAssertion *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(WakeOnWifiAssertion *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Disabled wake on wifi", 21);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
  }
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  WakeOnWifiAssertion::~WakeOnWifiAssertion(this);
  JUMPOUT(0x1C3B87100);
}

void WakeOnWifiAssertion::get(WakeOnWifiAssertion *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;

  {
    __cxa_atexit(MEMORY[0x1E0DE4AB8], &WakeOnWifiAssertion::get(void)::creationMutex, &dword_1BEDF4000);
  }
  std::mutex::lock(&WakeOnWifiAssertion::get(void)::creationMutex);
  *a2 = 0;
  a2[1] = 0;
  if (qword_1EF57C700
    && (v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1EF57C700), (a2[1] = v4) != 0)
    && (v5 = WakeOnWifiAssertion::_weak, *a2 = WakeOnWifiAssertion::_weak, v5))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Wake on wifi has ", 17);
    *(_BYTE *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" holders", 8);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
  }
  else
  {
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a2);
    v7 = (char *)operator new(0x88uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_1E78BFC08;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    WakeOnWifiAssertion::WakeOnWifiAssertion((WakeOnWifiAssertion *)(v7 + 24));
    *((_QWORD *)v7 + 3) = &off_1E78BFC58;
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = (std::__shared_weak_count *)qword_1EF57C700;
    WakeOnWifiAssertion::_weak = (uint64_t)(v7 + 24);
    qword_1EF57C700 = (uint64_t)v7;
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
    *a2 = v7 + 24;
    a2[1] = v7;
  }
  std::mutex::unlock(&WakeOnWifiAssertion::get(void)::creationMutex);
}

void sub_1BEE9B580(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  std::mutex::unlock(&WakeOnWifiAssertion::get(void)::creationMutex);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<WakeOnWifiAssertion::get(void)::WakeOnWifiAssertionWrapper,std::allocator<WakeOnWifiAssertion::get(void)::WakeOnWifiAssertionWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BFC08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WakeOnWifiAssertion::get(void)::WakeOnWifiAssertionWrapper,std::allocator<WakeOnWifiAssertion::get(void)::WakeOnWifiAssertionWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BFC08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<WakeOnWifiAssertion::get(void)::WakeOnWifiAssertionWrapper,std::allocator<WakeOnWifiAssertion::get(void)::WakeOnWifiAssertionWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void WakeOnWifiAssertion::get(void)::WakeOnWifiAssertionWrapper::~WakeOnWifiAssertionWrapper(WakeOnWifiAssertion *a1)
{
  WakeOnWifiAssertion::~WakeOnWifiAssertion(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t _GLOBAL__sub_I_WakeOnWifiAssertion_cpp()
{
  return __cxa_atexit((void (*)(void *))std::weak_ptr<WakeOnWifiAssertion>::~weak_ptr, &WakeOnWifiAssertion::_weak, &dword_1BEDF4000);
}

uint64_t isPhoneNumber(unsigned __int8 *a1)
{
  char v1;
  _BYTE *v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  unsigned int v7;

  v1 = a1[23];
  if (v1 < 0)
  {
    if (!*((_QWORD *)a1 + 1))
    {
LABEL_14:
      v1 = 0;
      return v1 & 1;
    }
    v2 = *(_BYTE **)a1;
  }
  else
  {
    v2 = a1;
    if (!a1[23])
      return v1 & 1;
  }
  if (*v2 == 43 || (v1 >= 0 ? (v3 = a1[23]) : (v3 = *((_QWORD *)a1 + 1)), !v3))
  {
    v1 = 1;
    return v1 & 1;
  }
  v4 = *(unsigned __int8 **)a1;
  if (v1 >= 0)
    v4 = a1;
  if (*v4 - 97 < 0x1A)
    goto LABEL_14;
  v6 = 0;
  v1 = 0;
  do
  {
    if (v4[v6] - 65 < 0x1A)
      break;
    v1 = v6 + 1 >= v3;
    if (v3 - 1 == v6)
      break;
    v7 = v4[++v6] - 97;
  }
  while (v7 >= 0x1A);
  return v1 & 1;
}

BOOL SipUri::isBarred(SipUri *this)
{
  _BOOL8 result;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;

  result = SipUri::isSipUri(this);
  if ((_DWORD)result)
  {
    v3 = (_QWORD *)((char *)this + 16);
    if (*((char *)this + 39) < 0)
    {
      v4 = *((_QWORD *)this + 3);
      if (!v4)
        return 0;
      v3 = (_QWORD *)*v3;
    }
    else
    {
      v4 = *((unsigned __int8 *)this + 39);
      if (!*((_BYTE *)this + 39))
        return 0;
    }
    v5 = (char *)v3 + v4;
    if (v4 >= 15)
    {
      v6 = v3;
      do
      {
        v7 = (char *)memchr(v6, 51, v4 - 14);
        if (!v7)
          break;
        if (*(_QWORD *)v7 == 0x7774656E70706733 && *(_QWORD *)(v7 + 7) == 0x67726F2E6B726F77)
          return v7 != v5 && v7 - (char *)v3 != -1;
        v6 = v7 + 1;
        v4 = v5 - (_BYTE *)v6;
      }
      while (v5 - (_BYTE *)v6 > 14);
    }
    v7 = v5;
    return v7 != v5 && v7 - (char *)v3 != -1;
  }
  return result;
}

BOOL SipUri::isSipUri(SipUri *this)
{
  _BOOL8 v1;
  std::string __p;

  SipUri::guessScheme(this, &__p);
  v1 = isSipScheme((unsigned __int16 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v1;
}

BOOL isSipScheme(unsigned __int16 *a1)
{
  uint64_t v1;
  int v2;
  unsigned __int16 *v3;
  int v4;
  int v5;
  _DWORD *v7;

  v1 = *((unsigned __int8 *)a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)a1 + 1);
  if (v1 == 4)
  {
    if (v2 >= 0)
      v7 = a1;
    else
      v7 = *(_DWORD **)a1;
    return *v7 == 1936746867;
  }
  else
  {
    if (v1 != 3)
      return 0;
    if (v2 >= 0)
      v3 = a1;
    else
      v3 = *(unsigned __int16 **)a1;
    v4 = *v3;
    v5 = *((unsigned __int8 *)v3 + 2);
    return v4 == 26995 && v5 == 112;
  }
}

void SipUri::guessScheme(SipUri *this@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type **v2;
  std::string::size_type v3;
  char *v4;

  v2 = (const std::string::value_type **)((char *)this + 104);
  if (*((char *)this + 127) < 0)
  {
    v3 = *((_QWORD *)this + 14);
    if (v3)
    {
      std::string::__init_copy_ctor_external(a2, *v2, v3);
      return;
    }
  }
  else if (*((_BYTE *)this + 127))
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 15);
    return;
  }
  if (*((_BYTE *)this + 320))
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  if (*((char *)this + 199) < 0)
  {
    if (*((_QWORD *)this + 23))
      goto LABEL_10;
LABEL_12:
    v4 = "sip";
    goto LABEL_13;
  }
  if (!*((_BYTE *)this + 199))
    goto LABEL_12;
LABEL_10:
  v4 = "tel";
LABEL_13:
  std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

BOOL SipUri::isTelUri(SipUri *this)
{
  _BOOL8 v1;
  std::string __p;

  SipUri::guessScheme(this, &__p);
  v1 = isTelScheme((unsigned __int16 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v1;
}

BOOL isTelScheme(unsigned __int16 *a1)
{
  uint64_t v1;
  int v2;
  unsigned __int16 *v3;
  int v4;
  int v5;

  v1 = *((unsigned __int8 *)a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)a1 + 1);
  if (v1 != 3)
    return 0;
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = *(unsigned __int16 **)a1;
  v4 = *v3;
  v5 = *((unsigned __int8 *)v3 + 2);
  return v4 == 25972 && v5 == 108;
}

BOOL SipUri::isUrn(SipUri *this)
{
  _BOOL8 v1;
  std::string __p;

  SipUri::guessScheme(this, &__p);
  v1 = isUrnScheme((unsigned __int16 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v1;
}

BOOL isUrnScheme(unsigned __int16 *a1)
{
  uint64_t v1;
  int v2;
  unsigned __int16 *v3;
  int v4;
  int v5;

  v1 = *((unsigned __int8 *)a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)a1 + 1);
  if (v1 != 3)
    return 0;
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = *(unsigned __int16 **)a1;
  v4 = *v3;
  v5 = *((unsigned __int8 *)v3 + 2);
  return v4 == 29301 && v5 == 110;
}

BOOL SipUri::isEmergencyUrn(SipUri *this)
{
  uint64_t v2;
  int v3;
  SipUri *v4;
  int v5;
  int v6;
  _BOOL8 v8;
  std::string::size_type size;
  std::string *p_p;
  int data_low;
  int v13;
  std::string __p;
  char v16;

  if (!SipUri::isUrn(this))
    return 0;
  v2 = *((unsigned __int8 *)this + 247);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)this + 29);
  if (v2 != 7)
    return 0;
  v4 = v3 >= 0 ? (SipUri *)((char *)this + 224) : (SipUri *)*((_QWORD *)this + 28);
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)((char *)v4 + 3);
  if (v5 != 1987208563 || v6 != 1701013878)
    return 0;
  std::string::basic_string(&__p, (const std::string *)((char *)this + 248), 0, 3uLL, (std::allocator<char> *)&v16);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size != 3)
  {
    v8 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v8;
LABEL_28:
    operator delete(__p.__r_.__value_.__l.__data_);
    return v8;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  data_low = LOWORD(p_p->__r_.__value_.__l.__data_);
  v13 = p_p->__r_.__value_.__s.__data_[2];
  v8 = data_low == 28531 && v13 == 115;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_28;
  return v8;
}

uint64_t SipUri::getEmergencySubservice(SipUri *this)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  char *v5;
  BOOL v6;
  unsigned int v7;
  unint64_t v9;
  BOOL v10;
  int v11;
  int v12;

  v2 = *((_BYTE *)this + 295);
  if (v2 < 0)
  {
    if (*((_QWORD *)this + 35))
      goto LABEL_3;
    return 0;
  }
  if (!*((_BYTE *)this + 295))
    return 0;
LABEL_3:
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)this + 295);
  else
    v3 = *((_QWORD *)this + 35);
  result = 6;
  v5 = (char *)this + 272;
  switch(v3)
  {
    case 4:
      if (v2 < 0)
        v5 = *(char **)v5;
      v6 = *(_DWORD *)v5 == 1701996902;
      v7 = 3;
      goto LABEL_30;
    case 6:
      if (v2 < 0)
        v5 = *(char **)v5;
      if (*(_DWORD *)v5 == 1768714096 && *((_WORD *)v5 + 2) == 25955)
      {
        result = 1;
      }
      else
      {
        v6 = (*(_DWORD *)v5 ^ 0x6972616D | *((unsigned __int16 *)v5 + 2) ^ 0x656E) == 0;
        v7 = 4;
LABEL_30:
        if (v6)
          result = v7;
        else
          result = 6;
      }
      break;
    case 8:
      if (v2 < 0)
        v5 = *(char **)v5;
      v9 = bswap64(*(_QWORD *)v5);
      v10 = v9 >= 0x6D6F756E7461696ELL;
      v11 = v9 > 0x6D6F756E7461696ELL;
      v12 = !v10;
      if (v11 == v12)
        return 5;
      else
        return 6;
    case 9:
      if (v2 < 0)
        v5 = *(char **)v5;
      v6 = (*(_QWORD *)v5 ^ 0x636E616C75626D61 | v5[8] ^ 0x65) == 0;
      v7 = 2;
      goto LABEL_30;
    default:
      return result;
  }
  return result;
}

void SipUri::setNamespaceStr(uint64_t a1, const std::string *a2)
{
  std::string::size_type v4;
  void **v5;
  std::string v6;
  char v7;

  SipUri::makeUrn((SipUri *)a1);
  std::string::operator=((std::string *)(a1 + 248), a2);
  v4 = std::string::find((const std::string *)(a1 + 248), 46, 0);
  if (v4 == -1)
  {
    if (*(char *)(a1 + 295) < 0)
    {
      **(_BYTE **)(a1 + 272) = 0;
      *(_QWORD *)(a1 + 280) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 272) = 0;
      *(_BYTE *)(a1 + 295) = 0;
    }
  }
  else
  {
    std::string::basic_string(&v6, (const std::string *)(a1 + 248), v4 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v7);
    v5 = (void **)(a1 + 272);
    if (*(char *)(a1 + 295) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = *(_OWORD *)&v6.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 288) = *((_QWORD *)&v6.__r_.__value_.__l + 2);
  }
}

void SipHop::~SipHop(SipHop *this)
{
  *(_QWORD *)this = off_1E78B8288;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHost::~SipHost((void **)this + 1);
}

uint64_t SipUri::SipUri(uint64_t a1, uint64_t a2)
{
  _OWORD v4[3];
  uint64_t v5;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_BYTE *)(a1 + 97) = 1;
  *(_QWORD *)a1 = &off_1E78BFCE8;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 328) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 368) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  *(_BYTE *)(a1 + 96) = 1;
  *(_WORD *)(a1 + 360) = 257;
  *(_WORD *)(a1 + 400) = 257;
  v5 = 0;
  memset(v4, 0, sizeof(v4));
  SipHost::SipHost((uint64_t)v4, a2);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 32))(a1, v4);
  SipHost::~SipHost((void **)v4);
  return a1;
}

void sub_1BEE9BEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void **v4;
  void **v6;
  va_list va;

  va_start(va, a3);
  v6 = v4;
  SipHost::~SipHost((void **)va);
  *(_QWORD *)(v3 + 368) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3 + 376, *(_QWORD **)(v3 + 384));
  *(_QWORD *)(v3 + 328) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3 + 336, *(_QWORD **)(v3 + 344));
  if (*(char *)(v3 + 319) < 0)
    operator delete(*(void **)(v3 + 296));
  if (*(char *)(v3 + 295) < 0)
    operator delete(*(void **)(v3 + 272));
  if (*(char *)(v3 + 271) < 0)
    operator delete(*(void **)(v3 + 248));
  if (*(char *)(v3 + 247) < 0)
    operator delete(*(void **)(v3 + 224));
  if (*(char *)(v3 + 223) < 0)
    operator delete(*(void **)(v3 + 200));
  if (*(char *)(v3 + 199) < 0)
    operator delete(*(void **)(v3 + 176));
  if (*(char *)(v3 + 175) < 0)
    operator delete(*(void **)(v3 + 152));
  if (*(char *)(v3 + 151) < 0)
    operator delete(*(void **)(v3 + 128));
  if (*(char *)(v3 + 127) < 0)
    operator delete(*v6);
  SipHop::~SipHop((SipHop *)v3);
  _Unwind_Resume(a1);
}

uint64_t SipUri::SipUri(uint64_t a1, std::string *a2)
{
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_BYTE *)(a1 + 97) = 1;
  *(_QWORD *)a1 = &off_1E78BFCE8;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 328) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 368) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  *(_BYTE *)(a1 + 96) = 1;
  *(_WORD *)(a1 + 360) = 257;
  *(_WORD *)(a1 + 400) = 257;
  *(_BYTE *)(a1 + 320) = 0;
  SipUri::fromString(a1, a2);
  return a1;
}

void sub_1BEE9C0B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v5;
  v7 = v2;
  *(_QWORD *)(v1 + 368) = v7;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v6, *(_QWORD **)(v1 + 384));
  *(_QWORD *)(v1 + 328) = v7;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(_QWORD **)(v1 + 344));
  if (*(char *)(v1 + 319) < 0)
    operator delete(*(void **)(v1 + 296));
  if (*(char *)(v1 + 295) < 0)
    operator delete(*(void **)(v1 + 272));
  if (*(char *)(v1 + 271) < 0)
    operator delete(*(void **)(v1 + 248));
  if (*(char *)(v1 + 247) < 0)
    operator delete(*(void **)(v1 + 224));
  if (*(char *)(v1 + 223) < 0)
    operator delete(*(void **)(v1 + 200));
  if (*(char *)(v1 + 199) < 0)
    operator delete(*(void **)(v1 + 176));
  if (*(char *)(v1 + 175) < 0)
    operator delete(*(void **)(v1 + 152));
  if (*(char *)(v1 + 151) < 0)
    operator delete(*(void **)(v1 + 128));
  if (*(char *)(v1 + 127) < 0)
    operator delete(*v4);
  SipHop::~SipHop((SipHop *)v1);
  _Unwind_Resume(a1);
}

uint64_t SipUri::fromString(uint64_t a1, std::string *a2)
{
  std::string::size_type v4;
  std::string::size_type size;
  std::string::size_type v6;
  int v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string *v12;
  BOOL v13;
  std::string::size_type v14;
  std::string *v15;
  _BYTE *v16;
  char v17;
  int64_t v18;
  void **v19;
  std::string::size_type NotQuoted;
  std::string::size_type v21;
  std::string::size_type v22;
  void **v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string::size_type v26;
  void **v27;
  _DWORD *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  void **v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  std::string::size_type v35;
  void **v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string::size_type v39;
  _BOOL4 v41;
  std::string::size_type v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  std::string::size_type v47;
  std::string *p_str;
  std::string *v49;
  int v50;
  std::string v51;
  std::string __str;
  char v53;

  SipUri::clear((SipUri *)a1);
  v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v4 & 0x80u) == 0)
    v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v6 = a2->__r_.__value_.__l.__size_;
  if (!v6)
    return 0;
  if ((v4 & 0x80) == 0)
  {
    if (*((_BYTE *)&a2->__r_.__value_.__s + 23))
    {
      memset(&__str, 0, sizeof(__str));
      v7 = a2->__r_.__value_.__s.__data_[0];
      v8 = v4;
      goto LABEL_10;
    }
LABEL_14:
    v10 = 0;
LABEL_52:
    NotQuoted = ims::findNotQuoted((uint64_t *)a2, 0x3Cu);
    if (NotQuoted == -1)
    {
      v24 = 0;
      goto LABEL_58;
    }
    v21 = NotQuoted;
    v22 = std::string::find(a2, 62, NotQuoted);
    if (v22 != -1)
    {
      v10 = v22;
      std::string::basic_string(&__str, a2, 0, v21, (std::allocator<char> *)&v51);
      v23 = (void **)(a1 + 200);
      if (*(char *)(a1 + 223) < 0)
        operator delete(*v23);
      *(_OWORD *)v23 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 216) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
      ims::chomp((std::string *)(a1 + 200), "\r\n\t ", 3);
      v24 = v21 + 1;
LABEL_58:
      v25 = std::string::find(a2, 58, v24);
      if (v25 != -1)
      {
        v26 = v25;
        std::string::basic_string(&v51, a2, v24, v25 - v24, (std::allocator<char> *)&v53);
        ims::lowerCase((uint64_t)&v51, &__str);
        v27 = (void **)(a1 + 104);
        if (*(char *)(a1 + 127) < 0)
          operator delete(*v27);
        *(_OWORD *)v27 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 120) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        if (isSipScheme((unsigned __int16 *)(a1 + 104))
          || isTelScheme((unsigned __int16 *)(a1 + 104))
          || isUrnScheme((unsigned __int16 *)(a1 + 104)))
        {
          v24 = v26 + 1;
        }
        else if (*(char *)(a1 + 127) < 0)
        {
          **(_BYTE **)(a1 + 104) = 0;
          *(_QWORD *)(a1 + 112) = 0;
        }
        else
        {
          *(_BYTE *)(a1 + 104) = 0;
          *(_BYTE *)(a1 + 127) = 0;
        }
      }
      v28 = (_DWORD *)(a1 + 104);
      if (!isTelScheme((unsigned __int16 *)(a1 + 104)))
      {
        v29 = std::string::find(a2, 64, v24);
        if (v29 != -1)
        {
          v30 = v29;
          std::string::basic_string(&__str, a2, v24, v29 - v24, (std::allocator<char> *)&v51);
          v31 = (void **)(a1 + 128);
          if (*(char *)(a1 + 151) < 0)
            operator delete(*v31);
          *(_OWORD *)v31 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          *(_QWORD *)(a1 + 144) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
          v32 = std::string::find((const std::string *)(a1 + 128), 59, 0);
          if (v32 != -1)
          {
            v33 = v32;
            memset(&__str, 0, sizeof(__str));
            std::string::basic_string(&__str, (const std::string *)(a1 + 128), v32 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v51);
            SipParameterMap::fromString(a1 + 368, &__str, 0, 0);
            std::string::basic_string(&v51, (const std::string *)(a1 + 128), 0, v33, (std::allocator<char> *)&v53);
            if (*(char *)(a1 + 151) < 0)
              operator delete(*v31);
            *(_OWORD *)v31 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
            *(_QWORD *)(a1 + 144) = *((_QWORD *)&v51.__r_.__value_.__l + 2);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
          }
          v34 = std::string::find((const std::string *)(a1 + 128), 58, 0);
          if (v34 != -1)
          {
            v35 = v34;
            std::string::basic_string(&__str, (const std::string *)(a1 + 128), v34 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v51);
            v36 = (void **)(a1 + 152);
            if (*(char *)(a1 + 175) < 0)
              operator delete(*v36);
            *(_OWORD *)v36 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            *(_QWORD *)(a1 + 168) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
            std::string::basic_string(&__str, (const std::string *)(a1 + 128), 0, v35, (std::allocator<char> *)&v51);
            if (*(char *)(a1 + 151) < 0)
              operator delete(*v31);
            *(_OWORD *)v31 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            *(_QWORD *)(a1 + 144) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
            ims::removePercentEscapes(a1 + 152);
          }
          ims::removePercentEscapes(a1 + 128);
          v24 = v30 + 1;
        }
      }
      v37 = std::string::find(a2, 63, v24);
      v38 = v37;
      if (v37 != -1)
      {
        memset(&__str, 0, sizeof(__str));
        std::string::basic_string(&__str, a2, v37 + 1, v10 + ~v37, (std::allocator<char> *)&v51);
        SipParameterMap::fromString(a1 + 328, &__str, 0, 1);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v10 = v38;
      }
      v39 = std::string::find(a2, 59, v24);
      v41 = v38 == -1 || v39 < v38;
      if (v39 != -1 && v41)
      {
        v42 = v39;
        std::string::basic_string(&__str, a2, v39 + 1, v10 + ~v39, (std::allocator<char> *)&v51);
        SipParameterMap::fromString(a1 + 64, &__str, 0, 0);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v10 = v42;
      }
      memset(&__str, 0, sizeof(__str));
      std::string::basic_string(&__str, a2, v24, v10 - v24, (std::allocator<char> *)&v51);
      v43 = *(char *)(a1 + 127);
      if (v43 < 0)
      {
        if (*(_QWORD *)(a1 + 112))
        {
LABEL_100:
          if (isTelScheme((unsigned __int16 *)(a1 + 104)))
          {
            if (v43 < 0)
            {
              *(_QWORD *)(a1 + 112) = 3;
              v28 = *(_DWORD **)(a1 + 104);
            }
            else
            {
              *(_BYTE *)(a1 + 127) = 3;
            }
LABEL_128:
            *v28 = 7103860;
            v49 = (std::string *)(a1 + 176);
            std::string::operator=(v49, &__str);
            ims::removePercentEscapes((uint64_t)v49);
            goto LABEL_137;
          }
          if ((v43 & 0x80000000) == 0)
          {
LABEL_108:
            *(_BYTE *)(a1 + 127) = 3;
LABEL_136:
            *v28 = 7367027;
            SipHost::fromString(a1 + 8, &__str);
LABEL_137:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            return 1;
          }
LABEL_135:
          *(_QWORD *)(a1 + 112) = 3;
          v28 = *(_DWORD **)(a1 + 104);
          goto LABEL_136;
        }
      }
      else if (*(_BYTE *)(a1 + 127))
      {
        goto LABEL_100;
      }
      v44 = *(unsigned __int8 *)(a1 + 151);
      if (*(char *)(a1 + 151) < 0)
      {
        if (*(_QWORD *)(a1 + 136))
          goto LABEL_122;
      }
      else if (*(_BYTE *)(a1 + 151))
      {
        goto LABEL_122;
      }
      v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = __str.__r_.__value_.__l.__size_;
      if (v47 == 1)
      {
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (p_str->__r_.__value_.__s.__data_[0] == 42)
        {
          *(_BYTE *)(a1 + 320) = 1;
          goto LABEL_137;
        }
      }
LABEL_122:
      if ((v44 & 0x80) != 0)
        v44 = *(_QWORD *)(a1 + 136);
      if (!v44)
      {
        if (IpAddress::isAddress(&__str))
        {
          LOBYTE(v43) = *(_BYTE *)(a1 + 127);
        }
        else
        {
          v50 = isPhoneNumber((unsigned __int8 *)&__str);
          v43 = *(char *)(a1 + 127);
          if (v50)
          {
            if (v43 < 0)
            {
              *(_QWORD *)(a1 + 112) = 3;
              v28 = *(_DWORD **)(a1 + 104);
            }
            else
            {
              *(_BYTE *)(a1 + 127) = 3;
            }
            goto LABEL_128;
          }
        }
      }
      if ((v43 & 0x80) == 0)
        goto LABEL_108;
      goto LABEL_135;
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, "sip.parse");
    std::string::basic_string[abi:ne180100]<0>(&v51, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v45 = ImsLogger::error(ims::_logger, (uint64_t)&__str, (uint64_t)&v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v45 + 8), (uint64_t)"URI has no closing '>': ", 24);
    *(_BYTE *)(v45 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v45 + 32))(v45, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v45 + 17) = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    return 0;
  }
  if (!size)
    goto LABEL_14;
  memset(&__str, 0, sizeof(__str));
  v7 = *(unsigned __int8 *)a2->__r_.__value_.__l.__data_;
  v8 = size;
LABEL_10:
  if (v7 == 60)
  {
    v9 = v8 - 1;
    if ((v4 & 0x80) != 0)
    {
      if (*(_BYTE *)(a2->__r_.__value_.__r.__words[0] + v9) != 62)
        goto LABEL_44;
    }
    else
    {
      if (a2->__r_.__value_.__s.__data_[v9] != 62)
        goto LABEL_44;
      size = v4;
    }
    std::string::basic_string(&v51, a2, 1uLL, size - 2, (std::allocator<char> *)&v53);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v51;
  }
  else
  {
    std::string::operator=(&__str, a2);
  }
  std::string::basic_string(&v51, &__str, 0, 4uLL, (std::allocator<char> *)&v53);
  v11 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = v51.__r_.__value_.__l.__size_;
  if (v11 != 4)
  {
    v13 = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_30;
    goto LABEL_28;
  }
  v12 = (std::string *)v51.__r_.__value_.__r.__words[0];
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v51;
  v13 = LODWORD(v12->__r_.__value_.__l.__data_) == 980316789;
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (v13)
      goto LABEL_31;
LABEL_44:
    v17 = 0;
    goto LABEL_45;
  }
LABEL_30:
  operator delete(v51.__r_.__value_.__l.__data_);
  if (!v13)
    goto LABEL_44;
LABEL_31:
  v14 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = __str.__r_.__value_.__l.__size_;
  if (v14 < 5)
    goto LABEL_44;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &__str;
  else
    v15 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v16 = memchr((char *)v15->__r_.__value_.__r.__words + 4, 58, v14 - 4);
  v17 = 0;
  if (v16)
  {
    v18 = v16 - (_BYTE *)v15;
    if (v18 != -1)
    {
      SipUri::makeUrn((SipUri *)a1);
      std::string::basic_string(&v51, &__str, 4uLL, v18 - 4, (std::allocator<char> *)&v53);
      v19 = (void **)(a1 + 224);
      if (*(char *)(a1 + 247) < 0)
        operator delete(*v19);
      *(_OWORD *)v19 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 240) = *((_QWORD *)&v51.__r_.__value_.__l + 2);
      std::string::basic_string(&v51, &__str, v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v53);
      SipUri::setNamespaceStr(a1, &v51);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      v17 = 1;
    }
  }
LABEL_45:
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v17 & 1) != 0)
      return 1;
    goto LABEL_49;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if ((v17 & 1) == 0)
  {
LABEL_49:
    if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) != 0)
      v10 = a2->__r_.__value_.__l.__size_;
    else
      v10 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    goto LABEL_52;
  }
  return 1;
}

void sub_1BEE9CA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipUri::SipUri(SipUri *this, const SipUri *a2)
{
  uint64_t v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  uint64_t **v11;
  uint64_t **v12;
  std::string *v13;
  std::string *v14;

  SipHop::SipHop(this, a2);
  *(_OWORD *)(v4 + 104) = 0u;
  v5 = (std::string *)(v4 + 104);
  *(_OWORD *)(v4 + 152) = 0u;
  v6 = (std::string *)(v4 + 152);
  *(_OWORD *)(v4 + 200) = 0u;
  v7 = (std::string *)(v4 + 200);
  *(_QWORD *)v4 = &off_1E78BFCE8;
  *(_OWORD *)(v4 + 248) = 0u;
  v8 = (std::string *)(v4 + 248);
  *(_OWORD *)(v4 + 120) = 0u;
  v13 = (std::string *)(v4 + 128);
  v14 = (std::string *)(v4 + 176);
  *(_OWORD *)(v4 + 136) = 0u;
  v9 = (std::string *)(v4 + 224);
  v10 = (std::string *)(v4 + 272);
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_QWORD *)(v4 + 312) = 0;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  v11 = (uint64_t **)(v4 + 336);
  *(_QWORD *)(v4 + 344) = 0;
  *(_QWORD *)(v4 + 352) = 0;
  *(_QWORD *)(v4 + 328) = &off_1E78B82D8;
  *(_QWORD *)(v4 + 336) = v4 + 344;
  *(_WORD *)(v4 + 360) = 256;
  v12 = (uint64_t **)(v4 + 376);
  *(_QWORD *)(v4 + 384) = 0;
  *(_QWORD *)(v4 + 392) = 0;
  *(_QWORD *)(v4 + 368) = &off_1E78B82D8;
  *(_QWORD *)(v4 + 376) = v4 + 384;
  *(_WORD *)(v4 + 400) = 256;
  if ((const SipUri *)v4 == a2)
  {
    *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
    *((_BYTE *)this + 360) = *((_BYTE *)a2 + 360);
  }
  else
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 9, *((__int128 **)a2 + 9), (__int128 *)a2 + 5);
    *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v11, *((__int128 **)a2 + 42), (__int128 *)((char *)a2 + 344));
    *((_BYTE *)this + 360) = *((_BYTE *)a2 + 360);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v12, *((__int128 **)a2 + 47), (__int128 *)a2 + 24);
  }
  *((_BYTE *)this + 400) = *((_BYTE *)a2 + 400);
  std::string::operator=(v5, (const std::string *)((char *)a2 + 104));
  std::string::operator=(v14, (const std::string *)((char *)a2 + 176));
  std::string::operator=(v13, (const std::string *)((char *)a2 + 128));
  std::string::operator=(v6, (const std::string *)((char *)a2 + 152));
  std::string::operator=(v7, (const std::string *)((char *)a2 + 200));
  *((_BYTE *)this + 320) = *((_BYTE *)a2 + 320);
  std::string::operator=(v9, (const std::string *)((char *)a2 + 224));
  std::string::operator=(v8, (const std::string *)((char *)a2 + 248));
  std::string::operator=(v10, (const std::string *)((char *)a2 + 272));
}

void sub_1BEE9CC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void **a11, void **a12)
{
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;

  *(_QWORD *)(v12 + 368) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v16, *(_QWORD **)(v12 + 384));
  *(_QWORD *)(v12 + 328) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v14, *(_QWORD **)(v12 + 344));
  if (*(char *)(v12 + 319) < 0)
    operator delete(*(void **)(v12 + 296));
  if (*(char *)(v12 + 295) < 0)
    operator delete(*v20);
  if (*(char *)(v12 + 271) < 0)
    operator delete(*v19);
  if (*(char *)(v12 + 247) < 0)
    operator delete(*v18);
  if (*(char *)(v12 + 223) < 0)
    operator delete(*v17);
  if (*(char *)(v12 + 199) < 0)
    operator delete(*a12);
  if (*(char *)(v12 + 175) < 0)
    operator delete(*v15);
  if (*(char *)(v12 + 151) < 0)
    operator delete(*a11);
  if (*(char *)(v12 + 127) < 0)
    operator delete(*v13);
  SipHop::~SipHop((SipHop *)v12);
  _Unwind_Resume(a1);
}

SipUri *SipUri::operator=(SipUri *this, uint64_t a2)
{
  if ((SipUri *)a2 != this)
  {
    SipUri::clear(this);
    std::string::operator=((std::string *)((char *)this + 104), (const std::string *)(a2 + 104));
    std::string::operator=((std::string *)((char *)this + 176), (const std::string *)(a2 + 176));
    std::string::operator=((std::string *)((char *)this + 128), (const std::string *)(a2 + 128));
    std::string::operator=((std::string *)((char *)this + 152), (const std::string *)(a2 + 152));
    std::string::operator=((std::string *)((char *)this + 200), (const std::string *)(a2 + 200));
    SipHost::operator=((uint64_t)this + 8, a2 + 8);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 9, *(__int128 **)(a2 + 72), (__int128 *)(a2 + 80));
    *((_BYTE *)this + 96) = *(_BYTE *)(a2 + 96);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 42, *(__int128 **)(a2 + 336), (__int128 *)(a2 + 344));
    *((_BYTE *)this + 360) = *(_BYTE *)(a2 + 360);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 47, *(__int128 **)(a2 + 376), (__int128 *)(a2 + 384));
    *((_BYTE *)this + 400) = *(_BYTE *)(a2 + 400);
    *((_BYTE *)this + 320) = *(_BYTE *)(a2 + 320);
    std::string::operator=((std::string *)((char *)this + 224), (const std::string *)(a2 + 224));
    std::string::operator=((std::string *)((char *)this + 248), (const std::string *)(a2 + 248));
    std::string::operator=((std::string *)((char *)this + 272), (const std::string *)(a2 + 272));
  }
  return this;
}

void SipUri::clear(SipUri *this)
{
  if (*((char *)this + 127) < 0)
  {
    **((_BYTE **)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
  }
  else
  {
    *((_BYTE *)this + 104) = 0;
    *((_BYTE *)this + 127) = 0;
  }
  if (*((char *)this + 199) < 0)
  {
    **((_BYTE **)this + 22) = 0;
    *((_QWORD *)this + 23) = 0;
  }
  else
  {
    *((_BYTE *)this + 176) = 0;
    *((_BYTE *)this + 199) = 0;
  }
  if (*((char *)this + 151) < 0)
  {
    **((_BYTE **)this + 16) = 0;
    *((_QWORD *)this + 17) = 0;
  }
  else
  {
    *((_BYTE *)this + 128) = 0;
    *((_BYTE *)this + 151) = 0;
  }
  if (*((char *)this + 175) < 0)
  {
    **((_BYTE **)this + 19) = 0;
    *((_QWORD *)this + 20) = 0;
  }
  else
  {
    *((_BYTE *)this + 152) = 0;
    *((_BYTE *)this + 175) = 0;
  }
  if (*((char *)this + 223) < 0)
  {
    **((_BYTE **)this + 25) = 0;
    *((_QWORD *)this + 26) = 0;
  }
  else
  {
    *((_BYTE *)this + 200) = 0;
    *((_BYTE *)this + 223) = 0;
  }
  if (*((char *)this + 39) < 0)
  {
    **((_BYTE **)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    *((_BYTE *)this + 16) = 0;
    *((_BYTE *)this + 39) = 0;
  }
  *((_WORD *)this + 20) = 0;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 6);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 336, *((_QWORD **)this + 43));
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 42) = (char *)this + 344;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 376, *((_QWORD **)this + 48));
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 47) = (char *)this + 384;
  if (*((char *)this + 247) < 0)
  {
    **((_BYTE **)this + 28) = 0;
    *((_QWORD *)this + 29) = 0;
  }
  else
  {
    *((_BYTE *)this + 224) = 0;
    *((_BYTE *)this + 247) = 0;
  }
  if (*((char *)this + 271) < 0)
  {
    **((_BYTE **)this + 31) = 0;
    *((_QWORD *)this + 32) = 0;
  }
  else
  {
    *((_BYTE *)this + 248) = 0;
    *((_BYTE *)this + 271) = 0;
  }
  if (*((char *)this + 295) < 0)
  {
    **((_BYTE **)this + 34) = 0;
    *((_QWORD *)this + 35) = 0;
  }
  else
  {
    *((_BYTE *)this + 272) = 0;
    *((_BYTE *)this + 295) = 0;
  }
  *((_BYTE *)this + 320) = 0;
}

uint64_t SipUri::makeSipUri(uint64_t this)
{
  _DWORD *v1;

  if (*(char *)(this + 127) < 0)
  {
    *(_QWORD *)(this + 112) = 3;
    v1 = *(_DWORD **)(this + 104);
  }
  else
  {
    v1 = (_DWORD *)(this + 104);
    *(_BYTE *)(this + 127) = 3;
  }
  *v1 = 7367027;
  if (*(char *)(this + 199) < 0)
  {
    **(_BYTE **)(this + 176) = 0;
    *(_QWORD *)(this + 184) = 0;
  }
  else
  {
    *(_BYTE *)(this + 176) = 0;
    *(_BYTE *)(this + 199) = 0;
  }
  if (*(char *)(this + 247) < 0)
  {
    **(_BYTE **)(this + 224) = 0;
    *(_QWORD *)(this + 232) = 0;
  }
  else
  {
    *(_BYTE *)(this + 224) = 0;
    *(_BYTE *)(this + 247) = 0;
  }
  if (*(char *)(this + 271) < 0)
  {
    **(_BYTE **)(this + 248) = 0;
    *(_QWORD *)(this + 256) = 0;
  }
  else
  {
    *(_BYTE *)(this + 248) = 0;
    *(_BYTE *)(this + 271) = 0;
  }
  if (*(char *)(this + 295) < 0)
  {
    **(_BYTE **)(this + 272) = 0;
    *(_QWORD *)(this + 280) = 0;
  }
  else
  {
    *(_BYTE *)(this + 272) = 0;
    *(_BYTE *)(this + 295) = 0;
  }
  return this;
}

void SipUri::makeUrn(SipUri *this)
{
  _DWORD *v2;

  if (*((char *)this + 127) < 0)
  {
    *((_QWORD *)this + 14) = 3;
    v2 = (_DWORD *)*((_QWORD *)this + 13);
  }
  else
  {
    v2 = (_DWORD *)((char *)this + 104);
    *((_BYTE *)this + 127) = 3;
  }
  *v2 = 7238261;
  if (*((char *)this + 39) < 0)
  {
    **((_BYTE **)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    *((_BYTE *)this + 16) = 0;
    *((_BYTE *)this + 39) = 0;
  }
  *((_WORD *)this + 20) = 0;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 6);
  if (*((char *)this + 151) < 0)
  {
    **((_BYTE **)this + 16) = 0;
    *((_QWORD *)this + 17) = 0;
  }
  else
  {
    *((_BYTE *)this + 128) = 0;
    *((_BYTE *)this + 151) = 0;
  }
  if (*((char *)this + 175) < 0)
  {
    **((_BYTE **)this + 19) = 0;
    *((_QWORD *)this + 20) = 0;
  }
  else
  {
    *((_BYTE *)this + 152) = 0;
    *((_BYTE *)this + 175) = 0;
  }
  if (*((char *)this + 199) < 0)
  {
    **((_BYTE **)this + 22) = 0;
    *((_QWORD *)this + 23) = 0;
  }
  else
  {
    *((_BYTE *)this + 176) = 0;
    *((_BYTE *)this + 199) = 0;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 336, *((_QWORD **)this + 43));
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 42) = (char *)this + 344;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 376, *((_QWORD **)this + 48));
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 47) = (char *)this + 384;
  *((_BYTE *)this + 320) = 0;
}

BOOL SipUri::isAnonymousUri(SipUri *this)
{
  uint64_t v1;
  int v2;
  SipUri *v3;
  int v4;
  int v5;
  uint64_t v7;
  int v8;
  SipUri *v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v1 = *((unsigned __int8 *)this + 127);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)this + 14);
  if (v1 != 3)
    return 0;
  v3 = v2 >= 0 ? (SipUri *)((char *)this + 104) : (SipUri *)*((_QWORD *)this + 13);
  v4 = *(unsigned __int16 *)v3;
  v5 = *((unsigned __int8 *)v3 + 2);
  if (v4 != 26995 || v5 != 112)
    return 0;
  v7 = *((unsigned __int8 *)this + 151);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)this + 17);
  if (v7 != 9)
    return 0;
  v9 = v8 >= 0 ? (SipUri *)((char *)this + 128) : (SipUri *)*((_QWORD *)this + 16);
  v10 = *(_QWORD *)v9;
  v11 = *((unsigned __int8 *)v9 + 8);
  if (v10 != 0x756F6D796E6F6E61 || v11 != 115)
    return 0;
  v13 = *((unsigned __int8 *)this + 39);
  v14 = (char)v13;
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)this + 3);
  if (v13 != 17)
    return 0;
  v17 = (char *)*((_QWORD *)this + 2);
  v15 = (char *)this + 16;
  v16 = v17;
  if (v14 >= 0)
    v18 = v15;
  else
    v18 = v16;
  v19 = *(_QWORD *)v18;
  v20 = *((_QWORD *)v18 + 1);
  v21 = v18[16];
  return v19 == 0x756F6D796E6F6E61 && v20 == 0x696C61766E692E73 && v21 == 100;
}

BOOL SipUri::isAnonymousUser(SipUri *this)
{
  uint64_t v1;
  int v2;
  SipUri *v3;
  int v4;
  int v5;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  char *v12;

  v1 = *((unsigned __int8 *)this + 127);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)this + 14);
  if (v1 != 3)
    return 0;
  v3 = v2 >= 0 ? (SipUri *)((char *)this + 104) : (SipUri *)*((_QWORD *)this + 13);
  v4 = *(unsigned __int16 *)v3;
  v5 = *((unsigned __int8 *)v3 + 2);
  if (v4 != 26995 || v5 != 112)
    return 0;
  if (*((char *)this + 151) < 0)
  {
    v8 = (char *)*((_QWORD *)this + 16);
    v9 = *((_QWORD *)this + 17);
  }
  else
  {
    v8 = (char *)this + 128;
    v9 = *((unsigned __int8 *)this + 151);
  }
  v10 = &v8[v9];
  if (v9 >= 9)
  {
    v11 = v8;
    do
    {
      v12 = (char *)memchr(v11, 97, v9 - 8);
      if (!v12)
        break;
      if (*(_QWORD *)v12 == 0x756F6D796E6F6E61 && v12[8] == 115)
        return v12 != v10 && v12 - v8 != -1;
      v11 = v12 + 1;
      v9 = v10 - (_BYTE *)v11;
    }
    while (v10 - (_BYTE *)v11 > 8);
  }
  v12 = v10;
  return v12 != v10 && v12 - v8 != -1;
}

void SipUri::makeAnonymous(SipUri *this)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "Anonymous <sip:anonymous@anonymous.invalid>");
  SipUri::fromString((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEE9D3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipUri::setUser(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v7;
  void *__p[2];
  char v9;
  void (**v10)(SipParameterMap *__hidden);
  uint64_t *v11;
  _QWORD *v12[3];
  void **v13;

  v12[1] = 0;
  v12[2] = (_QWORD *)256;
  v11 = (uint64_t *)v12;
  v12[0] = 0;
  v10 = &off_1E78B82D8;
  v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a3 + 8);
  if (v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "phone-context");
    v13 = __p;
    v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v11, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v13);
    std::string::operator=((std::string *)(v7 + 7), (const std::string *)a3);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  SipUri::setUser(a1, a2, (uint64_t)&v10);
  v10 = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v11, v12[0]);
}

void sub_1BEE9D4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  uint64_t v17;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v17, a17);
  _Unwind_Resume(a1);
}

void *SipUri::setUser(uint64_t a1, const std::string *a2, uint64_t a3)
{
  void *result;

  SipUri::makeSipUri(a1);
  result = std::string::operator=((std::string *)(a1 + 128), a2);
  *(_BYTE *)(a1 + 320) = 0;
  if (a1 + 368 != a3)
    result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 376), *(__int128 **)(a3 + 8), (__int128 *)(a3 + 16));
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a3 + 32);
  return result;
}

uint64_t SipUri::setHost(SipUri *this, const SipHost *a2)
{
  uint64_t result;

  SipUri::makeSipUri((uint64_t)this);
  result = SipHost::operator=((uint64_t)this + 8, (uint64_t)a2);
  *((_BYTE *)this + 320) = 0;
  return result;
}

__int128 *SipUri::phoneContext(SipUri *this)
{
  void **v2;
  __int128 *v3;
  void **v4;
  void *__p[2];
  char v7;

  if (SipUri::isTelUri(this))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "phone-context");
    v2 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 72, __p);
    if ((void **)((char *)this + 80) == v2)
      v3 = &ims::kEmptyString;
    else
      v3 = (__int128 *)(v2 + 7);
  }
  else
  {
    v3 = &ims::kEmptyString;
    if (!SipUri::isSipUri(this))
      return v3;
    std::string::basic_string[abi:ne180100]<0>(__p, "phone-context");
    v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 376, __p);
    if ((void **)((char *)this + 384) != v4)
      v3 = (__int128 *)(v4 + 7);
  }
  if (v7 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_1BEE9D668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *SipUri::verstatLevel(SipUri *this)
{
  char *v2;
  __int128 *v3;
  void **v4;
  void **v5;
  uint64_t v6;

  if (SipUri::isTelUri(this))
  {
    v2 = (char *)this + 64;
    goto LABEL_3;
  }
  v3 = &ims::kEmptyString;
  if (SipUri::isSipUri(this))
  {
    v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 72, (void **)"verstat");
    if ((void **)((char *)this + 80) != v5)
      v3 = (__int128 *)(v5 + 7);
    v6 = *((unsigned __int8 *)v3 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *((_QWORD *)v3 + 1);
    if (!v6)
    {
      v2 = (char *)this + 368;
LABEL_3:
      v3 = &ims::kEmptyString;
      v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v2 + 8), (void **)"verstat");
      if (v2 + 16 != (char *)v4)
        return (__int128 *)(v4 + 7);
    }
  }
  return v3;
}

void SipUri::setPhoneContext(uint64_t **this, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  void *__p[2];
  char v8;
  void **v9;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (SipUri::isTelUri((SipUri *)this))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "phone-context");
      v9 = __p;
      v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 9, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v9);
      std::string::operator=((std::string *)(v5 + 7), (const std::string *)a2);
    }
    else
    {
      if (!SipUri::isSipUri((SipUri *)this))
        return;
      std::string::basic_string[abi:ne180100]<0>(__p, "phone-context");
      v9 = __p;
      v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 47, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v9);
      std::string::operator=((std::string *)(v6 + 7), (const std::string *)a2);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "phone-context");
    SipParameterMap::clearParameter((uint64_t)(this + 8), __p);
    if (v8 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "phone-context");
    SipParameterMap::clearParameter((uint64_t)(this + 46), __p);
  }
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1BEE9D87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipUri::needsPhoneContext(SipUri *this)
{
  uint64_t result;

  if (SipUri::isTelUri(this))
    return isLocalPhoneNumber((unsigned __int8 *)this + 176);
  result = SipUri::isSipUri(this);
  if ((_DWORD)result)
    return isLocalPhoneNumber((unsigned __int8 *)this + 128);
  return result;
}

uint64_t isLocalPhoneNumber(unsigned __int8 *a1)
{
  uint64_t v1;
  int v2;
  uint64_t result;
  unsigned __int8 *v5;

  v1 = a1[23];
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  result = isPhoneNumber(a1);
  if ((_DWORD)result)
  {
    v5 = *(unsigned __int8 **)a1;
    if (v2 >= 0)
      v5 = a1;
    return *v5 != 43;
  }
  return result;
}

void SipUri::countryCodeFromPhoneContext(SipUri *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v3;
  char v4;
  std::string *p_p;
  std::string::size_type size;
  std::string *v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  unsigned __int8 v10;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v3 = SipUri::phoneContext(this);
  ims::chomp("\r\n\t ", (uint64_t)v3, 3, &__p);
  v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_17;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_17;
    p_p = &__p;
  }
  if (p_p->__r_.__value_.__s.__data_[0] == 43)
  {
    size = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (size < 2)
    {
LABEL_16:
      *a2 = __p;
      return;
    }
    v7 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v8 = &v7->__r_.__value_.__s.__data_[1];
    v9 = size - 1;
    while (1)
    {
      v11 = *v8++;
      v10 = v11;
      if (v11 < 0 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v10 + 60) & 0x400) == 0)
        break;
      if (!--v9)
        goto LABEL_16;
    }
  }
LABEL_17:
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (v4 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void SipUri::asString(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  SipUri::asString(a1, (uint64_t)a3, a2);
}

void sub_1BEE9DA70(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void SipUri::asString(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (a2)
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v8, 1);
    SipUri::toStream(a1, (uint64_t)&v8, a3);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v9 + 1) + 8, &v6);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_QWORD *)&v8 = &off_1E78D7A10;
    if ((_BYTE)v9)
    {
      if (*((_QWORD *)&v8 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 8))(*((_QWORD *)&v8 + 1));
    }
  }
}

void sub_1BEE9DB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15)
  {
    if (a14)
      (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipUri::toStream(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  const std::string::value_type **v11;
  std::string::size_type v12;
  std::string v14;
  std::string __p;
  void *v16;
  char v17;
  std::string v18;

  if (*(_BYTE *)(a1 + 320))
  {
    LoggableString::LoggableString((LoggableString *)&__p, "*");
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return a2;
  }
  if (a3 == 1)
    goto LABEL_5;
  if (*(char *)(a1 + 223) < 0)
  {
    if (*(_QWORD *)(a1 + 208))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(a1 + 223))
  {
LABEL_8:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1 + 200);
    v6 = *(_QWORD **)(a2 + 8);
    v7 = " <";
    v8 = 2;
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a1 + 88) && !*(_QWORD *)(a1 + 392) && a3)
  {
LABEL_5:
    v5 = 0;
    goto LABEL_14;
  }
  v6 = *(_QWORD **)(a2 + 8);
  v7 = "<";
  v8 = 1;
LABEL_13:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  *(_BYTE *)(a2 + 17) = 0;
  v5 = 1;
LABEL_14:
  if (*(char *)(a1 + 127) < 0)
  {
    if (!*(_QWORD *)(a1 + 112))
      goto LABEL_20;
  }
  else if (!*(_BYTE *)(a1 + 127))
  {
    goto LABEL_20;
  }
  LoggableString::LoggableString(&__p, (const std::string *)(a1 + 104));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)":", 1);
  *(_BYTE *)(a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_20:
  if (isTelScheme((unsigned __int16 *)(a1 + 104)))
  {
    memset(&v18, 0, sizeof(v18));
    if (*(char *)(a1 + 199) < 0)
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(a1 + 176), *(_QWORD *)(a1 + 184));
    else
      v18 = *(std::string *)(a1 + 176);
    ObfuscatedString::ObfuscatedString((uint64_t)&__p, &v18);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 56))(a2, &__p);
    if (v17 < 0)
      operator delete(v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_60;
    v10 = (void *)v18.__r_.__value_.__r.__words[0];
    goto LABEL_38;
  }
  if (!isUrnScheme((unsigned __int16 *)(a1 + 104)))
  {
    v11 = (const std::string::value_type **)(a1 + 128);
    if (*(char *)(a1 + 151) < 0)
    {
      v12 = *(_QWORD *)(a1 + 136);
      if (v12)
      {
        memset(&v18, 0, sizeof(v18));
        std::string::__init_copy_ctor_external(&v18, *v11, v12);
LABEL_41:
        ims::addPercentEscapes((uint64_t)&v18, CFSTR("&=+$,;?/"), CFSTR(":#[]@!'()"));
        ObfuscatedString::ObfuscatedString((uint64_t)&__p, &v18);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 56))(a2, &__p);
        if (v17 < 0)
          operator delete(v16);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (*(char *)(a1 + 175) < 0)
        {
          if (!*(_QWORD *)(a1 + 160))
          {
LABEL_55:
            if (*(_QWORD *)(a1 + 392))
              SipParameterMap::toStream((SipParameterMap *)(a1 + 368), (ImsOutStream *)a2, 0, 0, 0, 0);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"@", 1);
            *(_BYTE *)(a2 + 17) = 0;
            if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v18.__r_.__value_.__l.__data_);
            goto LABEL_59;
          }
        }
        else if (!*(_BYTE *)(a1 + 175))
        {
          goto LABEL_55;
        }
        std::string::operator=(&v18, (const std::string *)(a1 + 152));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)":", 1);
        *(_BYTE *)(a2 + 17) = 0;
        std::string::basic_string[abi:ne180100]<0>(&v14, "xxxxxx");
        PIIString::PIIString((uint64_t)&__p, &v18, &v14);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 48))(a2, &__p);
        if (v17 < 0)
          operator delete(v16);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v14.__r_.__value_.__l.__data_);
        goto LABEL_55;
      }
    }
    else if (*(_BYTE *)(a1 + 151))
    {
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)v11;
      v18.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 144);
      goto LABEL_41;
    }
LABEL_59:
    SipHost::toStream((SipHost *)(a1 + 8), (ImsOutStream *)a2, 1);
    goto LABEL_60;
  }
  LoggableString::LoggableString(&__p, (const std::string *)(a1 + 224));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  v9 = *(_QWORD **)(a2 + 8);
  v18.__r_.__value_.__s.__data_[0] = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v18, 1);
  *(_BYTE *)(a2 + 17) = 0;
  LoggableString::LoggableString(&v18, (const std::string *)(a1 + 248));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 40))(a2, &v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_60;
  v10 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_38:
  operator delete(v10);
LABEL_60:
  SipParameterMap::toStream((SipParameterMap *)(a1 + 64), (ImsOutStream *)a2, 0, CFSTR("[]/:&+$"), CFSTR("#@!'()*="), 0);
  if (*(_QWORD *)(a1 + 352))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"?", 1);
    *(_BYTE *)(a2 + 17) = 0;
    SipParameterMap::toStream((SipParameterMap *)(a1 + 328), (ImsOutStream *)a2, 1, 0, 0, 0);
  }
  if (v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)">", 1);
    *(_BYTE *)(a2 + 17) = 0;
  }
  return a2;
}

void sub_1BEE9E014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  ims::AccessNetwork::~AccessNetwork((void **)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 41) < 0)
    operator delete(*(void **)(v21 - 64));
  _Unwind_Resume(a1);
}

uint64_t SipUri::toStream(SipUri *this, ImsOutStream *a2)
{
  return SipUri::toStream((uint64_t)this, (uint64_t)a2, 2);
}

uint64_t SipUri::getContentIdString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  const std::string::value_type **v8;
  std::string::size_type v9;
  uint64_t result;
  std::string __p;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = 0;
  v12 = 0u;
  v13 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v12, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v12 + 1), (uint64_t)"<", 1);
  BYTE1(v13) = 0;
  if (a3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v12 + 1), (uint64_t)"cid:", 4);
    BYTE1(v13) = 0;
  }
  if (isTelScheme((unsigned __int16 *)(a1 + 104)))
  {
    (*(void (**)(__int128 *, uint64_t))(v12 + 32))(&v12, a1 + 176);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v12 + 1), (uint64_t)"@", 1);
    BYTE1(v13) = 0;
LABEL_7:
    (*(void (**)(__int128 *, uint64_t))(v12 + 32))(&v12, a2);
    goto LABEL_16;
  }
  if (isUrnScheme((unsigned __int16 *)(a1 + 104)))
  {
    (*(void (**)(__int128 *, uint64_t))(v12 + 32))(&v12, a1 + 224);
    __p.__r_.__value_.__s.__data_[0] = 58;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v12 + 1), (uint64_t)&__p, 1);
    BYTE1(v13) = 0;
    a2 = a1 + 248;
    goto LABEL_7;
  }
  v8 = (const std::string::value_type **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
  {
    v9 = *(_QWORD *)(a1 + 136);
    if (v9)
    {
      memset(&__p, 0, sizeof(__p));
      std::string::__init_copy_ctor_external(&__p, *v8, v9);
LABEL_13:
      ims::addPercentEscapes((uint64_t)&__p, CFSTR("&=+$,;?/"), CFSTR(":#[]@!'()"));
      (*(void (**)(__int128 *, std::string *))(v12 + 32))(&v12, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v12 + 1), (uint64_t)"@", 1);
      BYTE1(v13) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else if (*(_BYTE *)(a1 + 151))
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 144);
    goto LABEL_13;
  }
  SipHost::toStream((SipHost *)(a1 + 8), (ImsOutStream *)&v12, 0);
LABEL_16:
  __p.__r_.__value_.__s.__data_[0] = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v12 + 1), (uint64_t)&__p, 1);
  BYTE1(v13) = 0;
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v13 + 1) + 8, a4);
  *(_QWORD *)&v12 = &off_1E78D7A10;
  if ((_BYTE)v13)
  {
    result = *((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v12 + 1) + 8))(*((_QWORD *)&v12 + 1));
  }
  return result;
}

void sub_1BEE9E2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    if (a17)
      (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipUri::getUriString@<X0>(SipUri *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const std::string::value_type **v6;
  std::string::size_type v7;
  uint64_t result;
  std::string v9;
  std::string __p;
  void *v11;
  char v12;
  std::string v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v14, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v14 + 1), (uint64_t)"<", 1);
  BYTE1(v15) = 0;
  if (*((char *)this + 127) < 0)
  {
    if (!*((_QWORD *)this + 14))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 127))
  {
    goto LABEL_7;
  }
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 104));
  (*(void (**)(__int128 *, std::string *))(v14 + 40))(&v14, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v14 + 1), (uint64_t)":", 1);
  BYTE1(v15) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
  if (!isTelScheme((unsigned __int16 *)this + 52))
  {
    if (isUrnScheme((unsigned __int16 *)this + 52))
    {
      LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 224));
      (*(void (**)(__int128 *, std::string *))(v14 + 40))(&v14, &__p);
      v13.__r_.__value_.__s.__data_[0] = 58;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v14 + 1), (uint64_t)&v13, 1);
      BYTE1(v15) = 0;
      LoggableString::LoggableString(&v13, (const std::string *)((char *)this + 248));
      (*(void (**)(__int128 *, std::string *))(v14 + 40))(&v14, &v13);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      goto LABEL_18;
    }
    v6 = (const std::string::value_type **)((char *)this + 128);
    if (*((char *)this + 151) < 0)
    {
      v7 = *((_QWORD *)this + 17);
      if (v7)
      {
        memset(&v13, 0, sizeof(v13));
        std::string::__init_copy_ctor_external(&v13, *v6, v7);
LABEL_22:
        ims::addPercentEscapes((uint64_t)&v13, CFSTR("&=+$,;?/"), CFSTR(":#[]@!'()"));
        (*(void (**)(__int128 *, std::string *))(v14 + 32))(&v14, &v13);
        if (*((char *)this + 175) < 0)
        {
          if (!*((_QWORD *)this + 20))
          {
LABEL_32:
            if (*((_QWORD *)this + 49))
              SipParameterMap::toStream((SipUri *)((char *)this + 368), (ImsOutStream *)&v14, 0, 0, 0, 0);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v14 + 1), (uint64_t)"@", 1);
            BYTE1(v15) = 0;
            if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v13.__r_.__value_.__l.__data_);
            goto LABEL_36;
          }
        }
        else if (!*((_BYTE *)this + 175))
        {
          goto LABEL_32;
        }
        std::string::operator=(&v13, (const std::string *)((char *)this + 152));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v14 + 1), (uint64_t)":", 1);
        BYTE1(v15) = 0;
        std::string::basic_string[abi:ne180100]<0>(&v9, "xxxxxx");
        PIIString::PIIString((uint64_t)&__p, &v13, &v9);
        (*(void (**)(__int128 *, std::string *))(v14 + 48))(&v14, &__p);
        if (v12 < 0)
          operator delete(v11);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v9.__r_.__value_.__l.__data_);
        goto LABEL_32;
      }
    }
    else if (*((_BYTE *)this + 151))
    {
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *(_OWORD *)v6;
      v13.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 18);
      goto LABEL_22;
    }
LABEL_36:
    SipHost::toStream((SipUri *)((char *)this + 8), (ImsOutStream *)&v14, 1);
    goto LABEL_37;
  }
  memset(&__p, 0, sizeof(__p));
  if (*((char *)this + 199) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 22), *((_QWORD *)this + 23));
  else
    __p = *(std::string *)((char *)this + 176);
  (*(void (**)(__int128 *, std::string *))(v14 + 32))(&v14, &__p);
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_37:
  if (a2)
    SipParameterMap::toStream((SipUri *)((char *)this + 64), (ImsOutStream *)&v14, 0, CFSTR("[]/:&+$"), CFSTR("#@!'()*="), 0);
  if (*((_QWORD *)this + 44))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v14 + 1), (uint64_t)"?", 1);
    BYTE1(v15) = 0;
    SipParameterMap::toStream((SipUri *)((char *)this + 328), (ImsOutStream *)&v14, 1, 0, 0, 0);
  }
  __p.__r_.__value_.__s.__data_[0] = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v14 + 1), (uint64_t)&__p, 1);
  BYTE1(v15) = 0;
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v15 + 1) + 8, a3);
  *(_QWORD *)&v14 = &off_1E78D7A10;
  if ((_BYTE)v15)
  {
    result = *((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v14 + 1) + 8))(*((_QWORD *)&v14 + 1));
  }
  return result;
}

void sub_1BEE9E6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v32;

  *(_QWORD *)(v30 - 80) = &off_1E78D7A10;
  if (*(_BYTE *)(v30 - 64))
  {
    v32 = *(_QWORD *)(v30 - 72);
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  _Unwind_Resume(exception_object);
}

__int128 *SipUri::transport(SipUri *this)
{
  return &ims::kEmptyString;
}

BOOL SipUri::isValidUri(SipUri *this)
{
  unsigned __int16 *v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  v2 = (unsigned __int16 *)((char *)this + 104);
  if (!isSipScheme((unsigned __int16 *)this + 52))
    goto LABEL_8;
  if ((*((char *)this + 39) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 39))
      goto LABEL_6;
    return 1;
  }
  if (*((_QWORD *)this + 3))
    return 1;
LABEL_6:
  v3 = *((_QWORD *)this + 6);
  if (v3 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3) & 1) != 0)
    return 1;
LABEL_8:
  if (isTelScheme(v2))
  {
    if (*((char *)this + 199) < 0)
    {
      if (*((_QWORD *)this + 23))
        return 1;
    }
    else if (*((_BYTE *)this + 199))
    {
      return 1;
    }
  }
  result = isUrnScheme(v2);
  if ((_DWORD)result)
  {
    if (*((char *)this + 247) < 0)
      v5 = *((_QWORD *)this + 29);
    else
      v5 = *((unsigned __int8 *)this + 247);
    return v5 != 0;
  }
  return result;
}

void SipUri::makeCanonical(SipUri *this)
{
  void **v2;
  uint64_t *v3;
  std::string __p;
  std::string v5;
  std::string *v6;

  if (*((char *)this + 127) < 0)
  {
    if (*((_QWORD *)this + 14))
      goto LABEL_8;
  }
  else if (*((_BYTE *)this + 127))
  {
    goto LABEL_8;
  }
  v2 = (void **)((char *)this + 104);
  SipUri::guessScheme(this, &v5);
  if (*((char *)this + 127) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 15) = *((_QWORD *)&v5.__r_.__value_.__l + 2);
LABEL_8:
  if (SipUri::isSipUri(this) && isPhoneNumber((unsigned __int8 *)this + 128))
  {
    std::string::basic_string[abi:ne180100]<0>(&v5, "user");
    std::string::basic_string[abi:ne180100]<0>(&__p, "phone");
    v6 = &v5;
    v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 9, (void **)&v5.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v6);
    std::string::operator=((std::string *)(v3 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_1BEE9E970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipUri::equals(SipUri *this, const SipUri *a2, int a3)
{
  int v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void **v21;
  unsigned __int8 *v22;
  char *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v32;

  v3 = *((unsigned __int8 *)a2 + 320);
  if (*((_BYTE *)this + 320))
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*((_BYTE *)this + 320))
      v5 = v3 == 0;
    else
      v5 = 1;
    return !v5;
  }
  v9 = *((unsigned __int8 *)this + 127);
  v10 = *((_QWORD *)this + 14);
  if ((v9 & 0x80u) == 0)
    v11 = *((unsigned __int8 *)this + 127);
  else
    v11 = *((_QWORD *)this + 14);
  v12 = *((unsigned __int8 *)a2 + 127);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)a2 + 14);
  if (v11 != v12)
    return 0;
  if (v13 >= 0)
    v15 = (unsigned __int8 *)a2 + 104;
  else
    v15 = (unsigned __int8 *)*((_QWORD *)a2 + 13);
  if ((v9 & 0x80) == 0)
  {
    if (*((_BYTE *)this + 127))
    {
      v16 = (unsigned __int8 *)this + 104;
      while (*v16 == *v15)
      {
        ++v16;
        ++v15;
        if (!--v9)
          goto LABEL_28;
      }
      return 0;
    }
    return 1;
  }
  if (memcmp(*((const void **)this + 13), v15, v10))
    return 0;
  if (!v10)
    return 1;
LABEL_28:
  if (!isTelScheme((unsigned __int16 *)this + 52))
  {
    if (isSipScheme((unsigned __int16 *)this + 52))
    {
      if (!a3)
        return SipHost::equals((SipUri *)((char *)this + 8), (const SipUri *)((char *)a2 + 8), 1);
      result = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)this + 128, (unsigned __int8 *)a2 + 128);
      if ((_DWORD)result)
        return SipHost::equals((SipUri *)((char *)this + 8), (const SipUri *)((char *)a2 + 8), 1);
    }
    else
    {
      result = isUrnScheme((unsigned __int16 *)this + 52);
      if ((_DWORD)result)
      {
        result = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)this + 224, (unsigned __int8 *)a2 + 224);
        if ((_DWORD)result)
          return std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)this + 248, (unsigned __int8 *)a2 + 248);
      }
    }
    return result;
  }
  v17 = *((unsigned __int8 *)this + 199);
  if ((v17 & 0x80u) == 0)
    v18 = *((unsigned __int8 *)this + 199);
  else
    v18 = *((_QWORD *)this + 23);
  v19 = *((unsigned __int8 *)a2 + 199);
  v20 = (char)v19;
  if ((v19 & 0x80u) != 0)
    v19 = *((_QWORD *)a2 + 23);
  if (v18 != v19)
    return 0;
  v21 = (const void **)((char *)this + 176);
  v24 = (unsigned __int8 *)*((_QWORD *)a2 + 22);
  v23 = (char *)a2 + 176;
  v22 = v24;
  if (v20 >= 0)
    v25 = (unsigned __int8 *)v23;
  else
    v25 = v22;
  if ((v17 & 0x80) != 0)
    return memcmp(*v21, v25, *((_QWORD *)this + 23)) == 0;
  if (!*((_BYTE *)this + 199))
    return 1;
  v26 = v17 - 1;
  do
  {
    v28 = *(unsigned __int8 *)v21;
    v21 = (const void **)((char *)v21 + 1);
    v27 = v28;
    v30 = *v25++;
    v29 = v30;
    v32 = v26-- != 0;
    result = v27 == v29;
  }
  while (v27 == v29 && v32);
  return result;
}

BOOL SipUri::userMatch(SipUri *this, const SipUri *a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string::size_type v14;
  char *v15;
  int64_t v16;
  int64_t v17;
  char *v18;
  int v19;
  std::string::size_type v20;
  std::string *v21;
  int64_t size;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  std::string::size_type v27;
  std::string *v28;
  int64_t v29;
  char *v30;
  char *v31;
  void *v32;
  int v33;
  void *v34;
  int64_t v35;
  char *v36;
  int v37;
  void *v38;
  int64_t v39;
  char *v40;
  std::string v41;
  char v42;

  result = SipUri::isSipUri(this);
  if ((_DWORD)result)
  {
    v5 = *((unsigned __int8 *)this + 127);
    if ((v5 & 0x80u) == 0)
      v6 = *((unsigned __int8 *)this + 127);
    else
      v6 = *((_QWORD *)this + 14);
    v7 = *((unsigned __int8 *)a2 + 127);
    v8 = (char)v7;
    if ((v7 & 0x80u) != 0)
      v7 = *((_QWORD *)a2 + 14);
    if (v6 != v7)
      return 0;
    v9 = (const void **)((char *)this + 104);
    if (v8 >= 0)
      v10 = (unsigned __int8 *)a2 + 104;
    else
      v10 = (unsigned __int8 *)*((_QWORD *)a2 + 13);
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*v9, v10, *((_QWORD *)this + 14)))
        return 0;
    }
    else if (*((_BYTE *)this + 127))
    {
      while (*(unsigned __int8 *)v9 == *v10)
      {
        v9 = (const void **)((char *)v9 + 1);
        ++v10;
        if (!--v5)
          goto LABEL_17;
      }
      return 0;
    }
LABEL_17:
    if (*((char *)a2 + 151) >= 0)
      v11 = *((unsigned __int8 *)a2 + 151);
    else
      v11 = *((_QWORD *)a2 + 17);
    if (v11)
    {
      v12 = *((unsigned __int8 *)this + 151);
      if (*((char *)this + 151) < 0)
      {
        if (*((_QWORD *)this + 17))
          goto LABEL_23;
      }
      else if (*((_BYTE *)this + 151))
      {
LABEL_23:
        if (SipUri::isAnonymousUser(this) && SipUri::isAnonymousUser(a2))
          return 1;
        if (v11 >= 6 && ((v12 & 0x80) != 0 ? (v13 = *((_QWORD *)this + 17)) : (v13 = v12), v13 > 5))
          v14 = 3;
        else
          v14 = 0;
        v15 = (char *)this + 128;
        if ((v12 & 0x80) != 0)
          v12 = *((_QWORD *)this + 17);
        if (v11 >= v12)
        {
          std::string::basic_string(&v41, (const std::string *)((char *)this + 128), v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v42);
          v17 = *((unsigned __int8 *)a2 + 151);
          if ((v17 & 0x80u) == 0)
            v18 = (char *)a2 + 128;
          else
            v18 = (char *)*((_QWORD *)a2 + 16);
          v19 = SHIBYTE(v41.__r_.__value_.__r.__words[2]);
          v20 = v41.__r_.__value_.__r.__words[0];
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v21 = &v41;
          else
            v21 = (std::string *)v41.__r_.__value_.__r.__words[0];
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          else
            size = v41.__r_.__value_.__l.__size_;
          if (size)
          {
            if ((v17 & 0x80u) != 0)
              v17 = *((_QWORD *)a2 + 17);
            v23 = &v18[v17];
            if (v17 >= size)
            {
              v33 = v21->__r_.__value_.__s.__data_[0];
              v34 = v18;
              do
              {
                v35 = v17 - size;
                if (v35 == -1)
                  break;
                v36 = (char *)memchr(v34, v33, v35 + 1);
                if (!v36)
                  break;
                v24 = v36;
                if (!memcmp(v36, v21, size))
                  goto LABEL_55;
                v34 = v24 + 1;
                v17 = v23 - (v24 + 1);
              }
              while (v17 >= size);
            }
            v24 = v23;
LABEL_55:
            if (v24 == v23)
              v25 = -1;
            else
              v25 = v24 - v18;
          }
          else
          {
            v25 = 0;
          }
          if ((v19 & 0x80000000) == 0)
            return v25 != -1;
          v32 = (void *)v20;
        }
        else
        {
          std::string::basic_string(&v41, (const std::string *)((char *)a2 + 128), v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v42);
          if (*((char *)this + 151) < 0)
          {
            v15 = (char *)*((_QWORD *)this + 16);
            v16 = *((_QWORD *)this + 17);
          }
          else
          {
            v16 = *((unsigned __int8 *)this + 151);
          }
          v26 = SHIBYTE(v41.__r_.__value_.__r.__words[2]);
          v27 = v41.__r_.__value_.__r.__words[0];
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = &v41;
          else
            v28 = (std::string *)v41.__r_.__value_.__r.__words[0];
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          else
            v29 = v41.__r_.__value_.__l.__size_;
          if (v29)
          {
            v30 = &v15[v16];
            if (v16 >= v29)
            {
              v37 = v28->__r_.__value_.__s.__data_[0];
              v38 = v15;
              do
              {
                v39 = v16 - v29;
                if (v39 == -1)
                  break;
                v40 = (char *)memchr(v38, v37, v39 + 1);
                if (!v40)
                  break;
                v31 = v40;
                if (!memcmp(v40, v28, v29))
                  goto LABEL_68;
                v38 = v31 + 1;
                v16 = v30 - (v31 + 1);
              }
              while (v16 >= v29);
            }
            v31 = v30;
LABEL_68:
            if (v31 == v30)
              v25 = -1;
            else
              v25 = v31 - v15;
          }
          else
          {
            v25 = 0;
          }
          if ((v26 & 0x80000000) == 0)
            return v25 != -1;
          v32 = (void *)v27;
        }
        operator delete(v32);
        return v25 != -1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t SipUri::matches(SipUri *this, const SipUri *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;

  v2 = *((unsigned __int8 *)this + 151);
  if ((v2 & 0x80u) == 0)
    v3 = *((unsigned __int8 *)this + 151);
  else
    v3 = *((_QWORD *)this + 17);
  v4 = *((unsigned __int8 *)a2 + 151);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 17);
  if (v3 != v4)
    return 0;
  v8 = (const void **)((char *)this + 128);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)a2 + 128;
  else
    v9 = (unsigned __int8 *)*((_QWORD *)a2 + 16);
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *((_QWORD *)this + 17)))
      return SipHost::equals((SipUri *)((char *)this + 8), (const SipUri *)((char *)a2 + 8), 0);
    return 0;
  }
  if (*((_BYTE *)this + 151))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        return SipHost::equals((SipUri *)((char *)this + 8), (const SipUri *)((char *)a2 + 8), 0);
    }
    return 0;
  }
  return SipHost::equals((SipUri *)((char *)this + 8), (const SipUri *)((char *)a2 + 8), 0);
}

void SipUri::normalizedPhoneNumber(SipUri *this@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  unint64_t v5;
  char **v6;
  unint64_t v7;
  char *v8;
  char *v9;

  {
    __cxa_atexit(MEMORY[0x1E0DE44D0], SipUri::normalizedPhoneNumber(void)const::visualSeparators, &dword_1BEDF4000);
  }
  v5 = 0;
  v6 = (char **)((char *)this + 176);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  while (1)
  {
    v7 = *((char *)this + 199) < 0 ? *((_QWORD *)this + 23) : *((unsigned __int8 *)this + 199);
    if (v5 >= v7)
      break;
    v8 = (char *)this + 176;
    if ((*((_BYTE *)this + 199) & 0x80) != 0)
      v8 = *v6;
    if (std::string::find((const std::string *)SipUri::normalizedPhoneNumber(void)const::visualSeparators, v8[v5], 0) == -1)
    {
      v9 = (char *)this + 176;
      if (*((char *)this + 199) < 0)
        v9 = *v6;
      std::string::push_back(a2, v9[v5]);
    }
    ++v5;
  }
}

void sub_1BEE9F048(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t SipUri::anonymousUri(SipUri *this)
{
  uint64_t result;
  uint64_t v2;

  result = kAnonymousUri;
  if (!kAnonymousUri)
  {
    v2 = operator new();
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 8) = &off_1E78D08F8;
    *(_QWORD *)(v2 + 16) = 0;
    *(_WORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 88) = 0;
    *(_QWORD *)(v2 + 64) = &off_1E78B82D8;
    *(_QWORD *)(v2 + 72) = v2 + 80;
    *(_BYTE *)(v2 + 97) = 1;
    *(_QWORD *)v2 = &off_1E78BFCE8;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(_OWORD *)(v2 + 200) = 0u;
    *(_OWORD *)(v2 + 216) = 0u;
    *(_OWORD *)(v2 + 232) = 0u;
    *(_OWORD *)(v2 + 248) = 0u;
    *(_QWORD *)(v2 + 312) = 0;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 264) = 0u;
    *(_OWORD *)(v2 + 280) = 0u;
    *(_OWORD *)(v2 + 296) = 0u;
    *(_QWORD *)(v2 + 344) = 0;
    *(_QWORD *)(v2 + 352) = 0;
    *(_QWORD *)(v2 + 328) = &off_1E78B82D8;
    *(_QWORD *)(v2 + 336) = v2 + 344;
    *(_QWORD *)(v2 + 384) = 0;
    *(_QWORD *)(v2 + 392) = 0;
    *(_QWORD *)(v2 + 368) = &off_1E78B82D8;
    *(_QWORD *)(v2 + 376) = v2 + 384;
    *(_BYTE *)(v2 + 96) = 1;
    *(_WORD *)(v2 + 360) = 257;
    *(_WORD *)(v2 + 400) = 257;
    *(_BYTE *)(v2 + 320) = 0;
    kAnonymousUri = v2;
    SipUri::makeAnonymous((SipUri *)v2);
    return kAnonymousUri;
  }
  return result;
}

SipUri *SipUri::clone(SipUri *this)
{
  SipUri *v2;

  v2 = (SipUri *)operator new();
  SipUri::SipUri(v2, this);
  return v2;
}

void sub_1BEE9F1C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4064E45795);
  _Unwind_Resume(a1);
}

uint64_t PIIString::PIIString(uint64_t a1, const std::string *a2, const std::string *a3)
{
  std::string *v5;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v5 = (std::string *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)a1, a2);
  std::string::operator=(v5, a3);
  return a1;
}

void sub_1BEE9F234(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallInfo::IMSCallInfo(uint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4, uint64_t a5, uint64_t *a6)
{
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  __int128 v18;

  *(_QWORD *)a1 = &off_1E78BFD38;
  *(_QWORD *)(a1 + 8) = &unk_1E78BFE88;
  *(_QWORD *)(a1 + 16) = &unk_1E78BFEB0;
  *(_BYTE *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = off_1E78C0288;
  *(_OWORD *)(a1 + 80) = 0u;
  v8 = (std::string *)(a1 + 80);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 152) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_WORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 208) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 144) = &off_1E78BFCE8;
  v9 = a1 + 144;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_BYTE *)(a1 + 241) = 1;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_QWORD *)(a1 + 472) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 480) = a1 + 488;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_QWORD *)(a1 + 512) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 520) = a1 + 528;
  *(_BYTE *)(a1 + 240) = 1;
  *(_WORD *)(a1 + 504) = 257;
  *(_WORD *)(a1 + 544) = 257;
  *(_BYTE *)(a1 + 464) = 0;
  v10 = a1 + 552;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_BYTE *)(a1 + 569) = 0;
  *(_WORD *)(a1 + 572) = 0;
  *(_BYTE *)(a1 + 574) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 625) = 0u;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a5;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 128), a6);
  v18 = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v10, &v18);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_BYTE *)(a1 + 568) = 0;
  if (a2)
  {
    v14 = *(_DWORD *)(a2 + 200) + 1;
    *(_DWORD *)(a2 + 200) = v14;
  }
  else
  {
    LOBYTE(v14) = -1;
  }
  *(_BYTE *)(a1 + 40) = v14;
  *(_WORD *)(a1 + 570) = 0;
  std::string::operator=(v8, (const std::string *)(a3 + 8));
  std::string::operator=((std::string *)(v9 - 40), a4);
  return a1;
}

void sub_1BEE9F480(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  SipUri *v5;
  void **v6;
  uint64_t v7;
  uint64_t *v8;
  void **v9;

  ims::AccessNetwork::~AccessNetwork(v4);
  std::unique_ptr<IMSCallInfo::DialInfo>::reset[abi:ne180100](v8, 0);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v7);
  SipUri::~SipUri(v5);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v1 + 127) < 0)
    operator delete(*v9);
  *(_QWORD *)(v1 + 72) = off_1E78C0288;
  if (*(char *)(v1 + 103) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v6);
  _Unwind_Resume(a1);
}

uint64_t IMSCallManager::nextBasebandCallId(IMSCallManager *this)
{
  uint64_t v1;

  v1 = (*((_DWORD *)this + 50) + 1);
  *((_DWORD *)this + 50) = v1;
  return v1;
}

void ImsUuid::~ImsUuid(void **this)
{
  *this = off_1E78C0288;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78C0288;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

void IMSCallInfo::~IMSCallInfo(IMSCallInfo *this)
{
  uint64_t v2;
  char *v3;

  *(_QWORD *)this = &off_1E78BFD38;
  *((_QWORD *)this + 1) = &unk_1E78BFE88;
  *((_QWORD *)this + 2) = &unk_1E78BFEB0;
  v3 = (char *)this + 128;
  v2 = *((_QWORD *)this + 16);
  if (v2)
    *(_QWORD *)(v2 + 400) = 0;
  if (*((char *)this + 639) < 0)
    operator delete(*((void **)this + 77));
  if (*((char *)this + 615) < 0)
    operator delete(*((void **)this + 74));
  std::unique_ptr<IMSCallInfo::DialInfo>::reset[abi:ne180100]((uint64_t *)this + 73, 0);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 552);
  SipUri::~SipUri((IMSCallInfo *)((char *)this + 144));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  *((_QWORD *)this + 9) = off_1E78C0288;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
}

{
  IMSCallInfo::~IMSCallInfo(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'IMSCallInfo::~IMSCallInfo(IMSCallInfo *this)
{
  IMSCallInfo::~IMSCallInfo((IMSCallInfo *)((char *)this - 8));
}

{
  IMSCallInfo::~IMSCallInfo((IMSCallInfo *)((char *)this - 16));
}

{
  IMSCallInfo::~IMSCallInfo((IMSCallInfo *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  IMSCallInfo::~IMSCallInfo((IMSCallInfo *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

void IMSCallInfo::stack(IMSCallInfo *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  v3 = *((_QWORD *)this + 4);
  *a2 = 0;
  a2[1] = 0;
  if (v3)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t, char *))(*(_QWORD *)v3 + 192))(a2, v3, (char *)this + 104);
    if (!*a2)
    {
      v5 = *((_QWORD *)this + 16);
      if (v5)
      {
        v10 = 0uLL;
        v6 = *(std::__shared_weak_count **)(v5 + 360);
        if (v6)
        {
          *((_QWORD *)&v10 + 1) = std::__shared_weak_count::lock(v6);
          if (*((_QWORD *)&v10 + 1))
            *(_QWORD *)&v10 = *(_QWORD *)(v5 + 352);
        }
        std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)a2, &v10);
        v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
        if (*((_QWORD *)&v10 + 1))
        {
          v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
    }
  }
}

uint64_t IMSCallInfo::startCall(IMSCallInfo *this, const SipUri *a2, const BambiCallOptions *a3, const BambiEmergencyCallOptions *a4)
{
  uint64_t v4;
  std::__shared_weak_count *v9;
  void *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char *v17;
  std::string *v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  ImsPrefs *v29;
  void **RequireRegistrationOnEPSFallbackKey;
  void *v31;
  int v32;
  uint64_t v33;
  SipStack *v34;
  uint64_t v35;
  void *v36;
  std::string::size_type v37;
  unint64_t *v38;
  unint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  const char *v48;
  _QWORD *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  void *__p;
  std::string v55;
  void *v56;
  std::string v57;
  SipStack *v58;
  std::__shared_weak_count *v59;

  if (*((_QWORD *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v56, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::error(ims::_logger, (uint64_t)&v56, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"IMSCallInfo::startCall called on an existing call", 49);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_16:
    *(_BYTE *)(v4 + 17) = 0;
    if (v55.__r_.__value_.__s.__data_[15] < 0)
      operator delete(__p);
    if (v57.__r_.__value_.__s.__data_[15] < 0)
      operator delete(v56);
    return 0;
  }
  if (*((char *)this + 127) < 0)
  {
    if (!*((_QWORD *)this + 14))
      goto LABEL_15;
  }
  else if (!*((_BYTE *)this + 127))
  {
    goto LABEL_15;
  }
  (*(void (**)(void **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 4) + 192))(&v56, *((_QWORD *)this + 4), (char *)this + 104);
  v10 = v56;
  v9 = (std::__shared_weak_count *)v57.__r_.__value_.__r.__words[0];
  if (!v57.__r_.__value_.__r.__words[0])
    goto LABEL_11;
  v11 = (unint64_t *)(v57.__r_.__value_.__r.__words[0] + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_11:
    if (v10)
      goto LABEL_12;
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(&v56, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::error(ims::_logger, (uint64_t)&v56, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"IMSCallInfo::startCall called for invalid stack", 47);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!v10)
    goto LABEL_15;
LABEL_12:
  v58 = 0;
  v59 = 0;
  (*(void (**)(SipStack **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 4) + 192))(&v58, *((_QWORD *)this + 4), (char *)this + 104);
  *((_BYTE *)this + 568) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v56, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v13 = ImsLogger::debug(ims::_logger, (uint64_t)&v56, (uint64_t)&__p);
  if (a4)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Starting emergency call to uri = ", 33);
  else
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Starting call to uri = ", 23);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v13);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  if (v55.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  if (v57.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v56);
  v16 = operator new();
  v17 = (char *)this + 584;
  bzero((void *)v16, 0x300uLL);
  *(_DWORD *)(v16 + 48) = 90;
  *(_BYTE *)(v16 + 56) = 1;
  *(_BYTE *)(v16 + 58) = 1;
  *(_QWORD *)(v16 + 60) = 0x200000001;
  *(_WORD *)(v16 + 69) = 257;
  *(_QWORD *)(v16 + 71) = 0;
  *(_WORD *)(v16 + 79) = 256;
  *(_OWORD *)(v16 + 152) = 0u;
  *(_OWORD *)(v16 + 168) = 0u;
  *(_DWORD *)(v16 + 88) = 0;
  *(_BYTE *)(v16 + 92) = 0;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 128) = 0u;
  *(_BYTE *)(v16 + 144) = 0;
  *(_QWORD *)(v16 + 184) = 0x40A7700000000000;
  *(_OWORD *)(v16 + 192) = 0u;
  *(_OWORD *)(v16 + 208) = 0u;
  *(_OWORD *)(v16 + 224) = 0u;
  *(_OWORD *)(v16 + 240) = 0u;
  *(_OWORD *)(v16 + 256) = 0u;
  *(_OWORD *)(v16 + 272) = 0u;
  *(_OWORD *)(v16 + 288) = 0u;
  *(_OWORD *)(v16 + 304) = 0u;
  *(_BYTE *)(v16 + 320) = 0;
  *(_QWORD *)(v16 + 408) = 0;
  *(_QWORD *)(v16 + 416) = 0;
  *(_QWORD *)(v16 + 384) = 0;
  *(_QWORD *)(v16 + 392) = 0;
  *(_QWORD *)(v16 + 368) = &off_1E78D08F8;
  *(_QWORD *)(v16 + 376) = 0;
  *(_WORD *)(v16 + 400) = 0;
  *(_QWORD *)(v16 + 440) = 0;
  *(_QWORD *)(v16 + 448) = 0;
  *(_QWORD *)(v16 + 424) = &off_1E78B82D8;
  *(_QWORD *)(v16 + 432) = v16 + 440;
  *(_BYTE *)(v16 + 457) = 1;
  *(_QWORD *)(v16 + 360) = &off_1E78BFCE8;
  *(_OWORD *)(v16 + 464) = 0u;
  *(_OWORD *)(v16 + 480) = 0u;
  *(_OWORD *)(v16 + 496) = 0u;
  *(_OWORD *)(v16 + 512) = 0u;
  *(_OWORD *)(v16 + 528) = 0u;
  *(_OWORD *)(v16 + 544) = 0u;
  *(_OWORD *)(v16 + 560) = 0u;
  *(_OWORD *)(v16 + 576) = 0u;
  *(_OWORD *)(v16 + 592) = 0u;
  *(_OWORD *)(v16 + 608) = 0u;
  *(_OWORD *)(v16 + 624) = 0u;
  *(_OWORD *)(v16 + 640) = 0u;
  *(_OWORD *)(v16 + 656) = 0u;
  *(_QWORD *)(v16 + 672) = 0;
  *(_QWORD *)(v16 + 688) = &off_1E78B82D8;
  *(_QWORD *)(v16 + 712) = 0;
  *(_QWORD *)(v16 + 704) = 0;
  *(_QWORD *)(v16 + 696) = v16 + 704;
  *(_QWORD *)(v16 + 728) = &off_1E78B82D8;
  *(_QWORD *)(v16 + 744) = 0;
  *(_QWORD *)(v16 + 752) = 0;
  *(_QWORD *)(v16 + 736) = v16 + 744;
  *(_BYTE *)(v16 + 456) = 1;
  *(_WORD *)(v16 + 720) = 257;
  *(_WORD *)(v16 + 760) = 257;
  std::unique_ptr<IMSCallInfo::DialInfo>::reset[abi:ne180100]((uint64_t *)this + 73, v16);
  if (a4)
  {
    v18 = (std::string *)operator new();
    BambiEmergencyCallOptions::BambiEmergencyCallOptions(v18, a4);
  }
  else
  {
    v18 = 0;
  }
  **(_QWORD **)v17 = v18;
  v19 = *(_QWORD **)v17;
  *((_WORD *)v19 + 4) = *(_WORD *)a3;
  std::string::operator=((std::string *)(v19 + 2), (const std::string *)((char *)a3 + 8));
  v20 = *((_OWORD *)a3 + 2);
  v21 = *((_OWORD *)a3 + 3);
  v22 = *((_OWORD *)a3 + 4);
  *(_QWORD *)((char *)v19 + 85) = *(_QWORD *)((char *)a3 + 77);
  *(_OWORD *)(v19 + 9) = v22;
  *(_OWORD *)(v19 + 7) = v21;
  *(_OWORD *)(v19 + 5) = v20;
  std::string::operator=((std::string *)v19 + 4, (const std::string *)((char *)a3 + 88));
  std::string::operator=((std::string *)v19 + 5, (const std::string *)((char *)a3 + 112));
  *((_BYTE *)v19 + 144) = *((_BYTE *)a3 + 136);
  v23 = *((_OWORD *)a3 + 9);
  v24 = *((_OWORD *)a3 + 10);
  *(_OWORD *)(v19 + 23) = *((_OWORD *)a3 + 11);
  *(_OWORD *)(v19 + 21) = v24;
  *(_OWORD *)(v19 + 19) = v23;
  std::string::operator=((std::string *)(v19 + 25), (const std::string *)a3 + 8);
  std::string::operator=((std::string *)(v19 + 28), (const std::string *)a3 + 9);
  std::string::operator=((std::string *)(v19 + 31), (const std::string *)a3 + 10);
  std::string::operator=((std::string *)(v19 + 34), (const std::string *)a3 + 11);
  std::string::operator=((std::string *)(v19 + 37), (const std::string *)a3 + 12);
  *((_BYTE *)v19 + 320) = *((_BYTE *)a3 + 312);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v19 + 41), (const std::string *)((char *)a3 + 320));
  SipUri::operator=((SipUri *)(*(_QWORD *)v17 + 360), (uint64_t)a2);
  *((_BYTE *)this + 573) = 1;
  if (a4 || v58 && *((_BYTE *)v58 + 176))
  {
    *((_BYTE *)this + 568) = 1;
    std::string::basic_string[abi:ne180100]<0>(&v56, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v25 = ImsLogger::debug(ims::_logger, (uint64_t)&v56, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Not checking access barring for emergency call", 46);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    if (v55.__r_.__value_.__s.__data_[15] < 0)
      operator delete(__p);
    if (v57.__r_.__value_.__s.__data_[15] < 0)
      operator delete(v56);
LABEL_43:
    *((_DWORD *)this + 144) = 1;
    v56 = off_1E78C0288;
    v27 = (_OWORD *)((char *)this + 80);
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&v57, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    }
    else
    {
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *v27;
      v57.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
    }
    v28 = *((_QWORD *)this + 3);
    __p = off_1E78C0288;
    if (*(char *)(v28 + 199) < 0)
      std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)(v28 + 176), *(_QWORD *)(v28 + 184));
    else
      v55 = *(std::string *)(v28 + 176);
    if (ImsUuid::operator==((uint64_t)&v56, (uint64_t)&__p))
    {
      v29 = (ImsPrefs *)SipStack::prefs(v58);
      RequireRegistrationOnEPSFallbackKey = (void **)ImsPrefs::getRequireRegistrationOnEPSFallbackKey(v29);
      v31 = ImsPrefs::prefWithKey(v29, RequireRegistrationOnEPSFallbackKey);
      if (v31)
        v32 = (*(uint64_t (**)(void *))(*(_QWORD *)v31 + 40))(v31);
      else
        v32 = *((_BYTE *)RequireRegistrationOnEPSFallbackKey + 57) != 0;
      __p = off_1E78C0288;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      v56 = off_1E78C0288;
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (v32)
      {
        std::string::basic_string[abi:ne180100]<0>(&v56, "call");
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v33 = ImsLogger::debug(ims::_logger, (uint64_t)&v56, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"This is an EPS Fallback redial requiring reregistration.", 56);
        *(_BYTE *)(v33 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v33 + 17) = 0;
        if (v55.__r_.__value_.__s.__data_[15] < 0)
          operator delete(__p);
        if (v57.__r_.__value_.__s.__data_[15] < 0)
          operator delete(v56);
        v34 = v58;
        if (!ims::AccessNetwork::isLTE((ims::AccessNetwork *)((char *)v58 + 3136)))
        {
          std::string::basic_string[abi:ne180100]<0>(&v56, "call");
          std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
          v43 = ims::debug((uint64_t)&v56, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)"SIP stack is still using access network ", 40);
          *(_BYTE *)(v43 + 17) = 0;
          v42 = (_BYTE *)ims::operator<<(v43, (uint64_t)v58 + 3136);
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_74;
        }
        v35 = *((_QWORD *)v34 + 18);
        v36 = *(void **)(v35 + 248);
        v37 = *(_QWORD *)(v35 + 256);
        v56 = v36;
        v57.__r_.__value_.__r.__words[0] = v37;
        if (v37)
        {
          v38 = (unint64_t *)(v37 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v36 + 120))(v36))
        {
          v40 = SipStack::registered(v58);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v56);
          if (v40)
          {
            std::string::basic_string[abi:ne180100]<0>(&v56, "call");
            std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
            v41 = ims::debug((uint64_t)&v56, (uint64_t)&__p);
            v42 = (_BYTE *)ImsOutStream::operator<<(v41, "LTE reregistration in-process.");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_74:
            v42[17] = 0;
            if (v55.__r_.__value_.__s.__data_[15] < 0)
              operator delete(__p);
            if (v57.__r_.__value_.__s.__data_[15] < 0)
              operator delete(v56);
            goto LABEL_78;
          }
        }
        else
        {
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v56);
        }
      }
    }
    else
    {
      __p = off_1E78C0288;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      v56 = off_1E78C0288;
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
    }
    v56 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&v57, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    }
    else
    {
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *v27;
      v57.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
    }
    v44 = *((_QWORD *)this + 3);
    __p = off_1E78C0288;
    if (*(char *)(v44 + 199) < 0)
      std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)(v44 + 176), *(_QWORD *)(v44 + 184));
    else
      v55 = *(std::string *)(v44 + 176);
    v45 = ImsUuid::operator==((uint64_t)&v56, (uint64_t)&__p);
    if (v45)
      LOBYTE(v45) = ims::AccessNetwork::isLTE((ims::AccessNetwork *)((char *)v58 + 3136));
    *((_BYTE *)this + 664) = v45;
    __p = off_1E78C0288;
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    v56 = off_1E78C0288;
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v56, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v46 = ImsLogger::debug(ims::_logger, (uint64_t)&v56, (uint64_t)&__p);
    v47 = (_BYTE *)v46;
    if (*((_BYTE *)this + 664))
      v48 = "This is an EpsFallbackCall";
    else
      v48 = "This is not an EpsFallbackCall";
    v49 = *(_QWORD **)(v46 + 8);
    if (*((_BYTE *)this + 664))
      v50 = 26;
    else
      v50 = 30;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v48, v50);
    v47[17] = 0;
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v47[17] = 0;
    if (v55.__r_.__value_.__s.__data_[15] < 0)
      operator delete(__p);
    if (v57.__r_.__value_.__s.__data_[15] < 0)
      operator delete(v56);
    v14 = IMSCallInfo::startCall(this);
    goto LABEL_103;
  }
  if (!BambiAccessBarring::isServiceBarred((uint64_t **)v58 + 363, 1))
    goto LABEL_43;
  std::string::basic_string[abi:ne180100]<0>(&v56, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
  v26 = ims::error((uint64_t)&v56, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"unable to initialize voice call due to access barring", 53);
  *(_BYTE *)(v26 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v26 + 17) = 0;
  if (v55.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  if (v57.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v56);
  IMSCallInfo::sendAccessBarringDisconnect(this);
LABEL_78:
  v14 = 1;
LABEL_103:
  v51 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  return v14;
}

void sub_1BEEA0318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<IMSCallInfo::DialInfo>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    SipUri::~SipUri((SipUri *)(v2 + 360));
    BambiCallOptions::~BambiCallOptions((void **)(v2 + 8));
    JUMPOUT(0x1C3B87100);
  }
  return result;
}

void IMSCallInfo::sendAccessBarringDisconnect(IMSCallInfo *this)
{
  const __CFString *v2;
  ImsPrefs *v3;
  void **CSFBOnAccessBarredKey;
  void *v5;
  uint64_t v6;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[6];
  __int16 v12;
  char v13;
  std::string v14;
  int v15;
  char v16;
  std::string v17;
  std::string v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  SipStack *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::string v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[4];

  v25 = 65792;
  v27 = 0;
  memset(&v26, 0, sizeof(v26));
  v28 = 0u;
  memset(v29, 0, sizeof(v29));
  std::string::__assign_external(&v26, "SessionTerminated:AccessBarring", 0x1FuLL);
  LODWORD(v27) = 4;
  v23 = 0;
  v24 = 0;
  (*(void (**)(SipStack **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 4) + 192))(&v23, *((_QWORD *)this + 4), (char *)this + 104);
  v2 = CFSTR("kIMSCallDisconnectionReasonAccessBarring");
  if (!v23)
    goto LABEL_17;
  v3 = (ImsPrefs *)SipStack::prefs(v23);
  CSFBOnAccessBarredKey = (void **)ImsPrefs::getCSFBOnAccessBarredKey(v3);
  v5 = ImsPrefs::prefWithKey(v3, CSFBOnAccessBarredKey);
  if (v5)
  {
    if (!(*(unsigned int (**)(void *))(*(_QWORD *)v5 + 40))(v5))
      goto LABEL_17;
  }
  else if (!*((_BYTE *)CSFBOnAccessBarredKey + 57))
  {
    goto LABEL_17;
  }
  if (*((_DWORD *)v23 + 50) == 2
    && *(_BYTE *)(SipUserAgent::config(*((SipUserAgent **)v23 + 18)) + 456)
    && !*(_BYTE *)(SipUserAgent::config(*((SipUserAgent **)v23 + 18)) + 912)
    && !ims::AccessNetwork::isNR((ims::AccessNetwork *)((char *)v23 + 3136)))
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    v6 = ims::error((uint64_t)v21, (uint64_t)__p);
    v7 = (_BYTE *)ImsOutStream::operator<<(v6, "IMSCallInfo::sendAccessBarringDisconnect falling back to CS");
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v7[17] = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (v22 < 0)
      operator delete(v21[0]);
    v2 = CFSTR("kCallDisconnectionReasonRequiresCSFB");
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      *v26.__r_.__value_.__l.__data_ = 0;
      v26.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v26.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
    }
  }
LABEL_17:
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZN11IMSCallInfo27sendAccessBarringDisconnectEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_44;
  v11[4] = this;
  v11[5] = v2;
  v12 = v25;
  v13 = BYTE2(v25);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v14, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  else
    v14 = v26;
  v15 = v27;
  v16 = BYTE4(v27);
  if (SHIBYTE(v29[0]) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, (const std::string::value_type *)v28, *((std::string::size_type *)&v28 + 1));
  }
  else
  {
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v28;
    v17.__r_.__value_.__r.__words[2] = v29[0];
  }
  if (SHIBYTE(v29[3]) < 0)
    std::string::__init_copy_ctor_external(&v18, (const std::string::value_type *)v29[1], v29[2]);
  else
    v18 = *(std::string *)&v29[1];
  ims::performBlock((IMSClientManager *)v11);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  v8 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SHIBYTE(v29[3]) < 0)
    operator delete((void *)v29[1]);
  if (SHIBYTE(v29[0]) < 0)
    operator delete((void *)v28);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_1BEEA080C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (a44 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v44 - 176);
  ims::DisconnectInfo::~DisconnectInfo((void **)(v44 - 160));
  _Unwind_Resume(a1);
}

uint64_t ImsUuid::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 31);
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 16);
  if (v3 != v4)
    return 0;
  v6 = (const void **)(a1 + 8);
  v9 = *(unsigned __int8 **)(a2 + 8);
  v7 = (unsigned __int8 *)(a2 + 8);
  v8 = v9;
  if (v5 < 0)
    v7 = v8;
  if ((v2 & 0x80) != 0)
    return memcmp(*v6, v7, *(_QWORD *)(a1 + 16)) == 0;
  if (!*(_BYTE *)(a1 + 31))
    return 1;
  v10 = v2 - 1;
  do
  {
    v12 = *(unsigned __int8 *)v6;
    v6 = (const void **)((char *)v6 + 1);
    v11 = v12;
    v14 = *v7++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t IMSCallInfo::startCall(IMSCallInfo *this)
{
  uint64_t v2;
  void (**v3)(ImsUuid *__hidden);
  uint64_t v4;
  void (**v5)(ImsUuid *__hidden);
  ims::AccessNetwork *v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  std::string __p;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;

  if (*((_DWORD *)this + 144) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "call");
    std::string::basic_string[abi:ne180100]<0>(v20, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::warn(ims::_logger, (uint64_t)v22, (uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Not waiting to dial call ", 25);
    *(_BYTE *)(v4 + 17) = 0;
    v18 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
      v5 = (void (**)(ImsUuid *__hidden))v18;
    }
    else
    {
      __p = *(std::string *)((char *)this + 80);
      v5 = off_1E78C0288;
    }
    ((void (*)(uint64_t, uint64_t))v5[2])((uint64_t)&v18, v4);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    v18 = off_1E78C0288;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v21 < 0)
      operator delete(v20[0]);
    if (v23 < 0)
      operator delete(v22[0]);
    return 1;
  }
  if (!capabilities::radio::mav20Plus(this))
    return IMSCallInfo::continueCall(this);
  std::string::basic_string[abi:ne180100]<0>(v22, "call");
  std::string::basic_string[abi:ne180100]<0>(v20, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::info(ims::_logger, (uint64_t)v22, (uint64_t)v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Checking UAC access barring before dialing call ", 48);
  *(_BYTE *)(v2 + 17) = 0;
  v18 = off_1E78C0288;
  if (*((char *)this + 103) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    v3 = (void (**)(ImsUuid *__hidden))v18;
  }
  else
  {
    __p = *(std::string *)((char *)this + 80);
    v3 = off_1E78C0288;
  }
  ((void (*)(uint64_t, uint64_t))v3[2])((uint64_t)&v18, v2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v18 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(v20[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  IMSCallManager::sendCallStatusRequest(*((_QWORD *)this + 3), (uint64_t)this + 104, 0, 1, *((_BYTE *)this + 568));
  (*(void (**)(void **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 4) + 192))(&v18, *((_QWORD *)this + 4), (char *)this + 104);
  v7 = (ims::AccessNetwork *)((char *)v18 + 3136);
  if (!ims::AccessNetwork::isLTE((ims::AccessNetwork *)((char *)v18 + 3136)) && !ims::AccessNetwork::isNR(v7))
  {
    v15 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      v16 = (unint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    goto LABEL_30;
  }
  v8 = *((unsigned __int8 *)this + 568);
  v9 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v10 = (unint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v8)
    return 1;
LABEL_30:
  std::string::basic_string[abi:ne180100]<0>(&v18, "call");
  std::string::basic_string[abi:ne180100]<0>(v22, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v12 = ImsLogger::debug(ims::_logger, (uint64_t)&v18, (uint64_t)v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Not waiting for UAC check ", 26);
  *(_BYTE *)(v12 + 17) = 0;
  if (*((_BYTE *)this + 568))
    v13 = "for emergency call";
  else
    v13 = "while on WiFi";
  if (*((_BYTE *)this + 568))
    v14 = 18;
  else
    v14 = 13;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)v13, v14);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  if (v23 < 0)
    operator delete(v22[0]);
  if (__p.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v18);
  return IMSCallInfo::continueCall(this);
}

void sub_1BEEA0D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::sendCallStatusRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  AnalyticsLogger **v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  AnalyticsLogger **v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26;
  std::__shared_weak_count *v27;
  char v28;
  int v29;
  char v30;

  v5 = a3;
  v29 = a3;
  IPTelephonyManager::sendCallStatusRequest(*(_QWORD *)(a1 + 24), a2, a3, 1, a4, a5);
  std::string::basic_string[abi:ne180100]<0>(&v26, "call");
  std::string::basic_string[abi:ne180100]<0>(v24, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v26, (uint64_t)v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Voice call ", 11);
  *(_BYTE *)(v8 + 17) = 0;
  ims::toString<UacCallStatus>(&v29, __p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, __p);
  v9 = *(_QWORD **)(v8 + 8);
  v30 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v30, 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v23 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v28 < 0)
  {
    operator delete(v26);
    if (v5)
      goto LABEL_7;
  }
  else if (v5)
  {
LABEL_7:
    if (v5 == 2)
    {
      v10 = *(_QWORD *)(a1 + 24);
      v11 = *(AnalyticsLogger ***)(v10 + 288);
      v12 = *(std::__shared_weak_count **)(v10 + 296);
      v26 = v11;
      v27 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      AnalyticsLogger::setCallActive(v11[15], 0);
      if (v12)
      {
        v15 = (unint64_t *)&v12->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
LABEL_22:
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        return;
      }
    }
    return;
  }
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(AnalyticsLogger ***)(v17 + 288);
  v12 = *(std::__shared_weak_count **)(v17 + 296);
  v26 = v18;
  v27 = v12;
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  AnalyticsLogger::setCallActive(v18[15], 1);
  if (v12)
  {
    v21 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v21);
    while (__stlxr(v16 - 1, v21));
    goto LABEL_22;
  }
}

void sub_1BEEA100C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t IMSCallInfo::continueCall(IMSCallInfo *this)
{
  std::string *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void **v6;
  unsigned __int8 *v7;
  uint64_t v8;
  void (**v9)(ImsUuid *__hidden);
  uint64_t v10;
  void (**v11)(ImsUuid *__hidden);
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _BOOL4 v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  __CFString **v25;
  uint64_t v26;
  const __CFString *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::string::size_type v45;
  std::string::size_type v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  std::string::size_type v50;
  std::string::size_type v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *size;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  __CFString **v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void (**v81)(ImsUuid *__hidden);
  std::string v82;
  uint64_t v83[2];
  uint64_t v84;
  std::__shared_weak_count *v85;
  _QWORD v86[6];
  __int16 v87;
  char v88;
  std::string v89;
  int v90;
  char v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string __p;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[32];
  uint64_t v100;
  __int128 v101;
  _QWORD v102[4];
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  void (**v107)(ImsResult *__hidden);
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;

  v2 = (std::string *)((char *)this + 592);
  ims::AccessNetwork::clear((uint64_t)this + 592);
  v116 = 0;
  v117 = 0;
  IMSCallInfo::stack(this, &v116);
  v3 = v116;
  if (v116)
  {
    std::string::operator=(v2, (const std::string *)(v116 + 3136));
    std::string::operator=((std::string *)((char *)this + 616), (const std::string *)(v3 + 3160));
    v4 = *(_OWORD *)(v3 + 3184);
    *((_BYTE *)this + 656) = *(_BYTE *)(v3 + 3200);
    *((_OWORD *)this + 40) = v4;
    std::string::basic_string[abi:ne180100]<0>(v99, "call");
    std::string::basic_string[abi:ne180100]<0>(&v107, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::debug(ims::_logger, (uint64_t)v99, (uint64_t)&v107);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"ANI at call start: ", 19);
    *(_BYTE *)(v5 + 17) = 0;
    LoggableString::LoggableString(&__p, v2);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 40))(v5, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v109) < 0)
      operator delete(v107);
    if ((v99[23] & 0x80000000) != 0)
      operator delete(*(void **)v99);
  }
  if (*((_DWORD *)this + 144) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v107, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::warn(ims::_logger, (uint64_t)&v107, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Not waiting to dial call ", 25);
    *(_BYTE *)(v8 + 17) = 0;
    *(_QWORD *)v99 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v99[8], *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
      v9 = *(void (***)(ImsUuid *__hidden))v99;
    }
    else
    {
      *(_OWORD *)&v99[8] = *((_OWORD *)this + 5);
      *(_QWORD *)&v99[24] = *((_QWORD *)this + 12);
      v9 = off_1E78C0288;
    }
    ((void (*)(uint64_t, uint64_t))v9[2])((uint64_t)v99, v8);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    *(_QWORD *)v99 = off_1E78C0288;
    if ((v99[31] & 0x80000000) != 0)
      operator delete(*(void **)&v99[8]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v109) < 0)
      operator delete(v107);
    goto LABEL_183;
  }
  *((_DWORD *)this + 144) = 2;
  if (*((_QWORD *)this + 73))
  {
    v109 = 0;
    v110 = 0;
    v114 = 0;
    v115 = 0;
    v112 = 0;
    v113 = 0;
    v107 = &off_1E78B7238;
    v108 = &_bambiDomain;
    v111 = 0;
    v105 = 0;
    v106 = 0;
    v6 = (void **)((char *)this + 104);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, char *))(**((_QWORD **)this + 4) + 192))(&v105, *((_QWORD *)this + 4), (char *)this + 104);
    v103 = 0;
    v104 = 0;
    v7 = (unsigned __int8 *)*((_QWORD *)this + 4);
    if (*(char *)(v105 + 4159) < 0)
      std::string::__init_copy_ctor_external((std::string *)v99, *(const std::string::value_type **)(v105 + 4136), *(_QWORD *)(v105 + 4144));
    else
      *(std::string *)v99 = *(std::string *)(v105 + 4136);
    BambiClient::initializeCallToRemoteUri(v7, (std::string *)v99, (const SipUri *)(*((_QWORD *)this + 73) + 360), (uint64_t)this, (const BambiCallOptions *)(*((_QWORD *)this + 73) + 8), **((_QWORD **)this + 73), (uint64_t)&v107, (uint64_t)&v103);
    if ((v99[23] & 0x80000000) != 0)
      operator delete(*(void **)v99);
    v12 = v103;
    if (v103)
    {
      v13 = *(std::__shared_weak_count **)(v103 + 360);
      if (v13)
      {
        v14 = std::__shared_weak_count::lock(v13);
        if (v14)
        {
          v15 = v14;
          if (!*(_QWORD *)(v12 + 352))
          {
            p_shared_owners = (unint64_t *)&v14->__shared_owners_;
            do
              v31 = __ldaxr(p_shared_owners);
            while (__stlxr(v31 - 1, p_shared_owners));
LABEL_134:
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
            goto LABEL_136;
          }
          v16 = v103;
          v17 = *(std::__shared_weak_count **)(v103 + 360);
          if (v17 && (v18 = std::__shared_weak_count::lock(v17)) != 0)
          {
            v19 = v18;
            v20 = *(_QWORD *)(v16 + 352) != v105;
            v21 = (unint64_t *)&v18->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          else
          {
            v20 = v105 != 0;
          }
          v28 = (unint64_t *)&v15->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (v29)
          {
            if (!v20)
              goto LABEL_136;
LABEL_65:
            std::string::basic_string[abi:ne180100]<0>(v99, "call");
            std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v32 = ImsLogger::warn(ims::_logger, (uint64_t)v99, (uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"desired stack (", 15);
            *(_BYTE *)(v32 + 17) = 0;
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v32 + 32))(v32, (char *)this + 104);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)") not equal to actual stack (", 29);
            *(_BYTE *)(v32 + 17) = 0;
            v33 = v103;
            v84 = 0;
            v85 = 0;
            v34 = *(std::__shared_weak_count **)(v103 + 360);
            if (v34)
            {
              v35 = std::__shared_weak_count::lock(v34);
              v85 = v35;
              if (v35)
              {
                v36 = *(_QWORD *)(v33 + 352);
                v84 = v36;
                goto LABEL_107;
              }
            }
            else
            {
              v35 = 0;
            }
            v36 = 0;
LABEL_107:
            if (*(char *)(v36 + 4159) < 0)
              std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)(v36 + 4136), *(_QWORD *)(v36 + 4144));
            else
              v94 = *(std::string *)(v36 + 4136);
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v32 + 32))(v32, &v94);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)")", 1);
            *(_BYTE *)(v32 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v32 + 17) = 0;
            if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v94.__r_.__value_.__l.__data_);
            if (v35)
            {
              v41 = (unint64_t *)&v35->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if ((v99[23] & 0x80000000) != 0)
              operator delete(*(void **)v99);
            v43 = v103;
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
            v44 = *(std::__shared_weak_count **)(v103 + 360);
            if (v44)
            {
              v15 = std::__shared_weak_count::lock(v44);
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
              if (v15)
              {
                v45 = *(_QWORD *)(v43 + 352);
                __p.__r_.__value_.__r.__words[0] = v45;
LABEL_126:
                if (*(char *)(v45 + 4159) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v99, *(const std::string::value_type **)(v45 + 4136), *(_QWORD *)(v45 + 4144));
                }
                else
                {
                  v46 = v45 + 4136;
                  *(_OWORD *)v99 = *(_OWORD *)v46;
                  *(_QWORD *)&v99[16] = *(_QWORD *)(v46 + 16);
                }
                if (*((char *)this + 127) < 0)
                  operator delete(*v6);
                *(_OWORD *)v6 = *(_OWORD *)v99;
                *((_QWORD *)this + 15) = *(_QWORD *)&v99[16];
                v99[23] = 0;
                v99[0] = 0;
                if (!v15)
                  goto LABEL_136;
                v47 = (unint64_t *)&v15->__shared_owners_;
                do
                  v31 = __ldaxr(v47);
                while (__stlxr(v31 - 1, v47));
                goto LABEL_134;
              }
            }
            else
            {
              v15 = 0;
            }
            v45 = 0;
            goto LABEL_126;
          }
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          if (v20)
            goto LABEL_65;
        }
      }
LABEL_136:
      std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)this + 16, &v103);
      v48 = *((_QWORD *)this + 3);
      if (*(char *)(v48 + 199) < 0)
      {
        **(_BYTE **)(v48 + 176) = 0;
        *(_QWORD *)(v48 + 184) = 0;
      }
      else
      {
        *(_BYTE *)(v48 + 176) = 0;
        *(_BYTE *)(v48 + 199) = 0;
      }
      std::unique_ptr<IMSCallInfo::DialInfo>::reset[abi:ne180100]((uint64_t *)this + 73, 0);
      v49 = *((_QWORD *)this + 3);
      v50 = *(_QWORD *)(v49 + 24);
      v51 = *(_QWORD *)(v49 + 32);
      __p.__r_.__value_.__r.__words[0] = v50;
      __p.__r_.__value_.__l.__size_ = v51;
      if (v51)
      {
        v52 = (unint64_t *)(v51 + 8);
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      v54 = *(_QWORD *)(v50 + 288);
      v55 = *(_QWORD *)(v50 + 296);
      *(_QWORD *)v99 = v54;
      *(_QWORD *)&v99[8] = v55;
      if (v55)
      {
        v56 = (unint64_t *)(v55 + 8);
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      v58 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
      v83[0] = *((_QWORD *)this + 16);
      v83[1] = (uint64_t)v58;
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      IMSMetricsManager::logSessionRequestedEvent(v54, v83, *((unsigned __int8 *)this + 40), 1);
      if (v58)
      {
        v61 = (unint64_t *)&v58->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v63 = *(std::__shared_weak_count **)&v99[8];
      if (*(_QWORD *)&v99[8])
      {
        v64 = (unint64_t *)(*(_QWORD *)&v99[8] + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v67 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v69 = *((_QWORD *)this + 3);
      v81 = off_1E78C0288;
      if (*((char *)this + 103) < 0)
        std::string::__init_copy_ctor_external(&v82, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
      else
        v82 = *(std::string *)((char *)this + 80);
      if (*((_BYTE *)this + 569))
        v70 = kIMSCallStatusPulling;
      else
        v70 = kIMSCallStatusDialing;
      (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), __CFString *, _QWORD, _QWORD))(*(_QWORD *)v69 + 232))(v69, &v81, *v70, *((unsigned __int8 *)this + 40), 0);
      v81 = off_1E78C0288;
      if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_172;
      v40 = (void *)v82.__r_.__value_.__r.__words[0];
LABEL_171:
      operator delete(v40);
LABEL_172:
      v71 = v104;
      if (v104)
      {
        v72 = (unint64_t *)&v104->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v74 = v106;
      if (v106)
      {
        v75 = (unint64_t *)&v106->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      ImsResult::~ImsResult((ImsResult *)&v107);
LABEL_183:
      v23 = 1;
      goto LABEL_184;
    }
    *(_QWORD *)v99 = 256;
    v100 = 0;
    memset(&v99[8], 0, 24);
    v101 = 0u;
    memset(v102, 0, sizeof(v102));
    v96 = 0u;
    v97 = 0u;
    v98 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&SessionTerminatedResultDomain::_domain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 28;
    if (v108 == &SessionTerminatedResultDomain::_domain)
    {
      v24 = v109;
      ImsResult::~ImsResult((ImsResult *)&__p);
      if (v24 == 28)
      {
        std::string::__assign_external((std::string *)&v99[8], "SessionTerminated:OnEmergencyCall", 0x21uLL);
        v25 = kIMSCallDisconnectionReasonOnEmergencyCall;
        goto LABEL_73;
      }
    }
    else
    {
      ImsResult::~ImsResult((ImsResult *)&__p);
    }
    if (*(_DWORD *)(v105 + 200) != 2
      || !*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(v105 + 144)) + 456)
      || *(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(v105 + 144)) + 912))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "call");
      std::string::basic_string[abi:ne180100]<0>(&v94, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v26 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v94);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"IMSCallInfo::continueCall not falling back to CS", 48);
      *(_BYTE *)(v26 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v26 + 17) = 0;
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      v27 = CFSTR("kCallDisconnectionReasonUnknownError");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_74;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v94, (char *)&str_1_10);
    v37 = ims::error((uint64_t)&__p, (uint64_t)&v94);
    v38 = (_BYTE *)ImsOutStream::operator<<(v37, "IMSCallInfo::continueCall falling back to CS");
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v38[17] = 0;
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v25 = kIMSCallDisconnectionReasonRequiresCSFB;
LABEL_73:
    v27 = *v25;
LABEL_74:
    LODWORD(v100) = 4;
    v99[2] = 1;
    v86[0] = MEMORY[0x1E0C809B0];
    v86[1] = 1174405120;
    v86[2] = ___ZN11IMSCallInfo12continueCallEv_block_invoke;
    v86[3] = &__block_descriptor_tmp_4;
    v86[4] = this;
    v86[5] = v27;
    v87 = *(_WORD *)v99;
    v88 = 1;
    if ((v99[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)&v99[8], *(std::string::size_type *)&v99[16]);
    else
      v89 = *(std::string *)&v99[8];
    v90 = v100;
    v91 = BYTE4(v100);
    if (SHIBYTE(v102[0]) < 0)
    {
      std::string::__init_copy_ctor_external(&v92, (const std::string::value_type *)v101, *((std::string::size_type *)&v101 + 1));
    }
    else
    {
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v101;
      v92.__r_.__value_.__r.__words[2] = v102[0];
    }
    if (SHIBYTE(v102[3]) < 0)
      std::string::__init_copy_ctor_external(&v93, (const std::string::value_type *)v102[1], v102[2]);
    else
      v93 = *(std::string *)&v102[1];
    ims::performBlock((IMSClientManager *)v86);
    v39 = **((_QWORD **)this + 73);
    if (v39)
    {
      if (*(char *)(v39 + 4671) < 0)
        operator delete(*(void **)(v39 + 4648));
      SipUri::~SipUri((SipUri *)(v39 + 4240));
      SipStackConfig::~SipStackConfig((void **)(v39 + 1752));
      SipRegistrationConfig::~SipRegistrationConfig((void **)(v39 + 80));
      if (*(char *)(v39 + 71) < 0)
        operator delete(*(void **)(v39 + 48));
      if (*(char *)(v39 + 47) < 0)
        operator delete(*(void **)(v39 + 24));
      if (*(char *)(v39 + 23) < 0)
        operator delete(*(void **)v39);
      MEMORY[0x1C3B87100](v39, 0x10B2C400D6AAD2CLL);
    }
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    if (SHIBYTE(v102[3]) < 0)
      operator delete((void *)v102[1]);
    if (SHIBYTE(v102[0]) < 0)
      operator delete((void *)v101);
    if ((v99[31] & 0x80000000) == 0)
      goto LABEL_172;
    v40 = *(void **)&v99[8];
    goto LABEL_171;
  }
  std::string::basic_string[abi:ne180100]<0>(&v107, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::warn(ims::_logger, (uint64_t)&v107, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"No dial information cached for ", 31);
  *(_BYTE *)(v10 + 17) = 0;
  *(_QWORD *)v99 = off_1E78C0288;
  if (*((char *)this + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v99[8], *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    v11 = *(void (***)(ImsUuid *__hidden))v99;
  }
  else
  {
    *(_OWORD *)&v99[8] = *((_OWORD *)this + 5);
    *(_QWORD *)&v99[24] = *((_QWORD *)this + 12);
    v11 = off_1E78C0288;
  }
  ((void (*)(uint64_t, uint64_t))v11[2])((uint64_t)v99, v10);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  *(_QWORD *)v99 = off_1E78C0288;
  if ((v99[31] & 0x80000000) != 0)
    operator delete(*(void **)&v99[8]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v109) < 0)
    operator delete(v107);
  v23 = 0;
LABEL_184:
  v77 = v117;
  if (v117)
  {
    v78 = (unint64_t *)&v117->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  return v23;
}

void sub_1BEEA1E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *__p)
{
  uint64_t v38;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v38 - 200);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v38 - 184);
  ImsResult::~ImsResult((ImsResult *)(v38 - 168));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v38 - 96);
  _Unwind_Resume(a1);
}

uint64_t ___ZN11IMSCallInfo12continueCallEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  IMSCallManager *v3;
  std::string __p;
  void (**v6)(ImsUuid *__hidden);
  std::string v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(IMSCallManager **)(v2 + 24);
  v6 = off_1E78C0288;
  if (*(char *)(v2 + 103) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v2 + 80), *(_QWORD *)(v2 + 88));
  else
    v7 = *(std::string *)(v2 + 80);
  ims::CFString::asString(*(const __CFString **)(a1 + 40), (const void *)0x8000100, &__p);
  IMSCallManager::sendCallDisconnectionNotification(v3, (uint64_t)&v6, &__p, a1 + 48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = off_1E78C0288;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  *(_BYTE *)(v2 + 571) = 1;
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 24) + 240))(*(_QWORD *)(v2 + 24), v2);
}

void sub_1BEEA219C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::sendCallDisconnectionNotification(IMSCallManager *a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  IMSCallInfo *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::string::size_type size;
  std::string::size_type v23;
  std::string *p_p;
  uint64_t v25;
  std::string *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v32;
  char v33;
  uint64_t v34;
  _BYTE v35[88];
  void (**v36)(ImsUuid *__hidden);
  std::string v37;
  std::string __p;
  std::string v39;

  std::string::basic_string[abi:ne180100]<0>(v35, "call");
  std::string::basic_string[abi:ne180100]<0>(&v39, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v35, (uint64_t)&v39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Sending Call Status Changed notification: disconnection for callid: ", 68);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)", reason = ", 11);
  *(_BYTE *)(v8 + 17) = 0;
  LoggableString::LoggableString(&__p, a3);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 40))(v8, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if ((v35[23] & 0x80000000) != 0)
    operator delete(*(void **)v35);
  v36 = off_1E78C0288;
  v9 = (_OWORD *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *v9;
    v37.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
  }
  v10 = IMSCallManager::callInfoForUuid((uint64_t)a1, (uint64_t)&v36);
  v11 = (IMSCallInfo *)v10;
  v36 = off_1E78C0288;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (!v11)
      goto LABEL_22;
  }
  else if (!v10)
  {
LABEL_22:
    std::string::basic_string[abi:ne180100]<0>(v35, "call");
    std::string::basic_string[abi:ne180100]<0>(&v39, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v16 = ImsLogger::error(ims::_logger, (uint64_t)v35, (uint64_t)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"Unable to disconnect call - unknown stack id", 44);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if ((v35[23] & 0x80000000) != 0)
    {
      v17 = *(void **)v35;
LABEL_77:
      operator delete(v17);
      return;
    }
    return;
  }
  IMSCallInfo::stack(v11, v35);
  v13 = *(_QWORD *)v35;
  v12 = *(std::__shared_weak_count **)&v35[8];
  if (!*(_QWORD *)&v35[8])
    goto LABEL_18;
  v14 = (unint64_t *)(*(_QWORD *)&v35[8] + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v13)
      goto LABEL_22;
  }
  else
  {
LABEL_18:
    if (!v13)
      goto LABEL_22;
  }
  memset(&v39, 0, sizeof(v39));
  IMSCallInfo::stack(v11, v35);
  if (*(char *)(*(_QWORD *)v35 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(*(_QWORD *)v35 + 4136), *(_QWORD *)(*(_QWORD *)v35 + 4144));
  else
    v39 = *(std::string *)(*(_QWORD *)v35 + 4136);
  v18 = *(std::__shared_weak_count **)&v35[8];
  if (*(_QWORD *)&v35[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&v35[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  memset(&v35[3], 0, 85);
  *(_WORD *)v35 = *(_WORD *)a4;
  v35[2] = *(_BYTE *)(a4 + 2);
  if (*(char *)(a4 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v35[8], *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  }
  else
  {
    *(_OWORD *)&v35[8] = *(_OWORD *)(a4 + 8);
    *(_QWORD *)&v35[24] = *(_QWORD *)(a4 + 24);
  }
  *(_DWORD *)&v35[32] = *(_DWORD *)(a4 + 32);
  v35[36] = *(_BYTE *)(a4 + 36);
  if (*(char *)(a4 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v35[40], *(const std::string::value_type **)(a4 + 40), *(_QWORD *)(a4 + 48));
  }
  else
  {
    *(_OWORD *)&v35[40] = *(_OWORD *)(a4 + 40);
    *(_QWORD *)&v35[56] = *(_QWORD *)(a4 + 56);
  }
  if (*(char *)(a4 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v35[64], *(const std::string::value_type **)(a4 + 64), *(_QWORD *)(a4 + 72));
  }
  else
  {
    *(_OWORD *)&v35[64] = *(_OWORD *)(a4 + 64);
    *(_QWORD *)&v35[80] = *(_QWORD *)(a4 + 80);
  }
  ims::CFString::asString(CFSTR("kCallDisconnectionReasonNormal"), (const void *)0x8000100, &__p);
  v21 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((v21 & 0x80u) == 0)
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    size = a3->__r_.__value_.__l.__size_;
  v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v23 = __p.__r_.__value_.__l.__size_;
  if (size == v23)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v21 & 0x80) != 0)
    {
      v33 = memcmp(a3->__r_.__value_.__l.__data_, p_p, a3->__r_.__value_.__l.__size_) == 0;
    }
    else if (*((_BYTE *)&a3->__r_.__value_.__s + 23))
    {
      v25 = v21 - 1;
      v26 = a3;
      do
      {
        v28 = v26->__r_.__value_.__s.__data_[0];
        v26 = (std::string *)((char *)v26 + 1);
        v27 = v28;
        v30 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v29 = v30;
        v32 = v25-- != 0;
        v33 = v27 == v29;
      }
      while (v27 == v29 && v32);
    }
    else
    {
      v33 = 1;
    }
  }
  else
  {
    v33 = 0;
  }
  v35[36] = IMSCallManager::sendCallEndRequest(a1, (std::__shared_weak_count **)v11, v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v34 = IMSClientManager::delegateForStack((void **)&v39.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v9;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
  }
  (*(void (**)(uint64_t, std::string *, std::string *, _BYTE *))(*(_QWORD *)v34 + 16))(v34, &__p, a3, v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v35[87] & 0x80000000) != 0)
    operator delete(*(void **)&v35[64]);
  if ((v35[63] & 0x80000000) != 0)
    operator delete(*(void **)&v35[40]);
  if ((v35[31] & 0x80000000) != 0)
    operator delete(*(void **)&v35[8]);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
  {
    v17 = (void *)v39.__r_.__value_.__r.__words[0];
    goto LABEL_77;
  }
}

void sub_1BEEA2738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  ims::DisconnectInfo::~DisconnectInfo((void **)&a10);
  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_48c26_ZTSN3ims14DisconnectInfoE(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int128 v5;
  int v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  v4 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(a1 + 48) = v4;
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  v6 = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = v6;
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  v8 = (std::string *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_1BEEA2904(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_48c26_ZTSN3ims14DisconnectInfoE(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
}

void ims::DisconnectInfo::~DisconnectInfo(void **this)
{
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void IMSCallManager::setEPSFallbackCall(IMSCallManager *this, IMSCallInfo *a2)
{
  void **v3;
  std::string v4;

  if (a2)
  {
    if (*((char *)a2 + 103) < 0)
      std::string::__init_copy_ctor_external(&v4, *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
    else
      v4 = *(std::string *)((char *)a2 + 80);
    v3 = (void **)((char *)this + 176);
    if (*((char *)this + 199) < 0)
      operator delete(*v3);
    *(_OWORD *)v3 = *(_OWORD *)&v4.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 24) = *((_QWORD *)&v4.__r_.__value_.__l + 2);
  }
  else if (*((char *)this + 199) < 0)
  {
    **((_BYTE **)this + 22) = 0;
    *((_QWORD *)this + 23) = 0;
  }
  else
  {
    *((_BYTE *)this + 176) = 0;
    *((_BYTE *)this + 199) = 0;
  }
}

void IMSCallInfo::endCall(uint64_t a1, const std::string *a2)
{
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::string::size_type v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  _BOOL4 v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string::size_type size;
  std::string::size_type v28;
  std::string::size_type v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  SipSession *v38;
  std::string::value_type *v39;
  std::string *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  ImsPrefs *v44;
  void **EmergencyAnonymousAutomaticRedialKey;
  void *v46;
  char v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  SipSession *v50;
  std::string *v51;
  std::string::size_type v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  SipSession *v60;
  const char *v61;
  uint64_t v62;
  _BYTE v63[72];
  std::string __p;
  std::string v65;
  void *v66[2];
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  char v72;
  std::string v73;

  if (!*(_QWORD *)(a1 + 552))
  {
    if (!*(_QWORD *)(a1 + 128))
      return;
    memset(&v73, 0, sizeof(v73));
    v19 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v19 < 0)
    {
      std::string::__init_copy_ctor_external(&v73, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      LOBYTE(v19) = *((_BYTE *)&a2->__r_.__value_.__s + 23);
    }
    else
    {
      v73 = *a2;
    }
    size = a2->__r_.__value_.__l.__size_;
    v28 = v19;
    if ((v19 & 0x80u) == 0)
      v29 = v19;
    else
      v29 = a2->__r_.__value_.__l.__size_;
    if (v29 == 13)
    {
      v30 = (v19 & 0x80u) == 0 ? (uint64_t *)a2 : (uint64_t *)a2->__r_.__value_.__r.__words[0];
      v31 = *v30;
      v32 = *(uint64_t *)((char *)v30 + 5);
      if (v31 == *(_QWORD *)"UserTriggered" && v32 == *(_QWORD *)"riggered")
      {
        v41 = *(_QWORD **)(a1 + 128);
        if (v41[64])
        {
          v70 = 0;
          v71 = 0;
          v42 = (std::__shared_weak_count *)v41[45];
          if (v42)
          {
            v42 = std::__shared_weak_count::lock(v42);
            v43 = v42;
            v71 = v42;
            if (v42)
            {
              v42 = (std::__shared_weak_count *)v41[44];
              v70 = v42;
            }
          }
          else
          {
            v43 = 0;
          }
          v44 = (ImsPrefs *)SipStack::prefs((SipStack *)v42);
          EmergencyAnonymousAutomaticRedialKey = (void **)ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v44);
          v46 = ImsPrefs::prefWithKey(v44, EmergencyAnonymousAutomaticRedialKey);
          if (v46)
            v47 = (*(uint64_t (**)(void *))(*(_QWORD *)v46 + 40))(v46);
          else
            v47 = *((_BYTE *)EmergencyAnonymousAutomaticRedialKey + 57) != 0;
          if (v43)
          {
            p_shared_owners = (unint64_t *)&v43->__shared_owners_;
            do
              v49 = __ldaxr(p_shared_owners);
            while (__stlxr(v49 - 1, p_shared_owners));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          if ((v47 & 1) != 0)
          {
            if (*(_BYTE *)(a1 + 574))
            {
              v50 = *(SipSession **)(*(_QWORD *)(a1 + 128) + 384);
              if (!v50 || (SipSession::confirmed(v50) & 1) == 0)
              {
                std::string::__assign_external(&v73, "EmergencyUserTriggeredTimeout", 0x1DuLL);
                goto LABEL_96;
              }
            }
            if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
            {
              v73.__r_.__value_.__l.__size_ = 22;
              v51 = (std::string *)v73.__r_.__value_.__r.__words[0];
              v39 = (std::string::value_type *)(v73.__r_.__value_.__r.__words[0] + 22);
            }
            else
            {
              v39 = &v73.__r_.__value_.__s.__data_[22];
              *((_BYTE *)&v73.__r_.__value_.__s + 23) = 22;
              v51 = &v73;
            }
            qmemcpy(v51, "EmergencyUserTriggered", 22);
            goto LABEL_95;
          }
          v28 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          size = a2->__r_.__value_.__l.__size_;
          LOBYTE(v19) = *((_BYTE *)&a2->__r_.__value_.__s + 23);
        }
      }
    }
    if ((v19 & 0x80u) != 0)
      v28 = size;
    if (v28 != 13
      || ((v19 & 0x80u) == 0 ? (v34 = (uint64_t *)a2) : (v34 = (uint64_t *)a2->__r_.__value_.__r.__words[0]),
          (v35 = *v34, v36 = *(uint64_t *)((char *)v34 + 5), v35 == *(_QWORD *)"UserTriggered")
        ? (v37 = v36 == *(_QWORD *)"riggered")
        : (v37 = 0),
          !v37
       || (v38 = *(SipSession **)(*(_QWORD *)(a1 + 128) + 384)) != 0 && (SipSession::confirmed(v38) & 1) != 0))
    {
LABEL_96:
      v52 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      v53 = (char)v52;
      if ((v52 & 0x80u) != 0)
        v52 = a2->__r_.__value_.__l.__size_;
      if (v52 != 13)
        goto LABEL_112;
      v54 = v53 >= 0 ? (uint64_t *)a2 : (uint64_t *)a2->__r_.__value_.__r.__words[0];
      v55 = *v54;
      v56 = *(uint64_t *)((char *)v54 + 5);
      if (v55 != *(_QWORD *)"UserTriggered" || v56 != *(_QWORD *)"riggered")
        goto LABEL_112;
      v58 = *(_QWORD *)(a1 + 128);
      if (*(char *)(v58 + 1687) < 0)
      {
        if (!*(_QWORD *)(v58 + 1672))
        {
LABEL_112:
          std::string::basic_string[abi:ne180100]<0>(&v70, "call");
          std::string::basic_string[abi:ne180100]<0>(v66, (char *)&str_1_10);
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v59 = ImsLogger::debug(ims::_logger, (uint64_t)&v70, (uint64_t)v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v59 + 8), (uint64_t)"endCall: reason= ", 17);
          *(_BYTE *)(v59 + 17) = 0;
          LoggableString::LoggableString(&v65, a2);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v59 + 40))(v59, &v65);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v59 + 8), (uint64_t)" (", 2);
          *(_BYTE *)(v59 + 17) = 0;
          LoggableString::LoggableString(&__p, &v73);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v59 + 40))(v59, &__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v59 + 8), (uint64_t)"); confirmed= ",
            14);
          *(_BYTE *)(v59 + 17) = 0;
          v60 = *(SipSession **)(*(_QWORD *)(a1 + 128) + 384);
          v61 = "false";
          if (v60)
          {
            if (SipSession::confirmed(v60))
            {
              v61 = "true";
              v62 = 4;
            }
            else
            {
              v62 = 5;
            }
          }
          else
          {
            v62 = 5;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v59 + 8), (uint64_t)v61, v62);
          *(_BYTE *)(v59 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v59 + 64))(v59, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v59 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v65.__r_.__value_.__l.__data_);
          if (v67 < 0)
            operator delete(v66[0]);
          if (v72 < 0)
            operator delete(v70);
          BambiCall::endWithReason(*(BambiCall **)(a1 + 128), (uint64_t)&v73, (uint64_t)v63);
          ImsResult::~ImsResult((ImsResult *)v63);
          goto LABEL_126;
        }
      }
      else if (!*(_BYTE *)(v58 + 1687))
      {
        goto LABEL_112;
      }
      std::string::operator=(&v73, (const std::string *)(v58 + 1664));
      goto LABEL_112;
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    {
      v73.__r_.__value_.__l.__size_ = 14;
      v40 = (std::string *)v73.__r_.__value_.__r.__words[0];
      v39 = (std::string::value_type *)(v73.__r_.__value_.__r.__words[0] + 14);
    }
    else
    {
      v39 = &v73.__r_.__value_.__s.__data_[14];
      *((_BYTE *)&v73.__r_.__value_.__s + 23) = 14;
      v40 = &v73;
    }
    qmemcpy(v40, "RejectedByUser", 14);
LABEL_95:
    *v39 = 0;
    goto LABEL_96;
  }
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 24) + 216))(&v73);
  v4 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  if (v73.__r_.__value_.__l.__size_)
  {
    v5 = (unint64_t *)(v73.__r_.__value_.__l.__size_ + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v4 + 1) + 16))(*((_QWORD *)&v4 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v4 + 1));
    }
  }
  if ((_QWORD)v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v73, "call");
    std::string::basic_string[abi:ne180100]<0>(&v70, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)&v73, (uint64_t)&v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"endCall: CallInfo ", 18);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" is in a conference call.  Removing participant from call.", 58);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v72 < 0)
      operator delete(v70);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 24) + 216))(&v73);
    v8 = v73.__r_.__value_.__r.__words[0];
    v9 = *(std::__shared_weak_count **)(a1 + 560);
    v68 = *(_QWORD *)(a1 + 552);
    v69 = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v13 = (char)v12;
    if ((v12 & 0x80u) != 0)
      v12 = a2->__r_.__value_.__l.__size_;
    if (v12 == 5)
    {
      if (v13 >= 0)
        v14 = (int *)a2;
      else
        v14 = (int *)a2->__r_.__value_.__r.__words[0];
      v15 = *v14;
      v16 = *((unsigned __int8 *)v14 + 4);
      v18 = v15 == *(_DWORD *)"SRVCC" && v16 == str_7_13[4];
    }
    else
    {
      v18 = 0;
    }
    BambiConferenceCall::removeParticipant(v8, &v68, v18);
    v21 = v69;
    if (v69)
    {
      v22 = (unint64_t *)&v69->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
    if (v73.__r_.__value_.__l.__size_)
    {
      v25 = (unint64_t *)(v73.__r_.__value_.__l.__size_ + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "call");
  std::string::basic_string[abi:ne180100]<0>(&v70, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v20 = ImsLogger::error(ims::_logger, (uint64_t)&v73, (uint64_t)&v70);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"endCall: CallInfo ", 18);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" is in a conference call, but manager doesn't have one.", 55);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v20 + 17) = 0;
  if (v72 < 0)
    operator delete(v70);
LABEL_126:
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
}

void sub_1BEEA323C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v36 - 120);
  if (*(char *)(v36 - 73) < 0)
    operator delete(*(void **)(v36 - 96));
  _Unwind_Resume(a1);
}

void IMSCallInfo::ringCall(IMSCallInfo *this)
{
  BambiCall *v1;
  double v2;
  int v3;
  uint64_t v4;
  void *__p[2];
  char v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  char v10;

  v1 = (BambiCall *)*((_QWORD *)this + 16);
  if (v1)
  {
    v2 = BambiCall::ring(v1, (uint64_t)&v7);
    v3 = (*(uint64_t (**)(uint64_t, _QWORD, double))(*(_QWORD *)v8 + 24))(v8, v9, v2);
    ImsResult::~ImsResult((ImsResult *)&v7);
    if (v3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v7, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v7, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Couldn't send ringing notification", 34);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (v6 < 0)
        operator delete(__p[0]);
      if (v10 < 0)
        operator delete(v7);
    }
  }
}

void sub_1BEEA33F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::answerCall(_QWORD *a1, const std::string *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  void *__p[2];
  int v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if (!a1[69])
  {
    v4 = a1[16];
    if (!v4)
      return;
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)v15 = 0u;
    v16 = 0u;
    BambiCall::answer(v4, a2, (uint64_t)v15);
    if (!(*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)v15[1] + 24))(v15[1], v16))
      goto LABEL_15;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    v10 = 1073741838;
    if (v15[1] == &_bambiDomain)
    {
      v5 = v16;
      ImsResult::~ImsResult((ImsResult *)__p);
      if (v5 == 1073741838)
      {
LABEL_15:
        ImsResult::~ImsResult((ImsResult *)v15);
        return;
      }
    }
    else
    {
      ImsResult::~ImsResult((ImsResult *)__p);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(v7, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Couldn't answer call", 20);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v8 < 0)
      operator delete(v7[0]);
    if (v11 < 0)
      operator delete(__p[0]);
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::error(ims::_logger, (uint64_t)v15, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"IMSCallManager::answerCall: call ", 33);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(_QWORD *, uint64_t))(a1[9] + 16))(a1 + 9, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" is already in a conference.", 28);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v16) < 0)
    operator delete(v15[0]);
}

void sub_1BEEA3668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  ImsResult::~ImsResult((ImsResult *)&a27);
  _Unwind_Resume(a1);
}

void IMSCallInfo::setActive(IMSCallInfo *this, int a2)
{
  BambiCall *v2;

  if (*((_QWORD *)this + 69))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 200))(*((_QWORD *)this + 3));
  }
  else
  {
    v2 = (BambiCall *)*((_QWORD *)this + 16);
    if (v2)
    {
      if (a2)
        BambiCall::performLocalResume(v2);
      else
        BambiCall::performLocalHold(v2);
    }
  }
}

uint64_t IMSCallInfo::isActive(IMSCallInfo *this)
{
  uint64_t v2;
  SipSession *v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  SipSession *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;

  if (*((_QWORD *)this + 69))
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v2 = ImsLogger::debug(ims::_logger, (uint64_t)v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"isActive: call is conference participant", 40);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v16[0]);
    v12 = 0;
    v13 = 0;
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 3) + 216))(&v12);
    if (v12
      && (v3 = *(SipSession **)(v12 + 384)) != 0
      && SipSession::confirmed(v3)
      && (*(_DWORD *)(v12 + 440) & 0xFFFFFFFE) != 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v11 = ImsLogger::debug(ims::_logger, (uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"isActive: conference call is confirmed or unheld", 48);
      *(_BYTE *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v11 + 17) = 0;
      if (v15 < 0)
        operator delete(__p[0]);
      if (v17 < 0)
        operator delete(v16[0]);
      v4 = 0;
    }
    else
    {
      v4 = 1;
    }
    v5 = v13;
    if (!v13)
      goto LABEL_15;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if ((v4 & 1) == 0)
        return 1;
    }
    else
    {
LABEL_15:
      if ((v4 & 1) == 0)
        return 1;
    }
  }
  else
  {
    v9 = *((_QWORD *)this + 16);
    if (v9)
    {
      v10 = *(SipSession **)(v9 + 384);
      if (v10)
      {
        if (SipSession::confirmed(v10) && (*(_DWORD *)(*((_QWORD *)this + 16) + 440) & 0xFFFFFFFE) != 2)
          return 1;
      }
    }
  }
  return 0;
}

void sub_1BEEA394C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

SipSession *IMSCallInfo::isAlerting(IMSCallInfo *this)
{
  uint64_t v1;
  SipSession *result;

  v1 = *((_QWORD *)this + 16);
  if (!v1)
    return 0;
  result = *(SipSession **)(v1 + 384);
  if (result)
    return (SipSession *)(SipSession::confirmed(result) ^ 1);
  return result;
}

void IMSCallInfo::refresh(IMSCallInfo *this, int a2)
{
  RTPManager **v2;
  _BYTE v3[72];

  v2 = (RTPManager **)*((_QWORD *)this + 16);
  if (v2)
  {
    BambiCall::handleSRVCCFailure(v2, a2, (ImsResult *)v3);
    ImsResult::~ImsResult((ImsResult *)v3);
  }
}

BOOL IMSCallInfo::isMultiParty(IMSCallInfo *this)
{
  return *((_QWORD *)this + 69) != 0;
}

void IMSCallInfo::setBasebandCallId(IMSCallInfo *this, char a2)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *((_BYTE *)this + 40) = a2;
  std::string::basic_string[abi:ne180100]<0>(v5, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Setting basebandCallId to ", 26);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_1BEEA3B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN11IMSCallInfo27sendAccessBarringDisconnectEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  IMSCallManager *v3;
  std::string __p;
  void (**v6)(ImsUuid *__hidden);
  std::string v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(IMSCallManager **)(v2 + 24);
  v6 = off_1E78C0288;
  if (*(char *)(v2 + 103) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v2 + 80), *(_QWORD *)(v2 + 88));
  else
    v7 = *(std::string *)(v2 + 80);
  ims::CFString::asString(*(const __CFString **)(a1 + 40), (const void *)0x8000100, &__p);
  IMSCallManager::sendCallDisconnectionNotification(v3, (uint64_t)&v6, &__p, a1 + 48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = off_1E78C0288;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  *(_BYTE *)(v2 + 571) = 1;
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 24) + 240))(*(_QWORD *)(v2 + 24), v2);
}

void sub_1BEEA3C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleJoinedConferenceEvent(IMSCallInfo *this, BambiCallJoinedConferenceEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void (**v28)(ImsUuid *__hidden);
  std::string v29;
  void *__p[2];
  char v31;
  void *v32[2];
  char v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v34 = 0;
    v35 = std::__shared_weak_count::lock(v4);
    if (v35)
      v34 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v5 = 0;
    v34 = 0;
    v35 = 0;
  }
  if (v5 == *((_QWORD *)this + 16))
  {
    std::string::operator=((std::string *)this + 2, (const std::string *)(v5 + 488));
    std::string::basic_string[abi:ne180100]<0>(v32, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Swapping call for conference participant", 40);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v31 < 0)
      operator delete(__p[0]);
    if (v33 < 0)
      operator delete(v32[0]);
    v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
    if (v10)
    {
      v11 = (void *)*((_QWORD *)a2 + 5);
      v12 = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      v32[0] = 0;
      v32[1] = std::__shared_weak_count::lock(v10);
      if (v32[1])
        v32[0] = v11;
    }
    else
    {
      v32[0] = 0;
      v32[1] = 0;
    }
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 552, (__int128 *)v32);
    v14 = (std::__shared_weak_count *)v32[1];
    if (v32[1])
    {
      v15 = (unint64_t *)((char *)v32[1] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
    *(_QWORD *)(*((_QWORD *)this + 69) + 1080) = (char *)this + 8;
    v32[0] = 0;
    v32[1] = 0;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 128, (__int128 *)v32);
    v17 = (std::__shared_weak_count *)v32[1];
    if (v32[1])
    {
      v18 = (unint64_t *)((char *)v32[1] + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = *((_QWORD *)this + 3);
    v28 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
      std::string::__init_copy_ctor_external(&v29, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    else
      v29 = *(std::string *)((char *)this + 80);
    (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallJoinedConferenceEvent *))(*(_QWORD *)v20 + 232))(v20, &v28, CFSTR("kCallStatusJoined"), *((unsigned __int8 *)this + 40), a2);
    v28 = off_1E78C0288;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 3) + 216))(v32);
    v21 = (std::__shared_weak_count *)v32[1];
    v22 = *((_DWORD *)v32[0] + 110);
    if (v32[1])
    {
      v23 = (unint64_t *)((char *)v32[1] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (v22 == 3)
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 200))(*((_QWORD *)this + 3), 1);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"IMSCallInfo::handleJoinedConferenceEvent for an unknown call", 60);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v31 < 0)
      operator delete(__p[0]);
    if (v33 < 0)
      operator delete(v32[0]);
  }
  v25 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1BEEA4040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 64);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleInputFrequencyLevelEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::string *p_p;
  unint64_t *v18;
  unint64_t v19;
  void (**v20)(ImsUuid *__hidden);
  std::string __p;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::string v24;

  v3 = *a2;
  if (!*a2)
    return;
  v5 = *(std::__shared_weak_count **)(v3 + 360);
  if (!v5)
    return;
  v8 = std::__shared_weak_count::lock(v5);
  if (!v8)
    return;
  v9 = v8;
  v10 = *(_QWORD *)(v3 + 352);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  v22 = 0;
  v23 = 0;
  v14 = *(std::__shared_weak_count **)(v13 + 360);
  if (!v14)
  {
    v15 = 0;
    goto LABEL_14;
  }
  v15 = std::__shared_weak_count::lock(v14);
  v23 = v15;
  if (!v15)
  {
LABEL_14:
    v16 = 0;
    goto LABEL_15;
  }
  v16 = *(_QWORD *)(v13 + 352);
  v22 = v16;
LABEL_15:
  if (*(char *)(v16 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v16 + 4136), *(_QWORD *)(v16 + 4144));
  else
    v24 = *(std::string *)(v16 + 4136);
  v20 = off_1E78C0288;
  p_p = &__p;
  if (*(char *)(a1 + 103) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
  else
    __p = *(std::string *)(a1 + 80);
  IMSCallManager::sendInputFrequencyLevelUpdateNotification((uint64_t)p_p, (void **)&v24.__r_.__value_.__l.__data_, (uint64_t)&v20, a3);
  v20 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BEEA4258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void IMSCallManager::sendInputFrequencyLevelUpdateNotification(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  std::string __p;

  v6 = IMSClientManager::delegateForStack(a2);
  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    __p = *(std::string *)(a3 + 8);
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v6 + 216))(v6, &__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEEA4330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleOutputFrequencyLevelEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::string *p_p;
  unint64_t *v18;
  unint64_t v19;
  void (**v20)(ImsUuid *__hidden);
  std::string __p;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::string v24;

  v3 = *a2;
  if (!*a2)
    return;
  v5 = *(std::__shared_weak_count **)(v3 + 360);
  if (!v5)
    return;
  v8 = std::__shared_weak_count::lock(v5);
  if (!v8)
    return;
  v9 = v8;
  v10 = *(_QWORD *)(v3 + 352);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  v22 = 0;
  v23 = 0;
  v14 = *(std::__shared_weak_count **)(v13 + 360);
  if (!v14)
  {
    v15 = 0;
    goto LABEL_14;
  }
  v15 = std::__shared_weak_count::lock(v14);
  v23 = v15;
  if (!v15)
  {
LABEL_14:
    v16 = 0;
    goto LABEL_15;
  }
  v16 = *(_QWORD *)(v13 + 352);
  v22 = v16;
LABEL_15:
  if (*(char *)(v16 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v16 + 4136), *(_QWORD *)(v16 + 4144));
  else
    v24 = *(std::string *)(v16 + 4136);
  v20 = off_1E78C0288;
  p_p = &__p;
  if (*(char *)(a1 + 103) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
  else
    __p = *(std::string *)(a1 + 80);
  IMSCallManager::sendOutputFrequencyLevelUpdateNotification((uint64_t)p_p, (void **)&v24.__r_.__value_.__l.__data_, (uint64_t)&v20, a3);
  v20 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BEEA44F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void IMSCallManager::sendOutputFrequencyLevelUpdateNotification(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  std::string __p;

  v6 = IMSClientManager::delegateForStack(a2);
  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    __p = *(std::string *)(a3 + 8);
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v6 + 224))(v6, &__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEEA45CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleVocoderInfoEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string __p;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::string v16;

  IMSCallInfo::stack((IMSCallInfo *)a1, &v16);
  v6 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
  if (!v16.__r_.__value_.__l.__size_)
    goto LABEL_5;
  v7 = (unint64_t *)(v16.__r_.__value_.__l.__size_ + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 16))(*((_QWORD *)&v6 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v6 + 1));
    if (!(_QWORD)v6)
      return;
  }
  else
  {
LABEL_5:
    if (!(_QWORD)v6)
      return;
  }
  IMSCallInfo::stack((IMSCallInfo *)a1, &v14);
  if (*(char *)(v14 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v14 + 4136), *(_QWORD *)(v14 + 4144));
  else
    v16 = *(std::string *)(v14 + 4136);
  if (*(char *)(a1 + 103) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
  else
    __p = *(std::string *)(a1 + 80);
  v9 = IMSClientManager::delegateForStack((void **)&v16.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 232))(v9, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BEEA476C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t IMSCallManager::sendVocoderInfoNotification(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 232))(v7, a4, a5);
}

void IMSCallInfo::handleAudioStreamTokensEvent(IMSCallInfo *this, const __CFArray *a2)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::string v10;
  uint64_t v11;
  CFStringRef v12;

  v11 = 0;
  v12 = 0;
  if (*((char *)this + 103) < 0)
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
  else
    v10 = *(std::string *)((char *)this + 80);
  ims::CFString::CFString(&v11, (char *)&v10, 0x8000100u);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  IMSCallInfo::stack(this, &v8);
  if (*(char *)(v8 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v8 + 4136), *(_QWORD *)(v8 + 4144));
  else
    v10 = *(std::string *)(v8 + 4136);
  IMSCallManager::sendAudioStreamTokensNotification(v4, (void **)&v10.__r_.__value_.__l.__data_, v12, 0, a2);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  ims::CFType::~CFType((ims::CFType *)&v11);
}

void sub_1BEEA4914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ims::CFType::~CFType((ims::CFType *)(v16 - 32));
  _Unwind_Resume(a1);
}

void sub_1BEEA4950(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x1BEEA4948);
}

const void **IMSCallManager::sendAudioStreamTokensNotification(int a1, void **a2, CFStringRef theString, int a4, CFTypeRef cf)
{
  uint64_t v7;
  CFTypeRef v9;
  void *__p[2];
  char v11;
  CFTypeRef cfa;
  char buffer[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)buffer = 0u;
  v14 = 0u;
  cfa = cf;
  if (cf)
    CFRetain(cf);
  CFStringGetCString(theString, buffer, 256, 0x600u);
  v7 = IMSClientManager::delegateForStack(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, buffer);
  v9 = cfa;
  if (cfa)
    CFRetain(cfa);
  (*(void (**)(uint64_t, void **, CFTypeRef *))(*(_QWORD *)v7 + 176))(v7, __p, &v9);
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&v9);
  if (v11 < 0)
    operator delete(__p[0]);
  return ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&cfa);
}

void sub_1BEEA4A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleTextStreamTokenEvent(IMSCallInfo *this, const __CFNumber *a2)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::string v10;
  uint64_t v11;
  CFStringRef v12;

  v11 = 0;
  v12 = 0;
  if (*((char *)this + 103) < 0)
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
  else
    v10 = *(std::string *)((char *)this + 80);
  ims::CFString::CFString(&v11, (char *)&v10, 0x8000100u);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  IMSCallInfo::stack(this, &v8);
  if (*(char *)(v8 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v8 + 4136), *(_QWORD *)(v8 + 4144));
  else
    v10 = *(std::string *)(v8 + 4136);
  IMSCallManager::sendTextStreamTokenNotification(v4, (void **)&v10.__r_.__value_.__l.__data_, v12, 0, a2);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  ims::CFType::~CFType((ims::CFType *)&v11);
}

void sub_1BEEA4BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ims::CFType::~CFType((ims::CFType *)(v16 - 32));
  _Unwind_Resume(a1);
}

void sub_1BEEA4C20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x1BEEA4C18);
}

const void **IMSCallManager::sendTextStreamTokenNotification(int a1, void **a2, CFStringRef theString, int a4, CFTypeRef cf)
{
  uint64_t v7;
  CFTypeRef v9;
  void *__p[2];
  char v11;
  CFTypeRef cfa;
  char buffer[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)buffer = 0u;
  v14 = 0u;
  cfa = cf;
  if (cf)
    CFRetain(cf);
  CFStringGetCString(theString, buffer, 256, 0x600u);
  v7 = IMSClientManager::delegateForStack(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, buffer);
  v9 = cfa;
  if (cfa)
    CFRetain(cfa);
  (*(void (**)(uint64_t, void **, CFTypeRef *))(*(_QWORD *)v7 + 184))(v7, __p, &v9);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(&v9);
  if (v11 < 0)
    operator delete(__p[0]);
  return ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(&cfa);
}

void sub_1BEEA4D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleIncomingDtmfEvent(IMSCallInfo *this, uint64_t a2)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::string v10;
  uint64_t v11;
  CFStringRef v12;

  v11 = 0;
  v12 = 0;
  if (*((char *)this + 103) < 0)
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
  else
    v10 = *(std::string *)((char *)this + 80);
  ims::CFString::CFString(&v11, (char *)&v10, 0x8000100u);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  IMSCallInfo::stack(this, &v8);
  if (*(char *)(v8 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v8 + 4136), *(_QWORD *)(v8 + 4144));
  else
    v10 = *(std::string *)(v8 + 4136);
  IMSCallManager::sendIncomingDtmfNotification(v4, (void **)&v10.__r_.__value_.__l.__data_, v12, a2);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  ims::CFType::~CFType((ims::CFType *)&v11);
}

void sub_1BEEA4EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ims::CFType::~CFType((ims::CFType *)(v16 - 32));
  _Unwind_Resume(a1);
}

void sub_1BEEA4EEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x1BEEA4EE4);
}

void IMSCallManager::sendIncomingDtmfNotification(int a1, void **a2, CFStringRef theString, uint64_t a4)
{
  uint64_t v6;
  void *__p[2];
  char v8;
  char buffer[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  *(_OWORD *)buffer = 0u;
  CFStringGetCString(theString, buffer, 256, 0x600u);
  v6 = IMSClientManager::delegateForStack(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, buffer);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v6 + 192))(v6, __p, a4);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1BEEA4FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleTextStreamHeldEvent(IMSCallInfo *this, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  void (**v8)(ImsUuid *__hidden);
  std::string __p;
  std::string v10;
  std::string v11;

  memset(&v11, 0, sizeof(v11));
  IMSCallInfo::stack(this, &v8);
  if (*((char *)v8 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v11, (const std::string::value_type *)v8[517], (std::string::size_type)v8[518]);
  else
    v11 = *(std::string *)(v8 + 517);
  v4 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v5 = (unint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  memset(&v10, 0, sizeof(v10));
  v8 = off_1E78C0288;
  if (*((char *)this + 103) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
  else
    __p = *(std::string *)((char *)this + 80);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v10, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v8 = off_1E78C0288;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = __p;
  }
  v7 = IMSClientManager::delegateForStack((void **)&v11.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v7 + 136))(v7, &v10, a2);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BEEA5178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleCallInvalidated(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __n128 v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  __int128 v30;
  void *v31[2];
  __int128 v32;
  __int128 v33;
  char v34;

  std::string::basic_string[abi:ne180100]<0>(__p, "call");
  std::string::basic_string[abi:ne180100]<0>(&v33, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"handleCallInvalidated", 21);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v34 < 0)
    operator delete((void *)v33);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  if (!*(_QWORD *)(a1 + 552))
  {
    if (*a2 != *(_QWORD *)(a1 + 128))
      return;
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v33, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"handleCallInvalidated actually removing the call", 48);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v34 < 0)
      operator delete((void *)v33);
    if (SBYTE7(v30) < 0)
      operator delete(__p[0]);
    v10 = *a2;
    if (*(_BYTE *)(*a2 + 1488))
    {
      v11 = *(unsigned __int8 *)(a1 + 571);
      goto LABEL_23;
    }
    v11 = *(unsigned __int8 *)(a1 + 571);
    if (*(_BYTE *)(v10 + 1489))
    {
LABEL_23:
      if (!v11)
      {
        bzero(__p, 0x250uLL);
        v12.n128_f64[0] = BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)__p, 15, 10);
        __p[0] = &off_1E78BD2A8;
        v13 = *a2;
        v14 = (std::__shared_weak_count *)a2[1];
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
          p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
          do
            v18 = __ldxr(p_shared_weak_owners);
          while (__stxr(v18 + 1, p_shared_weak_owners));
        }
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
        *(_QWORD *)&v30 = v13;
        *((_QWORD *)&v30 + 1) = v14;
        if (v19)
          std::__shared_weak_count::__release_weak(v19);
        if (v14)
        {
          v20 = (unint64_t *)&v14->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v12);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        IMSCallInfo::handleSessionTerminationEvent((IMSCallInfo *)a1, (BambiCallSessionTerminationBaseEvent *)__p);
        BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)__p);
        goto LABEL_43;
      }
LABEL_24:
      *(_OWORD *)v31 = 0u;
      v32 = 0u;
      *(_OWORD *)__p = 0u;
      v30 = 0u;
      std::string::basic_string[abi:ne180100]<0>(&v33, "CallInvalidated");
      BambiCallNamedEvent::BambiCallNamedEvent((uint64_t)__p, &v33);
      if (v34 < 0)
        operator delete((void *)v33);
      __p[0] = off_1E78C8F60;
      if (SHIBYTE(v32) < 0)
        operator delete(v31[1]);
      __p[0] = &off_1E78BD300;
      if (*((_QWORD *)&v30 + 1))
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
LABEL_43:
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 240))(*(_QWORD *)(a1 + 24), a1);
      return;
    }
    if (*(_BYTE *)(a1 + 571))
      goto LABEL_24;
    v22 = *(_QWORD *)(a1 + 24);
    v33 = 0uLL;
    v23 = *(std::__shared_weak_count **)(v10 + 360);
    if (v23)
    {
      v24 = std::__shared_weak_count::lock(v23);
      *((_QWORD *)&v33 + 1) = v24;
      if (v24)
      {
        v25 = *(_QWORD *)(v10 + 352);
        *(_QWORD *)&v33 = v25;
LABEL_51:
        if (*(char *)(v25 + 4159) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v25 + 4136), *(_QWORD *)(v25 + 4144));
        }
        else
        {
          v26 = v25 + 4136;
          *(_OWORD *)__p = *(_OWORD *)v26;
          *(_QWORD *)&v30 = *(_QWORD *)(v26 + 16);
        }
        IMSCallManager::sendCallStatusRequest(v22, (uint64_t)__p, 2, *(unsigned __int8 *)(*a2 + 1488), *(_QWORD *)(*a2 + 512) != 0);
        if (SBYTE7(v30) < 0)
          operator delete(__p[0]);
        if (v24)
        {
          v27 = (unint64_t *)&v24->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        goto LABEL_24;
      }
    }
    else
    {
      v24 = 0;
    }
    v25 = 0;
    goto LABEL_51;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "call");
  std::string::basic_string[abi:ne180100]<0>(&v33, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Invalidated call turned into a conference participant.  Keeping CallInfo", 72);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v34 < 0)
    operator delete((void *)v33);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  __p[0] = 0;
  __p[1] = 0;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 128, (__int128 *)__p);
  v6 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v7 = (unint64_t *)((char *)__p[1] + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BEEA5680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v16 - 72);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleSessionTerminationEvent(IMSCallInfo *this, BambiCallSessionTerminationBaseEvent *lpsrc)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  ImsPrefs *v15;
  void **v16;
  void *v17;
  _BOOL4 v18;
  int v19;
  ImsPrefs *v21;
  void **v22;
  void *v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  IMSCallManager *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  int v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  int v82;
  ImsPrefs *v83;
  void **v84;
  void *v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  int v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  int v109;
  int v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  _BYTE *v114;
  BOOL isNR;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  IMSCallManager *v127;
  std::__shared_weak_count *v128;
  unint64_t *p_shared_owners;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  void (**v140)(ImsUuid *__hidden);
  std::string v141;
  uint64_t v142[2];
  void (**v143)(ImsUuid *__hidden);
  std::string v144;
  std::string __p[17];
  std::string v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (**v152)(SipParameterMap *__hidden);
  uint64_t *v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  void (**v171)(SipParameterMap *__hidden);
  _QWORD *v172;
  _QWORD v173[5];
  _QWORD v174[3];
  void (**v175)(ImsUuid *__hidden);
  std::string v176;
  std::string v177;
  std::string v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  BOOL v186[32];
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  std::__shared_weak_count *v192;

  v4 = (std::__shared_weak_count *)*((_QWORD *)lpsrc + 3);
  if (v4)
  {
    v5 = *((_QWORD *)lpsrc + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v191 = 0;
    v8 = std::__shared_weak_count::lock(v4);
    v192 = v8;
    if (v8)
      v191 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v8 = 0;
    v5 = 0;
    v191 = 0;
    v192 = 0;
  }
  v9 = (char *)this + 128;
  if (v5 != *((_QWORD *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v146, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)&v146, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"IMSCallInfo: received ", 22);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(BambiCallSessionTerminationBaseEvent *, uint64_t))(*(_QWORD *)lpsrc + 16))(lpsrc, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" event for an unknown call", 26);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v146.__r_.__value_.__l.__data_);
    goto LABEL_334;
  }
  *(_QWORD *)v186 = 256;
  v187 = 0;
  memset(&v186[8], 0, 24);
  v188 = 0u;
  v189 = 0u;
  v190 = 0u;
  LODWORD(v187) = IMSCallInfo::sendSessionTerminationMetric(this, lpsrc, v186);
  (*(void (**)(std::string *__return_ptr, BambiCallSessionTerminationBaseEvent *))(*(_QWORD *)lpsrc + 40))(&v146, lpsrc);
  if (v186[31] < 0)
    operator delete(*(void **)&v186[8]);
  *(std::string *)&v186[8] = v146;
  v186[1] = *((_BYTE *)lpsrc + 146);
  *((_BYTE *)this + 571) = 1;
  v185 = 0;
  v183 = 0u;
  v184 = 0u;
  v181 = 0u;
  v182 = 0u;
  v180 = 0;
  v179 = 0;
  IMSCallInfo::stack(this, &v179);
  v11 = v179;
  if (v179)
  {
    std::string::operator=((std::string *)&v181, (const std::string *)(v179 + 3136));
    std::string::operator=((std::string *)((char *)&v182 + 8), (const std::string *)(v11 + 3160));
    v184 = *(_OWORD *)(v11 + 3184);
    LOBYTE(v185) = *(_BYTE *)(v11 + 3200);
  }
  if (!*((_BYTE *)this + 664))
  {
    if (*((char *)this + 615) < 0)
    {
      if (!*((_QWORD *)this + 75))
        goto LABEL_38;
    }
    else if (!*((_BYTE *)this + 615))
    {
      goto LABEL_38;
    }
    if (*((char *)this + 639) < 0)
    {
      if (!*((_QWORD *)this + 78))
        goto LABEL_38;
    }
    else if (!*((_BYTE *)this + 639))
    {
      goto LABEL_38;
    }
    v13 = BYTE7(v182);
    if (SBYTE7(v182) < 0)
      v13 = *((_QWORD *)&v181 + 1);
    if (v13)
    {
      v14 = HIBYTE(v183);
      if (v183 < 0)
        v14 = v183;
      if (v14)
      {
        v12 = ims::AccessNetwork::isNR((IMSCallInfo *)((char *)this + 592))
           && ims::AccessNetwork::isLTE((ims::AccessNetwork *)&v181);
        std::string::basic_string[abi:ne180100]<0>(&v146, "call");
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v32 = ImsLogger::debug(ims::_logger, (uint64_t)&v146, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"start ANI: ", 11);
        *(_BYTE *)(v32 + 17) = 0;
        LoggableString::LoggableString(&v178, (const std::string *)((char *)this + 592));
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v32 + 40))(v32, &v178);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)", current ANI: ", 15);
        *(_BYTE *)(v32 + 17) = 0;
        LoggableString::LoggableString(&v177, (const std::string *)&v181);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v32 + 40))(v32, &v177);
        if (v12)
          v33 = ": EPS Fallback happend during the call";
        else
          v33 = ": EPS Fallback did not happen during the call";
        if (v12)
          v34 = 38;
        else
          v34 = 45;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)v33, v34);
        *(_BYTE *)(v32 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v32 + 17) = 0;
        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v177.__r_.__value_.__l.__data_);
        if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v178.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v146.__r_.__value_.__l.__data_);
LABEL_39:
        if (v186[0])
        {
          memset(&v146, 0, sizeof(v146));
          if (!v12)
            goto LABEL_67;
LABEL_41:
          (*(void (**)(std::string *__return_ptr, _QWORD, char *))(**((_QWORD **)this + 4) + 192))(__p, *((_QWORD *)this + 4), (char *)this + 104);
          v15 = (ImsPrefs *)SipStack::prefs((SipStack *)__p[0].__r_.__value_.__l.__data_);
          v16 = (void **)ImsPrefs::getRedialOverLteIfEpsFallbackCallFailedKey(v15);
          v17 = ImsPrefs::prefWithKey(v15, v16);
          if (v17)
          {
            if (!(*(unsigned int (**)(void *))(*(_QWORD *)v17 + 40))(v17))
            {
LABEL_43:
              v18 = 0;
LABEL_56:
              size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
              if (!__p[0].__r_.__value_.__l.__size_)
                goto LABEL_60;
              v25 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
              do
                v26 = __ldaxr(v25);
              while (__stlxr(v26 - 1, v25));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
                if (v18)
                  goto LABEL_61;
              }
              else
              {
LABEL_60:
                if (v18)
                {
LABEL_61:
                  std::string::basic_string[abi:ne180100]<0>(__p, "call");
                  std::string::basic_string[abi:ne180100]<0>(&v178, (char *)&str_1_10);
                  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                  v27 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v178);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"Call to ", 8);
                  *(_BYTE *)(v27 + 17) = 0;
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v27);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)" requires redial over LTE", 25);
                  *(_BYTE *)(v27 + 17) = 0;
                  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(_BYTE *)(v27 + 17) = 0;
                  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v178.__r_.__value_.__l.__data_);
                  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p[0].__r_.__value_.__l.__data_);
                  ims::CFString::asString(CFSTR("kCallDisconnectionReasonRequiresRedialOverLteOnly"), (const void *)0x8000100, __p);
LABEL_72:
                  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v146.__r_.__value_.__l.__data_);
                  v146 = __p[0];
                  v186[2] = 1;
                  v29 = (IMSCallManager *)*((_QWORD *)this + 3);
                  v175 = off_1E78C0288;
                  if (*((char *)this + 103) < 0)
                    std::string::__init_copy_ctor_external(&v176, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
                  else
                    v176 = *(std::string *)((char *)this + 80);
                  IMSCallManager::sendCallDisconnectionNotification(v29, (uint64_t)&v175, &v146, (uint64_t)v186);
                  v175 = off_1E78C0288;
                  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v176.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_318;
                  v30 = (void *)v146.__r_.__value_.__r.__words[0];
                  goto LABEL_317;
                }
              }
LABEL_67:
              std::string::basic_string[abi:ne180100]<0>(__p, "call");
              std::string::basic_string[abi:ne180100]<0>(&v178, (char *)&str_1_10);
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v28 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v178);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"Call to ", 8);
              *(_BYTE *)(v28 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v28);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)" requires CS fallback", 21);
              *(_BYTE *)(v28 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v28 + 17) = 0;
              if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v178.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p[0].__r_.__value_.__l.__data_);
              ims::CFString::asString(CFSTR("kCallDisconnectionReasonRequiresCSFB"), (const void *)0x8000100, __p);
              goto LABEL_72;
            }
          }
          else if (!*((_BYTE *)v16 + 57))
          {
            goto LABEL_43;
          }
          v18 = *((_DWORD *)this + 144) < 3;
          goto LABEL_56;
        }
        goto LABEL_44;
      }
    }
LABEL_38:
    v12 = 0;
    goto LABEL_39;
  }
  if (v186[0])
  {
    memset(&v146, 0, sizeof(v146));
    goto LABEL_41;
  }
  v12 = 1;
LABEL_44:
  if (!*(_BYTE *)(*(_QWORD *)v9 + 1488) && !*(_BYTE *)(*(_QWORD *)v9 + 1489))
  {
    std::string::basic_string[abi:ne180100]<0>(&v146, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v31 = ImsLogger::debug(ims::_logger, (uint64_t)&v146, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"Not sending termination event for hidden call", 45);
    *(_BYTE *)(v31 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v31 + 17) = 0;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v146.__r_.__value_.__l.__data_);
    BYTE4(v187) = IMSCallManager::sendCallEndRequest(*((IMSCallManager **)this + 3), (std::__shared_weak_count **)this, 0);
    goto LABEL_318;
  }
  memset(&v178, 0, sizeof(v178));
  v19 = *((_DWORD *)lpsrc + 10);
  switch(v19)
  {
    case 0:
    case 4:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v35 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v36 = (_BYTE *)ImsOutStream::operator<<(v35, "I hung up with ");
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v36);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v36[17] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      goto LABEL_105;
    case 1:
    case 5:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v37 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v37);
      v38 = (_BYTE *)ImsOutStream::operator<<(v37, " hung up");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v38[17] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonNormal"), (const void *)0x8000100, &v146);
      goto LABEL_285;
    case 2:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v39 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v40 = (_BYTE *)ImsOutStream::operator<<(v39, "I rejected call from ");
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v40);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v40[17] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
LABEL_105:
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonNormal"), (const void *)0x8000100, &v146);
      goto LABEL_269;
    case 3:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v41 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v41);
      v42 = (_BYTE *)ImsOutStream::operator<<(v41, " Rejected");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v42[17] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonRemoteBusy"), (const void *)0x8000100, &v146);
      goto LABEL_285;
    case 6:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v43 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v43);
      v44 = (_BYTE *)ImsOutStream::operator<<(v43, " answered elsewhere");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v44[17] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kIMSCallDisconnectionReasonAnsweredElsewhere"), (const void *)0x8000100, &v146);
      goto LABEL_285;
    case 7:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v45 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v45);
      v46 = (_BYTE *)ImsOutStream::operator<<(v45, " not allowed as other secondary device is in use");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v46[17] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kIMSCallDisconnectionReasonSecondaryDeviceAlreadyInUse"), (const void *)0x8000100, &v146);
      goto LABEL_285;
    case 8:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v47 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v47);
      v48 = (_BYTE *)ImsOutStream::operator<<(v47, " Silent hangup completed");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v48[17] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      BYTE4(v187) = IMSCallManager::sendCallEndRequest(*((IMSCallManager **)this + 3), (std::__shared_weak_count **)this, 0);
      goto LABEL_315;
    case 9:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v49 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v49);
      v50 = (_BYTE *)ImsOutStream::operator<<(v49, " transferred to another device");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v50[17] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kIMSCallDisconnectionReasonTransferredToOtherDevice"), (const void *)0x8000100, &v146);
      goto LABEL_285;
    case 11:
    case 12:
    case 13:
    case 14:
    case 29:
      if (v19 != 11 || !v12)
        goto LABEL_280;
      (*(void (**)(std::string *__return_ptr, _QWORD, char *))(**((_QWORD **)this + 4) + 192))(&v146, *((_QWORD *)this + 4), (char *)this + 104);
      v21 = (ImsPrefs *)SipStack::prefs((SipStack *)v146.__r_.__value_.__l.__data_);
      v22 = (void **)ImsPrefs::getRedialOverLteIfEpsFallbackCallFailedKey(v21);
      v23 = ImsPrefs::prefWithKey(v21, v22);
      if (v23)
      {
        if (((*(uint64_t (**)(void *))(*(_QWORD *)v23 + 40))(v23) & 1) == 0)
        {
LABEL_53:
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v146);
LABEL_280:
          std::string::basic_string[abi:ne180100]<0>(&v146, "call");
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
          v113 = ims::debug((uint64_t)&v146, (uint64_t)__p);
          v114 = (_BYTE *)ImsOutStream::operator<<(v113, "Network error resulting in redial with ");
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v114);
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v114 + 64))(v114, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v114[17] = 0;
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v146.__r_.__value_.__l.__data_);
          ims::CFString::asString(CFSTR("kCallDisconnectionReasonNetworkError"), (const void *)0x8000100, &v146);
          goto LABEL_285;
        }
      }
      else if (!*((_BYTE *)v22 + 57))
      {
        goto LABEL_53;
      }
      v110 = *((_DWORD *)this + 144);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v146);
      if (v110 > 2)
        goto LABEL_280;
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v111 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v112 = (_BYTE *)ImsOutStream::operator<<(v111, "Network error resulting in redial over LTE with ");
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v112);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v112 + 64))(v112, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v112[17] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
LABEL_279:
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonRequiresRedialOverLteOnly"), (const void *)0x8000100, &v146);
      goto LABEL_285;
    case 15:
      v174[2] = 257;
      v173[2] = 257;
      v170 = 0;
      v155 = 0u;
      v149 = 0;
      v151 = 0;
      v150 = 0;
      v148 = 0;
      v146.__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E78D08F8;
      v146.__r_.__value_.__r.__words[2] = 0;
      v147 = 0;
      *(_QWORD *)&v155 = 0;
      v154 = 0;
      v152 = &off_1E78B82D8;
      v153 = &v154;
      v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BFCE8;
      v166 = 0u;
      v167 = 0u;
      v168 = 0u;
      v156 = 0u;
      v157 = 0u;
      v158 = 0u;
      v159 = 0u;
      v160 = 0u;
      v161 = 0u;
      v162 = 0u;
      v163 = 0u;
      v164 = 0u;
      v165 = 0u;
      v169 = 0;
      v171 = &off_1E78B82D8;
      v173[1] = 0;
      v173[0] = 0;
      v172 = v173;
      v174[1] = 0;
      v174[0] = 0;
      v173[3] = &off_1E78B82D8;
      v173[4] = v174;
      WORD4(v155) = 257;
      std::string::basic_string[abi:ne180100]<0>(__p, "call");
      std::string::basic_string[abi:ne180100]<0>(&v177, (char *)&str_1_10);
      v55 = ims::debug((uint64_t)__p, (uint64_t)&v177);
      v56 = ImsOutStream::operator<<(v55, "Call to ");
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v56);
      v57 = (_BYTE *)ImsOutStream::operator<<(v56, " requires emergency session");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v57[17] = 0;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v59 = (uint64_t)v58;
      if (v58)
      {
        SipUri::SipUri((SipUri *)__p, (const SipUri *)(v58 + 592));
        SipUri::operator=((SipUri *)&v146, (uint64_t)__p);
        SipUri::~SipUri((SipUri *)__p);
        v59 = *(_BYTE *)(v59 + 1000) != 0;
      }
      BYTE4(v187) = IMSCallManager::sendCallEndRequest(*((IMSCallManager **)this + 3), (std::__shared_weak_count **)this, 1);
      v60 = *((_QWORD *)this + 3);
      v143 = off_1E78C0288;
      if (*((char *)this + 103) < 0)
        std::string::__init_copy_ctor_external(&v144, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
      else
        v144 = *(std::string *)((char *)this + 80);
      IMSCallManager::sendEmergencySessionRequiredNotification(v60, (uint64_t)&v143, (uint64_t)&v146, v59);
      v143 = off_1E78C0288;
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      SipUri::~SipUri((SipUri *)&v146);
      goto LABEL_315;
    case 16:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v61 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v62 = ImsOutStream::operator<<(v61, "Disconnected from ");
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v62);
      v63 = (_BYTE *)ImsOutStream::operator<<(v62, " due to ");
      v64 = *((_DWORD *)lpsrc + 10);
      if (v64 > 37)
        v64 = 10;
      LoggableString::LoggableString(&v177, (const std::string *)(reasonStrings + 24 * v64));
      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v63 + 40))(v63, &v177);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v63[17] = 0;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kIMSCallDisconnectionReasonForbidden"), (const void *)0x8000100, &v146);
      goto LABEL_285;
    case 17:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v65 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v66 = (_BYTE *)ImsOutStream::operator<<(v65, "INVITE timed out to ");
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v66);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v66[17] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonTimeout"), (const void *)0x8000100, &v146);
      goto LABEL_269;
    case 19:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v67 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v68 = ImsOutStream::operator<<(v67, "Disconnected from ");
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v68);
      v69 = (_BYTE *)ImsOutStream::operator<<(v68, " due to ");
      v70 = *((_DWORD *)lpsrc + 10);
      if (v70 > 37)
        v70 = 10;
      LoggableString::LoggableString(&v177, (const std::string *)(reasonStrings + 24 * v70));
      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v69 + 40))(v69, &v177);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v69 + 64))(v69, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v69[17] = 0;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonMediaError"), (const void *)0x8000100, &v146);
      goto LABEL_269;
    case 20:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v71 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v72 = ImsOutStream::operator<<(v71, "Disconnected from ");
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v72);
      v73 = (_BYTE *)ImsOutStream::operator<<(v72, " due to ");
      v74 = *((_DWORD *)lpsrc + 10);
      if (v74 > 37)
        v74 = 10;
      LoggableString::LoggableString(&v177, (const std::string *)(reasonStrings + 24 * v74));
      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v73 + 40))(v73, &v177);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v73 + 64))(v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v73[17] = 0;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonMediaTimeout"), (const void *)0x8000100, &v146);
      goto LABEL_269;
    case 21:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v75 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v76 = ImsOutStream::operator<<(v75, "Disconnected from ");
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v76);
      v77 = (_BYTE *)ImsOutStream::operator<<(v76, " due to ");
      v78 = *((_DWORD *)lpsrc + 10);
      if (v78 > 37)
        v78 = 10;
      LoggableString::LoggableString(&v177, (const std::string *)(reasonStrings + 24 * v78));
      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v77 + 40))(v77, &v177);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v77 + 64))(v77, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v77[17] = 0;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonMediaHeartbeatTimeout"), (const void *)0x8000100, &v146);
      goto LABEL_269;
    case 22:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v79 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v80 = ImsOutStream::operator<<(v79, "Disconnected from ");
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v80);
      v81 = (_BYTE *)ImsOutStream::operator<<(v80, " due to ");
      v82 = *((_DWORD *)lpsrc + 10);
      if (v82 > 37)
        v82 = 10;
      LoggableString::LoggableString(&v177, (const std::string *)(reasonStrings + 24 * v82));
      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v81 + 40))(v81, &v177);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v81[17] = 0;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonLocalSocketError"), (const void *)0x8000100, &v146);
      goto LABEL_269;
    case 24:
      if (!v12)
        goto LABEL_351;
      (*(void (**)(std::string *__return_ptr, _QWORD, char *))(**((_QWORD **)this + 4) + 192))(&v146, *((_QWORD *)this + 4), (char *)this + 104);
      v83 = (ImsPrefs *)SipStack::prefs((SipStack *)v146.__r_.__value_.__l.__data_);
      v84 = (void **)ImsPrefs::getRedialOverLteIfEpsFallbackCallFailedKey(v83);
      v85 = ImsPrefs::prefWithKey(v83, v84);
      if (v85)
      {
        if (((*(uint64_t (**)(void *))(*(_QWORD *)v85 + 40))(v85) & 1) == 0)
        {
LABEL_211:
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v146);
          goto LABEL_351;
        }
      }
      else if (!*((_BYTE *)v84 + 57))
      {
        goto LABEL_211;
      }
      v133 = *((_DWORD *)this + 144);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v146);
      if (v133 <= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(&v146, "call");
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
        v134 = ims::debug((uint64_t)&v146, (uint64_t)__p);
        v135 = ImsOutStream::operator<<(v134, "Call to ");
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v135);
        v136 = (_BYTE *)ImsOutStream::operator<<(v135, " requires redial over LTE due to LocalQosTimeout");
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v136 + 64))(v136, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v136[17] = 0;
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v146.__r_.__value_.__l.__data_);
        goto LABEL_279;
      }
LABEL_351:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v137 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v138 = ImsOutStream::operator<<(v137, "Disconnected from ");
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v138);
      v139 = (_BYTE *)ImsOutStream::operator<<(v138, " as in the dedault case due to LocalQosTimeout");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v139 + 64))(v139, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v139[17] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
LABEL_149:
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonUnknownError"), (const void *)0x8000100, &v146);
LABEL_285:
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v178.__r_.__value_.__l.__data_);
      v178 = v146;
LABEL_288:
      if (!*((_BYTE *)lpsrc + 148) || !*(_QWORD *)(*(_QWORD *)v9 + 512))
        goto LABEL_310;
      IMSCallInfo::stack(this, &v146);
      isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)(v146.__r_.__value_.__r.__words[0] + 3136));
      v116 = (std::__shared_weak_count *)v146.__r_.__value_.__l.__size_;
      if (v146.__r_.__value_.__l.__size_)
      {
        v117 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
      if (isNR)
      {
        std::string::basic_string[abi:ne180100]<0>(&v146, "call");
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
        v119 = ims::debug((uint64_t)&v146, (uint64_t)__p);
        v120 = (_BYTE *)ImsOutStream::operator<<(v119, "Anonymous redial requested for NR emergency call.  Doing EPS fallback instead.");
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v120 + 64))(v120, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v120[17] = 0;
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v146.__r_.__value_.__l.__data_);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v146, "call");
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
        v121 = ims::debug((uint64_t)&v146, (uint64_t)__p);
        v122 = (_BYTE *)ImsOutStream::operator<<(v121, "Anonymous redial is set for this call, attempting new emergency call.");
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v122 + 64))(v122, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v122[17] = 0;
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v146.__r_.__value_.__l.__data_);
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = 0uLL;
        v123 = *((_QWORD *)this + 4);
        v124 = *((_QWORD *)this + 17);
        v142[0] = *((_QWORD *)this + 16);
        v142[1] = v124;
        if (v124)
        {
          v125 = (unint64_t *)(v124 + 8);
          do
            v126 = __ldxr(v125);
          while (__stxr(v126 + 1, v125));
        }
        BambiClient::initializeRedial(v123, v142, 0, 0, (uint64_t)&v146);
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v142);
        if (v146.__r_.__value_.__r.__words[0])
        {
          *(_QWORD *)(*((_QWORD *)this + 16) + 400) = 0;
          std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)this + 16, (uint64_t *)&v146);
          *((_BYTE *)this + 574) = 1;
          *((_BYTE *)this + 571) = 0;
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v146);
          goto LABEL_315;
        }
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v146);
      }
LABEL_310:
      v127 = (IMSCallManager *)*((_QWORD *)this + 3);
      v140 = off_1E78C0288;
      if (*((char *)this + 103) < 0)
        std::string::__init_copy_ctor_external(&v141, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
      else
        v141 = *(std::string *)((char *)this + 80);
      IMSCallManager::sendCallDisconnectionNotification(v127, (uint64_t)&v140, &v178, (uint64_t)v186);
      v140 = off_1E78C0288;
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v141.__r_.__value_.__l.__data_);
LABEL_315:
      if ((SHIBYTE(v178.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_318;
      v30 = (void *)v178.__r_.__value_.__r.__words[0];
LABEL_317:
      operator delete(v30);
LABEL_318:
      v128 = v180;
      if (v180)
      {
        p_shared_owners = (unint64_t *)&v180->__shared_owners_;
        do
          v130 = __ldaxr(p_shared_owners);
        while (__stlxr(v130 - 1, p_shared_owners));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      if (SHIBYTE(v183) < 0)
        operator delete(*((void **)&v182 + 1));
      if (SBYTE7(v182) < 0)
        operator delete((void *)v181);
      if (SHIBYTE(v190) < 0)
        operator delete(*((void **)&v189 + 1));
      if (SBYTE7(v189) < 0)
        operator delete((void *)v188);
      if (v186[31] < 0)
        operator delete(*(void **)&v186[8]);
      v8 = v192;
LABEL_334:
      if (v8)
      {
        v131 = (unint64_t *)&v8->__shared_owners_;
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      return;
    case 31:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v86 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v86);
      v87 = (_BYTE *)ImsOutStream::operator<<(v86, " failed: we cannot support emergency calls in this location");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v87 + 64))(v87, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v87[17] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kIMSCallDisconnectionReasonNoEmergencyCallLocation"), (const void *)0x8000100, &v146);
      goto LABEL_285;
    case 32:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v88 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v89 = ImsOutStream::operator<<(v88, "Disconnected from ");
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v89);
      v90 = (_BYTE *)ImsOutStream::operator<<(v89, " due to ");
      v91 = *((_DWORD *)lpsrc + 10);
      if (v91 > 37)
        v91 = 10;
      LoggableString::LoggableString(&v177, (const std::string *)(reasonStrings + 24 * v91));
      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v90 + 40))(v90, &v177);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v90 + 64))(v90, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v90[17] = 0;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kIMSCallDisconnectionReasonAudioUnit"), (const void *)0x8000100, &v146);
      goto LABEL_269;
    case 33:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v92 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v93 = ImsOutStream::operator<<(v92, "Disconnected from ");
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v93);
      v94 = (_BYTE *)ImsOutStream::operator<<(v93, " due to ");
      v95 = *((_DWORD *)lpsrc + 10);
      if (v95 > 37)
        v95 = 10;
      LoggableString::LoggableString(&v177, (const std::string *)(reasonStrings + 24 * v95));
      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v94 + 40))(v94, &v177);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v94 + 64))(v94, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v94[17] = 0;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kIMSCallDisconnectionReasonMediaserverCrash"), (const void *)0x8000100, &v146);
      goto LABEL_269;
    case 34:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v96 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v96);
      v97 = (_BYTE *)ImsOutStream::operator<<(v96, " Declined, locally busy.");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v97 + 64))(v97, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v97[17] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kIMSCallDisconnectionReasonLocalBusy"), (const void *)0x8000100, &v146);
      goto LABEL_285;
    case 35:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v98 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v99 = ImsOutStream::operator<<(v98, "Disconnected from ");
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v99);
      v100 = (_BYTE *)ImsOutStream::operator<<(v99, " due to ");
      v101 = *((_DWORD *)lpsrc + 10);
      if (v101 > 37)
        v101 = 10;
      LoggableString::LoggableString(&v177, (const std::string *)(reasonStrings + 24 * v101));
      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v100 + 40))(v100, &v177);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v100 + 64))(v100, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v100[17] = 0;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kIMSCallDisconnectionReasonBasebandCrash"), (const void *)0x8000100, &v146);
      goto LABEL_269;
    case 36:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v102 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v103 = ImsOutStream::operator<<(v102, "Disconnected from ");
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v103);
      v104 = (_BYTE *)ImsOutStream::operator<<(v103, " due to ");
      v105 = *((_DWORD *)lpsrc + 10);
      if (v105 > 37)
        v105 = 10;
      LoggableString::LoggableString(&v177, (const std::string *)(reasonStrings + 24 * v105));
      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v104 + 40))(v104, &v177);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v104 + 64))(v104, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v104[17] = 0;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonRequiresCSFB"), (const void *)0x8000100, &v146);
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v178.__r_.__value_.__l.__data_);
      v178 = v146;
      v186[0] = 1;
      goto LABEL_272;
    case 37:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v106 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v107 = ImsOutStream::operator<<(v106, "Disconnected from ");
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v107);
      v108 = (_BYTE *)ImsOutStream::operator<<(v107, " due to ");
      v109 = *((_DWORD *)lpsrc + 10);
      if (v109 > 37)
        v109 = 10;
      LoggableString::LoggableString(&v177, (const std::string *)(reasonStrings + 24 * v109));
      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v108 + 40))(v108, &v177);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v108 + 64))(v108, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v108[17] = 0;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonRequiresRedial"), (const void *)0x8000100, &v146);
LABEL_269:
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v178.__r_.__value_.__l.__data_);
      v178 = v146;
LABEL_272:
      v186[2] = 1;
      goto LABEL_288;
    default:
      std::string::basic_string[abi:ne180100]<0>(&v146, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      v51 = ims::debug((uint64_t)&v146, (uint64_t)__p);
      v52 = ImsOutStream::operator<<(v51, "Disconnected from ");
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v9 + 1040) + 40))(*(_QWORD *)v9 + 1040, v52);
      v53 = (_BYTE *)ImsOutStream::operator<<(v52, " due to ");
      v54 = *((_DWORD *)lpsrc + 10);
      if (v54 > 37)
        v54 = 10;
      LoggableString::LoggableString(&v177, (const std::string *)(reasonStrings + 24 * v54));
      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v53 + 40))(v53, &v177);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v53[17] = 0;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      goto LABEL_149;
  }
}

void sub_1BEEA7CEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3E0]);
  ims::AccessNetwork::~AccessNetwork((void **)(v1 - 256));
  ims::DisconnectInfo::~DisconnectInfo((void **)(v1 - 176));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleMediaInitializedEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  uint64_t v4;
  void (**v5)(ImsUuid *__hidden);
  std::string __p;

  v4 = *((_QWORD *)this + 3);
  v5 = off_1E78C0288;
  if (*((char *)this + 103) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
  else
    __p = *(std::string *)((char *)this + 80);
  (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallEvent *))(*(_QWORD *)v4 + 232))(v4, &v5, CFSTR("kCallStatusMediaInitialized"), *((unsigned __int8 *)this + 40), a2);
  v5 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEEA81F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleMediaActivationEvent(IMSCallInfo *this, BambiCallEvent *a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  SipSession *v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __CFString **v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void (**v32)(ImsUuid *__hidden);
  std::string v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void (**v36)(ImsUuid *__hidden);
  std::string v37;
  void *__p[2];
  char v39;
  void *v40;
  std::__shared_weak_count *v41;
  char v42;

  std::string::basic_string[abi:ne180100]<0>(&v40, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v40, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleMedia", 11);
  *(_BYTE *)(v6 + 17) = 0;
  if ((_DWORD)a3)
    v7 = "A";
  else
    v7 = "Dea";
  if ((_DWORD)a3)
    v8 = 1;
  else
    v8 = 3;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)v7, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"ctivationEvent", 14);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v39 < 0)
    operator delete(__p[0]);
  if (v42 < 0)
    operator delete(v40);
  if (*((_QWORD *)this + 69))
  {
    std::string::basic_string[abi:ne180100]<0>(&v40, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)&v40, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Ignore for conference participant.", 34);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v39 < 0)
      operator delete(__p[0]);
    if (v42 < 0)
      operator delete(v40);
    return;
  }
  *((_BYTE *)this + 572) = a3;
  v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v10)
  {
    v11 = (_QWORD *)*((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v40 = 0;
    v14 = std::__shared_weak_count::lock(v10);
    v41 = v14;
    if (v14)
      v40 = v11;
    else
      v11 = 0;
  }
  else
  {
    v14 = 0;
    v11 = 0;
    v40 = 0;
    v41 = 0;
  }
  if (v11 != *((_QWORD **)this + 16))
  {
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v10)
    {
      v17 = v10;
LABEL_31:
      std::__shared_weak_count::__release_weak(v17);
      return;
    }
    return;
  }
  v18 = (SipSession *)v11[48];
  if (v18)
  {
    v19 = SipSession::confirmed(v18);
    if (!v14)
      goto LABEL_40;
  }
  else
  {
    v19 = 0;
    if (!v14)
      goto LABEL_40;
  }
  v20 = (unint64_t *)&v14->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_40:
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  if (v19)
  {
    v22 = *((_QWORD *)this + 3);
    v36 = off_1E78C0288;
    v23 = (_OWORD *)((char *)this + 80);
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&v37, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    }
    else
    {
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *v23;
      v37.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
    }
    v24 = kIMSCallStatusMediaActive;
    if (!(_DWORD)a3)
      v24 = kIMSCallStatusMediaInactive;
    (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), __CFString *, _QWORD, BambiCallEvent *))(*(_QWORD *)v22 + 232))(v22, &v36, *v24, *((unsigned __int8 *)this + 40), a2);
    v36 = off_1E78C0288;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    v25 = *((_QWORD *)this + 3);
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    v34 = *((_QWORD *)this + 16);
    v35 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v32 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&v33, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    }
    else
    {
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *v23;
      v33.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void (***)(ImsUuid *__hidden)))(*(_QWORD *)v25
                                                                                                  + 208))(v25, &v34, a3, &v32);
    v32 = off_1E78C0288;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    v29 = v35;
    if (v35)
    {
      v30 = (unint64_t *)&v35->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        v17 = v29;
        goto LABEL_31;
      }
    }
  }
}

void sub_1BEEA862C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleSessionConfirmedEvent(IMSCallInfo *this, BambiCallSessionConfirmedEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  BambiCall *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::string::size_type v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *size;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48[2];
  void (**v49)(ImsUuid *__hidden);
  std::string v50;
  void (**v51)(ImsUuid *__hidden);
  std::string v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void (**v55)(ImsUuid *__hidden);
  std::string __p;
  char *v57;
  std::__shared_weak_count *v58;
  char v59;
  std::string v60;
  uint64_t v61;
  std::__shared_weak_count *v62;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v61 = 0;
    v8 = std::__shared_weak_count::lock(v4);
    v62 = v8;
    if (v8)
      v61 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v8 = 0;
    v5 = 0;
    v61 = 0;
    v62 = 0;
  }
  if (v5 == *((_QWORD *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v60, "call");
    std::string::basic_string[abi:ne180100]<0>(&v57, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)&v60, (uint64_t)&v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Session confirmed with ", 23);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 1040) + 40))(v5 + 1040, v10);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v59 < 0)
      operator delete(v57);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    v11 = *((_QWORD *)this + 3);
    v55 = off_1E78C0288;
    v12 = (_OWORD *)((char *)this + 80);
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v12;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
    }
    (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, _QWORD))(*(_QWORD *)v11 + 232))(v11, &v55, CFSTR("kCallStatusMediaActive"), *((unsigned __int8 *)this + 40), 0);
    v55 = off_1E78C0288;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v13 = *((_QWORD *)this + 3);
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    v53 = *((_QWORD *)this + 16);
    v54 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v51 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&v52, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    }
    else
    {
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *v12;
      v52.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void (***)(ImsUuid *__hidden)))(*(_QWORD *)v13
                                                                                                  + 208))(v13, &v53, 1, &v51);
    v51 = off_1E78C0288;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    v17 = v54;
    if (v54)
    {
      v18 = (unint64_t *)&v54->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = *((_QWORD *)this + 3);
    v49 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    }
    else
    {
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *v12;
      v50.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
    }
    (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallSessionConfirmedEvent *))(*(_QWORD *)v20 + 232))(v20, &v49, CFSTR("kCallStatusActive"), *((unsigned __int8 *)this + 40), a2);
    v49 = off_1E78C0288;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    v21 = (BambiCall *)*((_QWORD *)this + 16);
    if (v21)
      BambiCall::sendHoldResumeIndication(v21, (*((_DWORD *)v21 + 110) & 0xFFFFFFFE) == 2);
    if (*((_DWORD *)this + 144) == 2 && *((_QWORD *)this + 16))
    {
      v22 = *((_QWORD *)this + 3);
      IMSCallInfo::stack(this, &v57);
      if (v57[4159] < 0)
        std::string::__init_copy_ctor_external(&v60, *((const std::string::value_type **)v57 + 517), *((_QWORD *)v57 + 518));
      else
        v60 = *(std::string *)(v57 + 4136);
      IMSCallManager::sendCallStatusRequest(v22, (uint64_t)&v60, 1, *(unsigned __int8 *)(*((_QWORD *)this + 16) + 1488), *(_QWORD *)(*((_QWORD *)this + 16) + 512) != 0);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      v23 = v58;
      if (v58)
      {
        v24 = (unint64_t *)&v58->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      *((_DWORD *)this + 144) = 3;
    }
    v26 = *((_QWORD *)this + 3);
    v27 = *(char **)(v26 + 24);
    v28 = *(std::__shared_weak_count **)(v26 + 32);
    v57 = v27;
    v58 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = *((_QWORD *)v27 + 36);
    v32 = *((_QWORD *)v27 + 37);
    v60.__r_.__value_.__r.__words[0] = v31;
    v60.__r_.__value_.__l.__size_ = v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    v48[0] = *((_QWORD *)this + 16);
    v48[1] = (uint64_t)v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    IMSMetricsManager::logSessionConfirmedEvent(v31, v48, *((unsigned __int8 *)this + 40), *((unsigned __int8 *)this + 40));
    if (v35)
    {
      v38 = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    size = (std::__shared_weak_count *)v60.__r_.__value_.__l.__size_;
    if (v60.__r_.__value_.__l.__size_)
    {
      v41 = (unint64_t *)(v60.__r_.__value_.__l.__size_ + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v43 = v58;
    if (v58)
    {
      v44 = (unint64_t *)&v58->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v8 = v62;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v60, "call");
    std::string::basic_string[abi:ne180100]<0>(&v57, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)&v60, (uint64_t)&v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"IMSCallInfo::handleSessionConfirmedEvent for an unknown call", 60);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v59 < 0)
      operator delete(v57);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (v8)
  {
    v46 = (unint64_t *)&v8->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BEEA8CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 - 120);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 - 64);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleSessionAcknowledgedEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void (**v14)(ImsUuid *__hidden);
  std::string v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v3)
  {
    v4 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    v20 = 0;
    v21 = std::__shared_weak_count::lock(v3);
    if (v21)
      v20 = v4;
    else
      v4 = 0;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    v4 = 0;
    v20 = 0;
    v21 = 0;
  }
  if (v4 == *((_QWORD *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Session acknowledged with ", 26);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 1040) + 40))(v4 + 1040, v9);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
    v10 = *((_QWORD *)this + 3);
    v14 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
      std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    else
      v15 = *(std::string *)((char *)this + 80);
    (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, _QWORD))(*(_QWORD *)v10 + 232))(v10, &v14, CFSTR("kCallStatusAcknowledged"), *((unsigned __int8 *)this + 40), 0);
    v14 = off_1E78C0288;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    {
      v8 = (void *)v15.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"IMSCallInfo::handleSessionAcknowledgedEvent for an unknown call", 63);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
    {
      v8 = v18[0];
LABEL_23:
      operator delete(v8);
    }
  }
  v11 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BEEA9038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 48);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleSessionRequestedEvent(IMSCallInfo *this, BambiCallSessionRequestedEvent *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ImsPrefs *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _BOOL8 isWifi;
  BambiCallEvent *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69[2];
  void (**v70)(ImsUuid *__hidden);
  std::string v71;
  SipStack *v72;
  std::__shared_weak_count *v73;
  void (**v74)(ImsUuid *__hidden);
  std::string v75;
  _QWORD v76[2];
  void *__p;
  std::__shared_weak_count *v78;
  char v79;
  void *v80;
  std::__shared_weak_count *v81;
  char v82;
  uint64_t v83;
  std::__shared_weak_count *v84;

  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v3)
  {
    v4 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    v83 = 0;
    v84 = std::__shared_weak_count::lock(v3);
    if (v84)
      v83 = v4;
    else
      v4 = 0;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    v4 = 0;
    v83 = 0;
    v84 = 0;
  }
  if (v4 != *((_QWORD *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v80, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)&v80, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"IMSCallInfo::handleSessionRequestedEvent for an unknown call", 60);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v79 < 0)
      operator delete(__p);
    if (v82 < 0)
    {
      v8 = v80;
LABEL_38:
      operator delete(v8);
      goto LABEL_39;
    }
    goto LABEL_39;
  }
  v9 = *((_QWORD *)this + 4);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  v76[0] = v4;
  v76[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = BambiClient::unconfirmedCallsExcludingCall(v9, 0, v76);
  v14 = v13;
  if (!v10)
    goto LABEL_21;
  v15 = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_21:
    if (v13)
      goto LABEL_22;
LABEL_29:
    v72 = 0;
    v73 = 0;
    (*(void (**)(SipStack **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 4) + 192))(&v72, *((_QWORD *)this + 4), (char *)this + 104);
    if (v72)
    {
      v19 = (ImsPrefs *)SipStack::prefs(v72);
      v20 = ImsPrefs::getMaxCallCountKey(v19);
      v21 = ImsPrefs::prefWithKey(v19, (void **)v20);
      if (v21)
        v22 = (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 56))(v21);
      else
        v22 = *((_DWORD *)v20 + 15);
    }
    else
    {
      v22 = 3;
    }
    if (BambiClient::callCount(*((BambiClient **)this + 4)) > (unint64_t)v22)
    {
      std::string::basic_string[abi:ne180100]<0>(&v80, "call");
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v26 = ImsLogger::info(ims::_logger, (uint64_t)&v80, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"IMSCallInfo::handleSessionRequestedEvent when we already have ", 62);
      *(_BYTE *)(v26 + 17) = 0;
      BambiClient::callCount(*((BambiClient **)this + 4));
      std::ostream::operator<<();
      *(_BYTE *)(v26 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)" calls. Declining.", 18);
      *(_BYTE *)(v26 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v26 + 17) = 0;
      if (v79 < 0)
        operator delete(__p);
      if (v82 < 0)
        operator delete(v80);
      v27 = *((_QWORD *)this + 3);
      v70 = off_1E78C0288;
      if (*((char *)this + 103) < 0)
        std::string::__init_copy_ctor_external(&v71, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
      else
        v71 = *(std::string *)((char *)this + 80);
      std::string::basic_string[abi:ne180100]<0>(&v80, "AlreadyOnMaxCalls");
      (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), void **))(*(_QWORD *)v27 + 40))(v27, &v70, &v80);
      if (v82 < 0)
        operator delete(v80);
      v70 = off_1E78C0288;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      goto LABEL_111;
    }
    v28 = *((_QWORD *)this + 3);
    v29 = *(_QWORD **)(v28 + 24);
    v30 = *(std::__shared_weak_count **)(v28 + 32);
    __p = v29;
    v78 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = (void *)v29[36];
    v34 = (std::__shared_weak_count *)v29[37];
    v80 = v33;
    v81 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    v69[0] = *((_QWORD *)this + 16);
    v69[1] = (uint64_t)v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    IMSMetricsManager::logSessionRequestedEvent((uint64_t)v33, v69, *((unsigned __int8 *)this + 40), 0);
    if (v37)
    {
      v42 = (unint64_t *)&v37->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v44 = v81;
    if (v81)
    {
      v45 = (unint64_t *)&v81->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v78;
    if (v78)
    {
      v48 = (unint64_t *)&v78->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = *((_QWORD *)this + 3);
    v51 = *(_QWORD *)(v50 + 24);
    v52 = *(std::__shared_weak_count **)(v50 + 32);
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = *(_QWORD *)(v51 + 288);
    v56 = *(std::__shared_weak_count **)(v51 + 296);
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      if (*(_BYTE *)(v55 + 224))
      {
        isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)((char *)v72 + 3136));
        v59 = isWifi;
        do
          v60 = __ldaxr(v57);
        while (__stlxr(v60 - 1, v57));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
LABEL_93:
        if (v52)
        {
          v62 = (unint64_t *)&v52->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        if (!v59)
          goto LABEL_111;
        goto LABEL_105;
      }
      do
        v61 = __ldaxr(v57);
      while (__stlxr(v61 - 1, v57));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    else if (*(_BYTE *)(v55 + 224))
    {
      isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)((char *)v72 + 3136));
      v59 = isWifi;
      goto LABEL_93;
    }
    if (v52)
    {
      v64 = (unint64_t *)&v52->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
LABEL_105:
    IMSCallManager::sendIncomingCallStatusNotification((IMSCallManager *)isWifi, this, v41);
LABEL_111:
    v66 = v73;
    if (v73)
    {
      v67 = (unint64_t *)&v73->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!v14)
    goto LABEL_29;
LABEL_22:
  std::string::basic_string[abi:ne180100]<0>(&v80, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v17 = ImsLogger::info(ims::_logger, (uint64_t)&v80, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"IMSCallInfo::handleSessionRequestedEvent during an existing alerting call. Declining.", 85);
  *(_BYTE *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v17 + 17) = 0;
  if (v79 < 0)
    operator delete(__p);
  if (v82 < 0)
    operator delete(v80);
  v18 = *((_QWORD *)this + 3);
  v74 = off_1E78C0288;
  if (*((char *)this + 103) < 0)
    std::string::__init_copy_ctor_external(&v75, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
  else
    v75 = *(std::string *)((char *)this + 80);
  std::string::basic_string[abi:ne180100]<0>(&v80, "EstablishingAnotherCall");
  (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), void **))(*(_QWORD *)v18 + 40))(v18, &v74, &v80);
  if (v82 < 0)
    operator delete(v80);
  v74 = off_1E78C0288;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (void *)v75.__r_.__value_.__r.__words[0];
    goto LABEL_38;
  }
LABEL_39:
  v23 = v84;
  if (v84)
  {
    v24 = (unint64_t *)&v84->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1BEEA9818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 - 64);
  _Unwind_Resume(a1);
}

void IMSCallManager::sendIncomingCallStatusNotification(IMSCallManager *this, IMSCallInfo *a2, BambiCallEvent *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  BambiCall *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  BambiCall *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  ImsPrefs *v21;
  void **EnableSenderNameKey;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  BambiCall *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  BambiCall *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::string::size_type v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  BambiCall *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _BOOL4 IsPrivate;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  void (**v54)(ImsUuid *__hidden);
  uint64_t v55;
  void (**v56)(ImsUuid *__hidden);
  size_t size;
  std::string *p_str;
  std::string *p_s;
  std::string::size_type v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::string::size_type v66;
  std::string *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  ImsPrefs *v82;
  void **EnableBrandedCallingKey;
  void *v84;
  BambiCall *v85;
  std::string::size_type v86;
  unint64_t *v87;
  unint64_t v88;
  std::string::size_type v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  _BOOL4 v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  BambiCall *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  BambiCall *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  BambiCall *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void (**v120)(ImsUuid *__hidden);
  _QWORD *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  std::string v130;
  std::string v131;
  void *v132;
  std::string v133;
  std::string __str;
  SipStack *v135;
  std::__shared_weak_count *v136;
  std::string __s;
  std::string __p;
  std::string v139[2];
  void *v140[2];
  void *v141[2];
  __int128 v142;
  void *v143[2];
  __int128 v144;
  __int128 v145;
  void *v146[2];
  void *v147[4];

  memset(v147, 0, sizeof(v147));
  v145 = 0u;
  *(_OWORD *)v146 = 0u;
  *(_OWORD *)v143 = 0u;
  v144 = 0u;
  *(_OWORD *)v141 = 0u;
  v142 = 0u;
  *(_OWORD *)v140 = 0u;
  memset(v139, 0, sizeof(v139));
  if (a2)
  {
    v5 = *((_QWORD *)a2 + 16);
    v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
    if (!v4)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
LABEL_8:
        memset(&__p, 0, sizeof(__p));
        v9 = (BambiCall *)*((_QWORD *)a2 + 16);
        v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
        v131.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
        if (v10)
        {
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        BambiCall::remoteDisplayName(v9, &__p);
        if (v10)
        {
          v13 = (unint64_t *)&v10->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        memset(&__s, 0, sizeof(__s));
        v15 = (BambiCall *)*((_QWORD *)a2 + 16);
        v16 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        v131.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        BambiCall::remoteDisplayNumber(v15, (uint64_t)&__s);
        if (v16)
        {
          v19 = (unint64_t *)&v16->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v135 = 0;
        v136 = 0;
        IMSCallInfo::stack(a2, &v135);
        if (!v135)
        {
          std::string::basic_string[abi:ne180100]<0>(&v131, "legacy");
          std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&str_1_10);
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v26 = ImsLogger::warn(ims::_logger, (uint64_t)&v131, (uint64_t)&__str);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Unable to resolve sip stack for callid: ", 40);
          *(_BYTE *)(v26 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v26 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v26 + 17) = 0;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (void *)v131.__r_.__value_.__r.__words[0];
LABEL_235:
            operator delete(v27);
          }
LABEL_236:
          v123 = v136;
          if (v136)
          {
            v124 = (unint64_t *)&v136->__shared_owners_;
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            v25 = (void *)__p.__r_.__value_.__r.__words[0];
            goto LABEL_245;
          }
          goto LABEL_246;
        }
        v21 = (ImsPrefs *)SipStack::prefs(v135);
        EnableSenderNameKey = (void **)ImsPrefs::getEnableSenderNameKey(v21);
        v23 = ImsPrefs::prefWithKey(v21, EnableSenderNameKey);
        if (v23)
        {
          if (((*(uint64_t (**)(void *))(*(_QWORD *)v23 + 40))(v23) & 1) == 0)
            goto LABEL_27;
        }
        else if (!*((_BYTE *)EnableSenderNameKey + 57))
        {
LABEL_27:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            *__p.__r_.__value_.__l.__data_ = 0;
            __p.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            __p.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          }
          goto LABEL_46;
        }
        ims::removeQuotes((uint64_t)&__p, &__str);
        std::string::basic_string[abi:ne180100]<0>(&v133, "\"\\");
        ims::unescapeString((uint64_t *)&__str, 0x5Cu, (uint64_t)&v133, &v131);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = v131;
        *((_BYTE *)&v131.__r_.__value_.__s + 23) = 0;
        v131.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
LABEL_46:
        std::string::operator=(v139, &__p);
        v28 = (BambiCall *)*((_QWORD *)a2 + 16);
        v29 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        BambiCall::remoteDisplayNumber(v28, (uint64_t)&v131);
        if (SHIBYTE(v139[1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v139[1].__r_.__value_.__l.__data_);
        v139[1] = v131;
        *((_BYTE *)&v131.__r_.__value_.__s + 23) = 0;
        v131.__r_.__value_.__s.__data_[0] = 0;
        if (v29)
        {
          v32 = (unint64_t *)&v29->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v34 = (BambiCall *)*((_QWORD *)a2 + 16);
        v35 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        BambiCall::remoteDisplayCountryCode(v34, &v131);
        if (SHIBYTE(v141[0]) < 0)
          operator delete(v140[0]);
        *(_OWORD *)v140 = *(_OWORD *)&v131.__r_.__value_.__l.__data_;
        v141[0] = (void *)v131.__r_.__value_.__r.__words[2];
        *((_BYTE *)&v131.__r_.__value_.__s + 23) = 0;
        v131.__r_.__value_.__s.__data_[0] = 0;
        if (v35)
        {
          v38 = (unint64_t *)&v35->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v40 = *((_QWORD *)a2 + 16);
        v41 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
        v131.__r_.__value_.__r.__words[0] = v40;
        v131.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        std::string::operator=((std::string *)&v141[1], (const std::string *)(v40 + 464));
        if (v41)
        {
          v44 = (unint64_t *)&v41->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v46 = (BambiCall *)*((_QWORD *)a2 + 16);
        v47 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
        v131.__r_.__value_.__l.__size_ = (std::string::size_type)v47;
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        IsPrivate = BambiCall::senderIsPrivate(v46);
        if (v47)
        {
          v51 = (unint64_t *)&v47->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        if (IsPrivate)
        {
          LOBYTE(v143[0]) = 1;
          std::string::basic_string[abi:ne180100]<0>(&__str, "call");
          std::string::basic_string[abi:ne180100]<0>(&v133, (char *)&str_1_10);
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v53 = ImsLogger::debug(ims::_logger, (uint64_t)&__str, (uint64_t)&v133);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v53 + 8), (uint64_t)"Incoming call ", 14);
          *(_BYTE *)(v53 + 17) = 0;
          v131.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
          if (*((char *)a2 + 103) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v131.__r_.__value_.__r.__words[1], *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
            v54 = (void (**)(ImsUuid *__hidden))v131.__r_.__value_.__r.__words[0];
          }
          else
          {
            *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = *((_OWORD *)a2 + 5);
            v132 = (void *)*((_QWORD *)a2 + 12);
            v54 = off_1E78C0288;
          }
          ((void (*)(uint64_t, uint64_t))v54[2])((uint64_t)&v131, v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v53 + 8), (uint64_t)" from blocked number", 20);
          *(_BYTE *)(v53 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v53 + 17) = 0;
          goto LABEL_98;
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "call");
        std::string::basic_string[abi:ne180100]<0>(&v133, (char *)&str_1_10);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v55 = ImsLogger::debug(ims::_logger, (uint64_t)&__str, (uint64_t)&v133);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)"Incoming call ", 14);
        *(_BYTE *)(v55 + 17) = 0;
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
        if (*((char *)a2 + 103) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v131.__r_.__value_.__r.__words[1], *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
          v56 = (void (**)(ImsUuid *__hidden))v131.__r_.__value_.__r.__words[0];
        }
        else
        {
          *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = *((_OWORD *)a2 + 5);
          v132 = (void *)*((_QWORD *)a2 + 12);
          v56 = off_1E78C0288;
        }
        ((void (*)(uint64_t, uint64_t))v56[2])((uint64_t)&v131, v55);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)" from ", 6);
        *(_BYTE *)(v55 + 17) = 0;
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__s.__r_.__value_.__l.__size_)
          {
            std::string::__init_copy_ctor_external(&v130, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            goto LABEL_96;
          }
        }
        else if (*((_BYTE *)&__s.__r_.__value_.__s + 23))
        {
          v130 = __s;
          goto LABEL_96;
        }
        std::string::basic_string[abi:ne180100]<0>(&v130, "Unknown number");
LABEL_96:
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v55 + 32))(v55, &v130);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v55 + 17) = 0;
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v130.__r_.__value_.__l.__data_);
LABEL_98:
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
        if (SHIBYTE(v132) < 0)
          operator delete((void *)v131.__r_.__value_.__l.__size_);
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          size = __s.__r_.__value_.__l.__size_;
        memset(&__str, 0, sizeof(__str));
        p_str = &__str;
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 1);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (size)
        {
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_s = &__s;
          else
            p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
          memmove(p_str, p_s, size);
        }
        *(_WORD *)((char *)&p_str->__r_.__value_.__l.__data_ + size) = 10;
        memset(&v133, 0, sizeof(v133));
        v60 = *((_QWORD *)a2 + 16);
        v61 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
        v131.__r_.__value_.__r.__words[0] = v60;
        v131.__r_.__value_.__l.__size_ = (std::string::size_type)v61;
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        if (*(char *)(v60 + 695) < 0)
          std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)(v60 + 672), *(_QWORD *)(v60 + 680));
        else
          v133 = *(std::string *)(v60 + 672);
        if (v61)
        {
          v64 = (unint64_t *)&v61->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
        else
          v66 = v133.__r_.__value_.__l.__size_;
        if (v66)
        {
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = &v133;
          else
            v67 = (std::string *)v133.__r_.__value_.__r.__words[0];
          std::string::append(&__str, (const std::string::value_type *)v67, v66);
        }
        std::string::operator=((std::string *)&v143[1], &__str);
        BYTE1(v143[0]) = *((_BYTE *)a2 + 40);
        v68 = *((_QWORD *)a2 + 16);
        v69 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
          v72 = *(_QWORD *)(v68 + 384);
          if (v72)
            LOBYTE(v72) = *(_BYTE *)(v72 + 1608) & 1;
          LOBYTE(v145) = v72;
          do
            v73 = __ldaxr(v70);
          while (__stlxr(v73 - 1, v70));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        else
        {
          v74 = *(_QWORD *)(v68 + 384);
          if (v74)
            LOBYTE(v74) = *(_BYTE *)(v74 + 1608) & 1;
          LOBYTE(v145) = v74;
        }
        v75 = *((_QWORD *)a2 + 16);
        v76 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
          v79 = *(_QWORD *)(v75 + 384);
          if (v79)
            LODWORD(v79) = *(_DWORD *)(v79 + 1612);
          DWORD1(v145) = v79;
          do
            v80 = __ldaxr(v77);
          while (__stlxr(v80 - 1, v77));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        else
        {
          v81 = *(_QWORD *)(v75 + 384);
          if (v81)
            LODWORD(v81) = *(_DWORD *)(v81 + 1612);
          DWORD1(v145) = v81;
        }
        v82 = (ImsPrefs *)SipStack::prefs(v135);
        EnableBrandedCallingKey = (void **)ImsPrefs::getEnableBrandedCallingKey(v82);
        v84 = ImsPrefs::prefWithKey(v82, EnableBrandedCallingKey);
        if (v84)
        {
          if (!(*(unsigned int (**)(void *))(*(_QWORD *)v84 + 40))(v84))
            goto LABEL_207;
        }
        else if (!*((_BYTE *)EnableBrandedCallingKey + 57))
        {
          goto LABEL_207;
        }
        v85 = (BambiCall *)*((_QWORD *)a2 + 16);
        v86 = *((_QWORD *)a2 + 17);
        v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
        v130.__r_.__value_.__l.__size_ = v86;
        if (v86)
        {
          v87 = (unint64_t *)(v86 + 8);
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        BambiCall::remoteCompanyName(v85, &v131);
        v89 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v89 = v131.__r_.__value_.__l.__size_;
        if (v89)
        {
          v90 = *((_QWORD *)a2 + 16);
          v91 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
          if (v91)
          {
            v92 = (unint64_t *)&v91->__shared_owners_;
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }
          v94 = *(_QWORD *)(v90 + 384);
          if (v94)
            LODWORD(v94) = *(_DWORD *)(v94 + 1612);
          v95 = v94 == 1;
          if (v91)
          {
            v96 = (unint64_t *)&v91->__shared_owners_;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          if ((*((_BYTE *)&v131.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_179;
        }
        else
        {
          v95 = 0;
          if ((*((_BYTE *)&v131.__r_.__value_.__s + 23) & 0x80) == 0)
          {
LABEL_179:
            v98 = (std::__shared_weak_count *)v130.__r_.__value_.__l.__size_;
            if (!v130.__r_.__value_.__l.__size_)
              goto LABEL_183;
            v99 = (unint64_t *)(v130.__r_.__value_.__l.__size_ + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
              if (!v95)
                goto LABEL_207;
            }
            else
            {
LABEL_183:
              if (!v95)
                goto LABEL_207;
            }
            v101 = (BambiCall *)*((_QWORD *)a2 + 16);
            v102 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
            v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
            v130.__r_.__value_.__l.__size_ = (std::string::size_type)v102;
            if (v102)
            {
              v103 = (unint64_t *)&v102->__shared_owners_;
              do
                v104 = __ldxr(v103);
              while (__stxr(v104 + 1, v103));
            }
            BambiCall::remoteCompanyName(v101, &v131);
            if (SHIBYTE(v139[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v139[0].__r_.__value_.__l.__data_);
            v139[0] = v131;
            *((_BYTE *)&v131.__r_.__value_.__s + 23) = 0;
            v131.__r_.__value_.__s.__data_[0] = 0;
            if (v102)
            {
              v105 = (unint64_t *)&v102->__shared_owners_;
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            v107 = (BambiCall *)*((_QWORD *)a2 + 16);
            v108 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
            v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
            v130.__r_.__value_.__l.__size_ = (std::string::size_type)v108;
            if (v108)
            {
              v109 = (unint64_t *)&v108->__shared_owners_;
              do
                v110 = __ldxr(v109);
              while (__stxr(v110 + 1, v109));
            }
            BambiCall::remoteImageUrl(v107, &v131);
            if (SHIBYTE(v147[3]) < 0)
              operator delete(v147[1]);
            *(std::string *)&v147[1] = v131;
            *((_BYTE *)&v131.__r_.__value_.__s + 23) = 0;
            v131.__r_.__value_.__s.__data_[0] = 0;
            if (v108)
            {
              v111 = (unint64_t *)&v108->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
              }
            }
LABEL_207:
            v113 = (BambiCall *)*((_QWORD *)a2 + 16);
            v114 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
            v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
            v130.__r_.__value_.__l.__size_ = (std::string::size_type)v114;
            if (v114)
            {
              v115 = (unint64_t *)&v114->__shared_owners_;
              do
                v116 = __ldxr(v115);
              while (__stxr(v116 + 1, v115));
            }
            BambiCall::spamInfo(v113, (uint64_t)&v131);
            *((_QWORD *)&v145 + 1) = v131.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v147[0]) < 0)
              operator delete(v146[0]);
            *(_OWORD *)v146 = *(_OWORD *)&v131.__r_.__value_.__r.__words[1];
            v147[0] = v132;
            HIBYTE(v132) = 0;
            v131.__r_.__value_.__s.__data_[8] = 0;
            if (v114)
            {
              v117 = (unint64_t *)&v114->__shared_owners_;
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            memset(&v130, 0, sizeof(v130));
            if (*((char *)v135 + 4159) < 0)
            {
              std::string::__init_copy_ctor_external(&v130, *((const std::string::value_type **)v135 + 517), *((_QWORD *)v135 + 518));
            }
            else
            {
              *(_OWORD *)&v130.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v135 + 4136);
              v130.__r_.__value_.__r.__words[2] = *((_QWORD *)v135 + 519);
            }
            std::string::basic_string[abi:ne180100]<0>(v128, "audit");
            std::string::basic_string[abi:ne180100]<0>(v126, (char *)&str_1_10);
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v119 = ImsLogger::debug(ims::_logger, (uint64_t)v128, (uint64_t)v126);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v119 + 8), (uint64_t)"Creating ims::Client handle for call ", 37);
            *(_BYTE *)(v119 + 17) = 0;
            v131.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
            if (*((char *)a2 + 103) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v131.__r_.__value_.__r.__words[1], *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
              v120 = (void (**)(ImsUuid *__hidden))v131.__r_.__value_.__r.__words[0];
            }
            else
            {
              *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = *((_OWORD *)a2 + 5);
              v132 = (void *)*((_QWORD *)a2 + 12);
              v120 = off_1E78C0288;
            }
            ((void (*)(uint64_t, uint64_t))v120[2])((uint64_t)&v131, v119);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v119 + 8), (uint64_t)" on stack ", 10);
            *(_BYTE *)(v119 + 17) = 0;
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v119 + 32))(v119, &v130);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v119 + 64))(v119, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v119 + 17) = 0;
            v131.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
            if (SHIBYTE(v132) < 0)
              operator delete((void *)v131.__r_.__value_.__l.__size_);
            if (v127 < 0)
              operator delete(v126[0]);
            if (v129 < 0)
              operator delete(v128[0]);
            v121 = IMSCallInfo::createCallHandle((std::string::size_type *)a2);
            v122 = IMSClientManager::delegateForStack((void **)&v130.__r_.__value_.__l.__data_);
            (*(void (**)(uint64_t, _QWORD *, std::string *))(*(_QWORD *)(v122 + 16) + 16))(v122 + 16, v121, v139);
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v130.__r_.__value_.__l.__data_);
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v133.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              v27 = (void *)__str.__r_.__value_.__r.__words[0];
              goto LABEL_235;
            }
            goto LABEL_236;
          }
        }
        operator delete(v131.__r_.__value_.__l.__data_);
        goto LABEL_179;
      }
    }
    else
    {
LABEL_7:
      if (v5)
        goto LABEL_8;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v131, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v24 = ImsLogger::error(ims::_logger, (uint64_t)&v131, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"sendIncomingCallStatusNotification does not have a valid callInfo", 65);
  *(_BYTE *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v24 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
  {
    v25 = (void *)v131.__r_.__value_.__r.__words[0];
LABEL_245:
    operator delete(v25);
  }
LABEL_246:
  if (SHIBYTE(v147[3]) < 0)
    operator delete(v147[1]);
  if (SHIBYTE(v147[0]) < 0)
    operator delete(v146[0]);
  if (SHIBYTE(v144) < 0)
    operator delete(v143[1]);
  if (SHIBYTE(v142) < 0)
    operator delete(v141[1]);
  if (SHIBYTE(v141[0]) < 0)
    operator delete(v140[0]);
  if (SHIBYTE(v139[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v139[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139[0].__r_.__value_.__l.__data_);
}

void sub_1BEEAA8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  if (a43 < 0)
    operator delete(a38);
  if (a49 < 0)
    operator delete(a44);
  ims::CallIncomingInfo::~CallIncomingInfo(&a51);
  _Unwind_Resume(a1);
}

uint64_t IMSCallInfo::handleForceLTEFallbackEvent(uint64_t a1, void **a2)
{
  uint64_t v2;

  v2 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 104))(v2 + 16);
}

void IMSCallInfo::handleHoldIndicationEvent(IMSCallInfo *this, BambiCallHoldResumeIndicationEvent *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string __p;
  std::string v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::string v12;

  if (a2)
  {
    IMSCallInfo::stack(this, &v10);
    if (*(char *)(v10 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(v10 + 4136), *(_QWORD *)(v10 + 4144));
    else
      v12 = *(std::string *)(v10 + 4136);
    v4 = IMSClientManager::delegateForStack((void **)&v12.__r_.__value_.__l.__data_);
    if (*((char *)this + 103) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    else
      __p = *(std::string *)((char *)this + 80);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v9 = __p;
    (*(void (**)(uint64_t, std::string *, _QWORD, _QWORD))(*(_QWORD *)v4 + 208))(v4, &v9, *((unsigned int *)a2 + 11), *((unsigned int *)a2 + 10));
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    v5 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEEAACA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleResumeIndicationEvent(IMSCallInfo *this, BambiCallHoldResumeIndicationEvent *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string __p;
  std::string v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::string v12;

  if (a2)
  {
    IMSCallInfo::stack(this, &v10);
    if (*(char *)(v10 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(v10 + 4136), *(_QWORD *)(v10 + 4144));
    else
      v12 = *(std::string *)(v10 + 4136);
    v4 = IMSClientManager::delegateForStack((void **)&v12.__r_.__value_.__l.__data_);
    if (*((char *)this + 103) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    else
      __p = *(std::string *)((char *)this + 80);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v9 = __p;
    (*(void (**)(uint64_t, std::string *, _QWORD, _QWORD))(*(_QWORD *)v4 + 200))(v4, &v9, *((unsigned int *)a2 + 11), *((unsigned int *)a2 + 10));
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    v5 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEEAAE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleSessionTerminatingEvent(IMSCallInfo *this, BambiCallSessionTerminationBaseEvent *lpsrc)
{
  if (!*((_BYTE *)this + 571))
    IMSCallInfo::handleSessionTerminationEvent(this, lpsrc);
}

void IMSCallInfo::handleSessionTerminatedEvent(IMSCallInfo *this, BambiCallSessionTerminatedEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t i;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void (**v28)(ImsUuid *__hidden);
  std::string v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void (**v32)(ImsUuid *__hidden);
  std::string __p;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  v4 = *((_QWORD *)this + 3);
  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(std::__shared_weak_count **)(v4 + 32);
  v34 = v5;
  v35 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(_QWORD *)(v5 + 288);
  v10 = *(std::__shared_weak_count **)(v5 + 296);
  v36 = v9;
  v37 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = v9 + 176;
  for (i = *(_QWORD *)(v9 + 184); i != v13; i = *(_QWORD *)(i + 8))
    (*(void (**)(_QWORD, BambiCallSessionTerminatedEvent *))(**(_QWORD **)(i + 16) + 80))(*(_QWORD *)(i + 16), a2);
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v35)
  {
    v17 = &v35->__shared_owners_;
    do
      v18 = __ldaxr((unint64_t *)v17);
    while (__stlxr(v18 - 1, (unint64_t *)v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (!*((_BYTE *)this + 571))
  {
    v19 = *((_QWORD *)this + 3);
    v32 = off_1E78C0288;
    v20 = (_OWORD *)((char *)this + 80);
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v20;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
    }
    (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, _QWORD))(*(_QWORD *)v19 + 232))(v19, &v32, CFSTR("kCallStatusMediaInactive"), *((unsigned __int8 *)this + 40), 0);
    v32 = off_1E78C0288;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v21 = *((_QWORD *)this + 3);
    v22 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    v30 = *((_QWORD *)this + 16);
    v31 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v28 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&v29, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    }
    else
    {
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *v20;
      v29.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
    }
    (*(void (**)(uint64_t, uint64_t *, _QWORD, void (***)(ImsUuid *__hidden)))(*(_QWORD *)v21 + 208))(v21, &v30, 0, &v28);
    v28 = off_1E78C0288;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    v25 = v31;
    if (v31)
    {
      v26 = (unint64_t *)&v31->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    IMSCallInfo::handleSessionTerminationEvent(this, a2);
  }
}

void sub_1BEEAB150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

IMSCallManager **IMSCallInfo::handleMetricOnlyEvent(IMSCallManager **this, BambiCallEvent *lpsrc)
{
  IMSCallManager **v2;
  BambiCallSessionTerminationBaseEvent *v3;

  if ((*((_DWORD *)lpsrc + 2) & 0xFFFFFFFE) == 0xE)
  {
    v2 = this;
    IMSCallInfo::sendSessionTerminationMetric((IMSCallInfo *)v2, v3, 0);
    return (IMSCallManager **)IMSCallManager::sendCallEndRequest(v2[3], (std::__shared_weak_count **)v2, 0);
  }
  return this;
}

uint64_t IMSCallInfo::sendSessionTerminationMetric(IMSCallInfo *this, BambiCallSessionTerminationBaseEvent *lpsrc, BOOL *a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  _BOOL8 v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  IMSMetricsManager *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t i;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  IMSMetricsManager *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  BOOL v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  IMSMetricsManager *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;

  v6 = (std::__shared_weak_count *)*((_QWORD *)lpsrc + 3);
  if (v6)
  {
    v7 = *((_QWORD *)lpsrc + 2);
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v64 = 0;
    v65 = std::__shared_weak_count::lock(v6);
    if (v65)
      v64 = v7;
    else
      v7 = 0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    v7 = 0;
    v64 = 0;
    v65 = 0;
  }
  if (*((_BYTE *)lpsrc + 144) && !*((_BYTE *)lpsrc + 145))
  {
    IMSCallInfo::stack(this, &v62);
    if (v62)
    {
      IMSCallInfo::stack(this, &v60);
      if (*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(v60 + 144)) + 456))
        v48 = v7 == 0;
      else
        v48 = 1;
      if (v48 || !*(_BYTE *)(v7 + 1488))
      {
        v10 = 0;
      }
      else
      {
        IMSCallInfo::stack(this, &v58);
        v10 = *(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(v58 + 144)) + 912) == 0;
        v49 = v59;
        if (v59)
        {
          p_shared_owners = (unint64_t *)&v59->__shared_owners_;
          do
            v51 = __ldaxr(p_shared_owners);
          while (__stlxr(v51 - 1, p_shared_owners));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
      v52 = v61;
      if (v61)
      {
        v53 = (unint64_t *)&v61->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
    }
    else
    {
      v10 = 0;
    }
    v55 = v63;
    if (v63)
    {
      v56 = (unint64_t *)&v63->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  else
  {
    v10 = 0;
  }
  if (a3)
    *a3 = v10;
  if (v11)
  {
    v12 = v11;
    v13 = *((_QWORD *)this + 3);
    v14 = *(_QWORD *)(v13 + 24);
    v15 = *(std::__shared_weak_count **)(v13 + 32);
    v60 = v14;
    v61 = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = *(IMSMetricsManager **)(v14 + 288);
    v19 = *(std::__shared_weak_count **)(v14 + 296);
    v62 = v18;
    v63 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = (_QWORD *)((char *)v18 + 176);
    for (i = *((_QWORD *)v18 + 23); (_QWORD *)i != v22; i = *(_QWORD *)(i + 8))
      (*(void (**)(_QWORD, void *))(**(_QWORD **)(i + 16) + 80))(*(_QWORD *)(i + 16), v12);
    if (v19)
    {
      v24 = (unint64_t *)&v19->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v26 = v61;
    if (v61)
    {
      v27 = (unint64_t *)&v61->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  v29 = *((_QWORD *)this + 3);
  v30 = *(_QWORD *)(v29 + 24);
  v31 = *(std::__shared_weak_count **)(v29 + 32);
  v60 = v30;
  v61 = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *(IMSMetricsManager **)(v30 + 288);
  v35 = *(std::__shared_weak_count **)(v30 + 296);
  v62 = v34;
  v63 = v35;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = IMSMetricsManager::logSessionTerminationEvent(v34, lpsrc, *((unsigned __int8 *)this + 40), *((unsigned __int8 *)this + 40), v10);
  if (v35)
  {
    v39 = (unint64_t *)&v35->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v41 = v61;
  if (v61)
  {
    v42 = (unint64_t *)&v61->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v65;
  if (v65)
  {
    v45 = (unint64_t *)&v65->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  return v38;
}

void sub_1BEEAB604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t IMSCallManager::sendCallEndRequest(IMSCallManager *this, std::__shared_weak_count **a2, char a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *shared_owners;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  int shared_weak_owners_low;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _BOOL4 isNR;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void *__p;
  std::__shared_weak_count *v70;
  char v71;
  void *v72;
  std::__shared_weak_count *v73;
  char v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::string v79;

  memset(&v79, 0, sizeof(v79));
  IMSCallInfo::stack((IMSCallInfo *)a2, &v72);
  if (*((char *)v72 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v79, *((const std::string::value_type **)v72 + 517), *((_QWORD *)v72 + 518));
  else
    v79 = *(std::string *)((char *)v72 + 4136);
  v6 = v73;
  if (v73)
  {
    p_shared_owners = (unint64_t *)&v73->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = a2[16];
  v10 = a2[17];
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (v9)
  {
    v13 = a2[17];
    v77 = a2[16];
    v78 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    goto LABEL_42;
  }
  v16 = a2[69];
  v17 = a2[70];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (v16)
  {
    v20 = a2[69];
    v21 = a2[70];
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    shared_owners = (std::__shared_weak_count *)v20[6].__shared_owners_;
    if (shared_owners)
    {
      v25 = (std::__shared_weak_count *)v20[6].__vftable;
      p_shared_weak_owners = (unint64_t *)&shared_owners->__shared_weak_owners_;
      do
        v27 = __ldxr(p_shared_weak_owners);
      while (__stxr(v27 + 1, p_shared_weak_owners));
      v77 = 0;
      v78 = std::__shared_weak_count::lock(shared_owners);
      if (v78)
        v77 = v25;
      std::__shared_weak_count::__release_weak(shared_owners);
      if (!v21)
        goto LABEL_37;
      goto LABEL_33;
    }
    v77 = 0;
    v78 = 0;
    if (v21)
    {
LABEL_33:
      v28 = (unint64_t *)&v21->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  else
  {
    v77 = 0;
    v78 = 0;
  }
LABEL_37:
  if (v17)
  {
    v30 = (unint64_t *)&v17->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_42:
  if (v10)
  {
    v32 = (unint64_t *)&v10->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v77)
  {
    shared_weak_owners_low = LOBYTE(v77[62].__vftable);
    goto LABEL_49;
  }
  v36 = a2[69];
  v37 = a2[70];
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  if (v36)
  {
    v40 = a2[69];
    v41 = a2[70];
    if (!v41)
    {
      shared_weak_owners_low = LOBYTE(v40[53].__shared_weak_owners_);
      if (!v37)
        goto LABEL_49;
      goto LABEL_68;
    }
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    shared_weak_owners_low = LOBYTE(v40[53].__shared_weak_owners_);
    do
      v44 = __ldaxr(v42);
    while (__stlxr(v44 - 1, v42));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if (!v37)
        goto LABEL_49;
      goto LABEL_68;
    }
  }
  else
  {
    shared_weak_owners_low = *((unsigned __int8 *)a2 + 573);
  }
  if (!v37)
    goto LABEL_49;
LABEL_68:
  v46 = (unint64_t *)&v37->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
LABEL_49:
  if ((*((_DWORD *)a2 + 144) | 4) != 4)
  {
    if (v77)
    {
      v45 = v77[21].__shared_owners_ != 0;
      if (!shared_weak_owners_low)
        goto LABEL_109;
    }
    else
    {
      v45 = 0;
      if (!shared_weak_owners_low)
        goto LABEL_109;
    }
    if ((a3 & 1) != 0)
      goto LABEL_109;
    v48 = a2[16];
    v49 = a2[17];
    v72 = v48;
    v73 = v49;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    if (!v48)
    {
      isNR = 0;
      if (!v49)
        goto LABEL_102;
      goto LABEL_99;
    }
    v52 = a2[16];
    v53 = a2[17];
    __p = v52;
    v70 = v53;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    if (v52[17].__shared_weak_owners_)
    {
      isNR = 0;
      if (!v53)
        goto LABEL_98;
    }
    else
    {
      IMSCallInfo::stack((IMSCallInfo *)a2, &v75);
      isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)(v75 + 3136));
      v57 = v76;
      if (v76)
      {
        v58 = (unint64_t *)&v76->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v53 = v70;
      if (!v70)
      {
LABEL_98:
        v49 = v73;
        if (!v73)
          goto LABEL_102;
LABEL_99:
        v62 = (unint64_t *)&v49->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
          if (isNR)
            goto LABEL_103;
          goto LABEL_109;
        }
LABEL_102:
        if (isNR)
        {
LABEL_103:
          std::string::basic_string[abi:ne180100]<0>(&v72, "call");
          std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v64 = ImsLogger::warn(ims::_logger, (uint64_t)&v72, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)"Not sending call status request for END due to call setup failure on NR", 71);
          *(_BYTE *)(v64 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v64 + 17) = 0;
          if (v71 < 0)
            operator delete(__p);
          if (v74 < 0)
            operator delete(v72);
          IMSCallManager::sendCallStatusRequest((uint64_t)this, (uint64_t)&v79, 4, shared_weak_owners_low != 0, v45);
          IMSCallManager::setEPSFallbackCall(this, (IMSCallInfo *)a2);
          v35 = 0;
          goto LABEL_110;
        }
LABEL_109:
        IMSCallManager::sendCallStatusRequest((uint64_t)this, (uint64_t)&v79, 2, shared_weak_owners_low != 0, v45);
        v35 = 1;
LABEL_110:
        *((_DWORD *)a2 + 144) = 4;
        goto LABEL_111;
      }
    }
    v60 = (unint64_t *)&v53->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
    goto LABEL_98;
  }
  v35 = 0;
LABEL_111:
  v65 = v78;
  if (v78)
  {
    v66 = (unint64_t *)&v78->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  return v35;
}

void sub_1BEEABC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void IMSCallManager::sendEmergencySessionRequiredNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  IMSCallInfo *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  std::string v20;
  void (**v21)(ImsUuid *__hidden);
  std::string v22;
  void *__p;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::string v26;

  std::string::basic_string[abi:ne180100]<0>(&v26, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v26, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Sending Call Status Changed notification: emergency session required for callid: ", 81);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v8);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  v21 = off_1E78C0288;
  v9 = (_OWORD *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *v9;
    v22.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
  }
  v10 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v21);
  v11 = (IMSCallInfo *)v10;
  v21 = off_1E78C0288;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
    if (!v11)
      goto LABEL_20;
  }
  else if (!v10)
  {
    goto LABEL_20;
  }
  IMSCallInfo::stack(v11, &v26);
  v12 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  if (v26.__r_.__value_.__l.__size_)
  {
    v13 = (unint64_t *)(v26.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v12 + 1) + 16))(*((_QWORD *)&v12 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v12 + 1));
      if ((_QWORD)v12)
        goto LABEL_17;
LABEL_20:
      std::string::basic_string[abi:ne180100]<0>(&v26, "call");
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v15 = ImsLogger::error(ims::_logger, (uint64_t)&v26, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Unable to issue emergency redial request - unknown stack id", 59);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      goto LABEL_32;
    }
  }
  if (!(_QWORD)v12)
    goto LABEL_20;
LABEL_17:
  memset(&v26, 0, sizeof(v26));
  IMSCallInfo::stack(v11, &__p);
  if (*((char *)__p + 4159) < 0)
    std::string::__init_copy_ctor_external(&v26, *((const std::string::value_type **)__p + 517), *((_QWORD *)__p + 518));
  else
    v26 = *(std::string *)((char *)__p + 4136);
  v16 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  __p = 0;
  v24 = 0;
  v25 = 0;
  SipUri::asString(a3, 1, &__p);
  v19 = IMSClientManager::delegateForStack((void **)&v26.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *v9;
    v20.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
  }
  (*(void (**)(uint64_t, std::string *, void **, uint64_t))(*(_QWORD *)v19 + 24))(v19, &v20, &__p, a4);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_1BEEAC004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallInfo::handleParticipantLeftConference(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  IMSCallManager *v10;
  std::string *v11;
  IMSCallManager *v12;
  IMSCallManager *v13;
  uint64_t v14;
  std::string::size_type v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  void (**v31)(ImsUuid *__hidden);
  std::string v32;
  void (**v33)(ImsUuid *__hidden);
  std::string v34;
  void (**v35)(ImsUuid *__hidden);
  std::string v36;
  void *__p[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  std::string v44;

  std::string::basic_string[abi:ne180100]<0>(__p, "call");
  std::string::basic_string[abi:ne180100]<0>(&v44, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleParticipantLeftConferenceEvent", 36);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(__p[0]);
    if ((a3 & 1) != 0)
      goto LABEL_32;
  }
  else if ((a3 & 1) != 0)
  {
    goto LABEL_32;
  }
  __p[0] = (void *)65792;
  v39 = 0;
  v40 = 0;
  __p[1] = 0;
  v38 = 0;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v7 = *(_DWORD *)(*(_QWORD *)a2 + 1292);
  if (v7 > 9)
  {
    if (v7 == 20)
    {
      LODWORD(v40) = 1026;
      std::string::__assign_external((std::string *)&__p[1], "ConferenceParticipantLeft:MediaTimeout", 0x26uLL);
      v12 = *(IMSCallManager **)(a1 + 24);
      v33 = off_1E78C0288;
      v11 = &v34;
      if (*(char *)(a1 + 103) < 0)
        std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
      else
        v34 = *(std::string *)(a1 + 80);
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonMediaTimeout"), (const void *)0x8000100, &v44);
      IMSCallManager::sendCallDisconnectionNotification(v12, (uint64_t)&v33, &v44, (uint64_t)__p);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      v33 = off_1E78C0288;
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_26;
    }
    else
    {
      LODWORD(v40) = 1009;
      BYTE2(__p[0]) = 0;
      std::string::__assign_external((std::string *)&__p[1], "ConferenceParticipantLeft:NetworkError", 0x26uLL);
      v13 = *(IMSCallManager **)(a1 + 24);
      v31 = off_1E78C0288;
      v11 = &v32;
      if (*(char *)(a1 + 103) < 0)
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
      else
        v32 = *(std::string *)(a1 + 80);
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonNetworkError"), (const void *)0x8000100, &v44);
      IMSCallManager::sendCallDisconnectionNotification(v13, (uint64_t)&v31, &v44, (uint64_t)__p);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      v31 = off_1E78C0288;
      if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_26;
    }
  }
  else
  {
    if (v7 == 1)
      v8 = 1008;
    else
      v8 = 1003;
    if (v7)
      v9 = v8;
    else
      v9 = 1007;
    LODWORD(v40) = v9;
    std::string::__assign_external((std::string *)&__p[1], "ConferenceParticipantLeft:Normal", 0x20uLL);
    v10 = *(IMSCallManager **)(a1 + 24);
    v35 = off_1E78C0288;
    v11 = &v36;
    if (*(char *)(a1 + 103) < 0)
      std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
    else
      v36 = *(std::string *)(a1 + 80);
    ims::CFString::asString(CFSTR("kCallDisconnectionReasonNormal"), (const void *)0x8000100, &v44);
    IMSCallManager::sendCallDisconnectionNotification(v10, (uint64_t)&v35, &v44, (uint64_t)__p);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    v35 = off_1E78C0288;
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
  }
  operator delete(v11->__r_.__value_.__l.__data_);
LABEL_26:
  if (SHIBYTE(v43) < 0)
    operator delete(*((void **)&v42 + 1));
  if (SBYTE7(v42) < 0)
    operator delete((void *)v41);
  if (SHIBYTE(v39) < 0)
    operator delete(__p[1]);
LABEL_32:
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(v14 + 24);
  v16 = *(_QWORD *)(v14 + 32);
  v44.__r_.__value_.__r.__words[0] = v15;
  v44.__r_.__value_.__l.__size_ = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_QWORD **)(v15 + 288);
  v20 = *(std::__shared_weak_count **)(v15 + 296);
  __p[0] = v19;
  __p[1] = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = v19 + 22;
  v24 = v19[23];
  if ((_QWORD *)v24 != v19 + 22)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v24 + 16) + 104))(*(_QWORD *)(v24 + 16), a1 + 48);
      v24 = *(_QWORD *)(v24 + 8);
    }
    while ((_QWORD *)v24 != v23);
  }
  if (v20)
  {
    v25 = (unint64_t *)&v20->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  size = (std::__shared_weak_count *)v44.__r_.__value_.__l.__size_;
  if (v44.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(v44.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 240))(*(_QWORD *)(a1 + 24), a1);
}

void sub_1BEEAC508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));
  if (a15 < 0)
    operator delete(__p);
  ims::DisconnectInfo::~DisconnectInfo(&a30);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'IMSCallInfo::handleParticipantLeftConference(uint64_t a1, uint64_t a2, char a3)
{
  return IMSCallInfo::handleParticipantLeftConference(a1 - 8, a2, a3);
}

void IMSCallInfo::handleSessionActivatedEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  SipSession *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t i;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void (**v40)(ImsUuid *__hidden);
  std::string v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void (**v44)(ImsUuid *__hidden);
  std::string v45;
  void *__p;
  std::__shared_weak_count *v47;
  char v48;
  void *v49[2];
  char v50;
  uint64_t v51;
  std::__shared_weak_count *v52;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v51 = 0;
    v52 = std::__shared_weak_count::lock(v4);
    if (v52)
      v51 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v5 = 0;
    v51 = 0;
    v52 = 0;
  }
  if (v5 == *((_QWORD *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v49, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)v49, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Call ", 5);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" activated", 10);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v48 < 0)
      operator delete(__p);
    if (v50 < 0)
      operator delete(v49[0]);
    v10 = *(SipSession **)(*((_QWORD *)this + 16) + 384);
    if (v10 && SipSession::confirmed(v10))
    {
      std::string::basic_string[abi:ne180100]<0>(v49, "call");
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v11 = ImsLogger::debug(ims::_logger, (uint64_t)v49, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Sending kIMSCallStatusActive", 28);
      *(_BYTE *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v11 + 17) = 0;
      if (v48 < 0)
        operator delete(__p);
      if (v50 < 0)
        operator delete(v49[0]);
      v12 = *((_QWORD *)this + 3);
      v44 = off_1E78C0288;
      v13 = (_OWORD *)((char *)this + 80);
      if (*((char *)this + 103) < 0)
      {
        std::string::__init_copy_ctor_external(&v45, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
      }
      else
      {
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *v13;
        v45.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
      }
      (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallEvent *))(*(_QWORD *)v12 + 232))(v12, &v44, CFSTR("kCallStatusActive"), *((unsigned __int8 *)this + 40), a2);
      v44 = off_1E78C0288;
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      v14 = *((_QWORD *)this + 3);
      v15 = *(_QWORD **)(v14 + 24);
      v16 = *(std::__shared_weak_count **)(v14 + 32);
      __p = v15;
      v47 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      v19 = (_QWORD *)v15[36];
      v20 = (std::__shared_weak_count *)v15[37];
      v49[0] = v19;
      v49[1] = v20;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = v19 + 22;
      for (i = v19[23]; (_QWORD *)i != v23; i = *(_QWORD *)(i + 8))
        (*(void (**)(_QWORD, BambiCallEvent *, const __CFString *))(**(_QWORD **)(i + 16) + 96))(*(_QWORD *)(i + 16), a2, CFSTR("kCallStatusActive"));
      if (v20)
      {
        v25 = (unint64_t *)&v20->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v27 = v47;
      if (v47)
      {
        v28 = (unint64_t *)&v47->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = *((_QWORD *)this + 3);
      v31 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
      v42 = *((_QWORD *)this + 16);
      v43 = v31;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v40 = off_1E78C0288;
      if (*((char *)this + 103) < 0)
      {
        std::string::__init_copy_ctor_external(&v41, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
      }
      else
      {
        *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *v13;
        v41.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void (***)(ImsUuid *__hidden)))(*(_QWORD *)v30 + 208))(v30, &v42, 1, &v40);
      v40 = off_1E78C0288;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      v34 = v43;
      if (v43)
      {
        v35 = (unint64_t *)&v43->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v49, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v49, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"IMSCallInfo::handleSessionActivatedEvent for an unknown call", 60);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v48 < 0)
      operator delete(__p);
    if (v50 < 0)
      operator delete(v49[0]);
  }
  v37 = v52;
  if (v52)
  {
    v38 = (unint64_t *)&v52->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_1BEEACB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v36 - 80);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleSessionHoldFailedEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  SipSession *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void (**v24)(ImsUuid *__hidden);
  std::string v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void (**v28)(ImsUuid *__hidden);
  std::string v29;
  void *__p[2];
  char v31;
  void *v32[2];
  char v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v34 = 0;
    v35 = std::__shared_weak_count::lock(v4);
    if (v35)
      v34 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v5 = 0;
    v34 = 0;
    v35 = 0;
  }
  if (v5 == *((_QWORD *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Call ", 5);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" hold failed!", 13);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v31 < 0)
      operator delete(__p[0]);
    if (v33 < 0)
      operator delete(v32[0]);
    v10 = *(SipSession **)(*((_QWORD *)this + 16) + 384);
    if (v10 && SipSession::confirmed(v10))
    {
      std::string::basic_string[abi:ne180100]<0>(v32, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v11 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Sending kIMSCallStatusHoldFailed", 32);
      *(_BYTE *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v11 + 17) = 0;
      if (v31 < 0)
        operator delete(__p[0]);
      if (v33 < 0)
        operator delete(v32[0]);
      v12 = *((_QWORD *)this + 3);
      v28 = off_1E78C0288;
      v13 = (_OWORD *)((char *)this + 80);
      if (*((char *)this + 103) < 0)
      {
        std::string::__init_copy_ctor_external(&v29, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
      }
      else
      {
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *v13;
        v29.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
      }
      (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallEvent *))(*(_QWORD *)v12 + 232))(v12, &v28, CFSTR("kCallStatusHoldFailed"), *((unsigned __int8 *)this + 40), a2);
      v28 = off_1E78C0288;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      v14 = *((_QWORD *)this + 3);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
      v26 = *((_QWORD *)this + 16);
      v27 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v24 = off_1E78C0288;
      if (*((char *)this + 103) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
      }
      else
      {
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *v13;
        v25.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void (***)(ImsUuid *__hidden)))(*(_QWORD *)v14 + 208))(v14, &v26, 1, &v24);
      v24 = off_1E78C0288;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      v18 = v27;
      if (v27)
      {
        v19 = (unint64_t *)&v27->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"IMSCallInfo::handleSessionHoldFailedEvent for an unknown call", 61);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v31 < 0)
      operator delete(__p[0]);
    if (v33 < 0)
      operator delete(v32[0]);
  }
  v21 = v35;
  if (v35)
  {
    v22 = (unint64_t *)&v35->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BEEACFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 64);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleSessionResumeFailedEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  SipSession *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void (**v24)(ImsUuid *__hidden);
  std::string v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void (**v28)(ImsUuid *__hidden);
  std::string v29;
  void *__p[2];
  char v31;
  void *v32[2];
  char v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v34 = 0;
    v35 = std::__shared_weak_count::lock(v4);
    if (v35)
      v34 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v5 = 0;
    v34 = 0;
    v35 = 0;
  }
  if (v5 == *((_QWORD *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Call ", 5);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" resume failed!", 15);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v31 < 0)
      operator delete(__p[0]);
    if (v33 < 0)
      operator delete(v32[0]);
    v10 = *(SipSession **)(*((_QWORD *)this + 16) + 384);
    if (v10 && SipSession::confirmed(v10))
    {
      std::string::basic_string[abi:ne180100]<0>(v32, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v11 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Sending kIMSCallStatusResumeFailed", 34);
      *(_BYTE *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v11 + 17) = 0;
      if (v31 < 0)
        operator delete(__p[0]);
      if (v33 < 0)
        operator delete(v32[0]);
      v12 = *((_QWORD *)this + 3);
      v28 = off_1E78C0288;
      v13 = (_OWORD *)((char *)this + 80);
      if (*((char *)this + 103) < 0)
      {
        std::string::__init_copy_ctor_external(&v29, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
      }
      else
      {
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *v13;
        v29.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
      }
      (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallEvent *))(*(_QWORD *)v12 + 232))(v12, &v28, CFSTR("kCallStatusResumeFailed"), *((unsigned __int8 *)this + 40), a2);
      v28 = off_1E78C0288;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      v14 = *((_QWORD *)this + 3);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
      v26 = *((_QWORD *)this + 16);
      v27 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v24 = off_1E78C0288;
      if (*((char *)this + 103) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
      }
      else
      {
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *v13;
        v25.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
      }
      (*(void (**)(uint64_t, uint64_t *, _QWORD, void (***)(ImsUuid *__hidden)))(*(_QWORD *)v14 + 208))(v14, &v26, 0, &v24);
      v24 = off_1E78C0288;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      v18 = v27;
      if (v27)
      {
        v19 = (unint64_t *)&v27->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"IMSCallInfo::handleSessionResumeFailedEvent for an unknown call", 63);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v31 < 0)
      operator delete(__p[0]);
    if (v33 < 0)
      operator delete(v32[0]);
  }
  v21 = v35;
  if (v35)
  {
    v22 = (unint64_t *)&v35->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BEEAD4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 64);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleSessionLocalHeldEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t i;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  SipSession *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void (**v39)(ImsUuid *__hidden);
  std::string v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  void (**v43)(ImsUuid *__hidden);
  std::string v44;
  void *__p;
  std::__shared_weak_count *v46;
  char v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  std::__shared_weak_count *v51;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v50 = 0;
    v51 = std::__shared_weak_count::lock(v4);
    if (v51)
      v50 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v5 = 0;
    v50 = 0;
    v51 = 0;
  }
  if (v5 == *((_QWORD *)this + 16))
  {
    v9 = *((_QWORD *)this + 3);
    v11 = *(_QWORD **)(v9 + 24);
    v10 = *(std::__shared_weak_count **)(v9 + 32);
    __p = v11;
    v46 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = (_QWORD *)v11[36];
    v15 = (std::__shared_weak_count *)v11[37];
    v48[0] = v14;
    v48[1] = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v14 + 22;
    for (i = v14[23]; (_QWORD *)i != v18; i = *(_QWORD *)(i + 8))
      (*(void (**)(_QWORD, BambiCallEvent *, const __CFString *))(**(_QWORD **)(i + 16) + 96))(*(_QWORD *)(i + 16), a2, CFSTR("kCallStatusInactive"));
    if (v15)
    {
      v20 = (unint64_t *)&v15->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v46)
    {
      v22 = &v46->__shared_owners_;
      do
        v23 = __ldaxr((unint64_t *)v22);
      while (__stlxr(v23 - 1, (unint64_t *)v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v48, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v24 = ImsLogger::debug(ims::_logger, (uint64_t)v48, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Call ", 5);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" deactivated", 12);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
    if (v47 < 0)
      operator delete(__p);
    if (v49 < 0)
      operator delete(v48[0]);
    v25 = *(SipSession **)(*((_QWORD *)this + 16) + 384);
    if (v25 && SipSession::confirmed(v25))
    {
      std::string::basic_string[abi:ne180100]<0>(v48, "call");
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v26 = ImsLogger::debug(ims::_logger, (uint64_t)v48, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Sending kIMSCallStatusInactive", 30);
      *(_BYTE *)(v26 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v26 + 17) = 0;
      if (v47 < 0)
        operator delete(__p);
      if (v49 < 0)
        operator delete(v48[0]);
      v27 = *((_QWORD *)this + 3);
      v43 = off_1E78C0288;
      v28 = (_OWORD *)((char *)this + 80);
      if (*((char *)this + 103) < 0)
      {
        std::string::__init_copy_ctor_external(&v44, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
      }
      else
      {
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *v28;
        v44.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
      }
      (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallEvent *))(*(_QWORD *)v27 + 232))(v27, &v43, CFSTR("kCallStatusInactive"), *((unsigned __int8 *)this + 40), a2);
      v43 = off_1E78C0288;
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      v29 = *((_QWORD *)this + 3);
      v30 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
      v41 = *((_QWORD *)this + 16);
      v42 = v30;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v39 = off_1E78C0288;
      if (*((char *)this + 103) < 0)
      {
        std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
      }
      else
      {
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *v28;
        v40.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
      }
      (*(void (**)(uint64_t, uint64_t *, _QWORD, void (***)(ImsUuid *__hidden)))(*(_QWORD *)v29 + 208))(v29, &v41, 0, &v39);
      v39 = off_1E78C0288;
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      v33 = v42;
      if (v42)
      {
        v34 = (unint64_t *)&v42->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v48, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"IMSCallInfo::handleSessionLocalHeldEvent for an unknown call", 60);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v47 < 0)
      operator delete(__p);
    if (v49 < 0)
      operator delete(v48[0]);
  }
  v36 = v51;
  if (v51)
  {
    v37 = (unint64_t *)&v51->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1BEEADA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 64);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleRingingEvent(IMSCallInfo *this, BambiCallProvisionalResponseEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33[2];
  void (**v34)(ImsUuid *__hidden);
  std::string v35;
  void *__p;
  std::__shared_weak_count *v37;
  char v38;
  void *v39;
  std::__shared_weak_count *v40;
  char v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v42 = 0;
    v8 = std::__shared_weak_count::lock(v4);
    v43 = v8;
    if (v8)
      v42 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v8 = 0;
    v5 = 0;
    v42 = 0;
    v43 = 0;
  }
  if (v5 == *((_QWORD *)this + 16))
  {
    v10 = *((_QWORD *)this + 3);
    v34 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
      std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    else
      v35 = *(std::string *)((char *)this + 80);
    (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallProvisionalResponseEvent *))(*(_QWORD *)v10 + 232))(v10, &v34, CFSTR("kCallStatusRinging"), *((unsigned __int8 *)this + 40), a2);
    v34 = off_1E78C0288;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    v11 = *((_QWORD *)this + 3);
    v12 = *(_QWORD **)(v11 + 24);
    v13 = *(std::__shared_weak_count **)(v11 + 32);
    __p = v12;
    v37 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = (void *)v12[36];
    v17 = (std::__shared_weak_count *)v12[37];
    v39 = v16;
    v40 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    v33[0] = *((_QWORD *)this + 16);
    v33[1] = (uint64_t)v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    IMSMetricsManager::logRingingEvent((uint64_t)v16, v33, *((unsigned __int8 *)this + 40), *((unsigned __int8 *)this + 40));
    if (v20)
    {
      v23 = (unint64_t *)&v20->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v25 = v40;
    if (v40)
    {
      v26 = (unint64_t *)&v40->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v37;
    if (v37)
    {
      v29 = (unint64_t *)&v37->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v8 = v43;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)&v39, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"IMSCallInfo::handleRingingEvent for an unknown call", 51);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v38 < 0)
      operator delete(__p);
    if (v41 < 0)
      operator delete(v39);
  }
  if (v8)
  {
    v31 = (unint64_t *)&v8->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BEEADE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29 - 64);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleLRBTEvent(IMSCallInfo *this, BambiCallEvent *a2, int a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  __CFString **v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void (**v17)(ImsUuid *__hidden);
  std::string v18;
  void *__p[2];
  char v20;
  _QWORD v21[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v6)
  {
    v7 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v23 = 0;
    v10 = std::__shared_weak_count::lock(v6);
    v24 = v10;
    if (v10)
      v23 = v7;
    else
      v7 = 0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    v10 = 0;
    v7 = 0;
    v23 = 0;
    v24 = 0;
  }
  if (v7 == *((_QWORD *)this + 16))
  {
    v13 = *((_QWORD *)this + 3);
    v17 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
      std::string::__init_copy_ctor_external(&v18, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    else
      v18 = *(std::string *)((char *)this + 80);
    v14 = kIMSCallStatusPlayLRBT;
    if (!a3)
      v14 = kIMSCallStatusStopLRBT;
    (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), __CFString *, _QWORD, BambiCallEvent *))(*(_QWORD *)v13 + 232))(v13, &v17, *v14, *((unsigned __int8 *)this + 40), a2);
    v17 = off_1E78C0288;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      v12 = (void *)v18.__r_.__value_.__r.__words[0];
      goto LABEL_21;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"IMSCallInfo::handleRingingEvent for an unknown call", 51);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (v22 < 0)
    {
      v12 = (void *)v21[0];
LABEL_21:
      operator delete(v12);
    }
  }
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BEEAE0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 64);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleTextMediaDetectedEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void (**v14)(ImsUuid *__hidden);
  std::string v15;
  void *__p[2];
  char v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v20 = 0;
    v8 = std::__shared_weak_count::lock(v4);
    v21 = v8;
    if (v8)
      v20 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v8 = 0;
    v5 = 0;
    v20 = 0;
    v21 = 0;
  }
  if (v5 == *((_QWORD *)this + 16))
  {
    v11 = *((_QWORD *)this + 3);
    v14 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
      std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    else
      v15 = *(std::string *)((char *)this + 80);
    (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallEvent *))(*(_QWORD *)v11 + 232))(v11, &v14, CFSTR("kIMSCallStatusTextMediaDetected"), *((unsigned __int8 *)this + 40), a2);
    v14 = off_1E78C0288;
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
    v10 = (void *)v15.__r_.__value_.__r.__words[0];
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"IMSCallInfo::handleTextMediaDetectedEvent for an unknown call", 61);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
  {
    v10 = (void *)v18[0];
LABEL_19:
    operator delete(v10);
  }
LABEL_20:
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BEEAE314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 64);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleTextMediaDeactivatedEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void (**v14)(ImsUuid *__hidden);
  std::string v15;
  void *__p[2];
  char v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v20 = 0;
    v8 = std::__shared_weak_count::lock(v4);
    v21 = v8;
    if (v8)
      v20 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v8 = 0;
    v5 = 0;
    v20 = 0;
    v21 = 0;
  }
  if (v5 == *((_QWORD *)this + 16))
  {
    v11 = *((_QWORD *)this + 3);
    v14 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
      std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    else
      v15 = *(std::string *)((char *)this + 80);
    (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallEvent *))(*(_QWORD *)v11 + 232))(v11, &v14, CFSTR("kIMSCallStatusTextMediaDeactivated"), *((unsigned __int8 *)this + 40), a2);
    v14 = off_1E78C0288;
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
    v10 = (void *)v15.__r_.__value_.__r.__words[0];
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"IMSCallInfo::handleTextMediaDeactivatedEvent for an unknown call", 64);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
  {
    v10 = (void *)v18[0];
LABEL_19:
    operator delete(v10);
  }
LABEL_20:
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BEEAE564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 64);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleSessionProgressEvent(IMSCallInfo *this, BambiCallProvisionalResponseEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void (**v34)(ImsUuid *__hidden);
  std::string v35;
  uint64_t v36[2];
  void *__p;
  std::__shared_weak_count *v38;
  char v39;
  void *v40;
  std::__shared_weak_count *v41;
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v43 = 0;
    v44 = std::__shared_weak_count::lock(v4);
    if (v44)
      v43 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v5 = 0;
    v43 = 0;
    v44 = 0;
  }
  if (v5 == *((_QWORD *)this + 16))
  {
    v10 = *((_QWORD *)this + 3);
    v11 = *(_QWORD **)(v10 + 24);
    v12 = *(std::__shared_weak_count **)(v10 + 32);
    __p = v11;
    v38 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = v11[36];
    v16 = (std::__shared_weak_count *)v11[37];
    v40 = (void *)v15;
    v41 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    v36[0] = *((_QWORD *)this + 16);
    v36[1] = (uint64_t)v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    IMSMetricsManager::logSessionProgress(v15, (uint64_t)a2 + 40, v36, *((unsigned __int8 *)this + 40));
    if (v19)
    {
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v24 = v41;
    if (v41)
    {
      v25 = (unint64_t *)&v41->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v38;
    if (v38)
    {
      v28 = (unint64_t *)&v38->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = *((_QWORD *)this + 3);
    v34 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
      std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    else
      v35 = *(std::string *)((char *)this + 80);
    (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallProvisionalResponseEvent *))(*(_QWORD *)v30 + 232))(v30, &v34, CFSTR("kCallStatusInProgress"), *((unsigned __int8 *)this + 40), a2);
    v34 = off_1E78C0288;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      v9 = (void *)v35.__r_.__value_.__r.__words[0];
      goto LABEL_43;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v40, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v40, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"IMSCallInfo::handleInProgressEvent for an unknown call", 54);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v39 < 0)
      operator delete(__p);
    if (v42 < 0)
    {
      v9 = v40;
LABEL_43:
      operator delete(v9);
    }
  }
  v31 = v44;
  if (v44)
  {
    v32 = (unint64_t *)&v44->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1BEEAE8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29 - 48);
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleTryingEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void (**v14)(ImsUuid *__hidden);
  std::string v15;
  void *__p[2];
  char v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v20 = 0;
    v8 = std::__shared_weak_count::lock(v4);
    v21 = v8;
    if (v8)
      v20 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v8 = 0;
    v5 = 0;
    v20 = 0;
    v21 = 0;
  }
  if (v5 == *((_QWORD *)this + 16))
  {
    v11 = *((_QWORD *)this + 3);
    v14 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
      std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    else
      v15 = *(std::string *)((char *)this + 80);
    (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallEvent *))(*(_QWORD *)v11 + 232))(v11, &v14, CFSTR("kCallStatusTrying"), *((unsigned __int8 *)this + 40), a2);
    v14 = off_1E78C0288;
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
    v10 = (void *)v15.__r_.__value_.__r.__words[0];
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"IMSCallInfo::handleTryingEvent for an unknown call", 50);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
  {
    v10 = (void *)v18[0];
LABEL_19:
    operator delete(v10);
  }
LABEL_20:
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BEEAEB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 64);
  _Unwind_Resume(a1);
}

void IMSCallInfo::logIncomingPrack(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22[3];
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v2 + 24);
  v3 = *(std::__shared_weak_count **)(v2 + 32);
  v22[2] = v4;
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(v4 + 288);
  v8 = *(std::__shared_weak_count **)(v4 + 296);
  v24 = v7;
  v25 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  v22[0] = *(_QWORD *)(a1 + 128);
  v22[1] = (uint64_t)v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  IMSMetricsManager::logIncomingPrack(v7, a2, v22, *(unsigned __int8 *)(a1 + 40));
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v16 = v25;
  if (v25)
  {
    v17 = (unint64_t *)&v25->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v23;
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1BEEAECDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSCallInfo::logIncomingPrack(uint64_t a1, uint64_t a2)
{
  IMSCallInfo::logIncomingPrack(a1 - 16, a2);
}

void IMSCallInfo::logPrackResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22[3];
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v2 + 24);
  v3 = *(std::__shared_weak_count **)(v2 + 32);
  v22[2] = v4;
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(v4 + 288);
  v8 = *(std::__shared_weak_count **)(v4 + 296);
  v24 = v7;
  v25 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  v22[0] = *(_QWORD *)(a1 + 128);
  v22[1] = (uint64_t)v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  IMSMetricsManager::logPrackResponse(v7, a2, v22, *(unsigned __int8 *)(a1 + 40));
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v16 = v25;
  if (v25)
  {
    v17 = (unint64_t *)&v25->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v23;
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1BEEAEE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSCallInfo::logPrackResponse(uint64_t a1, uint64_t a2)
{
  IMSCallInfo::logPrackResponse(a1 - 16, a2);
}

_QWORD *IMSCallInfo::createCallHandle(std::string::size_type *this)
{
  _BOOL4 isEmergency;
  _QWORD *v3;
  _OWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::string v11;
  void (**v12)(ImsUuid *__hidden);
  std::string __p;
  std::string v14;

  isEmergency = IMSCallInfo::isEmergency((IMSCallInfo *)this);
  v3 = (_QWORD *)operator new();
  v4 = this + 10;
  if (isEmergency)
  {
    v12 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)this[10], this[11]);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v4;
      __p.__r_.__value_.__r.__words[2] = this[12];
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v14 = __p;
    ims::CallHandle::CallHandle((uint64_t)v3, (__int128 *)&v14, &IMSClientManager::kEmergencyStack);
    *v3 = &off_1E78D34C8;
  }
  else
  {
    v12 = off_1E78C0288;
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)this[10], this[11]);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v4;
      __p.__r_.__value_.__r.__words[2] = this[12];
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v14 = __p;
    IMSCallInfo::stack((IMSCallInfo *)this, &v9);
    if (*(char *)(v9 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(v9 + 4136), *(_QWORD *)(v9 + 4144));
    else
      v11 = *(std::string *)(v9 + 4136);
    ims::CallHandle::CallHandle((uint64_t)v3, (__int128 *)&v14, (__int128 *)&v11);
    *v3 = &off_1E78D31D0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    v5 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  v12 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1BEEAF090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (*(char *)(v25 - 41) < 0)
    operator delete(*(void **)(v25 - 64));
  if (a24 < 0)
    operator delete(__p);
  MEMORY[0x1C3B87100](v24, 0x1093C403CF0E82FLL);
  _Unwind_Resume(a1);
}

BOOL IMSCallInfo::isEmergency(IMSCallInfo *this)
{
  _BOOL8 v1;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v14;
  unint64_t v15;

  if (*((_BYTE *)this + 568))
    return 1;
  v3 = (_QWORD *)*((_QWORD *)this + 16);
  if (!v3)
    return 0;
  if (v3[64])
    return 1;
  v4 = (std::__shared_weak_count *)v3[45];
  if (!v4)
    return 0;
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5)
    return 0;
  v6 = v5;
  if (v3[44])
  {
    v7 = *((_QWORD *)this + 16);
    v8 = *(std::__shared_weak_count **)(v7 + 360);
    if (v8 && (v9 = std::__shared_weak_count::lock(v8)) != 0)
    {
      v10 = v9;
      v1 = *(_BYTE *)(*(_QWORD *)(v7 + 352) + 176) != 0;
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      v1 = MEMORY[0xB0] != 0;
    }
  }
  else
  {
    v1 = 0;
  }
  v14 = (unint64_t *)&v6->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v1;
}

uint64_t IMSCallManager::IMSCallManager(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)result = off_1E78BFF58;
  *(_QWORD *)(result + 8) = &unk_1E78C0060;
  v3 = *a2;
  v2 = a2[1];
  *(_QWORD *)(result + 16) = &unk_1E78C0090;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = result + 72;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = result + 96;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 136) = off_1E78C0288;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 168) = off_1E78C0288;
  *(_QWORD *)(result + 176) = 0;
  *(_DWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 192) = 0;
  return result;
}

void IMSCallManager::~IMSCallManager(IMSCallManager *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = off_1E78BFF58;
  *((_QWORD *)this + 1) = &unk_1E78C0060;
  *((_QWORD *)this + 2) = &unk_1E78C0090;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  *((_QWORD *)this + 21) = off_1E78C0288;
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  *((_QWORD *)this + 17) = off_1E78C0288;
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::destroy(*((_QWORD **)this + 12));
  std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::destroy(*((_QWORD **)this + 9));
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
}

{
  IMSCallManager::~IMSCallManager(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'IMSCallManager::~IMSCallManager(IMSCallManager *this)
{
  IMSCallManager::~IMSCallManager((IMSCallManager *)((char *)this - 16));
}

{
  IMSCallManager::~IMSCallManager((IMSCallManager *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

uint64_t IMSCallManager::dumpState(IMSCallManager *this, ImsOutStream *a2)
{
  uint64_t result;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"----- Active Lazuli Sessions (", 30);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)") -----", 7);
  *((_BYTE *)a2 + 17) = 0;
  result = (*(uint64_t (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v5 = (char *)*((_QWORD *)this + 8);
  v6 = (char *)this + 72;
  if (v5 != v6)
  {
    do
    {
      result = LazuliSession::logSession(*((LazuliSession **)v5 + 10), a2);
      v7 = (char *)*((_QWORD *)v5 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v5 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v6);
  }
  return result;
}

uint64_t IMSCallManager::delegateForIncomingCall(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  std::__shared_weak_count *v42;
  _QWORD v43[3];
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::string v47;
  std::string v48;

  memset(&v48, 0, sizeof(v48));
  v6 = *a3;
  if (!*a3)
    goto LABEL_25;
  v7 = *(std::__shared_weak_count **)(v6 + 360);
  if (!v7)
    goto LABEL_25;
  v8 = std::__shared_weak_count::lock(v7);
  if (!v8)
    goto LABEL_25;
  v9 = v8;
  v10 = *(_QWORD *)(v6 + 352);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      goto LABEL_25;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      goto LABEL_25;
  }
  v13 = *a3;
  v45 = 0;
  v46 = 0;
  v14 = *(std::__shared_weak_count **)(v13 + 360);
  if (!v14)
  {
    v15 = 0;
    goto LABEL_14;
  }
  v15 = std::__shared_weak_count::lock(v14);
  v46 = v15;
  if (!v15)
  {
LABEL_14:
    v16 = 0;
    goto LABEL_15;
  }
  v16 = *(_QWORD *)(v13 + 352);
  v45 = v16;
LABEL_15:
  if (*(char *)(v16 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(v16 + 4136), *(_QWORD *)(v16 + 4144));
  else
    v47 = *(std::string *)(v16 + 4136);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v48 = v47;
  *((_BYTE *)&v47.__r_.__value_.__s + 23) = 0;
  v47.__r_.__value_.__s.__data_[0] = 0;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_25:
  v19 = operator new();
  ImsUuid::generate((ImsUuid *)v43);
  v20 = (std::__shared_weak_count *)a3[1];
  v41 = *a3;
  v42 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  IMSCallInfo::IMSCallInfo(v19, (uint64_t)a1, (uint64_t)v43, &v48, a2, &v41);
  v23 = v42;
  if (v42)
  {
    v24 = (unint64_t *)&v42->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v43[0] = off_1E78C0288;
  if (v44 < 0)
    operator delete((void *)v43[1]);
  v27 = (uint64_t *)a1[6];
  v26 = a1[7];
  if ((unint64_t)v27 >= v26)
  {
    v29 = a1[5];
    v30 = ((uint64_t)v27 - v29) >> 3;
    if ((unint64_t)(v30 + 1) >> 61)
      std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
    v31 = v26 - v29;
    v32 = v31 >> 2;
    if (v31 >> 2 <= (unint64_t)(v30 + 1))
      v32 = v30 + 1;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v32;
    if (v33)
      v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v33);
    else
      v34 = 0;
    v35 = (uint64_t *)(v33 + 8 * v30);
    v36 = v33 + 8 * v34;
    *v35 = v19;
    v28 = v35 + 1;
    v38 = (char *)a1[5];
    v37 = (char *)a1[6];
    if (v37 != v38)
    {
      do
      {
        v39 = *((_QWORD *)v37 - 1);
        v37 -= 8;
        *--v35 = v39;
      }
      while (v37 != v38);
      v37 = (char *)a1[5];
    }
    a1[5] = v35;
    a1[6] = v28;
    a1[7] = v36;
    if (v37)
      operator delete(v37);
  }
  else
  {
    *v27 = v19;
    v28 = v27 + 1;
  }
  a1[6] = v28;
  IMSCallManager::sendCallStatusRequest((uint64_t)a1, (uint64_t)&v48, 0, 0, 0);
  *(_DWORD *)(v19 + 576) = 2;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  return v19;
}

void sub_1BEEAF79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (*(char *)(v18 - 57) < 0)
    operator delete(*(void **)(v18 - 80));
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'IMSCallManager::delegateForIncomingCall(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return IMSCallManager::delegateForIncomingCall((_QWORD *)(a1 - 8), a2, a3);
}

uint64_t IMSCallManager::getInfoForActiveCall@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  std::string *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string v10;

  *(_QWORD *)(a2 + 16) = 0;
  v3 = (std::string *)(a2 + 16);
  *(_QWORD *)a2 = 65280;
  *(_QWORD *)(a2 + 8) = off_1E78C0288;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = *(_QWORD *)(this + 40);
  v5 = *(_QWORD *)(this + 48);
  if (v5 == v4)
    return this;
  v6 = this;
  v7 = 0;
  while (1)
  {
    this = *(_QWORD *)(v4 + 8 * v7);
    if (!this)
      goto LABEL_7;
    this = IMSCallInfo::isActive((IMSCallInfo *)this);
    v4 = *(_QWORD *)(v6 + 40);
    v8 = *(_QWORD *)(v4 + 8 * v7);
    if ((this & 1) != 0)
      break;
    if (*(_BYTE *)(v8 + 572))
      goto LABEL_10;
    v5 = *(_QWORD *)(v6 + 48);
LABEL_7:
    if (++v7 >= (unint64_t)((v5 - v4) >> 3))
      return this;
  }
  if (!v8)
    return this;
LABEL_10:
  if (*(char *)(v8 + 103) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v8 + 80), *(_QWORD *)(v8 + 88));
  else
    v10 = *(std::string *)(v8 + 80);
  v9 = *(_BYTE *)(v8 + 40);
  *v3 = v10;
  *(_BYTE *)(a2 + 1) = v9;
  this = IMSCallInfo::isEmergency((IMSCallInfo *)v8);
  *(_BYTE *)a2 = this;
  return this;
}

void sub_1BEEAF918(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallManager::getInfoForBasebandCallId@<X0>(uint64_t this@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  std::string v12;

  *(_QWORD *)(a3 + 16) = 0;
  v4 = (std::string *)(a3 + 16);
  *(_QWORD *)a3 = 65280;
  *(_QWORD *)(a3 + 8) = off_1E78C0288;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v5 = *(_QWORD *)(this + 40);
  v6 = *(_QWORD *)(this + 48) - v5;
  if (v6)
  {
    v7 = this;
    v8 = 0;
    v9 = v6 >> 3;
    if (v9 <= 1)
      v9 = 1;
    while (1)
    {
      v11 = *(_QWORD *)(v5 + 8 * v8);
      if (v11)
      {
        if (*(unsigned __int8 *)(v11 + 40) == a2)
          break;
      }
      if (v9 == ++v8)
        return this;
    }
    if (*(char *)(v11 + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(v11 + 80), *(_QWORD *)(v11 + 88));
      v5 = *(_QWORD *)(v7 + 40);
    }
    else
    {
      v12 = *(std::string *)(v11 + 80);
    }
    *v4 = v12;
    *(_BYTE *)(a3 + 1) = a2;
    this = IMSCallInfo::isEmergency(*(IMSCallInfo **)(v5 + 8 * v8));
    *(_BYTE *)a3 = this;
  }
  return this;
}

void sub_1BEEAFA44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void IMSCallManager::initializeNonEmergencyCall(_QWORD *a1, std::string *a2, uint64_t a3)
{
  std::string *v6;
  uint64_t v7;
  ImsPrefs *v8;
  void **v9;
  ImsPrefs *v10;
  void **v11;
  uint64_t v12;
  std::string::size_type size;
  std::string::size_type v14;
  int v15;
  void *v16;
  std::string *p_str;
  std::string *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  std::string::size_type v22;
  char OutgoingUri;
  ImsPrefs *v24;
  void **v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  const ImsPrefs *v32;
  uint64_t v33;
  IMSCallInfo *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  IMSCallInfo **v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  IMSCallInfo **v49;
  unint64_t v50;
  char *v51;
  char *v52;
  IMSCallInfo *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void (**v58)(ImsUuid *__hidden);
  std::string v59;
  std::string v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  void (**v63)(ImsUuid *__hidden);
  std::string v64;
  void (**v65)(ImsUuid *__hidden);
  std::string v66;
  void *v67[2];
  char v68;
  void (**v69)(ImsUuid *__hidden);
  std::string v70;
  std::string v71;
  SipStack *v72;
  std::__shared_weak_count *v73;
  std::string __str;
  std::string __p;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (**v81)(SipParameterMap *__hidden);
  uint64_t *v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  void (**v100)(SipParameterMap *__hidden);
  _QWORD *v101;
  _QWORD v102[5];
  _QWORD v103[3];
  void (**v104)(ImsUuid *__hidden);
  std::string v105;
  std::string v106;
  SipStack *v107;
  std::__shared_weak_count *v108;
  _OWORD v109[2];
  __int128 v110;
  _OWORD v111[2];
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  _QWORD v115[3];
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  _OWORD v130[22];
  void (**v131)(ImsUuid *__hidden);
  std::string v132;

  v131 = off_1E78C0288;
  memset(&v132, 0, sizeof(v132));
  if (*(char *)(a3 + 39) < 0)
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  else
    v132 = *(std::string *)(a3 + 16);
  memset(v130, 0, sizeof(v130));
  BambiCallOptions::BambiCallOptions((BambiCallOptions *)v130, (const BambiCallOptions *)(a3 + 40));
  v129 = 0u;
  v128 = 0u;
  v127 = 0;
  v112 = 0;
  memset(v111, 0, sizeof(v111));
  v110 = 0u;
  memset(v109, 0, sizeof(v109));
  DWORD2(v110) = 90;
  LOBYTE(v111[0]) = 1;
  BYTE2(v111[0]) = 1;
  *(_QWORD *)((char *)v111 + 4) = 0x200000001;
  *(_WORD *)((char *)v111 + 13) = 257;
  *(_QWORD *)((char *)v111 + 15) = 0;
  *(_WORD *)((char *)&v111[1] + 7) = 256;
  v116 = 0u;
  v117 = 0u;
  v113 = 0u;
  v114 = 0u;
  memset(v115, 0, sizeof(v115));
  v118 = 0x40A7700000000000;
  v124 = 0u;
  v125 = 0u;
  v126 = 0u;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v122 = 0u;
  v123 = 0u;
  v108 = 0;
  v107 = 0;
  v6 = (std::string *)(a3 + 5072);
  (*(void (**)(SipStack **__return_ptr, _QWORD, std::string *))(**(_QWORD **)(a1[3] + 168) + 192))(&v107, *(_QWORD *)(a1[3] + 168), v6);
  v7 = a1[3];
  std::string::basic_string[abi:ne180100]<0>(&__p, "-");
  IPTelephonyManager::auditCarrierPrefs(v7, (uint64_t)v6, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v107)
  {
    if (*((_DWORD *)v107 + 50) == 2)
    {
      v103[2] = 257;
      v102[2] = 257;
      v99 = 0;
      v84 = 0u;
      v78 = 0;
      v79 = 0;
      v80 = 0;
      v76 = 0;
      v77 = 0;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E78D08F8;
      __p.__r_.__value_.__r.__words[2] = 0;
      v83 = 0;
      *(_QWORD *)&v84 = 0;
      v81 = &off_1E78B82D8;
      v82 = &v83;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BFCE8;
      v95 = 0u;
      v96 = 0u;
      v97 = 0u;
      v85 = 0u;
      v86 = 0u;
      v87 = 0u;
      v88 = 0u;
      v89 = 0u;
      v90 = 0u;
      v91 = 0u;
      v92 = 0u;
      v93 = 0u;
      v94 = 0u;
      v98 = 0;
      v100 = &off_1E78B82D8;
      v102[1] = 0;
      v102[0] = 0;
      v101 = v102;
      v103[1] = 0;
      v103[0] = 0;
      v102[3] = &off_1E78B82D8;
      v102[4] = v103;
      WORD4(v84) = 257;
      memset(&v106, 0, sizeof(v106));
      v8 = (ImsPrefs *)SipStack::prefs(v107);
      v9 = (void **)ImsPrefs::getCallTransferRequestUriKey(v8);
      ImsPrefs::stringValue(v8, v9);
      v10 = (ImsPrefs *)SipStack::prefs(v107);
      v11 = (void **)ImsPrefs::getCallTransferDialNumberKey(v10);
      ImsPrefs::stringValue(v10, v11);
      v12 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v12 & 0x80u) == 0)
        size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      else
        size = a2->__r_.__value_.__l.__size_;
      v14 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      v15 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = __str.__r_.__value_.__l.__size_;
      if (size == v14)
      {
        v16 = (void *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((v12 & 0x80) == 0)
        {
          if (*((_BYTE *)&a2->__r_.__value_.__s + 23))
          {
            v18 = a2;
            while (v18->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
            {
              v18 = (std::string *)((char *)v18 + 1);
              p_str = (std::string *)((char *)p_str + 1);
              if (!--v12)
                goto LABEL_42;
            }
            goto LABEL_40;
          }
LABEL_42:
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
          else
            v22 = v106.__r_.__value_.__l.__size_;
          if (v15 < 0)
            operator delete(v16);
          if (v22)
          {
            OutgoingUri = SipUri::fromString((uint64_t)&__p, &v106);
            memset(&__str, 0, sizeof(__str));
            v24 = (ImsPrefs *)SipStack::prefs(v107);
            v25 = (void **)ImsPrefs::getCallTransferToUriKey(v24);
            ImsPrefs::stringValue(v24, v25);
            std::string::operator=((std::string *)((char *)&v130[5] + 8), &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__str.__r_.__value_.__l.__data_);
              if ((OutgoingUri & 1) != 0)
              {
LABEL_59:
                v32 = (const ImsPrefs *)SipStack::prefs(v107);
                BambiCallOptions::initializeFromPrefs((BambiCallOptions *)v130, v32);
                memset(&__str, 0, sizeof(__str));
                if (BambiClient::unconfirmedCalls(*(_QWORD *)(a1[3] + 168), &__str.__r_.__value_.__l.__data_))
                {
                  std::string::basic_string[abi:ne180100]<0>(&v71, "call");
                  std::string::basic_string[abi:ne180100]<0>(v67, (char *)&str_1_10);
                  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                  v33 = ImsLogger::debug(ims::_logger, (uint64_t)&v71, (uint64_t)v67);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"Can not dial calls during existing alerting call", 48);
                  *(_BYTE *)(v33 + 17) = 0;
                  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(_BYTE *)(v33 + 17) = 0;
                  if (v68 < 0)
                    operator delete(v67[0]);
                  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v71.__r_.__value_.__l.__data_);
                  v65 = off_1E78C0288;
                  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v66, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
                  else
                    v66 = v132;
                  ims::CFString::asString(CFSTR("kCallDisconnectionReasonAnsweringExistingCall"), (const void *)0x8000100, &v71);
                  IMSCallManager::sendCallDisconnectionNotification((uint64_t)a1, (uint64_t)&v65, (void **)&v6->__r_.__value_.__l.__data_, &v71, 0);
                  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v71.__r_.__value_.__l.__data_);
                  v65 = off_1E78C0288;
                  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v66.__r_.__value_.__l.__data_);
                }
                else
                {
                  v34 = (IMSCallInfo *)operator new();
                  v63 = off_1E78C0288;
                  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v64, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
                  else
                    v64 = v132;
                  v36 = *(_QWORD *)(a1[3] + 168);
                  v61 = 0;
                  v62 = 0;
                  IMSCallInfo::IMSCallInfo((uint64_t)v34, (uint64_t)a1, (uint64_t)&v63, v6, v36, &v61);
                  v37 = v62;
                  if (v62)
                  {
                    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
                    do
                      v39 = __ldaxr(p_shared_owners);
                    while (__stlxr(v39 - 1, p_shared_owners));
                    if (!v39)
                    {
                      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                      std::__shared_weak_count::__release_weak(v37);
                    }
                  }
                  v63 = off_1E78C0288;
                  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v64.__r_.__value_.__l.__data_);
                  v41 = (IMSCallInfo **)a1[6];
                  v40 = a1[7];
                  if ((unint64_t)v41 >= v40)
                  {
                    v43 = a1[5];
                    v44 = ((uint64_t)v41 - v43) >> 3;
                    if ((unint64_t)(v44 + 1) >> 61)
                      std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
                    v45 = v40 - v43;
                    v46 = v45 >> 2;
                    if (v45 >> 2 <= (unint64_t)(v44 + 1))
                      v46 = v44 + 1;
                    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
                      v47 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v47 = v46;
                    if (v47)
                      v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v47);
                    else
                      v48 = 0;
                    v49 = (IMSCallInfo **)(v47 + 8 * v44);
                    v50 = v47 + 8 * v48;
                    *v49 = v34;
                    v42 = v49 + 1;
                    v52 = (char *)a1[5];
                    v51 = (char *)a1[6];
                    if (v51 != v52)
                    {
                      do
                      {
                        v53 = (IMSCallInfo *)*((_QWORD *)v51 - 1);
                        v51 -= 8;
                        *--v49 = v53;
                      }
                      while (v51 != v52);
                      v51 = (char *)a1[5];
                    }
                    a1[5] = v49;
                    a1[6] = v42;
                    a1[7] = v50;
                    if (v51)
                      operator delete(v51);
                  }
                  else
                  {
                    *v41 = v34;
                    v42 = v41 + 1;
                  }
                  a1[6] = v42;
                  std::string::basic_string[abi:ne180100]<0>(&v71, "audit");
                  std::string::basic_string[abi:ne180100]<0>(v67, (char *)&str_1_10);
                  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                  v54 = ImsLogger::debug(ims::_logger, (uint64_t)&v71, (uint64_t)v67);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"Created outgoing call handle for ", 33);
                  *(_BYTE *)(v54 + 17) = 0;
                  ((void (*)(void (***)(ImsUuid *__hidden), uint64_t))v131[2])(&v131, v54);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)" on stack ", 10);
                  *(_BYTE *)(v54 + 17) = 0;
                  if (*((char *)v107 + 4159) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v60, *((const std::string::value_type **)v107 + 517), *((_QWORD *)v107 + 518));
                  }
                  else
                  {
                    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v107 + 4136);
                    v60.__r_.__value_.__r.__words[2] = *((_QWORD *)v107 + 519);
                  }
                  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v54 + 32))(v54, &v60);
                  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(_BYTE *)(v54 + 17) = 0;
                  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v60.__r_.__value_.__l.__data_);
                  if (v68 < 0)
                    operator delete(v67[0]);
                  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v71.__r_.__value_.__l.__data_);
                  if ((IMSCallInfo::startCall(v34, (const SipUri *)&__p, (const BambiCallOptions *)v130, 0) & 1) == 0)
                  {
                    v58 = off_1E78C0288;
                    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                      std::string::__init_copy_ctor_external(&v59, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
                    else
                      v59 = v132;
                    ims::CFString::asString(CFSTR("kCallDisconnectionReasonUnknownError"), (const void *)0x8000100, &v71);
                    IMSCallManager::sendCallDisconnectionNotification((uint64_t)a1, (uint64_t)&v58, (void **)&v6->__r_.__value_.__l.__data_, &v71, 1);
                    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v71.__r_.__value_.__l.__data_);
                    v58 = off_1E78C0288;
                    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v59.__r_.__value_.__l.__data_);
                    (*(void (**)(_QWORD *, IMSCallInfo *))(*a1 + 240))(a1, v34);
                  }
                }
                v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
                goto LABEL_128;
              }
LABEL_69:
              std::string::basic_string[abi:ne180100]<0>(&__str, "call");
              std::string::basic_string[abi:ne180100]<0>(&v71, (char *)&str_1_10);
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v35 = ImsLogger::error(ims::_logger, (uint64_t)&__str, (uint64_t)&v71);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"IMSCallManager: unable to determine destination URI", 51);
              *(_BYTE *)(v35 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v35 + 17) = 0;
              if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v71.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v69 = off_1E78C0288;
              if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v70, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
              else
                v70 = v132;
              ims::CFString::asString(CFSTR("kCallDisconnectionReasonUnknownError"), (const void *)0x8000100, &__str);
              IMSCallManager::sendCallDisconnectionNotification((uint64_t)a1, (uint64_t)&v69, (void **)&v6->__r_.__value_.__l.__data_, &__str, 0);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v69 = off_1E78C0288;
              if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v70.__r_.__value_.__l.__data_);
LABEL_128:
              if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v106.__r_.__value_.__l.__data_);
              SipUri::~SipUri((SipUri *)&__p);
              goto LABEL_131;
            }
LABEL_58:
            if ((OutgoingUri & 1) != 0)
              goto LABEL_59;
            goto LABEL_69;
          }
LABEL_51:
          v26 = a1[3];
          v72 = v107;
          v73 = v108;
          if (v108)
          {
            v27 = (unint64_t *)&v108->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          OutgoingUri = IPTelephonyManager::makeOutgoingUri(v26, &v72, a2, (SipUri *)&__p);
          v29 = v73;
          if (v73)
          {
            v30 = (unint64_t *)&v73->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
              if ((OutgoingUri & 1) != 0)
                goto LABEL_59;
              goto LABEL_69;
            }
          }
          goto LABEL_58;
        }
        if (!memcmp(a2->__r_.__value_.__l.__data_, p_str, a2->__r_.__value_.__l.__size_))
          goto LABEL_42;
      }
LABEL_40:
      if (v15 < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      goto LABEL_51;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v106, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v21 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v106);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"unable to dial call: stack ", 27);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v21 + 32))(v21, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)" uninitialized.", 15);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v104 = off_1E78C0288;
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v105, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
    else
      v105 = v132;
    ims::CFString::asString(CFSTR("kCallDisconnectionReasonUnknownError"), (const void *)0x8000100, &__p);
    IMSCallManager::sendCallDisconnectionNotification((uint64_t)a1, (uint64_t)&v104, (void **)&v6->__r_.__value_.__l.__data_, &__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v104 = off_1E78C0288;
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v105.__r_.__value_.__r.__words[0];
      goto LABEL_38;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v106, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v19 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v106);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"unable to begin non-emergency call: invalid stack id ", 53);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 32))(v19, v6);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_38:
      operator delete(v20);
    }
  }
LABEL_131:
  v55 = v108;
  if (v108)
  {
    v56 = (unint64_t *)&v108->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  BambiCallOptions::~BambiCallOptions((void **)v109);
  BambiCallOptions::~BambiCallOptions((void **)v130);
  v131 = off_1E78C0288;
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
}

void sub_1BEEB07E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47)
{
  uint64_t v47;
  uint64_t v48;

  if (a31 < 0)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  a36 = &a44;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  SipUri::~SipUri((SipUri *)&a47);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D0]);
  BambiCallOptions::~BambiCallOptions((void **)&STACK[0x2E0]);
  BambiCallOptions::~BambiCallOptions((void **)&STACK[0x440]);
  *(_QWORD *)(v48 - 112) = v47;
  if (*(char *)(v48 - 81) < 0)
    operator delete(*(void **)(v48 - 104));
  _Unwind_Resume(a1);
}

void IMSCallManager::sendCallDisconnectionNotification(uint64_t a1, uint64_t a2, void **a3, const std::string *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(ImsUuid *__hidden);
  std::string v17;
  void *v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22[2];
  void *v23[2];
  __int128 v24;
  std::string __p;
  std::string v26;

  std::string::basic_string[abi:ne180100]<0>(v18, "call");
  std::string::basic_string[abi:ne180100]<0>(&v26, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)&v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Sending Call Status Changed notification: disconnection for callid: ", 68);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)", reason = ", 11);
  *(_BYTE *)(v10 + 17) = 0;
  LoggableString::LoggableString(&__p, a4);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 40))(v10, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  v18[0] = (void *)256;
  v20 = 0;
  v21 = 0;
  v18[1] = 0;
  v19 = 0;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)v23 = 0u;
  v24 = 0u;
  if (a5)
  {
    v16 = off_1E78C0288;
    if (*(char *)(a2 + 31) < 0)
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    else
      v17 = *(std::string *)(a2 + 8);
    v11 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v16);
    v12 = v11;
    v16 = off_1E78C0288;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v17.__r_.__value_.__l.__data_);
      if (v12)
        goto LABEL_13;
    }
    else if (v11)
    {
LABEL_13:
      v13 = *(_BYTE *)(v12 + 573) != 0;
LABEL_20:
      BYTE4(v21) = 1;
      IMSCallManager::sendCallStatusRequest(a1, (uint64_t)a3, 2, v13, 0);
      goto LABEL_21;
    }
    std::string::basic_string[abi:ne180100]<0>(&v26, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::error(ims::_logger, (uint64_t)&v26, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Unable to find call ", 20);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" -- assuming mobile originated.", 31);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    v13 = 1;
    goto LABEL_20;
  }
LABEL_21:
  v15 = IMSClientManager::delegateForStack(a3);
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v26 = *(std::string *)(a2 + 8);
  (*(void (**)(uint64_t, std::string *, const std::string *, void **))(*(_QWORD *)v15 + 16))(v15, &v26, a4, v18);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24) < 0)
    operator delete(v23[1]);
  if (SHIBYTE(v23[0]) < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(v18[1]);
}

void sub_1BEEB0DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 73) < 0)
    operator delete(*(void **)(v35 - 96));
  ims::DisconnectInfo::~DisconnectInfo(&__p);
  _Unwind_Resume(a1);
}

void IMSCallManager::initializeMOLazuliSession(IMSCallManager *this, const LazuliSendParams *a2, int a3)
{
  uint64_t **v6;
  std::string *v7;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char OutgoingUri;
  char v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::string v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::string v47[12];
  char v48;
  std::string __p;
  void *v50;
  char v51;
  std::__shared_weak_count *v52;
  void *v53;
  char v54;
  std::string v55[12];
  __int128 v56;
  _QWORD v57[3];
  char v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  __int128 v63;
  int v64;
  std::string v65;
  std::string v66;
  SipStack *v67;
  std::__shared_weak_count *v68;
  __int128 v69;
  std::string v70[2];
  std::string::size_type v71[2];
  std::string::value_type *__s[4];
  __int128 v73;
  uint64_t v74;
  std::string v75[2];
  _QWORD v76[9];
  _QWORD v77[3];
  char v78;
  SipStack *v79;
  std::__shared_weak_count *v80;
  void *v81[2];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (**v88)(SipParameterMap *__hidden);
  uint64_t *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  void (**v106)(SipParameterMap *__hidden);
  _QWORD *v107;
  _QWORD v108[5];
  uint64_t v109;
  __int128 v110;
  SipStack *v111;
  std::__shared_weak_count *v112;

  v6 = (uint64_t **)((char *)this + 64);
  v7 = (std::string *)((char *)a2 + 72);
  v8 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 64, (void **)a2 + 9);
  if ((void **)((char *)this + 72) != v8)
  {
    std::string::basic_string[abi:ne180100]<0>(v81, "lazuli");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)v81, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"session already established ", 28);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 32))(v9, v7);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82) < 0)
      operator delete(v81[0]);
    return;
  }
  v10 = v8;
  v111 = 0;
  v112 = 0;
  (*(void (**)(SipStack **__return_ptr, _QWORD, const LazuliSendParams *))(**(_QWORD **)(*((_QWORD *)this + 3)
                                                                                                  + 168)
                                                                                    + 192))(&v111, *(_QWORD *)(*((_QWORD *)this + 3) + 168), a2);
  v110 = 0u;
  v108[2] = 257;
  v105 = 0u;
  v91 = 0u;
  v85 = 0;
  v87 = 0;
  v86 = 0;
  v84 = 0;
  v82 = 0;
  v83 = 0;
  *(_QWORD *)&v91 = 0;
  v90 = 0;
  v88 = &off_1E78B82D8;
  v89 = &v90;
  v81[1] = &off_1E78D08F8;
  v81[0] = &off_1E78BFCE8;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  *(_QWORD *)&v105 = 0;
  v106 = &off_1E78B82D8;
  v108[1] = 0;
  v108[0] = 0;
  v107 = v108;
  *(_QWORD *)&v110 = 0;
  v109 = 0;
  v108[3] = &off_1E78B82D8;
  v108[4] = &v109;
  WORD4(v91) = 257;
  WORD4(v110) = 257;
  v11 = *((_QWORD *)this + 3);
  v79 = v111;
  v80 = v112;
  if (v112)
  {
    p_shared_owners = (unint64_t *)&v112->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  OutgoingUri = IPTelephonyManager::makeOutgoingUri(v11, &v79, (std::string *)a2 + 2, (SipUri *)v81);
  v15 = OutgoingUri;
  v16 = v80;
  if (!v80)
    goto LABEL_13;
  v17 = (unint64_t *)&v80->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_13:
    if ((OutgoingUri & 1) != 0)
      goto LABEL_14;
LABEL_20:
    std::string::basic_string[abi:ne180100]<0>(&__p, "lazuli");
    std::string::basic_string[abi:ne180100]<0>(&v44, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v21 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"IMSCallManager: unable to determine destination URI", 51);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    ImsUuid::ImsUuid(v77, (uint64_t)v7);
    ims::CFString::asString(CFSTR("kCallDisconnectionReasonUnknownError"), (const void *)0x8000100, &__p);
    IMSCallManager::sendCallDisconnectionNotification((uint64_t)this, (uint64_t)v77, (void **)a2, &__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v77[0] = off_1E78C0288;
    if ((v78 & 0x80000000) == 0)
      goto LABEL_124;
    v20 = (void *)v77[1];
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if ((v15 & 1) == 0)
    goto LABEL_20;
LABEL_14:
  if (v10 == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v6, (void **)&v7->__r_.__value_.__l.__data_))
  {
    memset(&v76[2], 0, 56);
    v76[0] = &off_1E78B7238;
    v76[1] = &_bambiDomain;
    v73 = 0u;
    memset(__s, 0, sizeof(__s));
    *(_OWORD *)v71 = 0u;
    DWORD2(v73) = 90;
    v74 = 65537;
    memset(v75, 0, sizeof(v75));
    memset(v70, 0, sizeof(v70));
    std::string::operator=(&v70[1], v7);
    std::string::operator=((std::string *)v71, v7);
    std::string::operator=(v70, (const std::string *)((char *)a2 + 272));
    std::string::operator=(v75, (const std::string *)((char *)a2 + 248));
    std::string::operator=(&v75[1], (const std::string *)a2 + 1);
    v69 = 0uLL;
    v22 = *(_QWORD *)(*((_QWORD *)this + 3) + 168);
    v67 = v111;
    v68 = v112;
    if (v112)
    {
      v23 = (unint64_t *)&v112->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    if (SHIBYTE(v70[0].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v59, v70[0].__r_.__value_.__l.__data_, v70[0].__r_.__value_.__l.__size_);
    else
      v59 = v70[0];
    if (SHIBYTE(v70[1].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v60, v70[1].__r_.__value_.__l.__data_, v70[1].__r_.__value_.__l.__size_);
    else
      v60 = v70[1];
    if (SHIBYTE(__s[0]) < 0)
    {
      std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)v71[0], v71[1]);
    }
    else
    {
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)v71;
      v61.__r_.__value_.__r.__words[2] = (std::string::size_type)__s[0];
    }
    if (SHIBYTE(__s[3]) < 0)
      std::string::__init_copy_ctor_external(&v62, __s[1], (std::string::size_type)__s[2]);
    else
      v62 = *(std::string *)&__s[1];
    v63 = v73;
    v64 = v74;
    if (SHIBYTE(v75[0].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v65, v75[0].__r_.__value_.__l.__data_, v75[0].__r_.__value_.__l.__size_);
    else
      v65 = v75[0];
    if (SHIBYTE(v75[1].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v66, v75[1].__r_.__value_.__l.__data_, v75[1].__r_.__value_.__l.__size_);
    else
      v66 = v75[1];
    BambiClient::createNewLazuliSession(v22, &v67, (const SipUri *)v81, &v59, &v69);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    v25 = v68;
    if (v68)
    {
      v26 = (unint64_t *)&v68->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v69;
    if ((_QWORD)v69)
    {
      v56 = 0u;
      memset(v55, 0, sizeof(v55));
      if (a3)
      {
        LazuliSendParams::LazuliSendParams(v55, a2);
        BYTE8(v56) = 1;
      }
      if (*((char *)a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      else
        v44 = *(std::string *)a2;
      v45 = v28;
      v46 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
      if (*((_QWORD *)&v69 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      std::__optional_copy_base<LazuliSendParams,false>::__optional_copy_base[abi:ne180100](v47, (const LazuliSendParams *)v55);
      std::pair<std::string,LazuliInfo>::pair[abi:ne180100]<std::string const&,LazuliInfo,0>(&__p, (__int128 *)v7, (__int128 *)&v44);
      std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string,LazuliInfo>>(v6, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
      if (v54)
        LazuliSendParams::~LazuliSendParams(&v53);
      v32 = v52;
      if (v52)
      {
        v33 = (unint64_t *)&v52->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (v51 < 0)
        operator delete(v50);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v48)
        LazuliSendParams::~LazuliSendParams((void **)&v47[0].__r_.__value_.__l.__data_);
      v35 = v46;
      if (v46)
      {
        v36 = (unint64_t *)&v46->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (BYTE8(v56))
        LazuliSendParams::~LazuliSendParams((void **)&v55[0].__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "lazuli");
      std::string::basic_string[abi:ne180100]<0>(&v44, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v29 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"Unable to create session for ", 29);
      *(_BYTE *)(v29 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v29 + 32))(v29, v7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v29 + 17) = 0;
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ImsUuid::ImsUuid(v57, (uint64_t)v7);
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonUnknownError"), (const void *)0x8000100, &__p);
      IMSCallManager::sendCallDisconnectionNotification((uint64_t)this, (uint64_t)v57, (void **)a2, &__p, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v57[0] = off_1E78C0288;
      if (v58 < 0)
        operator delete((void *)v57[1]);
    }
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (SHIBYTE(v75[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75[1].__r_.__value_.__l.__data_);
    if (SHIBYTE(v75[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(__s[3]) < 0)
      operator delete(__s[1]);
    if (SHIBYTE(__s[0]) < 0)
      operator delete((void *)v71[0]);
    if (SHIBYTE(v70[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70[1].__r_.__value_.__l.__data_);
    if (SHIBYTE(v70[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70[0].__r_.__value_.__l.__data_);
    ImsResult::~ImsResult((ImsResult *)v76);
    goto LABEL_124;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "lazuli");
  std::string::basic_string[abi:ne180100]<0>(&v44, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v19 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"session found for ", 18);
  *(_BYTE *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 32))(v19, v7);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v19 + 17) = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v20 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_28:
    operator delete(v20);
  }
LABEL_124:
  SipUri::~SipUri((SipUri *)v81);
  v41 = v112;
  if (v112)
  {
    v42 = (unint64_t *)&v112->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_1BEEB19C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (LOBYTE(STACK[0x3F8]))
    LazuliSendParams::~LazuliSendParams((void **)&STACK[0x2D0]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4E0]);
  LazuliSessionOptions::~LazuliSessionOptions((void **)&STACK[0x4F0]);
  ImsResult::~ImsResult((ImsResult *)&STACK[0x5A0]);
  SipUri::~SipUri((SipUri *)&STACK[0x618]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void LazuliSessionOptions::~LazuliSessionOptions(void **this)
{
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t std::pair<std::string,LazuliInfo>::~pair(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 360))
    LazuliSendParams::~LazuliSendParams((void **)(a1 + 64));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 48);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void LazuliInfo::~LazuliInfo(void **this)
{
  if (*((_BYTE *)this + 336))
    LazuliSendParams::~LazuliSendParams(this + 5);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void IMSCallManager::leaveGroupChat(uint64_t **this, std::string *a2)
{
  uint64_t v4;
  void **v5;
  std::__shared_weak_count *v6;
  uint64_t **v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string __p;
  uint64_t **v33;
  std::__shared_weak_count *v34;
  void *v35;
  char v36;
  std::string v37;
  void *v38;
  char v39;
  std::__shared_weak_count *v40;
  void *v41;
  char v42;
  _BYTE v43[72];
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::string v47;
  uint64_t **v48;
  std::__shared_weak_count *v49;

  std::string::basic_string[abi:ne180100]<0>(&v37, "lazuli");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v37, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Leaving Group Chat ", 19);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 32))(v4, a2 + 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" with trx ", 10);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 32))(v4, a2 + 1);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(this + 8), (void **)&a2[3].__r_.__value_.__l.__data_);
  if (this + 9 == (uint64_t **)v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v37, "lazuli");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)&v37, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"triggering session creation for ", 32);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 32))(v10, a2 + 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" with trx ", 10);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 32))(v10, a2 + 1);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    IMSCallManager::initializeMOLazuliSession((IMSCallManager *)this, (const LazuliSendParams *)a2, 1);
  }
  else
  {
    v7 = (uint64_t **)v5[10];
    v6 = (std::__shared_weak_count *)v5[11];
    v48 = v7;
    v49 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    memset(&v47, 0, sizeof(v47));
    if (*((char *)v5 + 79) < 0)
      std::string::__init_copy_ctor_external(&v47, (const std::string::value_type *)v5[7], (std::string::size_type)v5[8]);
    else
      v47 = *(std::string *)(v5 + 7);
    LazuliSession::leaveGroup(v7, a2 + 1);
    v45 = 0;
    v46 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(_QWORD *)this[3][21] + 192))(&v45, this[3][21], &v47);
    v11 = *(_QWORD *)(v45 + 144);
    v13 = *(_QWORD *)(v11 + 208);
    v12 = *(std::__shared_weak_count **)(v11 + 216);
    __p.__r_.__value_.__r.__words[0] = v13;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    std::string::basic_string[abi:ne180100]<0>(&v37, "UserTriggered");
    v43[0] = 0;
    v44 = 0;
    SipLazuliManager::terminateMessageSession(v13, (uint64_t)&a2[3], (uint64_t)&v37, (const ImsResult *)v43);
    if (v44)
      ImsResult::~ImsResult((ImsResult *)v43);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (v12)
    {
      v16 = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::__erase_unique<std::string>(this + 8, (void **)&a2[3].__r_.__value_.__l.__data_);
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    else
      __p = *a2;
    v33 = v48;
    v34 = v49;
    if (v49)
    {
      v18 = (unint64_t *)&v49->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    LOBYTE(v35) = 0;
    v36 = 0;
    std::pair<std::string,LazuliInfo>::pair[abi:ne180100]<std::string const&,LazuliInfo,0>(&v37, (__int128 *)&a2[3], (__int128 *)&__p);
    std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string,LazuliInfo>>(this + 11, (void **)&v37.__r_.__value_.__l.__data_, (uint64_t)&v37);
    if (v42)
      LazuliSendParams::~LazuliSendParams(&v41);
    v20 = v40;
    if (v40)
    {
      v21 = (unint64_t *)&v40->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v39 < 0)
      operator delete(v38);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (v36)
      LazuliSendParams::~LazuliSendParams(&v35);
    v23 = v34;
    if (v34)
    {
      v24 = (unint64_t *)&v34->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v26 = v46;
    if (v46)
    {
      v27 = (unint64_t *)&v46->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    v29 = v49;
    if (v49)
    {
      v30 = (unint64_t *)&v49->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
}

void sub_1BEEB2268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v61 - 128);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v61 - 80);
  _Unwind_Resume(a1);
}

void IMSCallManager::handleLeaveGroupChat(uint64_t a1, void **a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = (uint64_t **)(a1 + 88);
  v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 88, a2);
  if ((uint64_t *)(a1 + 96) != v4)
  {
    v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,LazuliInfo>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

void IMSCallManager::handleMOSessionConnected(uint64_t **a1, void **a2)
{
  void **v3;
  uint64_t v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  std::string v9[12];
  __int128 v10;

  v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 8), a2);
  if (a1 + 9 != (uint64_t **)v3)
  {
    v10 = 0u;
    memset(v9, 0, sizeof(v9));
    std::__optional_copy_base<LazuliSendParams,false>::__optional_copy_base[abi:ne180100](v9, (const LazuliSendParams *)(v3 + 12));
    if (BYTE8(v10))
    {
      std::string::basic_string[abi:ne180100]<0>(v7, "lazuli");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::debug(ims::_logger, (uint64_t)v7, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Found pending Group Chat leave for new session", 46);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (v6 < 0)
        operator delete(__p[0]);
      if (v8 < 0)
        operator delete(v7[0]);
      IMSCallManager::leaveGroupChat(a1, v9);
      if (BYTE8(v10))
        LazuliSendParams::~LazuliSendParams((void **)&v9[0].__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BEEB24E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (a58)
    LazuliSendParams::~LazuliSendParams(&a21);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::trackMTLazuliSession(uint64_t a1, void **a2, uint64_t *a3)
{
  uint64_t **v6;
  void **v7;
  void **v8;
  uint64_t v9;
  LazuliSession **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::string __p;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *v42;
  char v43;
  std::string v44;
  void *v45;
  char v46;
  std::__shared_weak_count *v47;
  void *v48;
  char v49;
  _BYTE v50[72];
  char v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  v6 = (uint64_t **)(a1 + 64);
  v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 64, a2);
  if ((void **)(a1 + 72) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v44, "lazuli");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v23 = ImsLogger::debug(ims::_logger, (uint64_t)&v44, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Tracking lazuli session ", 24);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v23 + 32))(v23, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    v24 = *a3;
    v52 = 0;
    v53 = 0;
    v25 = *(std::__shared_weak_count **)(v24 + 288);
    if (v25 && (v53 = std::__shared_weak_count::lock(v25)) != 0)
    {
      v26 = *(_QWORD *)(v24 + 280);
      v52 = v26;
    }
    else
    {
      v26 = 0;
    }
    if (*(char *)(v26 + 4159) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v26 + 4136), *(_QWORD *)(v26 + 4144));
    else
      __p = *(std::string *)(v26 + 4136);
    v27 = a3[1];
    v40 = *a3;
    v41 = (std::__shared_weak_count *)v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    std::pair<std::string,LazuliInfo>::pair[abi:ne180100]<std::string const&,LazuliInfo,0>(&v44, (__int128 *)a2, (__int128 *)&__p);
    std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string,LazuliInfo>>(v6, (void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&v44);
    if (v49)
      LazuliSendParams::~LazuliSendParams(&v48);
    v30 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (v46 < 0)
      operator delete(v45);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (v43)
      LazuliSendParams::~LazuliSendParams(&v42);
    v33 = v41;
    if (v41)
    {
      v34 = (unint64_t *)&v41->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v36 = v53;
    if (v53)
    {
      v37 = (unint64_t *)&v53->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  else
  {
    v8 = v7;
    std::string::basic_string[abi:ne180100]<0>(&v44, "lazuli");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)&v44, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"session already established ", 28);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 32))(v9, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" old ", 5);
    *(_BYTE *)(v9 + 17) = 0;
    v10 = (LazuliSession **)(v8 + 10);
    std::ostream::operator<<();
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" vs ", 4);
    *(_BYTE *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (*v10 != (LazuliSession *)*a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v44, "lazuli");
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v11 = ImsLogger::debug(ims::_logger, (uint64_t)&v44, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Replacing LazuliSession for conv ", 33);
      *(_BYTE *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 32))(v11, a2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v12 = v8 + 7;
      *(_BYTE *)(v11 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      (*(void (**)(std::string *__return_ptr, _QWORD, void **))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 168)
                                                                         + 192))(&__p, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 168), v12);
      if (__p.__r_.__value_.__r.__words[0])
      {
        v13 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 144);
        v15 = *(_QWORD *)(v13 + 208);
        v14 = *(std::__shared_weak_count **)(v13 + 216);
        v52 = v15;
        v53 = v14;
        if (v14)
        {
          v16 = (unint64_t *)&v14->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        std::string::basic_string[abi:ne180100]<0>(&v44, "TerminateChat");
        v50[0] = 0;
        v51 = 0;
        SipLazuliManager::terminateMessageSession(v15, (uint64_t)a2, (uint64_t)&v44, (const ImsResult *)v50);
        if (v51)
          ImsResult::~ImsResult((ImsResult *)v50);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        if (v14)
        {
          v18 = (unint64_t *)&v14->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v21 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      LazuliSession::detachSipSession(*v10);
      std::shared_ptr<IpAddress>::operator=[abi:ne180100](v10, a3);
    }
  }
}

void sub_1BEEB2AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v61 - 80);
  _Unwind_Resume(a1);
}

void IMSCallManager::terminateLazuli(uint64_t a1, uint64_t a2, uint64_t a3, xpc_object_t *a4)
{
  uint64_t v8;
  uint64_t **v9;
  void **v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  const char *v29;
  const char *v30;
  LazuliDelegate *v31;
  xpc_object_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t object;
  _BYTE v47[72];
  char v48;
  LazuliDelegate *v49;
  const char *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  void *v53;
  std::__shared_weak_count *v54;
  char v55;
  std::string v56;

  std::string::basic_string[abi:ne180100]<0>(&v56, "lazuli");
  std::string::basic_string[abi:ne180100]<0>(&v53, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v56, (uint64_t)&v53);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Terminating lazuli ", 19);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v55 < 0)
    operator delete(v53);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  v9 = (uint64_t **)(a1 + 64);
  v10 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 64, (void **)a2);
  if ((void **)(a1 + 72) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v56, "lazuli");
    std::string::basic_string[abi:ne180100]<0>(&v53, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)&v56, (uint64_t)&v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"session not found. unable to terminate ", 39);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (v55 < 0)
      operator delete(v53);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
  }
  else
  {
    v12 = v10[10];
    v11 = (std::__shared_weak_count *)v10[11];
    v53 = v12;
    v54 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    memset(&v56, 0, sizeof(v56));
    if (*((char *)v10 + 79) < 0)
      std::string::__init_copy_ctor_external(&v56, (const std::string::value_type *)v10[7], (std::string::size_type)v10[8]);
    else
      v56 = *(std::string *)(v10 + 7);
    LazuliSession::endSession((LazuliSession *)v12, a3);
    v51 = 0;
    v52 = 0;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, std::string *))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 168)
                                                                         + 192))(&v51, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 168), &v56);
    v16 = *(_QWORD *)(v51 + 144);
    v17 = *(_QWORD *)(v16 + 208);
    v18 = *(std::__shared_weak_count **)(v16 + 216);
    v49 = (LazuliDelegate *)v17;
    v50 = (const char *)v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v47[0] = 0;
    v48 = 0;
    SipLazuliManager::terminateMessageSession(v17, a2, a3, (const ImsResult *)v47);
    if (v48)
      ImsResult::~ImsResult((ImsResult *)v47);
    if (v18)
    {
      v21 = (unint64_t *)&v18->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::__erase_unique<std::string>(v9, (void **)a2))
    {
      v23 = MEMORY[0x1C3B87B98](*a4);
      v24 = MEMORY[0x1E0C812F8];
      if (v23 != MEMORY[0x1E0C812F8])
      {
        v25 = xpc_dictionary_create(0, 0, 0);
        if (v25 || (v25 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B87B98](v25) == v24)
          {
            xpc_retain(v25);
            v26 = v25;
          }
          else
          {
            v26 = xpc_null_create();
          }
        }
        else
        {
          v26 = xpc_null_create();
          v25 = 0;
        }
        xpc_release(v25);
        v27 = xpc_null_create();
        v28 = *a4;
        *a4 = v26;
        xpc_release(v28);
        xpc_release(v27);
      }
      if (!xpc_dictionary_get_value(*a4, "kConversationId"))
      {
        if (*(char *)(a2 + 23) >= 0)
          v29 = (const char *)a2;
        else
          v29 = *(const char **)a2;
        v45 = xpc_string_create(v29);
        if (!v45)
          v45 = xpc_null_create();
        v49 = (LazuliDelegate *)a4;
        v50 = "kConversationId";
        xpc::dict::object_proxy::operator=((uint64_t)&v49, &v45, &object);
        xpc_release(object);
        object = 0;
        xpc_release(v45);
        v45 = 0;
      }
      if (!xpc_dictionary_get_value(*a4, "kReason"))
      {
        if (*(char *)(a3 + 23) >= 0)
          v30 = (const char *)a3;
        else
          v30 = *(const char **)a3;
        v43 = xpc_string_create(v30);
        if (!v43)
          v43 = xpc_null_create();
        v49 = (LazuliDelegate *)a4;
        v50 = "kReason";
        xpc::dict::object_proxy::operator=((uint64_t)&v49, &v43, &v44);
        xpc_release(v44);
        v44 = 0;
        xpc_release(v43);
        v43 = 0;
      }
      v49 = 0;
      v50 = 0;
      IMSClientManager::lazuliDelegateForStack((void **)&v56.__r_.__value_.__l.__data_, &v49);
      v31 = v49;
      if (v49)
      {
        v32 = *a4;
        v42 = v32;
        if (v32)
          xpc_retain(v32);
        else
          v42 = xpc_null_create();
        LazuliDelegate::handleSessionTerminated(v31, &v42);
        xpc_release(v42);
        v42 = 0;
      }
      v33 = (std::__shared_weak_count *)v50;
      if (v50)
      {
        v34 = (unint64_t *)(v50 + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    v36 = v52;
    if (v52)
    {
      v37 = (unint64_t *)&v52->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    v39 = v54;
    if (v54)
    {
      v40 = (unint64_t *)&v54->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
}

void sub_1BEEB30F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29 - 120);
  _Unwind_Resume(a1);
}

void IMSCallManager::terminateAllLazuliSessions(IMSCallManager *this)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  xpc_object_t object;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v21 = &v21;
  v22 = &v21;
  v23 = 0;
  v2 = (char *)*((_QWORD *)this + 8);
  v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    do
    {
      v4 = std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>((uint64_t)&v21, 0, 0, (uint64_t)(v2 + 32));
      v5 = v21;
      *v4 = v21;
      v4[1] = &v21;
      v5[1] = v4;
      v21 = v4;
      ++v23;
      v6 = (char *)*((_QWORD *)v2 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v2 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "lazuli");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Terminating ", 12);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" chats", 6);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  for (i = v22; i != &v21; i = (_QWORD *)i[1])
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "TerminateChat");
    object = xpc_null_create();
    IMSCallManager::terminateLazuli((uint64_t)this, (uint64_t)(i + 2), (uint64_t)v19, &object);
    xpc_release(object);
    object = 0;
    if (v20 < 0)
      operator delete(v19[0]);
  }
  if (*((_QWORD *)this + 13))
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "lazuli");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Forcefully detaching sip session for ", 37);
    *(_BYTE *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" chats", 6);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
    v12 = (char *)*((_QWORD *)this + 11);
    v13 = (char *)this + 96;
    if (v12 != v13)
    {
      do
      {
        LazuliSession::forceDetachSipSession(*((LazuliSession **)v12 + 10));
        v14 = (char *)*((_QWORD *)v12 + 1);
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = *(char **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (char *)*((_QWORD *)v12 + 2);
            v8 = *(_QWORD *)v15 == (_QWORD)v12;
            v12 = v15;
          }
          while (!v8);
        }
        v12 = v15;
      }
      while (v15 != v13);
    }
  }
  std::__list_imp<std::string>::clear(&v21);
}

void sub_1BEEB34E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0)
    operator delete(__p);
  std::__list_imp<std::string>::clear(&a22);
  _Unwind_Resume(a1);
}

BOOL IMSCallManager::hasActiveSession(uint64_t a1, void **a2)
{
  return a1 + 72 != (_QWORD)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 64, a2);
}

void IMSCallManager::initializePullCall(uint64_t *a1, uint64_t a2)
{
  const std::string *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void **v9;
  std::string::size_type size;
  const ImsPrefs *v11;
  IMSCallInfo *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  IMSCallInfo **v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  IMSCallInfo **v29;
  unint64_t v30;
  char *v31;
  char *v32;
  IMSCallInfo *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void (**v37)(ImsUuid *__hidden);
  std::string v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  void (**v41)(ImsUuid *__hidden);
  std::string v42;
  void *v43[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  void (**v65)(ImsUuid *__hidden);
  std::string v66;
  void (**v67)(ImsUuid *__hidden);
  std::string v68;
  void *v69[2];
  char v70;
  std::string __p;
  SipStack *v72;
  std::__shared_weak_count *v73;
  _QWORD v74[10];
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  void (**v92)(SipParameterMap *__hidden);
  _QWORD *v93;
  _QWORD v94[5];
  _QWORD v95[3];
  void (**v96)(ImsUuid *__hidden);
  std::string v97;

  v96 = off_1E78C0288;
  memset(&v97, 0, sizeof(v97));
  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    v97 = *(std::string *)(a2 + 16);
  v95[2] = 257;
  v94[2] = 257;
  v91 = 0;
  v76 = 0u;
  memset(&v74[2], 0, 48);
  *(_QWORD *)&v76 = 0;
  v75 = 0;
  v74[8] = &off_1E78B82D8;
  v74[9] = &v75;
  v74[1] = &off_1E78D08F8;
  v74[0] = &off_1E78BFCE8;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v90 = 0;
  v92 = &off_1E78B82D8;
  v94[1] = 0;
  v94[0] = 0;
  v93 = v94;
  v95[1] = 0;
  v95[0] = 0;
  v94[3] = &off_1E78B82D8;
  v94[4] = v95;
  WORD4(v76) = 257;
  v73 = 0;
  v72 = 0;
  v4 = (const std::string *)(a2 + 5072);
  (*(void (**)(SipStack **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1[3] + 168) + 192))(&v72, *(_QWORD *)(a1[3] + 168), a2 + 5072);
  if (v72)
  {
    v5 = *(char *)(a2 + 175);
    if (v5 < 0)
      v6 = *(_QWORD *)(a2 + 160);
    else
      v6 = *(unsigned __int8 *)(a2 + 175);
    v9 = (void **)(a2 + 152);
    if (!v6)
    {
      SipStack::activeThumperPullCallId(v72, (std::string *)v43);
      if (*(char *)(a2 + 175) < 0)
        operator delete(*v9);
      *(_OWORD *)v9 = *(_OWORD *)v43;
      *(_QWORD *)(a2 + 168) = v44;
      LOBYTE(v5) = *(_BYTE *)(a2 + 175);
    }
    memset(&__p, 0, sizeof(__p));
    if ((v5 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 152), *(_QWORD *)(a2 + 160));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v9;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 168);
    }
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      if ((IPTelephonyManager::makeOutgoingUriForPull(a1[3], a2 + 5072, &__p, (SipUri *)v74) & 1) != 0)
      {
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        *(_OWORD *)v43 = 0u;
        v44 = 0u;
        BambiCallOptions::BambiCallOptions((BambiCallOptions *)v43, (const BambiCallOptions *)(a2 + 40));
        v11 = (const ImsPrefs *)SipStack::prefs(v72);
        BambiCallOptions::initializeFromPrefs((BambiCallOptions *)v43, v11);
        v12 = (IMSCallInfo *)operator new();
        v41 = off_1E78C0288;
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v42, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
        else
          v42 = v97;
        v16 = *(_QWORD *)(a1[3] + 168);
        v39 = 0;
        v40 = 0;
        IMSCallInfo::IMSCallInfo((uint64_t)v12, (uint64_t)a1, (uint64_t)&v41, v4, v16, &v39);
        v17 = v40;
        if (v40)
        {
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v41 = off_1E78C0288;
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        *((_BYTE *)v12 + 569) = 1;
        v21 = (IMSCallInfo **)a1[6];
        v20 = a1[7];
        if ((unint64_t)v21 >= v20)
        {
          v23 = a1[5];
          v24 = ((uint64_t)v21 - v23) >> 3;
          if ((unint64_t)(v24 + 1) >> 61)
            std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
          v25 = v20 - v23;
          v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1))
            v26 = v24 + 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
            v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v27);
          else
            v28 = 0;
          v29 = (IMSCallInfo **)(v27 + 8 * v24);
          v30 = v27 + 8 * v28;
          *v29 = v12;
          v22 = v29 + 1;
          v32 = (char *)a1[5];
          v31 = (char *)a1[6];
          if (v31 != v32)
          {
            do
            {
              v33 = (IMSCallInfo *)*((_QWORD *)v31 - 1);
              v31 -= 8;
              *--v29 = v33;
            }
            while (v31 != v32);
            v31 = (char *)a1[5];
          }
          a1[5] = (uint64_t)v29;
          a1[6] = (uint64_t)v22;
          a1[7] = v30;
          if (v31)
            operator delete(v31);
        }
        else
        {
          *v21 = v12;
          v22 = v21 + 1;
        }
        a1[6] = (uint64_t)v22;
        if ((IMSCallInfo::startCall(v12, (const SipUri *)v74, (const BambiCallOptions *)v43, 0) & 1) == 0)
        {
          (*(void (**)(uint64_t *, IMSCallInfo *))(*a1 + 240))(a1, v12);
          v37 = off_1E78C0288;
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v38, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
          else
            v38 = v97;
          (*(void (**)(uint64_t *, void (***)(ImsUuid *__hidden), const __CFString *, uint64_t, _QWORD))(*a1 + 232))(a1, &v37, CFSTR("kCallStatusPulling"), 255, 0);
          v37 = off_1E78C0288;
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v38.__r_.__value_.__l.__data_);
        }
        BambiCallOptions::~BambiCallOptions(v43);
        goto LABEL_75;
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "call");
      std::string::basic_string[abi:ne180100]<0>(v69, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v14 = ImsLogger::error(ims::_logger, (uint64_t)v43, (uint64_t)v69);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"IMSCallManager: unable to determine destination URI", 51);
      *(_BYTE *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v14 + 17) = 0;
      if (v70 < 0)
        operator delete(v69[0]);
      if (SBYTE7(v44) < 0)
        operator delete(v43[0]);
      v65 = off_1E78C0288;
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v66, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
      else
        v66 = v97;
      (*(void (**)(uint64_t *, void (***)(ImsUuid *__hidden), const __CFString *, uint64_t, _QWORD))(*a1 + 232))(a1, &v65, CFSTR("kCallStatusPulling"), 255, 0);
      v65 = off_1E78C0288;
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      {
        v15 = (void *)v66.__r_.__value_.__r.__words[0];
        goto LABEL_61;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v43, "call");
      std::string::basic_string[abi:ne180100]<0>(v69, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v13 = ImsLogger::error(ims::_logger, (uint64_t)v43, (uint64_t)v69);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Unable to initiate pull call without pull-call-id", 49);
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      if (v70 < 0)
        operator delete(v69[0]);
      if (SBYTE7(v44) < 0)
        operator delete(v43[0]);
      v67 = off_1E78C0288;
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v68, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
      else
        v68 = v97;
      (*(void (**)(uint64_t *, void (***)(ImsUuid *__hidden), const __CFString *, uint64_t, _QWORD))(*a1 + 232))(a1, &v67, CFSTR("kCallStatusPulling"), 255, 0);
      v67 = off_1E78C0288;
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      {
        v15 = (void *)v68.__r_.__value_.__r.__words[0];
LABEL_61:
        operator delete(v15);
      }
    }
LABEL_75:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v8 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_77;
    }
    goto LABEL_78;
  }
  std::string::basic_string[abi:ne180100]<0>(v43, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::error(ims::_logger, (uint64_t)v43, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Unable to initiate pull call for invalid stack ", 47);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a2 + 5072);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v44) < 0)
  {
    v8 = v43[0];
LABEL_77:
    operator delete(v8);
  }
LABEL_78:
  v34 = v73;
  if (v73)
  {
    v35 = (unint64_t *)&v73->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  SipUri::~SipUri((SipUri *)v74);
  v96 = off_1E78C0288;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
}

void sub_1BEEB3DA4(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;

  va_start(va, a11);
  MEMORY[0x1C3B87100](v11, 0x10B3C409B3D2E52);
  BambiCallOptions::~BambiCallOptions((void **)va);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x228]);
  SipUri::~SipUri((SipUri *)&STACK[0x238]);
  *(_QWORD *)(v13 - 96) = v12;
  if (*(char *)(v13 - 65) < 0)
    operator delete(*(void **)(v13 - 88));
  _Unwind_Resume(a1);
}

void IMSCallManager::initializeEmergencyCall()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const ImsPrefs *v6;
  uint64_t v7;
  const ImsPrefs *v8;
  int v9;
  ImsPrefs *v10;
  const ImsPrefsKeyEnum *EmergencyPreferredIdentityKey;
  char v12;
  const char *p_p;
  int v14;
  void *v15;
  std::string *v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  SipStack **v23;
  SipStack **i;
  std::string::size_type size;
  std::string::size_type v26;
  std::string *v27;
  uint64_t v28;
  int v29;
  int v30;
  void *v32;
  int v33;
  const char *v34;
  std::string *v35;
  const std::string *v36;
  std::string::size_type v37;
  uint64_t v38;
  const ImsPrefs *v39;
  std::string *v40;
  std::string *v41;
  std::vector<std::string>::pointer end;
  std::string *v43;
  ImsPrefs *v44;
  void **EmergencyRegistrationRequestUriKey;
  std::string::size_type v46;
  uint64_t v47;
  ImsPrefs *v48;
  void **RegistrationExpirationSecondsKey;
  void *v50;
  int v51;
  _QWORD *j;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BambiPrefsManager *v66;
  uint64_t **v67;
  uint64_t *v68;
  ImsPrefs *v69;
  void **UseNormalIdentityForEmergencyUSIMKey;
  void *v71;
  const SipUri *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  ImsPrefs *v89;
  void **RegisterSmsOnEmergencyPdnKey;
  void *v91;
  int v92;
  int v93;
  BambiPrefsManager *v94;
  uint64_t **v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  unsigned __int8 *v101;
  __int128 *v102;
  std::string *v103;
  int v104;
  void *v105;
  std::string *v106;
  int v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  ImsPrefs *v111;
  void **v112;
  ImsPrefs *v113;
  void **v114;
  uint64_t v115;
  uint64_t v116;
  std::string::size_type v117;
  int v118;
  void *v119;
  std::string *v120;
  unsigned __int8 *v121;
  std::string::size_type v122;
  char OutgoingUri;
  ImsPrefs *v124;
  void **v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  std::string::size_type k;
  std::string::size_type v134;
  std::__shared_weak_count *v135;
  BambiCall *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  IMSCallInfo *v141;
  uint64_t v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  ims::StackConfig *v152;
  unint64_t v153;
  IMSCallInfo **v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  SipStack *v163;
  IMSCallInfo **v164;
  unint64_t v165;
  char *v166;
  char *v167;
  IMSCallInfo *v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  SipStack *v176;
  uint64_t v177;
  std::string *v178;
  _QWORD *v179;
  void (**v180)(ImsUuid *__hidden);
  std::string v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  void (**v184)(ImsUuid *__hidden);
  std::string v185;
  _BYTE v186[72];
  SipStack *v187;
  std::__shared_weak_count *v188;
  std::string v189;
  std::string v190;
  std::string v191;
  std::string v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  __int128 __p;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  std::string v221;
  std::string __str;
  int v223;
  _QWORD v224[10];
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  void (**v242)(SipParameterMap *__hidden);
  _QWORD *v243;
  _QWORD v244[5];
  _QWORD v245[3];
  std::string v246;
  SipStack *v247;
  std::__shared_weak_count *v248;
  std::string v249;
  void *v250;
  char v251;
  std::string v252;
  char v253;
  std::vector<std::string> v254;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  std::string v259;
  std::string v260;
  std::string v261;
  std::string v262;
  std::string v263;
  __int128 v264;
  char v265;
  std::string v266;
  std::string v267;
  __int128 v268;
  char v269;
  std::string v270;
  std::string v271;
  __int128 v272;
  char v273;
  void *v274[57];
  char v275;
  std::string v276[38];
  std::string v277;
  char v278;
  int v279;
  _QWORD v280[51];
  std::string v281;
  void *v282[44];
  void (**v283)(ImsUuid *__hidden);
  std::string v284;
  std::string v285;
  std::string v286;
  std::string v287;

  v0 = MEMORY[0x1E0C80A78]();
  v3 = v2;
  v4 = v1;
  v179 = (_QWORD *)v0;
  v283 = off_1E78C0288;
  memset(&v284, 0, sizeof(v284));
  v177 = v5;
  if (*(char *)(v1 + 39) < 0)
    std::string::__init_copy_ctor_external(&v284, *(const std::string::value_type **)(v1 + 16), *(_QWORD *)(v1 + 24));
  else
    v284 = *(std::string *)(v1 + 16);
  memset(v282, 0, sizeof(v282));
  BambiCallOptions::BambiCallOptions((BambiCallOptions *)v282, (const BambiCallOptions *)(v4 + 40));
  bzero(&v249, 0x1248uLL);
  BambiEmergencyCallOptions::BambiEmergencyCallOptions(&v249, (const BambiEmergencyCallOptions *)(v4 + 392));
  v248 = 0;
  v247 = 0;
  v178 = (std::string *)(v4 + 5072);
  (*(void (**)(SipStack **__return_ptr))(**(_QWORD **)(v179[3] + 168) + 192))(&v247);
  memset(&v246, 0, sizeof(v246));
  if (*(char *)(v4 + 415) < 0)
    std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)(v4 + 392), *(_QWORD *)(v4 + 400));
  else
    v246 = *(std::string *)(v4 + 392);
  v245[2] = 257;
  v244[2] = 257;
  v241 = 0;
  v226 = 0u;
  memset(&v224[2], 0, 48);
  *(_QWORD *)&v226 = 0;
  v225 = 0;
  v224[8] = &off_1E78B82D8;
  v224[9] = &v225;
  v224[1] = &off_1E78D08F8;
  v224[0] = &off_1E78BFCE8;
  v237 = 0u;
  v238 = 0u;
  v239 = 0u;
  v227 = 0u;
  v228 = 0u;
  v229 = 0u;
  v230 = 0u;
  v231 = 0u;
  v232 = 0u;
  v233 = 0u;
  v234 = 0u;
  v235 = 0u;
  v236 = 0u;
  v240 = 0;
  v242 = &off_1E78B82D8;
  v244[1] = 0;
  v244[0] = 0;
  v243 = v244;
  v245[1] = 0;
  v245[0] = 0;
  v244[3] = &off_1E78B82D8;
  v244[4] = v245;
  WORD4(v226) = 257;
  if (v247)
  {
    v223 = 0x10000;
    BambiClient::bootstrap(*(_QWORD *)(v179[3] + 168), &v223);
    v6 = (const ImsPrefs *)SipStack::prefs(v247);
    BambiCallOptions::initializeFromPrefs((BambiCallOptions *)v282, v6);
    v253 = *(_BYTE *)(v3 + 557);
    v7 = *(_QWORD *)(v3 + 296);
    if (v7 != *(_QWORD *)(v3 + 304))
    {
      if (*(char *)(v7 + 23) < 0)
      {
        if (*(_QWORD *)(v7 + 8))
        {
LABEL_11:
          v8 = (const ImsPrefs *)SipStack::prefs(v247);
          SipStackConfig::initializeFromPrefs((SipStackConfig *)v274, v8, *(_BYTE *)(v3 + 556), 0, *(_BYTE *)(v3 + 609));
          std::string::operator=(&v277, *(const std::string **)(v3 + 296));
          v278 = *(_DWORD *)(v3 + 328);
          v275 = *(_BYTE *)(v3 + 712);
          std::string::operator=(v276, (const std::string *)(v3 + 616));
          if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v3 + 24)))
            v9 = 1;
          else
            v9 = 2;
          v279 = v9;
          v10 = (ImsPrefs *)SipStack::prefs(v247);
          EmergencyPreferredIdentityKey = (const ImsPrefsKeyEnum *)ImsPrefs::getEmergencyPreferredIdentityKey(v10);
          ImsPrefs::stringValue(v10, EmergencyPreferredIdentityKey, (std::string *)&__p);
          std::string::basic_string[abi:ne180100]<0>(&v287, "IMSI");
          v12 = BYTE7(v196);
          if ((SBYTE7(v196) & 0x80u) == 0)
            p_p = (const char *)&__p;
          else
            p_p = (const char *)__p;
          v14 = SHIBYTE(v287.__r_.__value_.__r.__words[2]);
          v15 = (void *)v287.__r_.__value_.__r.__words[0];
          if ((v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v16 = &v287;
          else
            v16 = (std::string *)v287.__r_.__value_.__r.__words[0];
          v17 = strcasecmp(p_p, (const char *)v16);
          if (v14 < 0)
          {
            operator delete(v15);
            if ((BYTE7(v196) & 0x80) == 0)
              goto LABEL_22;
          }
          else if ((v12 & 0x80) == 0)
          {
            goto LABEL_22;
          }
          operator delete((void *)__p);
LABEL_22:
          if (!v17)
          {
            if (SipUri::isValidUri((SipUri *)v280))
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "call");
              std::string::basic_string[abi:ne180100]<0>(&v287, (char *)&str_1_10);
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v18 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v287);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"anonymous preferred identity is ", 32);
              *(_BYTE *)(v18 + 17) = 0;
              (*(void (**)(_QWORD *, uint64_t))(v280[0] + 40))(v280, v18);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v18 + 17) = 0;
              if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v287.__r_.__value_.__l.__data_);
              if (SBYTE7(v196) < 0)
                operator delete((void *)__p);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "call");
              std::string::basic_string[abi:ne180100]<0>(&v287, (char *)&str_1_10);
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v21 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v287);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"No a valid anonymous preferred identity", 39);
              *(_BYTE *)(v21 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v21 + 17) = 0;
              if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v287.__r_.__value_.__l.__data_);
              if (SBYTE7(v196) < 0)
                operator delete((void *)__p);
              SipUri::clear((SipUri *)v280);
            }
          }
          if (*((char *)v247 + 4159) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p, *((const std::string::value_type **)v247 + 517), *((_QWORD *)v247 + 518));
          }
          else
          {
            __p = *(_OWORD *)((char *)v247 + 4136);
            *(_QWORD *)&v196 = *((_QWORD *)v247 + 519);
          }
          if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v252.__r_.__value_.__l.__data_);
          *(_OWORD *)&v252.__r_.__value_.__l.__data_ = __p;
          v252.__r_.__value_.__r.__words[2] = v196;
          memset(&__str, 0, sizeof(__str));
          SipStack::carrierIdentifier(v247, &v221);
          __p = 0uLL;
          *(_QWORD *)&v196 = 0;
          BambiPrefsManager::subscribers((BambiPrefsManager *)&v221, (uint64_t *)&__p);
          std::string::basic_string[abi:ne180100]<0>(&v287, "call");
          std::string::basic_string[abi:ne180100]<0>(&v286, (char *)&str_1_10);
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v22 = ImsLogger::debug(ims::_logger, (uint64_t)&v287, (uint64_t)&v286);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"found ", 6);
          *(_BYTE *)(v22 + 17) = 0;
          if ((_QWORD)__p == *((_QWORD *)&__p + 1))
          {
            std::string::basic_string[abi:ne180100]<0>(&v285, "NO");
          }
          else
          {
            v192.__r_.__value_.__r.__words[0] = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 4;
            ims::detail::to_string_impl<unsigned long,std::integral_constant<BOOL,false>>::operator()(&v285);
          }
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v22 + 32))(v22, &v285);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" subscriber(s) for ", 19);
          *(_BYTE *)(v22 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v22 + 32))(v22, &v221);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v22 + 17) = 0;
          if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v285.__r_.__value_.__l.__data_);
          if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v286.__r_.__value_.__l.__data_);
          if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v287.__r_.__value_.__l.__data_);
          v23 = (SipStack **)*((_QWORD *)&__p + 1);
          for (i = (SipStack **)__p; i != v23; i += 2)
          {
            if (*i)
            {
              SipStack::carrierIdentifier(*i, &v287);
              if ((v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v287.__r_.__value_.__r.__words[2]);
              else
                size = v287.__r_.__value_.__l.__size_;
              v26 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
              if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v26 = v221.__r_.__value_.__l.__size_;
              if (size != v26)
              {
                if ((*((_BYTE *)&v287.__r_.__value_.__s + 23) & 0x80) != 0)
                  operator delete(v287.__r_.__value_.__l.__data_);
                continue;
              }
              if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v27 = &v221;
              else
                v27 = (std::string *)v221.__r_.__value_.__r.__words[0];
              if ((*((_BYTE *)&v287.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                v32 = (void *)v287.__r_.__value_.__r.__words[0];
                v33 = memcmp(v287.__r_.__value_.__l.__data_, v27, v287.__r_.__value_.__l.__size_);
                operator delete(v32);
                if (v33)
                  continue;
              }
              else if (*((_BYTE *)&v287.__r_.__value_.__s + 23))
              {
                v28 = 0;
                do
                {
                  v29 = v287.__r_.__value_.__s.__data_[v28];
                  v30 = v27->__r_.__value_.__s.__data_[v28];
                }
                while (v29 == v30 && HIBYTE(v287.__r_.__value_.__r.__words[2]) - 1 != v28++);
                if (v29 != v30)
                  continue;
              }
              if (*((char *)*i + 1607) >= 0)
                v34 = (char *)*i + 1584;
              else
                v34 = (const char *)*((_QWORD *)*i + 198);
              if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v35 = &v277;
              else
                v35 = (std::string *)v277.__r_.__value_.__r.__words[0];
              if (!strcasecmp(v34, (const char *)v35))
              {
                std::string::basic_string[abi:ne180100]<0>(&v287, "call");
                std::string::basic_string[abi:ne180100]<0>(&v286, (char *)&str_1_10);
                pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                v162 = ImsLogger::debug(ims::_logger, (uint64_t)&v287, (uint64_t)&v286);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v162 + 8), (uint64_t)"interface ", 10);
                *(_BYTE *)(v162 + 17) = 0;
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v162 + 32))(v162, &v277);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v162 + 8), (uint64_t)" used by existing stack ", 24);
                *(_BYTE *)(v162 + 17) = 0;
                v163 = *i;
                if (*((char *)*i + 4159) < 0)
                  std::string::__init_copy_ctor_external(&v285, *((const std::string::value_type **)v163 + 517), *((_QWORD *)v163 + 518));
                else
                  v285 = *(std::string *)((char *)v163 + 4136);
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v162 + 32))(v162, &v285);
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v162 + 64))(v162, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v162 + 17) = 0;
                if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v285.__r_.__value_.__l.__data_);
                if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v286.__r_.__value_.__l.__data_);
                if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v287.__r_.__value_.__l.__data_);
                v176 = *i;
                if (*((char *)*i + 4159) < 0)
                  std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v176 + 517), *((_QWORD *)v176 + 518));
                else
                  __str = *(std::string *)((char *)v176 + 4136);
                v36 = (const std::string *)(v3 + 24);
                goto LABEL_89;
              }
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&str_1_10);
          v36 = (const std::string *)(v3 + 24);
LABEL_89:
          v287.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v287);
          if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v221.__r_.__value_.__l.__data_);
          v37 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v37 = __str.__r_.__value_.__l.__size_;
          if (v37)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "call");
            std::string::basic_string[abi:ne180100]<0>(&v287, (char *)&str_1_10);
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v38 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v287);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"Use normal stack for emergency", 30);
            *(_BYTE *)(v38 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v38 + 17) = 0;
            if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v287.__r_.__value_.__l.__data_);
            if (SBYTE7(v196) < 0)
              operator delete((void *)__p);
            std::string::operator=(&v252, &__str);
          }
          v39 = (const ImsPrefs *)SipStack::prefs(v247);
          SipRegistrationConfig::initializeFromPrefs(&v254, v39);
          v41 = *(std::string **)(v3 + 504);
          v40 = *(std::string **)(v3 + 512);
          while (v41 != v40)
          {
            v220 = 0;
            v218 = 0u;
            v219 = 0u;
            v216 = 0u;
            v217 = 0u;
            v214 = 0u;
            v215 = 0u;
            v212 = 0u;
            v213 = 0u;
            v210 = 0u;
            v211 = 0u;
            v208 = 0u;
            v209 = 0u;
            v206 = 0u;
            v207 = 0u;
            v204 = 0u;
            v205 = 0u;
            v202 = 0u;
            v203 = 0u;
            v200 = 0u;
            v201 = 0u;
            v198 = 0u;
            v199 = 0u;
            v196 = 0u;
            v197 = 0u;
            __p = 0u;
            SipUri::SipUri((uint64_t)&__p, v41);
            if (SipUri::isValidUri((SipUri *)&__p))
            {
              end = v254.__end_;
              if (v254.__end_ >= v254.__end_cap_.__value_)
              {
                v43 = (std::string *)std::vector<SipUri>::__push_back_slow_path<SipUri const&>((uint64_t *)&v254, (const SipUri *)&__p);
              }
              else
              {
                SipUri::SipUri((SipUri *)v254.__end_, (const SipUri *)&__p);
                v43 = end + 17;
              }
              v254.__end_ = v43;
            }
            SipUri::~SipUri((SipUri *)&__p);
            ++v41;
          }
          memset(&v221, 0, sizeof(v221));
          v44 = (ImsPrefs *)SipStack::prefs(v247);
          EmergencyRegistrationRequestUriKey = (void **)ImsPrefs::getEmergencyRegistrationRequestUriKey(v44);
          ImsPrefs::stringValue(v44, EmergencyRegistrationRequestUriKey);
          v46 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
          if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v46 = v221.__r_.__value_.__l.__size_;
          if (v46 && (SipUri::fromString((uint64_t)&v258, &v221) & 1) == 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "call");
            std::string::basic_string[abi:ne180100]<0>(&v287, (char *)&str_1_10);
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v47 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v287);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"Invalid emergency registration request URI: ", 44);
            *(_BYTE *)(v47 + 17) = 0;
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v47 + 32))(v47, &v221);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v47 + 17) = 0;
            if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v287.__r_.__value_.__l.__data_);
            if (SBYTE7(v196) < 0)
              operator delete((void *)__p);
          }
          std::string::operator=(&v259, (const std::string *)(v3 + 456));
          std::string::operator=(&v261, (const std::string *)(v3 + 432));
          v48 = (ImsPrefs *)SipStack::prefs(v247);
          RegistrationExpirationSecondsKey = (void **)ImsPrefs::getRegistrationExpirationSecondsKey(v48);
          v50 = ImsPrefs::prefWithKey(v48, RegistrationExpirationSecondsKey);
          if (v50)
            v51 = (*(uint64_t (**)(void *))(*(_QWORD *)v50 + 56))(v50);
          else
            v51 = *((_DWORD *)RegistrationExpirationSecondsKey + 15);
          v256 = v51;
          std::string::operator=(&v262, v36);
          std::string::operator=(&v263, (const std::string *)(v3 + 48));
          v264 = *(_OWORD *)(v3 + 72);
          v265 = *(_BYTE *)(v3 + 88);
          std::string::operator=(&v266, (const std::string *)(v3 + 96));
          std::string::operator=(&v267, (const std::string *)(v3 + 120));
          v268 = *(_OWORD *)(v3 + 144);
          v269 = *(_BYTE *)(v3 + 160);
          std::string::operator=(&v270, (const std::string *)(v3 + 168));
          std::string::operator=(&v271, (const std::string *)(v3 + 192));
          v272 = *(_OWORD *)(v3 + 216);
          v273 = *(_BYTE *)(v3 + 232);
          SipStack::setEmergencyAni(v247, (const ims::AccessNetworks *)v36);
          v193 = 0;
          v194 = 0;
          SipStack::carrierIdentifier(v247, &v192);
          __p = 0uLL;
          *(_QWORD *)&v196 = 0;
          BambiPrefsManager::subscribers((BambiPrefsManager *)&v192, (uint64_t *)&__p);
          for (j = (_QWORD *)__p; ; j += 2)
          {
            if (j == *((_QWORD **)&__p + 1))
            {
              v53 = 0;
              v193 = 0;
              v194 = 0;
              goto LABEL_135;
            }
            if (!*(_BYTE *)(*j + 176))
              break;
          }
          std::string::basic_string[abi:ne180100]<0>(&v287, "call");
          std::string::basic_string[abi:ne180100]<0>(&v286, (char *)&str_1_10);
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v54 = ImsLogger::debug(ims::_logger, (uint64_t)&v287, (uint64_t)&v286);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"using companion stack ", 22);
          *(_BYTE *)(v54 + 17) = 0;
          v55 = *j;
          if (*(char *)(*j + 4159) < 0)
            std::string::__init_copy_ctor_external(&v285, *(const std::string::value_type **)(v55 + 4136), *(_QWORD *)(v55 + 4144));
          else
            v285 = *(std::string *)(v55 + 4136);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v54 + 32))(v54, &v285);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v54 + 17) = 0;
          if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v285.__r_.__value_.__l.__data_);
          if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v286.__r_.__value_.__l.__data_);
          if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v287.__r_.__value_.__l.__data_);
          v53 = *j;
          v193 = *j;
          v56 = (std::__shared_weak_count *)j[1];
          v194 = v56;
          if (v56)
          {
            p_shared_owners = (unint64_t *)&v56->__shared_owners_;
            do
              v58 = __ldxr(p_shared_owners);
            while (__stxr(v58 + 1, p_shared_owners));
          }
LABEL_135:
          v287.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v287);
          if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v192.__r_.__value_.__l.__data_);
          memset(&v287, 0, sizeof(v287));
          if (v53)
            v59 = v53 + 3352;
          else
            v59 = v3;
          if (*(char *)(v59 + 431) < 0)
            std::string::__init_copy_ctor_external(&v287, *(const std::string::value_type **)(v59 + 408), *(_QWORD *)(v59 + 416));
          else
            v287 = *(std::string *)(v59 + 408);
          memset(&v286, 0, sizeof(v286));
          if (*(char *)(v59 + 407) < 0)
            std::string::__init_copy_ctor_external(&v286, *(const std::string::value_type **)(v59 + 384), *(_QWORD *)(v59 + 392));
          else
            v286 = *(std::string *)(v59 + 384);
          v60 = *(_DWORD *)(v3 + 552);
          std::string::basic_string[abi:ne180100]<0>(&__p, "call");
          std::string::basic_string[abi:ne180100]<0>(&v285, (char *)&str_1_10);
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v61 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v285);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v61 + 8), (uint64_t)"picking emergency IMPU ", 23);
          *(_BYTE *)(v61 + 17) = 0;
          if (v60 == 1)
            v62 = "USIM";
          else
            v62 = "ISIM";
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v61 + 8), (uint64_t)v62, 4);
          *(_BYTE *)(v61 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v61 + 8), (uint64_t)" from list: ", 12);
          *(_BYTE *)(v61 + 17) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v191, ",");
          ims::join<std::__wrap_iter<std::string const*>>(*(_QWORD *)(v3 + 480), *(_QWORD *)(v3 + 488), (uint64_t)&v191, &v192);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v61 + 32))(v61, &v192);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v61 + 17) = 0;
          if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v192.__r_.__value_.__l.__data_);
          if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v191.__r_.__value_.__l.__data_);
          if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v285.__r_.__value_.__l.__data_);
          if (SBYTE7(v196) < 0)
            operator delete((void *)__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "call");
          std::string::basic_string[abi:ne180100]<0>(&v285, (char *)&str_1_10);
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v63 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v285);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v63 + 8), (uint64_t)"IMPU MDN: ", 10);
          *(_BYTE *)(v63 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v63 + 32))(v63, &v286);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v63 + 17) = 0;
          if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v285.__r_.__value_.__l.__data_);
          if (SBYTE7(v196) < 0)
            operator delete((void *)__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "call");
          std::string::basic_string[abi:ne180100]<0>(&v285, (char *)&str_1_10);
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v64 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v285);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)"IMPU IMSI: ", 11);
          *(_BYTE *)(v64 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v64 + 32))(v64, &v287);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v64 + 17) = 0;
          if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v285.__r_.__value_.__l.__data_);
          if (SBYTE7(v196) < 0)
            operator delete((void *)__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "call");
          std::string::basic_string[abi:ne180100]<0>(&v285, (char *)&str_1_10);
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v65 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v285);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v65 + 8), (uint64_t)"IMPU Domain: ", 13);
          *(_BYTE *)(v65 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 32))(v65, v3 + 456);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v65 + 17) = 0;
          if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v285.__r_.__value_.__l.__data_);
          if (SBYTE7(v196) < 0)
            operator delete((void *)__p);
          memset(&v285, 0, sizeof(v285));
          SipStack::carrierIdentifier(v247, (std::string *)&__p);
          v67 = (uint64_t **)BambiPrefsManager::instance(v66);
          v192.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          v68 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v67, (void **)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v192);
          SipImpuRank::preferredImpu(v68 + 32, (uint64_t *)(v3 + 480), (unsigned __int8 *)(v3 + 456), (unsigned __int8 *)&v287, (uint64_t)&v286, &v285);
          if (SBYTE7(v196) < 0)
            operator delete((void *)__p);
          if (v60 == 1 && v53)
          {
            v69 = (ImsPrefs *)SipStack::prefs(v247);
            UseNormalIdentityForEmergencyUSIMKey = (void **)ImsPrefs::getUseNormalIdentityForEmergencyUSIMKey(v69);
            v71 = ImsPrefs::prefWithKey(v69, UseNormalIdentityForEmergencyUSIMKey);
            if (v71)
            {
              if (!(*(unsigned int (**)(void *))(*(_QWORD *)v71 + 40))(v71))
                goto LABEL_187;
            }
            else if (!*((_BYTE *)UseNormalIdentityForEmergencyUSIMKey + 57))
            {
              goto LABEL_187;
            }
            v220 = 0;
            v218 = 0u;
            v219 = 0u;
            v216 = 0u;
            v217 = 0u;
            v214 = 0u;
            v215 = 0u;
            v212 = 0u;
            v213 = 0u;
            v210 = 0u;
            v211 = 0u;
            v208 = 0u;
            v209 = 0u;
            v206 = 0u;
            v207 = 0u;
            v204 = 0u;
            v205 = 0u;
            v202 = 0u;
            v203 = 0u;
            v200 = 0u;
            v201 = 0u;
            v198 = 0u;
            v199 = 0u;
            v196 = 0u;
            v197 = 0u;
            __p = 0u;
            v72 = (const SipUri *)SipUserAgent::publicUri(*(SipUserAgent **)(v53 + 144));
            SipUri::SipUri((SipUri *)&__p, v72);
            if (SipUri::isValidUri((SipUri *)&__p) && !SipUri::isAnonymousUri((SipUri *)&__p))
            {
              std::string::basic_string[abi:ne180100]<0>(&v192, "call");
              std::string::basic_string[abi:ne180100]<0>(&v191, (char *)&str_1_10);
              v73 = ims::debug((uint64_t)&v192, (uint64_t)&v191);
              v74 = ImsOutStream::operator<<(v73, "Ignoring preferred IMPU ");
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v74 + 32))(v74, &v285);
              v75 = (_BYTE *)ImsOutStream::operator<<(v74, " in favor of previously registered public identity ");
              (*(void (**)(__int128 *, _BYTE *))(__p + 40))(&__p, v75);
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v75 + 64))(v75, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v75[17] = 0;
              if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v191.__r_.__value_.__l.__data_);
              if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v192.__r_.__value_.__l.__data_);
              SipUri::asString((uint64_t)&__p, 2, &v192);
              if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v285.__r_.__value_.__l.__data_);
              v285 = v192;
            }
            SipUri::~SipUri((SipUri *)&__p);
          }
LABEL_187:
          IPTelephonyManager::updateContactUser((unsigned __int16 *)&v260, (uint64_t)&v286, (uint64_t)&v287, (std::string *)&__p);
          if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v260.__r_.__value_.__l.__data_);
          *(_OWORD *)&v260.__r_.__value_.__l.__data_ = __p;
          v260.__r_.__value_.__r.__words[2] = v196;
          if (v53)
          {
            v76 = *(_QWORD *)(v53 + 144);
            if (v76)
            {
              v77 = *(_QWORD *)(v76 + 248);
              v78 = *(std::__shared_weak_count **)(v76 + 256);
              if (v78)
              {
                v79 = (unint64_t *)&v78->__shared_owners_;
                do
                  v80 = __ldxr(v79);
                while (__stxr(v80 + 1, v79));
                do
                  v81 = __ldaxr(v79);
                while (__stlxr(v81 - 1, v79));
                if (!v81)
                {
                  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              if (v77)
              {
                v82 = *(_QWORD *)(v193 + 144);
                v83 = *(_QWORD *)(v82 + 248);
                v84 = *(std::__shared_weak_count **)(v82 + 256);
                if (v84)
                {
                  v85 = (unint64_t *)&v84->__shared_owners_;
                  do
                    v86 = __ldxr(v85);
                  while (__stxr(v86 + 1, v85));
                  do
                    v87 = __ldaxr(v85);
                  while (__stlxr(v87 - 1, v85));
                  if (!v87)
                  {
                    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                    std::__shared_weak_count::__release_weak(v84);
                  }
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, "call");
                std::string::basic_string[abi:ne180100]<0>(&v192, (char *)&str_1_10);
                pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                v88 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v192);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v88 + 8), (uint64_t)"Using companion stack contact user ", 35);
                *(_BYTE *)(v88 + 17) = 0;
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v88 + 32))(v88, v83 + 2024);
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v88 + 64))(v88, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v88 + 17) = 0;
                if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v192.__r_.__value_.__l.__data_);
                if (SBYTE7(v196) < 0)
                  operator delete((void *)__p);
                std::string::operator=(&v260, (const std::string *)(v83 + 2024));
              }
            }
          }
          v89 = (ImsPrefs *)SipStack::prefs(v247);
          RegisterSmsOnEmergencyPdnKey = (void **)ImsPrefs::getRegisterSmsOnEmergencyPdnKey(v89);
          v91 = ImsPrefs::prefWithKey(v89, RegisterSmsOnEmergencyPdnKey);
          if (v91)
            v92 = (*(uint64_t (**)(void *))(*(_QWORD *)v91 + 40))(v91);
          else
            v92 = *((_BYTE *)RegisterSmsOnEmergencyPdnKey + 57) != 0;
          if (v92)
            v93 = 5;
          else
            v93 = 1;
          v255 = v93;
          SipUri::fromString((uint64_t)&v257, &v285);
          std::string::operator=(&v281, (const std::string *)v177);
          __p = 0uLL;
          *(_QWORD *)&v196 = 0;
          SipStack::carrierIdentifier(v247, &v192);
          v95 = (uint64_t **)BambiPrefsManager::instance(v94);
          v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
          v96 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v95, (void **)&v192.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v191);
          BambiEmergencyUrnMap::urnForNumber((uint64_t)(v96 + 13), v177, (uint64_t)&v246, (char *)&__p);
          if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v192.__r_.__value_.__l.__data_);
          v97 = BYTE7(v196);
          if ((SBYTE7(v196) & 0x80u) == 0)
            v98 = BYTE7(v196);
          else
            v98 = *((_QWORD *)&__p + 1);
          if (v98)
          {
            v99 = *(unsigned __int8 *)(v177 + 23);
            v100 = (char)v99;
            if ((v99 & 0x80u) != 0)
              v99 = *(_QWORD *)(v177 + 8);
            if (v98 == v99)
            {
              if (v100 >= 0)
                v101 = (unsigned __int8 *)v177;
              else
                v101 = *(unsigned __int8 **)v177;
              if ((BYTE7(v196) & 0x80) != 0)
              {
                if (!memcmp((const void *)__p, v101, *((size_t *)&__p + 1)))
                  goto LABEL_260;
              }
              else
              {
                if (!BYTE7(v196))
                  goto LABEL_260;
                v102 = &__p;
                while (*(unsigned __int8 *)v102 == *v101)
                {
                  v102 = (__int128 *)((char *)v102 + 1);
                  ++v101;
                  if (!--v97)
                    goto LABEL_260;
                }
              }
            }
            std::string::basic_string[abi:ne180100]<0>(&v192, "test");
            if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v103 = &v246;
            else
              v103 = (std::string *)v246.__r_.__value_.__r.__words[0];
            v104 = SHIBYTE(v192.__r_.__value_.__r.__words[2]);
            v105 = (void *)v192.__r_.__value_.__r.__words[0];
            if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v106 = &v192;
            else
              v106 = (std::string *)v192.__r_.__value_.__r.__words[0];
            v107 = strcasecmp((const char *)v103, (const char *)v106);
            if (v104 < 0)
              operator delete(v105);
            v108 = v179;
            if (v107)
            {
              std::string::basic_string[abi:ne180100]<0>(&v192, "call");
              std::string::basic_string[abi:ne180100]<0>(&v191, (char *)&str_1_10);
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v109 = ImsLogger::debug(ims::_logger, (uint64_t)&v192, (uint64_t)&v191);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)"mapped ", 7);
              *(_BYTE *)(v109 + 17) = 0;
              LoggableString::LoggableString(&v190, (const std::string *)v177);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v109 + 40))(v109, &v190);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)" to ", 4);
              *(_BYTE *)(v109 + 17) = 0;
              LoggableString::LoggableString(&v189, (const std::string *)&__p);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v109 + 40))(v109, &v189);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v109 + 64))(v109, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v109 + 17) = 0;
              if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v189.__r_.__value_.__l.__data_);
              if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v190.__r_.__value_.__l.__data_);
              if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v191.__r_.__value_.__l.__data_);
              if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v192.__r_.__value_.__l.__data_);
              if ((SipUri::fromString((uint64_t)v224, (std::string *)&__p) & 1) == 0)
              {
                std::string::basic_string[abi:ne180100]<0>(&v192, "call");
                std::string::basic_string[abi:ne180100]<0>(&v191, (char *)&str_1_10);
                pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                v110 = ImsLogger::error(ims::_logger, (uint64_t)&v192, (uint64_t)&v191);
                LoggableString::LoggableString(&v190, (const std::string *)v177);
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v110 + 40))(v110, &v190);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v110 + 8), (uint64_t)" mapped to invalid emergency URN ", 33);
                *(_BYTE *)(v110 + 17) = 0;
                LoggableString::LoggableString(&v189, (const std::string *)&__p);
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v110 + 40))(v110, &v189);
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v110 + 64))(v110, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v110 + 17) = 0;
                if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v189.__r_.__value_.__l.__data_);
                if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v190.__r_.__value_.__l.__data_);
                if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v191.__r_.__value_.__l.__data_);
                if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v192.__r_.__value_.__l.__data_);
                goto LABEL_316;
              }
LABEL_296:
              memset(&v192, 0, sizeof(v192));
              if (BambiClient::unconfirmedCalls(*(_QWORD *)(v108[3] + 168), &v192.__r_.__value_.__l.__data_))
              {
                std::string::basic_string[abi:ne180100]<0>(&v191, "call");
                std::string::basic_string[abi:ne180100]<0>(&v190, (char *)&str_1_10);
                pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                v132 = ImsLogger::debug(ims::_logger, (uint64_t)&v191, (uint64_t)&v190);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v132 + 8), (uint64_t)"Preempting unconfirmed calls for outgoing emergency call", 56);
                *(_BYTE *)(v132 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v132 + 64))(v132, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v132 + 17) = 0;
                if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v190.__r_.__value_.__l.__data_);
                if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v191.__r_.__value_.__l.__data_);
                v134 = v192.__r_.__value_.__l.__size_;
                for (k = v192.__r_.__value_.__r.__words[0]; k != v134; k += 16)
                {
                  v136 = *(BambiCall **)k;
                  v135 = *(std::__shared_weak_count **)(k + 8);
                  v190.__r_.__value_.__r.__words[0] = *(_QWORD *)k;
                  v190.__r_.__value_.__l.__size_ = (std::string::size_type)v135;
                  if (v135)
                  {
                    v137 = (unint64_t *)&v135->__shared_owners_;
                    do
                      v138 = __ldxr(v137);
                    while (__stxr(v138 + 1, v137));
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v191, "OnEmergencyCall");
                  BambiCall::endWithReason(v136, (uint64_t)&v191, (uint64_t)v186);
                  ImsResult::~ImsResult((ImsResult *)v186);
                  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v191.__r_.__value_.__l.__data_);
                  if (v135)
                  {
                    v139 = (unint64_t *)&v135->__shared_owners_;
                    do
                      v140 = __ldaxr(v139);
                    while (__stlxr(v140 - 1, v139));
                    if (!v140)
                    {
                      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                      std::__shared_weak_count::__release_weak(v135);
                    }
                  }
                }
              }
              v141 = (IMSCallInfo *)operator new();
              v184 = off_1E78C0288;
              if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v185, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
              else
                v185 = v284;
              v143 = *(_QWORD *)(v179[3] + 168);
              v182 = 0;
              v183 = 0;
              IMSCallInfo::IMSCallInfo((uint64_t)v141, (uint64_t)v179, (uint64_t)&v184, v178, v143, &v182);
              v144 = v183;
              if (v183)
              {
                v145 = (unint64_t *)&v183->__shared_owners_;
                do
                  v146 = __ldaxr(v145);
                while (__stlxr(v146 - 1, v145));
                if (!v146)
                {
                  ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                  std::__shared_weak_count::__release_weak(v144);
                }
              }
              v184 = off_1E78C0288;
              if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v185.__r_.__value_.__l.__data_);
              v147 = SipStack::prefs(v247);
              std::string::basic_string[abi:ne180100]<0>(&v191, "MNC");
              ImsPrefs::updateRuntimeVar(v147, (uint64_t)&v191, v3 + 360, 1);
              if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v191.__r_.__value_.__l.__data_);
              v148 = SipStack::prefs(v247);
              std::string::basic_string[abi:ne180100]<0>(&v191, "MCC");
              ImsPrefs::updateRuntimeVar(v148, (uint64_t)&v191, v3 + 336, 1);
              if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v191.__r_.__value_.__l.__data_);
              v149 = SipStack::prefs(v247);
              std::string::basic_string[abi:ne180100]<0>(&v191, "MDN");
              ImsPrefs::updateRuntimeVar(v149, (uint64_t)&v191, v3 + 384, 1);
              if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v191.__r_.__value_.__l.__data_);
              v150 = SipStack::prefs(v247);
              std::string::basic_string[abi:ne180100]<0>(&v191, "DEVICE_ID");
              ImsPrefs::updateRuntimeVar(v150, (uint64_t)&v191, v3 + 616, 1);
              if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v191.__r_.__value_.__l.__data_);
              v151 = SipStack::prefs(v247);
              std::string::basic_string[abi:ne180100]<0>(&v191, "DEVICE_REF_ID");
              ImsPrefs::updateRuntimeVar(v151, (uint64_t)&v191, v3 + 640, 1);
              if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v191.__r_.__value_.__l.__data_);
              std::string::operator=((std::string *)((char *)v247 + 4088), (const std::string *)(v3 + 248));
              std::string::operator=((std::string *)((char *)v247 + 4112), (const std::string *)(v3 + 272));
              SipStack::setSimConfig(v247, (SipStack *)v3, v152);
              v154 = (IMSCallInfo **)v179[6];
              v153 = v179[7];
              if ((unint64_t)v154 >= v153)
              {
                v156 = v179[5];
                v157 = ((uint64_t)v154 - v156) >> 3;
                if ((unint64_t)(v157 + 1) >> 61)
                  std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
                v158 = v153 - v156;
                v159 = v158 >> 2;
                if (v158 >> 2 <= (unint64_t)(v157 + 1))
                  v159 = v157 + 1;
                if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8)
                  v160 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v160 = v159;
                if (v160)
                  v160 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v160);
                else
                  v161 = 0;
                v164 = (IMSCallInfo **)(v160 + 8 * v157);
                v165 = v160 + 8 * v161;
                *v164 = v141;
                v155 = v164 + 1;
                v167 = (char *)v179[5];
                v166 = (char *)v179[6];
                if (v166 != v167)
                {
                  do
                  {
                    v168 = (IMSCallInfo *)*((_QWORD *)v166 - 1);
                    v166 -= 8;
                    *--v164 = v168;
                  }
                  while (v166 != v167);
                  v166 = (char *)v179[5];
                }
                v179[5] = v164;
                v179[6] = v155;
                v179[7] = v165;
                if (v166)
                  operator delete(v166);
              }
              else
              {
                *v154 = v141;
                v155 = v154 + 1;
              }
              v179[6] = v155;
              std::string::basic_string[abi:ne180100]<0>(&v191, "audit");
              std::string::basic_string[abi:ne180100]<0>(&v190, (char *)&str_1_10);
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v169 = ImsLogger::debug(ims::_logger, (uint64_t)&v191, (uint64_t)&v190);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v169 + 8), (uint64_t)"Created outgoing emergency call handle for ", 43);
              *(_BYTE *)(v169 + 17) = 0;
              ((void (*)(void (***)(ImsUuid *__hidden), uint64_t))v283[2])(&v283, v169);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v169 + 8), (uint64_t)" on stack ", 10);
              *(_BYTE *)(v169 + 17) = 0;
              if (*((char *)v247 + 4159) < 0)
              {
                std::string::__init_copy_ctor_external(&v189, *((const std::string::value_type **)v247 + 517), *((_QWORD *)v247 + 518));
              }
              else
              {
                *(_OWORD *)&v189.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v247 + 4136);
                v189.__r_.__value_.__r.__words[2] = *((_QWORD *)v247 + 519);
              }
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v169 + 32))(v169, &v189);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v169 + 64))(v169, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v169 + 17) = 0;
              if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v189.__r_.__value_.__l.__data_);
              if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v190.__r_.__value_.__l.__data_);
              if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v191.__r_.__value_.__l.__data_);
              if ((IMSCallInfo::startCall(v141, (const SipUri *)v224, (const BambiCallOptions *)v282, (const BambiEmergencyCallOptions *)&v249) & 1) == 0)
              {
                (*(void (**)(_QWORD *, IMSCallInfo *))(*v179 + 240))(v179, v141);
                v180 = off_1E78C0288;
                if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v181, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
                else
                  v181 = v284;
                ims::CFString::asString(CFSTR("kCallDisconnectionReasonUnknownError"), (const void *)0x8000100, &v191);
                IMSCallManager::sendCallDisconnectionNotification((uint64_t)v179, (uint64_t)&v180, (void **)&v178->__r_.__value_.__l.__data_, &v191, 1);
                if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v191.__r_.__value_.__l.__data_);
                v180 = off_1E78C0288;
                if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v181.__r_.__value_.__l.__data_);
              }
              v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
              std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
              goto LABEL_374;
            }
          }
LABEL_260:
          memset(&v192, 0, sizeof(v192));
          v111 = (ImsPrefs *)SipStack::prefs(v247);
          v112 = (void **)ImsPrefs::getCallTransferRequestUriKey(v111);
          ImsPrefs::stringValue(v111, v112);
          v113 = (ImsPrefs *)SipStack::prefs(v247);
          v114 = (void **)ImsPrefs::getCallTransferDialNumberKey(v113);
          ImsPrefs::stringValue(v113, v114);
          v115 = *(unsigned __int8 *)(v177 + 23);
          if ((v115 & 0x80u) == 0)
            v116 = *(unsigned __int8 *)(v177 + 23);
          else
            v116 = *(_QWORD *)(v177 + 8);
          v117 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
          v118 = SHIBYTE(v191.__r_.__value_.__r.__words[2]);
          if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v117 = v191.__r_.__value_.__l.__size_;
          if (v116 == v117)
          {
            v119 = (void *)v191.__r_.__value_.__r.__words[0];
            if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v120 = &v191;
            else
              v120 = (std::string *)v191.__r_.__value_.__r.__words[0];
            if ((v115 & 0x80) == 0)
            {
              if (*(_BYTE *)(v177 + 23))
              {
                v121 = (unsigned __int8 *)v177;
                while (*v121 == v120->__r_.__value_.__s.__data_[0])
                {
                  ++v121;
                  v120 = (std::string *)((char *)v120 + 1);
                  if (!--v115)
                    goto LABEL_278;
                }
                goto LABEL_276;
              }
LABEL_278:
              if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v122 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
              else
                v122 = v192.__r_.__value_.__l.__size_;
              if (v118 < 0)
                operator delete(v119);
              if (v122)
              {
                OutgoingUri = SipUri::fromString((uint64_t)v224, &v192);
                memset(&v191, 0, sizeof(v191));
                v124 = (ImsPrefs *)SipStack::prefs(v247);
                v125 = (void **)ImsPrefs::getCallTransferToUriKey(v124);
                ImsPrefs::stringValue(v124, v125);
                std::string::operator=((std::string *)&v282[11], &v191);
                v108 = v179;
                if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v191.__r_.__value_.__l.__data_);
                goto LABEL_294;
              }
LABEL_286:
              v108 = v179;
              v126 = v179[3];
              v187 = v247;
              v188 = v248;
              if (v248)
              {
                v127 = (unint64_t *)&v248->__shared_owners_;
                do
                  v128 = __ldxr(v127);
                while (__stxr(v128 + 1, v127));
              }
              OutgoingUri = IPTelephonyManager::makeOutgoingUri(v126, &v187, (std::string *)v177, (SipUri *)v224);
              v129 = v188;
              if (v188)
              {
                v130 = (unint64_t *)&v188->__shared_owners_;
                do
                  v131 = __ldaxr(v130);
                while (__stlxr(v131 - 1, v130));
                if (!v131)
                {
                  ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                  std::__shared_weak_count::__release_weak(v129);
                }
              }
LABEL_294:
              if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v192.__r_.__value_.__l.__data_);
                if ((OutgoingUri & 1) != 0)
                  goto LABEL_296;
              }
              else if ((OutgoingUri & 1) != 0)
              {
                goto LABEL_296;
              }
LABEL_316:
              std::string::basic_string[abi:ne180100]<0>(&v192, "call");
              std::string::basic_string[abi:ne180100]<0>(&v191, (char *)&str_1_10);
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v142 = ImsLogger::error(ims::_logger, (uint64_t)&v192, (uint64_t)&v191);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v142 + 8), (uint64_t)"IMSCallManager: unable to determine destination URI", 51);
              *(_BYTE *)(v142 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v142 + 64))(v142, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v142 + 17) = 0;
              if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v191.__r_.__value_.__l.__data_);
              if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v192.__r_.__value_.__l.__data_);
LABEL_374:
              if (SBYTE7(v196) < 0)
                operator delete((void *)__p);
              if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v285.__r_.__value_.__l.__data_);
              if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v286.__r_.__value_.__l.__data_);
              if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v287.__r_.__value_.__l.__data_);
              v170 = v194;
              if (v194)
              {
                v171 = (unint64_t *)&v194->__shared_owners_;
                do
                  v172 = __ldaxr(v171);
                while (__stlxr(v172 - 1, v171));
                if (!v172)
                {
                  ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                  std::__shared_weak_count::__release_weak(v170);
                }
              }
              if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v221.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              {
                v20 = (void *)__str.__r_.__value_.__r.__words[0];
                goto LABEL_391;
              }
              goto LABEL_392;
            }
            if (!memcmp(*(const void **)v177, v120, *(_QWORD *)(v177 + 8)))
              goto LABEL_278;
          }
LABEL_276:
          if (v118 < 0)
            operator delete(v191.__r_.__value_.__l.__data_);
          goto LABEL_286;
        }
      }
      else if (*(_BYTE *)(v7 + 23))
      {
        goto LABEL_11;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v287, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v19 = (_BYTE *)ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v287);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v19 + 1), (uint64_t)"No emergency interface specified for emergency call", 51);
    v19[17] = 0;
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v287, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v19 = (_BYTE *)ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v287);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v19 + 1), (uint64_t)"No sip stack ", 13);
    v19[17] = 0;
    (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v19 + 32))(v19, v178);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  v19[17] = 0;
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v287.__r_.__value_.__l.__data_);
  if (SBYTE7(v196) < 0)
  {
    v20 = (void *)__p;
LABEL_391:
    operator delete(v20);
  }
LABEL_392:
  SipUri::~SipUri((SipUri *)v224);
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v246.__r_.__value_.__l.__data_);
  v173 = v248;
  if (v248)
  {
    v174 = (unint64_t *)&v248->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v281.__r_.__value_.__l.__data_);
  SipUri::~SipUri((SipUri *)v280);
  SipStackConfig::~SipStackConfig(v274);
  SipRegistrationConfig::~SipRegistrationConfig((void **)&v254.__begin_);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  if (v251 < 0)
    operator delete(v250);
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  BambiCallOptions::~BambiCallOptions(v282);
  v283 = off_1E78C0288;
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v284.__r_.__value_.__l.__data_);
}

void sub_1BEEB656C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  uint64_t v51;

  *(_QWORD *)(v51 - 128) = &a51;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 128));
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  SipUri::~SipUri((SipUri *)&STACK[0x328]);
  if (SLOBYTE(STACK[0x4D7]) < 0)
    operator delete((void *)STACK[0x4C0]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4D8]);
  BambiEmergencyCallOptions::~BambiEmergencyCallOptions((void **)&STACK[0x4E8]);
  BambiCallOptions::~BambiCallOptions((void **)&STACK[0x1730]);
  *(_QWORD *)(v51 - 224) = off_1E78C0288;
  if (*(char *)(v51 - 193) < 0)
    operator delete(*(void **)(v51 - 216));
  _Unwind_Resume(a1);
}

void IMSCallManager::endLegacyCall(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string::value_type *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  char v20;
  void *__p[2];
  char v22;
  std::string v23;

  std::string::basic_string[abi:ne180100]<0>(&v23, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v23, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Doing HANG UP to call Id = ", 27);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v22 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  memset(&v23, 0, sizeof(v23));
  std::string::basic_string[abi:ne180100]<0>(&v23, "UserTriggered");
  switch(*a3)
  {
    case 1:
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        v23.__r_.__value_.__l.__size_ = 12;
        v7 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v23.__r_.__value_.__s + 23) = 12;
        v7 = &v23;
      }
      qmemcpy(v7, "DoNotDisturb", 12);
      v13 = &v7->__r_.__value_.__s.__data_[12];
      goto LABEL_30;
    case 2:
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        v23.__r_.__value_.__l.__size_ = 19;
        v8 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v23.__r_.__value_.__s + 23) = 19;
        v8 = &v23;
      }
      qmemcpy(v8, "CallWaitingDisabled", 19);
      v13 = &v8->__r_.__value_.__s.__data_[19];
      goto LABEL_30;
    case 3:
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        v23.__r_.__value_.__l.__size_ = 5;
        v9 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v23.__r_.__value_.__s + 23) = 5;
        v9 = &v23;
      }
      qmemcpy(v9, "SRVCC", 5);
      v13 = &v9->__r_.__value_.__s.__data_[5];
      goto LABEL_30;
    case 4:
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        v23.__r_.__value_.__l.__size_ = 16;
        v10 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v23.__r_.__value_.__s + 23) = 16;
        v10 = &v23;
      }
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)"DeferToSecondary";
      v13 = &v10->__r_.__value_.__s.__data_[16];
      goto LABEL_30;
    case 5:
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        v23.__r_.__value_.__l.__size_ = 14;
        v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v23.__r_.__value_.__s + 23) = 14;
        v11 = &v23;
      }
      qmemcpy(v11, "AvoidVoicemail", 14);
      v13 = &v11->__r_.__value_.__s.__data_[14];
      goto LABEL_30;
    case 6:
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        v23.__r_.__value_.__l.__size_ = 7;
        v12 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v23.__r_.__value_.__s + 23) = 7;
        v12 = &v23;
      }
      qmemcpy(v12, "Blocked", 7);
      v13 = &v12->__r_.__value_.__s.__data_[7];
LABEL_30:
      *v13 = 0;
      break;
    default:
      break;
  }
  v14 = *(uint64_t **)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48) - (_QWORD)v14;
  if (v15)
  {
    v16 = v15 >> 3;
    if (v16 <= 1)
      v16 = 1;
    while (1)
    {
      v17 = *v14;
      if (*v14)
      {
        if (*(unsigned __int8 *)(v17 + 40) == a2)
          break;
      }
      ++v14;
      if (!--v16)
        goto LABEL_37;
    }
    IMSCallInfo::endCall(v17, &v23);
  }
  else
  {
LABEL_37:
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(v19, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Unable to HANG UP call Id = ", 28);
    *(_BYTE *)(v18 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)".  No call found.", 17);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (v20 < 0)
      operator delete(v19[0]);
    if (v22 < 0)
      operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1BEEB6FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::endCall(uint64_t a1, uint64_t a2, const std::string *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void (**v18)(ImsUuid *__hidden);
  std::string v19;
  void (**v20)(ImsUuid *__hidden);
  std::string v21;
  std::string __p;
  std::string v23;

  std::string::basic_string[abi:ne180100]<0>(&v23, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v23, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Doing HANG UP to call UUID = ", 29);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v20 = off_1E78C0288;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v21 = *(std::string *)(a2 + 8);
  v7 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v20);
  v8 = v7;
  v20 = off_1E78C0288;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
    if (v8)
    {
LABEL_10:
      if (*(_DWORD *)(v8 + 576) == 1)
      {
        IMSCallInfo::stack((IMSCallInfo *)v8, &v23);
        v9 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
        if (!v23.__r_.__value_.__l.__size_)
          goto LABEL_15;
        v10 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
          if ((_QWORD)v9)
            goto LABEL_16;
        }
        else
        {
LABEL_15:
          if ((_QWORD)v9)
          {
LABEL_16:
            v18 = off_1E78C0288;
            if (*(char *)(v8 + 103) < 0)
              std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(v8 + 80), *(_QWORD *)(v8 + 88));
            else
              v19 = *(std::string *)(v8 + 80);
            IMSCallInfo::stack((IMSCallInfo *)v8, &v16);
            if (*(char *)(v16 + 4159) < 0)
              std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(v16 + 4136), *(_QWORD *)(v16 + 4144));
            else
              v23 = *(std::string *)(v16 + 4136);
            ims::CFString::asString(CFSTR("kCallDisconnectionReasonUnknownError"), (const void *)0x8000100, &__p);
            IMSCallManager::sendCallDisconnectionNotification(a1, (uint64_t)&v18, (void **)&v23.__r_.__value_.__l.__data_, &__p, 1);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v23.__r_.__value_.__l.__data_);
            v13 = v17;
            if (v17)
            {
              p_shared_owners = (unint64_t *)&v17->__shared_owners_;
              do
                v15 = __ldaxr(p_shared_owners);
              while (__stlxr(v15 - 1, p_shared_owners));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
            v18 = off_1E78C0288;
            if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v19.__r_.__value_.__l.__data_);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v8);
            return;
          }
        }
      }
      IMSCallInfo::endCall(v8, a3);
      return;
    }
  }
  else if (v7)
  {
    goto LABEL_10;
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v12 = ImsLogger::error(ims::_logger, (uint64_t)&v23, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"endCall: unknown callId ", 24);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v12);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1BEEB739C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t IMSCallManager::callInfoForUuid(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (**v7)(ImsUuid *__hidden);
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (**v12)(ImsUuid *__hidden);
  std::string __p;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;

  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 40))
    return 0;
  v4 = 0;
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "call");
    std::string::basic_string[abi:ne180100]<0>(v14, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::debug(ims::_logger, (uint64_t)v16, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Checking call ", 14);
    *(_BYTE *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" (", 2);
    *(_BYTE *)(v5 + 17) = 0;
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v4);
    v12 = off_1E78C0288;
    if (*(char *)(v6 + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 80), *(_QWORD *)(v6 + 88));
      v7 = v12;
    }
    else
    {
      __p = *(std::string *)(v6 + 80);
      v7 = off_1E78C0288;
    }
    ((void (*)(uint64_t, uint64_t))v7[2])((uint64_t)&v12, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)")", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    v12 = off_1E78C0288;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v15 < 0)
      operator delete(v14[0]);
    if (v17 < 0)
      operator delete(v16[0]);
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(v8 + 8 * v4);
    if (v9)
    {
      v12 = off_1E78C0288;
      if (*(char *)(v9 + 103) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 80), *(_QWORD *)(v9 + 88));
      else
        __p = *(std::string *)(v9 + 80);
      v10 = ImsUuid::operator==((uint64_t)&v12, a2);
      v12 = off_1E78C0288;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 = *(_QWORD *)(a1 + 40);
      if (v10)
        break;
    }
    if (++v4 >= (unint64_t)((*(_QWORD *)(a1 + 48) - v8) >> 3))
      return 0;
  }
  return *(_QWORD *)(v8 + 8 * v4);
}

void sub_1BEEB7688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::ringCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  IMSCallInfo *v6;
  uint64_t v7;
  void (**v8)(ImsUuid *__hidden);
  std::string v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v12, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Doing RING to call Id = ", 24);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  v8 = off_1E78C0288;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v9 = *(std::string *)(a2 + 8);
  v5 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v8);
  v6 = (IMSCallInfo *)v5;
  v8 = off_1E78C0288;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if (v6)
      goto LABEL_10;
  }
  else if (v5)
  {
LABEL_10:
    IMSCallInfo::ringCall(v6);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::error(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"ringCall: unknown callId ", 25);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v7);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1BEEB78E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::answerCall(uint64_t a1, uint64_t a2, const std::string *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void (**v10)(ImsUuid *__hidden);
  std::string v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  std::string::basic_string[abi:ne180100]<0>(v14, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Doing ANSWER to call Id = ", 26);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  v10 = off_1E78C0288;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v11 = *(std::string *)(a2 + 8);
  v7 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v10);
  v8 = (_QWORD *)v7;
  v10 = off_1E78C0288;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if (v8)
      goto LABEL_10;
  }
  else if (v7)
  {
LABEL_10:
    IMSCallInfo::answerCall(v8, a3);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::error(ims::_logger, (uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"answerCall: unknown callId ", 27);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v9);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
}

void sub_1BEEB7B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL IMSCallManager::activateCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  IMSCallInfo *v5;
  void (**v7)(ImsUuid *__hidden);
  std::string v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  std::string::basic_string[abi:ne180100]<0>(v11, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Doing ACTIVATE to call Id = ", 28);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  v7 = off_1E78C0288;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v8 = *(std::string *)(a2 + 8);
  v5 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)&v7);
  v7 = off_1E78C0288;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v5)
    IMSCallInfo::setActive(v5, 1);
  return v5 != 0;
}

void sub_1BEEB7D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::deactivateCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  IMSCallInfo *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void (**v16)(ImsUuid *__hidden);
  std::string v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;

  std::string::basic_string[abi:ne180100]<0>(v20, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v20, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Doing DEACTIVATE to call Id = ", 30);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v19 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  v16 = off_1E78C0288;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v17 = *(std::string *)(a2 + 8);
  v5 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)&v16);
  v16 = off_1E78C0288;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (v5)
  {
    IMSCallInfo::setActive(v5, 0);
    v7 = *((_QWORD *)v5 + 16);
    v6 = (std::__shared_weak_count *)*((_QWORD *)v5 + 17);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      if (v7)
      {
        v11 = *((_QWORD *)v5 + 16);
        v12 = (std::__shared_weak_count *)*((_QWORD *)v5 + 17);
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          *(_BYTE *)(v11 + 1802) = 1;
          do
            v15 = __ldaxr(v13);
          while (__stlxr(v15 - 1, v13));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        else
        {
          *(_BYTE *)(v11 + 1802) = 1;
        }
      }
    }
    else if (v7)
    {
      *(_BYTE *)(v7 + 1802) = 1;
    }
  }
}

void sub_1BEEB7F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::playDtmf(IMSCallInfo *this, RTPManager *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = *((_QWORD *)this + 16);
  if (v4 && *((_BYTE *)this + 572))
  {
    RTPManager::startSendingDTMF(*(RTPManager **)(v4 + 368), a2);
    return;
  }
  if (*((_QWORD *)this + 69))
  {
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 3) + 216))(&v12);
    v6 = v12;
    v5 = v13;
    if (!v13)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v6)
        return;
    }
    else
    {
LABEL_9:
      if (!v6)
        return;
    }
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 3) + 216))(&v12);
    RTPManager::startSendingDTMF(*(RTPManager **)(v12 + 368), a2);
    v9 = v13;
    if (v13)
    {
      v10 = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BEEB80BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSCallInfo::playDtmf(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = *(_QWORD *)(a1 + 128);
  if (v4 && *(_BYTE *)(a1 + 572))
  {
    RTPManager::sendDTMFDigits(*(_QWORD *)(v4 + 368), a2);
    return;
  }
  if (*(_QWORD *)(a1 + 552))
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 24) + 216))(&v12);
    v6 = v12;
    v5 = v13;
    if (!v13)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v6)
        return;
    }
    else
    {
LABEL_9:
      if (!v6)
        return;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 24) + 216))(&v12);
    RTPManager::sendDTMFDigits(*(_QWORD *)(v12 + 368), a2);
    v9 = v13;
    if (v13)
    {
      v10 = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BEEB81E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSCallInfo::stopDtmf(IMSCallInfo *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v2 = *((_QWORD *)this + 16);
  if (v2 && *((_BYTE *)this + 572))
  {
    RTPManager::stopSendingDTMF(*(RTPManager **)(v2 + 368));
    return;
  }
  if (*((_QWORD *)this + 69))
  {
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 3) + 216))(&v10);
    v4 = v10;
    v3 = v11;
    if (!v11)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (!v4)
        return;
    }
    else
    {
LABEL_9:
      if (!v4)
        return;
    }
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 3) + 216))(&v10);
    RTPManager::stopSendingDTMF(*(RTPManager **)(v10 + 368));
    v7 = v11;
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEEB8308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSCallInfo::setRelayMode(IMSCallInfo *this, int a2)
{
  BambiCall *v4;
  std::__shared_weak_count *v5;
  BambiCall *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  BambiCall *v12;
  std::__shared_weak_count *v13;

  v4 = (BambiCall *)*((_QWORD *)this + 16);
  if (v4)
  {
    BambiCall::setRelayMode(v4, a2);
    return;
  }
  if (*((_QWORD *)this + 69))
  {
    (*(void (**)(BambiCall **__return_ptr))(**((_QWORD **)this + 3) + 216))(&v12);
    v6 = v12;
    v5 = v13;
    if (!v13)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v6)
        return;
    }
    else
    {
LABEL_8:
      if (!v6)
        return;
    }
    (*(void (**)(BambiCall **__return_ptr))(**((_QWORD **)this + 3) + 216))(&v12);
    BambiCall::setRelayMode(v12, a2);
    v9 = v13;
    if (v13)
    {
      v10 = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BEEB8424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSCallInfo::setScreeningMode(IMSCallInfo *this, uint64_t a2)
{
  BambiCall *v4;
  std::__shared_weak_count *v5;
  BambiCall *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  BambiCall *v12;
  std::__shared_weak_count *v13;

  v4 = (BambiCall *)*((_QWORD *)this + 16);
  if (v4)
  {
    BambiCall::setScreeningMode(v4, a2);
    return;
  }
  if (*((_QWORD *)this + 69))
  {
    (*(void (**)(BambiCall **__return_ptr))(**((_QWORD **)this + 3) + 216))(&v12);
    v6 = v12;
    v5 = v13;
    if (!v13)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v6)
        return;
    }
    else
    {
LABEL_8:
      if (!v6)
        return;
    }
    (*(void (**)(BambiCall **__return_ptr))(**((_QWORD **)this + 3) + 216))(&v12);
    BambiCall::setScreeningMode(v12, a2);
    v9 = v13;
    if (v13)
    {
      v10 = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BEEB8540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSCallInfo::setTextMediaSessionMode(uint64_t a1, int a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
  {
    BambiCall::setTextMediaSessionMode(v4, a2);
    return;
  }
  if (*(_QWORD *)(a1 + 552))
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 24) + 216))(&v12);
    v6 = v12;
    v5 = v13;
    if (!v13)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v6)
        return;
    }
    else
    {
LABEL_8:
      if (!v6)
        return;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 24) + 216))(&v12);
    BambiCall::setTextMediaSessionMode(v12, a2);
    v9 = v13;
    if (v13)
    {
      v10 = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BEEB865C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSCallManager::playDtmf(uint64_t a1, uint64_t a2, RTPManager *a3)
{
  IMSCallInfo *v5;
  void (**v6)(ImsUuid *__hidden);
  std::string __p;

  v6 = off_1E78C0288;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    __p = *(std::string *)(a2 + 8);
  v5 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)&v6);
  v6 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5)
    IMSCallInfo::playDtmf(v5, a3);
}

void sub_1BEEB8714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::playDtmf(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v5;
  void (**v6)(ImsUuid *__hidden);
  std::string __p;

  v6 = off_1E78C0288;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    __p = *(std::string *)(a2 + 8);
  v5 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v6);
  v6 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5)
    IMSCallInfo::playDtmf(v5, a3);
}

void sub_1BEEB87D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::stopDtmf(uint64_t a1, uint64_t a2)
{
  IMSCallInfo *v3;
  void (**v4)(ImsUuid *__hidden);
  std::string __p;

  v4 = off_1E78C0288;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    __p = *(std::string *)(a2 + 8);
  v3 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)&v4);
  v4 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v3)
    IMSCallInfo::stopDtmf(v3);
}

void sub_1BEEB888C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::setRelayMode(uint64_t a1, uint64_t a2, int a3)
{
  IMSCallInfo *v5;
  void (**v6)(ImsUuid *__hidden);
  std::string __p;

  v6 = off_1E78C0288;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    __p = *(std::string *)(a2 + 8);
  v5 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)&v6);
  v6 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5)
    IMSCallInfo::setRelayMode(v5, a3);
}

void sub_1BEEB8950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::setScreeningMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  IMSCallInfo *v5;
  void (**v6)(ImsUuid *__hidden);
  std::string __p;

  v6 = off_1E78C0288;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    __p = *(std::string *)(a2 + 8);
  v5 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)&v6);
  v6 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5)
    IMSCallInfo::setScreeningMode(v5, a3);
}

void sub_1BEEB8A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::setTextMediaSessionMode(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void (**v13)(ImsUuid *__hidden);
  std::string __p;

  v13 = off_1E78C0288;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    __p = *(std::string *)(a2 + 8);
  v6 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v13);
  v7 = v6;
  v13 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
      goto LABEL_6;
  }
  else if (v6)
  {
LABEL_6:
    IMSCallInfo::setTextMediaSessionMode(v7, a3);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v11, "call");
  std::string::basic_string[abi:ne180100]<0>(v9, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::warn(ims::_logger, (uint64_t)v11, (uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Unable to set text mode for call.  No call for UUID ", 52);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v8);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
}

void sub_1BEEB8B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::setTextMediaSessionMode(uint64_t a1, unsigned __int8 *a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  IMSCallInfo **v11;
  IMSCallInfo **i;
  IMSCallInfo *v13;
  unsigned __int8 *v14;
  _BOOL4 v15;
  std::string::size_type size;
  uint64_t v17;
  int v18;
  uint64_t v19;
  std::string *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *__p;
  std::__shared_weak_count *v37;
  char v38;
  std::string v39;

  if (!a4)
    a3 = 0;
  if (a3 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)&v39, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"TTY mode is not supported by IMS", 32);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v38 < 0)
      operator delete(__p);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v39, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v39, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Turning RTT ", 12);
  *(_BYTE *)(v8 + 17) = 0;
  if (a3 == 2)
    v9 = "ON";
  else
    v9 = "OFF";
  if (a3 == 2)
    v10 = 2;
  else
    v10 = 3;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)v9, v10);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" for stack ID ", 14);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v8 + 32))(v8, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v38 < 0)
    operator delete(__p);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v11 = *(IMSCallInfo ***)(a1 + 40);
  for (i = *(IMSCallInfo ***)(a1 + 48); v11 != i; ++v11)
  {
    v13 = *v11;
    IMSCallInfo::stack(*v11, &__p);
    if (!__p)
    {
      v15 = 0;
      goto LABEL_54;
    }
    IMSCallInfo::stack(v13, &v34);
    if (*(char *)(v34 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(v34 + 4136), *(_QWORD *)(v34 + 4144));
    else
      v39 = *(std::string *)(v34 + 4136);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      size = v39.__r_.__value_.__l.__size_;
    v17 = a2[23];
    v18 = (char)v17;
    if ((v17 & 0x80u) != 0)
      v17 = *((_QWORD *)a2 + 1);
    if (size == v17)
    {
      if (v18 >= 0)
        v14 = a2;
      else
        v14 = *(unsigned __int8 **)a2;
      if ((*((_BYTE *)&v39.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v27 = (void *)v39.__r_.__value_.__r.__words[0];
        v15 = memcmp(v39.__r_.__value_.__l.__data_, v14, v39.__r_.__value_.__l.__size_) == 0;
        goto LABEL_47;
      }
      if (!*((_BYTE *)&v39.__r_.__value_.__s + 23))
      {
        v15 = 1;
        goto LABEL_49;
      }
      v19 = HIBYTE(v39.__r_.__value_.__r.__words[2]) - 1;
      v20 = &v39;
      do
      {
        v22 = v20->__r_.__value_.__s.__data_[0];
        v20 = (std::string *)((char *)v20 + 1);
        v21 = v22;
        v24 = *v14++;
        v23 = v24;
        v26 = v19-- != 0;
        v15 = v21 == v23;
      }
      while (v21 == v23 && v26);
      if ((*((_BYTE *)&v39.__r_.__value_.__s + 23) & 0x80) != 0)
      {
LABEL_45:
        v27 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_47:
        operator delete(v27);
      }
    }
    else
    {
      v15 = 0;
      if ((*((_BYTE *)&v39.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_45;
    }
LABEL_49:
    v28 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v28->__on_zero_shared)(v28, v14);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
LABEL_54:
    v31 = v37;
    if (v37)
    {
      v32 = (unint64_t *)&v37->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
        if (!v15)
          continue;
LABEL_59:
        IMSCallInfo::setTextMediaSessionMode((uint64_t)v13, a3);
        continue;
      }
    }
    if (v15)
      goto LABEL_59;
  }
}

void sub_1BEEB8F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallManager::mergeAllCalls(IMSCallManager *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  std::string::size_type size;
  std::string::size_type v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  std::string::size_type v30;
  std::string::size_type v31;
  __int128 v32;
  int64x2_t v33;
  std::string::size_type v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  BOOL v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v81;
  void **v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  const ImsPrefs *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  IMSCallManager *v99;
  __int128 v100;
  _BYTE __p[32];
  __int128 v102;
  _BYTE v103[23];
  _BYTE v104[9];
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  std::string v128;
  std::string v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  std::string v132[2];

  std::string::basic_string[abi:ne180100]<0>(__p, "call");
  std::string::basic_string[abi:ne180100]<0>(v132, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v132);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Doing MERGE ALL", 15);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (SHIBYTE(v132[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132[0].__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  v4 = (uint64_t *)*((_QWORD *)this + 6);
  if (v3 == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(v132, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v71 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v132);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v71 + 8), (uint64_t)"No calls to merge", 17);
    *(_BYTE *)(v71 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v71 + 64))(v71, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v71 + 17) = 0;
    if (SHIBYTE(v132[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v132[0].__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    return 0;
  }
  v99 = this;
  v5 = 0;
  v6 = 0;
  memset(v132, 0, 24);
  v130 = 0;
  v131 = 0;
  do
  {
    v7 = *v3;
    v8 = *(_QWORD *)(*v3 + 128);
    v9 = *(std::__shared_weak_count **)(*v3 + 136);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (!v8 || *(_QWORD *)(v7 + 552))
    {
      if (!v9)
        goto LABEL_75;
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_15;
    }
    v14 = *(unsigned __int8 *)(v7 + 570);
    if (!v9)
      goto LABEL_21;
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v14)
        goto LABEL_75;
    }
    else
    {
LABEL_21:
      if (v14)
        goto LABEL_75;
    }
    v17 = *(_OWORD *)(v7 + 128);
    *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v17;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    size = v132[0].__r_.__value_.__l.__size_;
    if (v132[0].__r_.__value_.__l.__size_ >= v132[0].__r_.__value_.__r.__words[2])
    {
      v100 = v17;
      v22 = (uint64_t)(v132[0].__r_.__value_.__l.__size_ - v132[0].__r_.__value_.__r.__words[0]) >> 4;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 60)
        std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
      v24 = v132[0].__r_.__value_.__r.__words[2] - v132[0].__r_.__value_.__r.__words[0];
      if ((uint64_t)(v132[0].__r_.__value_.__r.__words[2] - v132[0].__r_.__value_.__r.__words[0]) >> 3 > v23)
        v23 = v24 >> 3;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
        v25 = 0xFFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      *(_QWORD *)&v102 = (char *)&v132[0].__r_.__value_.__l + 16;
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)&v132[0].__r_.__value_.__r.__words[2], v25);
      v28 = &v26[16 * v22];
      *(_OWORD *)v28 = v100;
      v29 = (_QWORD *)v132[0].__r_.__value_.__l.__size_;
      v30 = v132[0].__r_.__value_.__r.__words[0];
      if (v132[0].__r_.__value_.__l.__size_ == v132[0].__r_.__value_.__r.__words[0])
      {
        v33 = vdupq_n_s64(v132[0].__r_.__value_.__l.__size_);
        v31 = (std::string::size_type)&v26[16 * v22];
      }
      else
      {
        v31 = (std::string::size_type)&v26[16 * v22];
        do
        {
          v32 = *((_OWORD *)v29 - 1);
          v29 -= 2;
          *(_OWORD *)(v31 - 16) = v32;
          v31 -= 16;
          *v29 = 0;
          v29[1] = 0;
        }
        while (v29 != (_QWORD *)v30);
        v33 = *(int64x2_t *)&v132[0].__r_.__value_.__l.__data_;
      }
      v21 = (std::string::size_type)(v28 + 16);
      v132[0].__r_.__value_.__r.__words[0] = v31;
      v132[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v28 + 16);
      *(int64x2_t *)&__p[8] = v33;
      v34 = v132[0].__r_.__value_.__r.__words[2];
      v132[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&v26[16 * v27];
      *(_QWORD *)&__p[24] = v34;
      *(_QWORD *)__p = v33.i64[0];
      std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)__p);
    }
    else
    {
      *(_OWORD *)v132[0].__r_.__value_.__l.__size_ = v17;
      v21 = size + 16;
    }
    v132[0].__r_.__value_.__l.__size_ = v21;
    v35 = *(_QWORD *)(v7 + 128);
    v36 = *(std::__shared_weak_count **)(v7 + 136);
    *(_BYTE *)(v7 + 570) = 1;
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      v39 = *(unsigned __int8 *)(v35 + 746);
      do
        v40 = __ldaxr(v37);
      while (__stlxr(v40 - 1, v37));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    else
    {
      v39 = *(unsigned __int8 *)(v35 + 746);
    }
    v41 = v39 != 0;
    v42 = *(_QWORD *)(v7 + 128);
    v9 = *(std::__shared_weak_count **)(v7 + 136);
    if (v9)
    {
      v43 = (unint64_t *)&v9->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      v45 = *(unsigned __int8 *)(v42 + 747);
      do
        v46 = __ldaxr(v43);
      while (__stlxr(v46 - 1, v43));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      v42 = *(_QWORD *)(v7 + 128);
      v9 = *(std::__shared_weak_count **)(v7 + 136);
    }
    else
    {
      v45 = *(unsigned __int8 *)(v42 + 747);
    }
    v6 |= v41;
    v5 |= v45 != 0;
    v47 = v130;
    if (v130)
    {
      if (v9)
      {
        v48 = (unint64_t *)&v9->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v50 = *(std::__shared_weak_count **)(v42 + 360);
      if (v50 && (v51 = std::__shared_weak_count::lock(v50)) != 0)
      {
        v52 = v51;
        v53 = *(_QWORD *)(v42 + 352) == v47;
        v54 = (unint64_t *)&v51->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      else
      {
        v53 = 0;
      }
      if (v9)
      {
        v56 = (unint64_t *)&v9->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (!v53)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "call");
        std::string::basic_string[abi:ne180100]<0>(&v129, (char *)&str_1_10);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v81 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v129);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v81 + 8), (uint64_t)"Unable to merge calls across SIP stacks.  Merge from ", 53);
        *(_BYTE *)(v81 + 17) = 0;
        if (*(char *)(v130 + 4159) < 0)
          std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)(v130 + 4136), *(_QWORD *)(v130 + 4144));
        else
          v128 = *(std::string *)(v130 + 4136);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v81 + 32))(v81, &v128);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v81 + 8), (uint64_t)" to ", 4);
        *(_BYTE *)(v81 + 17) = 0;
        v85 = *(_QWORD *)(v7 + 128);
        v84 = *(std::__shared_weak_count **)(v7 + 136);
        v124 = v85;
        v125 = v84;
        if (v84)
        {
          v86 = (unint64_t *)&v84->__shared_owners_;
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
        v126 = 0;
        v127 = 0;
        v88 = *(std::__shared_weak_count **)(v85 + 360);
        if (v88)
        {
          v89 = std::__shared_weak_count::lock(v88);
          v127 = v89;
          if (v89)
            v126 = *(_QWORD *)(v85 + 352);
        }
        else
        {
          v89 = 0;
        }
        std::ostream::operator<<();
        *(_BYTE *)(v81 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v81 + 8), (uint64_t)" requested.", 11);
        *(_BYTE *)(v81 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v81 + 17) = 0;
        if (v89)
        {
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v92 = v125;
        if (v125)
        {
          v93 = (unint64_t *)&v125->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v128.__r_.__value_.__l.__data_);
        goto LABEL_107;
      }
    }
    else
    {
      if (v9)
      {
        v58 = (unint64_t *)&v9->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      v60 = *(std::__shared_weak_count **)(v42 + 360);
      if (v60 && (v60 = std::__shared_weak_count::lock(v60)) != 0)
        v61 = *(_QWORD *)(v42 + 352);
      else
        v61 = 0;
      v62 = v131;
      v130 = v61;
      v131 = v60;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      if (v9)
      {
        v65 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v65);
        while (__stlxr(v13 - 1, v65));
LABEL_15:
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
LABEL_75:
    ++v3;
  }
  while (v3 != v4);
  if (v132[0].__r_.__value_.__l.__size_ == v132[0].__r_.__value_.__r.__words[0])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v129, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v72 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v129);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v72 + 8), (uint64_t)"No new calls to merge", 21);
    *(_BYTE *)(v72 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v72 + 17) = 0;
LABEL_107:
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v129.__r_.__value_.__l.__data_);
    goto LABEL_124;
  }
  v66 = v130;
  v67 = (char *)(v130 + 4159);
  if (*(_BYTE *)(v130 + 4312))
  {
    v68 = (uint64_t *)((char *)v99 + 112);
    if (*((_QWORD *)v99 + 14))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "call");
      std::string::basic_string[abi:ne180100]<0>(&v129, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v69 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v129);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v69 + 8), (uint64_t)"Merging ", 8);
      *(_BYTE *)(v69 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v69 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v69 + 8), (uint64_t)" calls into existing conference", 31);
      *(_BYTE *)(v69 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v69 + 64))(v69, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v69 + 17) = 0;
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v70 = BambiConferenceCall::addCalls(*v68, (uint64_t *)v132);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "call");
      std::string::basic_string[abi:ne180100]<0>(&v129, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v74 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v129);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v74 + 8), (uint64_t)"Starting conference call with ", 30);
      *(_BYTE *)(v74 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v74 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v74 + 8), (uint64_t)" other participants", 19);
      *(_BYTE *)(v74 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v74 + 64))(v74, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v74 + 17) = 0;
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v75 = IMSCallManager::getActiveCall(v99);
      if (v75)
      {
        *(_QWORD *)__p = off_1E78C0288;
        if (*(char *)(v75 + 103) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)(v75 + 80), *(_QWORD *)(v75 + 88));
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)(v75 + 80);
          *(_QWORD *)&__p[24] = *(_QWORD *)(v75 + 96);
        }
        v82 = (void **)((char *)v99 + 144);
        if (*((char *)v99 + 167) < 0)
          operator delete(*v82);
        *(_OWORD *)v82 = *(_OWORD *)&__p[8];
        *((_QWORD *)v99 + 20) = *(_QWORD *)&__p[24];
        std::string::basic_string[abi:ne180100]<0>(__p, "call");
        std::string::basic_string[abi:ne180100]<0>(&v129, (char *)&str_1_10);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v83 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v129);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v83 + 8), (uint64_t)"setting _activeCallBeforeConference to ", 39);
        *(_BYTE *)(v83 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*((_QWORD *)v99 + 17) + 16))((uint64_t)v99 + 136, v83);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        if (*((char *)v99 + 167) < 0)
        {
          **((_BYTE **)v99 + 18) = 0;
          *((_QWORD *)v99 + 19) = 0;
        }
        else
        {
          *((_BYTE *)v99 + 144) = 0;
          *((_BYTE *)v99 + 167) = 0;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "call");
        std::string::basic_string[abi:ne180100]<0>(&v129, (char *)&str_1_10);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v83 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v129);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v83 + 8), (uint64_t)"No active call when starting conference", 39);
        *(_BYTE *)(v83 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      *(_BYTE *)(v83 + 17) = 0;
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v122 = 0u;
      v123 = 0u;
      v121 = 0;
      v109 = 0;
      *(_QWORD *)&v104[1] = 0;
      v102 = 0u;
      memset(v103, 0, sizeof(v103));
      memset(__p, 0, sizeof(__p));
      DWORD2(v102) = 90;
      v103[0] = 1;
      v103[2] = 1;
      *(_QWORD *)&v103[4] = 0x200000001;
      *(_WORD *)&v103[13] = 257;
      *(_WORD *)v104 = 256;
      v110 = 0u;
      v111 = 0u;
      v105 = 0;
      v106 = 0u;
      v107 = 0u;
      v108 = 0u;
      v112 = 0x40A7700000000000;
      v118 = 0u;
      v119 = 0u;
      v120 = 0u;
      v113 = 0u;
      v114 = 0u;
      v115 = 0u;
      v116 = 0u;
      v117 = 0u;
      v95 = (const ImsPrefs *)SipStack::prefs((SipStack *)v66);
      BambiCallOptions::initializeFromPrefs((BambiCallOptions *)__p, v95);
      BYTE2(v105) = v6 & 1;
      BYTE3(v105) = v5 & 1;
      if (*v67 < 0)
        std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)(v66 + 4136), *(_QWORD *)(v66 + 4144));
      else
        v129 = *(std::string *)(v66 + 4136);
      IMSCallManager::sendCallStatusRequest((uint64_t)v99, (uint64_t)&v129, 0, 1, 0);
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
      BambiClient::initializeConferenceCall(*(_QWORD *)(*((_QWORD *)v99 + 3) + 168), v132, (uint64_t)v99 + 16, (const BambiCallOptions *)__p, (BambiCall **)&v129);
      std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v68, (__int128 *)&v129);
      v96 = (std::__shared_weak_count *)v129.__r_.__value_.__l.__size_;
      if (v129.__r_.__value_.__l.__size_)
      {
        v97 = (unint64_t *)(v129.__r_.__value_.__l.__size_ + 8);
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      v70 = *v68 != 0;
      BambiCallOptions::~BambiCallOptions((void **)__p);
    }
    goto LABEL_127;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "call");
  std::string::basic_string[abi:ne180100]<0>(&v129, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v73 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v129);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v73 + 8), (uint64_t)"Previous conference INVITE ended fatally, automatically failing merge.", 70);
  *(_BYTE *)(v73 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v73 + 64))(v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v73 + 17) = 0;
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (*v67 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v66 + 4136), *(_QWORD *)(v66 + 4144));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v66 + 4136);
    *(_QWORD *)&__p[16] = *(_QWORD *)(v66 + 4152);
  }
  v76 = IMSClientManager::delegateForStack((void **)__p);
  (*(void (**)(uint64_t))(*(_QWORD *)(v76 + 16) + 40))(v76 + 16);
LABEL_124:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v70 = 0;
LABEL_127:
  v77 = v131;
  if (v131)
  {
    v78 = (unint64_t *)&v131->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  *(_QWORD *)__p = v132;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v70;
}

void sub_1BEEB9E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 153) < 0)
    operator delete(*(void **)(v18 - 176));
  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v18 - 144);
  *(_QWORD *)(v18 - 176) = v18 - 128;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 176));
  _Unwind_Resume(a1);
}

uint64_t IMSCallManager::getActiveCall(IMSCallManager *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v15 = 0;
  v16 = 0;
  BambiClient::activeCall(*(_QWORD *)(*((_QWORD *)this + 3) + 168), &v15);
  if (v15)
  {
    v2 = (uint64_t *)*((_QWORD *)this + 5);
    v3 = (uint64_t *)*((_QWORD *)this + 6);
    while (v2 != v3)
    {
      v4 = *v2;
      if (*v2)
      {
        v6 = *(_QWORD *)(v4 + 128);
        v5 = *(std::__shared_weak_count **)(v4 + 136);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v8 = __ldxr(p_shared_owners);
          while (__stxr(v8 + 1, p_shared_owners));
          v9 = v15;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          if (v6 == v9)
            goto LABEL_17;
        }
        else if (v6 == v15)
        {
          goto LABEL_17;
        }
      }
      ++v2;
    }
  }
  v4 = 0;
LABEL_17:
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v4;
}

void IMSCallManager::transferCalls(uint64_t a1, uint64_t a2, uint64_t a3)
{
  IMSCallInfo *v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *v36[2];
  char v37;
  std::string v38;
  _QWORD v39[3];
  char v40;
  _QWORD v41[3];
  char v42;

  ImsUuid::ImsUuid(v41, a2);
  v6 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)v41);
  v41[0] = off_1E78C0288;
  if (v42 < 0)
    operator delete((void *)v41[1]);
  ImsUuid::ImsUuid(v39, a3);
  v7 = IMSCallManager::callInfoForUuid(a1, (uint64_t)v39);
  v39[0] = off_1E78C0288;
  if (v40 < 0)
  {
    operator delete((void *)v39[1]);
    if (v6)
      goto LABEL_5;
LABEL_26:
    std::string::basic_string[abi:ne180100]<0>(&v38, "call");
    std::string::basic_string[abi:ne180100]<0>(v36, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::error(ims::_logger, (uint64_t)&v38, (uint64_t)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"No call ", 8);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 32))(v22, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" found for transferee", 21);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    goto LABEL_28;
  }
  if (!v6)
    goto LABEL_26;
LABEL_5:
  if (v7)
  {
    v34 = 0;
    v35 = 0;
    IMSCallInfo::stack(v6, &v34);
    v8 = (uint64_t *)v34;
    if (!v34)
    {
      std::string::basic_string[abi:ne180100]<0>(&v38, "call");
      std::string::basic_string[abi:ne180100]<0>(v36, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v24 = ImsLogger::error(ims::_logger, (uint64_t)&v38, (uint64_t)v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"No valid SIP stack to initiate transfer", 39);
      *(_BYTE *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v24 + 17) = 0;
      if (v37 < 0)
        operator delete(v36[0]);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (*(char *)(v34 + 4159) < 0)
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v34 + 4136), *(_QWORD *)(v34 + 4144));
      else
        v38 = *(std::string *)(v34 + 4136);
      v25 = IMSClientManager::delegateForStack((void **)&v38.__r_.__value_.__l.__data_);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v25 + 16) + 112))(v25 + 16, 0);
      goto LABEL_44;
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)v6 + 17);
    v32 = *((_QWORD *)v6 + 16);
    v33 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = *(std::__shared_weak_count **)(v7 + 136);
    v30 = *(_QWORD *)(v7 + 128);
    v31 = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = SipStack::transferCalls(v8, &v32, &v30);
    v16 = v31;
    if (v31)
    {
      v17 = (unint64_t *)&v31->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v33;
    if (!v33)
      goto LABEL_22;
    v20 = (unint64_t *)&v33->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if ((v15 & 1) == 0)
        goto LABEL_23;
    }
    else
    {
LABEL_22:
      if ((v15 & 1) == 0)
      {
LABEL_23:
        if (*(char *)(v34 + 4159) < 0)
          std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v34 + 4136), *(_QWORD *)(v34 + 4144));
        else
          v38 = *(std::string *)(v34 + 4136);
        v26 = IMSClientManager::delegateForStack((void **)&v38.__r_.__value_.__l.__data_);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v26 + 16) + 112))(v26 + 16, 0);
LABEL_44:
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
      }
    }
    v27 = v35;
    if (v35)
    {
      v28 = (unint64_t *)&v35->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v38, "call");
  std::string::basic_string[abi:ne180100]<0>(v36, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v23 = ImsLogger::error(ims::_logger, (uint64_t)&v38, (uint64_t)v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"No call ", 8);
  *(_BYTE *)(v23 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 32))(v23, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)" found for transfer target", 26);
  *(_BYTE *)(v23 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v23 + 17) = 0;
LABEL_28:
  if (v37 < 0)
    operator delete(v36[0]);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_1BEEBA574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void IMSCallManager::transferAllCalls(IMSCallManager *this)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  std::string __p;
  std::string v6;
  void (**v7)(ImsUuid *__hidden);
  std::string v8;
  std::string v9;

  v1 = (uint64_t *)*((_QWORD *)this + 5);
  if (*((_QWORD *)this + 6) - (_QWORD)v1 >= 0x10uLL)
  {
    v3 = *v1;
    v7 = off_1E78C0288;
    if (*(char *)(v3 + 103) < 0)
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(v3 + 80), *(_QWORD *)(v3 + 88));
    else
      v8 = *(std::string *)(v3 + 80);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v9, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
    else
      v9 = v8;
    v4 = *(_QWORD *)(*((_QWORD *)this + 6) - 8);
    if (*(char *)(v4 + 103) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 80), *(_QWORD *)(v4 + 88));
    else
      __p = *(std::string *)(v4 + 80);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v6 = __p;
    IMSCallManager::transferCalls((uint64_t)this, (uint64_t)&v9, (uint64_t)&v6);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    v7 = off_1E78C0288;
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_1BEEBA7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 41) < 0)
    operator delete(*(void **)(v29 - 64));
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::refreshCall(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  IMSCallInfo *v7;
  void (**v8)(ImsUuid *__hidden);
  std::string v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v12, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Sending reinvite for call Id = ", 31);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  v8 = off_1E78C0288;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v9 = *(std::string *)(a2 + 8);
  v7 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)&v8);
  v8 = off_1E78C0288;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v7)
    IMSCallInfo::refresh(v7, a3);
}

void sub_1BEEBA974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallManager::callInfoForSipCallId(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void **v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;
  _BOOL4 v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 48) == v2)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = *(_QWORD *)(v2 + 8 * v5);
    v7 = *(_QWORD *)(v6 + 128);
    v8 = *(std::__shared_weak_count **)(v6 + 136);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (!v7)
    {
      v30 = 0;
      goto LABEL_37;
    }
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v5);
    v12 = *(_QWORD *)(v11 + 128);
    v13 = *(std::__shared_weak_count **)(v11 + 136);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = *(unsigned __int8 *)(v12 + 487);
    v17 = *(_QWORD *)(v12 + 472);
    if ((v16 & 0x80u) == 0)
      v18 = *(unsigned __int8 *)(v12 + 487);
    else
      v18 = *(_QWORD *)(v12 + 472);
    v19 = *(unsigned __int8 *)(a2 + 23);
    v20 = (char)v19;
    if ((v19 & 0x80u) != 0)
      v19 = *(_QWORD *)(a2 + 8);
    if (v18 == v19)
    {
      v21 = (const void **)(v12 + 464);
      v22 = v20 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v16 & 0x80) != 0)
      {
        v30 = memcmp(*v21, v22, v17) == 0;
      }
      else
      {
        if (!(_DWORD)v16)
        {
          v30 = 1;
          if (!v13)
            goto LABEL_37;
          goto LABEL_33;
        }
        v23 = v16 - 1;
        do
        {
          v25 = *(unsigned __int8 *)v21;
          v21 = (const void **)((char *)v21 + 1);
          v24 = v25;
          v27 = *v22++;
          v26 = v27;
          v29 = v23-- != 0;
          v30 = v24 == v26;
        }
        while (v24 == v26 && v29);
      }
      if (!v13)
        goto LABEL_37;
    }
    else
    {
      v30 = 0;
      if (!v13)
        goto LABEL_37;
    }
LABEL_33:
    v31 = (unint64_t *)&v13->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_37:
    if (v8)
    {
      v33 = (unint64_t *)&v8->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v30)
      return *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v5);
    ++v5;
    v2 = *(_QWORD *)(a1 + 40);
    if (v5 >= (*(_QWORD *)(a1 + 48) - v2) >> 3)
      return 0;
  }
}

void IMSCallManager::setConferenceCallActive(IMSCallManager *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  _QWORD *v7;
  uint64_t v8;
  BambiCall *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  if (*((_QWORD *)this + 14))
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
    v5 = v4;
    if (a2)
      v6 = "Activating";
    else
      v6 = "Deactivating";
    v7 = *(_QWORD **)(v4 + 8);
    if (a2)
      v8 = 10;
    else
      v8 = 12;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v6, v8);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" conference call", 16);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    v9 = (BambiCall *)*((_QWORD *)this + 14);
    if (a2)
    {
      BambiCall::performLocalResume(v9);
    }
    else
    {
      BambiCall::performLocalHold(v9);
      *(_BYTE *)(*((_QWORD *)this + 14) + 1802) = 1;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::error(ims::_logger, (uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"setConferenceCallActive: no existing conference call", 52);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
  }
}

void sub_1BEEBAD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::endConferenceCall(IMSCallManager *this)
{
  uint64_t v2;
  BambiCall *v3;
  uint64_t v4;
  _BYTE v5[72];
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;

  if (*((_QWORD *)this + 14))
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "call");
    std::string::basic_string[abi:ne180100]<0>(v6, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v2 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Ending conference call", 22);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    if (v7 < 0)
      operator delete(v6[0]);
    if (v9 < 0)
      operator delete(v8[0]);
    v3 = (BambiCall *)*((_QWORD *)this + 14);
    std::string::basic_string[abi:ne180100]<0>(v8, "UserTriggered");
    BambiCall::endWithReason(v3, (uint64_t)v8, (uint64_t)v5);
    ImsResult::~ImsResult((ImsResult *)v5);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "call");
    std::string::basic_string[abi:ne180100]<0>(v6, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::error(ims::_logger, (uint64_t)v8, (uint64_t)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"endConferenceCall: no existing conference call", 46);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v7 < 0)
      operator delete(v6[0]);
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1BEEBAF20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 17) < 0)
    operator delete(*(void **)(v1 - 40));
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleCallInvalidated(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *i;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::string::size_type v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  std::string::size_type v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void (**v51)(ImsUuid *__hidden);
  std::string v52;
  void (**v53)(ImsUuid *__hidden);
  std::string v54;
  void (**v55)(ImsUuid *__hidden);
  std::string v56;
  std::string __p;
  std::string v58;

  v2 = a1 + 112;
  if (*a2 != *(_QWORD *)(a1 + 112))
    return;
  std::string::basic_string[abi:ne180100]<0>(&v58, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)&v58, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Conference call invalidated", 27);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (*(_QWORD *)v2 && *(_BYTE *)(*(_QWORD *)v2 + 2027))
  {
    std::string::basic_string[abi:ne180100]<0>(&v58, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::error(ims::_logger, (uint64_t)&v58, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Conference ended due to fatal error.  Further merges will be disabled.", 70);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v7 = *(_QWORD *)v2;
    v8 = *(std::__shared_weak_count **)(*(_QWORD *)v2 + 360);
    if (v8 && (v9 = std::__shared_weak_count::lock(v8)) != 0)
    {
      v10 = v9;
      *(_BYTE *)(*(_QWORD *)(v7 + 352) + 4312) = 0;
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      MEMORY[0x10D8] = 0;
    }
  }
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v2, (__int128 *)&v58);
  size = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
  if (v58.__r_.__value_.__l.__size_)
  {
    v14 = (unint64_t *)(v58.__r_.__value_.__l.__size_ + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v16 = IMSCallManager::getActiveCall((IMSCallManager *)a1);
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 48))
    return;
  v17 = v16;
  v18 = *a2;
  v19 = *(std::__shared_weak_count **)(*a2 + 360);
  if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
  {
    v21 = v20;
    v22 = *(_DWORD *)(*(_QWORD *)(v18 + 352) + 200);
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    v22 = MEMORY[0xC8];
  }
  if (v22 == 2 && !v17)
  {
    if (*(char *)(a1 + 167) < 0)
    {
      if (!*(_QWORD *)(a1 + 152))
        return;
    }
    else if (!*(_BYTE *)(a1 + 167))
    {
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(&v58, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v36 = ImsLogger::debug(ims::_logger, (uint64_t)&v58, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"Activating call with id: ", 25);
    *(_BYTE *)(v36 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 136) + 16))(a1 + 136, v36);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v36 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v55 = off_1E78C0288;
    if (*(char *)(a1 + 167) < 0)
      std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(a1 + 144), *(_QWORD *)(a1 + 152));
    else
      v56 = *(std::string *)(a1 + 144);
    v37 = IMSCallManager::activateCall(a1, (uint64_t)&v55);
    v55 = off_1E78C0288;
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (!v37)
    {
      v38 = **(_QWORD **)(a1 + 40);
      v53 = off_1E78C0288;
      if (*(char *)(v38 + 103) < 0)
        std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(v38 + 80), *(_QWORD *)(v38 + 88));
      else
        v54 = *(std::string *)(v38 + 80);
      IMSCallManager::activateCall(a1, (uint64_t)&v53);
      v53 = off_1E78C0288;
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (*(char *)(a1 + 167) < 0)
    {
      **(_BYTE **)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 144) = 0;
      *(_BYTE *)(a1 + 167) = 0;
    }
    v42 = *a2;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    v43 = *(std::__shared_weak_count **)(v42 + 360);
    if (v43)
    {
      v44 = std::__shared_weak_count::lock(v43);
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
      if (v44)
      {
        v45 = *(_QWORD *)(v42 + 352);
        __p.__r_.__value_.__r.__words[0] = v45;
        goto LABEL_103;
      }
    }
    else
    {
      v44 = 0;
    }
    v45 = 0;
LABEL_103:
    if (*(char *)(v45 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(v45 + 4136), *(_QWORD *)(v45 + 4144));
    else
      v58 = *(std::string *)(v45 + 4136);
    v46 = IMSClientManager::delegateForStack((void **)&v58.__r_.__value_.__l.__data_);
    (*(void (**)(uint64_t))(*(_QWORD *)(v46 + 16) + 40))(v46 + 16);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (v44)
    {
      v47 = (unint64_t *)&v44->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        v41 = v44;
        goto LABEL_113;
      }
    }
    return;
  }
  if (v22 == 2)
    return;
  std::string::basic_string[abi:ne180100]<0>(&v58, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v25 = ImsLogger::debug(ims::_logger, (uint64_t)&v58, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Stack not initialized.  Forcing disconnect to joined parties.", 61);
  *(_BYTE *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v25 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  v26 = *(uint64_t **)(a1 + 40);
  for (i = *(uint64_t **)(a1 + 48); v26 != i; ++v26)
  {
    v28 = *v26;
    if (*v26 && *(_QWORD *)(v28 + 552))
    {
      v51 = off_1E78C0288;
      if (*(char *)(v28 + 103) < 0)
        std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)(v28 + 80), *(_QWORD *)(v28 + 88));
      else
        v52 = *(std::string *)(v28 + 80);
      IMSCallInfo::stack((IMSCallInfo *)v28, &v49);
      if (*(char *)(v49 + 4159) < 0)
        std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(v49 + 4136), *(_QWORD *)(v49 + 4144));
      else
        v58 = *(std::string *)(v49 + 4136);
      ims::CFString::asString(CFSTR("kCallDisconnectionReasonUnknownError"), (const void *)0x8000100, &__p);
      IMSCallManager::sendCallDisconnectionNotification(a1, (uint64_t)&v51, (void **)&v58.__r_.__value_.__l.__data_, &__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      v29 = v50;
      if (v50)
      {
        v30 = (unint64_t *)&v50->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v51 = off_1E78C0288;
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
    }
  }
  v32 = *a2;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v33 = *(std::__shared_weak_count **)(v32 + 360);
  if (v33)
  {
    v34 = std::__shared_weak_count::lock(v33);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
    if (v34)
    {
      v35 = *(_QWORD *)(v32 + 352);
      __p.__r_.__value_.__r.__words[0] = v35;
      goto LABEL_82;
    }
  }
  else
  {
    v34 = 0;
  }
  v35 = 0;
LABEL_82:
  if (*(char *)(v35 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(v35 + 4136), *(_QWORD *)(v35 + 4144));
  else
    v58 = *(std::string *)(v35 + 4136);
  IMSCallManager::sendCallStatusRequest(a1, (uint64_t)&v58, 2, 1, 0);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (v34)
  {
    v39 = (unint64_t *)&v34->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      v41 = v34;
LABEL_113:
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_1BEEBB76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSCallManager::handleCallInvalidated(uint64_t a1, uint64_t *a2)
{
  IMSCallManager::handleCallInvalidated(a1 - 16, a2);
}

void IMSCallManager::handleMediaActivationEvent(IMSCallManager *this, BambiCallEvent *a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  uint64_t v13;
  SipSession *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void (**v24)(ImsUuid *__hidden);
  std::string v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *__p[2];
  char v31;
  void *v32[2];
  char v33;

  std::string::basic_string[abi:ne180100]<0>(v32, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleMedia", 11);
  *(_BYTE *)(v6 + 17) = 0;
  if ((_DWORD)a3)
    v7 = "A";
  else
    v7 = "Dea";
  if ((_DWORD)a3)
    v8 = 1;
  else
    v8 = 3;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)v7, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"ctivationEvent", 14);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v31 < 0)
    operator delete(__p[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v9)
  {
    v10 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v28 = 0;
    v29 = std::__shared_weak_count::lock(v9);
    if (v29)
      v28 = v10;
    else
      v10 = 0;
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    v10 = 0;
    v28 = 0;
    v29 = 0;
  }
  if (v10 == *((_QWORD *)this + 14))
  {
    v14 = *(SipSession **)(v10 + 384);
    if (v14 && SipSession::confirmed(v14))
    {
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
      v26 = *((_QWORD *)this + 14);
      v27 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v24 = off_1E78C0288;
      if (byte_1ED70CCB8[23] < 0)
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)byte_1ED70CCB8, *(std::string::size_type *)&byte_1ED70CCB8[8]);
      else
        v25 = *(std::string *)byte_1ED70CCB8;
      (*(void (**)(IMSCallManager *, uint64_t *, uint64_t, void (***)(ImsUuid *__hidden)))(*(_QWORD *)this + 208))(this, &v26, a3, &v24);
      v24 = off_1E78C0288;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      v18 = v27;
      if (v27)
      {
        v19 = (unint64_t *)&v27->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Ignore for non-conference call.", 31);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v31 < 0)
      operator delete(__p[0]);
    if (v33 < 0)
      operator delete(v32[0]);
  }
  v21 = v29;
  if (v29)
  {
    v22 = (unint64_t *)&v29->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BEEBBBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSCallManager::handleMediaActivationEvent(IMSCallManager *this, BambiCallEvent *a2, uint64_t a3)
{
  IMSCallManager::handleMediaActivationEvent((IMSCallManager *)((char *)this - 16), a2, a3);
}

_QWORD *IMSCallManager::removeCallInfo(_QWORD *this, IMSCallInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this[5];
  v2 = this[6];
  if (v3 != v2)
  {
    v4 = this;
    v5 = 0;
    v6 = this[5];
    while (*(IMSCallInfo **)(v3 + v5) != a2)
    {
      v5 += 8;
      if (v3 + v5 == v2)
        return this;
    }
    if (a2)
    {
      this = (_QWORD *)(*(uint64_t (**)(IMSCallInfo *))(*(_QWORD *)a2 + 8))(a2);
      v6 = v4[5];
      v2 = v4[6];
    }
    v7 = v3 + v5;
    v8 = v2 - (v7 + 8);
    if (v2 != v7 + 8)
    {
      this = memmove((void *)v7, (const void *)(v7 + 8), v2 - (v7 + 8));
      v6 = v4[5];
    }
    v4[6] = v7 + v8;
    if (v6 == v7 + v8)
      *((_DWORD *)v4 + 50) = 0;
  }
  return this;
}

void IMSCallManager::handleBurstDtmfSendComplete(IMSCallManager *this)
{
  uint64_t v1;
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(v4, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v1 = ImsLogger::debug(ims::_logger, (uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v1 + 8), (uint64_t)"handleBurstDtmfSendComplete", 27);
  *(_BYTE *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v1 + 17) = 0;
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_1BEEBBDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleSessionConfirmedEvent(IMSCallManager *this, BambiCallSessionConfirmedEvent *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void (**v17)(ImsUuid *__hidden);
  std::string v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v3)
  {
    v4 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    v25 = 0;
    v7 = std::__shared_weak_count::lock(v3);
    v26 = v7;
    if (v7)
      v25 = v4;
    else
      v4 = 0;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    v7 = 0;
    v4 = 0;
    v25 = 0;
    v26 = 0;
  }
  if (v4 == *((_QWORD *)this + 14))
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Conference session confirmed", 28);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v22 < 0)
      operator delete(__p[0]);
    if (v24 < 0)
      operator delete(v23[0]);
    v19 = v4;
    v20 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v17 = off_1E78C0288;
    if (byte_1ED70CCB8[23] < 0)
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)byte_1ED70CCB8, *(std::string::size_type *)&byte_1ED70CCB8[8]);
    else
      v18 = *(std::string *)byte_1ED70CCB8;
    (*(void (**)(IMSCallManager *, uint64_t *, uint64_t, void (***)(ImsUuid *__hidden)))(*(_QWORD *)this + 208))(this, &v19, 1, &v17);
    v17 = off_1E78C0288;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    v14 = v20;
    if (v20)
    {
      v15 = (unint64_t *)&v20->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v8 = v26;
  if (v26)
  {
    v9 = (unint64_t *)&v26->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BEEBC03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29 - 48);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSCallManager::handleSessionConfirmedEvent(IMSCallManager *this, BambiCallSessionConfirmedEvent *a2)
{
  IMSCallManager::handleSessionConfirmedEvent((IMSCallManager *)((char *)this - 16), a2);
}

uint64_t IMSCallManager::sendConferenceSubscriptionEvent(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v4;

  v4 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 16) + 48))(v4 + 16, a3);
}

void IMSCallManager::handleSessionTerminatedEvent(IMSCallManager *this, BambiCallSessionTerminatedEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t i;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  void (**v52)(ImsUuid *__hidden);
  std::string v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void *__p;
  std::__shared_weak_count *v57;
  char v58;
  std::string v59;
  uint64_t v60;
  std::__shared_weak_count *v61;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v60 = 0;
    v8 = std::__shared_weak_count::lock(v4);
    v61 = v8;
    if (v8)
      v60 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v8 = 0;
    v5 = 0;
    v60 = 0;
    v61 = 0;
  }
  if (v5 != *((_QWORD *)this + 14))
    goto LABEL_82;
  std::string::basic_string[abi:ne180100]<0>(&v59, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)&v59, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Terminated conference call", 26);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v58 < 0)
    operator delete(__p);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  v54 = v5;
  v55 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v52 = off_1E78C0288;
  if (byte_1ED70CCB8[23] < 0)
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)byte_1ED70CCB8, *(std::string::size_type *)&byte_1ED70CCB8[8]);
  else
    v53 = *(std::string *)byte_1ED70CCB8;
  (*(void (**)(IMSCallManager *, uint64_t *, _QWORD, void (***)(ImsUuid *__hidden)))(*(_QWORD *)this + 208))(this, &v54, 0, &v52);
  v52 = off_1E78C0288;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  v12 = v55;
  if (v55)
  {
    v13 = (unint64_t *)&v55->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  memset(&v59, 0, sizeof(v59));
  v15 = v60;
  __p = 0;
  v57 = 0;
  v16 = *(std::__shared_weak_count **)(v60 + 360);
  if (!v16)
  {
    v17 = 0;
    goto LABEL_31;
  }
  v17 = std::__shared_weak_count::lock(v16);
  v57 = v17;
  if (!v17)
  {
LABEL_31:
    v18 = 0;
    goto LABEL_32;
  }
  v18 = *(_QWORD *)(v15 + 352);
  __p = (void *)v18;
LABEL_32:
  if (*(char *)(v18 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)(v18 + 4136), *(_QWORD *)(v18 + 4144));
  else
    v59 = *(std::string *)(v18 + 4136);
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  IMSCallManager::sendCallStatusRequest((uint64_t)this, (uint64_t)&v59, 2, 1, 0);
  v21 = *((_QWORD *)this + 3);
  v22 = *(void **)(v21 + 288);
  v23 = *(std::__shared_weak_count **)(v21 + 296);
  __p = v22;
  v57 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  IMSMetricsManager::logSessionTerminationEvent((IMSMetricsManager *)v22, a2, 255, 255, 0);
  if (v23)
  {
    v26 = (unint64_t *)&v23->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v28 = *((_QWORD *)this + 3);
  v29 = *(_QWORD **)(v28 + 288);
  v30 = *(std::__shared_weak_count **)(v28 + 296);
  __p = v29;
  v57 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = v29 + 22;
  for (i = v29[23]; (_QWORD *)i != v33; i = *(_QWORD *)(i + 8))
    (*(void (**)(_QWORD, BambiCallSessionTerminatedEvent *))(**(_QWORD **)(i + 16) + 80))(*(_QWORD *)(i + 16), a2);
  if (v30)
  {
    v35 = (unint64_t *)&v30->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v37 = IMSClientManager::delegateForStack((void **)&v59.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 + 16) + 48))(v37 + 16, 1);
  v38 = (uint64_t *)*((_QWORD *)this + 5);
  v39 = (uint64_t *)*((_QWORD *)this + 6);
  while (v38 != v39)
  {
    v40 = *v38;
    v41 = *(_QWORD *)(*v38 + 128);
    v42 = *(std::__shared_weak_count **)(*v38 + 136);
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    if (v41 && !*(_QWORD *)(v40 + 552))
    {
      v47 = *(unsigned __int8 *)(v40 + 570);
      if (v42)
      {
        v48 = (unint64_t *)&v42->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v47)
        *(_BYTE *)(v40 + 570) = 0;
    }
    else if (v42)
    {
      v45 = (unint64_t *)&v42->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    ++v38;
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  v8 = v61;
LABEL_82:
  if (v8)
  {
    v50 = (unint64_t *)&v8->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BEEBC5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 64);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSCallManager::handleSessionTerminatedEvent(IMSCallManager *this, BambiCallSessionTerminatedEvent *a2)
{
  IMSCallManager::handleSessionTerminatedEvent((IMSCallManager *)((char *)this - 16), a2);
}

void IMSCallManager::handleSessionActivatedEvent(IMSCallManager *this, BambiCallEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  BambiCall *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void (**v39)(ImsUuid *__hidden);
  std::string v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  void (**v43)(ImsUuid *__hidden);
  std::string v44;
  void *__p[2];
  char v46;
  BambiCall *v47;
  std::__shared_weak_count *v48;
  char v49;
  uint64_t v50;
  std::__shared_weak_count *v51;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v50 = 0;
    v8 = std::__shared_weak_count::lock(v4);
    v51 = v8;
    if (v8)
      v50 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v8 = 0;
    v5 = 0;
    v50 = 0;
    v51 = 0;
  }
  if (v5 != *((_QWORD *)this + 14))
    goto LABEL_10;
  std::string::basic_string[abi:ne180100]<0>(&v47, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v12 = ImsLogger::debug(ims::_logger, (uint64_t)&v47, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Conference call activated", 25);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  if (v46 < 0)
    operator delete(__p[0]);
  if (v49 < 0)
    operator delete(v47);
  v13 = (uint64_t *)*((_QWORD *)this + 5);
  v14 = (uint64_t *)*((_QWORD *)this + 6);
  if (v13 != v14)
  {
    while (1)
    {
      v15 = *v13;
      v16 = *(_QWORD *)(*v13 + 552);
      v17 = *(std::__shared_weak_count **)(*v13 + 560);
      if (!v17)
        goto LABEL_26;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (v16)
        {
LABEL_27:
          v43 = off_1E78C0288;
          if (*(char *)(v15 + 103) < 0)
            std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)(v15 + 80), *(_QWORD *)(v15 + 88));
          else
            v44 = *(std::string *)(v15 + 80);
          (*(void (**)(IMSCallManager *, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallEvent *))(*(_QWORD *)this + 232))(this, &v43, CFSTR("kCallStatusActive"), *(unsigned __int8 *)(v15 + 40), a2);
          v43 = off_1E78C0288;
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44.__r_.__value_.__l.__data_);
          v21 = *(_QWORD *)(v15 + 552);
          v22 = *(std::__shared_weak_count **)(v15 + 560);
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          v25 = *(std::__shared_weak_count **)(v21 + 152);
          if (v25)
          {
            v26 = *(BambiCall **)(v21 + 144);
            v27 = (unint64_t *)&v25->__shared_weak_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
            v47 = 0;
            v48 = std::__shared_weak_count::lock(v25);
            if (v48)
              v47 = v26;
            std::__shared_weak_count::__release_weak(v25);
            if (!v22)
              goto LABEL_49;
LABEL_45:
            v29 = (unint64_t *)&v22->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          else
          {
            v47 = 0;
            v48 = 0;
            if (v22)
              goto LABEL_45;
          }
LABEL_49:
          if (v47)
            BambiCall::sendHoldResumeIndication(v47, (*((_DWORD *)v47 + 110) & 0xFFFFFFFE) == 2);
          v31 = v48;
          if (v48)
          {
            v32 = (unint64_t *)&v48->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
        }
      }
      else
      {
LABEL_26:
        if (v16)
          goto LABEL_27;
      }
      if (++v13 == v14)
      {
        v5 = v50;
        v8 = v51;
        break;
      }
    }
  }
  v41 = v5;
  v42 = v8;
  if (v8)
  {
    v34 = (unint64_t *)&v8->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v39 = off_1E78C0288;
  if (byte_1ED70CCB8[23] < 0)
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)byte_1ED70CCB8, *(std::string::size_type *)&byte_1ED70CCB8[8]);
  else
    v40 = *(std::string *)byte_1ED70CCB8;
  (*(void (**)(IMSCallManager *, uint64_t *, uint64_t, void (***)(ImsUuid *__hidden)))(*(_QWORD *)this + 208))(this, &v41, 1, &v39);
  v39 = off_1E78C0288;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v36 = v42;
  if (v42)
  {
    v37 = (unint64_t *)&v42->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
LABEL_10:
  v9 = v51;
  if (v51)
  {
    v10 = (unint64_t *)&v51->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEEBCA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v36 - 96);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSCallManager::handleSessionActivatedEvent(IMSCallManager *this, BambiCallEvent *a2)
{
  IMSCallManager::handleSessionActivatedEvent((IMSCallManager *)((char *)this - 16), a2);
}

void IMSCallManager::handleSessionActivationAcceptedEvent(BambiConferenceCall **this, BambiCallEvent *a2)
{
  std::__shared_weak_count *v3;
  BambiConferenceCall *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  BambiConferenceCall *v15;
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v3)
  {
    v4 = (BambiConferenceCall *)*((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    v15 = 0;
    v7 = std::__shared_weak_count::lock(v3);
    v16 = v7;
    if (v7)
      v15 = v4;
    else
      v4 = 0;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    v7 = 0;
    v4 = 0;
    v15 = 0;
    v16 = 0;
  }
  if (v4 == this[14])
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Conference call activation accepted", 35);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    BambiConferenceCall::conferenceCallActivated(this[14]);
  }
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BEEBCCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSCallManager::handleSessionActivationAcceptedEvent(BambiConferenceCall **this, BambiCallEvent *a2)
{
  IMSCallManager::handleSessionActivationAcceptedEvent(this - 2, a2);
}

void IMSCallManager::handleSessionHoldFailedEvent(IMSCallManager *this, BambiCallEvent *a2)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(v5, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"nothing to do for kIMSCallStatusHoldFailed", 42);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_1BEEBCDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleSessionResumeFailedEvent(IMSCallManager *this, BambiCallEvent *a2)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(v5, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"nothing to do for kIMSCallStatusResumeFailed", 44);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_1BEEBCEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleSessionLocalHeldEvent(IMSCallManager *this, BambiCallEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  BambiCall *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void (**v39)(ImsUuid *__hidden);
  std::string v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  void (**v43)(ImsUuid *__hidden);
  std::string v44;
  void *__p[2];
  char v46;
  BambiCall *v47;
  std::__shared_weak_count *v48;
  char v49;
  uint64_t v50;
  std::__shared_weak_count *v51;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v50 = 0;
    v8 = std::__shared_weak_count::lock(v4);
    v51 = v8;
    if (v8)
      v50 = v5;
    else
      v5 = 0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    v8 = 0;
    v5 = 0;
    v50 = 0;
    v51 = 0;
  }
  if (v5 != *((_QWORD *)this + 14))
    goto LABEL_10;
  std::string::basic_string[abi:ne180100]<0>(&v47, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v12 = ImsLogger::debug(ims::_logger, (uint64_t)&v47, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Conference call deactivated", 27);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  if (v46 < 0)
    operator delete(__p[0]);
  if (v49 < 0)
    operator delete(v47);
  v13 = (uint64_t *)*((_QWORD *)this + 5);
  v14 = (uint64_t *)*((_QWORD *)this + 6);
  if (v13 != v14)
  {
    while (1)
    {
      v15 = *v13;
      v16 = *(_QWORD *)(*v13 + 552);
      v17 = *(std::__shared_weak_count **)(*v13 + 560);
      if (!v17)
        goto LABEL_26;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (v16)
        {
LABEL_27:
          v43 = off_1E78C0288;
          if (*(char *)(v15 + 103) < 0)
            std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)(v15 + 80), *(_QWORD *)(v15 + 88));
          else
            v44 = *(std::string *)(v15 + 80);
          (*(void (**)(IMSCallManager *, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallEvent *))(*(_QWORD *)this + 232))(this, &v43, CFSTR("kCallStatusInactive"), *(unsigned __int8 *)(v15 + 40), a2);
          v43 = off_1E78C0288;
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44.__r_.__value_.__l.__data_);
          v21 = *(_QWORD *)(v15 + 552);
          v22 = *(std::__shared_weak_count **)(v15 + 560);
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          v25 = *(std::__shared_weak_count **)(v21 + 152);
          if (v25)
          {
            v26 = *(BambiCall **)(v21 + 144);
            v27 = (unint64_t *)&v25->__shared_weak_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
            v47 = 0;
            v48 = std::__shared_weak_count::lock(v25);
            if (v48)
              v47 = v26;
            std::__shared_weak_count::__release_weak(v25);
            if (!v22)
              goto LABEL_49;
LABEL_45:
            v29 = (unint64_t *)&v22->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          else
          {
            v47 = 0;
            v48 = 0;
            if (v22)
              goto LABEL_45;
          }
LABEL_49:
          if (v47)
            BambiCall::sendHoldResumeIndication(v47, (*((_DWORD *)v47 + 110) & 0xFFFFFFFE) == 2);
          v31 = v48;
          if (v48)
          {
            v32 = (unint64_t *)&v48->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
        }
      }
      else
      {
LABEL_26:
        if (v16)
          goto LABEL_27;
      }
      if (++v13 == v14)
      {
        v5 = v50;
        v8 = v51;
        break;
      }
    }
  }
  v41 = v5;
  v42 = v8;
  if (v8)
  {
    v34 = (unint64_t *)&v8->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v39 = off_1E78C0288;
  if (byte_1ED70CCB8[23] < 0)
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)byte_1ED70CCB8, *(std::string::size_type *)&byte_1ED70CCB8[8]);
  else
    v40 = *(std::string *)byte_1ED70CCB8;
  (*(void (**)(IMSCallManager *, uint64_t *, _QWORD, void (***)(ImsUuid *__hidden)))(*(_QWORD *)this + 208))(this, &v41, 0, &v39);
  v39 = off_1E78C0288;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v36 = v42;
  if (v42)
  {
    v37 = (unint64_t *)&v42->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
LABEL_10:
  v9 = v51;
  if (v51)
  {
    v10 = (unint64_t *)&v51->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEEBD32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v36 - 96);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSCallManager::handleSessionLocalHeldEvent(IMSCallManager *this, BambiCallEvent *a2)
{
  IMSCallManager::handleSessionLocalHeldEvent((IMSCallManager *)((char *)this - 16), a2);
}

uint64_t IMSCallManager::handleForceLTEFallbackEvent(uint64_t a1, void **a2)
{
  uint64_t v2;

  v2 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 104))(v2 + 16);
}

uint64_t `non-virtual thunk to'IMSCallManager::handleForceLTEFallbackEvent(uint64_t a1, void **a2)
{
  uint64_t v2;

  v2 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 104))(v2 + 16);
}

void IMSCallManager::handleConferenceEvent(IMSCallManager *this, BambiCallConferenceEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::string::size_type v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _BOOL4 v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  void (**v43)(ImsUuid *__hidden);
  uint64_t v44;
  void (**v45)(ImsUuid *__hidden);
  std::__shared_weak_count *v46;
  BambiCall *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  std::string::size_type v58;
  std::__shared_weak_count *v59;
  std::string::size_type v60;
  uint64_t v61;
  std::string::size_type v62;
  std::string::size_type v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  std::string::size_type v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t *v72;
  void (**v73)(ImsUuid *__hidden);
  std::string v74;
  void (**v75)(ImsUuid *__hidden);
  std::string v76;
  void *v77[2];
  char v78;
  void *v79[2];
  char v80;
  _BYTE __p[32];
  std::string v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  __int128 v85;
  uint64_t v86;

  v85 = 0uLL;
  v86 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v83 = 0;
    v84 = std::__shared_weak_count::lock(v4);
    if (v84)
    {
      v83 = v5;
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v8 = *(std::__shared_weak_count **)(v5 + 360);
        if (v8)
        {
          v9 = std::__shared_weak_count::lock(v8);
          if (v9)
          {
            v10 = v9;
            v11 = *(_QWORD *)(v5 + 352);
            p_shared_owners = (unint64_t *)&v9->__shared_owners_;
            do
              v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v10);
            }
            if (v11)
            {
              *(_OWORD *)&v82.__r_.__value_.__l.__data_ = 0uLL;
              v14 = *(std::__shared_weak_count **)(v83 + 360);
              if (v14)
              {
                v15 = std::__shared_weak_count::lock(v14);
                v82.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
                if (v15)
                {
                  v16 = *(_QWORD *)(v83 + 352);
                  v82.__r_.__value_.__r.__words[0] = v16;
LABEL_159:
                  if (*(char *)(v16 + 4159) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v16 + 4136), *(_QWORD *)(v16 + 4144));
                  }
                  else
                  {
                    v69 = v16 + 4136;
                    *(_OWORD *)__p = *(_OWORD *)v69;
                    *(_QWORD *)&__p[16] = *(_QWORD *)(v69 + 16);
                  }
                  if (SHIBYTE(v86) < 0)
                    operator delete((void *)v85);
                  v85 = *(_OWORD *)__p;
                  v86 = *(_QWORD *)&__p[16];
                  __p[23] = 0;
                  __p[0] = 0;
                  if (v15)
                  {
                    v70 = (unint64_t *)&v15->__shared_owners_;
                    do
                      v71 = __ldaxr(v70);
                    while (__stlxr(v71 - 1, v70));
                    if (!v71)
                    {
                      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                      std::__shared_weak_count::__release_weak(v15);
                    }
                  }
                  v18 = 1;
                  goto LABEL_23;
                }
              }
              else
              {
                v15 = 0;
              }
              v16 = 0;
              goto LABEL_159;
            }
          }
        }
      }
    }
    else
    {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v83 = 0;
    v84 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "call");
  std::string::basic_string[abi:ne180100]<0>(&v82, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v17 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v82);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Invalid sip stack for conference event", 38);
  *(_BYTE *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v17 + 17) = 0;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v18 = 0;
LABEL_23:
  v19 = v83;
  if (v83 == *((_QWORD *)this + 14))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v82, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v23 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Conference event: ", 18);
    *(_BYTE *)(v23 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    switch(*((_DWORD *)a2 + 16))
    {
      case 1:
        if (v18)
        {
          v24 = IMSClientManager::delegateForStack((void **)&v85);
          (*(void (**)(uint64_t))(*(_QWORD *)(v24 + 16) + 32))(v24 + 16);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "call");
        std::string::basic_string[abi:ne180100]<0>(&v82, (char *)&str_1_10);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v25 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Clear active call before conference", 35);
        *(_BYTE *)(v25 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v25 + 17) = 0;
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v82.__r_.__value_.__l.__data_);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (*((char *)this + 167) < 0)
        {
          **((_BYTE **)this + 18) = 0;
          *((_QWORD *)this + 19) = 0;
        }
        else
        {
          *((_BYTE *)this + 144) = 0;
          *((_BYTE *)this + 167) = 0;
        }
        goto LABEL_24;
      case 2:
        if (v18)
        {
          v26 = IMSClientManager::delegateForStack((void **)&v85);
          (*(void (**)(uint64_t))(*(_QWORD *)(v26 + 16) + 40))(v26 + 16);
        }
        v27 = (uint64_t *)*((_QWORD *)this + 5);
        v72 = (uint64_t *)*((_QWORD *)this + 6);
        if (v27 == v72)
          goto LABEL_24;
        break;
      case 3:
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = 0uLL;
        v56 = *(std::__shared_weak_count **)(v19 + 360);
        if (v56)
        {
          v57 = std::__shared_weak_count::lock(v56);
          v82.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
          if (v57)
          {
            v58 = *(_QWORD *)(v19 + 352);
            v82.__r_.__value_.__r.__words[0] = v58;
            goto LABEL_135;
          }
        }
        else
        {
          v57 = 0;
        }
        v58 = 0;
LABEL_135:
        if (*(char *)(v58 + 4159) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v58 + 4136), *(_QWORD *)(v58 + 4144));
        }
        else
        {
          v62 = v58 + 4136;
          *(_OWORD *)__p = *(_OWORD *)v62;
          *(_QWORD *)&__p[16] = *(_QWORD *)(v62 + 16);
        }
        v64 = IMSClientManager::delegateForStack((void **)__p);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v64 + 16) + 48))(v64 + 16, 0);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (v57)
        {
          v65 = (unint64_t *)&v57->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          goto LABEL_154;
        }
        goto LABEL_24;
      case 4:
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = 0uLL;
        v59 = *(std::__shared_weak_count **)(v19 + 360);
        if (v59)
        {
          v57 = std::__shared_weak_count::lock(v59);
          v82.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
          if (v57)
          {
            v60 = *(_QWORD *)(v19 + 352);
            v82.__r_.__value_.__r.__words[0] = v60;
            goto LABEL_139;
          }
        }
        else
        {
          v57 = 0;
        }
        v60 = 0;
LABEL_139:
        if (*(char *)(v60 + 4159) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v60 + 4136), *(_QWORD *)(v60 + 4144));
        }
        else
        {
          v63 = v60 + 4136;
          *(_OWORD *)__p = *(_OWORD *)v63;
          *(_QWORD *)&__p[16] = *(_QWORD *)(v63 + 16);
        }
        v67 = IMSClientManager::delegateForStack((void **)__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v67 + 16) + 48))(v67 + 16, 1);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (v57)
        {
          v68 = (unint64_t *)&v57->__shared_owners_;
          do
            v66 = __ldaxr(v68);
          while (__stlxr(v66 - 1, v68));
LABEL_154:
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        goto LABEL_24;
      case 5:
        v61 = IMSClientManager::delegateForStack((void **)&v85);
        (*(void (**)(uint64_t))(*(_QWORD *)(v61 + 16) + 24))(v61 + 16);
        goto LABEL_24;
      default:
        goto LABEL_24;
    }
    do
    {
      v28 = *v27;
      memset(&v82, 0, sizeof(v82));
      *(_QWORD *)__p = off_1E78C0288;
      v29 = (_OWORD *)(v28 + 80);
      if (*(char *)(v28 + 103) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)(v28 + 80), *(_QWORD *)(v28 + 88));
      }
      else
      {
        *(_OWORD *)&__p[8] = *v29;
        *(_QWORD *)&__p[24] = *(_QWORD *)(v28 + 96);
      }
      if ((__p[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
        *(_QWORD *)__p = off_1E78C0288;
        if ((__p[31] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
      }
      else
      {
        v82 = *(std::string *)&__p[8];
      }
      v30 = *(_QWORD *)(v28 + 552);
      v31 = *(std::__shared_weak_count **)(v28 + 560);
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      if (v30)
      {
        v34 = *(_QWORD *)(v28 + 552);
        v35 = *(std::__shared_weak_count **)(v28 + 560);
        if (!v35)
        {
          v38 = *(_DWORD *)(v34 + 240) == 6;
          if (!v31)
            goto LABEL_74;
          goto LABEL_69;
        }
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        v38 = *(_DWORD *)(v34 + 240) == 6;
        do
          v39 = __ldaxr(v36);
        while (__stlxr(v39 - 1, v36));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
          if (!v31)
            goto LABEL_74;
          goto LABEL_69;
        }
      }
      else
      {
        v38 = 0;
      }
      if (!v31)
        goto LABEL_74;
LABEL_69:
      v40 = (unint64_t *)&v31->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
LABEL_74:
      if (v38)
      {
        std::string::basic_string[abi:ne180100]<0>(v79, "call");
        std::string::basic_string[abi:ne180100]<0>(v77, (char *)&str_1_10);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v42 = ImsLogger::debug(ims::_logger, (uint64_t)v79, (uint64_t)v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"Sending active notification for ", 32);
        *(_BYTE *)(v42 + 17) = 0;
        *(_QWORD *)__p = off_1E78C0288;
        if (*(char *)(v28 + 103) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)(v28 + 80), *(_QWORD *)(v28 + 88));
          v43 = *(void (***)(ImsUuid *__hidden))__p;
        }
        else
        {
          *(_OWORD *)&__p[8] = *v29;
          *(_QWORD *)&__p[24] = *(_QWORD *)(v28 + 96);
          v43 = off_1E78C0288;
        }
        ((void (*)(uint64_t, uint64_t))v43[2])((uint64_t)__p, v42);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v42 + 17) = 0;
        *(_QWORD *)__p = off_1E78C0288;
        if ((__p[31] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
        if (v78 < 0)
          operator delete(v77[0]);
        if (v80 < 0)
          operator delete(v79[0]);
        v75 = off_1E78C0288;
        if (*(char *)(v28 + 103) < 0)
        {
          std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)(v28 + 80), *(_QWORD *)(v28 + 88));
        }
        else
        {
          *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *v29;
          v76.__r_.__value_.__r.__words[2] = *(_QWORD *)(v28 + 96);
        }
        (*(void (**)(IMSCallManager *, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallConferenceEvent *))(*(_QWORD *)this + 232))(this, &v75, CFSTR("kCallStatusActive"), *(unsigned __int8 *)(v28 + 40), a2);
        v75 = off_1E78C0288;
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v76.__r_.__value_.__l.__data_);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v79, "call");
        std::string::basic_string[abi:ne180100]<0>(v77, (char *)&str_1_10);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v44 = ImsLogger::debug(ims::_logger, (uint64_t)v79, (uint64_t)v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"Sending inactive notification for ", 34);
        *(_BYTE *)(v44 + 17) = 0;
        *(_QWORD *)__p = off_1E78C0288;
        if (*(char *)(v28 + 103) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)(v28 + 80), *(_QWORD *)(v28 + 88));
          v45 = *(void (***)(ImsUuid *__hidden))__p;
        }
        else
        {
          *(_OWORD *)&__p[8] = *v29;
          *(_QWORD *)&__p[24] = *(_QWORD *)(v28 + 96);
          v45 = off_1E78C0288;
        }
        ((void (*)(uint64_t, uint64_t))v45[2])((uint64_t)__p, v44);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v44 + 17) = 0;
        *(_QWORD *)__p = off_1E78C0288;
        if ((__p[31] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
        if (v78 < 0)
          operator delete(v77[0]);
        if (v80 < 0)
          operator delete(v79[0]);
        v73 = off_1E78C0288;
        if (*(char *)(v28 + 103) < 0)
        {
          std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)(v28 + 80), *(_QWORD *)(v28 + 88));
        }
        else
        {
          *(_OWORD *)&v74.__r_.__value_.__l.__data_ = *v29;
          v74.__r_.__value_.__r.__words[2] = *(_QWORD *)(v28 + 96);
        }
        (*(void (**)(IMSCallManager *, void (***)(ImsUuid *__hidden), const __CFString *, _QWORD, BambiCallConferenceEvent *))(*(_QWORD *)this + 232))(this, &v73, CFSTR("kCallStatusInactive"), *(unsigned __int8 *)(v28 + 40), a2);
        v73 = off_1E78C0288;
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        *(_BYTE *)(v28 + 570) = 0;
      }
      v47 = *(BambiCall **)(v28 + 128);
      v46 = *(std::__shared_weak_count **)(v28 + 136);
      if (v46)
      {
        v48 = (unint64_t *)&v46->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
        do
          v50 = __ldaxr(v48);
        while (__stlxr(v50 - 1, v48));
        if (v50)
        {
          if (v47)
            goto LABEL_114;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
          if (v47)
          {
LABEL_114:
            v47 = *(BambiCall **)(v28 + 128);
            v51 = *(std::__shared_weak_count **)(v28 + 136);
            *(_QWORD *)__p = v47;
            *(_QWORD *)&__p[8] = v51;
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
            }
            goto LABEL_117;
          }
        }
      }
      else if (v47)
      {
        v51 = 0;
        *(_OWORD *)__p = *(unint64_t *)(v28 + 128);
LABEL_117:
        BambiCall::sendHoldResumeIndication(v47, (*((_DWORD *)v47 + 110) & 0xFFFFFFFE) == 2);
        if (v51)
        {
          v54 = (unint64_t *)&v51->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      ++v27;
    }
    while (v27 != v72);
  }
LABEL_24:
  v20 = v84;
  if (v84)
  {
    v21 = (unint64_t *)&v84->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (SHIBYTE(v86) < 0)
    operator delete((void *)v85);
}

void sub_1BEEBDF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,void *a42,int a43,__int16 a44,char a45,char a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v50 - 160);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v50 - 128);
  if (*(char *)(v50 - 89) < 0)
    operator delete(*(void **)(v50 - 112));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSCallManager::handleConferenceEvent(IMSCallManager *this, BambiCallConferenceEvent *a2)
{
  IMSCallManager::handleConferenceEvent((IMSCallManager *)((char *)this - 16), a2);
}

void IMSCallManager::sendCallStatusChangedNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (**v7)(ImsUuid *__hidden);
  std::string __p;

  v7 = off_1E78C0288;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    __p = *(std::string *)(a2 + 8);
  (*(void (**)(uint64_t, void (***)(ImsUuid *__hidden), uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, &v7, a3, 255, a4);
  v7 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEEBE19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::sendCallStatusChangedNotification(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  std::string *v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  ImsPrefs *v10;
  void **ConvertSessionProgressToRingingKey;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::string::size_type v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::string::size_type v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::string::size_type v28;
  std::string::size_type v29;
  int v30;
  std::string *v31;
  uint64_t v32;
  std::string *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  char v39;
  _BOOL4 v40;
  std::string::size_type v41;
  std::string::size_type v42;
  int v43;
  std::string *v44;
  uint64_t v45;
  std::string *p_s1;
  int v47;
  int v48;
  int v49;
  int v50;
  char v51;
  _BOOL4 v52;
  _QWORD *v53;
  uint64_t v54;
  std::string::size_type v55;
  std::string::size_type v56;
  int v57;
  std::string *v58;
  uint64_t v59;
  std::string *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  _BOOL4 v66;
  std::string::size_type v67;
  std::string::size_type v68;
  int v69;
  std::string *v70;
  uint64_t v71;
  std::string *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char v77;
  _BOOL4 v78;
  _BOOL4 v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  _BOOL4 v83;
  uint64_t v84;
  _BOOL4 v85;
  _BOOL4 v86;
  _BOOL4 v87;
  _BOOL4 v88;
  _BOOL4 v89;
  _BOOL4 v90;
  _BOOL4 v91;
  _BOOL4 v92;
  _BOOL4 v93;
  _BOOL4 v94;
  _BOOL4 v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string __s1;
  SipStack *v100;
  std::__shared_weak_count *v101;
  void (**v102)(ImsUuid *__hidden);
  std::string __p;
  std::string v104;
  std::string v105;
  std::string v106;

  memset(&v106, 0, sizeof(v106));
  if (*(char *)(a2 + 31) < 0)
  {
    v7 = *(_QWORD *)(a2 + 16);
    if (v7)
    {
      v102 = off_1E78C0288;
      v6 = (std::string *)(a2 + 8);
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), v7);
      goto LABEL_6;
    }
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(&v105, "call");
    std::string::basic_string[abi:ne180100]<0>(&v104, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::warn(ims::_logger, (uint64_t)&v105, (uint64_t)&v104);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"UUID for call is empty - treating as LEGACY request", 51);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a2 + 31))
    goto LABEL_12;
  v102 = off_1E78C0288;
  v6 = (std::string *)(a2 + 8);
  __p = *(std::string *)(a2 + 8);
LABEL_6:
  v8 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v102);
  v9 = v8;
  v102 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v9)
    {
LABEL_8:
      v100 = 0;
      v101 = 0;
      IMSCallInfo::stack((IMSCallInfo *)v9, &v100);
      if (!v100)
      {
        std::string::basic_string[abi:ne180100]<0>(&v105, "call");
        std::string::basic_string[abi:ne180100]<0>(&v104, (char *)&str_1_10);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v15 = ImsLogger::warn(ims::_logger, (uint64_t)&v105, (uint64_t)&v104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Unable to resolve sip stack for callid: ", 40);
        *(_BYTE *)(v15 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v15 + 17) = 0;
LABEL_162:
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        v80 = v101;
        if (v101)
        {
          p_shared_owners = (unint64_t *)&v101->__shared_owners_;
          do
            v82 = __ldaxr(p_shared_owners);
          while (__stlxr(v82 - 1, p_shared_owners));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        goto LABEL_171;
      }
      v10 = (ImsPrefs *)SipStack::prefs(v100);
      ConvertSessionProgressToRingingKey = (void **)ImsPrefs::getConvertSessionProgressToRingingKey(v10);
      v12 = ImsPrefs::prefWithKey(v10, ConvertSessionProgressToRingingKey);
      if (v12)
      {
        if (!(*(unsigned int (**)(void *))(*(_QWORD *)v12 + 40))(v12))
          goto LABEL_24;
      }
      else if (!*((_BYTE *)ConvertSessionProgressToRingingKey + 57))
      {
        goto LABEL_24;
      }
      if (CFStringCompare(a3, CFSTR("kCallStatusInProgress"), 0) == kCFCompareEqualTo && !*(_BYTE *)(v9 + 569))
        a3 = CFSTR("kCallStatusRinging");
LABEL_24:
      v17 = *(_QWORD *)(v9 + 128);
      v16 = *(std::__shared_weak_count **)(v9 + 136);
      if (v16)
      {
        v18 = (unint64_t *)&v16->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        do
          v20 = __ldaxr(v18);
        while (__stlxr(v20 - 1, v18));
        if (v20)
        {
          if (!v17)
            goto LABEL_42;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
          if (!v17)
            goto LABEL_42;
        }
        v17 = *(_QWORD *)(v9 + 128);
        v21 = *(_QWORD *)(v9 + 136);
        v105.__r_.__value_.__r.__words[0] = v17;
        v105.__r_.__value_.__l.__size_ = v21;
        if (v21)
        {
          v22 = (unint64_t *)(v21 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
      }
      else
      {
        if (!v17)
          goto LABEL_42;
        *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v17;
      }
      std::string::operator=(&v106, (const std::string *)(v17 + 464));
      size = (std::__shared_weak_count *)v105.__r_.__value_.__l.__size_;
      if (v105.__r_.__value_.__l.__size_)
      {
        v25 = (unint64_t *)(v105.__r_.__value_.__l.__size_ + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
LABEL_42:
      memset(&v105, 0, sizeof(v105));
      if (*(char *)(a2 + 31) < 0)
        std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
      else
        v105 = *v6;
      memset(&v104, 0, sizeof(v104));
      if (*((char *)v100 + 4159) < 0)
      {
        std::string::__init_copy_ctor_external(&v104, *((const std::string::value_type **)v100 + 517), *((_QWORD *)v100 + 518));
      }
      else
      {
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v100 + 4136);
        v104.__r_.__value_.__r.__words[2] = *((_QWORD *)v100 + 519);
      }
      memset(&__s1, 0, sizeof(__s1));
      ims::CFString::asString(a3, (const void *)0x8000100, &__s1);
      std::string::basic_string[abi:ne180100]<0>(&v98, "call");
      std::string::basic_string[abi:ne180100]<0>(&v97, (char *)&str_1_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v27 = ImsLogger::debug(ims::_logger, (uint64_t)&v98, (uint64_t)&v97);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"Delegating ", 11);
      *(_BYTE *)(v27 + 17) = 0;
      LoggableString::LoggableString(&v96, &__s1);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v27 + 40))(v27, &v96);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)" notification for ", 18);
      *(_BYTE *)(v27 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v27);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v27 + 17) = 0;
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      ims::CFString::asString(CFSTR("kCallStatusTrying"), (const void *)0x8000100, &v98);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v28 = __s1.__r_.__value_.__l.__size_;
      v29 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      v30 = SHIBYTE(v98.__r_.__value_.__r.__words[2]);
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v29 = v98.__r_.__value_.__l.__size_;
      if (v28 != v29)
      {
        v40 = 0;
        if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_95;
        goto LABEL_73;
      }
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v98;
      else
        v31 = (std::string *)v98.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v40 = memcmp(__s1.__r_.__value_.__l.__data_, v31, __s1.__r_.__value_.__l.__size_) == 0;
      }
      else
      {
        if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
          v40 = 1;
          if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_95:
            if (v40)
              goto LABEL_96;
            goto LABEL_74;
          }
LABEL_73:
          operator delete(v98.__r_.__value_.__l.__data_);
          if (v40)
          {
LABEL_96:
            v53 = (_QWORD *)IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
            v54 = 6;
            goto LABEL_159;
          }
LABEL_74:
          ims::CFString::asString(CFSTR("kCallStatusActive"), (const void *)0x8000100, &v98);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            v41 = __s1.__r_.__value_.__l.__size_;
          v42 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
          v43 = SHIBYTE(v98.__r_.__value_.__r.__words[2]);
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v42 = v98.__r_.__value_.__l.__size_;
          if (v41 == v42)
          {
            if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v44 = &v98;
            else
              v44 = (std::string *)v98.__r_.__value_.__r.__words[0];
            if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v52 = memcmp(__s1.__r_.__value_.__l.__data_, v44, __s1.__r_.__value_.__l.__size_) == 0;
            }
            else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
            {
              v45 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
              p_s1 = &__s1;
              do
              {
                v48 = p_s1->__r_.__value_.__s.__data_[0];
                p_s1 = (std::string *)((char *)p_s1 + 1);
                v47 = v48;
                v50 = v44->__r_.__value_.__s.__data_[0];
                v44 = (std::string *)((char *)v44 + 1);
                v49 = v50;
                v38 = v45-- != 0;
                v51 = v38;
                v52 = v47 == v49;
              }
              while (v47 == v49 && (v51 & 1) != 0);
            }
            else
            {
              v52 = 1;
            }
          }
          else
          {
            v52 = 0;
          }
          if (v43 < 0)
          {
            operator delete(v98.__r_.__value_.__l.__data_);
            if (v52)
              goto LABEL_103;
          }
          else if (v52)
          {
LABEL_103:
            v53 = (_QWORD *)IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
            v54 = 4;
            goto LABEL_159;
          }
          ims::CFString::asString(CFSTR("kCallStatusInactive"), (const void *)0x8000100, &v98);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v55 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            v55 = __s1.__r_.__value_.__l.__size_;
          v56 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
          v57 = SHIBYTE(v98.__r_.__value_.__r.__words[2]);
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v56 = v98.__r_.__value_.__l.__size_;
          if (v55 == v56)
          {
            if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = &v98;
            else
              v58 = (std::string *)v98.__r_.__value_.__r.__words[0];
            if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v66 = memcmp(__s1.__r_.__value_.__l.__data_, v58, __s1.__r_.__value_.__l.__size_) == 0;
            }
            else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
            {
              v59 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
              v60 = &__s1;
              do
              {
                v62 = v60->__r_.__value_.__s.__data_[0];
                v60 = (std::string *)((char *)v60 + 1);
                v61 = v62;
                v64 = v58->__r_.__value_.__s.__data_[0];
                v58 = (std::string *)((char *)v58 + 1);
                v63 = v64;
                v38 = v59-- != 0;
                v65 = v38;
                v66 = v61 == v63;
              }
              while (v61 == v63 && (v65 & 1) != 0);
            }
            else
            {
              v66 = 1;
            }
          }
          else
          {
            v66 = 0;
          }
          if (v57 < 0)
            operator delete(v98.__r_.__value_.__l.__data_);
          if (v66)
          {
            v53 = (_QWORD *)IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
            v54 = 5;
          }
          else
          {
            ims::CFString::asString(CFSTR("kCallStatusRinging"), (const void *)0x8000100, &v98);
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v67 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            else
              v67 = __s1.__r_.__value_.__l.__size_;
            v68 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
            v69 = SHIBYTE(v98.__r_.__value_.__r.__words[2]);
            if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v68 = v98.__r_.__value_.__l.__size_;
            if (v67 == v68)
            {
              if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v70 = &v98;
              else
                v70 = (std::string *)v98.__r_.__value_.__r.__words[0];
              if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                v78 = memcmp(__s1.__r_.__value_.__l.__data_, v70, __s1.__r_.__value_.__l.__size_) == 0;
              }
              else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
              {
                v71 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
                v72 = &__s1;
                do
                {
                  v74 = v72->__r_.__value_.__s.__data_[0];
                  v72 = (std::string *)((char *)v72 + 1);
                  v73 = v74;
                  v76 = v70->__r_.__value_.__s.__data_[0];
                  v70 = (std::string *)((char *)v70 + 1);
                  v75 = v76;
                  v38 = v71-- != 0;
                  v77 = v38;
                  v78 = v73 == v75;
                }
                while (v73 == v75 && (v77 & 1) != 0);
              }
              else
              {
                v78 = 1;
              }
            }
            else
            {
              v78 = 0;
            }
            if (v69 < 0)
              operator delete(v98.__r_.__value_.__l.__data_);
            if (v78)
            {
              v53 = (_QWORD *)IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
              v54 = 7;
            }
            else
            {
              ims::CFString::asString(CFSTR("kCallStatusJoined"), (const void *)0x8000100, &v98);
              v79 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v98);
              if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v98.__r_.__value_.__l.__data_);
              if (v79)
              {
                v53 = (_QWORD *)IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
                v54 = 8;
              }
              else
              {
                ims::CFString::asString(CFSTR("kCallStatusDialing"), (const void *)0x8000100, &v98);
                if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v98))
                {
                  v83 = 1;
                }
                else
                {
                  ims::CFString::asString(CFSTR("kCallStatusPulling"), (const void *)0x8000100, &v97);
                  v83 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v97);
                  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v97.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v98.__r_.__value_.__l.__data_);
                if (v83)
                {
                  v84 = IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
                  (*(void (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v84 + 80))(v84, &v105, &v106);
LABEL_160:
                  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__s1.__r_.__value_.__l.__data_);
                  goto LABEL_162;
                }
                ims::CFString::asString(CFSTR("kCallStatusInProgress"), (const void *)0x8000100, &v98);
                v85 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v98);
                if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v98.__r_.__value_.__l.__data_);
                if (v85)
                {
                  v53 = (_QWORD *)IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
                  v54 = 9;
                }
                else
                {
                  ims::CFString::asString(CFSTR("kCallStatusAcknowledged"), (const void *)0x8000100, &v98);
                  v86 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v98);
                  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v98.__r_.__value_.__l.__data_);
                  if (v86)
                  {
                    v53 = (_QWORD *)IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
                    v54 = 18;
                  }
                  else
                  {
                    ims::CFString::asString(CFSTR("kCallStatusHoldFailed"), (const void *)0x8000100, &v98);
                    v87 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v98);
                    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v98.__r_.__value_.__l.__data_);
                    if (v87)
                    {
                      v53 = (_QWORD *)IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
                      v54 = 13;
                    }
                    else
                    {
                      ims::CFString::asString(CFSTR("kCallStatusResumeFailed"), (const void *)0x8000100, &v98);
                      v88 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v98);
                      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v98.__r_.__value_.__l.__data_);
                      if (v88)
                      {
                        v53 = (_QWORD *)IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
                        v54 = 14;
                      }
                      else
                      {
                        ims::CFString::asString(CFSTR("kCallStatusPlayLRBT"), (const void *)0x8000100, &v98);
                        v89 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v98);
                        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v98.__r_.__value_.__l.__data_);
                        if (v89)
                          goto LABEL_204;
                        ims::CFString::asString(CFSTR("kCallStatusStopLRBT"), (const void *)0x8000100, &v98);
                        v90 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v98);
                        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v98.__r_.__value_.__l.__data_);
                        if (v90)
                        {
LABEL_204:
                          v53 = (_QWORD *)IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
                          v54 = 12;
                        }
                        else
                        {
                          ims::CFString::asString(CFSTR("kCallStatusMediaActive"), (const void *)0x8000100, &v98);
                          v91 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v98);
                          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v98.__r_.__value_.__l.__data_);
                          if (v91)
                            goto LABEL_211;
                          ims::CFString::asString(CFSTR("kCallStatusMediaInactive"), (const void *)0x8000100, &v98);
                          v92 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v98);
                          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v98.__r_.__value_.__l.__data_);
                          if (v92)
                          {
LABEL_211:
                            v53 = (_QWORD *)IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
                            v54 = 11;
                          }
                          else
                          {
                            ims::CFString::asString(CFSTR("kCallStatusMediaInitialized"), (const void *)0x8000100, &v98);
                            v93 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v98);
                            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v98.__r_.__value_.__l.__data_);
                            if (v93)
                            {
                              v53 = (_QWORD *)IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
                              v54 = 19;
                            }
                            else
                            {
                              ims::CFString::asString(CFSTR("kIMSCallStatusTextMediaDetected"), (const void *)0x8000100, &v98);
                              v94 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v98);
                              if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v98.__r_.__value_.__l.__data_);
                              if (v94)
                              {
                                v53 = (_QWORD *)IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
                                v54 = 15;
                              }
                              else
                              {
                                ims::CFString::asString(CFSTR("kIMSCallStatusTextMediaDeactivated"), (const void *)0x8000100, &v98);
                                v95 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v98);
                                if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v98.__r_.__value_.__l.__data_);
                                if (!v95)
                                  goto LABEL_160;
                                v53 = (_QWORD *)IMSClientManager::delegateForStack((void **)&v104.__r_.__value_.__l.__data_);
                                v54 = 16;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_159:
          (*(void (**)(void))(*v53 + 8 * v54))();
          goto LABEL_160;
        }
        v32 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
        v33 = &__s1;
        do
        {
          v35 = v33->__r_.__value_.__s.__data_[0];
          v33 = (std::string *)((char *)v33 + 1);
          v34 = v35;
          v37 = v31->__r_.__value_.__s.__data_[0];
          v31 = (std::string *)((char *)v31 + 1);
          v36 = v37;
          v38 = v32-- != 0;
          v39 = v38;
          v40 = v34 == v36;
        }
        while (v34 == v36 && (v39 & 1) != 0);
      }
      if ((v30 & 0x80000000) == 0)
        goto LABEL_95;
      goto LABEL_73;
    }
  }
  else if (v8)
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v105, "call");
  std::string::basic_string[abi:ne180100]<0>(&v104, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v14 = ImsLogger::warn(ims::_logger, (uint64_t)&v105, (uint64_t)&v104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Unable to find call information for UUID ", 41);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v14);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
LABEL_15:
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
LABEL_171:
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
}

void sub_1BEEBEF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a32 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  if (*(char *)(v47 - 65) < 0)
    operator delete(*(void **)(v47 - 88));
  _Unwind_Resume(a1);
}

void IMSCallManager::failPendingCalls(_QWORD *a1, unsigned __int8 *a2)
{
  IMSCallInfo **v2;
  IMSCallInfo **v3;
  IMSCallInfo **v6;
  IMSCallInfo **v7;
  unint64_t v8;
  IMSCallInfo *v9;
  unsigned __int8 *v10;
  std::string::size_type size;
  uint64_t v12;
  int v13;
  uint64_t v14;
  std::string *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  _BOOL4 v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  IMSCallInfo **v31;
  IMSCallInfo **v32;
  IMSCallInfo *v33;
  IMSCallInfo **v34;
  void (**v35)(ImsUuid *__hidden);
  std::string __p;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::string v39;

  v3 = (IMSCallInfo **)a1[5];
  v2 = (IMSCallInfo **)a1[6];
  if (v3 == v2)
    return;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *v3;
    if (!*v3 || *((_DWORD *)v9 + 144) != 1)
      goto LABEL_63;
    IMSCallInfo::stack(*v3, &v37);
    if (*(char *)(v37 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(v37 + 4136), *(_QWORD *)(v37 + 4144));
    else
      v39 = *(std::string *)(v37 + 4136);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      size = v39.__r_.__value_.__l.__size_;
    v12 = a2[23];
    v13 = (char)v12;
    if ((v12 & 0x80u) != 0)
      v12 = *((_QWORD *)a2 + 1);
    if (size != v12)
    {
      v22 = 0;
      if ((*((_BYTE *)&v39.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_32;
      goto LABEL_28;
    }
    if (v13 >= 0)
      v10 = a2;
    else
      v10 = *(unsigned __int8 **)a2;
    if ((*((_BYTE *)&v39.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v23 = (void *)v39.__r_.__value_.__r.__words[0];
      v22 = memcmp(v39.__r_.__value_.__l.__data_, v10, v39.__r_.__value_.__l.__size_) == 0;
      goto LABEL_30;
    }
    if (*((_BYTE *)&v39.__r_.__value_.__s + 23))
    {
      v14 = HIBYTE(v39.__r_.__value_.__r.__words[2]) - 1;
      v15 = &v39;
      do
      {
        v17 = v15->__r_.__value_.__s.__data_[0];
        v15 = (std::string *)((char *)v15 + 1);
        v16 = v17;
        v19 = *v10++;
        v18 = v19;
        v21 = v14-- != 0;
        v22 = v16 == v18;
      }
      while (v16 == v18 && v21);
      if ((*((_BYTE *)&v39.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_32;
LABEL_28:
      v23 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v23);
      goto LABEL_32;
    }
    v22 = 1;
LABEL_32:
    v24 = v38;
    if (!v38)
      goto LABEL_36;
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v24->__on_zero_shared)(v24, v10);
      std::__shared_weak_count::__release_weak(v24);
      if (!v22)
        goto LABEL_63;
    }
    else
    {
LABEL_36:
      if (!v22)
        goto LABEL_63;
    }
    v35 = off_1E78C0288;
    if (*((char *)v9 + 103) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v9 + 10), *((_QWORD *)v9 + 11));
    else
      __p = *(std::string *)((char *)v9 + 80);
    ims::CFString::asString(CFSTR("kCallDisconnectionReasonUnknownError"), (const void *)0x8000100, &v39);
    IMSCallManager::sendCallDisconnectionNotification((uint64_t)a1, (uint64_t)&v35, (void **)a2, &v39, 1);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    v35 = off_1E78C0288;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((unint64_t)v7 >= v8)
    {
      v27 = v7 - v6;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61)
        std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v8 - (_QWORD)v6) >> 2 > v28)
        v28 = (uint64_t)(v8 - (_QWORD)v6) >> 2;
      if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      if (v29)
        v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v29);
      else
        v30 = 0;
      v31 = (IMSCallInfo **)(v29 + 8 * v27);
      *v31 = v9;
      v32 = v31 + 1;
      while (v7 != v6)
      {
        v33 = *--v7;
        *--v31 = v33;
      }
      v8 = v29 + 8 * v30;
      if (v6)
        operator delete(v6);
      v6 = v31;
      v7 = v32;
    }
    else
    {
      *v7++ = v9;
    }
LABEL_63:
    ++v3;
  }
  while (v3 != v2);
  if (v6 != v7)
  {
    v34 = v6;
    do
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 240))(a1, *v34++);
    while (v34 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1BEEBF430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  if (v25)
    operator delete(v25);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::continuePendingCalls(uint64_t a1, unsigned __int8 *a2)
{
  IMSCallInfo **v2;
  IMSCallInfo **v3;
  IMSCallInfo *v6;
  unsigned __int8 *v7;
  std::string::size_type size;
  uint64_t v9;
  int v10;
  uint64_t v11;
  std::string *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  _BOOL4 v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  void (**v26)(ImsUuid *__hidden);
  void (**v27)(ImsUuid *__hidden);
  std::string v28;
  std::string v29;
  uint64_t v30;
  void *__p[2];
  char v32;
  void *v33;
  std::__shared_weak_count *v34;
  char v35;

  v2 = *(IMSCallInfo ***)(a1 + 40);
  v3 = *(IMSCallInfo ***)(a1 + 48);
  while (v2 != v3)
  {
    v6 = *v2;
    if (!*v2 || *((_DWORD *)v6 + 144) != 1)
      goto LABEL_55;
    IMSCallInfo::stack(*v2, &v33);
    if (*((char *)v33 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v29, *((const std::string::value_type **)v33 + 517), *((_QWORD *)v33 + 518));
    else
      v29 = *(std::string *)((char *)v33 + 4136);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    else
      size = v29.__r_.__value_.__l.__size_;
    v9 = a2[23];
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *((_QWORD *)a2 + 1);
    if (size == v9)
    {
      if (v10 >= 0)
        v7 = a2;
      else
        v7 = *(unsigned __int8 **)a2;
      if ((*((_BYTE *)&v29.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v20 = (void *)v29.__r_.__value_.__r.__words[0];
        v19 = memcmp(v29.__r_.__value_.__l.__data_, v7, v29.__r_.__value_.__l.__size_) == 0;
        goto LABEL_29;
      }
      if (!*((_BYTE *)&v29.__r_.__value_.__s + 23))
      {
        v19 = 1;
        goto LABEL_31;
      }
      v11 = HIBYTE(v29.__r_.__value_.__r.__words[2]) - 1;
      v12 = &v29;
      do
      {
        v14 = v12->__r_.__value_.__s.__data_[0];
        v12 = (std::string *)((char *)v12 + 1);
        v13 = v14;
        v16 = *v7++;
        v15 = v16;
        v18 = v11-- != 0;
        v19 = v13 == v15;
      }
      while (v13 == v15 && v18);
      if ((*((_BYTE *)&v29.__r_.__value_.__s + 23) & 0x80) != 0)
      {
LABEL_27:
        v20 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_29:
        operator delete(v20);
      }
    }
    else
    {
      v19 = 0;
      if ((*((_BYTE *)&v29.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_27;
    }
LABEL_31:
    v21 = v34;
    if (!v34)
      goto LABEL_35;
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v21->__on_zero_shared)(v21, v7);
      std::__shared_weak_count::__release_weak(v21);
      if (v19)
      {
LABEL_36:
        if ((IMSCallInfo::startCall(v6) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v33, "call");
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v24 = ImsLogger::error(ims::_logger, (uint64_t)&v33, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Unable to start pending call ", 29);
          *(_BYTE *)(v24 + 17) = 0;
          v29.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
          v25 = (_OWORD *)((char *)v6 + 80);
          if (*((char *)v6 + 103) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v29.__r_.__value_.__r.__words[1], *((const std::string::value_type **)v6 + 10), *((_QWORD *)v6 + 11));
            v26 = (void (**)(ImsUuid *__hidden))v29.__r_.__value_.__r.__words[0];
          }
          else
          {
            *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = *v25;
            v30 = *((_QWORD *)v6 + 12);
            v26 = off_1E78C0288;
          }
          ((void (*)(uint64_t, uint64_t))v26[2])((uint64_t)&v29, v24);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v24 + 17) = 0;
          v29.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
          if (SHIBYTE(v30) < 0)
            operator delete((void *)v29.__r_.__value_.__l.__size_);
          if (v32 < 0)
            operator delete(__p[0]);
          if (v35 < 0)
            operator delete(v33);
          v27 = off_1E78C0288;
          if (*((char *)v6 + 103) < 0)
          {
            std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)v6 + 10), *((_QWORD *)v6 + 11));
          }
          else
          {
            *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v25;
            v28.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 12);
          }
          ims::CFString::asString(CFSTR("kCallDisconnectionReasonUnknownError"), (const void *)0x8000100, &v29);
          IMSCallManager::sendCallDisconnectionNotification(a1, (uint64_t)&v27, (void **)a2, &v29, 1);
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
          v27 = off_1E78C0288;
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
LABEL_35:
      if (v19)
        goto LABEL_36;
    }
LABEL_55:
    ++v2;
  }
}

void sub_1BEEBF7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleQualityOfServiceEstablished(_QWORD *a1, unsigned int a2, int a3, uint64_t *a4)
{
  _BYTE *v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  char v31;
  void *v32;
  std::__shared_weak_count *v33;
  char v34;

  std::string::basic_string[abi:ne180100]<0>(&v32, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = (_BYTE *)ImsLogger::debug(ims::_logger, (uint64_t)&v32, (uint64_t)__p);
  if (v31 < 0)
    operator delete(__p[0]);
  if (v34 < 0)
    operator delete(v32);
  v9 = (_QWORD *)*((_QWORD *)v8 + 1);
  if (a4[1] == *a4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Handling QoS notification without any ports", 43);
    v8[17] = 0;
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v8[17] = 0;
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Handling QoS notification for ", 30);
    v8[17] = 0;
    if (a3)
      v10 = "local";
    else
      v10 = "remote";
    if (a3)
      v11 = 5;
    else
      v11 = 6;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v8 + 1), (uint64_t)v10, v11);
    v8[17] = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v8 + 1), (uint64_t)" ports: ", 8);
    v8[17] = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    ims::join<std::__wrap_iter<unsigned short const*>>(*a4, a4[1], (uint64_t)__p, &v32);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)v8 + 32))(v8, &v32);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v8[17] = 0;
    if (v34 < 0)
      operator delete(v32);
    if (v31 < 0)
      operator delete(__p[0]);
  }
  v12 = (uint64_t *)a1[5];
  v13 = (uint64_t *)a1[6];
  while (v12 != v13)
  {
    v14 = *v12;
    v15 = *(void **)(*v12 + 128);
    v16 = *(std::__shared_weak_count **)(*v12 + 136);
    v32 = v15;
    v33 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    if (!v15)
    {
      v23 = 0;
      if (!v16)
        goto LABEL_38;
LABEL_34:
      v26 = (unint64_t *)&v16->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      goto LABEL_38;
    }
    v19 = *(void **)(v14 + 128);
    v20 = *(std::__shared_weak_count **)(v14 + 136);
    __p[0] = v19;
    __p[1] = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = BambiCall::setQualityOfServiceEstablished((uint64_t)v19, a2, a3, a4);
    if (v20)
    {
      v24 = (unint64_t *)&v20->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v16 = v33;
    if (v33)
      goto LABEL_34;
LABEL_38:
    if ((v23 & 1) != 0)
      return;
    ++v12;
  }
  v28 = a1[14];
  if (!v28 || (BambiCall::setQualityOfServiceEstablished(v28, a2, a3, a4) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v32, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v29 = ImsLogger::debug(ims::_logger, (uint64_t)&v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"handleQualityOfServiceEstablished: no call found ", 49);
    *(_BYTE *)(v29 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v29 + 17) = 0;
    if (v31 < 0)
      operator delete(__p[0]);
    if (v34 < 0)
      operator delete(v32);
  }
}

void sub_1BEEBFBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleQualityOfServiceEstablished(_QWORD *a1, int **a2)
{
  void *__p;
  void *v4;
  uint64_t v5;
  char v6;

  __p = 0;
  v4 = 0;
  v5 = 0;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned short>>>((uint64_t)&v6, *a2, a2[1], (uint64_t)&__p);
  IMSCallManager::handleQualityOfServiceEstablished(a1, 0, 1, (uint64_t *)&__p);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_1BEEBFCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleQualityOfServiceRevoked(IMSCallManager *this, unsigned int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  BambiCall *v20;
  uint64_t v21;
  void *__p[2];
  char v23;
  void *v24;
  std::__shared_weak_count *v25;
  char v26;

  v4 = (uint64_t *)*((_QWORD *)this + 5);
  v5 = (uint64_t *)*((_QWORD *)this + 6);
  while (v4 != v5)
  {
    v6 = *v4;
    v7 = *(void **)(*v4 + 128);
    v8 = *(std::__shared_weak_count **)(*v4 + 136);
    v24 = v7;
    v25 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (!v7)
    {
      v15 = 0;
      if (!v8)
        goto LABEL_22;
LABEL_18:
      v18 = (unint64_t *)&v8->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      goto LABEL_22;
    }
    v11 = *(void **)(v6 + 128);
    v12 = *(std::__shared_weak_count **)(v6 + 136);
    __p[0] = v11;
    __p[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = BambiCall::setQualityOfServiceRevoked((BambiCall *)v11, a2);
    if (v12)
    {
      v16 = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v8 = v25;
    if (v25)
      goto LABEL_18;
LABEL_22:
    if ((v15 & 1) != 0)
      return;
    ++v4;
  }
  v20 = (BambiCall *)*((_QWORD *)this + 14);
  if (!v20 || (BambiCall::setQualityOfServiceRevoked(v20, a2) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v21 = ImsLogger::debug(ims::_logger, (uint64_t)&v24, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"handleQualityOfServiceRevoked: no call found ", 45);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    if (v23 < 0)
      operator delete(__p[0]);
    if (v26 < 0)
      operator delete(v24);
  }
}

void sub_1BEEBFED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

IMSCallInfo *IMSCallManager::getDialingCall(uint64_t a1, unsigned __int8 *a2)
{
  IMSCallInfo **v2;
  IMSCallInfo **i;
  IMSCallInfo *v5;
  BOOL v6;
  char v7;
  std::string::size_type size;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  std::string *v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::string v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v2 = *(IMSCallInfo ***)(a1 + 40);
  for (i = *(IMSCallInfo ***)(a1 + 48); v2 != i; ++v2)
  {
    v5 = *v2;
    if (!*v2)
      continue;
    IMSCallInfo::stack(*v2, &v25);
    if (!v25)
    {
      v6 = 0;
      goto LABEL_35;
    }
    IMSCallInfo::stack(v5, &v22);
    if (*(char *)(v22 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v22 + 4136), *(_QWORD *)(v22 + 4144));
    else
      v24 = *(std::string *)(v22 + 4136);
    v7 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    else
      size = v24.__r_.__value_.__l.__size_;
    v9 = a2[23];
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *((_QWORD *)a2 + 1);
    if (size != v9)
      goto LABEL_23;
    if (v10 >= 0)
      v11 = a2;
    else
      v11 = *(unsigned __int8 **)a2;
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v14 = (void *)v24.__r_.__value_.__r.__words[0];
      if (memcmp(v24.__r_.__value_.__l.__data_, v11, v24.__r_.__value_.__l.__size_))
      {
        v6 = 0;
LABEL_29:
        operator delete(v14);
        goto LABEL_30;
      }
    }
    else if (*((_BYTE *)&v24.__r_.__value_.__s + 23))
    {
      v12 = &v24;
      v13 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      while (v12->__r_.__value_.__s.__data_[0] == *v11)
      {
        v12 = (std::string *)((char *)v12 + 1);
        ++v11;
        if (!--v13)
          goto LABEL_27;
      }
LABEL_23:
      v6 = 0;
      if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_28;
      goto LABEL_30;
    }
LABEL_27:
    v6 = (*((_DWORD *)v5 + 144) - 1) < 2;
    if (v7 < 0)
    {
LABEL_28:
      v14 = (void *)v24.__r_.__value_.__r.__words[0];
      goto LABEL_29;
    }
LABEL_30:
    v15 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
LABEL_35:
    v18 = v26;
    if (v26)
    {
      v19 = (unint64_t *)&v26->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v6)
      return v5;
  }
  return 0;
}

void sub_1BEEC0114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void IMSCallManager::handleUacBarringResponse(_QWORD *a1, unsigned __int8 *a2, int a3)
{
  uint64_t v5;
  IMSCallInfo **v6;
  IMSCallInfo **v7;
  IMSCallInfo **v8;
  IMSCallInfo **v9;
  unint64_t v10;
  IMSCallInfo *v11;
  unsigned __int8 *v12;
  std::string::size_type size;
  uint64_t v14;
  int v15;
  uint64_t v16;
  std::string *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  _BOOL4 v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  void (**v30)(ImsUuid *__hidden);
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  IMSCallInfo **v39;
  IMSCallInfo **v40;
  IMSCallInfo *v41;
  IMSCallInfo *v42;
  IMSCallInfo *v43;
  IMSCallInfo **v44;
  void (**v45)(ImsUuid *__hidden);
  std::string v46;
  void (**v47)(ImsUuid *__hidden);
  std::string v48;
  std::string v49;
  uint64_t v50;
  void *__p[2];
  char v52;
  char *v53;
  std::__shared_weak_count *v54;
  char v55;
  int v56[3];

  v56[0] = a3;
  std::string::basic_string[abi:ne180100]<0>(&v49, "call");
  std::string::basic_string[abi:ne180100]<0>(&v53, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)&v49, (uint64_t)&v53);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Received UAC barring response ", 30);
  *(_BYTE *)(v5 + 17) = 0;
  ims::toString<UacAccessResponse>(v56, __p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 32))(v5, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" for ", 5);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v5 + 32))(v5, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v52 < 0)
    operator delete(__p[0]);
  if (v55 < 0)
    operator delete(v53);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  v7 = (IMSCallInfo **)a1[5];
  v6 = (IMSCallInfo **)a1[6];
  if (v7 != v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v7;
      if (!*v7 || *((_DWORD *)v11 + 144) != 1)
        goto LABEL_114;
      IMSCallInfo::stack(*v7, &v53);
      if (v53[4159] < 0)
        std::string::__init_copy_ctor_external(&v49, *((const std::string::value_type **)v53 + 517), *((_QWORD *)v53 + 518));
      else
        v49 = *(std::string *)(v53 + 4136);
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
      else
        size = v49.__r_.__value_.__l.__size_;
      v14 = a2[23];
      v15 = (char)v14;
      if ((v14 & 0x80u) != 0)
        v14 = *((_QWORD *)a2 + 1);
      if (size == v14)
      {
        if (v15 >= 0)
          v12 = a2;
        else
          v12 = *(unsigned __int8 **)a2;
        if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v25 = (void *)v49.__r_.__value_.__r.__words[0];
          v24 = memcmp(v49.__r_.__value_.__l.__data_, v12, v49.__r_.__value_.__l.__size_) == 0;
          goto LABEL_36;
        }
        if (!*((_BYTE *)&v49.__r_.__value_.__s + 23))
        {
          v24 = 1;
          goto LABEL_38;
        }
        v16 = HIBYTE(v49.__r_.__value_.__r.__words[2]) - 1;
        v17 = &v49;
        do
        {
          v19 = v17->__r_.__value_.__s.__data_[0];
          v17 = (std::string *)((char *)v17 + 1);
          v18 = v19;
          v21 = *v12++;
          v20 = v21;
          v23 = v16-- != 0;
          v24 = v18 == v20;
        }
        while (v18 == v20 && v23);
        if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) != 0)
        {
LABEL_34:
          v25 = (void *)v49.__r_.__value_.__r.__words[0];
LABEL_36:
          operator delete(v25);
        }
      }
      else
      {
        v24 = 0;
        if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_34;
      }
LABEL_38:
      v26 = v54;
      if (!v54)
        goto LABEL_42;
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v26->__on_zero_shared)(v26, v12);
        std::__shared_weak_count::__release_weak(v26);
        if (v24)
        {
LABEL_43:
          switch(v56[0])
          {
            case 0:
              std::string::basic_string[abi:ne180100]<0>(&v53, "call");
              std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v29 = ImsLogger::info(ims::_logger, (uint64_t)&v53, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"Continuing call with uuid ", 26);
              *(_BYTE *)(v29 + 17) = 0;
              v49.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
              if (*((char *)v11 + 103) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v49.__r_.__value_.__r.__words[1], *((const std::string::value_type **)v11 + 10), *((_QWORD *)v11 + 11));
                v30 = (void (**)(ImsUuid *__hidden))v49.__r_.__value_.__r.__words[0];
              }
              else
              {
                *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = *((_OWORD *)v11 + 5);
                v50 = *((_QWORD *)v11 + 12);
                v30 = off_1E78C0288;
              }
              ((void (*)(uint64_t, uint64_t))v30[2])((uint64_t)&v49, v29);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v29 + 17) = 0;
              v49.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
              if (SHIBYTE(v50) < 0)
                operator delete((void *)v49.__r_.__value_.__l.__size_);
              if (v52 < 0)
                operator delete(__p[0]);
              if (v55 < 0)
                operator delete(v53);
              if ((IMSCallInfo::continueCall(v11) & 1) != 0)
                break;
              if ((unint64_t)v9 >= v10)
              {
                v37 = v9 - v8;
                v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 61)
LABEL_121:
                  std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)(v10 - (_QWORD)v8) >> 2 > v38)
                  v38 = (uint64_t)(v10 - (_QWORD)v8) >> 2;
                if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
                  v33 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v33 = v38;
                if (v33)
                  v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v33);
                else
                  v34 = 0;
                v39 = (IMSCallInfo **)(v33 + 8 * v37);
                *v39 = v11;
                v40 = v39 + 1;
                while (v9 != v8)
                {
                  v43 = *--v9;
                  *--v39 = v43;
                }
LABEL_111:
                v10 = v33 + 8 * v34;
                if (v8)
                  operator delete(v8);
                v8 = v39;
                v9 = v40;
              }
              else
              {
LABEL_90:
                *v9++ = v11;
              }
              break;
            case 1:
              IMSCallInfo::sendAccessBarringDisconnect(v11);
              break;
            case 2:
              v45 = off_1E78C0288;
              if (*((char *)v11 + 103) < 0)
                std::string::__init_copy_ctor_external(&v46, *((const std::string::value_type **)v11 + 10), *((_QWORD *)v11 + 11));
              else
                v46 = *(std::string *)((char *)v11 + 80);
              ims::CFString::asString(CFSTR("kCallDisconnectionReasonUnknownError"), (const void *)0x8000100, &v49);
              IMSCallManager::sendCallDisconnectionNotification((uint64_t)a1, (uint64_t)&v45, (void **)a2, &v49, 0);
              if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v49.__r_.__value_.__l.__data_);
              v45 = off_1E78C0288;
              if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v46.__r_.__value_.__l.__data_);
              if ((unint64_t)v9 < v10)
                goto LABEL_90;
              v31 = v9 - v8;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61)
                goto LABEL_121;
              if ((uint64_t)(v10 - (_QWORD)v8) >> 2 > v32)
                v32 = (uint64_t)(v10 - (_QWORD)v8) >> 2;
              if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
                v33 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v33 = v32;
              if (v33)
                v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v33);
              else
                v34 = 0;
              v39 = (IMSCallInfo **)(v33 + 8 * v31);
              *v39 = v11;
              v40 = v39 + 1;
              while (v9 != v8)
              {
                v41 = *--v9;
                *--v39 = v41;
              }
              goto LABEL_111;
            case 5:
              v47 = off_1E78C0288;
              if (*((char *)v11 + 103) < 0)
                std::string::__init_copy_ctor_external(&v48, *((const std::string::value_type **)v11 + 10), *((_QWORD *)v11 + 11));
              else
                v48 = *(std::string *)((char *)v11 + 80);
              ims::CFString::asString(CFSTR("kIMSCallDisconnectionReasonInvalidRat"), (const void *)0x8000100, &v49);
              IMSCallManager::sendCallDisconnectionNotification((uint64_t)a1, (uint64_t)&v47, (void **)a2, &v49, 0);
              if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v49.__r_.__value_.__l.__data_);
              v47 = off_1E78C0288;
              if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v48.__r_.__value_.__l.__data_);
              if ((unint64_t)v9 < v10)
                goto LABEL_90;
              v35 = v9 - v8;
              v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 61)
                goto LABEL_121;
              if ((uint64_t)(v10 - (_QWORD)v8) >> 2 > v36)
                v36 = (uint64_t)(v10 - (_QWORD)v8) >> 2;
              if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
                v33 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v33 = v36;
              if (v33)
                v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v33);
              else
                v34 = 0;
              v39 = (IMSCallInfo **)(v33 + 8 * v35);
              *v39 = v11;
              v40 = v39 + 1;
              while (v9 != v8)
              {
                v42 = *--v9;
                *--v39 = v42;
              }
              goto LABEL_111;
            default:
              break;
          }
        }
      }
      else
      {
LABEL_42:
        if (v24)
          goto LABEL_43;
      }
LABEL_114:
      if (++v7 == v6)
      {
        if (v8 != v9)
        {
          v44 = v8;
          do
            (*(void (**)(_QWORD *, _QWORD))(*a1 + 240))(a1, *v44++);
          while (v44 != v9);
        }
        if (v8)
          operator delete(v8);
        return;
      }
    }
  }
}

void sub_1BEEC082C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,void *a30,int a31,__int16 a32,char a33,char a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  uint64_t v45;

  if (a44 < 0)
    operator delete(__p);
  if (*(char *)(v45 - 97) < 0)
    operator delete(*(void **)(v45 - 120));
  if (v44)
    operator delete(v44);
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallManager::handleMediaStackSwitchComplete(uint64_t a1, void **a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v12, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleMediaStackSwitchComplete for stack ", 41);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 32))(v7, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  LODWORD(v12[0]) = a3 != 1;
  v8 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, void **, void **))(*(_QWORD *)(v8 + 16) + 72))(v8 + 16, a4, v12, a2);
}

void sub_1BEEC0A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleUpdatePendingCall(_QWORD *a1, unsigned __int8 *a2, int a3)
{
  if (a3)
    IMSCallManager::failPendingCalls(a1, a2);
  else
    IMSCallManager::continuePendingCalls((uint64_t)a1, a2);
}

void `non-virtual thunk to'IMSCallManager::handleUpdatePendingCall(uint64_t a1, unsigned __int8 *a2, int a3)
{
  _QWORD *v3;

  v3 = (_QWORD *)(a1 - 8);
  if (a3)
    IMSCallManager::failPendingCalls(v3, a2);
  else
    IMSCallManager::continuePendingCalls((uint64_t)v3, a2);
}

void IMSCallManager::handleInputFrequencyLevelEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[3];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::string v27;

  v3 = *a2;
  if (!*a2)
    return;
  v5 = *(std::__shared_weak_count **)(v3 + 360);
  if (!v5)
    return;
  v8 = std::__shared_weak_count::lock(v5);
  if (!v8)
    return;
  v9 = v8;
  if (*(_QWORD *)(v3 + 352))
  {
    v10 = *a2;
    v11 = *(_QWORD *)(a1 + 112);
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    if (v10 == v11)
    {
      v14 = *a2;
      v25 = 0;
      v26 = 0;
      v15 = *(std::__shared_weak_count **)(v14 + 360);
      if (v15)
      {
        v16 = std::__shared_weak_count::lock(v15);
        v26 = v16;
        if (v16)
        {
          v17 = *(_QWORD *)(v14 + 352);
          v25 = v17;
LABEL_19:
          if (*(char *)(v17 + 4159) < 0)
            std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(v17 + 4136), *(_QWORD *)(v17 + 4144));
          else
            v27 = *(std::string *)(v17 + 4136);
          v20 = ImsUuid::ImsUuid(v23, (uint64_t)&ims::kEmptyString);
          IMSCallManager::sendInputFrequencyLevelUpdateNotification((uint64_t)v20, (void **)&v27.__r_.__value_.__l.__data_, (uint64_t)v23, a3);
          v23[0] = off_1E78C0288;
          if (v24 < 0)
            operator delete((void *)v23[1]);
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v27.__r_.__value_.__l.__data_);
          if (v16)
          {
            v21 = (unint64_t *)&v16->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          return;
        }
      }
      else
      {
        v16 = 0;
      }
      v17 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v18 = (unint64_t *)&v8->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEEC0CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSCallManager::handleInputFrequencyLevelEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  IMSCallManager::handleInputFrequencyLevelEvent(a1 - 16, a2, a3);
}

void IMSCallManager::handleOutputFrequencyLevelEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[3];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::string v27;

  v3 = *a2;
  if (!*a2)
    return;
  v5 = *(std::__shared_weak_count **)(v3 + 360);
  if (!v5)
    return;
  v8 = std::__shared_weak_count::lock(v5);
  if (!v8)
    return;
  v9 = v8;
  if (*(_QWORD *)(v3 + 352))
  {
    v10 = *a2;
    v11 = *(_QWORD *)(a1 + 112);
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    if (v10 == v11)
    {
      v14 = *a2;
      v25 = 0;
      v26 = 0;
      v15 = *(std::__shared_weak_count **)(v14 + 360);
      if (v15)
      {
        v16 = std::__shared_weak_count::lock(v15);
        v26 = v16;
        if (v16)
        {
          v17 = *(_QWORD *)(v14 + 352);
          v25 = v17;
LABEL_19:
          if (*(char *)(v17 + 4159) < 0)
            std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(v17 + 4136), *(_QWORD *)(v17 + 4144));
          else
            v27 = *(std::string *)(v17 + 4136);
          v20 = ImsUuid::ImsUuid(v23, (uint64_t)&ims::kEmptyString);
          IMSCallManager::sendOutputFrequencyLevelUpdateNotification((uint64_t)v20, (void **)&v27.__r_.__value_.__l.__data_, (uint64_t)v23, a3);
          v23[0] = off_1E78C0288;
          if (v24 < 0)
            operator delete((void *)v23[1]);
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v27.__r_.__value_.__l.__data_);
          if (v16)
          {
            v21 = (unint64_t *)&v16->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          return;
        }
      }
      else
      {
        v16 = 0;
      }
      v17 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v18 = (unint64_t *)&v8->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEEC0EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSCallManager::handleOutputFrequencyLevelEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  IMSCallManager::handleOutputFrequencyLevelEvent(a1 - 16, a2, a3);
}

void IMSCallManager::sendCallStatusToIRatManager(_QWORD *a1, uint64_t *a2, char a3)
{
  uint64_t v3;
  int v4;
  char v5;
  BOOL v6;
  BOOL v7;
  char v8;
  int v9;

  v9 = 0;
  v4 = 255;
  v5 = a3;
  v3 = *a2;
  v7 = *(_DWORD *)(*a2 + 444) > 2;
  v6 = (*(_DWORD *)(v3 + 440) & 0xFFFFFFFE) == 2;
  LOBYTE(v9) = a1[6] - a1[5] > 8uLL;
  v8 = v9;
  IMSiRatClient::reportCallStatus((uint64_t *)(a1[3] + 344), &v4);
}

uint64_t IMSCallManager::conferenceCall@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 120);
  *a2 = *(_QWORD *)(this + 112);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

std::string *ImsUuid::loggableName@<X0>(ImsUuid *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 8));
}

void BambiEmergencyCallOptions::BambiEmergencyCallOptions(std::string *this, const BambiEmergencyCallOptions *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  this[3].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 72);
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)&this[3].__r_.__value_.__r.__words[1], (const BambiEmergencyCallOptions *)((char *)a2 + 80));
  SipStackConfig::SipStackConfig((SipStackConfig *)&this[73], (const BambiEmergencyCallOptions *)((char *)a2 + 1752));
  SipUri::SipUri((SipUri *)&this[176].__r_.__value_.__r.__words[2], (const BambiEmergencyCallOptions *)((char *)a2 + 4240));
  v7 = (std::string *)((char *)this + 4648);
  if (*((char *)a2 + 4671) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 581), *((_QWORD *)a2 + 582));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 4648);
    this[194].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 583);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  this[194].__r_.__value_.__s.__data_[16] = *((_BYTE *)a2 + 4672);
}

void sub_1BEEC11C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  SipUri *v6;

  SipUri::~SipUri(v6);
  SipStackConfig::~SipStackConfig(v5);
  SipRegistrationConfig::~SipRegistrationConfig(v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void SipStackConfig::SipStackConfig(SipStackConfig *this, const SipStackConfig *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;

  SipUserAgentConfig::SipUserAgentConfig(this, a2);
  SipTransportLayerConfig::SipTransportLayerConfig((std::string *)(v4 + 1376), (const SipStackConfig *)((char *)a2 + 1376));
  v5 = *((_QWORD *)a2 + 250);
  *((_DWORD *)this + 502) = *((_DWORD *)a2 + 502);
  *((_QWORD *)this + 250) = v5;
  BambiCallTerminationReasonsBase::BambiCallTerminationReasonsBase((SipStackConfig *)((char *)this + 2016), (const SipStackConfig *)((char *)a2 + 2016));
  *((_QWORD *)this + 252) = off_1E78E2830;
  BambiCallIncomingTerminationReasons::BambiCallIncomingTerminationReasons((SipStackConfig *)((char *)this + 2184), (const SipStackConfig *)((char *)a2 + 2184));
  if (*((char *)a2 + 2399) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 99, *((const std::string::value_type **)a2 + 297), *((_QWORD *)a2 + 298));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 2376);
    *((_QWORD *)this + 299) = *((_QWORD *)a2 + 299);
    *(_OWORD *)((char *)this + 2376) = v6;
  }
  v7 = *((_QWORD *)a2 + 300);
  *((_BYTE *)this + 2408) = *((_BYTE *)a2 + 2408);
  *((_QWORD *)this + 300) = v7;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 302, (uint64_t)a2 + 2416);
  v8 = *((_QWORD *)a2 + 305);
  *((_WORD *)this + 1224) = *((_WORD *)a2 + 1224);
  *((_QWORD *)this + 305) = v8;
  *((_WORD *)this + 1228) = *((_WORD *)a2 + 1228);
  v9 = (std::string *)((char *)this + 2464);
  if (*((char *)a2 + 2487) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 308), *((_QWORD *)a2 + 309));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 154);
    *((_QWORD *)this + 310) = *((_QWORD *)a2 + 310);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1BEEC136C(_Unwind_Exception *a1)
{
  uint64_t v1;
  SipTransportLayerConfig *v2;
  BambiCallTerminationReasonsBase *v3;
  BambiCallIncomingTerminationReasons *v4;
  void **v5;
  uint64_t v6;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v6, *(_QWORD **)(v1 + 2424));
  if (*(char *)(v1 + 2399) < 0)
    operator delete(*v5);
  BambiCallIncomingTerminationReasons::~BambiCallIncomingTerminationReasons(v4);
  BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase(v3);
  SipTransportLayerConfig::~SipTransportLayerConfig(v2);
  SipUserAgentConfig::~SipUserAgentConfig((SipUserAgentConfig *)v1);
  _Unwind_Resume(a1);
}

void BambiCallIncomingTerminationReasons::~BambiCallIncomingTerminationReasons(BambiCallIncomingTerminationReasons *this)
{
  *(_QWORD *)this = off_1E78E2870;
  std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy((uint64_t)this + 168, *((_QWORD **)this + 22));
  BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase(this);
}

{
  *(_QWORD *)this = off_1E78E2870;
  std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy((uint64_t)this + 168, *((_QWORD **)this + 22));
  BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase(this);
  JUMPOUT(0x1C3B87100);
}

void SipUserAgentConfig::SipUserAgentConfig(SipUserAgentConfig *this, const SipUserAgentConfig *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 26) = *(_OWORD *)((char *)a2 + 26);
  *(_OWORD *)this = v4;
  *((_OWORD *)this + 1) = v5;
  SipUri::SipUri((SipUserAgentConfig *)((char *)this + 48), (const SipUserAgentConfig *)((char *)a2 + 48));
  *((_BYTE *)this + 456) = *((_BYTE *)a2 + 456);
  if (*((char *)a2 + 487) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 464), *((const std::string::value_type **)a2 + 58), *((_QWORD *)a2 + 59));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 29);
    *((_QWORD *)this + 60) = *((_QWORD *)a2 + 60);
    *((_OWORD *)this + 29) = v6;
  }
  if (*((char *)a2 + 511) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 488), *((const std::string::value_type **)a2 + 61), *((_QWORD *)a2 + 62));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 488);
    *((_QWORD *)this + 63) = *((_QWORD *)a2 + 63);
    *(_OWORD *)((char *)this + 488) = v7;
  }
  *((_QWORD *)this + 64) = &off_1E78D0398;
  std::map<std::string,unsigned int>::map[abi:ne180100]((uint64_t *)this + 65, (uint64_t)a2 + 520);
  v8 = *((_DWORD *)a2 + 136);
  *((_BYTE *)this + 548) = *((_BYTE *)a2 + 548);
  *((_DWORD *)this + 136) = v8;
  *((_QWORD *)this + 69) = &off_1E78B82D8;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)this + 70, *((void ***)a2 + 70), (void **)a2 + 71);
  *((_BYTE *)this + 585) = 1;
  *((_BYTE *)this + 584) = *((_BYTE *)a2 + 584);
  v9 = *((_OWORD *)a2 + 37);
  v10 = *((_OWORD *)a2 + 38);
  *(_OWORD *)((char *)this + 620) = *(_OWORD *)((char *)a2 + 620);
  *((_OWORD *)this + 37) = v9;
  *((_OWORD *)this + 38) = v10;
  if (*((char *)a2 + 663) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 640), *((const std::string::value_type **)a2 + 80), *((_QWORD *)a2 + 81));
  }
  else
  {
    v11 = *((_OWORD *)a2 + 40);
    *((_QWORD *)this + 82) = *((_QWORD *)a2 + 82);
    *((_OWORD *)this + 40) = v11;
  }
  if (*((char *)a2 + 687) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 664), *((const std::string::value_type **)a2 + 83), *((_QWORD *)a2 + 84));
  }
  else
  {
    v12 = *(_OWORD *)((char *)a2 + 664);
    *((_QWORD *)this + 85) = *((_QWORD *)a2 + 85);
    *(_OWORD *)((char *)this + 664) = v12;
  }
  *((_WORD *)this + 344) = *((_WORD *)a2 + 344);
  *((_QWORD *)this + 87) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 88, (uint64_t)a2 + 704);
  *((_QWORD *)this + 91) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 92, (uint64_t)a2 + 736);
  *((_QWORD *)this + 95) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 96, (uint64_t)a2 + 768);
  v13 = *(_OWORD *)((char *)a2 + 808);
  *(_OWORD *)((char *)this + 792) = *(_OWORD *)((char *)a2 + 792);
  *(_OWORD *)((char *)this + 808) = v13;
  *((_QWORD *)this + 103) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 104, (uint64_t)a2 + 832);
  *((_QWORD *)this + 107) = *((_QWORD *)a2 + 107);
  if (*((char *)a2 + 887) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 36, *((const std::string::value_type **)a2 + 108), *((_QWORD *)a2 + 109));
  }
  else
  {
    v14 = *((_OWORD *)a2 + 54);
    *((_QWORD *)this + 110) = *((_QWORD *)a2 + 110);
    *((_OWORD *)this + 54) = v14;
  }
  v15 = (std::string *)((char *)this + 888);
  if (*((char *)a2 + 911) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *((const std::string::value_type **)a2 + 111), *((_QWORD *)a2 + 112));
  }
  else
  {
    v16 = *(_OWORD *)((char *)a2 + 888);
    *((_QWORD *)this + 113) = *((_QWORD *)a2 + 113);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  v17 = *((_QWORD *)a2 + 114);
  *((_WORD *)this + 460) = *((_WORD *)a2 + 460);
  *((_QWORD *)this + 114) = v17;
  if (*((char *)a2 + 951) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 928), *((const std::string::value_type **)a2 + 116), *((_QWORD *)a2 + 117));
  }
  else
  {
    v18 = *((_OWORD *)a2 + 58);
    *((_QWORD *)this + 118) = *((_QWORD *)a2 + 118);
    *((_OWORD *)this + 58) = v18;
  }
  *((_WORD *)this + 476) = *((_WORD *)a2 + 476);
  if (*((char *)a2 + 983) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 40, *((const std::string::value_type **)a2 + 120), *((_QWORD *)a2 + 121));
  }
  else
  {
    v19 = *((_OWORD *)a2 + 60);
    *((_QWORD *)this + 122) = *((_QWORD *)a2 + 122);
    *((_OWORD *)this + 60) = v19;
  }
  *((_DWORD *)this + 246) = *((_DWORD *)a2 + 246);
  *((_QWORD *)this + 124) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 125, (uint64_t)a2 + 1000);
  *((_QWORD *)this + 128) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 129, (uint64_t)a2 + 1032);
  *((_QWORD *)this + 132) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 133, (uint64_t)a2 + 1064);
  *((_QWORD *)this + 136) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 137, (uint64_t)a2 + 1096);
  *((_QWORD *)this + 140) = *((_QWORD *)a2 + 140);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)this + 141, (uint64_t)a2 + 1128);
  v20 = *((_DWORD *)a2 + 288);
  *((_BYTE *)this + 1156) = *((_BYTE *)a2 + 1156);
  *((_DWORD *)this + 288) = v20;
  std::map<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>::map[abi:ne180100]((uint64_t *)this + 145, (uint64_t)a2 + 1160);
  *((_QWORD *)this + 148) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 149, (uint64_t)a2 + 1192);
  *((_BYTE *)this + 1216) = *((_BYTE *)a2 + 1216);
  std::map<std::string,ims::SpamCategory>::map[abi:ne180100]((uint64_t *)this + 153, (uint64_t)a2 + 1224);
  v21 = *((_OWORD *)a2 + 78);
  v22 = *((_OWORD *)a2 + 79);
  *((_BYTE *)this + 1280) = *((_BYTE *)a2 + 1280);
  *((_OWORD *)this + 79) = v22;
  *((_OWORD *)this + 78) = v21;
  *((_QWORD *)this + 161) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 162, (uint64_t)a2 + 1296);
  if (*((char *)a2 + 1343) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 55, *((const std::string::value_type **)a2 + 165), *((_QWORD *)a2 + 166));
  }
  else
  {
    v23 = *(_OWORD *)((char *)a2 + 1320);
    *((_QWORD *)this + 167) = *((_QWORD *)a2 + 167);
    *(_OWORD *)((char *)this + 1320) = v23;
  }
  *((_QWORD *)this + 169) = 0;
  *((_QWORD *)this + 168) = 0;
  *((_QWORD *)this + 170) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 56, *((__int128 **)a2 + 168), *((__int128 **)a2 + 169), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 169) - *((_QWORD *)a2 + 168)) >> 3));
  *((_DWORD *)this + 342) = *((_DWORD *)a2 + 342);
}

void sub_1BEEC18BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, void **a12, void **a13, uint64_t a14, uint64_t a15, void **a16, void **a17, uint64_t a18, uint64_t a19, void **a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(v25 + 1288) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v28, *(_QWORD **)(v25 + 1304));
  std::__tree<std::string>::destroy(v30, *(char **)(v25 + 1232));
  *(_QWORD *)(v25 + 1184) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v24, *(_QWORD **)(v25 + 1200));
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(v26, *(_QWORD **)(v25 + 1168));
  std::__tree<std::string>::destroy(v27, *(char **)(v25 + 1136));
  *(_QWORD *)(v25 + 1088) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v29, *(_QWORD **)(v25 + 1104));
  *(_QWORD *)(v25 + 1056) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a10, *(_QWORD **)(v25 + 1072));
  *(_QWORD *)(v25 + 1024) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a14, *(_QWORD **)(v25 + 1040));
  *(_QWORD *)(v25 + 992) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a15, *(_QWORD **)(v25 + 1008));
  if (*(char *)(v25 + 983) < 0)
    operator delete(*a9);
  if (*(char *)(v25 + 951) < 0)
    operator delete(*a11);
  if (*(char *)(v25 + 911) < 0)
    operator delete(*a12);
  if (*(char *)(v25 + 887) < 0)
    operator delete(*a13);
  *(_QWORD *)(v25 + 824) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a18, *(_QWORD **)(v25 + 840));
  *(_QWORD *)(v25 + 760) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a19, *(_QWORD **)(v25 + 776));
  *(_QWORD *)(v25 + 728) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a22, *(_QWORD **)(v25 + 744));
  *(_QWORD *)(v25 + 696) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a23, *(_QWORD **)(v25 + 712));
  if (*(char *)(v25 + 687) < 0)
    operator delete(*a16);
  if (*(char *)(v25 + 663) < 0)
    operator delete(*a17);
  *(_QWORD *)(v25 + 552) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a24, *(_QWORD **)(v25 + 568));
  *(_QWORD *)(v25 + 512) = &off_1E78D0398;
  std::__tree<std::string>::destroy(*(_QWORD *)(v31 - 112), *(char **)(v25 + 528));
  if (*(char *)(v25 + 511) < 0)
    operator delete(*a20);
  if (*(char *)(v25 + 487) < 0)
    operator delete(*a21);
  SipUri::~SipUri(*(SipUri **)(v31 - 104));
  _Unwind_Resume(a1);
}

void sub_1BEEC1B24()
{
  JUMPOUT(0x1BEEC1978);
}

void sub_1BEEC1B2C()
{
  JUMPOUT(0x1BEEC1984);
}

void sub_1BEEC1B34()
{
  JUMPOUT(0x1BEEC199CLL);
}

void sub_1BEEC1B3C()
{
  JUMPOUT(0x1BEEC19B4);
}

void sub_1BEEC1B44()
{
  JUMPOUT(0x1BEEC19CCLL);
}

void sub_1BEEC1B4C()
{
  JUMPOUT(0x1BEEC19E4);
}

void sub_1BEEC1B54()
{
  JUMPOUT(0x1BEEC1A4CLL);
}

void sub_1BEEC1B5C()
{
  JUMPOUT(0x1BEEC1A64);
}

void sub_1BEEC1B64()
{
  JUMPOUT(0x1BEEC1A7CLL);
}

void sub_1BEEC1B6C()
{
  JUMPOUT(0x1BEEC1A94);
}

void sub_1BEEC1B74()
{
  JUMPOUT(0x1BEEC1AD4);
}

void sub_1BEEC1B7C()
{
  JUMPOUT(0x1BEEC1AECLL);
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1BEEC1BC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;
  void **v10;

  v9 = 0;
  v10 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

uint64_t *std::map<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1BEEC1D24(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>> const&>(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  void **v12;

  v11 = 0;
  v12 = 0;
  v6 = std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__construct_node<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>> const&>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void SipTransportLayerConfig::SipTransportLayerConfig(std::string *this, const SipTransportLayerConfig *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  SipUri::SipUri((SipUri *)&this[1], (const SipTransportLayerConfig *)((char *)a2 + 24));
  v5 = *((_OWORD *)a2 + 28);
  *(_OWORD *)&this[18].__r_.__value_.__l.__data_ = *((_OWORD *)a2 + 27);
  *(_OWORD *)&this[18].__r_.__value_.__r.__words[2] = v5;
  if (*((char *)a2 + 487) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 464), *((const std::string::value_type **)a2 + 58), *((_QWORD *)a2 + 59));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 29);
    this[20].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 60);
    *(_OWORD *)&this[19].__r_.__value_.__r.__words[1] = v6;
  }
  v7 = *((_QWORD *)a2 + 61);
  LODWORD(this[20].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 124);
  this[20].__r_.__value_.__l.__size_ = v7;
  this[21].__r_.__value_.__r.__words[2] = 0;
  this[21].__r_.__value_.__r.__words[0] = 0;
  this[21].__r_.__value_.__l.__size_ = 0;
  std::vector<SipSecurityAgreementConfig>::__init_with_size[abi:ne180100]<SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>(this[21].__r_.__value_.__r.__words, *((_QWORD *)a2 + 63), *((_QWORD *)a2 + 64), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 64) - *((_QWORD *)a2 + 63)) >> 3));
  this[22].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 66);
  this[22].__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E78DD338;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)&this[22].__r_.__value_.__r.__words[2], (uint64_t)a2 + 544);
  v8 = *(_OWORD *)((char *)a2 + 568);
  LODWORD(this[24].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 146);
  *(_OWORD *)&this[23].__r_.__value_.__r.__words[2] = v8;
  HIDWORD(this[24].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 147);
  this[24].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 74);
  this[25].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 75);
  this[25].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 76);
  this[25].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 77);
}

void sub_1BEEC1FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  SipUri *v11;

  SipUri::~SipUri(v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<SipSecurityAgreementConfig>::__init_with_size[abi:ne180100]<SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<SipSecurityAgreementConfig>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipSecurityAgreementConfig>,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BEEC206C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<SipSecurityAgreementConfig>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  __int128 v3;

  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
      std::string::operator=(this, a2);
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      operator delete(this->__r_.__value_.__l.__data_);
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

void BambiCallOptions::BambiCallOptions(BambiCallOptions *this, const BambiCallOptions *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_WORD *)this = *(_WORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  v5 = *((_OWORD *)a2 + 2);
  v6 = *((_OWORD *)a2 + 3);
  v7 = *((_OWORD *)a2 + 4);
  *(_QWORD *)((char *)this + 77) = *(_QWORD *)((char *)a2 + 77);
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 4) = v7;
  *((_OWORD *)this + 2) = v5;
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 88);
    *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v8;
  }
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 112), *((const std::string::value_type **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v9 = *((_OWORD *)a2 + 7);
    *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
    *((_OWORD *)this + 7) = v9;
  }
  *((_BYTE *)this + 136) = *((_BYTE *)a2 + 136);
  ims::LocationInfo::LocationInfo((BambiCallOptions *)((char *)this + 144), (const BambiCallOptions *)((char *)a2 + 144));
  if (*((char *)a2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 12, *((const std::string::value_type **)a2 + 36), *((_QWORD *)a2 + 37));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 18);
    *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
    *((_OWORD *)this + 18) = v10;
  }
  *((_BYTE *)this + 312) = *((_BYTE *)a2 + 312);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 320), (__int128 *)a2 + 20);
}

void sub_1BEEC22AC(_Unwind_Exception *a1)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;
  void **v5;

  ims::LocationInfo::~LocationInfo(v5);
  if (v2[135] < 0)
    operator delete(*v4);
  if (v2[111] < 0)
    operator delete(*v3);
  if (v2[31] < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_1BEEC234C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void BambiCallOptions::~BambiCallOptions(void **this)
{
  if (*((_BYTE *)this + 344) && *((char *)this + 343) < 0)
    operator delete(this[40]);
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  if (*((char *)this + 287) < 0)
    operator delete(this[33]);
  if (*((char *)this + 263) < 0)
    operator delete(this[30]);
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

_QWORD *ImsUuid::ImsUuid(_QWORD *a1, uint64_t a2)
{
  *a1 = off_1E78C0288;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  ImsUuid::assign((uint64_t)a1, a2);
  return a1;
}

void sub_1BEEC24C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<LazuliSendParams,false>::__optional_copy_base[abi:ne180100](std::string *this, const LazuliSendParams *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[12].__r_.__value_.__s.__data_[8] = 0;
  if (*((_BYTE *)a2 + 296))
  {
    LazuliSendParams::LazuliSendParams(this, a2);
    this[12].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

void sub_1BEEC2520(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 296))
    LazuliSendParams::~LazuliSendParams((void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,LazuliInfo>::pair[abi:ne180100]<std::string const&,LazuliInfo,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *a3;
  this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = *(__int128 *)((char *)a3 + 24);
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  std::__optional_move_base<LazuliSendParams,false>::__optional_move_base[abi:ne180100]((std::string *)((char *)this + 64), (uint64_t)a3 + 40);
  return this;
}

void sub_1BEEC25CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

std::string *std::__optional_move_base<LazuliSendParams,false>::__optional_move_base[abi:ne180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[12].__r_.__value_.__s.__data_[8] = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    LazuliSendParams::LazuliSendParams(this, (__int128 *)a2);
    this[12].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

void sub_1BEEC2640(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 296))
    LazuliSendParams::~LazuliSendParams((void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__list_imp<std::string>::clear(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = a1[1];
    v4 = *(_QWORD **)v2;
    v4[1] = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((_QWORD *)v2 != a1)
    {
      v5 = *(_QWORD *)(v2 + 8);
      std::__list_imp<std::string>::__delete_node[abi:ne180100]<>((int)a1, (void **)v2);
      v2 = v5;
    }
  }
}

void std::__list_imp<std::string>::__delete_node[abi:ne180100]<>(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

uint64_t ims::detail::to_string_impl<unsigned long,std::integral_constant<BOOL,false>>::operator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v5 = 0;
  v3 = 0u;
  v4 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v3, 1);
  std::ostream::operator<<();
  BYTE1(v4) = 0;
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v4 + 1) + 8, a1);
  *(_QWORD *)&v3 = &off_1E78D7A10;
  if ((_BYTE)v4)
  {
    result = *((_QWORD *)&v3 + 1);
    if (*((_QWORD *)&v3 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 8))(*((_QWORD *)&v3 + 1));
  }
  return result;
}

void sub_1BEEC2778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a10)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<SipUri>::__push_back_slow_path<SipUri const&>(uint64_t *a1, const SipUri *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  SipUri *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xFAFAFAFAFAFAFAFBLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xA0A0A0A0A0A0A0)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xFAFAFAFAFAFAFAFBLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x50505050505050)
    v9 = 0xA0A0A0A0A0A0A0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipUri>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (SipUri *)&v10[408 * v4];
  v16 = &v10[408 * v9];
  SipUri::SipUri(v14, a2);
  v15 = (char *)v14 + 408;
  std::vector<SipUri>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<SipUri>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1BEEC28B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<SipUri>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SipUri>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipUri>,std::reverse_iterator<SipUri*>,std::reverse_iterator<SipUri*>,std::reverse_iterator<SipUri*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipUri>,std::reverse_iterator<SipUri*>,std::reverse_iterator<SipUri*>,std::reverse_iterator<SipUri*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  SipUri *v12;

  v10 = 0;
  v11 = a7 - 408;
  while (a3 + v10 != a5)
  {
    v12 = (SipUri *)(v11 + v10);
    v10 -= 408;
    SipUri::SipUri(v12, (const SipUri *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<SipUri>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 408;
    (**(void (***)(uint64_t))(i - 408))(i - 408);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ims::CallIncomingInfo::~CallIncomingInfo(void **this)
{
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

int *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned short>>>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  int *v4;
  int *v5;
  int v6;
  __int16 v8;
  uint64_t v9;

  v4 = a2;
  v9 = a4;
  if (a2 == a3)
    return a2;
  v5 = a3;
  do
  {
    v6 = *v4++;
    v8 = v6;
    std::back_insert_iterator<std::vector<unsigned short>>::operator=[abi:ne180100](&v9, &v8);
  }
  while (v4 != v5);
  return v5;
}

uint64_t *std::back_insert_iterator<std::vector<unsigned short>>::operator=[abi:ne180100](uint64_t *a1, _WORD *a2)
{
  uint64_t v4;
  _WORD *v5;
  _QWORD *v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;

  v4 = *a1;
  v5 = *(_WORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_WORD **)v4;
    v9 = (uint64_t)v5 - *(_QWORD *)v4;
    if (v9 <= -3)
      std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
    v10 = v9 >> 1;
    v11 = *v6 - (_QWORD)v8;
    if (v11 <= (v9 >> 1) + 1)
      v12 = v10 + 1;
    else
      v12 = *v6 - (_QWORD)v8;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v6, v13);
      v8 = *(_WORD **)v4;
      v5 = *(_WORD **)(v4 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v10];
    v16 = &v14[2 * v13];
    *(_WORD *)v15 = *a2;
    v7 = v15 + 2;
    while (v5 != v8)
    {
      v17 = *--v5;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    *(_QWORD *)v4 = v15;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

const void **ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,LazuliInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,LazuliInfo>,0>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 360))
    LazuliSendParams::~LazuliSendParams((void **)(a1 + 64));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 48);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string,LazuliInfo>>(uint64_t **a1, void **a2, uint64_t a3)
{
  char *v5;
  uint64_t **v6;
  char **v7;
  char **v8;
  _QWORD *v10;
  char *v11;
  __int128 v12;
  uint64_t *v13;
  _QWORD v14[2];
  uint64_t v15;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  v7 = (char **)(a1 + 1);
  v8 = (char **)(a1 + 1);
  if (!v5)
    goto LABEL_10;
  v7 = (char **)(a1 + 1);
  while (1)
  {
    while (1)
    {
      v8 = (char **)v5;
      v10 = v5 + 32;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0)
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0)
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  if (!*v7)
  {
LABEL_10:
    v15 = 0;
    v11 = (char *)operator new(0x190uLL);
    v14[0] = v11;
    v14[1] = v6;
    *((_OWORD *)v11 + 2) = *(_OWORD *)a3;
    *((_QWORD *)v11 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)(v11 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v11 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v12 = *(_OWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *((_OWORD *)v11 + 5) = v12;
    std::__optional_move_base<LazuliSendParams,false>::__optional_move_base[abi:ne180100]((std::string *)v11 + 4, a3 + 64);
    LOBYTE(v15) = 1;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v8;
    *v7 = v11;
    v13 = (uint64_t *)**a1;
    if (v13)
    {
      *a1 = v13;
      v11 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,LazuliInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,LazuliInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
  }
}

void sub_1BEEC2E90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v5);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,LazuliInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,LazuliInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,LazuliInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,LazuliInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,LazuliInfo>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::__erase_unique<std::string>(uint64_t **a1, void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,LazuliInfo>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t ims::join<std::__wrap_iter<unsigned short const*>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v9, 1);
  ims::join<std::__wrap_iter<unsigned short const*>>(a1, a2, &v9, a3);
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v10 + 1) + 8, a4);
  *(_QWORD *)&v9 = &off_1E78D7A10;
  if ((_BYTE)v10)
  {
    result = *((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 8))(*((_QWORD *)&v9 + 1));
  }
  return result;
}

void sub_1BEEC3008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a10)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::join<std::__wrap_iter<unsigned short const*>>(uint64_t result, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v7;
  char v8;

  if (result != a2)
  {
    v7 = result;
    v8 = 1;
    do
    {
      if ((v8 & 1) == 0)
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a3 + 32))(a3, a4);
      v7 += 2;
      result = std::ostream::operator<<();
      v8 = 0;
      a3[17] = 0;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t *DefaultRegistrationPolicy::DefaultRegistrationPolicy(uint64_t *a1, uint64_t *a2, std::__shared_weak_count **a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;

  v5 = a3[1];
  v10 = *a3;
  v11 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  SipRegistrationPolicy::SipRegistrationPolicy((uint64_t)a1, a2 + 1, &v10);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v8 = *a2;
  *a1 = *a2;
  a1[13] = a2[6];
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v8 - 24)) = a2[7];
  a1[22] = (uint64_t)&off_1E78C0580;
  a1[294] = 0;
  a1[296] = 0;
  a1[295] = 0;
  return a1;
}

void sub_1BEEC3148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *DefaultRegistrationPolicy::DefaultRegistrationPolicy(_QWORD *a1, std::__shared_weak_count **a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;

  a1[13] = &off_1E78B7B60;
  v3 = a2[1];
  v7 = *a2;
  v8 = v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  SipRegistrationPolicy::SipRegistrationPolicy((uint64_t)a1, (uint64_t *)&off_1E78C0590, &v7);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  *a1 = &off_1E78C02D8;
  a1[13] = &unk_1E78C0538;
  a1[22] = &off_1E78C0580;
  a1[294] = 0;
  a1[296] = 0;
  a1[295] = 0;
  return a1;
}

void sub_1BEEC31FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void DefaultRegistrationPolicy::~DefaultRegistrationPolicy(DefaultRegistrationPolicy *this, uint64_t *a2)
{
  uint64_t v4;
  void *v5;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 13) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[7];
  *((_QWORD *)this + 22) = &off_1E78C0580;
  v5 = (void *)*((_QWORD *)this + 294);
  if (v5)
  {
    *((_QWORD *)this + 295) = v5;
    operator delete(v5);
  }
  SipRegistrationPolicy::~SipRegistrationPolicy(this, a2 + 1);
}

void DefaultRegistrationPolicy::~DefaultRegistrationPolicy(DefaultRegistrationPolicy *this)
{
}

{
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'DefaultRegistrationPolicy::~DefaultRegistrationPolicy(DefaultRegistrationPolicy *this)
{
}

{
  JUMPOUT(0x1C3B87100);
}

uint64_t DefaultRegistrationPolicy::maxRetryInterval(DefaultRegistrationPolicy *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 295) - 16) + *(unsigned int *)(*((_QWORD *)this + 295) - 8);
}

uint64_t DefaultRegistrationPolicy::generalErrorRetryInterval(DefaultRegistrationPolicy *this)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v1 = *((_DWORD *)this + 50);
  if (!v1)
    return 0;
  v2 = (v1 - 1);
  v3 = *((_QWORD *)this + 295);
  v4 = *((_QWORD *)this + 294);
  v5 = v3 - v4;
  v6 = (uint64_t *)(v4 + 16 * v2);
  v7 = (uint64_t *)(v3 - 16);
  if (v2 >= v5 >> 4)
    v8 = v7;
  else
    v8 = v6;
  v9 = *v8;
  if (*((_DWORD *)v8 + 2))
    v9 += random() % *((unsigned int *)v8 + 2);
  return v9;
}

uint64_t DefaultRegistrationPolicy::fatalErrorRetryInterval(DefaultRegistrationPolicy *this)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)*((_QWORD *)this + 294);
  v2 = *v1;
  if (*((_DWORD *)v1 + 2))
    v2 += random() % *((unsigned int *)v1 + 2);
  return v2;
}

uint64_t DefaultRegistrationPolicy::forbiddenErrorRetryInterval(DefaultRegistrationPolicy *this)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)*((_QWORD *)this + 294);
  v2 = *v1;
  if (*((_DWORD *)v1 + 2))
    v2 += random() % *((unsigned int *)v1 + 2);
  return v2;
}

void DefaultRegistrationPolicy::updateConfig(DefaultRegistrationPolicy *this, const SipRegistrationConfig *a2)
{
  _DWORD **v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;

  v4 = (_DWORD **)((char *)this + 2352);
  if ((char *)this + 2352 != (char *)a2 + 960)
    std::vector<SipRetryInfo>::__assign_with_size[abi:ne180100]<SipRetryInfo*,SipRetryInfo*>((char *)this + 2352, *((char **)a2 + 120), *((_QWORD *)a2 + 121), (uint64_t)(*((_QWORD *)a2 + 121) - *((_QWORD *)a2 + 120)) >> 4);
  v5 = *((_QWORD *)this + 294);
  if (v5 == *((_QWORD *)this + 295))
  {
    v6 = *((_QWORD *)this + 296);
    if (v5 >= v6)
    {
      v8 = v6 - v5;
      v9 = v8 >> 3;
      if ((unint64_t)(v8 >> 3) <= 1)
        v9 = 1;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
        v10 = 0xFFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)this + 2368, v10);
      v12 = (_DWORD *)*((_QWORD *)this + 295);
      v13 = (_DWORD *)*((_QWORD *)this + 294);
      v15 = &v11[16 * v14];
      *(_QWORD *)v11 = 30;
      *((_DWORD *)v11 + 2) = 0;
      v7 = v11 + 16;
      if (v12 != v13)
      {
        do
        {
          v16 = *((_QWORD *)v12 - 2);
          v12 -= 4;
          v17 = v12[2];
          *((_QWORD *)v11 - 2) = v16;
          v11 -= 16;
          *((_DWORD *)v11 + 2) = v17;
        }
        while (v12 != v13);
        v12 = *v4;
      }
      *((_QWORD *)this + 294) = v11;
      *((_QWORD *)this + 295) = v7;
      *((_QWORD *)this + 296) = v15;
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_QWORD *)v5 = 30;
      *(_DWORD *)(v5 + 8) = 0;
      v7 = (char *)(v5 + 16);
    }
    *((_QWORD *)this + 295) = v7;
  }
  SipRegistrationPolicy::updateConfig(this, a2);
}

const char *DefaultRegistrationPolicy::name(DefaultRegistrationPolicy *this)
{
  return "default";
}

void SipRecorder::recordBlob(void *lpsrc, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  void *v9;
  const std::string *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  const char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  std::string *v28;
  std::string::size_type v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  std::string __p;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *v48[2];
  __int128 v49;
  __int128 v50;
  _OWORD v51[9];
  uint64_t v52;
  void *v53[2];
  __int128 v54;
  _OWORD v55[2];
  void *v56[2];
  __int128 v57;
  __int128 v58;
  _OWORD v59[9];
  uint64_t v60;
  _QWORD v61[20];

  v61[19] = *MEMORY[0x1E0C80C00];
  v4 = byte_1EF57C72F;
  if (byte_1EF57C72F < 0)
    v4 = qword_1EF57C720;
  if (v4)
  {
    memset(&__p, 0, sizeof(__p));
    if (lpsrc)
    {
      if (v9)
      {
        v10 = (const std::string *)(*(uint64_t (**)(void *))(*(_QWORD *)v9 + 112))(v9);
        std::string::operator=(&__p, v10);
      }
      else
      {
        v60 = 0;
        v58 = 0u;
        memset(v59, 0, sizeof(v59));
        *(_OWORD *)v56 = 0u;
        v57 = 0u;
        memset(v55, 0, sizeof(v55));
        *(_OWORD *)v53 = 0u;
        v54 = 0u;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v53);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v53[1], &v44);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v44;
        __p.__r_.__value_.__r.__words[2] = v45;
        v53[0] = *(void **)MEMORY[0x1E0DE4F60];
        *(void **)((char *)v53 + *((_QWORD *)v53[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
        v53[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
        if (SHIBYTE(v57) < 0)
          operator delete(v56[1]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1C3B8707C](v59);
      }
      v11 = byte_1EF57C72F;
      if (byte_1EF57C72F < 0)
        v11 = qword_1EF57C720;
      if (v11)
      {
        v52 = 0;
        v50 = 0u;
        memset(v51, 0, sizeof(v51));
        *(_OWORD *)v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v44);
        if (byte_1EF57C72F >= 0)
          v12 = &SipRecorder::_recordingPath;
        else
          v12 = (uint64_t *)SipRecorder::_recordingPath;
        if (byte_1EF57C72F >= 0)
          v13 = byte_1EF57C72F;
        else
          v13 = qword_1EF57C720;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)v12, v13);
        if (a4)
        {
          ++dword_1ED70E9AC;
          v14 = (_QWORD *)std::ostream::operator<<();
          LOBYTE(v53[0]) = 45;
          v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v53, 1);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, size);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)".", 1);
          v20 = *(char *)(a3 + 23);
          if (v20 >= 0)
            v21 = a3;
          else
            v21 = *(_QWORD *)a3;
          if (v20 >= 0)
            v22 = *(unsigned __int8 *)(a3 + 23);
          else
            v22 = *(_QWORD *)(a3 + 8);
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
          v24 = ".out";
          v25 = 4;
        }
        else
        {
          ++_MergedGlobals_3;
          v26 = (_QWORD *)std::ostream::operator<<();
          LOBYTE(v53[0]) = 45;
          v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v53, 1);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = &__p;
          else
            v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v29 = __p.__r_.__value_.__l.__size_;
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)".", 1);
          v32 = *(char *)(a3 + 23);
          if (v32 >= 0)
            v33 = a3;
          else
            v33 = *(_QWORD *)a3;
          if (v32 >= 0)
            v34 = *(unsigned __int8 *)(a3 + 23);
          else
            v34 = *(_QWORD *)(a3 + 8);
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
          v24 = ".in";
          v25 = 3;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
        std::string::basic_string[abi:ne180100]<0>(v53, "sip.record");
        std::string::basic_string[abi:ne180100]<0>(v42, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v35 = ImsLogger::debug(ims::_logger, (uint64_t)v53, (uint64_t)v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"Writing message to ", 19);
        *(_BYTE *)(v35 + 17) = 0;
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v44 + 8, v40);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v35 + 32))(v35, v40);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v35 + 17) = 0;
        if (v41 < 0)
          operator delete(v40[0]);
        if (v43 < 0)
          operator delete(v42[0]);
        if (SBYTE7(v54) < 0)
          operator delete(v53[0]);
        bzero(v53, 0x238uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v44 + 8, v42);
        std::ofstream::basic_ofstream(v53);
        if (v43 < 0)
          operator delete(v42[0]);
        if ((*((_BYTE *)v55 + *((_QWORD *)v53[0] - 3)) & 5) == 0)
        {
          v36 = *(char *)(a2 + 23);
          v37 = v36 >= 0 ? a2 : *(_QWORD *)a2;
          v38 = v36 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v37, v38);
          if (!std::filebuf::close())
            std::ios_base::clear((std::ios_base *)((char *)v53 + *((_QWORD *)v53[0] - 3)), *(_DWORD *)((char *)v55 + *((_QWORD *)v53[0] - 3)) | 4);
        }
        v53[0] = *(void **)MEMORY[0x1E0DE4F48];
        *(void **)((char *)v53 + *((_QWORD *)v53[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F48] + 24);
        MEMORY[0x1C3B86E54](&v53[1]);
        std::ostream::~ostream();
        MEMORY[0x1C3B8707C](v61);
        *(_QWORD *)&v44 = *MEMORY[0x1E0DE4F60];
        *(_QWORD *)((char *)&v44 + *(_QWORD *)(v44 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        *((_QWORD *)&v44 + 1) = MEMORY[0x1E0DE4FB8] + 16;
        if (SHIBYTE(v49) < 0)
          operator delete(v48[1]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1C3B8707C](v51);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BEEC3A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  std::ostringstream::~ostringstream((uint64_t)&a56);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x1C3B86E48](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1BEEC3C18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v1 + 416);
  _Unwind_Resume(a1);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1C3B86E54](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](a1 + 52);
  return a1;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  size_t v6;
  size_t v7;
  size_t v8;
  uint64_t result;
  char *v10;
  const void *v11;
  char *v12;

  v6 = *((unsigned __int8 *)a1 + 23);
  v7 = (size_t)a1[1];
  a3[1] = 0;
  a3[2] = 0;
  if ((v6 & 0x80u) == 0)
    v8 = v6;
  else
    v8 = v7;
  *a3 = 0;
  result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v8 + 1);
  if (*(char *)(result + 23) >= 0)
    v10 = (char *)result;
  else
    v10 = *(char **)result;
  if (v8)
  {
    if (*((char *)a1 + 23) >= 0)
      v11 = a1;
    else
      v11 = *a1;
    result = (uint64_t)memmove(v10, v11, v8);
  }
  v12 = &v10[v8];
  *v12 = a2;
  v12[1] = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_SipRecorder_cpp()
{
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &SipRecorder::_recordingPath, &dword_1BEDF4000);
}

uint64_t AnalyticsLogger::start(AnalyticsLogger *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  void *v7;

  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 62) = time(0);
  *((_QWORD *)this + 63) = time(0);
  *((_QWORD *)this + 66) = 0;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((_BYTE *)this + 584) = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 80);
  *(_OWORD *)((char *)this + 632) = 0u;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = xpc_null_create();
  v6 = xpc_null_create();
  v7 = (void *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = v5;
  xpc_release(v7);
  xpc_release(v6);
  *((_DWORD *)this + 155) = 0;
  *((_QWORD *)this + 20) = *((_QWORD *)this + 19);
  *((_DWORD *)this + 165) = 0;
  return 1;
}

{
  return (*(uint64_t (**)(AnalyticsLogger *))(*(_QWORD *)this + 80))(this);
}

uint64_t `non-virtual thunk to'AnalyticsLogger::start(AnalyticsLogger *this)
{
  AnalyticsLogger::start((AnalyticsLogger *)((char *)this - 104));
  return 1;
}

{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 13) + 80))((char *)this - 104);
}

uint64_t AnalyticsLogger::logSipRequest(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"AnalyticsLogger::logSipRequest", 30);
  *(_BYTE *)(v2 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return result;
}

uint64_t `non-virtual thunk to'AnalyticsLogger::logSipRequest(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = a1 - 136;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 136) + 64))(a1 - 136);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"AnalyticsLogger::logSipRequest", 30);
  *(_BYTE *)(v2 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return result;
}

uint64_t AnalyticsLogger::logSipResponse(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"AnalyticsLogger::logSipResponse", 31);
  *(_BYTE *)(v2 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return result;
}

uint64_t `non-virtual thunk to'AnalyticsLogger::logSipResponse(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = a1 - 136;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 136) + 64))(a1 - 136);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"AnalyticsLogger::logSipResponse", 31);
  *(_BYTE *)(v2 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return result;
}

uint64_t AnalyticsLogger::logSipRequestFromNonProxyDropped(_DWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"AnalyticsLogger::logSipRequestFromNonProxyDropped. Incrementing counter", 71);
  *(_BYTE *)(v2 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  ++a1[165];
  return result;
}

uint64_t AnalyticsLogger::logRTPError(AnalyticsLogger *this, int a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = (*(uint64_t (**)(AnalyticsLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(AnalyticsLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"AnalyticsLogger::logRTPError ", 29);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  *((_DWORD *)this + 65) = a2;
  return result;
}

void AnalyticsLogger::logRegistrationRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"AnalyticsLogger::logRegistrationRequest", 39);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v19 = 0uLL;
  v7 = a2[1];
  v17 = *a2;
  v18 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10.n128_f64[0] = ims::analytics::RegistrationAttemptEvent::createRegistrationAttempt(&v17, a3, a1[63], &v19);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  (*(void (**)(_QWORD, __n128))(*(_QWORD *)v19 + 32))(v19, v10);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BEEC4284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'AnalyticsLogger::logRegistrationRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  AnalyticsLogger::logRegistrationRequest((uint64_t *)(a1 - 136), a2, a3);
}

void AnalyticsLogger::logWiFiHandover(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  time_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  int v24;
  char v25;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"AnalyticsLogger::logWiFiHandover - isValidHandover: ", 52);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (a4)
  {
    v8 = time(0) - *(_QWORD *)(a1 + 624);
    v10 = *(unint64_t **)(a1 + 160);
    v9 = *(_QWORD *)(a1 + 168);
    if ((unint64_t)v10 >= v9)
    {
      v13 = *(_QWORD *)(a1 + 152);
      v14 = ((uint64_t)v10 - v13) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v15 = v9 - v13;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v17);
      else
        v18 = 0;
      v19 = v17 + 8 * v14;
      v20 = v17 + 8 * v18;
      v21 = 0x100000000;
      if (!a3)
        v21 = 0;
      *(_QWORD *)v19 = v21 & 0xFFFFFFFF00000000 | v8;
      v12 = (_QWORD *)(v19 + 8);
      v23 = *(_BYTE **)(a1 + 152);
      v22 = *(_BYTE **)(a1 + 160);
      if (v22 != v23)
      {
        do
        {
          v24 = *((_DWORD *)v22 - 2);
          v22 -= 8;
          v25 = v22[4];
          *(_DWORD *)(v19 - 8) = v24;
          v19 -= 8;
          *(_BYTE *)(v19 + 4) = v25;
        }
        while (v22 != v23);
        v22 = *(_BYTE **)(a1 + 152);
      }
      *(_QWORD *)(a1 + 152) = v19;
      *(_QWORD *)(a1 + 160) = v12;
      *(_QWORD *)(a1 + 168) = v20;
      if (v22)
        operator delete(v22);
    }
    else
    {
      v11 = 0x100000000;
      if (!a3)
        v11 = 0;
      *v10 = v11 & 0xFFFFFFFF00000000 | v8;
      v12 = v10 + 1;
    }
    *(_QWORD *)(a1 + 160) = v12;
    *(_BYTE *)(a1 + 144) = a3;
    if ((a3 & 1) == 0)
      ++*(_DWORD *)(a1 + 620);
  }
}

void `non-virtual thunk to'AnalyticsLogger::logWiFiHandover(uint64_t a1, uint64_t a2, int a3, int a4)
{
  AnalyticsLogger::logWiFiHandover(a1 - 136, a2, a3, a4);
}

void AnalyticsLogger::logRegistrationSuccess(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  time_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;

  v6 = *(_QWORD *)(a3 + 48);
  v7 = time(0);
  a1[70] = v7 - a1[62];
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"AnalyticsLogger::logRegistrationSuccess", 39);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (*(_BYTE *)(a3 + 144))
  {
    a1[72] += v7 - a1[66];
    a1[69] += v7 - a1[63];
  }
  else
  {
    a1[66] = v7;
    a1[72] = 0;
    a1[71] += v7 - a1[63];
    v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Time passed ", 12);
    *(_BYTE *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
  }
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"AWD logging registration attempt took ", 38);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" ms", 3);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" exires in ", 11);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"ipTelephony up ", 15);
  *(_BYTE *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" totalRegTime ", 14);
  *(_BYTE *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" Current reg ", 13);
  *(_BYTE *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" un reg time is ", 16);
  *(_BYTE *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (*(_DWORD *)(v6 + 456))
    a1[63] = v7;
  v24 = 0uLL;
  v12 = a2[1];
  v22 = *a2;
  v23 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15.n128_f64[0] = ims::analytics::RegistrationResultEvent::createRegistrationSuccess(&v22, a3, &v24);
  v16 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v15);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(_QWORD, __n128))(*(_QWORD *)v24 + 32))(v24, v15);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1BEEC4828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'AnalyticsLogger::logRegistrationSuccess(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  AnalyticsLogger::logRegistrationSuccess((_QWORD *)(a1 - 136), a2, a3);
}

void AnalyticsLogger::logRegistrationTerminated(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  time_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _anonymous_namespace_::RegistrationResultEventImpl *v19;
  std::__shared_weak_count *v20;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"AnalyticsLogger::logRegistrationTerminated", 42);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = time(0);
  *(_QWORD *)(a1 + 576) = v5 - *(_QWORD *)(a1 + 528);
  v6 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 552) += v5 - *(_QWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 560) = v5 - v6;
  *(_QWORD *)(a1 + 504) = v5;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"ipTelephony up ", 15);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" totalRegTime ", 14);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" Current reg ", 13);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" un reg time is ", 16);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  v19 = 0;
  v20 = 0;
  v8 = a2[1];
  v17 = *a2;
  v18 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  ims::analytics::RegistrationResultEvent::createRegistrationTerminated(&v17, *(unsigned int *)(a1 + 660), &v19);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  (*(void (**)(_anonymous_namespace_::RegistrationResultEventImpl *))(*(_QWORD *)v19 + 32))(v19);
  *(_DWORD *)(a1 + 660) = 0;
  v14 = v20;
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BEEC4AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'AnalyticsLogger::logRegistrationTerminated(uint64_t a1, uint64_t *a2)
{
  AnalyticsLogger::logRegistrationTerminated(a1 - 136, a2);
}

void AnalyticsLogger::logRegistrationTerminated(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _anonymous_namespace_::RegistrationResultEventImpl *v18;
  std::__shared_weak_count *v19;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"AnalyticsLogger::logRegistrationTerminated", 42);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  *(_QWORD *)(a1 + 504) = time(0);
  v18 = 0;
  v19 = 0;
  v7 = a2[1];
  v16 = *a2;
  v17 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  ims::analytics::RegistrationResultEvent::createRegistrationTerminated(&v16, a3, *(unsigned int *)(a1 + 660), &v18);
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  (*(void (**)(_anonymous_namespace_::RegistrationResultEventImpl *))(*(_QWORD *)v18 + 32))(v18);
  *(_DWORD *)(a1 + 660) = 0;
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BEEC4C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'AnalyticsLogger::logRegistrationTerminated(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  AnalyticsLogger::logRegistrationTerminated(a1 - 136, a2, a3);
}

void AnalyticsLogger::logRegistrationError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"AnalyticsLogger::logRegistrationError", 37);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (*(uint64_t **)(a3 + 72) == &SipResultDomain::_domain)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"registration failed with SIP response ", 38);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
  }
  v20 = 0uLL;
  v8 = a2[1];
  v18 = *a2;
  v19 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11.n128_f64[0] = ims::analytics::RegistrationResultEvent::createRegistrationError(&v18, a3, &v20);
  v12 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v11);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  (*(void (**)(_QWORD, __n128))(*(_QWORD *)v20 + 32))(v20, v11);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BEEC4E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'AnalyticsLogger::logRegistrationError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  AnalyticsLogger::logRegistrationError(a1 - 136, a2, a3);
}

void AnalyticsLogger::logDeRegistration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"AnalyticsLogger::logDeRegistration", 34);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v17 = 0uLL;
  v5 = a2[1];
  v15 = *a2;
  v16 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8.n128_f64[0] = ims::analytics::RegistrationAttemptEvent::createDeregistrationAttempt(&v15, &v17);
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v9->__on_zero_shared)(v9, v8);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  (*(void (**)(_QWORD, __n128))(*(_QWORD *)v17 + 32))(v17, v8);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BEEC4F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'AnalyticsLogger::logDeRegistration(uint64_t a1, uint64_t *a2)
{
  AnalyticsLogger::logDeRegistration(a1 - 136, a2);
}

void AnalyticsLogger::logSessionRequestedEvent(_BYTE *a1, BambiCall **a2, char a3, char a4)
{
  BambiClient *v8;
  BambiCall *v9;
  time_t v10;
  uint64_t v11;
  BambiCall *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  int v18;
  BOOL v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  char v22;
  uint64_t v23;
  BambiCall *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  ims::analytics::ActiveRatField *v28;
  ims::analytics::ActiveRatField *v29;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *size;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::string v43;
  std::string __str;

  v8 = (BambiClient *)BambiCall::bambiClient(*a2);
  memset(&__str, 0, sizeof(__str));
  v9 = *a2;
  if (*((char *)*a2 + 511) < 0)
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v9 + 61), *((_QWORD *)v9 + 62));
  else
    __str = *(std::string *)((char *)v9 + 488);
  v10 = time(0);
  a1[616] = a3;
  v11 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"AnalyticsLogger::logSessionRequestedEvent MO/MT=", 48);
  *(_BYTE *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" hashed call Id is ", 19);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 32))(v11, &__str);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  v12 = *a2;
  v13 = (std::__shared_weak_count *)*((_QWORD *)*a2 + 45);
  if (v13)
  {
    v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      v15 = *((_QWORD *)v12 + 44);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = 0;
LABEL_9:
  if (*(char *)(v15 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(v15 + 4136), *(_QWORD *)(v15 + 4144));
  else
    v43 = *(std::string *)(v15 + 4136);
  v16 = *((_QWORD *)v8 + 19);
  if (v16)
  {
    v17 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v16 + 312, (void **)&v43.__r_.__value_.__l.__data_);
    if ((void **)(v16 + 320) == v17)
      v18 = 0;
    else
      v18 = *((_DWORD *)v17 + 14);
    v19 = v18 == 1;
  }
  else
  {
    v19 = 0;
  }
  a1[144] = v19;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if ((unint64_t)BambiClient::callCount(v8) > 1)
  {
    v22 = 1;
  }
  else
  {
    v22 = 0;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    a1[492] = 0;
    *((_DWORD *)a1 + 82) = 0;
    *((_OWORD *)a1 + 21) = 0u;
    *((_OWORD *)a1 + 22) = 0u;
    *((_OWORD *)a1 + 23) = 0u;
    *((_DWORD *)a1 + 96) = 0;
    *((_DWORD *)a1 + 110) = 0;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 408) = 0u;
    *(_OWORD *)(a1 + 424) = 0u;
    *((_OWORD *)a1 + 28) = 0u;
    *((_OWORD *)a1 + 29) = 0u;
    *((_QWORD *)a1 + 60) = 0;
    *(_OWORD *)(a1 + 260) = xmmword_1BF29C5B0;
    *((_DWORD *)a1 + 64) = 0;
    *((_OWORD *)a1 + 14) = 0u;
    *((_OWORD *)a1 + 15) = 0u;
    *((_OWORD *)a1 + 12) = 0u;
    *((_OWORD *)a1 + 13) = 0u;
    *((_OWORD *)a1 + 11) = 0u;
    *((_QWORD *)a1 + 64) = v10;
    *((_QWORD *)a1 + 65) = v10;
    *((_QWORD *)a1 + 67) = v10;
    *((_QWORD *)a1 + 68) = v10;
    *((_QWORD *)a1 + 20) = *((_QWORD *)a1 + 19);
    *((_DWORD *)a1 + 155) = 0;
  }
  a1[584] = v22;
  if ((unint64_t)BambiClient::callCount(v8) < 2 || (a4 & 1) != 0)
  {
    std::string::operator=((std::string *)(a1 + 592), &__str);
  }
  else
  {
    v23 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"call waiting  active call is ", 29);
    *(_BYTE *)(v23 + 17) = 0;
    BambiClient::callCount(v8);
    std::ostream::operator<<();
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
  }
  *((_QWORD *)a1 + 78) = v10;
  v24 = *a2;
  v42 = 0;
  v25 = (std::__shared_weak_count *)*((_QWORD *)*a2 + 45);
  if (v25 && (v42 = std::__shared_weak_count::lock(v25)) != 0)
    v26 = *((_QWORD *)v24 + 44);
  else
    v26 = 0;
  if (*(char *)(v26 + 3231) < 0)
    v27 = *(_QWORD *)(v26 + 3216);
  else
    v27 = *(unsigned __int8 *)(v26 + 3231);
  v28 = (ims::analytics::ActiveRatField *)(v26 + 3136);
  if (v27)
  {
    v29 = (ims::analytics::ActiveRatField *)(v26 + 3208);
    if (*(char *)(v26 + 3255) < 0 ? *(_QWORD *)(v26 + 3240) : *(unsigned __int8 *)(v26 + 3255))
      v28 = v29;
  }
  ims::analytics::ActiveRatField::create(v28, &v43);
  v31 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = 0uLL;
  v32 = (std::__shared_weak_count *)*((_QWORD *)a1 + 80);
  *(_OWORD *)(a1 + 632) = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  size = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
  if (v43.__r_.__value_.__l.__size_)
  {
    v36 = (unint64_t *)(v43.__r_.__value_.__l.__size_ + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v42)
  {
    v38 = (unint64_t *)&v42->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v40 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"AnalyticsLogger::logSessionRequestedEvent", 41);
  *(_BYTE *)(v40 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v40 + 17) = 0;
  if ((a4 & 1) == 0)
  {
    v41 = *((_QWORD *)*a2 + 153);
    if (*((char *)*a2 + 1239) >= 0)
      v41 = *((unsigned __int8 *)*a2 + 1239);
    a1[492] = v41 != 0;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BEEC54BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'AnalyticsLogger::logSessionRequestedEvent(uint64_t a1, BambiCall **a2, char a3, char a4)
{
  AnalyticsLogger::logSessionRequestedEvent((_BYTE *)(a1 - 136), a2, a3, a4);
}

uint64_t AnalyticsLogger::logSessionProgressEvent(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"logSessionProgressEvent", 23);
  *(_BYTE *)(v4 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 1224);
  if (*(char *)(*(_QWORD *)a2 + 1239) >= 0)
    v6 = *(unsigned __int8 *)(*(_QWORD *)a2 + 1239);
  a1[492] = v6 != 0;
  return result;
}

uint64_t `non-virtual thunk to'AnalyticsLogger::logSessionProgressEvent(uint64_t a1, uint64_t a2)
{
  return AnalyticsLogger::logSessionProgressEvent((_BYTE *)(a1 - 136), a2);
}

uint64_t AnalyticsLogger::logRingingEvent(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"logRingingEvent", 15);
  *(_BYTE *)(v4 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 1224);
  if (*(char *)(*(_QWORD *)a2 + 1239) >= 0)
    v6 = *(unsigned __int8 *)(*(_QWORD *)a2 + 1239);
  a1[492] = v6 != 0;
  return result;
}

uint64_t `non-virtual thunk to'AnalyticsLogger::logRingingEvent(uint64_t a1, uint64_t a2)
{
  return AnalyticsLogger::logRingingEvent((_BYTE *)(a1 - 136), a2);
}

time_t AnalyticsLogger::logSessionConfirmedEvent(_QWORD *a1)
{
  uint64_t v2;
  time_t result;

  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"logSessionConfirmedEvent", 24);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  result = time(0);
  a1[67] = result;
  a1[68] = result;
  return result;
}

time_t `non-virtual thunk to'AnalyticsLogger::logSessionConfirmedEvent(uint64_t a1)
{
  return AnalyticsLogger::logSessionConfirmedEvent((_QWORD *)(a1 - 136));
}

uint64_t AnalyticsLogger::logCallStatusChange(AnalyticsLogger *this, BambiCallEvent *a2, const __CFString *a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = (*(uint64_t (**)(AnalyticsLogger *, BambiCallEvent *, const __CFString *))(*(_QWORD *)this + 64))(this, a2, a3);
  (*(void (**)(AnalyticsLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"AnalyticsLogger::logCallStatusChange", 36);
  *(_BYTE *)(v4 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  return result;
}

uint64_t `non-virtual thunk to'AnalyticsLogger::logCallStatusChange(AnalyticsLogger *this, BambiCallEvent *a2, const __CFString *a3)
{
  return AnalyticsLogger::logCallStatusChange((AnalyticsLogger *)((char *)this - 136), a2, a3);
}

uint64_t AnalyticsLogger::logParticipantLeftConference(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"AnalyticsLogger::logParticipantLeftConference", 45);
  *(_BYTE *)(v2 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return result;
}

uint64_t `non-virtual thunk to'AnalyticsLogger::logParticipantLeftConference(uint64_t a1)
{
  return AnalyticsLogger::logParticipantLeftConference(a1 - 136);
}

void AnalyticsLogger::logLazuliRefer(uint64_t a1, uint64_t *a2, uint64_t a3, BOOL a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string __p;
  std::string v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"AnalyticsLogger::logLazuliRefer", 31);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  v28 = 0;
  v29 = 0;
  v15 = (std::__shared_weak_count *)a2[1];
  v26 = *a2;
  v27 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v25 = *(std::string *)a3;
  if (*(char *)(a7 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
  else
    __p = *(std::string *)a7;
  ims::analytics::LazuliReferEvent::create((uint64_t)&v26, (uint64_t)&v25, a4, a5, a6, (uint64_t)&__p, &v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  v21 = v29;
  if (v29)
  {
    v22 = (unint64_t *)&v29->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BEEC59E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'AnalyticsLogger::logLazuliRefer(uint64_t a1, uint64_t *a2, uint64_t a3, BOOL a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  AnalyticsLogger::logLazuliRefer(a1 - 136, a2, a3, a4, a5, a6, a7);
}

void AnalyticsLogger::logLazuliMessageSessionSetup(uint64_t a1, BOOL a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, BOOL value)
{
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"AnalyticsLogger::logLazuliMessageSessionSetup", 45);
  *(_BYTE *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v18 + 17) = 0;
  v27 = 0;
  v28 = 0;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v26 = *(std::string *)a5;
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v25 = *(std::string *)a6;
  if (*(char *)(a7 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
  else
    v24 = *(std::string *)a7;
  if (*(char *)(a8 + 23) < 0)
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
  else
    v23 = *(std::string *)a8;
  if (*(char *)(a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a9, *(_QWORD *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    v22.__r_.__value_.__r.__words[2] = *(_QWORD *)(a9 + 16);
  }
  ims::analytics::MessageSessionSetupEvent::create(a2, a3, a4, (uint64_t)&v26, (uint64_t)&v25, (uint64_t)&v24, (uint64_t)&v23, (uint64_t)&v22, &v27, value);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
  v19 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1BEEC5C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a37 < 0)
    operator delete(a32);
  if (*(char *)(v37 - 105) < 0)
    operator delete(*(void **)(v37 - 128));
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'AnalyticsLogger::logLazuliMessageSessionSetup(uint64_t a1, BOOL a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, BOOL a10)
{
  AnalyticsLogger::logLazuliMessageSessionSetup(a1 - 136, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void AnalyticsLogger::logLazuliMessageSessionEnd(uint64_t a1, unsigned int a2, unsigned int a3, BOOL a4, BOOL a5, uint64_t a6, unsigned int a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::string v22;
  std::string v23;
  std::string v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"AnalyticsLogger::logLazuliMessageSessionEnd", 43);
  *(_BYTE *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v18 + 17) = 0;
  v25 = 0;
  v26 = 0;
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v24 = *(std::string *)a6;
  if (*(char *)(a8 + 23) < 0)
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
  else
    v23 = *(std::string *)a8;
  if (*(char *)(a10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a10, *(_QWORD *)(a10 + 8));
  }
  else
  {
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)a10;
    v22.__r_.__value_.__r.__words[2] = *(_QWORD *)(a10 + 16);
  }
  ims::analytics::MessageSessionEndEvent::create(a2, a3, a4, a5, (uint64_t)&v24, a7, (uint64_t)&v23, a9, &v25, (uint64_t)&v22);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
  v19 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1BEEC5F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'AnalyticsLogger::logLazuliMessageSessionEnd(uint64_t a1, unsigned int a2, unsigned int a3, BOOL a4, BOOL a5, uint64_t a6, unsigned int a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  AnalyticsLogger::logLazuliMessageSessionEnd(a1 - 136, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void AnalyticsLogger::logLazuliMessageSessionSendReceive(uint64_t a1, BOOL a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, BOOL a7, BOOL a8, uint64_t a9, BOOL a10, unsigned int a11)
{
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string v23;
  std::string v24;
  std::string v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"AnalyticsLogger::logLazuliMessageSessionSendReceive", 51);
  *(_BYTE *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v19 + 17) = 0;
  v26 = 0;
  v27 = 0;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v25 = *(std::string *)a5;
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v24 = *(std::string *)a6;
  if (*(char *)(a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a9, *(_QWORD *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    v23.__r_.__value_.__r.__words[2] = *(_QWORD *)(a9 + 16);
  }
  ims::analytics::MessageSessionSendReceiveEvent::create(a2, a3, a4, (uint64_t)&v25, (uint64_t)&v24, a7, a8, (uint64_t)&v23, &v26, a10, a11);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
  v20 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1BEEC616C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'AnalyticsLogger::logLazuliMessageSessionSendReceive(uint64_t a1, BOOL a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, BOOL a7, BOOL a8, uint64_t a9, BOOL a10, unsigned int a11)
{
  AnalyticsLogger::logLazuliMessageSessionSendReceive(a1 - 136, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void AnalyticsLogger::logLazuliMessageSendReceive(uint64_t a1, BOOL a2, unsigned int a3, unsigned int a4, uint64_t a5, BOOL a6, BOOL a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"AnalyticsLogger::logLazuliMessageSendReceive", 44);
  *(_BYTE *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v18 + 17) = 0;
  v26 = 0;
  v27 = 0;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v25 = *(std::string *)a5;
  if (*(char *)(a8 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
  else
    v24 = *(std::string *)a8;
  if (*(char *)(a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a9, *(_QWORD *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    v23.__r_.__value_.__r.__words[2] = *(_QWORD *)(a9 + 16);
  }
  if (*(char *)(a10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a10, *(_QWORD *)(a10 + 8));
  }
  else
  {
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)a10;
    v22.__r_.__value_.__r.__words[2] = *(_QWORD *)(a10 + 16);
  }
  ims::analytics::MessageSendReceiveEvent::create(a2, a3, a4, (uint64_t)&v25, a6, a7, (uint64_t)&v24, (uint64_t)&v23, &v26, (uint64_t)&v22);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
  v19 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1BEEC6404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'AnalyticsLogger::logLazuliMessageSendReceive(uint64_t a1, BOOL a2, unsigned int a3, unsigned int a4, uint64_t a5, BOOL a6, BOOL a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  AnalyticsLogger::logLazuliMessageSendReceive(a1 - 136, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void AnalyticsLogger::logLazuliMessageSipOptions(uint64_t a1, BOOL a2, BOOL a3, BOOL a4, BOOL a5, BOOL a6, BOOL a7, BOOL a8, BOOL a9, BOOL a10, BOOL a11, BOOL a12, BOOL a13, BOOL a14, uint64_t a15, BOOL a16, BOOL a17, unsigned int a18, unsigned int a19, BOOL a20,BOOL a21)
{
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::string v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"AnalyticsLogger::logLazuliMessageSipOptions", 43);
  *(_BYTE *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v22 + 17) = 0;
  v34 = 0;
  v35 = 0;
  if (*(char *)(a15 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a15, *(_QWORD *)(a15 + 8));
  }
  else
  {
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)a15;
    v33.__r_.__value_.__r.__words[2] = *(_QWORD *)(a15 + 16);
  }
  ims::analytics::MessageSipOptionsEvent::create(a2, a3, a4, a5, a6, a7, a8, a9, &v34, a10, a11, a12, a13, a14, (uint64_t)&v33, a16, a17, a18, a19,
    a20,
    a21);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 32))(v34);
  v23 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1BEEC6654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 96);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'AnalyticsLogger::logLazuliMessageSipOptions(uint64_t a1, BOOL a2, BOOL a3, BOOL a4, BOOL a5, BOOL a6, BOOL a7, BOOL a8, BOOL a9, BOOL a10, BOOL a11, BOOL a12, BOOL a13, BOOL a14, uint64_t a15, BOOL a16, BOOL a17, unsigned int a18, unsigned int a19, BOOL a20,BOOL a21)
{
  AnalyticsLogger::logLazuliMessageSipOptions(a1 - 136, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21);
}

void AnalyticsLogger::fillCallEndMetricFromEvent(AnalyticsLogger *this, awd::metrics::ATM_CallEndEvent *a2, const BambiCallSessionTerminationBaseEvent *a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _BOOL4 v18;
  ImsPrefs *v19;
  void **InactivityTimerRTPSecondsKey;
  void *v21;
  int v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  char v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  int v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  _BYTE *v84;
  int v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  unint64_t *v117;
  unint64_t *v118;
  unint64_t *v119;
  unint64_t *v120;
  unint64_t *v121;
  unint64_t *v122;
  unint64_t *v123;
  unint64_t *v124;
  unint64_t *v125;
  unint64_t *v126;
  unint64_t *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  unint64_t *v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  unint64_t *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;

  v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 3);
  if (v8)
  {
    v9 = *((_QWORD *)a3 + 2);
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v141 = 0;
    v142 = std::__shared_weak_count::lock(v8);
    if (v142)
    {
      v141 = v9;
      std::__shared_weak_count::__release_weak(v8);
      if (v9)
        goto LABEL_10;
    }
    else
    {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v141 = 0;
    v142 = 0;
  }
  v12 = (*(uint64_t (**)(AnalyticsLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(AnalyticsLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"AnalyticsLogger::fillCallEndMetricFromEvent - no call", 53);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v9 = 0;
  *(_BYTE *)(v12 + 17) = 0;
LABEL_10:
  v13 = *((_QWORD *)this + 20);
  if (v13 == *((_QWORD *)this + 19))
  {
    v18 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(v9 + 416);
    v15 = *(unsigned int *)(v13 - 8);
    v16 = *(std::__shared_weak_count **)(v9 + 360);
    if (v16)
    {
      v16 = std::__shared_weak_count::lock(v16);
      v17 = v16;
      if (v16)
        v16 = *(std::__shared_weak_count **)(v9 + 352);
    }
    else
    {
      v17 = 0;
    }
    v19 = (ImsPrefs *)SipStack::prefs((SipStack *)v16);
    InactivityTimerRTPSecondsKey = (void **)ImsPrefs::getInactivityTimerRTPSecondsKey(v19);
    v21 = ImsPrefs::prefWithKey(v19, InactivityTimerRTPSecondsKey);
    if (v21)
      v22 = (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 56))(v21);
    else
      v22 = *((_DWORD *)InactivityTimerRTPSecondsKey + 15);
    v18 = a4 - v14 - v15 < v22;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *((_QWORD *)this + 20) = *((_QWORD *)this + 19);
    v9 = v141;
  }
  v25 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v9 + 360));
  v26 = *(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(*(_QWORD *)(v9 + 352) + 144)) + 456);
  *((_DWORD *)a2 + 172) |= 0x10u;
  *((_BYTE *)a2 + 646) = v26;
  v27 = (unint64_t *)&v25->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  switch(*((_DWORD *)a3 + 10))
  {
    case 0:
      v49 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 7;
      *((_DWORD *)a2 + 169) = v49 | 0x30;
      v50 = 1007;
      goto LABEL_87;
    case 1:
      v51 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 8;
      *((_DWORD *)a2 + 169) = v51 | 0x30;
      v50 = 1008;
      goto LABEL_87;
    case 2:
      v52 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 15;
      *((_DWORD *)a2 + 169) = v52 | 0x30;
      v50 = 1015;
      goto LABEL_87;
    case 3:
      v53 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 16;
      *((_DWORD *)a2 + 169) = v53 | 0x30;
      v50 = 1016;
      goto LABEL_87;
    case 4:
      v54 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 10;
      *((_DWORD *)a2 + 169) = v54 | 0x30;
      v50 = 1010;
      goto LABEL_87;
    case 5:
      v55 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 11;
      *((_DWORD *)a2 + 169) = v55 | 0x30;
      v50 = 1011;
      goto LABEL_87;
    case 6:
      *((_DWORD *)a2 + 169) |= 0x10u;
      v56 = 33;
      goto LABEL_150;
    case 7:
      *((_DWORD *)a2 + 169) |= 0x10u;
      v56 = 34;
      goto LABEL_150;
    case 8:
      v57 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 14;
      *((_BYTE *)a2 + 236) = 1;
      *((_DWORD *)a2 + 169) = v57 | 0x70;
      v50 = 1014;
      goto LABEL_87;
    case 9:
      v58 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 32;
      *((_DWORD *)a2 + 169) = v58 | 0x30;
      v50 = 1000;
      goto LABEL_87;
    case 0xA:
    case 0x26:
      v43 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 13;
      *((_DWORD *)a2 + 169) = v43 | 0x30;
      *((_DWORD *)a2 + 48) = 1013;
      v30 = v142;
      if (v142)
      {
        v44 = (unint64_t *)&v142->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      v46 = *(_QWORD *)(v141 + 424);
      if (v46 < 1 || time(0) - v46 <= 10)
        v47 = 1;
      else
        v47 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v47;
      if (!v142)
        break;
      v48 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v48);
      while (__stlxr(v41 - 1, v48));
      goto LABEL_232;
    case 0xB:
    case 0x1D:
    case 0x24:
      v35 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 9;
      *((_DWORD *)a2 + 169) = v35 | 0x30;
      *((_DWORD *)a2 + 48) = 1009;
      v30 = v142;
      if (v142)
      {
        v36 = (unint64_t *)&v142->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      v38 = *(_QWORD *)(v141 + 424);
      if (v38 < 1 || time(0) - v38 <= 10)
        v39 = 1;
      else
        v39 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v39;
      if (!v142)
        break;
      v42 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v42);
      while (__stlxr(v41 - 1, v42));
      goto LABEL_232;
    case 0xC:
      v59 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 17;
      *((_DWORD *)a2 + 169) = v59 | 0x30;
      v50 = 1017;
      goto LABEL_87;
    case 0xD:
      v60 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 12;
      *((_DWORD *)a2 + 169) = v60 | 0x30;
      *((_DWORD *)a2 + 48) = 1012;
      v30 = v142;
      if (v142)
      {
        v61 = (unint64_t *)&v142->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v63 = *(_QWORD *)(v141 + 424);
      if (v63 < 1 || time(0) - v63 <= 10)
        v64 = 1;
      else
        v64 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v64;
      if (!v142)
        break;
      v117 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v117);
      while (__stlxr(v41 - 1, v117));
      goto LABEL_232;
    case 0xE:
      v65 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 19;
      *((_DWORD *)a2 + 169) = v65 | 0x30;
      *((_DWORD *)a2 + 48) = 1019;
      v30 = v142;
      if (v142)
      {
        v66 = (unint64_t *)&v142->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      v68 = *(_QWORD *)(v141 + 424);
      if (v68 < 1 || time(0) - v68 <= 10)
        v69 = 1;
      else
        v69 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v69;
      if (!v142)
        break;
      v118 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v118);
      while (__stlxr(v41 - 1, v118));
      goto LABEL_232;
    case 0xF:
      v70 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 21;
      *((_DWORD *)a2 + 169) = v70 | 0x30;
      v50 = 1021;
LABEL_87:
      *((_DWORD *)a2 + 48) = v50;
      break;
    case 0x10:
      v71 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 22;
      *((_DWORD *)a2 + 169) = v71 | 0x30;
      *((_DWORD *)a2 + 48) = 1022;
      v30 = v142;
      if (v142)
      {
        v72 = (unint64_t *)&v142->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      v74 = *(_QWORD *)(v141 + 424);
      if (v74 < 1 || time(0) - v74 <= 10)
        v75 = 1;
      else
        v75 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v75;
      if (!v142)
        break;
      v119 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v119);
      while (__stlxr(v41 - 1, v119));
      goto LABEL_232;
    case 0x11:
      v76 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 23;
      *((_DWORD *)a2 + 169) = v76 | 0x30;
      *((_DWORD *)a2 + 48) = 1023;
      v30 = v142;
      if (v142)
      {
        v77 = (unint64_t *)&v142->__shared_owners_;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      v79 = *(_QWORD *)(v141 + 424);
      if (v79 < 1 || time(0) - v79 <= 10)
        v80 = 1;
      else
        v80 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v80;
      if (!v142)
        break;
      v120 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v120);
      while (__stlxr(v41 - 1, v120));
      goto LABEL_232;
    case 0x12:
    case 0x20:
    case 0x21:
    case 0x23:
      v29 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 24;
      *((_DWORD *)a2 + 169) = v29 | 0x30;
      *((_DWORD *)a2 + 48) = 1024;
      v30 = v142;
      if (v142)
      {
        v31 = (unint64_t *)&v142->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v33 = *(_QWORD *)(v141 + 424);
      if (v33 < 1 || time(0) - v33 <= 10)
        v34 = 1;
      else
        v34 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v34;
      if (!v142)
        break;
      v40 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      goto LABEL_232;
    case 0x13:
      if (v18)
      {
        awd::metrics::ATM_CallEndEvent::set_status_code((uint64_t)a2, (awd::metrics *)0x405);
        v81 = (*(uint64_t (**)(AnalyticsLogger *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(AnalyticsLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v81);
        v82 = (_BYTE *)ImsOutStream::operator<<(v81, "media timeout after handover ");
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v82[17] = 0;
      }
      else
      {
        awd::metrics::ATM_CallEndEvent::set_status_code((uint64_t)a2, (awd::metrics *)0x401);
      }
      *((_DWORD *)a2 + 169) |= 0x10u;
      *((_DWORD *)a2 + 45) = 25;
      v30 = v142;
      if (v142)
      {
        v128 = (unint64_t *)&v142->__shared_owners_;
        do
          v129 = __ldxr(v128);
        while (__stxr(v129 + 1, v128));
      }
      v130 = *(_QWORD *)(v141 + 424);
      if (v130 < 1 || time(0) - v130 <= 10)
        v131 = 1;
      else
        v131 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v131;
      if (!v142)
        break;
      v132 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v132);
      while (__stlxr(v41 - 1, v132));
      goto LABEL_232;
    case 0x14:
      if (v18)
      {
        awd::metrics::ATM_CallEndEvent::set_status_code((uint64_t)a2, (awd::metrics *)0x405);
        v83 = (*(uint64_t (**)(AnalyticsLogger *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(AnalyticsLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v83);
        v84 = (_BYTE *)ImsOutStream::operator<<(v83, "media timeout after handover ");
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v84[17] = 0;
      }
      else
      {
        awd::metrics::ATM_CallEndEvent::set_status_code((uint64_t)a2, (awd::metrics *)0x402);
      }
      v133 = *((_QWORD *)this + 68);
      if (v133 >= 1 && !*((_BYTE *)a3 + 56))
      {
        *((_DWORD *)a2 + 171) |= 0x1000u;
        *((_DWORD *)a2 + 138) = a4 - v133;
      }
      *((_DWORD *)a2 + 169) |= 0x10u;
      *((_DWORD *)a2 + 45) = 26;
      v30 = v142;
      if (v142)
      {
        v134 = (unint64_t *)&v142->__shared_owners_;
        do
          v135 = __ldxr(v134);
        while (__stxr(v135 + 1, v134));
      }
      v136 = *(_QWORD *)(v141 + 424);
      if (v136 < 1 || time(0) - v136 <= 10)
        v137 = 1;
      else
        v137 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v137;
      if (!v142)
        break;
      v138 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v138);
      while (__stlxr(v41 - 1, v138));
      goto LABEL_232;
    case 0x15:
      v85 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 27;
      *((_DWORD *)a2 + 169) = v85 | 0x30;
      *((_DWORD *)a2 + 48) = 1027;
      v30 = v142;
      if (v142)
      {
        v86 = (unint64_t *)&v142->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      v88 = *(_QWORD *)(v141 + 424);
      if (v88 < 1 || time(0) - v88 <= 10)
        v89 = 1;
      else
        v89 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v89;
      if (!v142)
        break;
      v121 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v121);
      while (__stlxr(v41 - 1, v121));
      goto LABEL_232;
    case 0x16:
      v90 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 28;
      *((_DWORD *)a2 + 169) = v90 | 0x30;
      *((_DWORD *)a2 + 48) = 1028;
      v30 = v142;
      if (v142)
      {
        v91 = (unint64_t *)&v142->__shared_owners_;
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      v93 = *(_QWORD *)(v141 + 424);
      if (v93 < 1 || time(0) - v93 <= 10)
        v94 = 1;
      else
        v94 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v94;
      if (!v142)
        break;
      v122 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v122);
      while (__stlxr(v41 - 1, v122));
      goto LABEL_232;
    case 0x17:
      v95 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 30;
      *((_DWORD *)a2 + 169) = v95 | 0x230;
      *((_QWORD *)a2 + 24) = 0x100000406;
      break;
    case 0x18:
      *((_DWORD *)a2 + 169) |= 0x10u;
      *((_DWORD *)a2 + 45) = 35;
      v30 = v142;
      if (v142)
      {
        v96 = (unint64_t *)&v142->__shared_owners_;
        do
          v97 = __ldxr(v96);
        while (__stxr(v97 + 1, v96));
      }
      v98 = *(_QWORD *)(v141 + 424);
      if (v98 < 1 || time(0) - v98 <= 10)
        v99 = 1;
      else
        v99 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v99;
      if (!v142)
        break;
      v123 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v123);
      while (__stlxr(v41 - 1, v123));
      goto LABEL_232;
    case 0x19:
      v100 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 31;
      *((_DWORD *)a2 + 169) = v100 | 0x30;
      *((_DWORD *)a2 + 48) = 1031;
      v30 = v142;
      if (v142)
      {
        v101 = (unint64_t *)&v142->__shared_owners_;
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 1, v101));
      }
      v103 = *(_QWORD *)(v141 + 424);
      if (v103 < 1 || time(0) - v103 <= 10)
        v104 = 1;
      else
        v104 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v104;
      if (!v142)
        break;
      v124 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v124);
      while (__stlxr(v41 - 1, v124));
      goto LABEL_232;
    case 0x1A:
      *((_DWORD *)a2 + 169) |= 0x10u;
      v56 = 36;
      goto LABEL_150;
    case 0x1B:
      *((_DWORD *)a2 + 169) |= 0x10u;
      v56 = 37;
      goto LABEL_150;
    case 0x1C:
      *((_DWORD *)a2 + 169) |= 0x10u;
      *((_DWORD *)a2 + 45) = 38;
      v30 = v142;
      if (v142)
      {
        v105 = (unint64_t *)&v142->__shared_owners_;
        do
          v106 = __ldxr(v105);
        while (__stxr(v106 + 1, v105));
      }
      v107 = *(_QWORD *)(v141 + 424);
      if (v107 < 1 || time(0) - v107 <= 10)
        v108 = 1;
      else
        v108 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v108;
      if (!v142)
        break;
      v125 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v125);
      while (__stlxr(v41 - 1, v125));
      goto LABEL_232;
    case 0x1E:
      *((_DWORD *)a2 + 169) |= 0x10u;
      *((_DWORD *)a2 + 45) = 39;
      v30 = v142;
      if (v142)
      {
        v109 = (unint64_t *)&v142->__shared_owners_;
        do
          v110 = __ldxr(v109);
        while (__stxr(v110 + 1, v109));
      }
      v111 = *(_QWORD *)(v141 + 424);
      if (v111 < 1 || time(0) - v111 <= 10)
        v112 = 1;
      else
        v112 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v112;
      if (!v142)
        break;
      v126 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v126);
      while (__stlxr(v41 - 1, v126));
      goto LABEL_232;
    case 0x1F:
      *((_DWORD *)a2 + 169) |= 0x10u;
      *((_DWORD *)a2 + 45) = 40;
      v30 = v142;
      if (v142)
      {
        v113 = (unint64_t *)&v142->__shared_owners_;
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      v115 = *(_QWORD *)(v141 + 424);
      if (v115 < 1 || time(0) - v115 <= 10)
        v116 = 1;
      else
        v116 = 2;
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v116;
      if (!v142)
        break;
      v127 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v127);
      while (__stlxr(v41 - 1, v127));
LABEL_232:
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      break;
    case 0x22:
      *((_DWORD *)a2 + 169) |= 0x10u;
      v56 = 41;
LABEL_150:
      *((_DWORD *)a2 + 45) = v56;
      break;
    default:
      break;
  }
  if (v142)
  {
    v139 = (unint64_t *)&v142->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
}

void sub_1BEEC7590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v17 - 96);
  _Unwind_Resume(a1);
}

uint64_t AnalyticsLogger::logSessionTerminationEvent(AnalyticsLogger *this, const BambiCallSessionTerminationBaseEvent *a2, const uint64_t *a3, unsigned __int8 a4, int a5)
{
  uint64_t v9;
  xpc_object_t v10;
  unint64_t v11;
  int v12;
  xpc_object_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _anonymous_namespace_::CallEndEventImpl *v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  int8x16_t v46;
  xpc_object_t object;
  xpc_object_t object_8[2];
  __int128 v49;
  __int128 v50;
  _QWORD v51[3];
  __int128 v52;
  __int128 v53;
  _BYTE v54[24];
  __int128 v55;
  __int128 v56;
  _QWORD v57[3];
  __int128 v58;
  __int128 v59;
  void *__p[2];
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v9 = (*(uint64_t (**)(AnalyticsLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(AnalyticsLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"AnalyticsLogger::logSessionTerminationEvent", 43);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (!a2)
    return 1013;
  v63 = time(0);
  v46 = 0u;
  object = 0;
  v45 = 0u;
  v10 = xpc_null_create();
  *(_OWORD *)object_8 = 0uLL;
  v49 = 0u;
  v50 = 0u;
  memset(v51, 0, sizeof(v51));
  v52 = 0u;
  v53 = 0u;
  memset(v54, 0, sizeof(v54));
  v55 = 0u;
  v56 = 0u;
  memset(v57, 0, sizeof(v57));
  v58 = 0u;
  v59 = 0u;
  *(_OWORD *)__p = 0u;
  v61 = 0u;
  v62 = 0u;
  HIDWORD(v11) = *((_DWORD *)this + 122);
  LODWORD(v11) = HIDWORD(v11);
  v12 = *((_DWORD *)this + 65);
  LODWORD(v45) = v11 >> 16;
  DWORD1(v45) = v12;
  BYTE8(v45) = *((_BYTE *)this + 144);
  v46 = vextq_s8(*((int8x16_t *)this + 32), *((int8x16_t *)this + 32), 8uLL);
  v13 = (xpc_object_t)*((_QWORD *)this + 81);
  if (v13)
    xpc_retain(*((xpc_object_t *)this + 81));
  else
    v13 = xpc_null_create();
  object = v13;
  xpc_release(v10);
  if (&__p[1] != (void **)((char *)this + 152))
  {
    v16 = (_BYTE *)*((_QWORD *)this + 19);
    v15 = (_BYTE *)*((_QWORD *)this + 20);
    v17 = v15 - v16;
    v18 = (v15 - v16) >> 3;
    if (v15 == v16)
    {
      v19 = 0;
    }
    else
    {
      if (v17 < 0)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>((v15 - v16) >> 3);
      __p[1] = v19;
      *(_QWORD *)&v61 = v19;
      *((_QWORD *)&v61 + 1) = &v19[8 * v20];
      memmove(v19, v16, v17 - 3);
    }
    *(_QWORD *)&v61 = &v19[8 * v18];
  }
  v21 = *((_OWORD *)this + 21);
  *(_OWORD *)object_8 = *((_OWORD *)this + 20);
  v49 = v21;
  v50 = *((_OWORD *)this + 22);
  v51[0] = *((_QWORD *)this + 46);
  v22 = *((_OWORD *)this + 28);
  *(_OWORD *)&v51[1] = *((_OWORD *)this + 27);
  v52 = v22;
  v53 = *((_OWORD *)this + 29);
  v23 = *(_OWORD *)((char *)this + 264);
  v24 = *(_OWORD *)((char *)this + 280);
  v25 = *(_OWORD *)((char *)this + 296);
  v26 = *((_QWORD *)this + 39);
  *(_QWORD *)v54 = *((_QWORD *)this + 60);
  v57[0] = v26;
  v56 = v25;
  v55 = v24;
  *(_OWORD *)&v54[8] = v23;
  __p[0] = *((void **)this + 53);
  v27 = *(_OWORD *)((char *)this + 408);
  v28 = *(_OWORD *)((char *)this + 376);
  v58 = *(_OWORD *)((char *)this + 392);
  v59 = v27;
  *(_OWORD *)&v57[1] = v28;
  v29 = *((_QWORD *)this + 79);
  v30 = *((_QWORD *)this + 80);
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  *(_QWORD *)&v62 = v29;
  *((_QWORD *)&v62 + 1) = v30;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v43 = 0;
  v44 = 0;
  ims::analytics::CallEndEvent::create(a2, (const BambiCallSessionTerminationBaseEvent *)&v63, a3, a5, *((_BYTE *)this + 584), (const AnalyticsLogger::AnalyticsData *)&v45, &v43);
  (*(void (**)(_anonymous_namespace_::CallEndEventImpl *))(*(_QWORD *)v43 + 32))(v43);
  v14 = AnalyticsLogger::logSessionTerminationEventAwd((xpc_object_t *)this, a2, &v63, (int)a3, a5);
  v36 = v44;
  if (v44)
  {
    v37 = (unint64_t *)&v44->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (__p[1])
  {
    *(void **)&v61 = __p[1];
    operator delete(__p[1]);
  }
  xpc_release(object);
  return v14;
}

void sub_1BEEC7A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AnalyticsLogger::AnalyticsData::~AnalyticsData((AnalyticsLogger::AnalyticsData *)va);
  _Unwind_Resume(a1);
}

uint64_t AnalyticsLogger::logSessionTerminationEventAwd(xpc_object_t *this, const BambiCallSessionTerminationBaseEvent *a2, uint64_t *a3, int a4, int a5)
{
  std::__shared_weak_count *v6;
  BambiCall *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  BambiClient *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BambiCall *v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  int v28;
  xpc_object_t *v29;
  char v30;
  int v31;
  char v32;
  char v33;
  char v34;
  int v35;
  uint64_t v36;
  char v37;
  std::string *v38;
  std::__shared_weak_count *v39;
  std::string::size_type v40;
  uint64_t v41;
  const std::string *v42;
  const std::string *v43;
  std::string *v45;
  std::__shared_weak_count *size;
  unint64_t *v47;
  unint64_t v48;
  char v49;
  int v50;
  BambiCall *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  BambiCall *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  int v62;
  unint64_t *v63;
  unint64_t v64;
  BambiCall *v65;
  int v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t *v69;
  int v70;
  BOOL isIwlanOverCellular;
  std::string::size_type v72;
  char v73;
  std::string *v74;
  uint64_t *v75;
  unint64_t v76;
  BambiCall *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  ImsPrefs *v87;
  void **PacketAlignmentAMRNBKey;
  BOOL v89;
  unint64_t *v90;
  unint64_t v91;
  BambiCall *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  ImsPrefs *v95;
  void **v96;
  _BOOL4 v97;
  unint64_t *v98;
  unint64_t v99;
  BambiCall *v100;
  char v101;
  int v102;
  char v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  int v112;
  const char *v113;
  uint64_t v114;
  int v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  xpc_object_t v119;
  xpc_object_t v120;
  xpc_object_t v121;
  int v122;
  unsigned int v123;
  unsigned int *v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unsigned int v130;
  int v131;
  __int32 v132;
  int v133;
  xpc_object_t v134;
  BambiCall *v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count *v137;
  unsigned int v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unsigned int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  _OWORD *v147;
  std::string::size_type v148;
  std::string *v149;
  const uint64_t *v150;
  char v151;
  int64_t v152;
  int v153;
  void *v154;
  std::string *v155;
  char *v156;
  std::string *v157;
  char *v158;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  uint64_t v188;
  _OWORD *v189;
  awd::metrics *v190;
  __int32 v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  int v196;
  unint64_t *v197;
  unint64_t v198;
  std::string::size_type v199;
  std::string *v200;
  _OWORD *v201;
  std::string::size_type v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  std::string *v208;
  int v209;
  std::string::size_type v210;
  char isMultisimEnabled;
  unint64_t *v212;
  unint64_t v213;
  std::string *v214;
  char *v215;
  char *v216;
  int v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  awd::metrics *v225;
  __int32 v226;
  uint64_t v227;
  BambiCall *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count *v230;
  ImsPrefs *v231;
  void **RTCPIntervalSecondsKey;
  void *v233;
  int v234;
  unint64_t *v235;
  unint64_t v236;
  BambiCall *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count *v239;
  ImsPrefs *v240;
  void **EnableRTCPExtendedReportsKey;
  void *v242;
  char v243;
  unint64_t *v244;
  unint64_t v245;
  BOOL v246;
  char v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  BambiCall *v252;
  uint64_t v253;
  char v254;
  void *v255;
  char v256;
  void *v257;
  char v258;
  uint64_t *v259;
  std::__shared_weak_count *v260;
  void *v261;
  uint64_t v262;
  std::string *v263;
  void *__p;
  int v265;
  char v266;
  std::string *v267;
  std::string *v268;
  char v269;
  char v270;
  BOOL v271;
  int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  unsigned int v277;
  int v278;
  std::string *v279;
  int v280;
  uint64_t v281;
  int v282;
  int v283;
  int v284;
  char v285;
  char v286;
  char v287;
  char v288;
  int v289;
  int v290;
  __int128 v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  char v315;
  char v316;
  unsigned int v317;
  _BOOL4 v318;
  unsigned int v319;
  __int128 v320;
  int v321;
  int v322;
  __int128 v323;
  int v324;
  __int128 v325;
  int v326;
  __int128 v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  int v337;
  char v338;
  char v339;
  char v340;
  char v341;
  int v342;
  int v343;
  int v344;
  char v345;
  std::string *v346;
  int v347;
  int v348;
  BOOL v349;
  int v350;
  int8x8_t v351;
  int v352;
  int v353;
  std::string __str;
  BambiCall *v355;
  std::__shared_weak_count *v356;
  std::string v357;
  void *v358;
  char v359;
  _QWORD v360[4];
  void **v361[2];
  char v362;
  std::string v363;

  v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (!v6)
  {
    v14 = 0;
    v356 = 0;
    v355 = 0;
    goto LABEL_14;
  }
  v11 = (BambiCall *)*((_QWORD *)a2 + 2);
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v355 = 0;
  v14 = std::__shared_weak_count::lock(v6);
  v356 = v14;
  if (!v14)
  {
    std::__shared_weak_count::__release_weak(v6);
LABEL_14:
    v22 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
    (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"AnalyticsLogger::logSessionTerminationEventAwd - no call", 56);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    v23 = 13;
    if (!v14)
      return v23;
    goto LABEL_449;
  }
  v355 = v11;
  std::__shared_weak_count::__release_weak(v6);
  if (!v11)
    goto LABEL_14;
  v15 = (BambiClient *)BambiCall::bambiClient(v11);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v11 + 45);
  if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
  {
    v18 = v17;
    v19 = *((_QWORD *)v11 + 44) + 208;
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    v19 = 208;
  }
  memset(&__str, 0, sizeof(__str));
  v24 = v355;
  if (*((char *)v355 + 511) < 0)
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v355 + 61), *((_QWORD *)v355 + 62));
  else
    __str = *(std::string *)((char *)v355 + 488);
  v25 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
  (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Current call count is ", 22);
  *(_BYTE *)(v25 + 17) = 0;
  BambiClient::callCount(v15);
  std::ostream::operator<<();
  *(_BYTE *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" SIP callID=", 12);
  *(_BYTE *)(v25 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v261, (const std::string *)((char *)v24 + 464));
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v25 + 56))(v25, &v261);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" handover ", 10);
  *(_BYTE *)(v25 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v25 + 17) = 0;
  if (v266 < 0)
    operator delete(__p);
  if (SHIBYTE(v263) < 0)
    operator delete(v261);
  v253 = *((_QWORD *)a2 + 6);
  v26 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
  (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"AnalyticsLogger::logSessionTerminationEvent", 43);
  *(_BYTE *)(v26 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v26 + 17) = 0;
  bzero(&v262, 0x2B0uLL);
  v261 = &off_1E78BF360;
  v291 = 0u;
  v292 = 0;
  v320 = 0u;
  v321 = 0;
  v323 = 0u;
  v324 = 0;
  v325 = 0u;
  v327 = 0u;
  v328 = 0;
  awd::metrics::ATM_CallEndEvent::SharedCtor((awd::metrics::ATM_CallEndEvent *)&v261);
  v350 |= 2u;
  v27 = v263;
  if (v263 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v27 = (std::string *)operator new();
    v27->__r_.__value_.__r.__words[0] = 0;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v263 = v27;
  }
  std::string::operator=(v27, &__str);
  if (a5)
  {
    v28 = DWORD2(v325);
    if (DWORD2(v325) == HIDWORD(v325))
    {
      wireless_diagnostics::google::protobuf::RepeatedField<BOOL>::Reserve(&v325, DWORD2(v325) + 1);
      v28 = DWORD2(v325);
    }
    DWORD2(v325) = v28 + 1;
    *(_BYTE *)(v325 + v28) = 1;
  }
  if (MEMORY[0x1C3B87B98](this[81]) == MEMORY[0x1E0C812F8])
  {
    v29 = this + 81;
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)(this + 81);
    v357.__r_.__value_.__l.__size_ = (std::string::size_type)"has_redialed";
    if (xpc_dictionary_get_value(this[81], "has_redialed"))
    {
      DWORD2(v325) = 0;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v357, &v363);
      v30 = xpc::dyn_cast_or_default();
      v31 = DWORD2(v325);
      if (DWORD2(v325) == HIDWORD(v325))
      {
        wireless_diagnostics::google::protobuf::RepeatedField<BOOL>::Reserve(&v325, DWORD2(v325) + 1);
        v31 = DWORD2(v325);
      }
      DWORD2(v325) = v31 + 1;
      *(_BYTE *)(v325 + v31) = v30;
      xpc_release(v363.__r_.__value_.__l.__data_);
    }
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)(this + 81);
    v357.__r_.__value_.__l.__size_ = (std::string::size_type)"is_branded_call";
    if (xpc_dictionary_get_value(*v29, "is_branded_call"))
    {
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v357, &v363);
      v32 = xpc::dyn_cast_or_default();
      v351.i32[0] |= 0x800000u;
      v287 = v32;
      xpc_release(v363.__r_.__value_.__l.__data_);
    }
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)(this + 81);
    v357.__r_.__value_.__l.__size_ = (std::string::size_type)"is_image_displayed";
    if (xpc_dictionary_get_value(*v29, "is_image_displayed"))
    {
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v357, &v363);
      v33 = xpc::dyn_cast_or_default();
      v351.i32[0] |= 0x1000000u;
      v288 = v33;
      xpc_release(v363.__r_.__value_.__l.__data_);
    }
  }
  v34 = *(_BYTE *)(v19 + 1814);
  v35 = v350 | 0x10;
  v350 |= 0x10u;
  BYTE5(__p) = v34;
  v36 = *((_QWORD *)v24 + 48);
  if (v36)
  {
    v37 = SipPreconditions::preconditionsSatisfiedInAnyFork((SipPreconditions *)(v36 + 1400));
    v35 = v350;
  }
  else
  {
    v37 = 0;
  }
  v350 = v35 | 0x20;
  BYTE6(__p) = v37;
  BambiCall::firstReportedAccessNetwork(v24, (uint64_t)&v357);
  v350 |= 0x20000u;
  v38 = v268;
  if (v268 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v38 = (std::string *)operator new();
    v38->__r_.__value_.__r.__words[0] = 0;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v268 = v38;
  }
  std::string::operator=(v38, &v357);
  if (v359 < 0)
    operator delete(v358);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  *(_OWORD *)&v357.__r_.__value_.__l.__data_ = 0uLL;
  v39 = (std::__shared_weak_count *)*((_QWORD *)v24 + 45);
  if (v39 && (v357.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v39)) != 0)
  {
    v40 = *((_QWORD *)v24 + 44);
    v357.__r_.__value_.__r.__words[0] = v40;
  }
  else
  {
    v40 = 0;
  }
  if (*(char *)(v40 + 3231) < 0)
    v41 = *(_QWORD *)(v40 + 3216);
  else
    v41 = *(unsigned __int8 *)(v40 + 3231);
  v42 = (const std::string *)(v40 + 3136);
  if (v41)
  {
    v43 = (const std::string *)(v40 + 3208);
    if (*(char *)(v40 + 3255) < 0 ? *(_QWORD *)(v40 + 3240) : *(unsigned __int8 *)(v40 + 3255))
      v42 = v43;
  }
  v350 |= 0x10000u;
  v45 = v267;
  if (v267 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v45 = (std::string *)operator new();
    v45->__r_.__value_.__r.__words[0] = 0;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v267 = v45;
  }
  std::string::operator=(v45, v42);
  size = (std::__shared_weak_count *)v357.__r_.__value_.__l.__size_;
  if (v357.__r_.__value_.__l.__size_)
  {
    v47 = (unint64_t *)(v357.__r_.__value_.__l.__size_ + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v49 = *(_BYTE *)(v19 + 1815);
  v350 |= 0x80u;
  v269 = v49;
  v50 = BambiClient::callCount(v15);
  v351.i32[0] |= 0x400u;
  v280 = v50;
  v51 = v355;
  if (!v355)
    goto LABEL_82;
  v52 = (std::__shared_weak_count *)*((_QWORD *)v355 + 45);
  if (!v52)
    goto LABEL_82;
  v53 = std::__shared_weak_count::lock(v52);
  if (!v53)
    goto LABEL_82;
  v54 = v53;
  v55 = *((_QWORD *)v51 + 44);
  v56 = (unint64_t *)&v53->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v54);
  }
  if (v55)
  {
    v58 = v355;
    v59 = (std::__shared_weak_count *)*((_QWORD *)v355 + 45);
    if (v59 && (v60 = std::__shared_weak_count::lock(v59)) != 0)
    {
      v61 = v60;
      v62 = *(_DWORD *)(*((_QWORD *)v58 + 44) + 4076);
      v353 |= 0x20u;
      v348 = v62;
      v63 = (unint64_t *)&v60->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    else
    {
      v353 |= 0x20u;
      v348 = MEMORY[0xFEC];
    }
    v135 = v355;
    *(_OWORD *)&v357.__r_.__value_.__l.__data_ = 0uLL;
    v136 = (std::__shared_weak_count *)*((_QWORD *)v355 + 45);
    if (v136)
    {
      v136 = std::__shared_weak_count::lock(v136);
      v137 = v136;
      v357.__r_.__value_.__l.__size_ = (std::string::size_type)v136;
      if (v136)
      {
        v136 = (std::__shared_weak_count *)*((_QWORD *)v135 + 44);
        v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v136;
      }
    }
    else
    {
      v137 = 0;
    }
    isMultisimEnabled = SipStack::isMultisimEnabled((SipStack *)v136);
    v353 |= 0x40u;
    v345 = isMultisimEnabled;
    if (v137)
    {
      v212 = (unint64_t *)&v137->__shared_owners_;
      do
        v213 = __ldaxr(v212);
      while (__stlxr(v213 - 1, v212));
      if (!v213)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
  }
  else
  {
LABEL_82:
    v348 = 0;
    v353 |= 0x60u;
    v345 = 0;
  }
  v65 = v355;
  if (*((_BYTE *)v355 + 744) || *((_BYTE *)v355 + 745))
  {
    v66 = 3;
  }
  else if (*((_QWORD *)v355 + 64) || (*(unsigned int (**)(BambiCall *))(*(_QWORD *)v355 + 120))(v355))
  {
    v66 = 2;
  }
  else
  {
    v66 = 0;
  }
  v350 |= 0x108u;
  LODWORD(__p) = v66;
  v265 = 1;
  if (a4 == 255)
  {
    v67 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
    (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v67 + 8), (uint64_t)" Conference terminated ", 23);
    *(_BYTE *)(v67 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v67 + 17) = 0;
    v350 |= 0x100u;
    v265 = 2;
  }
  v259 = 0;
  v260 = 0;
  v68 = (std::__shared_weak_count *)*((_QWORD *)v65 + 45);
  if (v68 && (v260 = std::__shared_weak_count::lock(v68)) != 0)
  {
    v69 = (uint64_t *)*((_QWORD *)v65 + 44);
    v259 = v69;
  }
  else
  {
    v69 = 0;
  }
  LODWORD(v361[0]) = 0;
  v360[0] = 0;
  memset(&v363, 0, sizeof(v363));
  LODWORD(v361[0]) = ims::strToUint32(v69 + 464, 0);
  HIDWORD(v360[0]) = ims::strToUint32(v69 + 461, 0);
  ims::AccessNetworks::cellular((ims::AccessNetworks *)(v69 + 392), (uint64_t)&v357);
  ims::AccessNetwork::extractCellularInfo(&v357, (int *)v360 + 1, (int *)v361, (int *)v360, (uint64_t)&v363);
  if (v359 < 0)
    operator delete(v358);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  v350 |= 0xC00000u;
  v272 = HIDWORD(v360[0]);
  v273 = (int)v361[0];
  v70 = v353;
  v353 |= 4u;
  v347 = v360[0];
  isIwlanOverCellular = ims::AccessNetworks::isIwlanOverCellular((ims::AccessNetworks *)(v259 + 392));
  v353 = v70 | 0x84;
  v349 = isIwlanOverCellular;
  v72 = HIBYTE(v363.__r_.__value_.__r.__words[2]);
  v73 = HIBYTE(v363.__r_.__value_.__r.__words[2]);
  if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v72 = v363.__r_.__value_.__l.__size_;
  if (v72)
  {
    v353 = v70 | 0x8C;
    v74 = v346;
    if (v346 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v74 = (std::string *)operator new();
      v74->__r_.__value_.__r.__words[0] = 0;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v346 = v74;
    }
    std::string::operator=(v74, &v363);
    v73 = HIBYTE(v363.__r_.__value_.__r.__words[2]);
  }
  if (v73 < 0)
    operator delete(v363.__r_.__value_.__l.__data_);
  if (v260)
  {
    v75 = &v260->__shared_owners_;
    do
      v76 = __ldaxr((unint64_t *)v75);
    while (__stlxr(v76 - 1, (unint64_t *)v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v77 = v355;
  if (*((_BYTE *)v355 + 1488))
  {
    if (*((_QWORD *)v355 + 211))
    {
      v78 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
      (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v78);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)"Call setup delay is ", 20);
      *(_BYTE *)(v78 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v78 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)" ms", 3);
      *(_BYTE *)(v78 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)" reason is ", 11);
      *(_BYTE *)(v78 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v78 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v78 + 17) = 0;
      v79 = *((_DWORD *)v77 + 422) - *((_DWORD *)v77 + 426);
      v351.i32[0] |= 0x2000u;
      v282 = v79;
    }
    else
    {
      v80 = *((_QWORD *)v355 + 53);
      if (v80 >= 1)
      {
        v81 = v80 - *((_DWORD *)v355 + 104);
        v351.i32[0] |= 0x2000u;
        v282 = v81;
        v82 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
        (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v82 + 8), (uint64_t)"Call setup delay was ", 21);
        *(_BYTE *)(v82 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v82 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v82 + 8), (uint64_t)" ms", 3);
        *(_BYTE *)(v82 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v82 + 8), (uint64_t)" reason is ", 11);
        *(_BYTE *)(v82 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v82 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v82 + 17) = 0;
      }
    }
  }
  v83 = *((unsigned __int16 *)this + 245);
  v84 = *((unsigned __int16 *)this + 244);
  v350 |= 0x82000000;
  v275 = v83;
  v274 = v84;
  if (v84 >= 6)
    __assert_rtn("set_codec", "CATM.pb.h", 15455, "::awd::metrics::enum_codec_type_IsValid(value)");
  v351.i32[1] |= 0x2000000u;
  v319 = v84;
  *(_OWORD *)&v357.__r_.__value_.__l.__data_ = 0uLL;
  v85 = (std::__shared_weak_count *)*((_QWORD *)v77 + 45);
  if (v85)
  {
    v85 = std::__shared_weak_count::lock(v85);
    v86 = v85;
    v357.__r_.__value_.__l.__size_ = (std::string::size_type)v85;
    if (v85)
    {
      v85 = (std::__shared_weak_count *)*((_QWORD *)v77 + 44);
      v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
    }
  }
  else
  {
    v86 = 0;
  }
  v87 = (ImsPrefs *)SipStack::prefs((SipStack *)v85);
  PacketAlignmentAMRNBKey = (void **)ImsPrefs::getPacketAlignmentAMRNBKey(v87);
  ImsPrefs::stringValue(v87, PacketAlignmentAMRNBKey);
  v89 = SDPSession::getAMRPacketAlignmentFromString((uint64_t)&v257) == 0;
  v351.i32[0] |= 1u;
  v271 = v89;
  if (v258 < 0)
    operator delete(v257);
  if (v86)
  {
    v90 = (unint64_t *)&v86->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v92 = v355;
  *(_OWORD *)&v357.__r_.__value_.__l.__data_ = 0uLL;
  v93 = (std::__shared_weak_count *)*((_QWORD *)v355 + 45);
  if (v93)
  {
    v93 = std::__shared_weak_count::lock(v93);
    v94 = v93;
    v357.__r_.__value_.__l.__size_ = (std::string::size_type)v93;
    if (v93)
    {
      v93 = (std::__shared_weak_count *)*((_QWORD *)v92 + 44);
      v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
    }
  }
  else
  {
    v94 = 0;
  }
  v95 = (ImsPrefs *)SipStack::prefs((SipStack *)v93);
  v96 = (void **)ImsPrefs::getPacketAlignmentAMRNBKey(v95);
  ImsPrefs::stringValue(v95, v96);
  v97 = SDPSession::getAMRPacketAlignmentFromString((uint64_t)&v255) == 0;
  v351.i32[1] |= 0x1000000u;
  v318 = v97;
  if (v256 < 0)
    operator delete(v255);
  if (v94)
  {
    v98 = (unint64_t *)&v94->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v100 = v355;
  v101 = *((_BYTE *)v355 + 1488);
  v102 = v350;
  v350 |= 4u;
  BYTE4(__p) = v101;
  v103 = *((_BYTE *)this + 584);
  v104 = v352;
  v352 |= 0x40u;
  v316 = v103;
  if (*((_BYTE *)this + 144))
  {
    if (*((_DWORD *)this + 109))
    {
LABEL_139:
      v105 = 1;
      goto LABEL_142;
    }
  }
  else if (*((_DWORD *)this + 95))
  {
    goto LABEL_139;
  }
  v105 = 0;
LABEL_142:
  v106 = *((_QWORD *)v355 + 53);
  if (v106 >= 1)
  {
    v107 = *a3;
    v281 = *a3 - v106;
    v350 = v102 | 0x1000004;
    v270 = 1;
    v322 = 1;
    v351 = vorr_s8(v351, (int8x8_t)0x1000000000001100);
    v286 = 1;
    v333 = v107 - *((_DWORD *)this + 136);
    v108 = v107 - *((_DWORD *)this + 128);
    v352 = v104 | 0xC0040;
    v332 = v108;
    v109 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
    (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v109);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)"Call end times: duration is ", 28);
    *(_BYTE *)(v109 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v109 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)" time since of last recv ", 25);
    *(_BYTE *)(v109 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v109 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)" time sicne last send ", 22);
    *(_BYTE *)(v109 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v109 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)" seconds", 8);
    *(_BYTE *)(v109 + 17) = 0;
    if (v105)
      v110 = " has ";
    else
      v110 = " no ";
    if (v105)
      v111 = 5;
    else
      v111 = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)v110, v111);
    *(_BYTE *)(v109 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)" Remote RTCP in ", 16);
    *(_BYTE *)(v109 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)"local hold is ", 14);
    *(_BYTE *)(v109 + 17) = 0;
    v112 = *((_DWORD *)v100 + 110);
    if (v112 == 3)
      v113 = " yes ";
    else
      v113 = " no ";
    if (v112 == 3)
      v114 = 5;
    else
      v114 = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)v113, v114);
    *(_BYTE *)(v109 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)"remote hold is ", 15);
    *(_BYTE *)(v109 + 17) = 0;
    v115 = *((_DWORD *)v100 + 111);
    if (v115 <= 2)
      v116 = " no ";
    else
      v116 = " yes ";
    if (v115 <= 2)
      v117 = 4;
    else
      v117 = 5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)v116, v117);
    *(_BYTE *)(v109 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v109 + 64))(v109, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v109 + 17) = 0;
    v118 = *a3;
    v119 = this[64];
    if (*a3 - (uint64_t)v119 > 9 || (v120 = (xpc_object_t)*((_QWORD *)v100 + 53), v120 == v119))
    {
      v121 = this[65];
      v122 = 2;
      if (v118 - (uint64_t)v121 <= 9)
      {
        if (*((xpc_object_t *)v100 + 53) == v121)
          v122 = 2;
        else
          v122 = 3;
      }
    }
    else if (!v105 || (v134 = this[65], v122 = 4, v134 != v120) && v118 - (uint64_t)v134 < 10)
    {
LABEL_168:
      v123 = *((_DWORD *)this + 95);
      if (v123)
      {
        v124 = (unsigned int *)this + 95;
        v334 = v118 - *((_DWORD *)this + 134);
        v125 = v118 - *((_DWORD *)this + 130);
        v352 |= 0x120000u;
        v331 = v125;
LABEL_176:
        v127 = (unint64_t)this[35];
        if (v127)
        {
          v128 = *((unsigned int *)this + 103) / v127;
          v351.i32[0] |= 0x40000u;
          v289 = v128;
          v129 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
          (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v129);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v129 + 8), (uint64_t)" volteRtcpRemote.packetLost ", 28);
          *(_BYTE *)(v129 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v129 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v129 + 8), (uint64_t)" volteRtcpLocal.senderCount = ", 30);
          *(_BYTE *)(v129 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v129 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v129 + 64))(v129, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v129 + 17) = 0;
          v123 = *v124;
        }
        else
        {
          v350 |= 0x1000000u;
          v270 = 0;
        }
        v290 = *((_DWORD *)this + 100) / v123;
        v132 = v351.i32[0] | 0x180000;
        v133 = *((_DWORD *)this + 94) / v123;
        goto LABEL_201;
      }
      goto LABEL_178;
    }
    v351.i32[1] |= 0x10000000u;
    v322 = v122;
    goto LABEL_168;
  }
  v126 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
  (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v126);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v126 + 8), (uint64_t)" Call ", 6);
  *(_BYTE *)(v126 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v357, (const std::string *)((char *)v100 + 464));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v126 + 56))(v126, &v357);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v126 + 8), (uint64_t)" was not set up", 15);
  *(_BYTE *)(v126 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v126 + 64))(v126, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v126 + 17) = 0;
  if (v359 < 0)
    operator delete(v358);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  v351.i32[0] |= 0x100u;
  v286 = 0;
  v123 = *((_DWORD *)this + 95);
  if (v123)
  {
    v124 = (unsigned int *)this + 95;
    goto LABEL_176;
  }
LABEL_178:
  v130 = *((_DWORD *)this + 67);
  if (!v130)
    goto LABEL_202;
  if (!this[39])
  {
    v131 = 3;
    goto LABEL_197;
  }
  if (*((_DWORD *)this + 96) && !this[53])
  {
    v131 = 4;
LABEL_197:
    v350 |= 0x1000000u;
    v270 = 0;
    if (!this[35])
      v131 = 2;
    v351.i32[1] |= 0x10000000u;
    v322 = v131;
  }
  v132 = v351.i32[0] | 0x100000;
  v133 = *((_DWORD *)this + 66) / v130;
LABEL_201:
  v351.i32[0] = v132;
  v293 = v133;
LABEL_202:
  v138 = *((_DWORD *)this + 109);
  if (v138)
  {
    v139 = (unint64_t)this[42];
    if (v139)
    {
      v140 = *((unsigned int *)this + 117) / v139;
      v352 |= 0x800000u;
      v337 = v140;
      v141 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
      (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v141);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v141 + 8), (uint64_t)" volteRtcpRemote.packetLost ", 28);
      *(_BYTE *)(v141 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v141 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v141 + 8), (uint64_t)" volteRtcpLocal.senderCount = ", 30);
      *(_BYTE *)(v141 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v141 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v141 + 64))(v141, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v141 + 17) = 0;
      v138 = *((_DWORD *)this + 109);
    }
    else
    {
      v350 |= 0x1000000u;
      v270 = 0;
    }
    v342 = *((_DWORD *)this + 114) / v138;
    v144 = v352 | 0x3000000;
    v145 = *((_DWORD *)this + 108) / v138;
    goto LABEL_217;
  }
  v142 = *((_DWORD *)this + 81);
  if (!v142)
    goto LABEL_218;
  v335 = *((_DWORD *)this + 89) / v142;
  v336 = *((_DWORD *)this + 86) / v142;
  if (!this[46])
  {
    v143 = 3;
    goto LABEL_213;
  }
  if (*((_DWORD *)this + 110) && !this[60])
  {
    v143 = 4;
LABEL_213:
    v350 |= 0x1000000u;
    v270 = 0;
    if (!this[42])
      v143 = 2;
    v351.i32[1] |= 0x10000000u;
    v322 = v143;
  }
  v144 = v352 | 0x2600000;
  v145 = *((_DWORD *)this + 80) / v142;
LABEL_217:
  v352 = v144;
  v343 = v145;
LABEL_218:
  v278 = 0;
  v315 = *((_BYTE *)this + 492);
  v351.i32[0] |= 0x2000240u;
  v285 = 0;
  v353 |= 2u;
  v344 = 2;
  v146 = *((_DWORD *)v100 + 452);
  if (v146)
    v344 = v146 != 2;
  v147 = (_OWORD *)((char *)a2 + 120);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&v357, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    *(_OWORD *)&v357.__r_.__value_.__l.__data_ = *v147;
    v357.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 17);
  }
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
  {
    v148 = v357.__r_.__value_.__l.__size_;
    operator delete(v357.__r_.__value_.__l.__data_);
    if (!v148)
      goto LABEL_259;
  }
  else if (!*((_BYTE *)&v357.__r_.__value_.__s + 23))
  {
    goto LABEL_259;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&v357, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    *(_OWORD *)&v357.__r_.__value_.__l.__data_ = *v147;
    v357.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 17);
  }
  v351.i32[0] |= 0x80u;
  v149 = v279;
  if (v279 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v149 = (std::string *)operator new();
    v149->__r_.__value_.__r.__words[0] = 0;
    v149->__r_.__value_.__l.__size_ = 0;
    v149->__r_.__value_.__r.__words[2] = 0;
    v279 = v149;
  }
  std::string::operator=(v149, &v357);
  v252 = v100;
  v150 = a3;
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  v151 = v105;
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&v357, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    *(_OWORD *)&v357.__r_.__value_.__l.__data_ = *v147;
    v357.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 17);
  }
  v152 = HIBYTE(v357.__r_.__value_.__r.__words[2]);
  v153 = SHIBYTE(v357.__r_.__value_.__r.__words[2]);
  v154 = (void *)v357.__r_.__value_.__r.__words[0];
  if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v155 = &v357;
  }
  else
  {
    v152 = v357.__r_.__value_.__l.__size_;
    v155 = (std::string *)v357.__r_.__value_.__r.__words[0];
  }
  if (v152 >= 16)
  {
    v156 = (char *)v155 + v152;
    v157 = v155;
    do
    {
      v158 = (char *)memchr(v157, 82, v152 - 15);
      if (!v158)
        break;
      if (*(_QWORD *)v158 == 0x504354522D505452 && *((_QWORD *)v158 + 1) == 0x74756F656D695420)
      {
        if (v158 == v156 || v158 - (char *)v155 == -1 || (uint64_t)this[68] < 1)
          break;
        v160 = *((unsigned __int8 *)a2 + 56);
        if (v153 < 0)
          operator delete(v154);
        LOBYTE(v105) = v151;
        a3 = (uint64_t *)v150;
        v100 = v252;
        if (!v160)
        {
          v161 = *(_DWORD *)a3 - *((_DWORD *)this + 136);
          v352 |= 0x1000u;
          v326 = v161;
        }
        goto LABEL_259;
      }
      v157 = (std::string *)(v158 + 1);
      v152 = v156 - (char *)v157;
    }
    while (v156 - (char *)v157 >= 16);
  }
  if (v153 < 0)
    operator delete(v154);
  LOBYTE(v105) = v151;
  a3 = (uint64_t *)v150;
  v100 = v252;
LABEL_259:
  v162 = *((_QWORD *)v100 + 216);
  if (v162)
  {
    LODWORD(v162) = *((_DWORD *)v100 + 434) - v162;
    v351.i32[0] |= 0x8000u;
    v284 = v162;
    LOBYTE(v162) = 1;
  }
  v352 |= 0x200u;
  v338 = v162;
  if (v253)
  {
    if (*(_DWORD *)(v253 + 88))
    {
      v163 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
      (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v163);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v163 + 8), (uint64_t)" Call ", 6);
      *(_BYTE *)(v163 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)&v357, (const std::string *)((char *)v100 + 464));
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v163 + 56))(v163, &v357);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v163 + 8), (uint64_t)" IMS code ", 10);
      *(_BYTE *)(v163 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v163 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v163 + 8), (uint64_t)" event reason ", 14);
      *(_BYTE *)(v163 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v163 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v163 + 64))(v163, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v163 + 17) = 0;
      if (v359 < 0)
        operator delete(v358);
      if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v357.__r_.__value_.__l.__data_);
      v164 = *(_DWORD *)(v253 + 88);
      if (awd::metrics::RESPONSE_Code_IsValid((awd::metrics *)v164))
      {
        v351.i32[0] |= 0x20u;
        v277 = v164;
      }
      else
      {
        v351.i32[1] |= 0x400000u;
        v317 = v164;
      }
    }
    v190 = (awd::metrics *)*((unsigned int *)this + 65);
    if (v190 >> 16)
    {
      AnalyticsLogger::fillCallEndMetricFromEvent((AnalyticsLogger *)this, (awd::metrics::ATM_CallEndEvent *)&v261, a2, *a3);
    }
    else
    {
      v191 = v351.i32[0];
      v351.i32[0] |= 0x10u;
      v276 = 6;
      if (awd::metrics::RESPONSE_Code_IsValid(v190))
      {
        v351.i32[0] = v191 | 0x30;
        v277 = v190;
      }
      v192 = v356;
      if (v356)
      {
        v193 = (unint64_t *)&v356->__shared_owners_;
        do
          v194 = __ldxr(v193);
        while (__stxr(v194 + 1, v193));
      }
      v195 = *((_QWORD *)v100 + 53);
      if (v195 < 1 || time(0) - v195 <= 10)
        v196 = 1;
      else
        v196 = 2;
      v351.i32[0] |= 0x200u;
      v278 = v196;
      if (v192)
      {
        v197 = (unint64_t *)&v192->__shared_owners_;
        do
          v198 = __ldaxr(v197);
        while (__stlxr(v198 - 1, v197));
        if (!v198)
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
        }
      }
    }
    goto LABEL_398;
  }
  v165 = *((_QWORD *)v100 + 53);
  if (v165 >= 1)
  {
    v166 = v165 - *((_DWORD *)v100 + 104);
    v351.i32[0] |= 0x4000u;
    v283 = v166;
  }
  v167 = *((_DWORD *)this + 44);
  if (v167)
  {
    v351.i32[0] |= 0x4000000u;
    v294 = v167;
  }
  v168 = *((_DWORD *)this + 45);
  if (v168)
  {
    v351.i32[0] |= 0x8000000u;
    v295 = v168;
  }
  v169 = *((_DWORD *)this + 46);
  if (v169)
  {
    v351.i32[0] |= 0x10000000u;
    v296 = v169;
  }
  v170 = *((_DWORD *)this + 47);
  if (v170)
  {
    v351.i32[0] |= 0x20000000u;
    v297 = v170;
  }
  v171 = *((_DWORD *)this + 48);
  if (v171)
  {
    v351.i32[0] |= 0x40000000u;
    v298 = v171;
  }
  v172 = *((_DWORD *)this + 49);
  if (v172)
  {
    v351.i32[0] |= 0x80000000;
    v299 = v172;
  }
  v173 = *((_DWORD *)this + 50);
  if (v173)
  {
    v351.i32[1] |= 1u;
    v300 = v173;
  }
  v174 = *((_DWORD *)this + 51);
  if (v174)
  {
    v351.i32[1] |= 2u;
    v301 = v174;
  }
  v175 = *((_DWORD *)this + 52);
  if (v175)
  {
    v351.i32[1] |= 4u;
    v302 = v175;
  }
  v176 = *((_DWORD *)this + 53);
  if (v176)
  {
    v351.i32[1] |= 8u;
    v303 = v176;
  }
  v177 = *((_DWORD *)this + 54);
  if (v177)
  {
    v351.i32[1] |= 0x10u;
    v304 = v177;
  }
  v178 = *((_DWORD *)this + 55);
  if (v178)
  {
    v351.i32[1] |= 0x20u;
    v305 = v178;
  }
  v179 = *((_DWORD *)this + 56);
  if (v179)
  {
    v351.i32[1] |= 0x40u;
    v306 = v179;
  }
  v180 = *((_DWORD *)this + 57);
  if (v180)
  {
    v351.i32[1] |= 0x80u;
    v307 = v180;
  }
  v181 = *((_DWORD *)this + 58);
  if (v181)
  {
    v351.i32[1] |= 0x100u;
    v308 = v181;
  }
  v182 = *((_DWORD *)this + 59);
  if (v182)
  {
    v351.i32[1] |= 0x200u;
    v309 = v182;
  }
  v183 = *((_DWORD *)this + 60);
  if (v183)
  {
    v351.i32[1] |= 0x400u;
    v310 = v183;
  }
  v184 = *((_DWORD *)this + 61);
  if (v184)
  {
    v351.i32[1] |= 0x800u;
    v311 = v184;
  }
  v185 = *((_DWORD *)this + 62);
  if (v185)
  {
    v351.i32[1] |= 0x1000u;
    v312 = v185;
  }
  v186 = *((_DWORD *)this + 63);
  if (v186)
  {
    v351.i32[1] |= 0x2000u;
    v313 = v186;
  }
  v187 = *((_DWORD *)this + 64);
  if (v187)
  {
    v351.i32[1] |= 0x4000u;
    v314 = v187;
  }
  v188 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
  (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v188);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v188 + 8), (uint64_t)" callend reason is  ", 20);
  *(_BYTE *)(v188 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v188 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v188 + 64))(v188, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v188 + 17) = 0;
  v189 = (_OWORD *)((char *)a2 + 64);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(&v357, *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    *(_OWORD *)&v357.__r_.__value_.__l.__data_ = *v189;
    v357.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 10);
  }
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
  {
    v199 = v357.__r_.__value_.__l.__size_;
    operator delete(v357.__r_.__value_.__l.__data_);
    if (!v199)
      goto LABEL_344;
  }
  else if (!*((_BYTE *)&v357.__r_.__value_.__s + 23))
  {
    goto LABEL_344;
  }
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(&v357, *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    *(_OWORD *)&v357.__r_.__value_.__l.__data_ = *v189;
    v357.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 10);
  }
  v351.i32[0] |= 0x80u;
  v200 = v279;
  if (v279 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v200 = (std::string *)operator new();
    v200->__r_.__value_.__r.__words[0] = 0;
    v200->__r_.__value_.__l.__size_ = 0;
    v200->__r_.__value_.__r.__words[2] = 0;
    v279 = v200;
  }
  std::string::operator=(v200, &v357);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
LABEL_344:
  v201 = (_OWORD *)((char *)a2 + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v357, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    *(_OWORD *)&v357.__r_.__value_.__l.__data_ = *v201;
    v357.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 13);
  }
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
  {
    v202 = v357.__r_.__value_.__l.__size_;
    operator delete(v357.__r_.__value_.__l.__data_);
    if (!v202)
      goto LABEL_383;
  }
  else if (!*((_BYTE *)&v357.__r_.__value_.__s + 23))
  {
    goto LABEL_383;
  }
  v203 = SDWORD2(v323);
  v204 = HIDWORD(v323);
  if (SDWORD2(v323) >= SHIDWORD(v323))
  {
    if (HIDWORD(v323) == v324)
    {
      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)&v323);
      v204 = HIDWORD(v323);
    }
    HIDWORD(v323) = v204 + 1;
    v205 = operator new();
    *(_QWORD *)v205 = &off_1E78BF270;
    v206 = MEMORY[0x1E0DE8338];
    *(_QWORD *)(v205 + 8) = MEMORY[0x1E0DE8338];
    *(_QWORD *)(v205 + 16) = v206;
    *(_QWORD *)(v205 + 32) = v206;
    *(_QWORD *)(v205 + 40) = 0;
    *(_QWORD *)(v205 + 24) = v206;
    *(_DWORD *)(v205 + 48) = 0;
    v207 = SDWORD2(v323);
    ++DWORD2(v323);
    *(_QWORD *)(v323 + 8 * v207) = v205;
  }
  else
  {
    ++DWORD2(v323);
    v205 = *(_QWORD *)(v323 + 8 * v203);
  }
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v357, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    *(_OWORD *)&v357.__r_.__value_.__l.__data_ = *v201;
    v357.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 13);
  }
  *(_DWORD *)(v205 + 48) |= 1u;
  v208 = *(std::string **)(v205 + 8);
  if (v208 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v208 = (std::string *)operator new();
    v208->__r_.__value_.__r.__words[0] = 0;
    v208->__r_.__value_.__l.__size_ = 0;
    v208->__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)(v205 + 8) = v208;
  }
  std::string::operator=(v208, &v357);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  v209 = *((_DWORD *)a2 + 28);
  *(_DWORD *)(v205 + 48) |= 2u;
  *(_DWORD *)(v205 + 40) = v209;
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(&v357, *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    *(_OWORD *)&v357.__r_.__value_.__l.__data_ = *v189;
    v357.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 10);
  }
  if ((SHIBYTE(v357.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&v357.__r_.__value_.__s + 23))
      goto LABEL_383;
LABEL_370:
    if (*((char *)a2 + 87) < 0)
    {
      std::string::__init_copy_ctor_external(&v357, *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
    }
    else
    {
      *(_OWORD *)&v357.__r_.__value_.__l.__data_ = *v189;
      v357.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 10);
    }
    *(_DWORD *)(v205 + 48) |= 4u;
    v214 = *(std::string **)(v205 + 16);
    if (v214 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v214 = (std::string *)operator new();
      v214->__r_.__value_.__r.__words[0] = 0;
      v214->__r_.__value_.__l.__size_ = 0;
      v214->__r_.__value_.__r.__words[2] = 0;
      *(_QWORD *)(v205 + 16) = v214;
    }
    std::string::operator=(v214, &v357);
    if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v357.__r_.__value_.__l.__data_);
    goto LABEL_383;
  }
  v210 = v357.__r_.__value_.__l.__size_;
  operator delete(v357.__r_.__value_.__l.__data_);
  if (v210)
    goto LABEL_370;
LABEL_383:
  v216 = (char *)this[19];
  v215 = (char *)this[20];
  v217 = *((_DWORD *)this + 155);
  v352 |= 0x14000u;
  v330 = v217;
  v329 = (unint64_t)(v215 - v216) >> 3;
  if (v215 > v216)
  {
    v254 = v105;
    do
    {
      v218 = SDWORD2(v327);
      v219 = HIDWORD(v327);
      if (SDWORD2(v327) >= SHIDWORD(v327))
      {
        if (HIDWORD(v327) == v328)
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)&v327);
          v219 = HIDWORD(v327);
        }
        HIDWORD(v327) = v219 + 1;
        v220 = operator new();
        v221 = 0;
        *(_QWORD *)v220 = &off_1E78BF2E8;
        *(_DWORD *)(v220 + 8) = 0;
        *(_BYTE *)(v220 + 12) = 0;
        *(_QWORD *)(v220 + 16) = 0;
        v222 = SDWORD2(v327);
        ++DWORD2(v327);
        *(_QWORD *)(v327 + 8 * v222) = v220;
      }
      else
      {
        ++DWORD2(v327);
        v220 = *(_QWORD *)(v327 + 8 * v218);
        v221 = *(_DWORD *)(v220 + 20);
      }
      *(_DWORD *)(v220 + 8) = *(_DWORD *)v216;
      v223 = v216[4];
      *(_DWORD *)(v220 + 20) = v221 | 3;
      *(_BYTE *)(v220 + 12) = v223;
      v224 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
      (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v224);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v224 + 8), (uint64_t)"Submitting handover to AWD ", 27);
      *(_BYTE *)(v224 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v224 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v224 + 8), (uint64_t)" toWiFi: ", 9);
      *(_BYTE *)(v224 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v224 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v224 + 64))(v224, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v224 + 17) = 0;
      v215 = (char *)this[20];
      v216 += 8;
    }
    while (v216 < v215);
    v216 = (char *)this[19];
    LOBYTE(v105) = v254;
  }
  if (v215 != v216)
    this[20] = v216;
  AnalyticsLogger::fillCallEndMetricFromEvent((AnalyticsLogger *)this, (awd::metrics::ATM_CallEndEvent *)&v261, a2, *a3);
  v225 = (awd::metrics *)*((unsigned int *)this + 65);
  if (!(v225 >> 16))
  {
    v226 = v351.i32[0];
    v351.i32[0] |= 0x10u;
    v276 = 6;
    if (awd::metrics::RESPONSE_Code_IsValid(v225))
    {
      v351.i32[0] = v226 | 0x30;
      v277 = v225;
    }
    v227 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
    (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v227);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v227 + 8), (uint64_t)" reason rtp error code ", 23);
    *(_BYTE *)(v227 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v227 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v227 + 64))(v227, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v227 + 17) = 0;
  }
LABEL_398:
  v228 = v355;
  *(_OWORD *)&v357.__r_.__value_.__l.__data_ = 0uLL;
  v229 = (std::__shared_weak_count *)*((_QWORD *)v355 + 45);
  if (v229)
  {
    v229 = std::__shared_weak_count::lock(v229);
    v230 = v229;
    v357.__r_.__value_.__l.__size_ = (std::string::size_type)v229;
    if (v229)
    {
      v229 = (std::__shared_weak_count *)*((_QWORD *)v228 + 44);
      v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v229;
    }
  }
  else
  {
    v230 = 0;
  }
  v231 = (ImsPrefs *)SipStack::prefs((SipStack *)v229);
  RTCPIntervalSecondsKey = (void **)ImsPrefs::getRTCPIntervalSecondsKey(v231);
  v233 = ImsPrefs::prefWithKey(v231, RTCPIntervalSecondsKey);
  if (v233)
  {
    v234 = (*(uint64_t (**)(void *))(*(_QWORD *)v233 + 56))(v233);
    if (!v230)
      goto LABEL_410;
  }
  else
  {
    v234 = *((_DWORD *)RTCPIntervalSecondsKey + 15);
    if (!v230)
      goto LABEL_410;
  }
  v235 = (unint64_t *)&v230->__shared_owners_;
  do
    v236 = __ldaxr(v235);
  while (__stlxr(v236 - 1, v235));
  if (!v236)
  {
    ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
    std::__shared_weak_count::__release_weak(v230);
  }
LABEL_410:
  v237 = v355;
  *(_OWORD *)&v357.__r_.__value_.__l.__data_ = 0uLL;
  v238 = (std::__shared_weak_count *)*((_QWORD *)v355 + 45);
  if (v238)
  {
    v238 = std::__shared_weak_count::lock(v238);
    v239 = v238;
    v357.__r_.__value_.__l.__size_ = (std::string::size_type)v238;
    if (v238)
    {
      v238 = (std::__shared_weak_count *)*((_QWORD *)v237 + 44);
      v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v238;
    }
  }
  else
  {
    v239 = 0;
  }
  v240 = (ImsPrefs *)SipStack::prefs((SipStack *)v238);
  EnableRTCPExtendedReportsKey = (void **)ImsPrefs::getEnableRTCPExtendedReportsKey(v240);
  v242 = ImsPrefs::prefWithKey(v240, EnableRTCPExtendedReportsKey);
  if (v242)
  {
    v243 = (*(uint64_t (**)(void *))(*(_QWORD *)v242 + 40))(v242);
    if (!v239)
      goto LABEL_422;
  }
  else
  {
    v243 = *((_BYTE *)EnableRTCPExtendedReportsKey + 57) != 0;
    if (!v239)
      goto LABEL_422;
  }
  v244 = (unint64_t *)&v239->__shared_owners_;
  do
    v245 = __ldaxr(v244);
  while (__stlxr(v245 - 1, v244));
  if (!v245)
  {
    ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
    std::__shared_weak_count::__release_weak(v239);
  }
LABEL_422:
  if (*((_DWORD *)this + 67) + *((_DWORD *)this + 95) + *((_DWORD *)this + 109) + *((_DWORD *)this + 81))
    v246 = v234 <= 0;
  else
    v246 = 1;
  v247 = !v246;
  v339 = v247;
  v340 = v243;
  v352 |= 0x38000000u;
  v341 = v105;
  this[78] = 0;
  if (v277)
    v23 = v277;
  else
    v23 = v317;
  *(_OWORD *)((char *)v360 + 4) = 0uLL;
  *(_QWORD *)((char *)&v360[2] + 4) = 0;
  memset(&v357, 0, sizeof(v357));
  (*((void (**)(_QWORD *@<X8>))v261 + 2))(&v357);
  memset(&v363, 0, sizeof(v363));
  std::string::basic_string[abi:ne180100]<0>(v361, ".");
  ims::tokenize(&v357, (uint64_t *)&v363, (char *)v361);
  if (v362 < 0)
    operator delete(v361[0]);
  if (v363.__r_.__value_.__l.__size_ - v363.__r_.__value_.__r.__words[0] == 72)
  {
    if (*(char *)(v363.__r_.__value_.__r.__words[0] + 71) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)v360 + 4), *(const std::string::value_type **)(v363.__r_.__value_.__r.__words[0] + 48), *(_QWORD *)(v363.__r_.__value_.__r.__words[0] + 56));
    }
    else
    {
      *(_OWORD *)((char *)v360 + 4) = *(_OWORD *)(v363.__r_.__value_.__r.__words[0] + 48);
      *(_QWORD *)((char *)&v360[2] + 4) = *(_QWORD *)(v363.__r_.__value_.__r.__words[0] + 64);
    }
  }
  else
  {
    *(std::string *)((char *)v360 + 4) = v357;
    memset(&v357, 0, sizeof(v357));
  }
  v361[0] = (void **)&v363;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v361);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  WISPostMetric();
  std::string::basic_string[abi:ne180100]<0>(&v357, "sendDiagnosticData");
  std::string::basic_string[abi:ne180100]<0>(&v363, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v248 = ImsLogger::debug(ims::_logger, (uint64_t)&v357, (uint64_t)&v363);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v248 + 8), (uint64_t)" Submitted ", 11);
  *(_BYTE *)(v248 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v248 + 32))(v248, (char *)v360 + 4);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v248 + 64))(v248, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v248 + 17) = 0;
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v363.__r_.__value_.__l.__data_);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  if (SBYTE3(v360[3]) < 0)
    operator delete(*(void **)((char *)v360 + 4));
  *((_DWORD *)this + 65) = 0x10000;
  awd::metrics::ATM_CallEndEvent::~ATM_CallEndEvent((awd::metrics::ATM_CallEndEvent *)&v261);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v14 = v356;
  if (v356)
  {
LABEL_449:
    v249 = (unint64_t *)&v14->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v23;
}

void sub_1BEEC9F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  awd::metrics::ATM_CallEndEvent::~ATM_CallEndEvent((awd::metrics::ATM_CallEndEvent *)va);
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x340]);
  _Unwind_Resume(a1);
}

void AnalyticsLogger::AnalyticsData::~AnalyticsData(AnalyticsLogger::AnalyticsData *this)
{
  void *v2;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  v2 = (void *)*((_QWORD *)this + 33);
  if (v2)
  {
    *((_QWORD *)this + 34) = v2;
    operator delete(v2);
  }
  xpc_release(*((xpc_object_t *)this + 4));
  *((_QWORD *)this + 4) = 0;
}

uint64_t `non-virtual thunk to'AnalyticsLogger::logSessionTerminationEvent(AnalyticsLogger *this, const BambiCallSessionTerminationBaseEvent *a2, const uint64_t *a3, unsigned __int8 a4, int a5)
{
  return AnalyticsLogger::logSessionTerminationEvent((AnalyticsLogger *)((char *)this - 136), a2, a3, 0, a5);
}

xpc_object_t xpc::dict::object_proxy::operator xpc::object@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t result;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value)
    return xpc_retain(value);
  result = xpc_null_create();
  *a2 = result;
  return result;
}

__n128 BambiCall::firstReportedAccessNetwork@<Q0>(BambiCall *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  __n128 result;

  if (*((char *)this + 1519) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *((const std::string::value_type **)this + 187), *((_QWORD *)this + 188));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 1496);
    *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 189);
  }
  v4 = (std::string *)(a2 + 24);
  if (*((char *)this + 1543) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 190), *((_QWORD *)this + 191));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *((_OWORD *)this + 95);
    *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 192);
  }
  *(_BYTE *)(a2 + 64) = *((_BYTE *)this + 1560);
  result = *(__n128 *)((char *)this + 1544);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_1BEECA3F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t AnalyticsLogger::logRemoteRTCPRRPacket(AnalyticsLogger *this, const RTCPRRPacket *a2, int a3)
{
  char *v6;
  time_t v7;
  uint64_t v8;
  uint64_t result;

  *((_QWORD *)this + 67) = time(0);
  if (*((_BYTE *)this + 144))
    v6 = (char *)this + 432;
  else
    v6 = (char *)this + 376;
  v7 = AnalyticsLogger::processRTCPRRPacket(this, (uint64_t)a2, a3, (uint64_t)v6);
  if (!v7)
    v7 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = v7;
  v8 = (*(uint64_t (**)(AnalyticsLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(AnalyticsLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" rtcp remote RR in ", 19);
  *(_BYTE *)(v8 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  return result;
}

time_t AnalyticsLogger::processRTCPRRPacket(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  time_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  ++*(_DWORD *)(a4 + 4);
  v6 = *(_QWORD *)(a2 + 32);
  if (-1227133513 * ((unint64_t)(*(_QWORD *)(a2 + 40) - v6) >> 2))
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      if (!v9 && *(_DWORD *)(a4 + 4) == 1)
        *(_QWORD *)(a4 + 40) = *(unsigned int *)(v6 + 12);
      *(_DWORD *)(a4 + 36) += *(_DWORD *)(v6 + v9 + 8);
      v12 = *(_DWORD *)(v6 + v9 + 16);
      if (*(_DWORD *)(a4 + 28) < v12)
        *(_DWORD *)(a4 + 28) = v12;
      if (*(_DWORD *)(a4 + 32) > v12)
        *(_DWORD *)(a4 + 32) = v12;
      *(_DWORD *)(a4 + 24) += v12;
      *(_DWORD *)a4 += a3;
      v13 = *(unsigned int *)(v6 + v9 + 12);
      v14 = *(_QWORD *)(a4 + 40);
      v15 = v13 > v14;
      v16 = v13 - v14;
      if (v15 && *(_QWORD *)(a4 + 48) < v16)
      {
        *(_QWORD *)(a4 + 48) = v16;
        v11 = time(0);
        v17 = a1[79];
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      ++v10;
      v6 = *(_QWORD *)(a2 + 32);
      v9 += 28;
    }
    while (v10 < -1227133513 * ((unint64_t)(*(_QWORD *)(a2 + 40) - v6) >> 2));
  }
  else
  {
    v11 = 0;
  }
  v18 = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" rtcp RR Count ", 15);
  *(_BYTE *)(v18 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v18 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" packets ", 9);
  *(_BYTE *)(v18 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v18 + 17) = 0;
  return v11;
}

time_t AnalyticsLogger::logLocalRTCPRRPacket(AnalyticsLogger *this, const RTCPRRPacket *a2, int a3)
{
  char *v6;
  time_t result;

  *((_QWORD *)this + 68) = time(0);
  if (*((_BYTE *)this + 144))
    v6 = (char *)this + 320;
  else
    v6 = (char *)this + 264;
  result = AnalyticsLogger::processRTCPRRPacket(this, (uint64_t)a2, a3, (uint64_t)v6);
  if (!result)
    result = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = result;
  return result;
}

uint64_t AnalyticsLogger::processRTCPSRPacket(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;

  ++*(_DWORD *)(a3 + 8);
  v6 = a1[79];
  if (v6 && *(_QWORD *)(a3 + 16) < (unint64_t)*(unsigned int *)(a2 + 40))
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)(a3 + 16) = *(unsigned int *)(a2 + 40);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" rtcp SR, packets Count ", 24);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  v9 = *(_QWORD *)(a2 + 48);
  if (-1227133513 * ((unint64_t)(*(_QWORD *)(a2 + 56) - v9) >> 2))
  {
    v10 = 0;
    v11 = 0;
    do
    {
      *(_DWORD *)(a3 + 36) += *(_DWORD *)(v9 + v10 + 8);
      v12 = *(_DWORD *)(v9 + v10 + 16);
      if (*(_DWORD *)(a3 + 28) < v12)
        *(_DWORD *)(a3 + 28) = v12;
      if (*(_DWORD *)(a3 + 32) > v12)
        *(_DWORD *)(a3 + 32) = v12;
      *(_DWORD *)(a3 + 24) += v12;
      v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v13);
      std::ostream::operator<<();
      *(_BYTE *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" SR localJitter ", 16);
      *(_BYTE *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" qosRtcp.SrCount ", 17);
      *(_BYTE *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"sender count", 12);
      *(_BYTE *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v13 + 17) = 0;
      result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      ++v11;
      v9 = *(_QWORD *)(a2 + 48);
      v10 += 28;
    }
    while (v11 < -1227133513 * ((unint64_t)(*(_QWORD *)(a2 + 56) - v9) >> 2));
  }
  return result;
}

uint64_t AnalyticsLogger::logRemoteRTCPSRPacket(AnalyticsLogger *this, const RTCPSRPacket *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t result;

  *((_QWORD *)this + 67) = time(0);
  if (*((_BYTE *)this + 144))
    v4 = (char *)this + 320;
  else
    v4 = (char *)this + 264;
  AnalyticsLogger::processRTCPSRPacket(this, (uint64_t)a2, (uint64_t)v4);
  v5 = (*(uint64_t (**)(AnalyticsLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(AnalyticsLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" rtcp remote SR in ", 19);
  *(_BYTE *)(v5 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  return result;
}

void AnalyticsLogger::logSignalingReduction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v14 = 0;
  v15 = 0;
  v3 = a2[1];
  v12 = *a2;
  v13 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  ims::analytics::SignallingDeferralEvent::create(&v12, a3, &v14);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEECAAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AnalyticsLogger::addCallEndInfo(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  xpc_object_t v13;
  void *v14;
  void *v15;
  _QWORD applier[5];

  v4 = MEMORY[0x1C3B87B98](*a2);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 != MEMORY[0x1E0C812F8])
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
    v7 = *(_QWORD **)(v6 + 8);
    v8 = "Ignoring null dictionary";
    v9 = 24;
LABEL_3:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    return;
  }
  if (*a2 == *(_QWORD *)(a1 + 648))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
    v7 = *(_QWORD **)(v6 + 8);
    v8 = "Skipping update to same dictionary";
    v9 = 34;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a1 + 656))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
    v7 = *(_QWORD **)(v6 + 8);
    v8 = "Ignoring call end info from CT.  No call being tracked in logger";
    v9 = 64;
    goto LABEL_3;
  }
  v10 = MEMORY[0x1C3B87B98]();
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v11);
  v12 = *(_QWORD **)(v11 + 8);
  if (v10 == v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Updating dict from CT", 21);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    v14 = (void *)*a2;
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 0x40000000;
    applier[2] = ___ZN15AnalyticsLogger14addCallEndInfoEN3xpc4dictE_block_invoke;
    applier[3] = &__block_descriptor_tmp_5;
    applier[4] = a1;
    xpc_dictionary_apply(v14, applier);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Assigning dict ref from CT", 26);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    v13 = (xpc_object_t)*a2;
    if (v13)
      xpc_retain(v13);
    else
      v13 = xpc_null_create();
    v15 = *(void **)(a1 + 648);
    *(_QWORD *)(a1 + 648) = v13;
    xpc_release(v15);
  }
}

uint64_t ___ZN15AnalyticsLogger14addCallEndInfoEN3xpc4dictE_block_invoke(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  uint64_t v4;
  _QWORD v6[2];
  xpc_object_t v7;
  xpc_object_t objecta;

  v4 = *(_QWORD *)(a1 + 32);
  v7 = object;
  if (object)
    xpc_retain(object);
  else
    v7 = xpc_null_create();
  v6[0] = v4 + 648;
  v6[1] = a2;
  xpc::dict::object_proxy::operator=((uint64_t)v6, &v7, &objecta);
  xpc_release(objecta);
  objecta = 0;
  xpc_release(v7);
  return 1;
}

void AnalyticsLogger::setCallActive(AnalyticsLogger *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  std::string v9;

  v4 = (*(uint64_t (**)(AnalyticsLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(AnalyticsLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Set call active ", 16);
  *(_BYTE *)(v4 + 17) = 0;
  std::to_string(&v9, a2);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 32))(v4, &v9);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if (!a2)
      goto LABEL_7;
  }
  else if (!a2)
  {
    goto LABEL_7;
  }
  if (!*((_BYTE *)this + 656))
  {
    v5 = (*(uint64_t (**)(AnalyticsLogger *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(AnalyticsLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Resetting addendum", 18);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    v6 = xpc_null_create();
    v7 = xpc_null_create();
    v8 = (void *)*((_QWORD *)this + 81);
    *((_QWORD *)this + 81) = v6;
    xpc_release(v8);
    xpc_release(v7);
  }
LABEL_7:
  *((_BYTE *)this + 656) = a2;
}

void sub_1BEECAF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AnalyticsLogger::~AnalyticsLogger(AnalyticsLogger *this)
{
  AnalyticsLogger::~AnalyticsLogger(this);
  JUMPOUT(0x1C3B87100);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E78C0928;
  *((_QWORD *)this + 13) = &unk_1E78C0AB0;
  *((_QWORD *)this + 17) = &unk_1E78C0AE0;
  xpc_release(*((xpc_object_t *)this + 81));
  *((_QWORD *)this + 81) = 0;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 632);
  if (*((char *)this + 615) < 0)
    operator delete(*((void **)this + 74));
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  *((_QWORD *)this + 13) = &unk_1E78BDE98;
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

_QWORD *AnalyticsLogger::logPrefix(AnalyticsLogger *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"ims_awd: ", 9);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

std::string *AnalyticsLogger::setDomain(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 112), a2);
}

std::string *`non-virtual thunk to'AnalyticsLogger::setDomain(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

uint64_t ImsSSLContextBase::readAppData(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  std::string::size_type __n;
  std::string::value_type __s[1024];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  bzero(__s, 0x400uLL);
  __n = 1024;
  do
  {
    v4 = (*(uint64_t (**)(_QWORD, std::string::value_type *, std::string::size_type *))(**(_QWORD **)(a1 + 104)
                                                                                                + 16))(*(_QWORD *)(a1 + 104), __s, &__n);
    if (!__n)
      break;
    std::string::append(a2, __s, __n);
    if ((_DWORD)v4)
      break;
  }
  while (__n == 1024);
  if ((_DWORD)v4 == -9803 || (_DWORD)v4 == 0)
    return 0;
  return v4;
}

uint64_t ImsSSLContextBase::writeAppData(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  if (v3 < 0)
    a2 = (uint64_t *)*a2;
  v5 = v2;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 144))(a1, a2, &v5);
}

uint64_t ImsSSLContextBase::writeAppData(ImsSSLContextBase *this, const void *a2, unint64_t *a3)
{
  return (*(uint64_t (**)(_QWORD, const void *, unint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), a2, a3);
}

uint64_t ImsSSLContext::initialize(SSLContextRef *a1, int a2, uint64_t a3, char *a4)
{
  SSLContext *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;

  v8 = SSLCreateContext((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kSSLClientSide, kSSLStreamType);
  a1[17] = v8;
  if (!v8)
  {
    v9 = (*((uint64_t (**)(SSLContextRef *))*a1 + 7))(a1);
    (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Unable to create SSL tunnel", 27);
    goto LABEL_5;
  }
  if (SSLSetIOFuncs(v8, (SSLReadFunc)ImsSSLContext::_handleSSLReadCallback, (SSLWriteFunc)ImsSSLContext::_handleSSLWriteCallback))
  {
    v9 = (*((uint64_t (**)(SSLContextRef *))*a1 + 7))(a1);
    (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"SSLSetIOFuncs failed. Error:", 28);
    *(_BYTE *)(v9 + 17) = 0;
    std::ostream::operator<<();
LABEL_5:
    v10 = 4294957496;
    goto LABEL_9;
  }
  v11 = SSLSetConnection(a1[17], a1);
  if ((_DWORD)v11)
  {
    v10 = v11;
    v9 = (*((uint64_t (**)(SSLContextRef *))*a1 + 7))(a1);
    (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v9);
    v12 = *(_QWORD **)(v9 + 8);
    v13 = "SSLSetConnection failed. Error:";
    v14 = 31;
  }
  else if (a2 && (v16 = SSLSetCertificate(a1[17], *(CFArrayRef *)(a3 + 8)), (_DWORD)v16))
  {
    v10 = v16;
    v9 = (*((uint64_t (**)(SSLContextRef *))*a1 + 7))(a1);
    (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v9);
    v12 = *(_QWORD **)(v9 + 8);
    v13 = "SSLSetCertificate failed. Error:";
    v14 = 32;
  }
  else
  {
    v17 = a4[23];
    if ((v17 & 0x80u) != 0)
      v17 = *((_QWORD *)a4 + 1);
    if (!v17)
      goto LABEL_20;
    v18 = (*((uint64_t (**)(SSLContextRef *))*a1 + 8))(a1);
    (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"SSLSetPeerDomainName attempt with domain ", 41);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v18 + 32))(v18, a4);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (a4[23] < 0)
      a4 = *(char **)a4;
    v19 = strlen(a4);
    v20 = SSLSetPeerDomainName(a1[17], a4, v19);
    if (!(_DWORD)v20)
    {
LABEL_20:
      v9 = (*((uint64_t (**)(SSLContextRef *))*a1 + 8))(a1);
      (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Initialized SSL tunnel", 22);
      v10 = 0;
      goto LABEL_9;
    }
    v10 = v20;
    v9 = (*((uint64_t (**)(SSLContextRef *))*a1 + 7))(a1);
    (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v9);
    v12 = *(_QWORD **)(v9 + 8);
    v13 = "SSLSetPeerDomainName failed. Error:";
    v14 = 35;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
LABEL_9:
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  return v10;
}

uint64_t ImsSSLContext::_handleSSLReadCallback(ImsSSLContext *this, const void *a2, void *a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  std::string::basic_string[abi:ne180100]<0>(v13, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::spam(ims::_logger, (uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"ImsSSLContext : _handleSSLReadCallback static called", 52);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
  {
    operator delete(v13[0]);
    if (this)
      goto LABEL_5;
  }
  else if (this)
  {
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v13, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::spam(ims::_logger, (uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"ImsSSLContext : _handleSSLReadCallback static exit", 50);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    return (*(uint64_t (**)(_QWORD, const void *, void *))(**((_QWORD **)this + 13) + 16))(*((_QWORD *)this + 13), a2, a3);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "ImsSSL");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::error(ims::_logger, (uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"_handleSSLReadCallback failed. NULL context:", 44);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  return 4294957496;
}

void sub_1BEECB764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsSSLContext::_handleSSLWriteCallback(ImsSSLContext *this, const void *a2, const void *a3, unint64_t *a4)
{
  uint64_t v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  if (this)
    return (*(uint64_t (**)(_QWORD, const void *, const void *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), a2, a3);
  std::string::basic_string[abi:ne180100]<0>(v8, "ImsSSL");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::error(ims::_logger, (uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"_handleSSLWriteCallback failed. NULL context:", 45);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  return 4294957496;
}

void sub_1BEECB88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsSSLContext::deinitialize(SSLContextRef *this)
{
  uint64_t v2;
  uint64_t result;

  SSLClose(this[17]);
  CFRelease(this[17]);
  v2 = (*((uint64_t (**)(SSLContextRef *))*this + 8))(this);
  (*((void (**)(SSLContextRef *, uint64_t))*this + 2))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Deinitialized SSL tunnel", 24);
  *(_BYTE *)(v2 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return result;
}

BOOL ImsSSLContext::idle(SSLContextRef *this)
{
  SSLSessionState state;

  state = kSSLIdle;
  SSLGetSessionState(this[17], &state);
  return state == kSSLIdle;
}

BOOL ImsSSLContext::connected(SSLContextRef *this)
{
  SSLSessionState state;

  state = kSSLIdle;
  SSLGetSessionState(this[17], &state);
  return state == kSSLConnected;
}

uint64_t ImsSSLContext::handshake(SSLContextRef *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = SSLHandshake(this[17]);
  v3 = (*((uint64_t (**)(SSLContextRef *))*this + 8))(this);
  (*((void (**)(SSLContextRef *, uint64_t))*this + 2))(this, v3);
  v4 = *(_QWORD **)(v3 + 8);
  if ((_DWORD)v2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"SSLHandshake not yet completed. Errorcode:", 42);
    *(_BYTE *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"SSLHandshake succeeded", 22);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(SSLContextRef))(*(_QWORD *)this[13] + 32))(this[13]);
  }
  return v2;
}

uint64_t ImsSSLContext::readAppData(SSLContextRef *a1, std::string *a2)
{
  uint64_t v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v11[2];
  char v12;
  size_t bufferSize;
  size_t processed;
  void *__p[2];
  char v16;
  void *data[2];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(data, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::spam(ims::_logger, (uint64_t)data, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"ImsSSLContext: readAppData called", 33);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v16 < 0)
    operator delete(__p[0]);
  if (v18 < 0)
    operator delete(data[0]);
  bzero(data, 0x400uLL);
  bufferSize = 1024;
  processed = 0;
  v4 = 1024;
  do
  {
    if (v4 >= 0x400)
      v5 = 1024;
    else
      v5 = v4;
    v6 = SSLRead(a1[17], data, v5, &processed);
    if (processed)
      std::string::append(a2, (const std::string::value_type *)data, processed);
    v7 = (*((uint64_t (**)(SSLContextRef *))*a1 + 8))(a1);
    (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Reading App data from SSL tunnel. Max Buf = ", 44);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)", Processed = ", 14);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    SSLGetBufferedReadSize(a1[17], &bufferSize);
    v4 = bufferSize;
  }
  while (bufferSize);
  std::string::basic_string[abi:ne180100]<0>(__p, "net");
  std::string::basic_string[abi:ne180100]<0>(v11, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::spam(ims::_logger, (uint64_t)__p, (uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"ImsSSLContext : readAppData exit", 32);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v12 < 0)
    operator delete(v11[0]);
  if (v16 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_1BEECBD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsSSLContext::writeAppData(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  if (v3 < 0)
    a2 = (uint64_t *)*a2;
  v5 = v2;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 144))(a1, a2, &v5);
}

uint64_t ImsSSLContext::writeAppData(SSLContextRef *this, char *data, unint64_t *a3)
{
  size_t v5;
  uint64_t result;
  size_t processed;

  processed = 0;
  v5 = *a3;
  do
  {
    result = SSLWrite(this[17], data, v5, &processed);
    data += processed;
    v5 -= processed;
  }
  while ((_DWORD)result == -9803);
  return result;
}

uint64_t ImsSSLContext::fetchNegotiatedCipher(SSLContextRef *this)
{
  uint64_t v2;
  uint64_t result;
  SSLCipherSuite cipherSuite;

  cipherSuite = 0;
  if (!SSLGetNegotiatedCipher(this[17], &cipherSuite))
    return cipherSuite;
  v2 = (*((uint64_t (**)(SSLContextRef *))*this + 7))(this);
  (*((void (**)(SSLContextRef *, uint64_t))*this + 2))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Failed to fetch TLS Cipher Suite - Failed to get negotiated cipher. Error code:", 79);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  result = 0;
  *(_BYTE *)(v2 + 17) = 0;
  return result;
}

void ImsSSLContextBase::~ImsSSLContextBase(void **this)
{
  ImsSSLContextBase::~ImsSSLContextBase(this);
  JUMPOUT(0x1C3B87100);
}

{
  *this = &off_1E78C0C38;
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  *this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

_QWORD *ImsSSLContextBase::logPrefix(ImsSSLContextBase *this, ImsOutStream *a2)
{
  _QWORD *result;

  (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 112);
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" :", 2);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

uint64_t ImsSSLContextBase::initialize()
{
  return 0;
}

uint64_t ImsSSLContextBase::idle(ImsSSLContextBase *this)
{
  return 0;
}

uint64_t ImsSSLContextBase::connected(ImsSSLContextBase *this)
{
  return 1;
}

uint64_t ImsSSLContextBase::handshake(ImsSSLContextBase *this)
{
  return 0;
}

uint64_t ImsSSLContextBase::fetchNegotiatedCipher(ImsSSLContextBase *this)
{
  return 0;
}

void ImsSSLContext::~ImsSSLContext(void **this)
{
  ImsSSLContextBase::~ImsSSLContextBase(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SDPAudioSettingsBuilder::RemoteEVSOfferMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, ImsPrefs *a5, const ImsPrefs *a6)
{
  int v11;
  int v12;
  const SDPMediaFormatEVSParams *v13;
  uint64_t v14;
  std::string *v15;
  void **EVSHardBrLimitKey;
  _BOOL8 v17;
  void **EVSHardBwLimitKey;
  const ImsPrefs *v19;
  const SDPMediaFormatEVSParams *v20;
  const SDPMediaFormatEVSParams *v21;
  uint64_t v22;
  const SDPMediaFormatEVSParams *v23;
  int v24;
  uint64_t v25;
  void *v27;
  char v28;
  std::string __p;
  __int128 v30;
  void *v31[2];
  _OWORD v32[6];
  __int128 v33;
  _BYTE v34[112];
  _OWORD v35[5];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (this && *((_WORD *)this + 14) == 255)
  {
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    memset(v35, 0, sizeof(v35));
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v35, (unsigned int *)a3 + 24);
    v33 = 0u;
    memset(v34, 0, sizeof(v34));
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)&v33, (unsigned int *)a2 + 24);
    v11 = DWORD2(v38);
    v12 = *(_DWORD *)&v34[104];
    if (*(_DWORD *)&v34[104] == 2)
      v13 = (const SDPMediaFormatEVSParams *)&v33;
    else
      v13 = 0;
    if (DWORD2(v38) == 2)
    {
      v14 = 0;
      if (DWORD1(v36) == 7)
        goto LABEL_49;
      if (v37 > 1u)
        goto LABEL_49;
      v14 = 0;
      if (BYTE1(v37) > 1u || *((unsigned __int16 *)a3 + 45) > 1u)
        goto LABEL_49;
    }
    else if (*((unsigned __int16 *)a3 + 45) > 1u)
    {
      v14 = 0;
LABEL_49:
      std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v33);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v35);
      return v14;
    }
    *(_OWORD *)v31 = 0u;
    memset(v32, 0, 88);
    v30 = 0u;
    SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)&v30, *((_WORD *)a3 + 4));
    if (v12 == 2)
    {
      BYTE8(v30) = BYTE8(v33);
      v15 = std::string::operator=((std::string *)v31, (const std::string *)v34);
      *(_OWORD *)((char *)&v32[1] + 10) = *(_OWORD *)&v34[42];
      *(_OWORD *)((char *)&v32[2] + 10) = *(_OWORD *)&v34[58];
      *(_OWORD *)((char *)&v32[3] + 10) = *(_OWORD *)&v34[74];
      *(_QWORD *)((char *)&v32[4] + 10) = *(_QWORD *)&v34[90];
      *(_OWORD *)((char *)v32 + 10) = *(_OWORD *)&v34[26];
      WORD4(v32[0]) = *((_WORD *)a3 + 4);
    }
    EVSHardBrLimitKey = (void **)ImsPrefs::getEVSHardBrLimitKey((ImsPrefs *)v15);
    ImsPrefs::stringValue(a5, EVSHardBrLimitKey);
    v17 = SDPParser::parseEVSBr((uint64_t)&v30, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    EVSHardBwLimitKey = (void **)ImsPrefs::getEVSHardBwLimitKey((ImsPrefs *)v17);
    ImsPrefs::stringValue(a5, EVSHardBwLimitKey);
    SDPParser::parseEVSBw((uint64_t)&v30, &v27);
    if (v28 < 0)
      operator delete(v27);
    if (isOpenOffer(a3))
    {
      if (v11 == 2)
        v20 = (const SDPMediaFormatEVSParams *)v35;
      else
        v20 = (const SDPMediaFormatEVSParams *)&v30;
      if (v12 == 2)
        v21 = (const SDPMediaFormatEVSParams *)&v33;
      else
        v21 = (const SDPMediaFormatEVSParams *)&v30;
      SDPAudioSettingsBuilder::copyEVSMediaFormatInfo(this, (SDPMediaAudioSettings *)*((unsigned __int16 *)a3 + 4), v21, v20, a4, a5, v19);
    }
    else
    {
      v22 = 84;
      if (v12 == 2)
        v22 = (uint64_t)&v34[68];
      if (v11 == 2)
        v23 = (const SDPMediaFormatEVSParams *)v35;
      else
        v23 = v13;
      if (v11 == 2)
        v22 = (uint64_t)&v36 + 4;
      v24 = *(_DWORD *)v22;
      if (v24 > SDWORD1(v32[3]) && v24 <= 5 && ((1 << v24) & 0x2A) != 0)
        goto LABEL_46;
      v25 = (uint64_t)&v34[40];
      if (v12 != 2)
        v25 = 56;
      if (v11 == 2)
        v25 = (uint64_t)&v35[3] + 8;
      if ((*((_QWORD *)&v32[1] + 1) & *(_QWORD *)v25) == 0)
      {
LABEL_46:
        v14 = 0;
LABEL_47:
        *(_QWORD *)&v30 = off_1E78ED0A8;
        if (SBYTE7(v32[0]) < 0)
          operator delete(v31[0]);
        goto LABEL_49;
      }
      SDPAudioSettingsBuilder::copyEVSMediaFormatInfo(this, (SDPMediaAudioSettings *)*((unsigned __int16 *)a3 + 4), (const SDPMediaFormatEVSParams *)&v30, v23, a4, a5, v19);
    }
    v14 = 1;
    goto LABEL_47;
  }
  return 0;
}

void sub_1BEECC384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unsigned int a40)
{
  uint64_t v40;

  if (a28 < 0)
    operator delete(__p);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(&a40);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(v40 - 224));
  _Unwind_Resume(a1);
}

uint64_t SDPAudioSettingsBuilder::RemoteAMROfferMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, ImsPrefs *a5, const ImsPrefs *a6, const ImsPrefs *a7)
{
  return SDPAudioSettingsBuilder::genericRemoteAMROfferMatchHandler(this, a2, a3, a4, 0, a5, a7);
}

uint64_t SDPAudioSettingsBuilder::RemoteAMRWBOfferMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, ImsPrefs *a5, const ImsPrefs *a6, const ImsPrefs *a7)
{
  return SDPAudioSettingsBuilder::genericRemoteAMROfferMatchHandler(this, a2, a3, a4, 1, a5, a7);
}

uint64_t SDPAudioSettingsBuilder::RemoteDTMFOfferMatchHandler(_WORD *a1, uint64_t a2, uint64_t a3)
{
  __int16 v3;
  __int16 v4;

  if (a1 && a1[152] == 255)
  {
    v3 = *(_WORD *)(a3 + 8);
    a1[152] = v3;
    a1[153] = v3;
    v4 = *(_WORD *)(a2 + 88);
    if (!v4)
      v4 = 8000;
    a1[155] = v4;
  }
  return 0;
}

uint64_t std::map<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

uint64_t SDPAudioSettingsBuilder::RemoteEVSAnswerMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, const ImsPrefs *a5, const ImsPrefs *a6)
{
  const SDPMediaFormatEVSParams *v11;
  int v12;
  char v13;
  BOOL v14;
  const ImsPrefs *v15;
  _OWORD v17[3];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  SDPMediaAudioSettings *v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!this || *((_WORD *)this + 14) != 255)
    goto LABEL_14;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  memset(v23, 0, sizeof(v23));
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v23, (unsigned int *)a3 + 24);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  v11 = (const SDPMediaFormatEVSParams *)v17;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v17, (unsigned int *)a2 + 24);
  v12 = DWORD2(v22);
  if (DWORD2(v22) != 2)
    v11 = 0;
  if (DWORD2(v29) == 2)
  {
    v13 = 0;
    if (v28 > 1u || BYTE1(v28) > 1u)
    {
      v14 = 0;
    }
    else
    {
      v14 = 0;
      if (*((unsigned __int16 *)a3 + 45) <= 1u)
      {
        if ((isOpenOffer(a2) & 1) != 0
          || (isOpenOffer(a3) & 1) != 0
          || v12 == 2 && (*((_QWORD *)&v25 + 1) & ~*((_QWORD *)&v18 + 1)) == 0 && SDWORD1(v20) >= SDWORD1(v27))
        {
          SDPAudioSettingsBuilder::copyEVSMediaFormatInfo(this, (SDPMediaAudioSettings *)LOWORD(v24[1]), v11, (const SDPMediaFormatEVSParams *)v23, a4, a5, v15);
          v14 = 0;
          v13 = 1;
        }
        else
        {
          v14 = 1;
        }
      }
    }
  }
  else
  {
    v13 = 0;
    v14 = *((unsigned __int16 *)a3 + 45) < 2u;
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v17);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v23);
  if (v14)
LABEL_14:
    v13 = 0;
  return v13 & 1;
}

void sub_1BEECC638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int a25)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(&a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(&a25);
  _Unwind_Resume(a1);
}

SDPAudioSettingsBuilder *SDPAudioSettingsBuilder::RemoteAMRAnswerMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, ImsPrefs *a5, const ImsPrefs *a6, const ImsPrefs *a7)
{
  return SDPAudioSettingsBuilder::genericRemoteAMRAnswerMatchHandler(this, a2, a3, a4, 0, a5, a7);
}

SDPAudioSettingsBuilder *SDPAudioSettingsBuilder::RemoteAMRWBAnswerMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, ImsPrefs *a5, const ImsPrefs *a6, const ImsPrefs *a7)
{
  return SDPAudioSettingsBuilder::genericRemoteAMRAnswerMatchHandler(this, a2, a3, a4, 1, a5, a7);
}

uint64_t SDPAudioSettingsBuilder::RemoteDTMFAnswerMatchHandler(_WORD *a1, uint64_t a2, uint64_t a3)
{
  __int16 v3;

  if (a1 && a1[152] == 255)
  {
    a1[152] = *(_WORD *)(a2 + 8);
    a1[153] = *(_WORD *)(a3 + 8);
    v3 = *(_WORD *)(a2 + 88);
    if (!v3)
      v3 = 8000;
    a1[155] = v3;
  }
  return 0;
}

ImsPrefs *SDPAudioSettingsBuilder::SDPAudioSettingsBuilder(ImsPrefs *a1, _QWORD *a2, ImsPrefs *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **UseRemoteMediaOrderKey;
  void *v9;
  char v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[2];

  v5 = (std::__shared_weak_count *)a2[1];
  v14[0] = *a2;
  v14[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  UseRemoteMediaOrderKey = (void **)ImsPrefs::getUseRemoteMediaOrderKey(a1);
  v9 = ImsPrefs::prefWithKey(a3, UseRemoteMediaOrderKey);
  if (v9)
    v10 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 40))(v9);
  else
    v10 = *((_BYTE *)UseRemoteMediaOrderKey + 57) != 0;
  SDPSettingsBuilder::SDPSettingsBuilder((uint64_t)a1, v14, v10);
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)a1 = &off_1E78C0DB8;
  return a1;
}

void sub_1BEECC790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SDPAudioSettingsBuilder::createAudioSettingsForOffer(uint64_t a1@<X0>, SDPModel **a2@<X1>, SDPMedia *a3@<X2>, unint64_t a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  SDPModel *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  SDPModel *v15[2];
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = a2[1];
  v15[0] = *a2;
  v15[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)((char *)v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  SDPAudioSettingsBuilder::createAudioSettings(a1, (uint64_t)&v16, v15, a3, (uint64_t)&__block_literal_global_1, a4);
  if (v7)
  {
    v10 = (unint64_t *)((char *)v7 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      (*(void (**)(SDPModel *))(*(_QWORD *)v7 + 16))(v7);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
    }
  }
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BEECC894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SDPAudioSettingsBuilder::createAudioSettings(uint64_t a1@<X0>, uint64_t a2@<X1>, SDPModel **a3@<X2>, SDPMedia *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X8>)
{
  uint64_t i;
  SDPMediaSettings *j;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  BOOL isIPv6;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const ImsPrefs *v20;
  int v21;
  unsigned __int16 v22;
  int v23;
  uint64_t **v24;
  uint64_t **v25;
  void **v26;
  SDPModel **v27;
  uint64_t v28;
  uint64_t **v29;
  void **v30;
  SDPModel **v31;
  uint64_t **v32;
  ImsPrefs *v33;
  int v34;
  void **MaxPacketizationTimeKey;
  void *v36;
  uint64_t k;
  BOOL v38;
  SDPModel *v39;
  SDPModel *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  SDPModel *v53;
  _QWORD v54[6];
  _QWORD v55[8];
  BOOL v56;
  void *__p;
  void **p_p;
  uint64_t v59;
  _QWORD *(*v60)(_QWORD *, _QWORD *);
  void (*v61)(uint64_t);
  void ***v62;
  void **v63[2];
  void *v64;
  void **v65;
  uint64_t v66;
  __int16 v67;
  SDPModel *v68;
  std::__shared_weak_count *v69;
  SDPModel *v70[2];
  SDPModel *v71;
  std::__shared_weak_count *v72;

  for (i = *((_QWORD *)*a3 + 52); i != *((_QWORD *)*a3 + 53); i += 200)
  {
    if (*(_DWORD *)(i + 12) == 2)
      goto LABEL_6;
  }
  i = 0;
LABEL_6:
  for (j = *(SDPMediaSettings **)(*(_QWORD *)a2 + 416);
        j != *(SDPMediaSettings **)(*(_QWORD *)a2 + 424);
        j = (SDPMediaSettings *)((char *)j + 200))
  {
    if (*((_DWORD *)j + 3) == 2)
      goto LABEL_11;
  }
  j = 0;
LABEL_11:
  if (!i)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.audiosettingbuilder");
    std::string::basic_string[abi:ne180100]<0>(&v64, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v28 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"SDPAudioSettingsBuilder::createAudioSettings Remote media is null", 65);
    *(_BYTE *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_35:
    *(_BYTE *)(v28 + 17) = 0;
    if (SHIBYTE(v66) < 0)
      operator delete(v64);
    if (SHIBYTE(v59) < 0)
      operator delete(__p);
    *(_BYTE *)a6 = 0;
    *(_BYTE *)(a6 + 432) = 0;
    return;
  }
  if (!j)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.audiosettingbuilder");
    std::string::basic_string[abi:ne180100]<0>(&v64, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v28 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"SDPAudioSettingsBuilder::createAudioSettings Local media is null", 64);
    *(_BYTE *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_35;
  }
  v13 = (std::__shared_weak_count *)a3[1];
  v68 = *a3;
  v69 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  isIPv6 = SDPSettingsBuilder::isIPv6(&v68, (SDPMedia *)i);
  v17 = v69;
  if (v69)
  {
    v18 = (unint64_t *)&v69->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v64 = 0;
  v65 = &v64;
  v66 = 0x2000000000;
  v67 = 0;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 176) = 0u;
  *(_OWORD *)(a6 + 192) = 0u;
  *(_OWORD *)(a6 + 208) = 0u;
  *(_OWORD *)(a6 + 224) = 0u;
  *(_OWORD *)(a6 + 240) = 0u;
  *(_OWORD *)(a6 + 256) = 0u;
  *(_OWORD *)(a6 + 272) = 0u;
  *(_OWORD *)(a6 + 288) = 0u;
  *(_OWORD *)(a6 + 304) = 0u;
  *(_OWORD *)(a6 + 320) = 0u;
  *(_OWORD *)(a6 + 336) = 0u;
  *(_OWORD *)(a6 + 352) = 0u;
  *(_OWORD *)(a6 + 368) = 0u;
  *(_OWORD *)(a6 + 384) = 0u;
  *(_OWORD *)(a6 + 400) = 0u;
  *(_OWORD *)(a6 + 416) = 0u;
  *(_QWORD *)(a6 + 432) = 0;
  __p = 0;
  p_p = &__p;
  v59 = 0x4002000000;
  v60 = __Block_byref_object_copy_;
  v61 = __Block_byref_object_dispose_;
  v63[0] = 0;
  v63[1] = 0;
  v62 = v63;
  LOWORD(v71) = 8000;
  *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)&v62, 0x1F40u, &v71)+ 174) = 8000;
  LOWORD(v71) = 16000;
  *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, 0x3E80u, &v71)+ 174) = 16000;
  v55[0] = MEMORY[0x1E0C809B0];
  v55[1] = 0x40000000;
  v55[2] = ___ZNK23SDPAudioSettingsBuilder19createAudioSettingsENSt3__110shared_ptrI8SDPModelEES3_RK8ImsPrefsU13block_pointerFbNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP21SDPMediaAudioSettingsR18SDPMediaFormatInfoSG_bS6_E_block_invoke;
  v55[3] = &unk_1E78C0E90;
  v55[4] = a5;
  v55[5] = &__p;
  v56 = isIPv6;
  v55[6] = &v64;
  v55[7] = a4;
  v54[0] = MEMORY[0x1E0C809B0];
  v54[1] = 0x40000000;
  v54[2] = ___ZNK23SDPAudioSettingsBuilder19createAudioSettingsENSt3__110shared_ptrI8SDPModelEES3_RK8ImsPrefsU13block_pointerFbNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP21SDPMediaAudioSettingsR18SDPMediaFormatInfoSG_bS6_E_block_invoke_2;
  v54[3] = &unk_1E78C0EB8;
  v54[4] = &__p;
  v54[5] = &v64;
  SDPSettingsBuilder::findRTPMatches(a1, (uint64_t)j + 40, i + 40, (uint64_t)v55, (uint64_t)v54);
  v21 = *((unsigned __int16 *)v65 + 12);
  if (!*((_WORD *)v65 + 12))
    goto LABEL_46;
  if (v21 == 16000)
    v22 = 8000;
  else
    v22 = 16000;
  LOWORD(v71) = v22;
  if (*((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, v21, (_WORD *)v65 + 12)+ 34) != 255&& *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, *((_WORD *)v65 + 12), (_WORD *)v65 + 12)+ 172) != 255)
  {
    v30 = p_p;
    v31 = (SDPModel **)(v65 + 3);
    v22 = *((_WORD *)v65 + 12);
LABEL_45:
    v32 = std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)v30 + 5, v22, v31);
    std::optional<SDPMediaAudioSettings>::operator=[abi:ne180100]<SDPMediaAudioSettings&,void>((SDPMediaAudioSettings *)a6, (SDPMediaAudioSettings *)(v32 + 5));
    goto LABEL_46;
  }
  if (*((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, v22, &v71)+ 34) != 255&& *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, v22, &v71)+ 172) != 255)
  {
    v31 = &v71;
    v30 = p_p;
    goto LABEL_45;
  }
  v23 = *((unsigned __int16 *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, *((_WORD *)v65 + 12), (_WORD *)v65 + 12)+ 34);
  v24 = (uint64_t **)(p_p + 5);
  if (v23 == 255)
  {
    if (*((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v24, v22, &v71)+ 34) == 255)goto LABEL_46;
    v25 = std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, v22, &v71);
    std::optional<SDPMediaAudioSettings>::operator=[abi:ne180100]<SDPMediaAudioSettings&,void>((SDPMediaAudioSettings *)a6, (SDPMediaAudioSettings *)(v25 + 5));
    if (*((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, *((_WORD *)v65 + 12), (_WORD *)v65 + 12)+ 172) == 255)goto LABEL_46;
    *(_WORD *)(a6 + 304) = *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, *((_WORD *)v65 + 12), (_WORD *)v65 + 12)+ 172);
    *(_WORD *)(a6 + 306) = *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, *((_WORD *)v65 + 12), (_WORD *)v65 + 12)+ 173);
    v26 = p_p;
    v27 = (SDPModel **)(v65 + 3);
    v22 = *((_WORD *)v65 + 12);
    goto LABEL_42;
  }
  v29 = std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v24, *((_WORD *)v65 + 12), (_WORD *)v65 + 12);
  std::optional<SDPMediaAudioSettings>::operator=[abi:ne180100]<SDPMediaAudioSettings&,void>((SDPMediaAudioSettings *)a6, (SDPMediaAudioSettings *)(v29 + 5));
  if (*((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, v22, &v71)+ 172) != 255)
  {
    *(_WORD *)(a6 + 304) = *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, v22, &v71)+ 172);
    *(_WORD *)(a6 + 306) = *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, v22, &v71)+ 173);
    v27 = &v71;
    v26 = p_p;
LABEL_42:
    *(_WORD *)(a6 + 310) = *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)v26 + 5, v22, v27)+ 175);
  }
LABEL_46:
  if (*(_BYTE *)(a6 + 432))
  {
    SDPSettingsBuilder::copyGeneralMediaSettings((std::string *)a6, j, (SDPMedia *)i, a4, v20);
    *(_WORD *)(a6 + 312) = SDPMedia::packetizationTime((SDPMedia *)i);
    v33 = (ImsPrefs *)SDPMedia::maxPacketizationTime((SDPMedia *)i);
    if ((_DWORD)v33)
    {
      LOWORD(v34) = SDPMedia::maxPacketizationTime((SDPMedia *)i);
    }
    else
    {
      MaxPacketizationTimeKey = (void **)ImsPrefs::getMaxPacketizationTimeKey(v33);
      v36 = ImsPrefs::prefWithKey(a4, MaxPacketizationTimeKey);
      if (v36)
        LOWORD(v34) = (*(uint64_t (**)(void *))(*(_QWORD *)v36 + 56))(v36);
      else
        v34 = *((_DWORD *)MaxPacketizationTimeKey + 15);
    }
    *(_WORD *)(a6 + 314) = v34;
    for (k = *(_QWORD *)(i + 144); ; k = *(_QWORD *)(k + 8))
    {
      if (k == i + 136)
      {
        v38 = 0;
        goto LABEL_58;
      }
      if (*(_DWORD *)(k + 136) == 5)
        break;
    }
    v38 = *(_BYTE *)(k + 56) != 0;
LABEL_58:
    *(_BYTE *)(a6 + 316) = v38;
    if (!*(_BYTE *)(a6 + 432))
      std::__throw_bad_optional_access[abi:ne180100]();
    v39 = *a3;
    v40 = a3[1];
    v53 = v39;
    if (v40)
    {
      v41 = (unint64_t *)((char *)v40 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      v71 = v39;
      v72 = (std::__shared_weak_count *)v40;
      do
        v43 = __ldxr(v41);
      while (__stxr(v43 + 1, v41));
    }
    else
    {
      v71 = v39;
      v72 = 0;
    }
    SDPSettingsBuilder::copyRemoteMediaSettings(a6, &v71, (SDPMedia *)i);
    v44 = v72;
    if (v72)
    {
      v45 = (unint64_t *)&v72->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v70[0] = v53;
    v70[1] = v40;
    if (v40)
    {
      v47 = (unint64_t *)((char *)v40 + 8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    SDPSettingsBuilder::generateBandwidthSpecifierInfo(a6, v70, i);
    if (v40)
    {
      v49 = (unint64_t *)((char *)v40 + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        (*(void (**)(SDPModel *))(*(_QWORD *)v40 + 16))(v40);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v40);
      }
    }
    if (v40)
    {
      v51 = (unint64_t *)((char *)v40 + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        (*(void (**)(SDPModel *))(*(_QWORD *)v40 + 16))(v40);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v40);
      }
    }
  }
  _Block_object_dispose(&__p, 8);
  std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::destroy(v63[0]);
  _Block_object_dispose(&v64, 8);
}

void sub_1BEECD048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *ims::getValueFromMap<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>(uint64_t a1, void **a2)
{
  void **v3;
  _QWORD *v4;
  void **v5;
  char v6;
  _QWORD *v7;
  uint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  v3 = (void **)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v5 = (void **)(a1 + 8);
    do
    {
      v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4 + 4, a2);
      if (v6 >= 0)
        v7 = v4;
      else
        v7 = v4 + 1;
      if (v6 >= 0)
        v5 = (void **)v4;
      v4 = (_QWORD *)*v7;
    }
    while (*v7);
    if (v5 != v3
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) == 0)
    {
      return v5[7];
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "rtp.util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"getValueFromMap", 15);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" Object not found [key=", 23);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 32))(v9, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  return 0;
}

void sub_1BEECD308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SDPAudioSettingsBuilder::createAudioSettingsForOfferAnswer(uint64_t a1@<X0>, uint64_t *a2@<X1>, SDPModel **a3@<X2>, SDPMedia *a4@<X3>, SDPMediaAudioSettings *a5@<X8>)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  SDPModel *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  SDPModel *v23;
  SDPModel *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  SDPModel *v32[2];
  uint64_t v33;
  std::__shared_weak_count *v34;
  SDPModel *v35[2];
  uint64_t v36;
  std::__shared_weak_count *v37;
  _OWORD v38[27];
  uint64_t v39;

  v39 = 0;
  memset(v38, 0, sizeof(v38));
  v9 = (std::__shared_weak_count *)a2[1];
  v36 = *a2;
  v37 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = a3[1];
  v35[0] = *a3;
  v35[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)((char *)v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  SDPAudioSettingsBuilder::createAudioSettings(a1, (uint64_t)&v36, v35, a4, (uint64_t)&__block_literal_global_7, (unint64_t)v38);
  if (v12)
  {
    v15 = (unint64_t *)((char *)v12 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(SDPModel *))(*(_QWORD *)v12 + 16))(v12);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
    }
  }
  v17 = v37;
  if (v37)
  {
    v18 = (unint64_t *)&v37->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if ((_BYTE)v39)
  {
    *(_BYTE *)a5 = 0;
    *((_BYTE *)a5 + 432) = 0;
    SDPMediaAudioSettings::SDPMediaAudioSettings(a5, (const SDPMediaAudioSettings *)v38);
    *((_BYTE *)a5 + 432) = 1;
  }
  else
  {
    v20 = *(std::__shared_weak_count **)(a1 + 16);
    v33 = *(_QWORD *)(a1 + 8);
    v34 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = *a3;
    v24 = a3[1];
    v32[0] = v23;
    v32[1] = v24;
    if (v24)
    {
      v25 = (unint64_t *)((char *)v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    SDPAudioSettingsBuilder::createAudioSettings(a1, (uint64_t)&v33, v32, a4, (uint64_t)&__block_literal_global_9, (unint64_t)a5);
    if (v24)
    {
      v27 = (unint64_t *)((char *)v24 + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        (*(void (**)(SDPModel *))(*(_QWORD *)v24 + 16))(v24);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v24);
      }
    }
    v29 = v34;
    if (v34)
    {
      v30 = (unint64_t *)&v34->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  if ((_BYTE)v39)
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)v38);
}

void sub_1BEECD58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a71)
    SDPMediaAudioSettings::~SDPMediaAudioSettings(&a17);
  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_copy_(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::destroy(*(void ***)(a1 + 48));
}

void ___ZNK23SDPAudioSettingsBuilder19createAudioSettingsENSt3__110shared_ptrI8SDPModelEES3_RK8ImsPrefsU13block_pointerFbNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP21SDPMediaAudioSettingsR18SDPMediaFormatInfoSG_bS6_E_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t **v7;
  unsigned __int16 v8;
  uint64_t **v9;
  int v10;
  __int16 v11;
  unsigned __int16 v12;
  std::string v13;
  _OWORD v14[3];
  __int128 v15;
  __int128 v16;

  v15 = 0u;
  v16 = 0u;
  memset(v14, 0, sizeof(v14));
  SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)v14, (const SDPMediaRTPMap *)(a2 + 16));
  v6 = *(_QWORD *)(a1 + 32);
  if (SBYTE7(v16) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)v15, *((std::string::size_type *)&v15 + 1));
  }
  else
  {
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v15;
    v13.__r_.__value_.__r.__words[2] = v16;
  }
  v7 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (WORD4(v16))
    v8 = WORD4(v16);
  else
    v8 = 8000;
  v12 = v8;
  v9 = std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v7, v8, &v12);
  if ((*(unsigned int (**)(uint64_t, std::string *, uint64_t **, uint64_t, uint64_t, _QWORD, _QWORD))(v6 + 16))(v6, &v13, v9 + 5, a2, a3, *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 56)))
  {
    v10 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v13.__r_.__value_.__l.__data_);
      if (v10)
        goto LABEL_17;
    }
    else if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      goto LABEL_17;
    }
    v11 = WORD4(v16);
    if (!WORD4(v16))
      v11 = 8000;
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v11;
  }
  else if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
LABEL_17:
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)v14);
}

void sub_1BEECD8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18)
{
  SDPMediaRTPMap::~SDPMediaRTPMap(&a18);
  _Unwind_Resume(a1);
}

void ___ZNK23SDPAudioSettingsBuilder19createAudioSettingsENSt3__110shared_ptrI8SDPModelEES3_RK8ImsPrefsU13block_pointerFbNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP21SDPMediaAudioSettingsR18SDPMediaFormatInfoSG_bS6_E_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t **v4;
  uint64_t **v5;
  uint64_t **v7;
  char *v8;
  uint64_t v9;
  __int16 v10;
  std::string __str;

  v4 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v10 = 8000;
  v5 = std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v4, 0x1F40u, &v10);
  if (*((_WORD *)v5 + 34) == 255 && (a2 | 8) == 8)
  {
    v7 = v5;
    *((_WORD *)v5 + 34) = a2;
    *((_WORD *)v5 + 35) = a2;
    if (a2)
      v8 = "PCMA";
    else
      v8 = "PCMU";
    std::string::basic_string[abi:ne180100]<0>(&__str, v8);
    std::string::operator=((std::string *)(v7 + 40), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    if (!*(_WORD *)(v9 + 24))
      *(_WORD *)(v9 + 24) = 8000;
  }
}

void sub_1BEECD998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

SDPMediaAudioSettings *std::optional<SDPMediaAudioSettings>::operator=[abi:ne180100]<SDPMediaAudioSettings&,void>(SDPMediaAudioSettings *this, SDPMediaAudioSettings *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*((_BYTE *)this + 432))
  {
    SDPMediaSettings::operator=((uint64_t)this, (uint64_t)a2);
    std::string::operator=((std::string *)((char *)this + 280), (const std::string *)((char *)a2 + 280));
    v4 = *((_QWORD *)a2 + 38);
    *(_QWORD *)((char *)this + 309) = *(_QWORD *)((char *)a2 + 309);
    *((_QWORD *)this + 38) = v4;
    v5 = *(_OWORD *)((char *)a2 + 344);
    *(_OWORD *)((char *)this + 328) = *(_OWORD *)((char *)a2 + 328);
    *(_OWORD *)((char *)this + 344) = v5;
    *(_OWORD *)((char *)this + 360) = *(_OWORD *)((char *)a2 + 360);
    v7 = *(_OWORD *)((char *)a2 + 392);
    v6 = *(_OWORD *)((char *)a2 + 408);
    v8 = *(_OWORD *)((char *)a2 + 376);
    *((_WORD *)this + 212) = *((_WORD *)a2 + 212);
    *(_OWORD *)((char *)this + 392) = v7;
    *(_OWORD *)((char *)this + 408) = v6;
    *(_OWORD *)((char *)this + 376) = v8;
  }
  else
  {
    SDPMediaAudioSettings::SDPMediaAudioSettings(this, a2);
    *((_BYTE *)this + 432) = 1;
  }
  return this;
}

uint64_t isOpenOffer(SDPMediaFormatInfo *a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *((unsigned int *)a1 + 54);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = &v3;
  return ((uint64_t (*)(char **, char *))off_1E78C0F50[v1])(&v4, (char *)a1 + 96);
}

__n128 SDPAudioSettingsBuilder::copyEVSMediaFormatInfo(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, const SDPMediaFormatEVSParams *a3, const SDPMediaFormatEVSParams *a4, const SDPMediaFormatEVSParams *a5, const ImsPrefs *a6, const ImsPrefs *a7)
{
  int v9;
  __int128 v12;
  __n128 result;
  std::string __p;
  _OWORD v15[4];
  __int16 v16;

  if (a3 && a4)
  {
    v9 = (int)a5;
    *((_WORD *)this + 14) = (_WORD)a2;
    *((_WORD *)this + 15) = *((_WORD *)a4 + 20);
    std::string::basic_string[abi:ne180100]<0>(&__p, "EVS");
    std::string::operator=((std::string *)((char *)this + 280), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    SDPMediaEVSSettings::SDPMediaEVSSettings((SDPMediaEVSSettings *)v15, a3, a4, v9, a6);
    v12 = v15[3];
    *(_OWORD *)((char *)this + 392) = v15[2];
    *(_OWORD *)((char *)this + 408) = v12;
    *((_WORD *)this + 212) = v16;
    result = (__n128)v15[1];
    *(_OWORD *)((char *)this + 360) = v15[0];
    *(__n128 *)((char *)this + 376) = result;
  }
  return result;
}

void sub_1BEECDB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPAudioSettingsBuilder::genericRemoteAMROfferMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, int a5, ImsPrefs *a6, const ImsPrefs *a7)
{
  int v13;
  int v14;
  int v15;
  const ImsPrefs *v16;
  char v17;
  char v18;
  _BOOL4 v19;
  int v20;
  const SDPMediaFormatAMRParams *v21;
  const SDPMediaFormatAMRParams *v22;
  const SDPMediaFormatAMRParams *v23;
  uint64_t v24;
  __int128 v26;
  void *__p[2];
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!this || *((_WORD *)this + 14) != 255)
    return 0;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  memset(v37, 0, sizeof(v37));
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v37, (unsigned int *)a3 + 24);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  memset(v30, 0, sizeof(v30));
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v30, (unsigned int *)a2 + 24);
  v13 = DWORD2(v43);
  v14 = DWORD2(v36);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  *(_OWORD *)__p = 0u;
  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v26, *((_WORD *)a3 + 4), a5);
  v15 = isOpenOffer(a3);
  v17 = BYTE11(v38);
  v18 = BYTE11(v28);
  if (v13 != 1)
    v17 = BYTE11(v28);
  v19 = v17 != 0;
  if (v14 == 1)
    v18 = BYTE11(v31);
  v20 = v19 ^ (v18 != 0);
  if ((v20 & 1) == 0)
  {
    if (v13 == 1)
      v21 = (const SDPMediaFormatAMRParams *)v37;
    else
      v21 = (const SDPMediaFormatAMRParams *)&v26;
    v22 = (const SDPMediaFormatAMRParams *)v30;
    if (!v15)
      v22 = v21;
    if (v14 == 1)
      v23 = v22;
    else
      v23 = (const SDPMediaFormatAMRParams *)&v26;
    SDPAudioSettingsBuilder::copyAMRMediaFormatInfo(this, (SDPMediaAudioSettings *)*((unsigned __int16 *)a3 + 4), v23, v21, a4, a5, a6, v16);
  }
  v24 = v20 ^ 1u;
  *(_QWORD *)&v26 = off_1E78ED0A8;
  if (SBYTE7(v28) < 0)
    operator delete(__p[0]);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v30);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v37);
  return v24;
}

void sub_1BEECDD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,unsigned int a36)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(&a20);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(&a36);
  _Unwind_Resume(a1);
}

double SDPAudioSettingsBuilder::copyAMRMediaFormatInfo(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, const SDPMediaFormatAMRParams *a3, const SDPMediaFormatAMRParams *a4, const SDPMediaFormatAMRParams *a5, int a6, ImsPrefs *a7, const ImsPrefs *a8)
{
  int v10;
  char *v14;
  std::string *v15;
  void **PreferredAMRWBModeKey;
  void **v17;
  void *v18;
  int v19;
  double result;
  std::string __p;
  _BYTE v22[8];
  __int128 v23;
  __int128 v24;

  v10 = (int)a5;
  *((_WORD *)this + 14) = (_WORD)a2;
  *((_WORD *)this + 15) = *((_WORD *)a4 + 20);
  if (a6)
    v14 = "AMR-WB";
  else
    v14 = "AMR";
  std::string::basic_string[abi:ne180100]<0>(&__p, v14);
  v15 = std::string::operator=((std::string *)((char *)this + 280), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a6)
      goto LABEL_6;
  }
  else if (a6)
  {
LABEL_6:
    PreferredAMRWBModeKey = (void **)ImsPrefs::getPreferredAMRWBModeKey((ImsPrefs *)v15);
    goto LABEL_9;
  }
  PreferredAMRWBModeKey = (void **)ImsPrefs::getPreferredAMRNBModeKey((ImsPrefs *)v15);
LABEL_9:
  v17 = PreferredAMRWBModeKey;
  v18 = ImsPrefs::prefWithKey(a7, PreferredAMRWBModeKey);
  if (v18)
    LOWORD(v19) = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 56))(v18);
  else
    v19 = *((_DWORD *)v17 + 15);
  SDPMediaAMRSettings::SDPMediaAMRSettings((SDPMediaAMRSettings *)v22, a3, a4, a6, v10, v19);
  *(_OWORD *)((char *)this + 328) = v23;
  result = *(double *)&v24;
  *(_OWORD *)((char *)this + 344) = v24;
  return result;
}

void sub_1BEECDE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

SDPAudioSettingsBuilder *SDPAudioSettingsBuilder::genericRemoteAMRAnswerMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, int a5, ImsPrefs *a6, const ImsPrefs *a7)
{
  SDPAudioSettingsBuilder *v7;
  int v13;
  int v14;
  int v15;
  int v16;
  const SDPMediaFormatAMRParams *v17;
  int v18;
  uint64_t v19;
  const SDPMediaFormatAMRParams *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  const ImsPrefs *v25;
  void *__p[2];
  char v27;
  void *v28[2];
  char v29;
  __int128 v30;
  void *v31[2];
  __int128 v32;
  __int128 v33;
  _OWORD v34[7];
  __int128 v35;
  _OWORD v36[7];
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    v7 = this;
    if (*((_WORD *)this + 14) != 255)
      return 0;
    v37 = 0u;
    memset(v36, 0, sizeof(v36));
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v36, (unsigned int *)a2 + 24);
    v35 = 0u;
    memset(v34, 0, sizeof(v34));
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v34, (unsigned int *)a3 + 24);
    v13 = DWORD2(v35);
    v14 = DWORD2(v37);
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    *(_OWORD *)v31 = 0u;
    SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v30, *((_WORD *)a3 + 4), a5);
    v15 = isOpenOffer(a2);
    v16 = isOpenOffer(a3);
    if (v13 == 1)
    {
      v17 = (const SDPMediaFormatAMRParams *)v34;
      v18 = v16;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "sdp.audio");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v19 = ImsLogger::debug(ims::_logger, (uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"We don't have remote AMR format params. Setting default", 55);
      *(_BYTE *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v19 + 17) = 0;
      if (v27 < 0)
        operator delete(__p[0]);
      if (v29 < 0)
        operator delete(v28[0]);
      v18 = 1;
      v17 = (const SDPMediaFormatAMRParams *)&v30;
    }
    if (v14 == 1)
    {
      v20 = (const SDPMediaFormatAMRParams *)v36;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "sdp.audio");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v21 = ImsLogger::debug(ims::_logger, (uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"We don't have local AMR format params. Setting default", 54);
      *(_BYTE *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v21 + 17) = 0;
      if (v27 < 0)
        operator delete(__p[0]);
      if (v29 < 0)
        operator delete(v28[0]);
      v15 = 1;
      v20 = (const SDPMediaFormatAMRParams *)&v30;
    }
    if ((*((_BYTE *)v20 + 43) != 0) == (*((_BYTE *)v17 + 43) != 0)
      && (((v18 | v15) & 1) != 0 || *((unsigned __int16 *)v20 + 23) == *((unsigned __int16 *)v17 + 23)))
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "sdp.audio.settings");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v24 = ImsLogger::debug(ims::_logger, (uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Open offer/answer and params match.", 35);
      *(_BYTE *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v24 + 17) = 0;
      if (v27 < 0)
        operator delete(__p[0]);
      if (v29 < 0)
        operator delete(v28[0]);
      SDPAudioSettingsBuilder::copyAMRMediaFormatInfo(v7, (SDPMediaAudioSettings *)*((unsigned __int16 *)a2 + 4), v20, v17, a4, a5, a6, v25);
      v23 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "sdp.audio.settings");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v22 = ImsLogger::debug(ims::_logger, (uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Offer/Answer not open. Local/remote params don't match ::", 57);
      *(_BYTE *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" local params - octet: ", 23);
      *(_BYTE *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)", isOpen: ", 10);
      *(_BYTE *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)", modeset: ", 11);
      *(_BYTE *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" remote params - octet: ", 24);
      *(_BYTE *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)", isOpen: ", 10);
      *(_BYTE *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)", modeset: ", 11);
      *(_BYTE *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v22 + 17) = 0;
      if (v27 < 0)
        operator delete(__p[0]);
      if (v29 < 0)
        operator delete(v28[0]);
      v23 = 1;
    }
    *(_QWORD *)&v30 = off_1E78ED0A8;
    if (SBYTE7(v32) < 0)
      operator delete(v31[0]);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v34);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v36);
    return (SDPAudioSettingsBuilder *)((v23 & 1) == 0);
  }
  return this;
}

void sub_1BEECE3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,unsigned int a32)
{
  uint64_t v32;

  if (a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(&a32);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(v32 - 224));
  _Unwind_Resume(a1);
}

void SDPAudioSettingsBuilder::~SDPAudioSettingsBuilder(SDPAudioSettingsBuilder *this)
{
  *(_QWORD *)this = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1C3B87100);
}

void SDPMediaAudioSettings::SDPMediaAudioSettings(SDPMediaAudioSettings *this, const SDPMediaAudioSettings *a2)
{
  _QWORD *v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  SDPMediaSettings::SDPMediaSettings(this, a2);
  *v4 = &off_1E78B97D0;
  v5 = (std::string *)(v4 + 35);
  if (*((char *)a2 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 35), *((_QWORD *)a2 + 36));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 280);
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 37);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
  *((_DWORD *)this + 78) = *((_DWORD *)a2 + 78);
  *((_BYTE *)this + 316) = *((_BYTE *)a2 + 316);
  *((_QWORD *)this + 40) = &off_1E78B9808;
  v7 = *(_OWORD *)((char *)a2 + 328);
  *(_OWORD *)((char *)this + 344) = *(_OWORD *)((char *)a2 + 344);
  *(_OWORD *)((char *)this + 328) = v7;
  v9 = *(_OWORD *)((char *)a2 + 392);
  v8 = *(_OWORD *)((char *)a2 + 408);
  v10 = *(_OWORD *)((char *)a2 + 376);
  *((_QWORD *)this + 53) = *((_QWORD *)a2 + 53);
  *(_OWORD *)((char *)this + 392) = v9;
  *(_OWORD *)((char *)this + 408) = v8;
  *(_OWORD *)((char *)this + 376) = v10;
  *(_OWORD *)((char *)this + 360) = *(_OWORD *)((char *)a2 + 360);
}

void sub_1BEECE5D4(_Unwind_Exception *a1)
{
  SDPMediaSettings *v1;

  SDPMediaSettings::~SDPMediaSettings(v1);
  _Unwind_Resume(a1);
}

void SDPMediaSettings::SDPMediaSettings(SDPMediaSettings *this, const SDPMediaSettings *a2)
{
  char *v4;
  __int128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  *(_QWORD *)this = &off_1E78E7680;
  *((_QWORD *)this + 1) = 0;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  *(_QWORD *)((char *)this + 36) = *(_QWORD *)((char *)a2 + 36);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 72);
    *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)((char *)this + 72) = v5;
  }
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  std::__optional_copy_base<SDPMediaCrypto,false>::__optional_copy_base[abi:ne180100]((SDPMediaSettings *)((char *)this + 104), (const SDPMediaSettings *)((char *)a2 + 104));
  std::__optional_copy_base<SDPMediaCrypto,false>::__optional_copy_base[abi:ne180100]((SDPMediaSettings *)((char *)this + 192), (const SDPMediaSettings *)((char *)a2 + 192));
  v6 = *((_QWORD *)a2 + 1);
  if (v6)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v6 + 32))(&v10);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v4, &v10);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (*((_QWORD *)&v10 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEECE718(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

SDPMediaCrypto *std::__optional_copy_base<SDPMediaCrypto,false>::__optional_copy_base[abi:ne180100](SDPMediaCrypto *this, const SDPMediaCrypto *a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    SDPMediaCrypto::SDPMediaCrypto(this, a2);
    *((_BYTE *)this + 80) = 1;
  }
  return this;
}

void sub_1BEECE7B4(_Unwind_Exception *exception_object)
{
  SDPMediaCrypto *v1;

  if (*((_BYTE *)v1 + 80))
    SDPMediaCrypto::~SDPMediaCrypto(v1);
  _Unwind_Resume(exception_object);
}

void SDPMediaCrypto::SDPMediaCrypto(SDPMediaCrypto *this, const SDPMediaCrypto *a2)
{
  std::string __p;

  if (*((char *)a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  else
    __p = *(std::string *)((char *)a2 + 16);
  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = off_1E78ED0A8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)((char *)this + 16) = __p;
  }
  *(_QWORD *)this = &off_1E78E2A68;
  *((_WORD *)this + 20) = *((_WORD *)a2 + 20);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 6, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6));
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
}

void sub_1BEECE8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void SDPMediaRTPMap::SDPMediaRTPMap(SDPMediaRTPMap *this, const SDPMediaRTPMap *a2)
{
  std::string *v4;
  __int128 v5;
  std::string __p;

  if (*((char *)a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  else
    __p = *(std::string *)((char *)a2 + 16);
  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = off_1E78ED0A8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)((char *)this + 16) = __p;
  }
  *(_QWORD *)this = &off_1E78EE990;
  *((_WORD *)this + 20) = *((_WORD *)a2 + 20);
  v4 = (std::string *)((char *)this + 48);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 3);
    *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
}

void sub_1BEECE9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  uint64_t v16;

  *(_QWORD *)v14 = v16;
  if (*(char *)(v14 + 39) < 0)
    operator delete(*v15);
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaSettings::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v4 + 32))(&v9);
      std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 8, &v9);
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
      {
        v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
    *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 36);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    std::__optional_storage_base<SDPMediaCrypto,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<SDPMediaCrypto,false> const&>((SDPMediaCrypto *)(a1 + 104), (unsigned __int8 *)(a2 + 104));
    std::__optional_storage_base<SDPMediaCrypto,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<SDPMediaCrypto,false> const&>((SDPMediaCrypto *)(a1 + 192), (unsigned __int8 *)(a2 + 192));
  }
  return a1;
}

{
  _QWORD *v4;

  v4 = (_QWORD *)(a2 + 8);
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 8), (uint64_t *)(a2 + 8));
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  std::__optional_storage_base<SDPMediaCrypto,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<SDPMediaCrypto,false> const&>((SDPMediaCrypto *)(a1 + 104), (unsigned __int8 *)(a2 + 104));
  std::__optional_storage_base<SDPMediaCrypto,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<SDPMediaCrypto,false> const&>((SDPMediaCrypto *)(a1 + 192), (unsigned __int8 *)(a2 + 192));
  return a1;
}

void std::__optional_storage_base<SDPMediaCrypto,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<SDPMediaCrypto,false> const&>(SDPMediaCrypto *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*((unsigned __int8 *)a1 + 80) == a2[80])
  {
    if (*((_BYTE *)a1 + 80))
      SDPMediaCrypto::operator=((uint64_t)a1, (uint64_t)a2);
  }
  else if (*((_BYTE *)a1 + 80))
  {
    SDPMediaCrypto::~SDPMediaCrypto(a1);
    *(_BYTE *)(v2 + 80) = 0;
  }
  else
  {
    SDPMediaCrypto::SDPMediaCrypto(a1, (const SDPMediaCrypto *)a2);
    *(_BYTE *)(v3 + 80) = 1;
  }
}

uint64_t SDPMediaCrypto::operator=(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  if (a1 != a2)
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48));
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

unsigned int *std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor(unsigned int *a1, unsigned int *a2)
{
  *(_BYTE *)a1 = 0;
  a1[30] = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_1BEECEC0C(_Unwind_Exception *a1)
{
  unsigned int *v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

unsigned int *std::__variant_detail::__ctor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1> const&>(unsigned int *result, unsigned int *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = result[30];
  if ((_DWORD)v4 != -1)
    result = (unsigned int *)(*(&off_1E78C0EF0 + v4))((int)&v7, (SDPMediaFormatUnknownParams *)result);
  v3[30] = -1;
  v5 = a2[30];
  if ((_DWORD)v5 != -1)
  {
    result = (unsigned int *)off_1E78C0F20[v5]((int)&v6, (SDPMediaFormatUnknownParams *)v3, (SDPMediaFormatUnknownParams *)a2);
    v3[30] = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS8_S9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, SDPMediaFormatUnknownParams *this, SDPMediaFormatUnknownParams *a3)
{
  SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS8_S9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, SDPMediaFormatAMRParams *this, SDPMediaFormatAMRParams *a3)
{
  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS8_S9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, SDPMediaFormatEVSParams *this, SDPMediaFormatEVSParams *a3)
{
  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams(this, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS8_S9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<3ul,SDPMediaFormatDTMFParams>::__alt[abi:ne180100]<SDPMediaFormatDTMFParams const&>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS8_S9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, SDPMediaFormatParams *this, uint64_t a3)
{
  uint64_t v4;

  SDPMediaFormatParams::SDPMediaFormatParams(this, *(_WORD *)(a3 + 40));
  *(_QWORD *)v4 = off_1E78E9AA8;
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a3 + 44);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a3 + 48);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS8_S9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, SDPMediaFormatParams *this, uint64_t a3)
{
  uint64_t v4;

  SDPMediaFormatParams::SDPMediaFormatParams(this, *(_WORD *)(a3 + 40));
  *(_QWORD *)v4 = off_1E78E9B20;
  *(_WORD *)(v4 + 42) = *(_WORD *)(a3 + 42);
}

void SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams(SDPMediaFormatUnknownParams *this, const SDPMediaFormatUnknownParams *a2)
{
  std::string *v3;
  std::string *v4;
  __int128 v5;

  SDPMediaFormatParams::SDPMediaFormatParams(this, *((_WORD *)a2 + 20));
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B8590;
  v4 = v3 + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 3);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1BEECEDBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  *(_QWORD *)v1 = off_1E78ED0A8;
  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(exception_object);
}

void SDPMediaFormatAMRParams::SDPMediaFormatAMRParams(SDPMediaFormatAMRParams *this, const SDPMediaFormatAMRParams *a2)
{
  uint64_t v3;

  SDPMediaFormatParams::SDPMediaFormatParams(this, *((_WORD *)a2 + 20));
  *(_QWORD *)v3 = off_1E78E9958;
  *(_BYTE *)(v3 + 42) = *((_BYTE *)a2 + 42);
  *(_WORD *)(v3 + 43) = *(_WORD *)((char *)a2 + 43);
  *(_DWORD *)(v3 + 46) = *(_DWORD *)((char *)a2 + 46);
  *(_BYTE *)(v3 + 50) = *((_BYTE *)a2 + 50);
  *(_WORD *)(v3 + 52) = *((_WORD *)a2 + 26);
  *(_BYTE *)(v3 + 54) = *((_BYTE *)a2 + 54);
  *(_WORD *)(v3 + 56) = *((_WORD *)a2 + 28);
  *(_BYTE *)(v3 + 58) = *((_BYTE *)a2 + 58);
  *(_WORD *)(v3 + 60) = *((_WORD *)a2 + 30);
  *(_BYTE *)(v3 + 62) = *((_BYTE *)a2 + 62);
  *(_BYTE *)(v3 + 63) = *((_BYTE *)a2 + 63);
}

uint64_t std::__variant_detail::__alt<3ul,SDPMediaFormatDTMFParams>::__alt[abi:ne180100]<SDPMediaFormatDTMFParams const&>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = off_1E78ED0A8;
  v4 = (std::string *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 32);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_QWORD *)a1 = off_1E78B8518;
  return a1;
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<isOpenOffer(SDPMediaFormatInfo &)::$_0,isOpenOffer(SDPMediaFormatInfo &)::$_1,isOpenOffer(SDPMediaFormatInfo &)::$_2,isOpenOffer(SDPMediaFormatInfo &)::$_3,isOpenOffer(SDPMediaFormatInfo &)::$_4,isOpenOffer(SDPMediaFormatInfo &)::$_5,isOpenOffer(SDPMediaFormatInfo &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<isOpenOffer(SDPMediaFormatInfo &)::$_0,isOpenOffer(SDPMediaFormatInfo &)::$_1,isOpenOffer(SDPMediaFormatInfo &)::$_2,isOpenOffer(SDPMediaFormatInfo &)::$_3,isOpenOffer(SDPMediaFormatInfo &)::$_4,isOpenOffer(SDPMediaFormatInfo &)::$_5,isOpenOffer(SDPMediaFormatInfo &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<isOpenOffer(SDPMediaFormatInfo &)::$_0,isOpenOffer(SDPMediaFormatInfo &)::$_1,isOpenOffer(SDPMediaFormatInfo &)::$_2,isOpenOffer(SDPMediaFormatInfo &)::$_3,isOpenOffer(SDPMediaFormatInfo &)::$_4,isOpenOffer(SDPMediaFormatInfo &)::$_5,isOpenOffer(SDPMediaFormatInfo &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<isOpenOffer(SDPMediaFormatInfo &)::$_0,isOpenOffer(SDPMediaFormatInfo &)::$_1,isOpenOffer(SDPMediaFormatInfo &)::$_2,isOpenOffer(SDPMediaFormatInfo &)::$_3,isOpenOffer(SDPMediaFormatInfo &)::$_4,isOpenOffer(SDPMediaFormatInfo &)::$_5,isOpenOffer(SDPMediaFormatInfo &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<isOpenOffer(SDPMediaFormatInfo &)::$_0,isOpenOffer(SDPMediaFormatInfo &)::$_1,isOpenOffer(SDPMediaFormatInfo &)::$_2,isOpenOffer(SDPMediaFormatInfo &)::$_3,isOpenOffer(SDPMediaFormatInfo &)::$_4,isOpenOffer(SDPMediaFormatInfo &)::$_5,isOpenOffer(SDPMediaFormatInfo &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<isOpenOffer(SDPMediaFormatInfo &)::$_0,isOpenOffer(SDPMediaFormatInfo &)::$_1,isOpenOffer(SDPMediaFormatInfo &)::$_2,isOpenOffer(SDPMediaFormatInfo &)::$_3,isOpenOffer(SDPMediaFormatInfo &)::$_4,isOpenOffer(SDPMediaFormatInfo &)::$_5,isOpenOffer(SDPMediaFormatInfo &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
}

uint64_t std::map<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>::map[abi:ne180100](uint64_t a1, __int128 *a2, uint64_t a3)
{
  _QWORD *v4;
  __int128 *v5;
  _QWORD *v6;
  __int128 *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  uint64_t *v12;
  std::string *v13;
  __int128 v14;
  _QWORD *v16;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = &a2[2 * a3];
    while (1)
    {
      v16 = 0;
      if (*(_QWORD **)a1 == v4)
      {
        v9 = v4;
        if (v6)
          goto LABEL_11;
      }
      else
      {
        v8 = v4;
        if (v6)
        {
          do
          {
            v9 = v6;
            v6 = (_QWORD *)v6[1];
          }
          while (v6);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v8[2];
            v10 = *v9 == (_QWORD)v8;
            v8 = v9;
          }
          while (v10);
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9 + 4, (void **)v5) & 0x80) == 0)
        {
          v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v16, (void **)v5);
          goto LABEL_12;
        }
        if (*v4)
        {
LABEL_11:
          v16 = v9;
          v11 = (uint64_t **)(v9 + 1);
LABEL_12:
          if (*v11)
            goto LABEL_20;
          goto LABEL_16;
        }
      }
      v16 = v4;
      v11 = (uint64_t **)v4;
LABEL_16:
      v12 = (uint64_t *)operator new(0x40uLL);
      v13 = (std::string *)(v12 + 4);
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v14 = *v5;
        v12[6] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      v12[7] = *((_QWORD *)v5 + 3);
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v12);
LABEL_20:
      v5 += 2;
      if (v5 == v7)
        return a1;
      v6 = (_QWORD *)*v4;
    }
  }
  return a1;
}

void sub_1BEECF0C4(_Unwind_Exception *a1)
{
  void *v1;
  char **v2;

  operator delete(v1);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  __int128 *v8;
  std::string *v9;
  __int128 v10;
  uint64_t v12;

  v12 = 0;
  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v8 = *a3;
    v6 = (uint64_t *)operator new(0x40uLL);
    v9 = (std::string *)(v6 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v10 = *v8;
      v6[6] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, v12, v7, v6);
  }
  return v6;
}

void sub_1BEECF188(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::destroy(void **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::destroy(a1[1]);
    SDPMediaAudioSettings::~SDPMediaAudioSettings(a1 + 5);
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(uint64_t **a1, unsigned __int16 a2, _WORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unsigned int v9;
  char *v10;
  _QWORD v12[3];

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int16 *)v5 + 16);
        if (v9 <= a2)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v12[2] = 1;
    v10 = (char *)operator new(0x1D8uLL);
    v12[1] = v6;
    *((_WORD *)v10 + 16) = *a3;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 184) = 0u;
    *(_OWORD *)(v10 + 200) = 0u;
    *(_OWORD *)(v10 + 216) = 0u;
    *(_OWORD *)(v10 + 232) = 0u;
    *(_OWORD *)(v10 + 248) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 296) = 0u;
    *(_OWORD *)(v10 + 312) = 0u;
    *(_OWORD *)(v10 + 328) = 0u;
    *(_OWORD *)(v10 + 344) = 0u;
    *(_OWORD *)(v10 + 360) = 0u;
    *(_OWORD *)(v10 + 376) = 0u;
    *(_OWORD *)(v10 + 392) = 0u;
    *(_OWORD *)(v10 + 408) = 0u;
    *(_OWORD *)(v10 + 424) = 0u;
    *(_OWORD *)(v10 + 440) = 0u;
    *(_OWORD *)(v10 + 456) = 0u;
    *(_OWORD *)(v10 + 264) = 0u;
    *(_OWORD *)(v10 + 280) = 0u;
    SDPMediaAudioSettings::SDPMediaAudioSettings((SDPMediaAudioSettings *)(v10 + 40));
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,SDPMediaAudioSettings>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,SDPMediaAudioSettings>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void SDPMediaAudioSettings::SDPMediaAudioSettings(SDPMediaAudioSettings *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0xFF00FF00000000;
  *((_WORD *)this + 16) = 0;
  *(_QWORD *)((char *)this + 36) = 0x100000001;
  *((_BYTE *)this + 184) = 0;
  *((_BYTE *)this + 192) = 0;
  *((_BYTE *)this + 272) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 89) = 0u;
  *(_QWORD *)this = &off_1E78B97D0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0x1F401F4000FF00FFLL;
  *((_DWORD *)this + 78) = 15728660;
  *((_BYTE *)this + 316) = 0;
  *((_QWORD *)this + 40) = &off_1E78B9808;
  *((_BYTE *)this + 328) = 0;
  *(_QWORD *)((char *)this + 330) = 0x2000000000000;
  *((_WORD *)this + 169) = 2;
  *(_QWORD *)((char *)this + 340) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *(_QWORD *)((char *)this + 373) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_OWORD *)this + 24) = xmmword_1BF29C680;
  *((_WORD *)this + 200) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 131074;
  *((_WORD *)this + 212) = 0;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,SDPMediaAudioSettings>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,SDPMediaAudioSettings>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void **v1;

  v1 = *(void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      SDPMediaAudioSettings::~SDPMediaAudioSettings(v1 + 5);
    operator delete(v1);
  }
}

uint64_t _GLOBAL__sub_I_SDPAudioSettingsBuilder_cpp()
{
  uint64_t i;
  uint64_t j;
  __int128 v3;
  uint64_t (*v4)(SDPAudioSettingsBuilder *, SDPMediaAudioSettings *, SDPMediaFormatInfo *, SDPMediaFormatInfo *, ImsPrefs *, const ImsPrefs *);
  _QWORD v5[3];
  void *v6;
  _QWORD v7[3];
  void *v8;
  _QWORD v9[3];
  uint64_t (*v10)(_WORD *, uint64_t, uint64_t);
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v3, "EVS");
  v4 = SDPAudioSettingsBuilder::RemoteEVSOfferMatchHandler;
  std::string::basic_string[abi:ne180100]<0>(v5, "AMR");
  v6 = SDPAudioSettingsBuilder::RemoteAMROfferMatchHandler;
  std::string::basic_string[abi:ne180100]<0>(v7, "AMR-WB");
  v8 = SDPAudioSettingsBuilder::RemoteAMRWBOfferMatchHandler;
  std::string::basic_string[abi:ne180100]<0>(v9, "telephone-event");
  v10 = SDPAudioSettingsBuilder::RemoteDTMFOfferMatchHandler;
  std::map<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>::map[abi:ne180100]((uint64_t)&_MergedGlobals_4, &v3, 4);
  for (i = 0; i != -16; i -= 4)
  {
    if (SHIBYTE(v9[i + 2]) < 0)
      operator delete((void *)v9[i]);
  }
  __cxa_atexit((void (*)(void *))std::map<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>::~map[abi:ne180100], &_MergedGlobals_4, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "EVS");
  v4 = SDPAudioSettingsBuilder::RemoteEVSAnswerMatchHandler;
  std::string::basic_string[abi:ne180100]<0>(v5, "AMR");
  v6 = SDPAudioSettingsBuilder::RemoteAMRAnswerMatchHandler;
  std::string::basic_string[abi:ne180100]<0>(v7, "AMR-WB");
  v8 = SDPAudioSettingsBuilder::RemoteAMRWBAnswerMatchHandler;
  std::string::basic_string[abi:ne180100]<0>(v9, "telephone-event");
  v10 = SDPAudioSettingsBuilder::RemoteDTMFAnswerMatchHandler;
  std::map<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>::map[abi:ne180100]((uint64_t)&unk_1ED70E9C8, &v3, 4);
  for (j = 0; j != -16; j -= 4)
  {
    if (SHIBYTE(v9[j + 2]) < 0)
      operator delete((void *)v9[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>::~map[abi:ne180100], &unk_1ED70E9C8, &dword_1BEDF4000);
}

void sub_1BEECF618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 119) < 0)
      operator delete(*(void **)(v10 + v12 + 96));
    v12 -= 32;
    if (v12 == -128)
      _Unwind_Resume(exception_object);
  }
}

void XcapCallWaitingManager::fetchCallWaiting(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[5];
  _OWORD v6[2];
  uint64_t v7;

  v7 = 0;
  memset(v6, 0, sizeof(v6));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v6);
  XcapNodeSelector::appendNode((uint64_t **)v6, (const std::string *)"communication-waiting", (unsigned __int8 *)&XcapNs::kNsSs);
  v4 = operator new();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN22XcapCallWaitingManager16fetchCallWaitingEU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke;
  v5[3] = &unk_1E78C0FA8;
  v5[4] = a2;
  XcapRequest::XcapRequest(v4, 1, (XcapRequest *)v6, v5);
  (***(void (****)(_QWORD, uint64_t))(a1 + 368))(*(_QWORD *)(a1 + 368), v4);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)v6);
}

void sub_1BEECF7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3B87100](v7, 0x10B2C409DA9FE99);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)va);
  _Unwind_Resume(a1);
}

void ___ZN22XcapCallWaitingManager16fetchCallWaitingEU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, uint64_t a2, bambi::XmlParser *a3)
{
  uint64_t v6;
  bambi::XmlParserItem *v7;
  uint64_t v8;
  _BYTE v9[72];
  _OWORD v10[5];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  XcapDocumentCommWaiting::XcapDocumentCommWaiting((XcapDocumentCommWaiting *)v10);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16)) & 1) == 0)bambi::XmlParser::parseXml(a3, (uint64_t)v10, v6, v7);
  v8 = *(_QWORD *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v9, (const ImsResult *)a2);
  (*(void (**)(uint64_t, _BYTE *, _OWORD *))(v8 + 16))(v8, v9, v10);
  ImsResult::~ImsResult((ImsResult *)v9);
  bambi::XmlTreeItem::~XmlTreeItem((void **)v10 + 1);
}

void sub_1BEECF894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  ImsResult::~ImsResult((ImsResult *)va);
  bambi::XmlTreeItem::~XmlTreeItem((void **)va1);
  _Unwind_Resume(a1);
}

void XcapCallWaitingManager::setCallWaiting(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t v7;
  _QWORD v8[5];
  std::string v9;
  std::string __p;
  _OWORD v11[5];
  uint64_t v12;
  _BYTE v13[32];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v13);
  XcapNodeSelector::appendNode(v6, (const std::string *)"communication-waiting", (unsigned __int8 *)&XcapNs::kNsSs);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  XcapDocumentCommWaiting::XcapDocumentCommWaiting((XcapDocumentCommWaiting *)v11);
  LOBYTE(v12) = a2;
  memset(&__p, 0, sizeof(__p));
  bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)((char *)v11 + 8), 1, 0, &__p);
  v7 = operator new();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v9 = __p;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN22XcapCallWaitingManager14setCallWaitingEbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke;
  v8[3] = &unk_1E78C0FD0;
  v8[4] = a3;
  XcapRequest::XcapRequest(v7, 1, (XcapRequest *)v13, &v9, v8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  (***(void (****)(_QWORD, uint64_t))(a1 + 368))(*(_QWORD *)(a1 + 368), v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  bambi::XmlTreeItem::~XmlTreeItem((void **)v11 + 1);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)v13);
}

void sub_1BEECFA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void **v26;
  uint64_t v27;
  uint64_t v28;

  MEMORY[0x1C3B87100](v27, 0x10B2C409DA9FE99);
  if (a26 < 0)
    operator delete(__p);
  bambi::XmlTreeItem::~XmlTreeItem(v26);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)(v28 - 96));
  _Unwind_Resume(a1);
}

void ___ZN22XcapCallWaitingManager14setCallWaitingEbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const ImsResult *a2)
{
  uint64_t v2;
  _BYTE v3[72];

  v2 = *(_QWORD *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, _BYTE *, _QWORD))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1BEECFAF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void XcapCallWaitingManager::~XcapCallWaitingManager(void **this)
{
  *this = &off_1E78C1018;
  XcapConfig::~XcapConfig(this + 1);
}

{
  *this = &off_1E78C1018;
  XcapConfig::~XcapConfig(this + 1);
  JUMPOUT(0x1C3B87100);
}

void XcapDocumentManagerBase::~XcapDocumentManagerBase(void **this)
{
  *this = &off_1E78C1018;
  XcapConfig::~XcapConfig(this + 1);
}

{
  *this = &off_1E78C1018;
  XcapConfig::~XcapConfig(this + 1);
  JUMPOUT(0x1C3B87100);
}

void XcapConfig::~XcapConfig(void **this)
{
  void **v2;

  if (*((char *)this + 351) < 0)
    operator delete(this[41]);
  v2 = this + 37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  v2 = this + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t SipPCellularNetworkInfoHeader::setAccessNetworkInfo(SipPCellularNetworkInfoHeader *this, std::string *a2, uint64_t a3, char a4)
{
  BOOL v8;
  BOOL v9;
  ImsInternetDateTime *v10;
  uint64_t v11;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16[2];
  char v17;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v8 = SipPAccessNetworkInfoHeader::setAccessNetworkInfo((uint64_t)this, a2, (uint64_t)&__p, 0);
  v9 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v9)
      return 0;
  }
  else if (!v8)
  {
    return 0;
  }
  *((_QWORD *)this + 17) = a2[2].__r_.__value_.__l.__size_;
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 52) = 0;
  gmtime_r((const time_t *)this + 17, (tm *)((char *)this + 152));
  *((_QWORD *)this + 27) = a3;
  v10 = (SipPCellularNetworkInfoHeader *)((char *)this + 216);
  *((_DWORD *)this + 56) = 0;
  *((_DWORD *)this + 72) = 0;
  gmtime_r((const time_t *)this + 27, (tm *)((char *)this + 232));
  if (!*((_QWORD *)this + 17) && (a4 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "default");
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Not setting P-CNI header with invalid timestamp", 47);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v17 < 0)
      operator delete(v16[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  ImsInternetDateTime::toString((SipPCellularNetworkInfoHeader *)((char *)this + 136), &__p);
  v13 = (uint64_t **)((char *)this + 72);
  v16[0] = "cell-time";
  v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (void **)"cell-time", (uint64_t)&std::piecewise_construct, (__int128 **)v16);
  std::string::operator=((std::string *)(v14 + 7), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ImsInternetDateTime::toString(v10, &__p);
  v16[0] = "reg-time";
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (void **)"reg-time", (uint64_t)&std::piecewise_construct, (__int128 **)v16);
  std::string::operator=((std::string *)(v15 + 7), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BEECFEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipPCellularNetworkInfoHeader::~SipPCellularNetworkInfoHeader(void **this)
{
  *this = off_1E78C5CF8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78C5CF8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipPCellularNetworkInfoHeader::clone(SipPCellularNetworkInfoHeader *this)
{
  uint64_t v2;

  v2 = operator new();
  SipStringParameterHeader::SipStringParameterHeader((SipStringParameterHeader *)v2, this);
  *(_DWORD *)(v2 + 128) = 2;
  *(_QWORD *)v2 = off_1E78C1048;
  *(_OWORD *)(v2 + 152) = *(_OWORD *)((char *)this + 152);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)((char *)this + 168);
  *(_OWORD *)(v2 + 184) = *(_OWORD *)((char *)this + 184);
  *(_OWORD *)(v2 + 196) = *(_OWORD *)((char *)this + 196);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)((char *)this + 136);
  *(_OWORD *)(v2 + 232) = *(_OWORD *)((char *)this + 232);
  *(_OWORD *)(v2 + 248) = *(_OWORD *)((char *)this + 248);
  *(_OWORD *)(v2 + 216) = *(_OWORD *)((char *)this + 216);
  *(_OWORD *)(v2 + 264) = *(_OWORD *)((char *)this + 264);
  *(_OWORD *)(v2 + 276) = *(_OWORD *)((char *)this + 276);
  return v2;
}

void sub_1BEED00AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4032491B5CLL);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaTitle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  std::string::operator=((std::string *)(a2 + 64), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BEED013C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseMediaConnection(char *a1, SDPMedia *a2, const std::string *a3)
{
  _QWORD v5[5];
  char v6;

  SDPParser::parseConnectionHelper(a3, a1, (uint64_t)v5);
  SDPMedia::addSDPConnection(a2, (const SDPConnection *)v5);
  v5[0] = off_1E78D19C0;
  if (v6 < 0)
    operator delete((void *)v5[3]);
  return 1;
}

void sub_1BEED01B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SDPParser::parseMediaBandwidth(int a1, uint64_t a2, std::string *this)
{
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::string::size_type size;
  char *v10;
  int v11;
  unsigned __int8 *v12;
  std::string *v13;
  uint64_t v14;
  void *v15;
  std::string *v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  uint64_t v20;
  std::string v22;
  std::string v23;
  char v24;

  v5 = std::string::find(this, 58, 0);
  if (v5 != -1)
  {
    memset(&v23, 0, sizeof(v23));
    std::string::basic_string(&v23, this, 0, v5, (std::allocator<char> *)&v22);
    memset(&v22, 0, sizeof(v22));
    std::string::basic_string(&v22, this, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v24);
    v6 = 0;
    v7 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    v8 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    do
    {
      v10 = (char *)&SDPBandwidth::bwTypeLookup + 24 * v6;
      v11 = v10[23];
      if (size == (v11 & ~(v11 >> 31)))
      {
        if (v11 >= 0)
          v12 = (unsigned __int8 *)&SDPBandwidth::bwTypeLookup + 24 * v6;
        else
          v12 = *(unsigned __int8 **)v10;
        if ((v7 & 0x80) != 0)
        {
          if (!memcmp((const void *)v8, v12, *((size_t *)&v8 + 1)))
            goto LABEL_18;
        }
        else
        {
          if (!(_DWORD)v7)
            goto LABEL_18;
          v13 = &v23;
          v14 = v7;
          while (v13->__r_.__value_.__s.__data_[0] == *v12)
          {
            v13 = (std::string *)((char *)v13 + 1);
            ++v12;
            if (!--v14)
              goto LABEL_18;
          }
        }
      }
      ++v6;
    }
    while (v6 != 6);
    LODWORD(v6) = 0;
LABEL_18:
    v15 = (void *)v22.__r_.__value_.__r.__words[0];
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v22;
    else
      v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
    v17 = atoll((const char *)v16);
    v18 = operator new(0x38uLL);
    v18[24] = 1;
    *((_DWORD *)v18 + 7) = v6;
    v18[32] = v17 != 0;
    *((_QWORD *)v18 + 5) = v17;
    *((_DWORD *)v18 + 12) = 2;
    *((_WORD *)v18 + 26) = 5;
    v20 = *(_QWORD *)(a2 + 112);
    v19 = (_QWORD *)(a2 + 112);
    *((_QWORD *)v18 + 1) = v19;
    *((_QWORD *)v18 + 2) = &off_1E78BFAB0;
    *(_QWORD *)v18 = v20;
    *(_QWORD *)(v20 + 8) = v18;
    *v19 = v18;
    ++v19[2];
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  return v5 != -1;
}

void sub_1BEED03BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  int v19;

  if (v19 < 0)
    operator delete(v18);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseMediaEncryptionKey()
{
  uint64_t v0;
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(v4, "sdp.parse");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v0 = ImsLogger::error(ims::_logger, (uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v0 + 8), (uint64_t)"SDP_MEDIA_ENCRYPTION_KEY_TAG NOT IMPLEMENTED", 44);
  *(_BYTE *)(v0 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v0 + 64))(v0, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v0 + 17) = 0;
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
  return 1;
}

void sub_1BEED04B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseMediaAttribute(int a1, uint64_t a2, std::string *this)
{
  std::string::size_type v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  std::string *v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::string __p;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  uint64_t v23;

  v5 = std::string::find(this, 58, 0);
  memset(&v22, 0, sizeof(v22));
  std::string::basic_string(&v22, this, 0, v5, (std::allocator<char> *)&v20);
  memset(&v21, 0, sizeof(v21));
  if (v5 != -1)
  {
    std::string::basic_string(&v20, this, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
    v21 = v20;
  }
  v6 = qword_1ED70CD50;
  if (!qword_1ED70CD50)
    goto LABEL_16;
  v7 = &qword_1ED70CD50;
  do
  {
    v8 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v6 + 32), (void **)&v22.__r_.__value_.__l.__data_);
    if (v8 >= 0)
      v9 = (uint64_t *)v6;
    else
      v9 = (uint64_t *)(v6 + 8);
    if (v8 >= 0)
      v7 = (uint64_t *)v6;
    v6 = *v9;
  }
  while (*v9);
  if (v7 == &qword_1ED70CD50
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v22, (void **)v7 + 4) & 0x80) != 0)
  {
LABEL_16:
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v19, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    else
      v19 = v22;
    v13 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
    else
      __p = v21;
    SDPUnsupportedAttribute::SDPUnsupportedAttribute((uint64_t)&v20, (uint64_t)&v19, (__int128 *)&__p);
    v14 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPUnsupportedAttribute>(a2 + 136, 0, 0, (uint64_t)&v20);
    v14[1] = a2 + 136;
    v15 = *(_QWORD *)(a2 + 136);
    *v14 = v15;
    *(_QWORD *)(v15 + 8) = v14;
    *(_QWORD *)(a2 + 136) = v14;
    ++*(_QWORD *)(a2 + 152);
    SDPUnsupportedAttribute::~SDPUnsupportedAttribute((void **)&v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    v16 = 1;
    if (v13 < 0)
      goto LABEL_27;
  }
  else
  {
    v23 = 0;
    v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&SDPParser::mediaAttributeParsers, &v23, (void **)&v22.__r_.__value_.__l.__data_);
    v11 = *v10;
    if (!*v10)
    {
      v20.__r_.__value_.__r.__words[2] = 0;
      v11 = (uint64_t *)operator new(0x40uLL);
      v20.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_1ED70CD50;
      v20.__r_.__value_.__s.__data_[16] = 0;
      v12 = (std::string *)(v11 + 4);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v12, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
        v11[6] = v22.__r_.__value_.__r.__words[2];
      }
      v11[7] = 0;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::mediaAttributeParsers, v23, v10, v11);
    }
    v16 = ((uint64_t (*)(uint64_t, std::string *))v11[7])(a2, &v21);
    if ((*((_BYTE *)&v21.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_27:
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v16;
}

void sub_1BEED0764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  void **v23;
  uint64_t v24;
  uint64_t v25;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v24, v23);
  if (*(char *)(v25 - 73) < 0)
    operator delete(*(void **)(v25 - 96));
  if (*(char *)(v25 - 41) < 0)
    operator delete(*(void **)(v25 - 64));
  _Unwind_Resume(a1);
}

uint64_t LazuliMessage::LazuliMessage(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1E78C1100;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_QWORD *)(a1 + 72) = a3;
  v4 = (std::string *)(a1 + 80);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  return a1;
}

void sub_1BEED0884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;

  v12 = v11;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v10 + 32);
  a10 = v12;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<LazuliHeader>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

void LazuliMessage::~LazuliMessage(void **this)
{
  void **v2;

  *this = off_1E78C1100;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)(this + 4));
  v2 = this + 1;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t *LazuliMessage::addHeader(uint64_t a1, __int128 *a2, uint64_t *a3, int a4)
{
  unsigned __int8 *v7;
  char **v8;
  __int128 *v10;

  v10 = a2;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 32, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v10);
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)v7 + 5, a3);
  v8 = (char **)(a1 + 8);
  if (a4)
    return std::vector<std::shared_ptr<LazuliHeader>>::insert(v8, (uint64_t *)*v8, a3);
  else
    return (uint64_t *)std::vector<std::shared_ptr<LazuliHeader>>::emplace_back<std::shared_ptr<LazuliHeader>&>(v8, (__int128 *)a3);
}

uint64_t *std::vector<std::shared_ptr<LazuliHeader>>::insert(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  int64x2_t v38;
  char *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t *v49;
  uint64_t *v50;
  char *v51;
  char *v53;
  __int128 v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  int64x2_t v58;
  char *v59;
  uint64_t v60;

  v3 = a3;
  v6 = (uint64_t *)*a1;
  v5 = a1[1];
  v7 = (uint64_t)a2 - *a1;
  v8 = (uint64_t *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  v10 = (uint64_t)(a1 + 2);
  v9 = a1[2];
  if (v5 >= v9)
  {
    v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
    if (v18 >> 60)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v20 = v7 >> 4;
    v21 = v9 - (_QWORD)v6;
    if (v21 >> 3 > v18)
      v18 = v21 >> 3;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
      v22 = 0xFFFFFFFFFFFFFFFLL;
    else
      v22 = v18;
    v56 = a1 + 2;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)(a1 + 2), v22);
    else
      v23 = 0;
    v27 = (uint64_t *)&v23[16 * v20];
    v53 = v23;
    *(_QWORD *)&v54 = v27;
    *((_QWORD *)&v54 + 1) = v27;
    v55 = &v23[16 * v22];
    if (v20 == v22)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v29 = 1;
        else
          v29 = v7 >> 3;
        v60 = v10;
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(v10, v29);
        v32 = v54;
        v33 = *((_QWORD *)&v54 + 1) - v54;
        if (*((_QWORD *)&v54 + 1) == (_QWORD)v54)
        {
          v38 = vdupq_n_s64(v54);
          v35 = (unint64_t)&v30[16 * (v29 >> 2)];
        }
        else
        {
          v34 = v33 >> 4;
          v35 = (unint64_t)&v30[16 * (v29 >> 2) + (v33 & 0xFFFFFFFFFFFFFFF0)];
          v36 = 16 * v34;
          v37 = &v30[16 * (v29 >> 2)];
          do
          {
            *(_OWORD *)v37 = *(_OWORD *)v32;
            v37 += 16;
            *(_QWORD *)v32 = 0;
            *(_QWORD *)(v32 + 8) = 0;
            v32 += 16;
            v36 -= 16;
          }
          while (v36);
          v38 = (int64x2_t)v54;
        }
        v39 = v55;
        v57 = v53;
        v53 = v30;
        *(_QWORD *)&v54 = &v30[16 * (v29 >> 2)];
        v58 = v38;
        *((_QWORD *)&v54 + 1) = v35;
        v55 = &v30[16 * v31];
        v59 = v39;
        std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)&v57);
        v27 = (uint64_t *)*((_QWORD *)&v54 + 1);
      }
      else
      {
        v28 = v20 + 2;
        if (v20 >= -1)
          v28 = v20 + 1;
        v27 -= 2 * (v28 >> 1);
        *(_QWORD *)&v54 = v27;
        *((_QWORD *)&v54 + 1) = v27;
      }
    }
    *v27 = *v3;
    v40 = v3[1];
    v27[1] = v40;
    if (v40)
    {
      v41 = (unint64_t *)(v40 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      v27 = (uint64_t *)*((_QWORD *)&v54 + 1);
    }
    v43 = v27 + 2;
    *((_QWORD *)&v54 + 1) = v43;
    v44 = v54;
    v45 = (uint64_t *)*a1;
    if ((uint64_t *)*a1 == v8)
    {
      v47 = v54;
    }
    else
    {
      v46 = v8;
      v47 = v54;
      do
      {
        v48 = *((_OWORD *)v46 - 1);
        v46 -= 2;
        *(_OWORD *)(v47 - 16) = v48;
        v47 -= 16;
        *v46 = 0;
        v46[1] = 0;
      }
      while (v46 != v45);
      v43 = (_OWORD *)*((_QWORD *)&v54 + 1);
    }
    *(_QWORD *)&v54 = v47;
    v49 = (uint64_t *)a1[1];
    if (v49 != v8)
    {
      do
      {
        *v43++ = *(_OWORD *)v8;
        *v8 = 0;
        v8[1] = 0;
        v8 += 2;
      }
      while (v8 != v49);
      v47 = v54;
      v8 = (uint64_t *)a1[1];
    }
    v50 = (uint64_t *)*a1;
    *a1 = v47;
    a1[1] = v43;
    v51 = (char *)a1[2];
    a1[2] = v55;
    *((_QWORD *)&v54 + 1) = v8;
    v55 = v51;
    v53 = (char *)v50;
    *(_QWORD *)&v54 = v50;
    std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)&v53);
    return (uint64_t *)v44;
  }
  else if (v8 == (uint64_t *)v5)
  {
    v24 = *(_OWORD *)a3;
    *(_OWORD *)v8 = *(_OWORD *)a3;
    if (*((_QWORD *)&v24 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    a1[1] = v8 + 2;
  }
  else
  {
    v11 = (uint64_t *)(v5 - 16);
    v12 = (_OWORD *)a1[1];
    if (v5 >= 0x10)
    {
      v13 = v5 - 16;
      v12 = (_OWORD *)a1[1];
      do
      {
        *v12++ = *(_OWORD *)v13;
        *(_QWORD *)v13 = 0;
        *(_QWORD *)(v13 + 8) = 0;
        v13 += 16;
      }
      while (v13 < v5);
    }
    a1[1] = v12;
    if ((uint64_t *)v5 != v8 + 2)
    {
      do
      {
        v14 = *((_OWORD *)v11 - 1);
        v11 -= 2;
        *v11 = 0;
        v11[1] = 0;
        v15 = *(std::__shared_weak_count **)(v5 - 8);
        *(_OWORD *)(v5 - 16) = v14;
        v5 -= 16;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      while (v11 != v8);
    }
    if (v8 <= v3)
      v3 += 2 * (a1[1] > (unint64_t)v3);
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](v8, v3);
  }
  return v8;
}

void sub_1BEED0E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<LazuliHeader>>::emplace_back<std::shared_ptr<LazuliHeader>&>(char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v32 = v4;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v30 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v31 = v27;
    v29 = v26.i64[0];
    std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)&v29);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return v11 - 16;
}

void LazuliMessage::messageId(LazuliMessage *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 4, "Message-ID");
  if (!v3)
  {
    v6 = 0;
    goto LABEL_9;
  }
  v4 = v3;
  v5 = *((_QWORD *)v3 + 5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v5)
  {
LABEL_9:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (!v6)
      return;
    goto LABEL_10;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, a2);
  if (!v6)
    return;
LABEL_10:
  v9 = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1BEED103C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t LazuliMessage::isChunk(LazuliMessage *this)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  const void *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 4, "Byte-Range");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = (const void *)*((_QWORD *)v1 + 5);
  v4 = *((_QWORD *)v2 + 6);
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (v3
  {
    v8 = v7;
    if (!v4)
    {
      v11 = 0;
      goto LABEL_23;
    }
    v9 = (unint64_t *)(v4 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = (std::__shared_weak_count *)v4;
  }
  else
  {
    if (!v4)
      return v4;
    v8 = 0;
    v11 = 0;
  }
  v12 = (unint64_t *)(v4 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    if (!v8)
      goto LABEL_20;
LABEL_23:
    if (v8[13] == 1)
    {
      v4 = v8[14] != v8[15];
      if (!v11)
        return v4;
    }
    else
    {
      v4 = 1;
      if (!v11)
        return v4;
    }
    goto LABEL_27;
  }
  if (v8)
    goto LABEL_23;
LABEL_20:
  v4 = 0;
  if (!v11)
    return v4;
LABEL_27:
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v4;
}

void LazuliMessage::encodeHeaders(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = *(uint64_t **)(a1 + 8);
  for (i = *(uint64_t **)(a1 + 16); v2 != i; v2 += 2)
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    v13 = *v2;
    v14 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 64))(v5, a2, 0);
    LoggableString::LoggableString((LoggableString *)__p, "\r\n");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, __p);
    if (v12 < 0)
    {
      operator delete(__p[0]);
      if (v6)
      {
LABEL_9:
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    else if (v6)
    {
      goto LABEL_9;
    }
  }
}

void sub_1BEED12AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t LazuliMessage::encode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  char v8;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  LazuliMessage::encodeHeaders(a1, a2);
  if (*(char *)(a1 + 127) < 0)
  {
    if (!*(_QWORD *)(a1 + 112))
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3);
  }
  else if (!*(_BYTE *)(a1 + 127))
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3);
  }
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1 + 104);
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3);
}

void sub_1BEED13DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void LazuliMessage::encodeBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *__p[2];
  char v6;

  if (*(char *)(a1 + 127) < 0)
  {
    if (!*(_QWORD *)(a1 + 112))
      return;
  }
  else if (!*(_BYTE *)(a1 + 127))
  {
    return;
  }
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  v4 = a1 + 104;
  if (v6 < 0)
    operator delete(__p[0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v4);
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1BEED14C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LazuliMessage::log(uint64_t a1, uint64_t a2)
{
  LazuliMessage::encode(a1, a2, 1);
  return a2;
}

void LazuliMessage::loggableName(LazuliMessage *this@<X0>, std::string *a2@<X8>)
{
  std::string __p;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)this + 48))(&__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEED1558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void LazuliMessage::transactionId(LazuliMessage *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 103) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 5);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10)
              v16 %= v10;
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13)
            break;
        }
      }
    }
  }
  else
  {
    v13 = 0;
  }
  memset(v26, 0, sizeof(v26));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v9, a4, v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1BEED182C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = operator new(0x38uLL);
  *a4 = v8;
  a4[1] = v7;
  *((_BYTE *)a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *((_BYTE *)a4 + 16) = 1;
}

void sub_1BEED18D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t SDPMediaAcceptTypes::SDPMediaAcceptTypes(uint64_t a1, __int128 **a2)
{
  void *__p[2];
  uint64_t v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "accept-types");
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78ED0A8;
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_QWORD *)a1 = &off_1E78C1170;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 40), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  return a1;
}

void sub_1BEED19B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void SDPMediaAcceptTypes::SDPMediaAcceptTypes(SDPMediaAcceptTypes *this, const SDPMediaAcceptTypes *a2)
{
  std::string __p;

  if (*((char *)a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  else
    __p = *(std::string *)((char *)a2 + 16);
  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = off_1E78ED0A8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)((char *)this + 16) = __p;
  }
  *(_QWORD *)this = &off_1E78C1170;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
}

void sub_1BEED1AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void SDPMediaAcceptTypes::~SDPMediaAcceptTypes(void **this)
{
  void **v2;

  *this = &off_1E78C1170;
  v2 = this + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  SDPMediaAcceptTypes::~SDPMediaAcceptTypes(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SDPMediaAcceptTypes::value@<X0>(SDPMediaAcceptTypes *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[4];
  void *__p[2];
  __int128 v17;
  __int128 v18;
  _OWORD v19[9];
  uint64_t v20;

  v20 = 0;
  v18 = 0u;
  memset(v19, 0, sizeof(v19));
  *(_OWORD *)__p = 0u;
  v17 = 0u;
  memset(v15, 0, sizeof(v15));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v4 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = v4 / 24;
    v8 = v7 - 1;
    if (v7 <= 1)
      v9 = 1;
    else
      v9 = v7;
    do
    {
      v10 = *((_QWORD *)this + 5) + v5;
      v11 = *(char *)(v10 + 23);
      if (v11 >= 0)
        v12 = *((_QWORD *)this + 5) + v5;
      else
        v12 = *(_QWORD *)v10;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(v10 + 23);
      else
        v13 = *(_QWORD *)(v10 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v12, v13);
      if (v6 < v8)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
      ++v6;
      v5 += 24;
    }
    while (v9 != v6);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15 + 8, a2);
  *(_QWORD *)&v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(*(_QWORD *)&v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v15[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v17) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v19);
}

void sub_1BEED1CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *SDPMediaAcceptTypes::key@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "accept-types");
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  char *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  void **v18;
  void **v19;
  void **v20;
  __int128 v21;
  void **v22;
  char v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  void *v29;

LABEL_1:
  v9 = a2 - 24;
  v10 = (void **)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2 - 3, v10) & 0x80) != 0)
        {
          v29 = v10[2];
          v27 = *(_OWORD *)v10;
          v25 = *(_OWORD *)v9;
          v10[2] = (void *)*((_QWORD *)a2 - 1);
          *(_OWORD *)v10 = v25;
          *(_OWORD *)v9 = v27;
          *((_QWORD *)a2 - 1) = v29;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, v10 + 3, (_QWORD *)a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v10, v10 + 3, v10 + 6, (_QWORD *)a2 - 3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v10, v10 + 3, v10 + 6, v10 + 9, (_QWORD *)a2 - 3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v10, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, a2);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&v10[3 * v15], v10, (_QWORD *)a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, &v10[3 * v15], (_QWORD *)a2 - 3);
            v17 = 3 * v15;
            v18 = &v10[3 * v15 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10 + 3, v18, (_QWORD *)a2 - 6);
            v19 = v10 + 6;
            v20 = &v10[v17 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v19, v20, (_QWORD *)a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v18, v16, v20);
            v28 = *(void **)(a1 + 16);
            v26 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(_QWORD *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            v16[2] = v28;
            *(_OWORD *)v16 = v26;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 - 24), (void **)a1) & 0x80) == 0)
          {
            v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((void **)a1, (unint64_t)a2);
            goto LABEL_16;
          }
LABEL_11:
          v22 = (void **)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((__int128 *)a1, a2);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v22);
          v10 = v22 + 3;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)(v22 + 3), (void **)a2))
          {
            v11 = v12 + 1;
            if (v24)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v22, a3, -v12, a5 & 1);
            v10 = v22 + 3;
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (char *)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if (v10 != (void **)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>((uint64_t)v10, a2, a2, a3);
        return;
    }
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((_QWORD *)a1 != a2)
  {
    v17 = v2;
    v18 = v3;
    v6 = (_QWORD *)(a1 + 24);
    if ((_QWORD *)(a1 + 24) != a2)
    {
      v7 = 0;
      v8 = (_QWORD *)a1;
      do
      {
        v9 = (void **)v8;
        v8 = v6;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, v9) & 0x80) != 0)
        {
          v15 = *(_OWORD *)v8;
          v16 = v8[2];
          v8[1] = 0;
          v8[2] = 0;
          *v8 = 0;
          v10 = v7;
          do
          {
            v11 = a1 + v10;
            v12 = (void **)(a1 + v10 + 24);
            if (*(char *)(a1 + v10 + 47) < 0)
              operator delete(*v12);
            *(_OWORD *)v12 = *(_OWORD *)v11;
            *(_QWORD *)(a1 + v10 + 40) = *(_QWORD *)(v11 + 16);
            *(_BYTE *)(v11 + 23) = 0;
            *(_BYTE *)v11 = 0;
            if (!v10)
            {
              v14 = a1;
              goto LABEL_13;
            }
            v10 -= 24;
          }
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v15, (void **)(v10 + a1)) & 0x80) != 0);
          v13 = *(char *)(a1 + v10 + 47);
          v14 = a1 + v10 + 24;
          if (v13 < 0)
            operator delete(*(void **)v14);
LABEL_13:
          *(_OWORD *)v14 = v15;
          *(_QWORD *)(v14 + 16) = v16;
        }
        v6 = v8 + 3;
        v7 += 24;
      }
      while (v8 + 3 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  _QWORD *v9;
  void **v10;
  char v11;
  int v12;
  void **v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v16 = v2;
    v17 = v3;
    v5 = a1;
    v6 = a1 + 3;
    if (a1 + 3 != a2)
    {
      v7 = a1 - 3;
      do
      {
        v8 = (void **)v5;
        v5 = v6;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, v8) & 0x80) != 0)
        {
          v14 = *(_OWORD *)v5;
          v15 = (void *)v5[2];
          v5[1] = 0;
          v5[2] = 0;
          *v5 = 0;
          v9 = v7;
          do
          {
            v10 = (void **)(v9 + 6);
            if (*((char *)v9 + 71) < 0)
              operator delete(*v10);
            *(_OWORD *)v10 = *(_OWORD *)(v9 + 3);
            v9[8] = v9[5];
            *((_BYTE *)v9 + 47) = 0;
            *((_BYTE *)v9 + 24) = 0;
            v11 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, (void **)v9);
            v9 -= 3;
          }
          while (v11 < 0);
          v12 = *((char *)v9 + 71);
          v13 = (void **)(v9 + 6);
          if (v12 < 0)
            operator delete(*v13);
          *(_OWORD *)v13 = v14;
          v13[2] = v15;
        }
        v6 = v5 + 3;
        v7 += 3;
      }
      while (v5 + 3 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(void **a1, void **a2, _QWORD *a3)
{
  char v6;
  int v7;
  void *v9;
  __int128 v10;
  void *v11;
  void *v12;
  __int128 v13;
  void *v14;
  void *v15;
  __int128 v16;
  void *v17;
  void *v18;
  __int128 v19;
  void *v20;
  void *v21;
  __int128 v22;
  void *v23;

  v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1);
  v7 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2);
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      v21 = a1[2];
      v22 = *(_OWORD *)a1;
      v23 = (void *)a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v23;
      *(_OWORD *)a3 = v22;
      a3[2] = v21;
    }
    else
    {
      v9 = a1[2];
      v10 = *(_OWORD *)a1;
      v11 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v11;
      *(_OWORD *)a2 = v10;
      a2[2] = v9;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2) & 0x80) != 0)
      {
        v12 = a2[2];
        v13 = *(_OWORD *)a2;
        v14 = (void *)a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v14;
        *(_OWORD *)a3 = v13;
        a3[2] = v12;
        return 2;
      }
    }
  }
  else
  {
    if ((v7 & 0x80000000) == 0)
      return 0;
    v15 = a2[2];
    v16 = *(_OWORD *)a2;
    v17 = (void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v17;
    *(_OWORD *)a3 = v16;
    a3[2] = v15;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1) & 0x80) != 0)
    {
      v18 = a1[2];
      v19 = *(_OWORD *)a1;
      v20 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v20;
      *(_OWORD *)a2 = v19;
      a2[2] = v18;
      return 2;
    }
  }
  return 1;
}

void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(void **a1, unint64_t a2)
{
  unint64_t v2;
  void **v4;
  void **v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  __int128 v12;
  __int128 v14;
  void *v15;
  __int128 v16;
  void *v17;

  v2 = a2;
  v14 = *(_OWORD *)a1;
  v15 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, (void **)(a2 - 24)) & 0x80) != 0)
  {
    v5 = a1;
    do
      v5 += 3;
    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, v5) & 0x80) == 0);
  }
  else
  {
    v4 = a1 + 3;
    do
    {
      v5 = v4;
      if ((unint64_t)v4 >= v2)
        break;
      v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, v4);
      v4 = v5 + 3;
    }
    while ((v6 & 0x80) == 0);
  }
  if ((unint64_t)v5 < v2)
  {
    do
      v2 -= 24;
    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, (void **)v2) & 0x80) != 0);
  }
  while ((unint64_t)v5 < v2)
  {
    v7 = *(_OWORD *)v5;
    v17 = v5[2];
    v16 = v7;
    v8 = *(_OWORD *)v2;
    v5[2] = *(void **)(v2 + 16);
    *(_OWORD *)v5 = v8;
    v9 = v16;
    *(_QWORD *)(v2 + 16) = v17;
    *(_OWORD *)v2 = v9;
    do
      v5 += 3;
    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, v5) & 0x80) == 0);
    do
      v2 -= 24;
    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, (void **)v2) & 0x80) != 0);
  }
  v10 = v5 - 3;
  if (v5 - 3 == a1)
  {
    if (*((char *)v5 - 1) < 0)
      operator delete(*a1);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*a1);
    v11 = *(_OWORD *)v10;
    a1[2] = *(v5 - 1);
    *(_OWORD *)a1 = v11;
    *((_BYTE *)v5 - 1) = 0;
    *((_BYTE *)v5 - 24) = 0;
  }
  v12 = v14;
  *(v5 - 1) = v15;
  *(_OWORD *)v10 = v12;
  return v5;
}

_QWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(__int128 *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v4 = 0;
  v15 = *a1;
  v16 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  do
    v4 += 24;
  while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__int128 *)((char *)a1 + v4), (void **)&v15) & 0x80) != 0);
  v5 = (unint64_t)a1 + v4;
  if (v4 == 24)
  {
    do
    {
      if (v5 >= (unint64_t)a2)
        break;
      a2 -= 3;
    }
    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)&v15) & 0x80) == 0);
  }
  else
  {
    do
      a2 -= 3;
    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)&v15) & 0x80) == 0);
  }
  if (v5 >= (unint64_t)a2)
  {
    v7 = (_QWORD *)((char *)a1 + v4);
  }
  else
  {
    v6 = a2;
    v7 = (_QWORD *)((char *)a1 + v4);
    do
    {
      v17 = *(_OWORD *)v7;
      v8 = v17;
      v18 = v7[2];
      v9 = v18;
      v10 = v6[2];
      *(_OWORD *)v7 = *(_OWORD *)v6;
      v7[2] = v10;
      v6[2] = v9;
      *(_OWORD *)v6 = v8;
      do
        v7 += 3;
      while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, (void **)&v15) & 0x80) != 0);
      do
        v6 -= 3;
      while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, (void **)&v15) & 0x80) == 0);
    }
    while (v7 < v6);
  }
  v11 = (__int128 *)(v7 - 3);
  if (v7 - 3 == (_QWORD *)a1)
  {
    if (*((char *)v7 - 1) < 0)
      operator delete(*(void **)a1);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v12 = *v11;
    *((_QWORD *)a1 + 2) = *(v7 - 1);
    *a1 = v12;
    *((_BYTE *)v7 - 1) = 0;
    *((_BYTE *)v7 - 24) = 0;
  }
  v13 = v15;
  *(v7 - 1) = v16;
  *v11 = v13;
  return v7 - 3;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, void **a2)
{
  unint64_t v4;
  _BOOL8 result;
  void **v6;
  void *v7;
  __int128 v8;
  void *v9;
  void **v10;
  void **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  void *v21;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2 - 3, (void **)a1) & 0x80) != 0)
      {
        v7 = *(void **)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = v6[2];
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_QWORD *)(a1 + 16) = v9;
        *(_OWORD *)v6 = v8;
        v6[2] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void **)a1, (void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (void **)(a1 + 24), (void **)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), a2 - 3);
      return 1;
    default:
      v10 = (void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void **)a1, (void **)(a1 + 24), (_QWORD *)(a1 + 48));
      v11 = (void **)(a1 + 72);
      if ((void **)(a1 + 72) == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10) & 0x80) != 0)
    {
      v20 = *(_OWORD *)v11;
      v21 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      v14 = v12;
      do
      {
        v15 = a1 + v14;
        v16 = (void **)(a1 + v14 + 72);
        if (*(char *)(a1 + v14 + 95) < 0)
          operator delete(*v16);
        *(_OWORD *)v16 = *(_OWORD *)(v15 + 48);
        *(_QWORD *)(a1 + v14 + 88) = *(_QWORD *)(v15 + 64);
        *(_BYTE *)(v15 + 71) = 0;
        *(_BYTE *)(v15 + 48) = 0;
        if (v14 == -48)
        {
          v19 = a1;
          goto LABEL_15;
        }
        v17 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v20, (void **)(a1 + v14 + 24));
        v14 -= 24;
      }
      while (v17 < 0);
      v18 = *(char *)(a1 + v14 + 95);
      v19 = a1 + v14 + 72;
      if (v18 < 0)
        operator delete(*(void **)v19);
LABEL_15:
      *(_OWORD *)v19 = v20;
      *(_QWORD *)(v19 + 16) = v21;
      if (++v13 == 8)
        return v11 + 3 == a2;
    }
    v10 = v11;
    v12 += 24;
    v11 += 3;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, void **a2, void **a3, _QWORD *a4)
{
  __n128 result;
  void *v9;
  __int128 v10;
  void *v11;
  void *v12;
  __int128 v13;
  void *v14;
  void *v15;
  void *v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void **)a1, a2, a3);
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a4, a3) & 0x80) != 0)
  {
    v9 = a3[2];
    v10 = *(_OWORD *)a3;
    v11 = (void *)a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2) & 0x80) != 0)
    {
      v12 = a2[2];
      v13 = *(_OWORD *)a2;
      v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)a1) & 0x80) != 0)
      {
        v15 = *(void **)(a1 + 16);
        result = *(__n128 *)a1;
        v16 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, void **a2, void **a3, void **a4, _QWORD *a5)
{
  __n128 result;
  void *v11;
  __int128 v12;
  void *v13;
  void *v14;
  __int128 v15;
  void *v16;
  void *v17;
  __int128 v18;
  void *v19;
  void *v20;
  void *v21;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4);
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, a4) & 0x80) != 0)
  {
    v11 = a4[2];
    v12 = *(_OWORD *)a4;
    v13 = (void *)a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a4, a3) & 0x80) != 0)
    {
      v14 = a3[2];
      v15 = *(_OWORD *)a3;
      v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2) & 0x80) != 0)
      {
        v17 = a2[2];
        v18 = *(_OWORD *)a2;
        v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)a1) & 0x80) != 0)
        {
          v20 = *(void **)(a1 + 16);
          result = *(__n128 *)a1;
          v21 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

_QWORD *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _BYTE v28[15];

  if ((_QWORD *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14, (void **)a1) & 0x80) != 0)
        {
          v15 = v14[2];
          v16 = *(_OWORD *)v14;
          v17 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)v14 = *(_OWORD *)a1;
          v14[2] = v17;
          *(_OWORD *)a1 = v16;
          *(_QWORD *)(a1 + 16) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      v19 = a2 - 3;
      do
      {
        v20 = *(_QWORD *)a1;
        *(_QWORD *)v28 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v28[7] = *(_QWORD *)(a1 + 15);
        v21 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v18);
        v23 = v22;
        v24 = *(char *)(v22 + 23);
        if (v19 == (_QWORD *)v22)
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          *(_QWORD *)v23 = v20;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)v28;
          *(_QWORD *)(v23 + 15) = *(_QWORD *)&v28[7];
          *(_BYTE *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          v25 = *(_OWORD *)v19;
          *(_QWORD *)(v23 + 16) = v19[2];
          *(_OWORD *)v23 = v25;
          *v19 = v20;
          v19[1] = *(_QWORD *)v28;
          *(_QWORD *)((char *)v19 + 15) = *(_QWORD *)&v28[7];
          *((_BYTE *)v19 + 23) = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        v19 -= 3;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1BEED2D14(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __n128 *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v21 = v4;
    v22 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v11 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v12 = a1 + 24 * v11;
      v13 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v13 < a3
        && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24 * v11), (void **)(v12 + 24)) & 0x80u) != 0)
      {
        v12 += 24;
        v11 = v13;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v12, (void **)v7) & 0x80) == 0)
      {
        v19 = *v7;
        v20 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          v15 = (__n128 *)v12;
          if (v7[1].n128_i8[7] < 0)
            operator delete((void *)v7->n128_u64[0]);
          v16 = *(__n128 *)v12;
          v7[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
          *v7 = v16;
          *(_BYTE *)(v12 + 23) = 0;
          *(_BYTE *)v12 = 0;
          if (v9 < v11)
            break;
          v17 = (2 * v11) | 1;
          v12 = a1 + 24 * v17;
          v18 = 2 * v11 + 2;
          if (v18 < a3
            && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24 * v17), (void **)(v12 + 24)) & 0x80u) != 0)
          {
            v12 += 24;
            v17 = v18;
          }
          v7 = v15;
          v11 = v17;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v12, (void **)&v19) & 0x80) != 0)
          {
            if (v15[1].n128_i8[7] < 0)
              operator delete((void *)v15->n128_u64[0]);
            break;
          }
        }
        result = v19;
        v15[1].n128_u64[0] = v20;
        *v15 = result;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1 + 24 * v5 + 24;
    v9 = 2 * v5;
    v5 = (2 * v5) | 1;
    v10 = v9 + 2;
    if (v9 + 2 < a3
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v8, (void **)(v8 + 24)) & 0x80u) != 0)
    {
      v8 += 24;
      v5 = v10;
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v11 = *(_OWORD *)v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 + 16);
    *(_OWORD *)a1 = v11;
    *(_BYTE *)(v8 + 23) = 0;
    *(_BYTE *)v8 = 0;
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  double result;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a4 >= 2)
  {
    v15 = v4;
    v16 = v5;
    v7 = (unint64_t)(a4 - 2) >> 1;
    v8 = (__int128 *)(a1 + 24 * v7);
    v9 = (__int128 *)(a2 - 24);
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (void **)(a2 - 24)) & 0x80) != 0)
    {
      v13 = *v9;
      v14 = *((_QWORD *)v9 + 2);
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *(_QWORD *)v9 = 0;
      while (1)
      {
        v11 = v8;
        if (*((char *)v9 + 23) < 0)
          operator delete(*(void **)v9);
        v12 = *v8;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v8 + 2);
        *v9 = v12;
        *((_BYTE *)v8 + 23) = 0;
        *(_BYTE *)v8 = 0;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (__int128 *)(a1 + 24 * v7);
        v9 = v11;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (void **)&v13) & 0x80) == 0)
        {
          if (*((char *)v11 + 23) < 0)
            operator delete(*(void **)v11);
          break;
        }
      }
      result = *(double *)&v13;
      *v11 = v13;
      *((_QWORD *)v11 + 2) = v14;
    }
  }
  return result;
}

void SipDialogManager::SipDialogManager(SipDialogManager *this, SipUserAgent *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string __p;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E78B7F60;
  *((_QWORD *)this + 1) = &off_1E78B81C8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.dlg");
  ImsLogContainer::ImsLogContainer((uint64_t)this + 16, &__p, (const std::string *)((char *)a2 + 56));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *(_QWORD *)this = &off_1E78C11C8;
  *((_QWORD *)this + 1) = &unk_1E78C1238;
  *((_QWORD *)this + 2) = &unk_1E78C1280;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 54) = 1065353216;
  *((_QWORD *)this + 28) = (char *)this + 232;
  *((_QWORD *)this + 30) = 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = SipRequest::kMethodAck;
  __p.__r_.__value_.__r.__words[2] = 0x300000000000000;
  v7 = SipRequest::kMethodBye;
  v8 = 0x300000000000000;
  v9 = *(_OWORD *)"CANCEL";
  v10 = 0x600000000000000;
  v12 = 0x400000000000000;
  v11 = *(_OWORD *)"INFO";
  v14 = 0x600000000000000;
  v13 = *(_OWORD *)"INVITE";
  v16 = 0x700000000000000;
  v15 = *(_OWORD *)"MESSAGE";
  v17 = *(_OWORD *)"NOTIFY";
  v18 = 0x600000000000000;
  v20 = 0x700000000000000;
  v19 = *(_OWORD *)"OPTIONS";
  v21 = *(_OWORD *)"PRACK";
  v22 = 0x500000000000000;
  v24 = 0x500000000000000;
  v23 = *(_OWORD *)"REFER";
  v26 = 0x600000000000000;
  v25 = *(_OWORD *)"UPDATE";
  do
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this + 28, (void **)((char *)&__p.__r_.__value_.__l.__data_ + v4), (uint64_t)&__p + v4);
    v4 += 24;
  }
  while (v4 != 264);
  v5 = 264;
  do
  {
    if (__p.__r_.__value_.__s.__data_[v5 - 1] < 0)
      operator delete(*(void **)((char *)&__p.__r_.__value_.__l + v5 - 24));
    v5 -= 24;
  }
  while (v5);
  *((_QWORD *)this + 17) = a2;
}

void sub_1BEED32D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipDialogManager::~SipDialogManager(SipDialogManager *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78C11C8;
  *((_QWORD *)this + 1) = &unk_1E78C1238;
  *((_QWORD *)this + 2) = &unk_1E78C1280;
  SipDialogManager::deinitialize(this);
  std::__tree<std::string>::destroy((uint64_t)this + 224, *((char **)this + 29));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)this + 184);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)this + 144);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *((_QWORD *)this + 2) = off_1E78CFE68;
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  SipDialogManager::~SipDialogManager(this);
  JUMPOUT(0x1C3B87100);
}

void SipDialogManager::deinitialize(SipDialogManager *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  std::string *v5;
  __int128 *v6;
  __int128 v7;
  uint64_t i;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  __int128 *v19;
  __int128 v20;
  std::string *j;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  std::string *v30;
  std::string *v31;
  unint64_t v32;
  SipDialog *v33[2];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  std::string *v37;
  unint64_t v38;

  v2 = (_QWORD *)((char *)this + 16);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"deinitializing bambi dialogs", 28);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v4 = (uint64_t *)v2[18];
  if (v4)
  {
    v5 = 0;
    do
    {
      v6 = (__int128 *)(v4 + 2);
      if ((unint64_t)v5 >= v38)
      {
        v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v36, v6);
      }
      else
      {
        if (*((char *)v4 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)v4[2], v4[3]);
        }
        else
        {
          v7 = *v6;
          v5->__r_.__value_.__r.__words[2] = v4[4];
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
        }
        ++v5;
      }
      v37 = v5;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
    for (i = v36; (std::string *)i != v5; i += 24)
    {
      v33[0] = 0;
      v33[1] = 0;
      (*(void (**)(SipDialog **__return_ptr, SipDialogManager *, uint64_t))(*(_QWORD *)this + 24))(v33, this, i);
      if (v33[0])
      {
        SipDialog::forceDeinitialization(v33[0]);
      }
      else
      {
        v9 = (*(uint64_t (**)(_QWORD *))(*v2 + 48))(v2);
        (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"dialog ", 7);
        *(_BYTE *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, i);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" disappeared during deinitialization", 36);
        *(_BYTE *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v9 + 17) = 0;
      }
      v10 = (std::__shared_weak_count *)v33[1];
      if (v33[1])
      {
        v11 = (unint64_t *)((char *)v33[1] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  v13 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 21))
  {
    v14 = (*(uint64_t (**)(_QWORD *))(v13 + 56))(v2);
    (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v14);
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" dialogs remaining after deinitialize.  Clearing.", 49);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    v35 = 0;
    *(_OWORD *)v33 = 0u;
    v34 = 0u;
    std::unordered_map<std::string,std::shared_ptr<SipDialog>>::unordered_map((uint64_t)v33, (uint64_t)(v2 + 16));
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::clear((uint64_t)(v2 + 16));
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)v33);
  }
  else
  {
    v15 = (*(uint64_t (**)(_QWORD *))(v13 + 64))(v2);
    (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"all bambi dialogs deinitialized", 31);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
  }
  v16 = (*(uint64_t (**)(_QWORD *))(*v2 + 64))(v2);
  (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"deinitializing lazuli dialogs", 29);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v16 + 17) = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v17 = (uint64_t *)*((_QWORD *)this + 25);
  if (v17)
  {
    v18 = 0;
    do
    {
      v19 = (__int128 *)(v17 + 2);
      if ((unint64_t)v18 >= v32)
      {
        v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v30, v19);
      }
      else
      {
        if (*((char *)v17 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v18, (const std::string::value_type *)v17[2], v17[3]);
        }
        else
        {
          v20 = *v19;
          v18->__r_.__value_.__r.__words[2] = v17[4];
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
        }
        ++v18;
      }
      v31 = v18;
      v17 = (uint64_t *)*v17;
    }
    while (v17);
    for (j = v30; j != v18; ++j)
    {
      v33[0] = 0;
      v33[1] = 0;
      SipDialogManager::dialogWithLazuliCallId(v33, (uint64_t)this, j);
      if (v33[0])
      {
        SipDialog::forceDeinitialization(v33[0]);
      }
      else
      {
        v22 = (*(uint64_t (**)(_QWORD *))(*v2 + 48))(v2);
        (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"dialog ", 7);
        *(_BYTE *)(v22 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v22 + 32))(v22, j);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" disappeared during deinitialization", 36);
        *(_BYTE *)(v22 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v22 + 17) = 0;
      }
      v23 = (std::__shared_weak_count *)v33[1];
      if (v33[1])
      {
        v24 = (unint64_t *)((char *)v33[1] + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
  v26 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 26))
  {
    v27 = (*(uint64_t (**)(_QWORD *))(v26 + 56))(v2);
    (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v27);
    std::ostream::operator<<();
    *(_BYTE *)(v27 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)" dialogs remaining after deinitialize.  Clearing.", 49);
    *(_BYTE *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v28 = (char *)this + 184;
    *(_BYTE *)(v27 + 17) = 0;
    v35 = 0;
    *(_OWORD *)v33 = 0u;
    v34 = 0u;
    std::unordered_map<std::string,std::shared_ptr<SipDialog>>::unordered_map((uint64_t)v33, (uint64_t)v28);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::clear((uint64_t)v28);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)v33);
  }
  else
  {
    v29 = (*(uint64_t (**)(_QWORD *))(v26 + 64))(v2);
    (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"all lazuli dialogs deinitialized", 32);
    *(_BYTE *)(v29 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v29 + 17) = 0;
  }
  v33[0] = (SipDialog *)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v33);
  v33[0] = (SipDialog *)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v33);
}

void sub_1BEED39EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  a13 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  a13 = (void **)&a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipDialogManager::~SipDialogManager(SipDialogManager *this)
{
  SipDialogManager::~SipDialogManager((SipDialogManager *)((char *)this - 8));
}

{
  SipDialogManager::~SipDialogManager((SipDialogManager *)((char *)this - 16));
}

{
  SipDialogManager::~SipDialogManager((SipDialogManager *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  SipDialogManager::~SipDialogManager((SipDialogManager *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

void SipDialogManager::dialogWithLazuliCallId(_QWORD *a1, uint64_t a2, std::string *a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  void *__p;
  char v20;

  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a2 + 184), (unsigned __int8 *)a3);
  if (v6)
  {
    v7 = *((_QWORD *)v6 + 5);
    *a1 = v7;
    v8 = *((_QWORD *)v6 + 6);
    a1[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if (!v7)
    {
      v12 = *(_QWORD *)(a2 + 16);
      v11 = a2 + 16;
      v13 = (*(uint64_t (**)(uint64_t))(v12 + 64))(v11);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"we have dialog weak reference. But lazuli dialog is gone ", 57);
      *(_BYTE *)(v13 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v17, a3);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 56))(v13, v17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      if (v20 < 0)
        operator delete(__p);
      if (v18 < 0)
        operator delete(v17[0]);
    }
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 16);
    v14 = a2 + 16;
    v16 = (*(uint64_t (**)(uint64_t))(v15 + 64))(v14);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"no existing dialog with lazuli Call-ID ", 39);
    *(_BYTE *)(v16 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v17, a3);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 56))(v16, v17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (v20 < 0)
      operator delete(__p);
    if (v18 < 0)
      operator delete(v17[0]);
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1BEED3CA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

double SipDialogManager::initializeMobileOriginatedDialog(SipDialogManager *this, const SipUri *a2, const SipUri *a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  char v12;
  double result;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  unsigned int v25;
  __int128 v26;

  if (*((_QWORD *)a2 + 17))
  {
    v26 = 0uLL;
    v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 16);
    *(_QWORD *)&v24 = *((_QWORD *)a2 + 15);
    if (!v5 || (*((_QWORD *)&v24 + 1) = std::__shared_weak_count::lock(v5)) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    std::allocate_shared[abi:ne180100]<SipDialog,std::allocator<SipDialog>,std::shared_ptr<SipDialogManager>,void>((std::__shared_weak_count_vtbl **)&v26, &v24);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v26;
    v11 = SipDialog::initializeMobileOriginated((SipDialog *)v26, a3, (uint64_t)&v24);
    v12 = (*(uint64_t (**)(_QWORD, _QWORD, double))(**((_QWORD **)&v24 + 1) + 24))(*((_QWORD *)&v24 + 1), v25, v11);
    ImsResult::~ImsResult((ImsResult *)&v24);
    if ((v12 & 1) != 0)
    {
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      v22 = v10;
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      SipDialogManager::addDialog((uint64_t)a2, &v22);
      v19 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      result = *(double *)&v26;
      *(_OWORD *)this = v26;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  return result;
}

void sub_1BEED3E6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

_QWORD *SipDialogManager::addDialog(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v16;

  v4 = (_QWORD *)(a1 + 16);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"added [Dialog ", 14);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, *a2 + 1536);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"] to map", 8);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  v6 = v4[15];
  v7 = *(std::__shared_weak_count **)(v6 + 16);
  if (!v7 || (v8 = std::__shared_weak_count::lock(v7)) == 0)
  {
    if (!MEMORY[0xA61])
      goto LABEL_7;
LABEL_9:
    v13 = a1 + 184;
    goto LABEL_10;
  }
  v9 = v8;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 8) + 2657);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      goto LABEL_7;
    goto LABEL_9;
  }
  if (v10)
    goto LABEL_9;
LABEL_7:
  v13 = a1 + 144;
LABEL_10:
  v16 = (unsigned __int8 *)(*a2 + 1536);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, v16, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
  return std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)v14 + 5, a2);
}

_QWORD *SipDialogManager::updateDialogMap(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4)
{
  uint64_t v7;
  unsigned __int8 *v8;
  __int128 *v10;

  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::__erase_unique<std::string>((_QWORD *)(a1 + 144), (unsigned __int8 *)a2);
  v10 = a3;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 144, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v10);
  return std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)v8 + 5, a4);
}

void SipDialogManager::initializeSession(SipDialogManager *this@<X0>, const SipUri *a2@<X1>, const BambiCallOptions *a3@<X2>, uint64_t a4@<X8>)
{
  double v8;
  uint64_t v9;
  SipSession *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  char *v33;
  std::__shared_weak_count *v34;

  v33 = 0;
  v34 = 0;
  v8 = SipDialogManager::initializeMobileOriginatedDialog((SipDialogManager *)&v33, this, a2);
  v9 = (uint64_t)v33;
  if (v33)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    SipSession::create((const std::string *)(v9 + 112), (SipSession **)a4);
    v10 = *(SipSession **)a4;
    v31 = v9;
    v32 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    SipSession::initializeWithOptions((uint64_t)v10, &v31, (uint64_t)a3);
    v13 = v32;
    if (v32)
    {
      v14 = (unint64_t *)&v32->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"created ", 8);
    *(_BYTE *)(v16 + 17) = 0;
    v17 = (uint64_t)v33;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)&v33[*(_QWORD *)(*(_QWORD *)v33 - 24)] + 16))(&v33[*(_QWORD *)(*(_QWORD *)v33 - 24)], v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" for outgoing session with ", 27);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v16);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    v29 = v17;
    v30 = v34;
    if (v34)
    {
      v18 = (unint64_t *)&v34->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    SipDialogManager::addDialog((uint64_t)this, &v29);
    v20 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else
  {
    v24 = *((_QWORD *)this + 2);
    v23 = (char *)this + 16;
    v25 = (*(uint64_t (**)(char *, double))(v24 + 56))(v23, v8);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v23 + 16))(v23, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"unable to initialize MO dialog", 30);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  v26 = v34;
  if (v34)
  {
    v27 = (unint64_t *)&v34->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1BEED4310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void SipDialogManager::initializeSession(SipDialogManager *this@<X0>, const SipUri *a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  double v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const char *v18;
  SipSession *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  std::__shared_weak_count *v36;
  uint64_t v37[2];
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t *v43;
  const char *v44;
  xpc_object_t v45;
  xpc_object_t object;
  xpc_object_t v47;
  uint64_t v48;
  uint64_t v49;

  v48 = 0;
  v49 = 0;
  v8 = SipDialogManager::initializeMobileOriginatedDialog((SipDialogManager *)&v48, this, a2);
  v9 = v48;
  if (!v48)
  {
    v13 = *((_QWORD *)this + 2);
    v12 = (char *)this + 16;
    v14 = (*(uint64_t (**)(char *, double))(v13 + 56))(v12, v8);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))(v12, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"unable to initialize MO dialog", 30);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    goto LABEL_52;
  }
  v10 = (const char *)&a3[1];
  SipIdString::set(v48 + 1616, a3 + 1);
  v11 = (const char *)&a3[2];
  SipIdString::set(v9 + 1672, a3 + 2);
  if (SHIBYTE(a3[3].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!a3[3].__r_.__value_.__l.__size_)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (*((_BYTE *)&a3[3].__r_.__value_.__s + 23))
LABEL_7:
    SipIdString::set(v9 + 1728, a3 + 3);
LABEL_8:
  if ((SHIBYTE(a3[5].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&a3[5].__r_.__value_.__s + 23))
      goto LABEL_36;
LABEL_12:
    v47 = 0;
    v15 = xpc_dictionary_create(0, 0, 0);
    v16 = v15;
    if (v15)
    {
      v47 = v15;
    }
    else
    {
      v16 = xpc_null_create();
      v47 = v16;
      if (!v16)
      {
        v17 = xpc_null_create();
        v16 = 0;
        goto LABEL_19;
      }
    }
    if (MEMORY[0x1C3B87B98](v16) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v16);
LABEL_20:
      xpc_release(v16);
      if (SHIBYTE(a3[1].__r_.__value_.__r.__words[2]) < 0)
        v10 = *(const char **)v10;
      v45 = xpc_string_create(v10);
      if (!v45)
        v45 = xpc_null_create();
      v43 = &v47;
      v44 = "kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v43, &v45, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v45);
      v45 = 0;
      if (SHIBYTE(a3[2].__r_.__value_.__r.__words[2]) < 0)
        v11 = *(const char **)v11;
      v41 = xpc_string_create(v11);
      if (!v41)
        v41 = xpc_null_create();
      v43 = &v47;
      v44 = "kContributionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v43, &v41, &v42);
      xpc_release(v42);
      v42 = 0;
      xpc_release(v41);
      v41 = 0;
      v18 = (const char *)&a3[6];
      if (SHIBYTE(a3[6].__r_.__value_.__r.__words[2]) < 0)
        v18 = *(const char **)v18;
      v39 = xpc_string_create(v18);
      if (!v39)
        v39 = xpc_null_create();
      v43 = &v47;
      v44 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v43, &v39, &v40);
      xpc_release(v40);
      v40 = 0;
      xpc_release(v39);
      v9 = v48;
      v38 = v47;
      v39 = 0;
      if (v47)
        xpc_retain(v47);
      else
        v38 = xpc_null_create();
      SipDialog::setGroupParams(v9, &v38);
      xpc_release(v38);
      v38 = 0;
      xpc_release(v47);
      goto LABEL_36;
    }
    v17 = xpc_null_create();
LABEL_19:
    v47 = v17;
    goto LABEL_20;
  }
  if (a3[5].__r_.__value_.__l.__size_)
    goto LABEL_12;
LABEL_36:
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  SipSession::create((const std::string *)(v9 + 112), (SipSession **)a4);
  v19 = *(SipSession **)a4;
  v20 = (std::__shared_weak_count *)v49;
  v37[0] = v48;
  v37[1] = v49;
  if (v49)
  {
    v21 = (unint64_t *)(v49 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  SipSession::initializeWithOptions((uint64_t)v19, v37, a3);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v25 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"created ", 8);
  *(_BYTE *)(v25 + 17) = 0;
  v26 = (char *)v48;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)&v26[*(_QWORD *)(*(_QWORD *)v26 - 24)] + 16))(&v26[*(_QWORD *)(*(_QWORD *)v26 - 24)], v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" for outgoing session with ", 27);
  *(_BYTE *)(v25 + 17) = 0;
  (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v25);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v25 + 17) = 0;
  v35 = v26;
  v36 = (std::__shared_weak_count *)v49;
  if (v49)
  {
    v27 = (unint64_t *)(v49 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  SipDialogManager::addDialog((uint64_t)this, (uint64_t *)&v35);
  v29 = v36;
  if (v36)
  {
    v30 = (unint64_t *)&v36->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_52:
  v32 = (std::__shared_weak_count *)v49;
  if (v49)
  {
    v33 = (unint64_t *)(v49 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_1BEED4840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v10 - 80);
  _Unwind_Resume(a1);
}

void SipDialog::setGroupParams(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  void *v4;

  v3 = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    v3 = xpc_null_create();
  v4 = *(void **)(a1 + 1784);
  *(_QWORD *)(a1 + 1784) = v3;
  xpc_release(v4);
}

void SipDialogManager::initializeUssdSession(const SipUri *a1@<X0>, const std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  double v17;
  char *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  char *v40;
  std::__shared_weak_count *v41;
  std::string __str;
  void *__p;
  std::__shared_weak_count *v44;
  char v45;
  std::string v46;
  std::string v47;
  void (**v48)(SipUri *__hidden);
  _QWORD v49[8];
  uint64_t *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  void (**v68)(SipParameterMap *__hidden);
  _QWORD *v69;
  _QWORD v70[5];
  _QWORD v71[3];
  void **p_p;

  v71[2] = 257;
  v70[2] = 257;
  v67 = 0;
  v52 = 0u;
  v49[0] = &off_1E78D08F8;
  memset(&v49[1], 0, 48);
  v51 = 0;
  *(_QWORD *)&v52 = 0;
  v49[7] = &off_1E78B82D8;
  v50 = &v51;
  v48 = &off_1E78BFCE8;
  v6 = (char *)&v53;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v66 = 0;
  v70[1] = 0;
  v70[0] = 0;
  v68 = &off_1E78B82D8;
  v69 = v70;
  v71[1] = 0;
  v71[0] = 0;
  v70[3] = &off_1E78B82D8;
  v70[4] = v71;
  WORD4(v52) = 257;
  memset(&v47, 0, sizeof(v47));
  v7 = *((_QWORD *)a1 + 17);
  v8 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v7 + 16));
  v44 = v8;
  __p = *(void **)(v7 + 8);
  SipUserAgent::publicDomain(*((SipUserAgent **)__p + 18), (uint64_t)&v47);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  memset(&v46, 0, sizeof(v46));
  v11 = *((_QWORD *)a1 + 17);
  __p = 0;
  v44 = 0;
  v12 = *(std::__shared_weak_count **)(v11 + 16);
  if (v12)
  {
    v12 = std::__shared_weak_count::lock(v12);
    v13 = v12;
    v44 = v12;
    if (v12)
    {
      v12 = *(std::__shared_weak_count **)(v11 + 8);
      __p = v12;
    }
  }
  else
  {
    v13 = 0;
  }
  SipStack::phoneContext((SipStack *)v12, &v46);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  SipUri::setUser((uint64_t)&v48, a2, (uint64_t)&v46);
  SipHost::SipHost((uint64_t)&__p, &v47);
  if (SBYTE7(v54) < 0)
  {
    *((_QWORD *)&v53 + 1) = 3;
    v6 = (char *)v53;
  }
  else
  {
    BYTE7(v54) = 3;
  }
  strcpy(v6, "sip");
  if (SHIBYTE(v58) < 0)
  {
    **((_BYTE **)&v57 + 1) = 0;
    *(_QWORD *)&v58 = 0;
  }
  else
  {
    BYTE8(v57) = 0;
    HIBYTE(v58) = 0;
  }
  if (SHIBYTE(v61) < 0)
  {
    **((_BYTE **)&v60 + 1) = 0;
    *(_QWORD *)&v61 = 0;
  }
  else
  {
    BYTE8(v60) = 0;
    HIBYTE(v61) = 0;
  }
  if (SBYTE7(v63) < 0)
  {
    *(_BYTE *)v62 = 0;
    *((_QWORD *)&v62 + 1) = 0;
  }
  else
  {
    LOBYTE(v62) = 0;
    BYTE7(v63) = 0;
  }
  if (SHIBYTE(v64) < 0)
  {
    **((_BYTE **)&v63 + 1) = 0;
    *(_QWORD *)&v64 = 0;
  }
  else
  {
    BYTE8(v63) = 0;
    HIBYTE(v64) = 0;
  }
  SipHost::operator=((uint64_t)v49, (uint64_t)&__p);
  LOBYTE(v67) = 0;
  SipHost::~SipHost(&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "user");
  std::string::basic_string[abi:ne180100]<0>(&__str, "dialstring");
  p_p = &__p;
  v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v50, &__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  std::string::operator=((std::string *)(v16 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v45 < 0)
    operator delete(__p);
  __p = 0;
  v44 = 0;
  v17 = SipDialogManager::initializeMobileOriginatedDialog((SipDialogManager *)&__p, a1, (const SipUri *)&v48);
  v18 = (char *)__p;
  if (__p)
  {
    *a3 = 0;
    a3[1] = 0;
    std::allocate_shared[abi:ne180100]<SipUssdSession,std::allocator<SipUssdSession>,std::string const&,void>(a3, (const std::string *)(v18 + 112));
    v19 = *a3;
    v40 = v18;
    v41 = v44;
    if (v44)
    {
      v20 = (unint64_t *)&v44->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v19 + 80))(v19, &v40);
    v22 = v41;
    if (v41)
    {
      v23 = (unint64_t *)&v41->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 2) + 64))((_QWORD *)a1 + 2);
    (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 2) + 16))((_QWORD *)a1 + 2, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"created ", 8);
    *(_BYTE *)(v25 + 17) = 0;
    v26 = __p;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)((char *)__p + *(_QWORD *)(*(_QWORD *)__p - 24)) + 16))((char *)__p + *(_QWORD *)(*(_QWORD *)__p - 24), v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" for USSD session", 17);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    v38 = v26;
    v39 = v44;
    if (v44)
    {
      v27 = (unint64_t *)&v44->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    SipDialogManager::addDialog((uint64_t)a1, (uint64_t *)&v38);
    v29 = v39;
    if (v39)
    {
      v30 = (unint64_t *)&v39->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    v33 = *((_QWORD *)a1 + 2);
    v32 = (_QWORD *)((char *)a1 + 16);
    v34 = (*(uint64_t (**)(_QWORD *, double))(v33 + 56))(v32, v17);
    (*(void (**)(_QWORD *, uint64_t))(*v32 + 16))(v32, v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)"unable to initialize MO dialog", 30);
    *(_BYTE *)(v34 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v34 + 17) = 0;
    *a3 = 0;
    a3[1] = 0;
  }
  v35 = v44;
  if (v44)
  {
    v36 = (unint64_t *)&v44->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  SipUri::~SipUri((SipUri *)&v48);
}

void sub_1BEED4EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  uint64_t v42;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v42);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  if (a35 < 0)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  SipUri::~SipUri((SipUri *)&a42);
  _Unwind_Resume(a1);
}

void SipDialogManager::subscribeToEventPackage(SipDialogManager *this@<X0>, SipEventPackage *a2@<X1>, const SipUri *a3@<X2>, _QWORD *a4@<X8>)
{
  double v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  const std::string *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string __p;
  char *v19;
  std::__shared_weak_count *v20;

  v19 = 0;
  v20 = 0;
  v7 = SipDialogManager::initializeMobileOriginatedDialog((SipDialogManager *)&v19, this, a3);
  v8 = v19;
  v11 = *((_QWORD *)this + 2);
  v10 = (char *)this + 16;
  v9 = v11;
  if (v19)
  {
    v12 = (*(uint64_t (**)(char *, double))(v9 + 64))(v10, v7);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v10 + 16))(v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"created ", 8);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 24)] + 16))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 24)], v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" for ", 5);
    *(_BYTE *)(v12 + 17) = 0;
    v13 = (const std::string *)(*(uint64_t (**)(SipEventPackage *))(*(_QWORD *)a2 + 16))(a2);
    LoggableString::LoggableString(&__p, v13);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 40))(v12, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" subscription", 13);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    SipDialog::subscribeToEventPackage((uint64_t)v8, a2, &__p, 0, a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = (*(uint64_t (**)(char *, double))(v9 + 56))(v10, v7);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v10 + 16))(v10, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"unable to initialize MO dialog", 30);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    *a4 = 0;
    a4[1] = 0;
  }
  v15 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BEED519C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void SipDialogManager::dialogWithCallId(uint64_t a1@<X0>, std::string *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  void *__p;
  char v20;

  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 144), (unsigned __int8 *)a2);
  if (v6)
  {
    v7 = *((_QWORD *)v6 + 5);
    *a3 = v7;
    v8 = *((_QWORD *)v6 + 6);
    a3[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if (!v7)
    {
      v12 = *(_QWORD *)(a1 + 16);
      v11 = a1 + 16;
      v13 = (*(uint64_t (**)(uint64_t))(v12 + 64))(v11);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"we have dialog weak reference. But dialog is gone ", 50);
      *(_BYTE *)(v13 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v17, a2);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 56))(v13, v17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      if (v20 < 0)
        operator delete(__p);
      if (v18 < 0)
        operator delete(v17[0]);
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 16);
    v14 = a1 + 16;
    v16 = (*(uint64_t (**)(uint64_t))(v15 + 64))(v14);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"no existing dialog with callId ", 31);
    *(_BYTE *)(v16 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v17, a2);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 56))(v16, v17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (v20 < 0)
      operator delete(__p);
    if (v18 < 0)
      operator delete(v17[0]);
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1BEED5380(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipDialogManager::dialogForRequest(SipDialogManager *this@<X0>, const SipRequest *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  __int128 *v14;
  char *v15;
  std::string *v16;

  v6 = *((_QWORD *)this + 17);
  v7 = *(std::__shared_weak_count **)(v6 + 16);
  if (v7 && (v8 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v9 = v8;
    v10 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 8) + 2657);
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (v12)
    {
      if (!v10)
      {
LABEL_7:
        v13 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a2);
        if (v13)
          v14 = (__int128 *)(v13 + 64);
        else
          v14 = &ims::kEmptyString;
        (*(void (**)(SipDialogManager *, __int128 *))(*(_QWORD *)this + 24))(this, v14);
        return;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
      if (!v10)
        goto LABEL_7;
    }
  }
  else if (!MEMORY[0xA61])
  {
    goto LABEL_7;
  }
  v15 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a2);
  if (v15)
    v16 = (std::string *)(v15 + 64);
  else
    v16 = (std::string *)&ims::kEmptyString;
  SipDialogManager::dialogWithLazuliCallId(a3, (uint64_t)this, v16);
}

void SipDialogManager::handleAck(SipDialogManager *this, const SipRequest *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  char v23;
  void *__p;
  char v25;
  SipDialog *v26;
  std::__shared_weak_count *v27;
  std::string v28;

  memset(&v28, 0, sizeof(v28));
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)a2 + 4, (unsigned __int8 *)&SipHeader::kHeaderCallId);
  if (v4
    && (v5 = *((_QWORD *)v4 + 5)) != 0
    && ((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 40))(v5, &v28) & 1) != 0)
  {
    v26 = 0;
    v27 = 0;
    (*(void (**)(SipDialog **__return_ptr, SipDialogManager *, const SipRequest *))(*(_QWORD *)this + 32))(&v26, this, a2);
    if (v26)
    {
      v21 = 0;
      v22 = 0;
      SipDialog::sipSession(v26, &v21);
      if (v21)
      {
        (*(void (**)(void *, const SipRequest *))(*(_QWORD *)v21 + 256))(v21, a2);
      }
      else
      {
        v13 = *((_QWORD *)this + 2);
        v12 = (char *)this + 16;
        v14 = (*(uint64_t (**)(char *))(v13 + 32))(v12);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))(v12, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"received ACK for dialog with no SIP session", 43);
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v14 + 17) = 0;
      }
      v15 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    else
    {
      v10 = *((_QWORD *)this + 2);
      v9 = (char *)this + 16;
      v11 = (*(uint64_t (**)(char *))(v10 + 32))(v9);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"received ACK with unknown Call-ID ", 34);
      *(_BYTE *)(v11 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)&v21, &v28);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 56))(v11, &v21);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v11 + 17) = 0;
      if (v25 < 0)
        operator delete(__p);
      if (v23 < 0)
        operator delete(v21);
    }
    v18 = v27;
    if (v27)
    {
      v19 = (unint64_t *)&v27->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    v7 = *((_QWORD *)this + 2);
    v6 = (char *)this + 16;
    v8 = (*(uint64_t (**)(char *))(v7 + 32))(v6);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"No Call-ID header in ACK", 24);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_1BEED5740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (*(char *)(v8 - 17) < 0)
    operator delete(*(void **)(v8 - 40));
  _Unwind_Resume(a1);
}

void SipDialogManager::createDialogForServerTransaction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  const SipRequest *v7;
  unsigned __int8 *v8;
  const void *v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;
  __int128 *v17;
  void **v18;
  __int128 *v19;
  std::string::size_type size;
  std::string::size_type v21;
  std::string::size_type v22;
  SipDialog *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  ImsOutStream *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string::size_type v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  SipUri *v39;
  int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  const void *v43;
  char *v44;
  const void **v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  __int128 *v49;
  const char *v50;
  const void *v51;
  __int128 *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  const SipDialog *v77;
  uint64_t *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  __int128 v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  const ImsPrefs *v109;
  unint64_t *v110;
  unint64_t v111;
  char *v112;
  __int128 *v113;
  uint64_t v114;
  char *v115;
  __int128 *v116;
  uint64_t v117;
  uint64_t v118;
  std::string::size_type v119;
  char *v120;
  const std::string *v121;
  char *v122;
  const std::string *v123;
  char *v124;
  __int128 *v125;
  uint64_t v126;
  uint64_t v127;
  std::string::size_type v128;
  char *v129;
  const std::string *v130;
  char *v131;
  const std::string *v132;
  char *v133;
  __int128 *v134;
  uint64_t v135;
  uint64_t v136;
  std::string::size_type v137;
  char *v138;
  const std::string *v139;
  char *v140;
  const std::string *v141;
  _QWORD *v142;
  uint64_t v143;
  std::string::size_type v144;
  char *v145;
  __int128 *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  const std::string *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;
  int v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  std::string v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  void *v210[2];
  void *v211[2];
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  void *v218[2];
  __int128 v219;
  void *v220[2];
  _OWORD v221[2];
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  _QWORD v225[3];
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  std::string::size_type v240;
  std::string::size_type v241;
  char v242[72];
  __int128 v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  std::string::size_type v246;
  std::string::size_type v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  __int128 v253;
  SipDialog *v254;
  std::__shared_weak_count *v255;
  std::string v256;
  std::string __str;

  v7 = *(const SipRequest **)(*(_QWORD *)a2 + 288);
  v254 = 0;
  v255 = 0;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)v7 + 4, "Replaces");
  if (!v8)
    goto LABEL_52;
  v9 = (const void *)*((_QWORD *)v8 + 5);
  if (!v9)
    goto LABEL_52;
  if (!v10)
    goto LABEL_52;
  v11 = v10;
  v12 = (uint64_t *)(a1 + 16);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"found Replaces header in INVITE", 31);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  memset(&v205, 0, sizeof(v205));
  if (v11[127] < 0)
    std::string::__init_copy_ctor_external(&v205, *((const std::string::value_type **)v11 + 13), *((_QWORD *)v11 + 14));
  else
    v205 = *(std::string *)(v11 + 104);
  memset(&__str, 0, sizeof(__str));
  v14 = (uint64_t)(v11 + 72);
  v15 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v11 + 72), (void **)"from-tag");
  v16 = (void **)(v11 + 80);
  v17 = (__int128 *)(v15 + 7);
  if (v16 == v15)
    v17 = &ims::kEmptyString;
  if (*((char *)v17 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  else
    __str = *(std::string *)v17;
  memset(&v256, 0, sizeof(v256));
  v18 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v14, (void **)"to-tag");
  v19 = (__int128 *)(v18 + 7);
  if (v16 == v18)
    v19 = &ims::kEmptyString;
  if (*((char *)v19 + 23) < 0)
    std::string::__init_copy_ctor_external(&v256, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
  else
    v256 = *(std::string *)v19;
  v253 = 0uLL;
  size = HIBYTE(v205.__r_.__value_.__r.__words[2]);
  if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v205.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_28;
  v21 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = __str.__r_.__value_.__l.__size_;
  if (!v21)
    goto LABEL_28;
  v22 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v22 = v256.__r_.__value_.__l.__size_;
  if (!v22)
  {
LABEL_28:
    v24 = 0;
LABEL_29:
    v25 = (*(uint64_t (**)(uint64_t))(*v12 + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*v12 + 16))(a1 + 16, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"can't find matching dialog for callId: ", 39);
    *(_BYTE *)(v25 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v218, &v205);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v25 + 56))(v25, v218);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)", fromTag: ", 11);
    *(_BYTE *)(v25 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v207, &__str);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v25 + 56))(v25, &v207);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)", toTag: ", 9);
    *(_BYTE *)(v25 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v248, &v256);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v25 + 56))(v25, &v248);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    if (SHIBYTE(v250) < 0)
      operator delete(*((void **)&v249 + 1));
    if (SBYTE7(v249) < 0)
      operator delete((void *)v248);
    if (SHIBYTE(v209) < 0)
      operator delete(*((void **)&v208 + 1));
    if (SBYTE7(v208) < 0)
      operator delete((void *)v207);
    if (SHIBYTE(v220[1]) < 0)
      operator delete(*((void **)&v219 + 1));
    if (SBYTE7(v219) < 0)
      operator delete(v218[0]);
    v23 = 0;
    goto LABEL_42;
  }
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)a1 + 24))(v218, a1, &v205);
  v23 = (SipDialog *)v218[0];
  v24 = (std::__shared_weak_count *)v218[1];
  v253 = *(_OWORD *)v218;
  if (!v218[0])
    goto LABEL_29;
LABEL_42:
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v205.__r_.__value_.__l.__data_);
  v254 = v23;
  v255 = v24;
  v26 = *v12;
  if (v23)
  {
    v27 = (*(uint64_t (**)(uint64_t))(v26 + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*v12 + 16))(a1 + 16, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"replaces header matches dialog:", 31);
    *(_BYTE *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v27 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v218, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v28 = (ImsOutStream *)ImsLogger::debug(ims::_logger, a1 + 24, (uint64_t)v218);
    SipDialog::printDialogInfo(v23, v28);
    if (SBYTE7(v219) < 0)
      operator delete(v218[0]);
  }
  else
  {
    v29 = (*(uint64_t (**)(uint64_t))(v26 + 48))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*v12 + 16))(a1 + 16, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"no matching dialog found for replaces header", 44);
    *(_BYTE *)(v29 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v29 + 17) = 0;
  }
LABEL_52:
  *(_OWORD *)&v256.__r_.__value_.__l.__data_ = 0uLL;
  v30 = *(std::__shared_weak_count **)(a1 + 128);
  v218[0] = *(void **)(a1 + 120);
  if (!v30 || (v218[1] = std::__shared_weak_count::lock(v30)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  std::allocate_shared[abi:ne180100]<SipDialog,std::allocator<SipDialog>,std::shared_ptr<SipDialogManager>,void>((std::__shared_weak_count_vtbl **)&v256, (__int128 *)v218);
  v31 = (std::__shared_weak_count *)v218[1];
  if (v218[1])
  {
    v32 = (unint64_t *)((char *)v218[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v252 = 0;
  v250 = 0u;
  v251 = 0u;
  v248 = 0u;
  v249 = 0u;
  v34 = v256.__r_.__value_.__r.__words[0];
  SipDialog::initializeMobileTerminated((SipDialog *)v256.__r_.__value_.__l.__data_, v7, (uint64_t)&v248);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v248 + 1) + 24))(*((_QWORD *)&v248 + 1), v249))
  {
    v36 = *(_QWORD *)(a1 + 16);
    v35 = a1 + 16;
    v37 = (*(uint64_t (**)(uint64_t))(v36 + 56))(v35);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"unable to initialize MT dialog: ", 32);
    *(_BYTE *)(v37 + 17) = 0;
    (*(void (**)(__int128 *, uint64_t))(v248 + 16))(&v248, v37);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v37 + 17) = 0;
    ImsResult::operator=(a3, (uint64_t)&v248);
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_319;
  }
  v38 = SipUserAgent::config(*(SipUserAgent **)(a1 + 136));
  v39 = SipRequest::bestSenderIdentity((uint64_t)v7, *(_DWORD *)(v38 + 804));
  SipDialog::setSenderIdentity((SipDialog *)v34, v39);
  memset(&__str, 0, sizeof(__str));
  v40 = *(_DWORD *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 136)) + 808);
  v41 = SipUserAgent::config(*(SipUserAgent **)(a1 + 136));
  SipRequest::bestSenderName((uint64_t)v7, v40, *(_BYTE *)(v41 + 812), &__str);
  std::string::operator=((std::string *)(v34 + 640), &__str);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)v7 + 4, "Privacy");
  if (v42)
  {
    v43 = (const void *)*((_QWORD *)v42 + 5);
    if (v43)
    {
      if (v44)
      {
        v45 = (const void **)(v44 + 64);
        v46 = v44[87];
        v47 = *((_QWORD *)v44 + 9);
        if ((v46 & 0x80u) == 0)
          v48 = v44[87];
        else
          v48 = *((_QWORD *)v44 + 9);
        if (v48 != 6)
        {
          if (v48 != 2)
            goto LABEL_84;
          if ((v46 & 0x80) == 0)
          {
            if (v44[87])
            {
              v49 = &SipPrivacyHeader::kPrivacyId;
              while (*(unsigned __int8 *)v45 == *(unsigned __int8 *)v49)
              {
                v45 = (const void **)((char *)v45 + 1);
                v49 = (__int128 *)((char *)v49 + 1);
                if (!--v46)
                  goto LABEL_85;
              }
              goto LABEL_84;
            }
LABEL_85:
            *(_BYTE *)(v34 + 1864) = 1;
            goto LABEL_86;
          }
          v51 = *v45;
          v52 = &SipPrivacyHeader::kPrivacyId;
LABEL_83:
          if (memcmp(v51, v52, v47))
            goto LABEL_84;
          goto LABEL_85;
        }
        if ((v46 & 0x80) != 0)
        {
          v51 = *v45;
          v52 = (__int128 *)"header";
          goto LABEL_83;
        }
        if (!v44[87])
          goto LABEL_85;
        v50 = "header";
        while (*(unsigned __int8 *)v45 == *(unsigned __int8 *)v50)
        {
          v45 = (const void **)((char *)v45 + 1);
          ++v50;
          if (!--v46)
            goto LABEL_85;
        }
      }
    }
  }
LABEL_84:
  if (SipUri::isAnonymousUri(v39))
    goto LABEL_85;
LABEL_86:
  if (*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 136)) + 628)
    && SipMessage::body<SipUssdDataBody>((uint64_t)v7))
  {
    v207 = 0uLL;
    std::allocate_shared[abi:ne180100]<SipUssdSession,std::allocator<SipUssdSession>,std::string const&,void>((uint64_t *)&v207, (const std::string *)(v34 + 112));
    v53 = v207;
    v246 = v34;
    v247 = v256.__r_.__value_.__l.__size_;
    if (v256.__r_.__value_.__l.__size_)
    {
      v54 = (unint64_t *)(v256.__r_.__value_.__l.__size_ + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    (*(void (**)(uint64_t, std::string::size_type *))(*(_QWORD *)v53 + 80))(v53, &v246);
    v56 = (std::__shared_weak_count *)v247;
    if (v247)
    {
      v57 = (unint64_t *)(v247 + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v59 = *(_QWORD *)(a1 + 136);
    v205.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v59 + 16));
    v205.__r_.__value_.__r.__words[0] = *(_QWORD *)(v59 + 8);
    v60 = *(_QWORD *)(v205.__r_.__value_.__r.__words[0] + 136);
    v61 = *(_QWORD *)(a1 + 136);
    v244 = 0;
    v245 = 0;
    v62 = *(std::__shared_weak_count **)(v61 + 16);
    if (v62)
    {
      v245 = std::__shared_weak_count::lock(v62);
      if (v245)
        v244 = *(_QWORD *)(v61 + 8);
    }
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
    v243 = v207;
    if (*((_QWORD *)&v207 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    BambiClient::handleIncomingUssdSession(v60, &v244, (uint64_t *)&v243, (uint64_t)v218);
    ImsResult::operator=((uint64_t)&v248, (uint64_t)v218);
    ImsResult::~ImsResult((ImsResult *)v218);
    if (v63)
    {
      p_shared_owners = (unint64_t *)&v63->__shared_owners_;
      do
        v67 = __ldaxr(p_shared_owners);
      while (__stlxr(v67 - 1, p_shared_owners));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v68 = v245;
    if (v245)
    {
      v69 = (unint64_t *)&v245->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = (std::__shared_weak_count *)v205.__r_.__value_.__l.__size_;
    if (v205.__r_.__value_.__l.__size_)
    {
      v72 = (unint64_t *)(v205.__r_.__value_.__l.__size_ + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v248 + 1) + 24))(*((_QWORD *)&v248 + 1), v249))
    {
      SipUssdSession::cancelSession((SipUssdSession *)v207);
      ImsResult::~ImsResult((ImsResult *)v242);
      ImsResult::operator=(a3, (uint64_t)&v248);
      *a4 = 0;
      a4[1] = 0;
      v74 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
      if (*((_QWORD *)&v207 + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      goto LABEL_317;
    }
    v94 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
    if (*((_QWORD *)&v207 + 1))
    {
      v95 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      goto LABEL_314;
    }
    goto LABEL_316;
  }
  v253 = 0uLL;
  v77 = v254;
  if (v254)
  {
    SipDialog::sipSession(v254, v218);
    v78 = (uint64_t *)v218[0];
    v79 = (std::__shared_weak_count *)v218[1];
    v253 = *(_OWORD *)v218;
    SipDialog::setSessionIdFromDialog((std::string *)v34, v77);
    if (v78)
    {
      v240 = v34;
      v241 = v256.__r_.__value_.__l.__size_;
      if (v256.__r_.__value_.__l.__size_)
      {
        v80 = (unint64_t *)(v256.__r_.__value_.__l.__size_ + 8);
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      v82 = *(_QWORD *)(a1 + 136);
      *(_OWORD *)&v205.__r_.__value_.__l.__data_ = 0uLL;
      v83 = *(std::__shared_weak_count **)(v82 + 16);
      if (v83 && (v205.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v83)) != 0)
      {
        v84 = *(_QWORD *)(v82 + 8);
        v205.__r_.__value_.__r.__words[0] = v84;
      }
      else
      {
        v84 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(&v207, "JoinedConference");
      SipStack::callTerminationReason(v84, (uint64_t)&v207, (BambiCallTerminationReason *)v218);
      SipSession::replaceDialog(v78, (uint64_t *)&v240, v7, (const std::string *)v218);
      v97 = (std::__shared_weak_count *)v225[0];
      if (v225[0])
      {
        v98 = (unint64_t *)(v225[0] + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v100 = (std::__shared_weak_count *)v224;
      if ((_QWORD)v224)
      {
        v101 = (unint64_t *)(v224 + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      if (SBYTE7(v223) < 0)
        operator delete(*((void **)&v221[1] + 1));
      if (SBYTE7(v221[0]) < 0)
        operator delete(v220[0]);
      if (SHIBYTE(v219) < 0)
        operator delete(v218[1]);
      if (SBYTE7(v208) < 0)
        operator delete((void *)v207);
      v103 = (std::__shared_weak_count *)v205.__r_.__value_.__l.__size_;
      if (v205.__r_.__value_.__l.__size_)
      {
        v104 = (unint64_t *)(v205.__r_.__value_.__l.__size_ + 8);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = (std::__shared_weak_count *)v241;
      if (v241)
      {
        v107 = (unint64_t *)(v241 + 8);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      goto LABEL_311;
    }
  }
  else
  {
    v79 = 0;
  }
  SipSession::create((const std::string *)(v34 + 112), (SipSession **)v218);
  v85 = *(_OWORD *)v218;
  v218[0] = 0;
  v218[1] = 0;
  v253 = v85;
  if (v79)
  {
    v86 = (unint64_t *)&v79->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v88 = (std::__shared_weak_count *)v218[1];
  if (v218[1])
  {
    v89 = (unint64_t *)((char *)v218[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v238 = 0u;
  v239 = 0u;
  v237 = 0;
  v222 = 0;
  memset(v221, 0, sizeof(v221));
  v219 = 0u;
  *(_OWORD *)v220 = 0u;
  *(_OWORD *)v218 = 0u;
  LODWORD(v220[1]) = 90;
  LOBYTE(v221[0]) = 1;
  BYTE2(v221[0]) = 1;
  *(_QWORD *)((char *)v221 + 4) = 0x200000001;
  *(_WORD *)((char *)v221 + 13) = 257;
  *(_QWORD *)((char *)v221 + 15) = 0;
  *(_WORD *)((char *)&v221[1] + 7) = 256;
  v226 = 0u;
  v227 = 0u;
  v223 = 0u;
  v224 = 0u;
  memset(v225, 0, sizeof(v225));
  v228 = 0x40A7700000000000;
  v234 = 0u;
  v235 = 0u;
  v236 = 0u;
  v229 = 0u;
  v230 = 0u;
  v231 = 0u;
  v232 = 0u;
  v233 = 0u;
  v91 = *(_QWORD *)(a1 + 136);
  v207 = 0uLL;
  v92 = *(std::__shared_weak_count **)(v91 + 16);
  if (v92)
  {
    v92 = std::__shared_weak_count::lock(v92);
    v93 = v92;
    *((_QWORD *)&v207 + 1) = v92;
    if (v92)
    {
      v92 = *(std::__shared_weak_count **)(v91 + 8);
      *(_QWORD *)&v207 = v92;
    }
  }
  else
  {
    v93 = 0;
  }
  v109 = (const ImsPrefs *)SipStack::prefs((SipStack *)v92);
  BambiCallOptions::initializeFromPrefs((BambiCallOptions *)v218, v109);
  if (v93)
  {
    v110 = (unint64_t *)&v93->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v112 = (char *)SipMessage::header<SipSubjectHeader>((uint64_t)v7);
  if (v112)
    v113 = (__int128 *)(v112 + 64);
  else
    v113 = &ims::kEmptyString;
  v114 = *((unsigned __int8 *)v113 + 23);
  if ((v114 & 0x80u) != 0)
    v114 = *((_QWORD *)v113 + 1);
  if (v114)
    std::string::operator=((std::string *)&v218[1], (const std::string *)v113);
  v212 = 0u;
  v213 = 0u;
  *(_OWORD *)v210 = 0u;
  *(_OWORD *)v211 = 0u;
  v208 = 0u;
  v209 = 0u;
  v207 = 0u;
  DWORD2(v213) = 90;
  v214 = 65537;
  v215 = 0u;
  v216 = 0u;
  v217 = 0u;
  v115 = (char *)SipMessage::header<SipConversationIdHeader>((uint64_t)v7);
  v116 = (__int128 *)(v115 + 64);
  if (!v115)
    v116 = &ims::kEmptyString;
  v117 = *((unsigned __int8 *)v116 + 23);
  v118 = *((_QWORD *)v116 + 1);
  if ((v117 & 0x80u) == 0)
    v118 = v117;
  if (v118)
  {
    v119 = v256.__r_.__value_.__r.__words[0];
    v120 = (char *)SipMessage::header<SipConversationIdHeader>((uint64_t)v7);
    if (v120)
      v121 = (const std::string *)(v120 + 64);
    else
      v121 = (const std::string *)&ims::kEmptyString;
    SipIdString::set(v119 + 1616, v121);
    v122 = (char *)SipMessage::header<SipConversationIdHeader>((uint64_t)v7);
    if (v122)
      v123 = (const std::string *)(v122 + 64);
    else
      v123 = (const std::string *)&ims::kEmptyString;
    std::string::operator=((std::string *)((char *)&v208 + 8), v123);
  }
  v124 = (char *)SipMessage::header<SipContributionIdHeader>((uint64_t)v7);
  v125 = (__int128 *)(v124 + 64);
  if (!v124)
    v125 = &ims::kEmptyString;
  v126 = *((unsigned __int8 *)v125 + 23);
  v127 = *((_QWORD *)v125 + 1);
  if ((v126 & 0x80u) == 0)
    v127 = v126;
  if (v127)
  {
    v128 = v256.__r_.__value_.__r.__words[0];
    v129 = (char *)SipMessage::header<SipContributionIdHeader>((uint64_t)v7);
    if (v129)
      v130 = (const std::string *)(v129 + 64);
    else
      v130 = (const std::string *)&ims::kEmptyString;
    SipIdString::set(v128 + 1672, v130);
    v131 = (char *)SipMessage::header<SipContributionIdHeader>((uint64_t)v7);
    if (v131)
      v132 = (const std::string *)(v131 + 64);
    else
      v132 = (const std::string *)&ims::kEmptyString;
    std::string::operator=((std::string *)v210, v132);
  }
  v133 = (char *)SipMessage::header<SipInReplyToContributionIdHeader>((uint64_t)v7);
  v134 = (__int128 *)(v133 + 64);
  if (!v133)
    v134 = &ims::kEmptyString;
  v135 = *((unsigned __int8 *)v134 + 23);
  v136 = *((_QWORD *)v134 + 1);
  if ((v135 & 0x80u) == 0)
    v136 = v135;
  if (v136)
  {
    v137 = v256.__r_.__value_.__r.__words[0];
    v138 = (char *)SipMessage::header<SipInReplyToContributionIdHeader>((uint64_t)v7);
    if (v138)
      v139 = (const std::string *)(v138 + 64);
    else
      v139 = (const std::string *)&ims::kEmptyString;
    SipIdString::set(v137 + 1728, v139);
    v140 = (char *)SipMessage::header<SipInReplyToContributionIdHeader>((uint64_t)v7);
    if (v140)
      v141 = (const std::string *)(v140 + 64);
    else
      v141 = (const std::string *)&ims::kEmptyString;
    std::string::operator=((std::string *)&v211[1], v141);
  }
  v142 = SipMessage::header<SipContactHeader>((uint64_t)v7);
  if (v142)
  {
    v143 = v142[9];
    if (v143)
    {
      if (v143 != v142[10] && SipUri::isValidUri((SipUri *)(v143 + 8)))
      {
        v144 = v256.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v205, "+g.gsma.rcs.isbot");
        *(_BYTE *)(v144 + 1792) = v143 + 432 != (_QWORD)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v143 + 424, (void **)&v205.__r_.__value_.__l.__data_);
        if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v205.__r_.__value_.__l.__data_);
        SipUri::operator=((SipUri *)(v144 + 1096), v143 + 8);
      }
    }
  }
  v145 = (char *)SipMessage::header<SipSubjectHeader>((uint64_t)v7);
  v146 = (__int128 *)(v145 + 64);
  if (!v145)
    v146 = &ims::kEmptyString;
  v147 = *((unsigned __int8 *)v146 + 23);
  v148 = *((_QWORD *)v146 + 1);
  if ((v147 & 0x80u) == 0)
    v148 = v147;
  if (v148)
  {
    v149 = (char *)SipMessage::header<SipSubjectHeader>((uint64_t)v7);
    if (v149)
      v150 = (const std::string *)(v149 + 64);
    else
      v150 = (const std::string *)&ims::kEmptyString;
    std::string::operator=((std::string *)&v207, v150);
  }
  v151 = *(_QWORD *)(a1 + 136);
  v152 = *(std::__shared_weak_count **)(v151 + 16);
  if (v152)
  {
    v153 = std::__shared_weak_count::lock(v152);
    if (v153)
    {
      v154 = v153;
      v155 = *(unsigned __int8 *)(*(_QWORD *)(v151 + 8) + 2657);
      v156 = (unint64_t *)&v153->__shared_owners_;
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v154);
      }
      if (!v155)
        goto LABEL_250;
LABEL_271:
      v174 = v253;
      v175 = (std::__shared_weak_count *)v256.__r_.__value_.__l.__size_;
      v206 = *(_OWORD *)&v256.__r_.__value_.__l.__data_;
      if (v256.__r_.__value_.__l.__size_)
      {
        v176 = (unint64_t *)(v256.__r_.__value_.__l.__size_ + 8);
        do
          v177 = __ldxr(v176);
        while (__stxr(v177 + 1, v176));
      }
      SipSession::initializeWithOptions(v174, (uint64_t *)&v206, (std::string *)&v207);
      if (v175)
      {
        v178 = (unint64_t *)&v175->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
      v180 = *(_QWORD *)(a1 + 136);
      v204 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v180 + 16));
      v203 = *(_QWORD *)(v180 + 8);
      v181 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
      v202 = v253;
      if (*((_QWORD *)&v253 + 1))
      {
        v182 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
        do
          v183 = __ldxr(v182);
        while (__stxr(v183 + 1, v182));
      }
      BambiClient::handleIncomingLazuliSession((std::__shared_weak_count **)&v202, (uint64_t)&v205);
      ImsResult::operator=((uint64_t)&v248, (uint64_t)&v205);
      ImsResult::~ImsResult((ImsResult *)&v205);
      if (v181)
      {
        v184 = (unint64_t *)&v181->__shared_owners_;
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
      v171 = v204;
      if (!v204)
        goto LABEL_292;
      v186 = (unint64_t *)&v204->__shared_owners_;
      do
        v173 = __ldaxr(v186);
      while (__stlxr(v173 - 1, v186));
      goto LABEL_290;
    }
  }
  if (MEMORY[0xA61])
    goto LABEL_271;
LABEL_250:
  v158 = v253;
  v201 = *(_OWORD *)&v256.__r_.__value_.__l.__data_;
  if (v256.__r_.__value_.__l.__size_)
  {
    v159 = (unint64_t *)(v256.__r_.__value_.__l.__size_ + 8);
    do
      v160 = __ldxr(v159);
    while (__stxr(v160 + 1, v159));
  }
  SipSession::initializeWithOptions(v158, (uint64_t *)&v201, (uint64_t)v218);
  v161 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
  if (*((_QWORD *)&v201 + 1))
  {
    v162 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = *(_QWORD *)(a1 + 136);
  v204 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v164 + 16));
  v203 = *(_QWORD *)(v164 + 8);
  v165 = *(_QWORD **)(v203 + 136);
  v200 = v253;
  if (*((_QWORD *)&v253 + 1))
  {
    v166 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
    do
      v167 = __ldxr(v166);
    while (__stxr(v167 + 1, v166));
  }
  BambiClient::handleIncomingSession(v165, (std::__shared_weak_count **)&v200, (uint64_t)v7, (uint64_t)&v205);
  ImsResult::operator=((uint64_t)&v248, (uint64_t)&v205);
  ImsResult::~ImsResult((ImsResult *)&v205);
  v168 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
  if (*((_QWORD *)&v200 + 1))
  {
    v169 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = v204;
  if (!v204)
    goto LABEL_292;
  v172 = (unint64_t *)&v204->__shared_owners_;
  do
    v173 = __ldaxr(v172);
  while (__stlxr(v173 - 1, v172));
LABEL_290:
  if (!v173)
  {
    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
    std::__shared_weak_count::__release_weak(v171);
  }
LABEL_292:
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v248 + 1) + 24))(*((_QWORD *)&v248 + 1), v249))
  {
    v188 = *(_QWORD *)(a1 + 16);
    v187 = a1 + 16;
    v189 = (*(uint64_t (**)(uint64_t))(v188 + 56))(v187);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, v189);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v189 + 8), (uint64_t)"handleIncomingSession failed: ", 30);
    *(_BYTE *)(v189 + 17) = 0;
    (*(void (**)(__int128 *, uint64_t))(v248 + 16))(&v248, v189);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v189 + 64))(v189, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v189 + 17) = 0;
    ImsResult::operator=(a3, (uint64_t)&v248);
    SipSession::handleInitializationFailure((SipSession *)v253);
    v190 = (std::__shared_weak_count *)v256.__r_.__value_.__l.__size_;
    *(_OWORD *)&v256.__r_.__value_.__l.__data_ = 0uLL;
    if (v190)
    {
      v191 = (unint64_t *)&v190->__shared_owners_;
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
  }
  if (SHIBYTE(v217) < 0)
    operator delete(*((void **)&v216 + 1));
  if (SBYTE7(v216) < 0)
    operator delete((void *)v215);
  if (SHIBYTE(v212) < 0)
    operator delete(v211[1]);
  if (SHIBYTE(v211[0]) < 0)
    operator delete(v210[0]);
  if (SHIBYTE(v209) < 0)
    operator delete(*((void **)&v208 + 1));
  if (SBYTE7(v208) < 0)
    operator delete((void *)v207);
  BambiCallOptions::~BambiCallOptions(v218);
LABEL_311:
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
  if (*((_QWORD *)&v253 + 1))
  {
    v193 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
    do
      v96 = __ldaxr(v193);
    while (__stlxr(v96 - 1, v193));
LABEL_314:
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
LABEL_316:
  *(_OWORD *)a4 = *(_OWORD *)&v256.__r_.__value_.__l.__data_;
  *(_OWORD *)&v256.__r_.__value_.__l.__data_ = 0uLL;
LABEL_317:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_319:
  ImsResult::~ImsResult((ImsResult *)&v248);
  v194 = (std::__shared_weak_count *)v256.__r_.__value_.__l.__size_;
  if (v256.__r_.__value_.__l.__size_)
  {
    v195 = (unint64_t *)(v256.__r_.__value_.__l.__size_ + 8);
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = v255;
  if (v255)
  {
    v198 = (unint64_t *)&v255->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
}

