void sub_1BEF44610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void XcapCBRule::constructTree(XcapCBRule *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *__p;
  std::__shared_weak_count *v47;
  char v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  char *v65;

  *a2 = 0;
  a2[1] = 0;
  v4 = (char *)this + 8;
  bambi::XmlTreeItem::makeNode((XcapCBRule *)((char *)this + 8), a2);
  v5 = a2[1];
  v61 = *a2;
  v62 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  (*(void (**)(char *, uint64_t *, char *, char *))(*((_QWORD *)this + 1) + 48))(v4, &v61, XcapCBRule::kId, (char *)this + 64);
  v8 = v62;
  if (v62)
  {
    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *((_QWORD *)this + 11);
  if (v11)
  {
    __p = 0;
    v47 = 0;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v11 + 96))(&__p);
    v12 = a2[1];
    v59 = *a2;
    v60 = (std::__shared_weak_count *)v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v57 = __p;
    v58 = v47;
    if (v47)
    {
      v15 = (unint64_t *)&v47->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    (*(void (**)(char *, uint64_t *, void **))(*(_QWORD *)v4 + 56))(v4, &v59, &v57);
    v17 = v58;
    if (v58)
    {
      v18 = (unint64_t *)&v58->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v60;
    if (v60)
    {
      v21 = (unint64_t *)&v60->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v47;
    if (v47)
    {
      v24 = (unint64_t *)&v47->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v55 = 0;
  v56 = 0;
  v26 = a2[1];
  v53 = *a2;
  v54 = (std::__shared_weak_count *)v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v64 = 1;
  __p = &v64;
  v29 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v64, (uint64_t)&std::piecewise_construct, (char **)&__p);
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, const char *, uint64_t **))(*(_QWORD *)v4 + 64))(&v55, v4, &v53, "actions", v29 + 5);
  v30 = v54;
  if (v54)
  {
    v31 = (unint64_t *)&v54->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v49 = v55;
  v50 = v56;
  if (v56)
  {
    v33 = (unint64_t *)&v56->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  if (*((_BYTE *)this + 104))
    v35 = "true";
  else
    v35 = "false";
  std::string::basic_string[abi:ne180100]<0>(&__p, v35);
  v63 = 0;
  v65 = (char *)&v63;
  v36 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v63, (uint64_t)&std::piecewise_construct, &v65);
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, const char *, void **, uint64_t **))(*(_QWORD *)v4 + 80))(&v51, v4, &v49, "allow", &__p, v36 + 5);
  v37 = v52;
  if (v52)
  {
    v38 = (unint64_t *)&v52->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v48 < 0)
    operator delete(__p);
  v40 = v50;
  if (v50)
  {
    v41 = (unint64_t *)&v50->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v56;
  if (v56)
  {
    v44 = (unint64_t *)&v56->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1BEF44A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;
  uint64_t v25;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v25 - 80);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'XcapCBRule::constructTree(XcapCBRule *this@<X0>, uint64_t *a2@<X8>)
{
  XcapCBRule::constructTree((XcapCBRule *)((char *)this - 8), a2);
}

uint64_t XcapCBRule::asString@<X0>(XcapCBRule *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  XcapCBCondition *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  void *__p[2];
  unsigned __int8 v21;
  _OWORD v22[4];
  void *v23[2];
  __int128 v24;
  __int128 v25;
  _BYTE v26[144];
  uint64_t v27;
  std::locale v28;

  v27 = 0;
  memset(v26, 0, sizeof(v26));
  v24 = 0u;
  v25 = 0u;
  *(_OWORD *)v23 = 0u;
  memset(v22, 0, sizeof(v22));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Rule-Id: ", 9);
  v5 = *((char *)this + 87);
  if (v5 >= 0)
    v6 = (char *)this + 64;
  else
    v6 = (char *)*((_QWORD *)this + 8);
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)this + 87);
  else
    v7 = *((_QWORD *)this + 9);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",  ", 3);
  v10 = (XcapCBCondition *)*((_QWORD *)this + 11);
  if (v10)
    XcapCBCondition::asString(v10, __p);
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v21 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v21 & 0x80u) == 0)
    v12 = v21;
  else
    v12 = (uint64_t)__p[1];
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", Allowed: ", 11);
  if (*((_BYTE *)this + 104))
    v15 = "Yes";
  else
    v15 = "No";
  if (*((_BYTE *)this + 104))
    v16 = 3;
  else
    v16 = 2;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v18 = std::locale::use_facet(&v28, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v28);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v21 < 0)
    operator delete(__p[0]);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v22 + 8, a2);
  *(_QWORD *)&v22[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v22 + *(_QWORD *)(*(_QWORD *)&v22[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v22[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v24) < 0)
    operator delete(v23[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v26);
}

void sub_1BEF44CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void XcapCBRule::~XcapCBRule(XcapCBRule *this)
{
  void **v2;

  *(_QWORD *)this = off_1E78C8A30;
  *((_QWORD *)this + 1) = &unk_1E78C8AA8;
  v2 = (void **)((char *)this + 8);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  bambi::XmlTreeItem::~XmlTreeItem(v2);
}

{
  void **v2;

  *(_QWORD *)this = off_1E78C8A30;
  *((_QWORD *)this + 1) = &unk_1E78C8AA8;
  v2 = (void **)((char *)this + 8);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'XcapCBRule::~XcapCBRule(XcapCBRule *this)
{
  *((_QWORD *)this - 1) = off_1E78C8A30;
  *(_QWORD *)this = &unk_1E78C8AA8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  bambi::XmlTreeItem::~XmlTreeItem((void **)this);
}

{
  *((_QWORD *)this - 1) = off_1E78C8A30;
  *(_QWORD *)this = &unk_1E78C8AA8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  bambi::XmlTreeItem::~XmlTreeItem((void **)this);
  JUMPOUT(0x1C3B87100);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100I15XcapCBConditionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x60uLL);
  result = _ZNSt3__120__shared_ptr_emplaceI15XcapCBConditionNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1BEF44E88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceI15XcapCBConditionNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78C8B58;
  XcapCBCondition::XcapCBCondition((XcapCBCondition *)(a1 + 3));
  return a1;
}

void sub_1BEF44ED0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<XcapCBCondition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C8B58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<XcapCBCondition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C8B58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<XcapCBCondition>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (__int128 *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1BEF44FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void SipContactParamList::~SipContactParamList(SipContactParamList *this)
{
  void **v1;

  *(_QWORD *)this = off_1E78C8C70;
  v1 = (void **)((char *)this + 8);
  std::vector<SipContactParam>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_1E78C8C70;
  v2 = (void **)((char *)this + 8);
  std::vector<SipContactParam>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1C3B87100](this, 0xA1C4030951706);
}

uint64_t SipContactParamList::addContact(SipContactParamList *this, const SipContactParam *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = *((_QWORD *)this + 2);
  if (v3 >= *((_QWORD *)this + 3))
  {
    result = std::vector<SipContactParam>::__push_back_slow_path<SipContactParam const&>((uint64_t *)this + 1, (uint64_t)a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<SipContactParam,SipContactParam const&,SipContactParam*>(*((_QWORD *)this + 2), (uint64_t)a2);
    result = v3 + 488;
    *((_QWORD *)this + 2) = v3 + 488;
  }
  *((_QWORD *)this + 2) = result;
  return result;
}

void sub_1BEF450C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t SipContactHeader::encodeValue(SipContactHeader *this, ImsOutStream *a2)
{
  SipContactParamList::toStream((SipContactHeader *)((char *)this + 64), a2);
  return 1;
}

BOOL SipContactHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  return SipContactParamList::fromString((uint64_t *)(a1 + 64), a2);
}

BOOL SipContactHeader::mergeHeader(SipContactHeader *this, const SipHeader *lpsrc)
{
  _QWORD *v3;

  if (v3)
    std::vector<SipContactParam>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SipContactParam const*>,std::__wrap_iter<SipContactParam const*>>((uint64_t *)this + 9, *((_QWORD *)this + 10), v3[9], v3[10], 0x4FBCDA3AC10C9715 * ((uint64_t)(v3[10] - v3[9]) >> 3));
  return v3 != 0;
}

void SipContactHeader::~SipContactHeader(SipContactHeader *this)
{
  void **v2;

  *(_QWORD *)this = off_1E78C8BA8;
  *((_QWORD *)this + 8) = off_1E78C8C70;
  v2 = (void **)((char *)this + 72);
  std::vector<SipContactParam>::__destroy_vector::operator()[abi:ne180100](&v2);
  SipHeader::~SipHeader((void **)this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E78C8BA8;
  *((_QWORD *)this + 8) = off_1E78C8C70;
  v2 = (void **)((char *)this + 72);
  std::vector<SipContactParam>::__destroy_vector::operator()[abi:ne180100](&v2);
  SipHeader::~SipHeader((void **)this);
  MEMORY[0x1C3B87100]();
}

SipHeader *SipContactHeader::clone(SipContactHeader *this)
{
  SipHeader *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v2 = (SipHeader *)operator new();
  SipHeader::SipHeader(v2, this);
  *(_QWORD *)v2 = off_1E78C8BA8;
  *((_QWORD *)v2 + 8) = off_1E78C8C70;
  *((_QWORD *)v2 + 9) = 0;
  *((_QWORD *)v2 + 10) = 0;
  *((_QWORD *)v2 + 11) = 0;
  if (v2 != this)
  {
    v3 = *((_QWORD *)this + 9);
    v4 = *((_QWORD *)this + 10);
    if (v4 != v3)
    {
      v5 = 0x4FBCDA3AC10C9715 * ((v4 - v3) >> 3);
      if (v5 >= 0x864B8A7DE6D1D7)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipContactParam>>((uint64_t)v2 + 88, v5);
      v7 = 0;
      *((_QWORD *)v2 + 9) = v6;
      *((_QWORD *)v2 + 10) = v6;
      *((_QWORD *)v2 + 11) = &v6[488 * v8];
      do
      {
        *(_QWORD *)&v6[v7] = &off_1E78C8C40;
        SipUri::SipUri((SipUri *)&v6[v7 + 8], (const SipUri *)(v3 + v7 + 8));
        *(_QWORD *)&v6[v7 + 416] = &off_1E78B82D8;
        std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)&v6[v7 + 424], *(void ***)(v3 + v7 + 424), (void **)(v3 + 432 + v7));
        v9 = &v6[v7];
        v9[449] = 1;
        v9[448] = *(_BYTE *)(v3 + v7 + 448);
        *((_DWORD *)v9 + 114) = *(_DWORD *)(v3 + v7 + 456);
        std::map<std::string,std::map<std::string,std::string>>::map[abi:ne180100]((uint64_t *)&v6[v7 + 464], v3 + v7 + 464);
        v7 += 488;
      }
      while (v3 + v7 != v4);
      *((_QWORD *)v2 + 10) = &v6[v7];
    }
  }
  return v2;
}

void sub_1BEF453B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11)
{
  *(_QWORD *)(a10 + 64) = off_1E78C8C70;
  a11 = a9;
  std::vector<SipContactParam>::__destroy_vector::operator()[abi:ne180100](&a11);
  SipHeader::~SipHeader((void **)a10);
  MEMORY[0x1C3B87100](a10, 0x10B3C40010BB2DELL);
  _Unwind_Resume(a1);
}

uint64_t SipContactHeader::allowsDuplicates(SipContactHeader *this)
{
  return 1;
}

uint64_t SipContactHeader::allowsMerging(SipContactHeader *this)
{
  return 1;
}

void SipContactParam::~SipContactParam(SipContactParam *this)
{
  *(_QWORD *)this = &off_1E78C8C40;
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 464, *((_QWORD **)this + 59));
  *((_QWORD *)this + 52) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 424, *((_QWORD **)this + 54));
  SipUri::~SipUri((SipContactParam *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_1E78C8C40;
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 464, *((_QWORD **)this + 59));
  *((_QWORD *)this + 52) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 424, *((_QWORD **)this + 54));
  SipUri::~SipUri((SipContactParam *)((char *)this + 8));
  JUMPOUT(0x1C3B87100);
}

uint64_t std::construct_at[abi:ne180100]<SipContactParam,SipContactParam,SipContactParam*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E78C8C40;
  SipUri::SipUri((SipUri *)(a1 + 8), (const SipUri *)(a2 + 8));
  *(_QWORD *)(a1 + 416) = &off_1E78B82D8;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)(a1 + 424), *(void ***)(a2 + 424), (void **)(a2 + 432));
  *(_BYTE *)(a1 + 449) = 1;
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  v4 = a1 + 472;
  v5 = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 472) = v5;
  v6 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 480) = v6;
  if (v6)
  {
    *(_QWORD *)(v5 + 16) = v4;
    *(_QWORD *)(a2 + 464) = a2 + 472;
    *(_QWORD *)(a2 + 472) = 0;
    *(_QWORD *)(a2 + 480) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 464) = v4;
  }
  return a1;
}

void sub_1BEF45590(_Unwind_Exception *a1)
{
  SipUri *v1;

  SipUri::~SipUri(v1);
  _Unwind_Resume(a1);
}

void SipContactParam::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "ContactParam");
}

uint64_t std::vector<SipContactParam>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipContactParam>,std::reverse_iterator<SipContactParam*>,std::reverse_iterator<SipContactParam*>,std::reverse_iterator<SipContactParam*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipContactParam>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x864B8A7DE6D1D7)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(488 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipContactParam>,std::reverse_iterator<SipContactParam*>,std::reverse_iterator<SipContactParam*>,std::reverse_iterator<SipContactParam*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 488;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 488;
    std::construct_at[abi:ne180100]<SipContactParam,SipContactParam const&,SipContactParam*>(v12, v10 + a3);
  }
  return a6;
}

uint64_t std::construct_at[abi:ne180100]<SipContactParam,SipContactParam const&,SipContactParam*>(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E78C8C40;
  SipUri::SipUri((SipUri *)(a1 + 8), (const SipUri *)(a2 + 8));
  *(_QWORD *)(a1 + 416) = &off_1E78B82D8;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)(a1 + 424), *(void ***)(a2 + 424), (void **)(a2 + 432));
  *(_BYTE *)(a1 + 449) = 1;
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  std::map<std::string,std::map<std::string,std::string>>::map[abi:ne180100]((uint64_t *)(a1 + 464), a2 + 464);
  return a1;
}

void sub_1BEF45814(_Unwind_Exception *a1)
{
  SipUri *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 + 416) = v4;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(_QWORD **)(v2 + 432));
  SipUri::~SipUri(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::map<std::string,std::string>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::map<std::string,std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,std::string>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1BEF4587C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::map<std::string,std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,std::string>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,std::string>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,std::string>> const&>(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  void **v12;

  v11 = 0;
  v12 = 0;
  v6 = std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__construct_node<std::pair<std::string const,std::map<std::string,std::string>> const&>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__construct_node<std::pair<std::string const,std::map<std::string,std::string>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1BEF45A10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1BEF45A80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__split_buffer<SipContactParam>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 488;
    (**(void (***)(uint64_t))(i - 488))(i - 488);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void SipContactParamList::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "ContactParamList");
}

void std::vector<SipContactParam>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void (***v2)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  BOOL v7;

  v1 = *a1;
  v2 = (void (***)(_QWORD))**a1;
  if (v2)
  {
    v4 = (void (***)(_QWORD))v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 61;
      do
      {
        (**v6)(v6);
        v7 = v6 == v2;
        v6 -= 61;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<SipContactParam>::__push_back_slow_path<SipContactParam const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x4FBCDA3AC10C9715 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x864B8A7DE6D1D6)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x4FBCDA3AC10C9715 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x4325C53EF368EBLL)
    v9 = 0x864B8A7DE6D1D6;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipContactParam>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[488 * v4];
  v16 = &v10[488 * v9];
  std::construct_at[abi:ne180100]<SipContactParam,SipContactParam const&,SipContactParam*>((uint64_t)v14, a2);
  v15 = v14 + 488;
  std::vector<SipContactParam>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<SipContactParam>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1BEF45DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<SipContactParam>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,std::string>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::map<std::string,std::string> &>::operator=[abi:ne180100]<std::string const,std::map<std::string,std::string>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          v18[0] = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<unsigned int>::__insert_node_at(v5, v18[0], leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_multi<std::pair<std::string const,std::map<std::string,std::string>> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1BEF45F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::map<std::string,std::string> &>::operator=[abi:ne180100]<std::string const,std::map<std::string,std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(uint64_t ***)(a1 + 8);
  if (v4 != (uint64_t **)(a2 + 24))
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v4, *(__int128 **)(a2 + 24), (__int128 *)(a2 + 32));
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_multi<std::pair<std::string const,std::map<std::string,std::string>> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  memset(v7, 0, sizeof(v7));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__construct_node<std::pair<std::string const,std::map<std::string,std::string>> const&>((uint64_t)a1, a2, v7);
  v6 = 0;
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v6, v7[0] + 4);
  std::__tree<unsigned int>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1BEF46064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t XpcConnection::XpcConnection(uint64_t a1, char *name, dispatch_queue_t targetq)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = targetq;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  if (name[23] < 0)
    name = *(char **)name;
  *(_QWORD *)a1 = xpc_connection_create_mach_service(name, targetq, 0);
  XpcConnection::initializeConnection_nl((XpcConnection *)a1, 1);
  return a1;
}

void sub_1BEF4610C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char **v3;
  char **v4;

  std::__tree<std::string>::destroy(v2, *v4);
  std::__tree<std::string>::destroy(v1, *v3);
  _Unwind_Resume(a1);
}

void XpcConnection::initializeConnection_nl(XpcConnection *this, int a2)
{
  NSObject *v4;
  uint64_t v5;
  _xpc_connection_s *v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];
  _QWORD aBlock[5];
  _QWORD handler[8];
  _QWORD v12[3];
  char v13;

  v4 = *((_QWORD *)this + 1);
  if (v4)
    dispatch_retain(v4);
  v5 = MEMORY[0x1E0C809B0];
  v8[4] = this;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZN13XpcConnection23initializeConnection_nlEb_block_invoke;
  v9[3] = &__block_descriptor_tmp_4;
  v9[4] = this;
  v7[4] = this;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN13XpcConnection23initializeConnection_nlEb_block_invoke_2;
  v8[3] = &__block_descriptor_tmp_5;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN13XpcConnection23initializeConnection_nlEb_block_invoke_3;
  v7[3] = &__block_descriptor_tmp_6_0;
  v6 = *(_xpc_connection_s **)this;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  v13 = 1;
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 0x40000000;
  handler[2] = ___ZL15setEventHandlerP17_xpc_connection_sU13block_pointerFvRKN3xpc4dictEEU13block_pointerFvvES8_PS8__block_invoke;
  handler[3] = &unk_1E78C8D50;
  handler[4] = v8;
  handler[5] = v7;
  handler[6] = v9;
  handler[7] = v12;
  xpc_connection_set_event_handler(v6, handler);
  aBlock[0] = v5;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZL15setEventHandlerP17_xpc_connection_sU13block_pointerFvRKN3xpc4dictEEU13block_pointerFvvES8_PS8__block_invoke_2;
  aBlock[3] = &unk_1E78C8D78;
  aBlock[4] = v12;
  *((_QWORD *)this + 11) = _Block_copy(aBlock);
  _Block_object_dispose(v12, 8);
  if (a2)
    xpc_connection_resume(*(xpc_connection_t *)this);
}

void sub_1BEF46280(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void XpcConnection::~XpcConnection(XpcConnection *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  XpcConnection *v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  XpcConnection *v46;
  XpcConnection *v47;
  BOOL v48;
  uint64_t v49;
  NSObject *v50;
  _QWORD block[7];
  _QWORD v52[5];
  void *__p;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  __n128 (*v59)(_QWORD *, uint64_t);
  void (*v60)(uint64_t);
  void *v61;
  void *v62;
  uint64_t v63;

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    (*(void (**)(void))(v2 + 16))();
    _Block_release(*((const void **)this + 11));
  }
  v56 = 0;
  v57 = &v56;
  v58 = 0x4002000000;
  v59 = __Block_byref_object_copy__1;
  v60 = __Block_byref_object_dispose__1;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  v52[0] = 0;
  v52[1] = v52;
  v52[2] = 0x4002000000;
  v52[3] = __Block_byref_object_copy__1;
  v52[4] = __Block_byref_object_dispose__2;
  v54 = 0;
  v55 = 0;
  __p = 0;
  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    v4 = (char *)operator new(8uLL);
    *(_QWORD *)v4 = v3;
    v5 = v4 + 8;
    v54 = v4 + 8;
    v55 = v4 + 8;
    __p = v4;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = *((_QWORD *)this + 9);
  if (v6)
  {
    v7 = v5 - v4;
    v8 = (v5 - v4) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    if (v7 >> 2 > v9)
      v9 = v7 >> 2;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      if (v10 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(8 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * v8];
    *(_QWORD *)v12 = v6;
    v13 = v12 + 8;
    if (v5 != v4)
    {
      do
      {
        v14 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v12 - 1) = v14;
        v12 -= 8;
      }
      while (v5 != v4);
      v4 = (char *)__p;
    }
    __p = v12;
    v54 = v13;
    v55 = &v11[8 * v10];
    if (v4)
      operator delete(v4);
    v54 = v13;
  }
  v15 = *((_QWORD *)this + 10);
  if (v15)
  {
    v16 = v57;
    v18 = (_QWORD *)v57[6];
    v17 = v57[7];
    if ((unint64_t)v18 >= v17)
    {
      v20 = v57[5];
      v21 = ((uint64_t)v18 - v20) >> 3;
      if ((unint64_t)(v21 + 1) >> 61)
LABEL_74:
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v22 = v17 - v20;
      v23 = v22 >> 2;
      if (v22 >> 2 <= (unint64_t)(v21 + 1))
        v23 = v21 + 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
      {
        v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v24);
        v15 = *((_QWORD *)this + 10);
      }
      else
      {
        v25 = 0;
      }
      v26 = (_QWORD *)(v24 + 8 * v21);
      v27 = v24 + 8 * v25;
      *v26 = v15;
      v19 = v26 + 1;
      v29 = (char *)v16[5];
      v28 = (char *)v16[6];
      if (v28 != v29)
      {
        do
        {
          v30 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *--v26 = v30;
        }
        while (v28 != v29);
        v28 = (char *)v16[5];
      }
      v16[5] = (uint64_t)v26;
      v16[6] = (uint64_t)v19;
      v16[7] = v27;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *v18 = v15;
      v19 = v18 + 1;
    }
    v16[6] = (uint64_t)v19;
  }
  v31 = (XpcConnection *)*((_QWORD *)this + 2);
  if (v31 != (XpcConnection *)((char *)this + 24))
  {
    do
    {
      v32 = v57;
      v34 = (_QWORD *)v57[6];
      v33 = v57[7];
      if ((unint64_t)v34 >= v33)
      {
        v36 = v57[5];
        v37 = ((uint64_t)v34 - v36) >> 3;
        if ((unint64_t)(v37 + 1) >> 61)
          goto LABEL_74;
        v38 = v33 - v36;
        v39 = v38 >> 2;
        if (v38 >> 2 <= (unint64_t)(v37 + 1))
          v39 = v37 + 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v39;
        if (v40)
          v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v40);
        else
          v41 = 0;
        v42 = (_QWORD *)(v40 + 8 * v37);
        *v42 = *((_QWORD *)v31 + 7);
        v35 = v42 + 1;
        v44 = (char *)v32[5];
        v43 = (char *)v32[6];
        if (v43 != v44)
        {
          do
          {
            v45 = *((_QWORD *)v43 - 1);
            v43 -= 8;
            *--v42 = v45;
          }
          while (v43 != v44);
          v43 = (char *)v32[5];
        }
        v32[5] = (uint64_t)v42;
        v32[6] = (uint64_t)v35;
        v32[7] = v40 + 8 * v41;
        if (v43)
          operator delete(v43);
      }
      else
      {
        *v34 = *((_QWORD *)v31 + 7);
        v35 = v34 + 1;
      }
      v32[6] = (uint64_t)v35;
      v46 = (XpcConnection *)*((_QWORD *)v31 + 1);
      if (v46)
      {
        do
        {
          v47 = v46;
          v46 = *(XpcConnection **)v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v47 = (XpcConnection *)*((_QWORD *)v31 + 2);
          v48 = *(_QWORD *)v47 == (_QWORD)v31;
          v31 = v47;
        }
        while (!v48);
      }
      v31 = v47;
    }
    while (v47 != (XpcConnection *)((char *)this + 24));
  }
  v49 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    xpc_connection_cancel(*(xpc_connection_t *)this);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN13XpcConnectionD2Ev_block_invoke;
  block[3] = &unk_1E78C8CC8;
  block[4] = v52;
  block[5] = &v56;
  block[6] = v49;
  v50 = *((_QWORD *)this + 1);
  if (v50)
  {
    dispatch_async(v50, block);
    dispatch_release(*((dispatch_object_t *)this + 1));
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    ___ZN13XpcConnectionD2Ev_block_invoke(block);
  }
  _Block_object_dispose(v52, 8);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v56, 8);
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  std::__tree<std::string>::destroy((uint64_t)this + 40, *((char **)this + 6));
  std::__tree<std::string>::destroy((uint64_t)this + 16, *((char **)this + 3));
}

__n128 __Block_byref_object_copy__1(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN13XpcConnectionD2Ev_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  const void **i;
  const void *v5;
  uint64_t v6;
  const void **j;
  const void *v8;

  v2 = (void *)a1[6];
  if (v2)
    xpc_release(v2);
  v3 = *(_QWORD *)(a1[4] + 8);
  for (i = *(const void ***)(v3 + 40); i != *(const void ***)(v3 + 48); ++i)
  {
    v5 = *i;
    _Block_release(v5);
    v3 = *(_QWORD *)(a1[4] + 8);
  }
  v6 = *(_QWORD *)(a1[5] + 8);
  for (j = *(const void ***)(v6 + 40); j != *(const void ***)(v6 + 48); ++j)
  {
    v8 = *j;
    _Block_release(v8);
    v6 = *(_QWORD *)(a1[5] + 8);
  }
}

void ___ZN13XpcConnection23initializeConnection_nlEb_block_invoke(uint64_t a1, void **a2)
{
  uint64_t v2;
  void *v3;
  xpc_object_t v4;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v6;
  char *string_ptr;
  void (**v8)(void *, xpc_object_t *);
  xpc_object_t reply;
  xpc_object_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  xpc_object_t v14;
  xpc_object_t v15;
  void **v16;
  _QWORD *v17;
  void **v18;
  _QWORD *v19;
  void **v20;
  char v21;
  _QWORD *v22;
  void (**v23)(void *, xpc_object_t *, xpc_object_t *);
  void **v24;
  xpc_object_t original;
  xpc_object_t message;
  void *__p[2];
  char v28;
  xpc_object_t xstring;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *a2;
  original = v3;
  if (v3)
  {
    xpc_retain(v3);
    v4 = original;
  }
  else
  {
    v4 = xpc_null_create();
    original = v4;
  }
  remote_connection = xpc_dictionary_get_remote_connection(v4);
  v6 = remote_connection;
  if (remote_connection)
    xpc_retain(remote_connection);
  else
    v6 = (_xpc_connection_s *)xpc_null_create();
  xstring = 0;
  __p[0] = &original;
  __p[1] = "request";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)__p, &xstring);
  if (MEMORY[0x1C3B87B98](xstring) == MEMORY[0x1E0C81350])
  {
    xpc::dict::to_debug_string((xpc::dict *)__p, (uint64_t)original);
    if (v28 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    syslog(5, "got no key named 'request'; got: %s\n", (const char *)v12);
  }
  else
  {
    string_ptr = (char *)xpc_string_get_string_ptr(xstring);
    if (string_ptr)
    {
      v8 = *(void (***)(void *, xpc_object_t *))(v2 + 80);
      message = 0;
      reply = xpc_dictionary_create_reply(original);
      v10 = reply;
      v11 = MEMORY[0x1E0C812F8];
      if (reply)
      {
        message = reply;
      }
      else
      {
        v10 = xpc_null_create();
        message = v10;
        if (!v10)
        {
          v14 = xpc_null_create();
          v10 = 0;
          goto LABEL_26;
        }
      }
      if (MEMORY[0x1C3B87B98](v10) == v11)
      {
        xpc_retain(v10);
        goto LABEL_27;
      }
      v14 = xpc_null_create();
LABEL_26:
      message = v14;
LABEL_27:
      xpc_release(v10);
      v15 = message;
      if (MEMORY[0x1C3B87B98](message) == v11)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, string_ptr);
        v19 = *(_QWORD **)(v2 + 48);
        v18 = (void **)(v2 + 48);
        v17 = v19;
        if (!v19)
          goto LABEL_44;
        v20 = v18;
        do
        {
          v21 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17 + 4, __p);
          if (v21 >= 0)
            v22 = v17;
          else
            v22 = v17 + 1;
          if (v21 >= 0)
            v20 = (void **)v17;
          v17 = (_QWORD *)*v22;
        }
        while (*v22);
        if (v20 == v18
          || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v20 + 4) & 0x80) != 0)
        {
LABEL_44:
          v20 = v18;
        }
        if (v28 < 0)
          operator delete(__p[0]);
        if (v18 != v20)
        {
          v23 = (void (**)(void *, xpc_object_t *, xpc_object_t *))v20[7];
          if (v23)
          {
            v23[2](v23, &original, &message);
            xpc_connection_send_message(v6, message);
            v15 = message;
            goto LABEL_58;
          }
        }
        xpc::dict::to_debug_string((xpc::dict *)__p, (uint64_t)original);
        if (v28 >= 0)
          v24 = __p;
        else
          v24 = (void **)__p[0];
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, string_ptr);
        v16 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v2 + 16, __p);
        if (v28 < 0)
          operator delete(__p[0]);
        if ((void **)(v2 + 24) != v16)
          v8 = (void (**)(void *, xpc_object_t *))v16[7];
        if (v8)
        {
          v8[2](v8, &original);
LABEL_58:
          xpc_release(v15);
          goto LABEL_59;
        }
        xpc::dict::to_debug_string((xpc::dict *)__p, (uint64_t)original);
        if (v28 >= 0)
          v24 = __p;
        else
          v24 = (void **)__p[0];
      }
      syslog(5, "Unhandled message for request: %s\n", (const char *)v24);
      if (v28 < 0)
        operator delete(__p[0]);
      goto LABEL_58;
    }
    xpc::dict::to_debug_string((xpc::dict *)__p, (uint64_t)original);
    if (v28 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    syslog(5, "got empty request, dropping; got: %s\n", (const char *)v13);
  }
  if (v28 < 0)
    operator delete(__p[0]);
LABEL_59:
  xpc_release(xstring);
  xpc_release(v6);
  xpc_release(original);
}

void sub_1BEF46AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, xpc_object_t object)
{
  void *v19;
  void *v20;

  if (a18 < 0)
    operator delete(__p);
  xpc_release(v20);
  xpc_release(object);
  xpc_release(v19);
  xpc_release(a11);
  _Unwind_Resume(a1);
}

uint64_t ___ZN13XpcConnection23initializeConnection_nlEb_block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t ___ZN13XpcConnection23initializeConnection_nlEb_block_invoke_3(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void *XpcConnection::setDisconnectionHandler(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;

  v4 = *(const void **)(a1 + 64);
  if (v4)
    _Block_release(v4);
  result = _Block_copy(aBlock);
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

void *XpcConnection::setInterruptionHandler(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;

  v4 = *(const void **)(a1 + 72);
  if (v4)
    _Block_release(v4);
  result = _Block_copy(aBlock);
  *(_QWORD *)(a1 + 72) = result;
  return result;
}

uint64_t *XpcConnection::setHandlerForMessage(uint64_t a1, void **a2, const void *a3)
{
  uint64_t **v6;
  void **v7;
  void *v8;
  uint64_t *result;
  void **v10;

  v6 = (uint64_t **)(a1 + 16);
  v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 16, a2);
  if ((void **)(a1 + 24) != v7)
    _Block_release(v7[7]);
  v8 = _Block_copy(a3);
  v10 = a2;
  result = std::__tree<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v10);
  result[7] = (uint64_t)v8;
  return result;
}

void *XpcConnection::setDefaultMessageHandler(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;

  v4 = *(const void **)(a1 + 80);
  if (v4)
    _Block_release(v4);
  result = _Block_copy(aBlock);
  *(_QWORD *)(a1 + 80) = result;
  return result;
}

void xpc::dict::to_debug_string(xpc::dict *this, uint64_t a2)
{
  char *v3;

  v3 = (char *)MEMORY[0x1C3B87B20](a2);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  std::string::basic_string[abi:ne180100]<0>(this, v3);
  free(v3);
}

void ___ZL15setEventHandlerP17_xpc_connection_sU13block_pointerFvRKN3xpc4dictEEU13block_pointerFvvES8_PS8__block_invoke(_QWORD *a1, void *a2)
{
  xpc_object_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t object;

  if (*(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24))
  {
    v2 = a2;
    v4 = MEMORY[0x1C3B87B98](a2);
    if (v4 != MEMORY[0x1E0C81310])
    {
      v5 = MEMORY[0x1E0C812F8];
      if (v4 != MEMORY[0x1E0C812F8])
      {
        syslog(5, "Got unexpected event\n");
        return;
      }
      v7 = a1[6];
      if (v2)
      {
        xpc_retain(v2);
        object = v2;
      }
      else
      {
        v2 = xpc_null_create();
        object = v2;
        if (!v2)
        {
          v8 = xpc_null_create();
          v2 = 0;
          goto LABEL_18;
        }
      }
      if (MEMORY[0x1C3B87B98](v2) == v5)
      {
        xpc_retain(v2);
LABEL_19:
        (*(void (**)(uint64_t, xpc_object_t *))(v7 + 16))(v7, &object);
        xpc_release(object);
        object = 0;
        xpc_release(v2);
        return;
      }
      v8 = xpc_null_create();
LABEL_18:
      object = v8;
      goto LABEL_19;
    }
    if (v2 == (xpc_object_t)MEMORY[0x1E0C81258])
    {
      syslog(5, "Connection interrupted!\n");
      v6 = a1[4];
      if (!v6)
        return;
    }
    else
    {
      if (v2 != (xpc_object_t)MEMORY[0x1E0C81260])
        return;
      syslog(5, "Connection invalid!\n");
      v6 = a1[5];
      if (!v6)
        return;
    }
    (*(void (**)(void))(v6 + 16))();
  }
}

void sub_1BEF46EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZL15setEventHandlerP17_xpc_connection_sU13block_pointerFvRKN3xpc4dictEEU13block_pointerFvvES8_PS8__block_invoke_2(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 0;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  v8 = (std::string *)(v7 + 32);
  v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  *((_QWORD *)v7 + 7) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BEF47050(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void SipLocationDiscoveryData::SipLocationDiscoveryData(SipLocationDiscoveryData *this)
{
  char *v2;
  void *__p[2];
  char v4;

  *(_QWORD *)this = &off_1E78CE278;
  v2 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "requestForLocationInformation");
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v2, (__int128 *)__p, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = &off_1E78C8DA8;
  *((_QWORD *)this + 1) = &unk_1E78C8E20;
  *((_BYTE *)this + 64) = 0;
}

void sub_1BEF470E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipLocationDiscoveryData::SipLocationDiscoveryData(SipLocationDiscoveryData *this, const SipLocationDiscoveryData *a2)
{
  char *v4;
  void *__p[2];
  char v6;

  *(_QWORD *)this = &off_1E78CE278;
  v4 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "requestForLocationInformation");
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v4, (__int128 *)__p, 0);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = &off_1E78C8DA8;
  *((_QWORD *)this + 1) = &unk_1E78C8E20;
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
}

void sub_1BEF47190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipLocationDiscoveryData::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;

  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 7)
  {
    if (v4 >= 0)
      v5 = (int *)a2;
    else
      v5 = *(int **)a2;
    v6 = *v5;
    v7 = *(int *)((char *)v5 + 3);
    if (v6 == 1399156335 && v7 == 1953458259)
      *(_BYTE *)(a1 + 64) = 1;
  }
  return bambi::XmlParserItem::parseChild(a1, a2, a3);
}

void SipLocationDiscoveryData::constructTree(SipLocationDiscoveryData *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p[2];
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  *a2 = 0;
  a2[1] = 0;
  v4 = (char *)this + 8;
  bambi::XmlTreeItem::makeNode((SipLocationDiscoveryData *)((char *)this + 8), a2);
  if (*((_BYTE *)this + 64))
  {
    v5 = a2[1];
    v16 = *a2;
    v17 = (std::__shared_weak_count *)v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "oneShot");
    (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, void **, _QWORD))(*(_QWORD *)v4 + 64))(&v18, v4, &v16, __p, 0);
    v8 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v15 < 0)
      operator delete(__p[0]);
    v11 = v17;
    if (v17)
    {
      v12 = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_1BEF47320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipLocationDiscoveryData::constructTree(SipLocationDiscoveryData *this@<X0>, uint64_t *a2@<X8>)
{
  SipLocationDiscoveryData::constructTree((SipLocationDiscoveryData *)((char *)this - 8), a2);
}

void SipLocationDiscoveryData::~SipLocationDiscoveryData(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
}

{
  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipLocationDiscoveryData::~SipLocationDiscoveryData(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this);
  JUMPOUT(0x1C3B87100);
}

_QWORD *ims::toString<nas::ProcedureType>@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *a1;
  if (v4 > 6)
    v5 = "???";
  else
    v5 = off_1E78C8EC0[v4];
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

uint64_t QMINasCache::mapRadioType(QMINasCache *this, const ims::AccessNetwork *a2)
{
  if (ims::AccessNetwork::isLTE(this))
  {
    return 8;
  }
  else if (ims::AccessNetwork::isWifi(this))
  {
    return 6;
  }
  else if (ims::AccessNetwork::isNR(this))
  {
    return 12;
  }
  else
  {
    return -1;
  }
}

double QMINasCache::start@<D0>(QMINasCache *this@<X0>, const ims::AccessNetwork *a2@<X3>, const ims::AccessNetwork *a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v8;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t **v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  int v24;
  uint64_t **v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  void (*v32)(void);
  double result;
  char *v34;
  unint64_t v35;
  BOOL v36;
  uint64_t **v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *__p[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;

  v8 = (char)a3;
  v11 = 40;
  if ((_DWORD)a3)
    v11 = 16;
  v12 = (char *)this + v11;
  v13 = 1;
  if ((a4 & 2) != 0)
    v13 = 2;
  if ((a4 & 4) != 0)
    v13 = 4;
  if ((_DWORD)a5)
    v14 = 8;
  else
    v14 = v13;
  v15 = QMINasCache::mapRadioType(a2, a3);
  v16 = v15;
  v18 = (uint64_t **)(v12 + 8);
  v17 = (uint64_t *)*((_QWORD *)v12 + 1);
  if (!v17)
  {
    *(_DWORD *)((char *)v55 + 3) = 0;
    LODWORD(v55[0]) = 0;
    v24 = *((_DWORD *)this + 2);
    *((_BYTE *)this + 64) = v8;
    *((_QWORD *)this + 9) = v14;
    v25 = (uint64_t **)(v12 + 8);
LABEL_40:
    v29 = (char *)operator new(0x48uLL);
    *((_QWORD *)v29 + 4) = v14;
    *((_DWORD *)v29 + 10) = 1;
    *((_DWORD *)v29 + 11) = v24;
    v29[48] = 0;
    *(_DWORD *)(v29 + 49) = v55[0];
    *((_DWORD *)v29 + 13) = *(_DWORD *)((char *)v55 + 3);
    *((_QWORD *)v29 + 7) = v14;
    *((_DWORD *)v29 + 16) = 0;
    v29[68] = v16;
    v29[69] = v16;
    *((_WORD *)v29 + 35) = 0;
    std::__tree<unsigned int>::__insert_node_at((uint64_t **)v12, (uint64_t)v25, v18, (uint64_t *)v29);
LABEL_41:
    std::string::basic_string[abi:ne180100]<0>(v55, "nas");
    std::string::basic_string[abi:ne180100]<0>(v53, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v30 = ImsLogger::debug(ims::_logger, (uint64_t)v55, (uint64_t)v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"Sending status request START on instance ", 41);
    *(_BYTE *)(v30 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v30 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)" for media ", 11);
    *(_BYTE *)(v30 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v51, off_1E78C8F10[v14 - 1]);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v30 + 32))(v30, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)" and RAT ", 9);
    *(_BYTE *)(v30 + 17) = 0;
    v31 = (char *)nas::asString(v16);
    std::string::basic_string[abi:ne180100]<0>(__p, v31);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v30 + 32))(v30, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v30 + 17) = 0;
    if (v50 < 0)
      operator delete(__p[0]);
    if (v52 < 0)
      operator delete(v51[0]);
    if (v54 < 0)
      operator delete(v53[0]);
    if (v56 < 0)
      operator delete(v55[0]);
    if (!*(_QWORD *)this)
      goto LABEL_52;
    v32 = *(void (**)(void))(**(_QWORD **)this + 16);
LABEL_51:
    v32();
LABEL_52:
    result = 0.0;
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 56) = 0u;
    *(_QWORD *)a6 = &off_1E78B7238;
    *(_QWORD *)(a6 + 8) = &_bambiDomain;
    *(_DWORD *)(a6 + 16) = 0;
    return result;
  }
  v19 = v12 + 8;
  v20 = (_QWORD *)*((_QWORD *)v12 + 1);
  do
  {
    v21 = v20[4];
    v22 = v21 >= v14;
    if (v21 >= v14)
      v23 = v20;
    else
      v23 = v20 + 1;
    if (v22)
      v19 = (char *)v20;
    v20 = (_QWORD *)*v23;
  }
  while (*v23);
  if (v19 == (char *)v18 || v14 < *((_QWORD *)v19 + 4))
  {
    *(_DWORD *)((char *)v55 + 3) = 0;
    LODWORD(v55[0]) = 0;
    v24 = *((_DWORD *)this + 2);
    *((_BYTE *)this + 64) = v8;
    *((_QWORD *)this + 9) = v14;
    do
    {
      while (1)
      {
        v25 = (uint64_t **)v17;
        v26 = v17[4];
        if (v26 <= v14)
          break;
        v17 = *v25;
        if (!*v25)
        {
          v18 = v25;
          goto LABEL_40;
        }
      }
      if (v26 >= v14)
        goto LABEL_41;
      v17 = v25[1];
    }
    while (v17);
    v18 = v25 + 1;
    goto LABEL_40;
  }
  if (v19[69] == v15)
  {
    ++*((_DWORD *)v19 + 10);
    std::string::basic_string[abi:ne180100]<0>(v55, "nas");
    std::string::basic_string[abi:ne180100]<0>(v53, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v27 = ImsLogger::debug(ims::_logger, (uint64_t)v55, (uint64_t)v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"ignoring duplicate START call status request (", 46);
    *(_BYTE *)(v27 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v27 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)" total) on instance ", 20);
    *(_BYTE *)(v27 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v27 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)" for media ", 11);
    *(_BYTE *)(v27 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v51, off_1E78C8F10[v14 - 1]);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v27 + 32))(v27, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)" and RAT ", 9);
    *(_BYTE *)(v27 + 17) = 0;
    v28 = (char *)nas::asString(v16);
    std::string::basic_string[abi:ne180100]<0>(__p, v28);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v27 + 32))(v27, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v27 + 17) = 0;
    if (v50 < 0)
      operator delete(__p[0]);
    if (v52 < 0)
      operator delete(v51[0]);
    if (v54 < 0)
      operator delete(v53[0]);
    if (v56 < 0)
      operator delete(v55[0]);
    if (*(_QWORD *)this)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)this + 24))(*(_QWORD *)this, *((unsigned int *)this + 2), a4, a5);
    goto LABEL_52;
  }
  v34 = v12 + 8;
  do
  {
    v35 = v17[4];
    v36 = v35 >= v14;
    if (v35 >= v14)
      v37 = (uint64_t **)v17;
    else
      v37 = (uint64_t **)(v17 + 1);
    if (v36)
      v34 = (char *)v17;
    v17 = *v37;
  }
  while (*v37);
  if (v34 != (char *)v18 && v14 >= *((_QWORD *)v34 + 4))
  {
    if (v34[69] == v15)
    {
      std::string::basic_string[abi:ne180100]<0>(v55, "nas");
      std::string::basic_string[abi:ne180100]<0>(v53, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v38 = ImsLogger::debug(ims::_logger, (uint64_t)v55, (uint64_t)v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"Ignoring UPDATE request on instance ", 36);
      *(_BYTE *)(v38 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v38 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)" for media ", 11);
      *(_BYTE *)(v38 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(v51, off_1E78C8F10[v14 - 1]);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v38 + 32))(v38, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)".  RAT type ", 12);
      *(_BYTE *)(v38 + 17) = 0;
      v39 = (char *)nas::asString(v16);
      std::string::basic_string[abi:ne180100]<0>(__p, v39);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v38 + 32))(v38, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)" has not changed!", 17);
      *(_BYTE *)(v38 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v38 + 17) = 0;
      if (v50 < 0)
        operator delete(__p[0]);
      if (v52 < 0)
        operator delete(v51[0]);
      if (v54 < 0)
        operator delete(v53[0]);
      if (v56 < 0)
        operator delete(v55[0]);
      goto LABEL_52;
    }
    std::string::basic_string[abi:ne180100]<0>(v55, "nas");
    std::string::basic_string[abi:ne180100]<0>(v53, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v40 = ImsLogger::debug(ims::_logger, (uint64_t)v55, (uint64_t)v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"Updating status request ", 24);
    *(_BYTE *)(v40 + 17) = 0;
    v41 = *((int *)v34 + 16);
    if (v41 > 2)
      v42 = "???";
    else
      v42 = off_1E78C8EF8[v41];
    std::string::basic_string[abi:ne180100]<0>(v51, v42);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v40 + 32))(v40, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)" on instance ", 13);
    *(_BYTE *)(v40 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v40 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)" for media ", 11);
    *(_BYTE *)(v40 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, off_1E78C8F10[v14 - 1]);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v40 + 32))(v40, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)" and RAT ", 9);
    *(_BYTE *)(v40 + 17) = 0;
    v43 = (char *)nas::asString(v34[69]);
    std::string::basic_string[abi:ne180100]<0>(v47, v43);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v40 + 32))(v40, v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)" to ", 4);
    *(_BYTE *)(v40 + 17) = 0;
    v44 = (char *)nas::asString(v16);
    std::string::basic_string[abi:ne180100]<0>(v45, v44);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v40 + 32))(v40, v45);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v40 + 17) = 0;
    if (v46 < 0)
      operator delete(v45[0]);
    if (v48 < 0)
      operator delete(v47[0]);
    if (v50 < 0)
      operator delete(__p[0]);
    if (v52 < 0)
      operator delete(v51[0]);
    if (v54 < 0)
      operator delete(v53[0]);
    if (v56 < 0)
      operator delete(v55[0]);
    v34[69] = v16;
    if (!*(_QWORD *)this)
      goto LABEL_52;
    v32 = *(void (**)(void))(**(_QWORD **)this + 16);
    goto LABEL_51;
  }
  result = 0.0;
  *(_OWORD *)(a6 + 24) = 0u;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_QWORD *)a6 = &off_1E78B7238;
  *(_QWORD *)(a6 + 8) = &_bambiDomain;
  *(_DWORD *)(a6 + 16) = 1073741836;
  return result;
}

void sub_1BEF47D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (*(char *)(v38 - 81) < 0)
    operator delete(*(void **)(v38 - 104));
  _Unwind_Resume(exception_object);
}

double QMINasCache::connect@<D0>(QMINasCache *this@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  double result;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *__p[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;

  v6 = 40;
  if ((_DWORD)a2)
    v6 = 16;
  v7 = (char *)this + v6;
  v8 = 1;
  if ((a3 & 2) != 0)
    v8 = 2;
  if ((a3 & 4) != 0)
    v8 = 4;
  if (a4)
    v9 = 8;
  else
    v9 = v8;
  v12 = (_QWORD *)*((_QWORD *)v7 + 1);
  v10 = v7 + 8;
  v11 = v12;
  if (!v12)
    goto LABEL_21;
  v15 = v10;
  do
  {
    v16 = v11[4];
    v17 = v16 >= v9;
    if (v16 >= v9)
      v18 = v11;
    else
      v18 = v11 + 1;
    if (v17)
      v15 = (char *)v11;
    v11 = (_QWORD *)*v18;
  }
  while (*v18);
  if (v15 != v10 && v9 >= *((_QWORD *)v15 + 4))
  {
    if (*((_DWORD *)v15 + 16))
    {
      std::string::basic_string[abi:ne180100]<0>(v30, "nas");
      std::string::basic_string[abi:ne180100]<0>(v28, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v20 = ImsLogger::debug(ims::_logger, (uint64_t)v30, (uint64_t)v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Ignoring duplicate CONNECT call status request on instance ", 59);
      *(_BYTE *)(v20 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" for media ", 11);
      *(_BYTE *)(v20 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(v26, off_1E78C8F10[v9 - 1]);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v20 + 32))(v20, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" and RAT ", 9);
      *(_BYTE *)(v20 + 17) = 0;
      v21 = (char *)nas::asString(v15[69]);
      std::string::basic_string[abi:ne180100]<0>(__p, v21);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v20 + 32))(v20, __p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v20 + 17) = 0;
      if (v25 < 0)
        operator delete(__p[0]);
      if (v27 < 0)
        operator delete(v26[0]);
      if (v29 < 0)
        operator delete(v28[0]);
      if (v31 < 0)
        operator delete(v30[0]);
    }
    else
    {
      *((_DWORD *)v15 + 16) = 2;
      std::string::basic_string[abi:ne180100]<0>(v30, "nas");
      std::string::basic_string[abi:ne180100]<0>(v28, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v22 = ImsLogger::debug(ims::_logger, (uint64_t)v30, (uint64_t)v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Sending status request CONNECT on instance ", 43);
      *(_BYTE *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" for media ", 11);
      *(_BYTE *)(v22 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(v26, off_1E78C8F10[v9 - 1]);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 32))(v22, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" and RAT ", 9);
      *(_BYTE *)(v22 + 17) = 0;
      v23 = (char *)nas::asString(v15[69]);
      std::string::basic_string[abi:ne180100]<0>(__p, v23);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 32))(v22, __p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v22 + 17) = 0;
      if (v25 < 0)
        operator delete(__p[0]);
      if (v27 < 0)
        operator delete(v26[0]);
      if (v29 < 0)
        operator delete(v28[0]);
      if (v31 < 0)
        operator delete(v30[0]);
      if (*(_QWORD *)this)
        (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, unint64_t, uint64_t))(**(_QWORD **)this + 16))(*(_QWORD *)this, *((unsigned int *)this + 2), 2, v15[69], v9, a2);
    }
    result = 0.0;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_QWORD *)a5 = &off_1E78B7238;
    *(_QWORD *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 0;
  }
  else
  {
LABEL_21:
    result = 0.0;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_QWORD *)a5 = &off_1E78B7238;
    *(_QWORD *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 1073741836;
  }
  return result;
}

void sub_1BEF48254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

double QMINasCache::end@<D0>(QMINasCache *this@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  double result;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *__p[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;

  v6 = 40;
  if ((_DWORD)a2)
    v6 = 16;
  v7 = (char *)this + v6;
  v8 = 1;
  if ((a3 & 2) != 0)
    v8 = 2;
  if ((a3 & 4) != 0)
    v8 = 4;
  if (a4)
    v9 = 8;
  else
    v9 = v8;
  v10 = (_QWORD *)*((_QWORD *)v7 + 1);
  if (!v10)
    goto LABEL_21;
  v13 = v7 + 8;
  do
  {
    v14 = v10[4];
    v15 = v14 >= v9;
    if (v14 >= v9)
      v16 = v10;
    else
      v16 = v10 + 1;
    if (v15)
      v13 = (char *)v10;
    v10 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 == v7 + 8 || v9 < *((_QWORD *)v13 + 4))
  {
LABEL_21:
    result = 0.0;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_QWORD *)a5 = &off_1E78B7238;
    *(_QWORD *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 1073741836;
    return result;
  }
  *((_DWORD *)v13 + 16) = 1;
  v18 = *((_DWORD *)v13 + 10) - 1;
  *((_DWORD *)v13 + 10) = v18;
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "nas");
    std::string::basic_string[abi:ne180100]<0>(v28, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v19 = ImsLogger::debug(ims::_logger, (uint64_t)v30, (uint64_t)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Ignoring duplicate END call status request (", 44);
    *(_BYTE *)(v19 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" remaining) on instance ", 24);
    *(_BYTE *)(v19 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" for media ", 11);
    *(_BYTE *)(v19 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v26, off_1E78C8F10[v9 - 1]);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v19 + 32))(v19, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" and RAT ", 9);
    *(_BYTE *)(v19 + 17) = 0;
    v20 = (char *)nas::asString(v13[69]);
    std::string::basic_string[abi:ne180100]<0>(__p, v20);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v19 + 32))(v19, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    if (v25 < 0)
      operator delete(__p[0]);
    if (v27 < 0)
      operator delete(v26[0]);
    if (v29 < 0)
      operator delete(v28[0]);
    if ((v31 & 0x80000000) == 0)
      goto LABEL_43;
    v21 = (char *)v30[0];
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "nas");
    std::string::basic_string[abi:ne180100]<0>(v28, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::debug(ims::_logger, (uint64_t)v30, (uint64_t)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Sending status request END on instance ", 39);
    *(_BYTE *)(v22 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v22 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" for media ", 11);
    *(_BYTE *)(v22 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v26, off_1E78C8F10[v9 - 1]);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 32))(v22, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" and RAT ", 9);
    *(_BYTE *)(v22 + 17) = 0;
    v23 = (char *)nas::asString(v13[69]);
    std::string::basic_string[abi:ne180100]<0>(__p, v23);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 32))(v22, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    if (v25 < 0)
      operator delete(__p[0]);
    if (v27 < 0)
      operator delete(v26[0]);
    if (v29 < 0)
      operator delete(v28[0]);
    if (v31 < 0)
      operator delete(v30[0]);
    if (*(_QWORD *)this)
      (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, unint64_t, uint64_t))(**(_QWORD **)this + 16))(*(_QWORD *)this, *((unsigned int *)this + 2), 1, v13[69], v9, a2);
    std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer((uint64_t **)v7, (uint64_t *)v13);
    v21 = v13;
  }
  operator delete(v21);
LABEL_43:
  result = 0.0;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_QWORD *)a5 = &off_1E78B7238;
  *(_QWORD *)(a5 + 8) = &_bambiDomain;
  *(_DWORD *)(a5 + 16) = 0;
  return result;
}

void sub_1BEF48708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t QMINasCache::update(QMINasCache *this, const ims::AccessNetwork *a2, const ims::AccessNetwork *a3)
{
  uint64_t v5;
  char *v6;
  uint64_t result;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  BOOL v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;

  if ((_DWORD)a2)
    v5 = 16;
  else
    v5 = 40;
  if ((_DWORD)a2)
    v6 = (char *)this + 16;
  else
    v6 = (char *)this + 40;
  result = QMINasCache::mapRadioType(a3, a2);
  v8 = *(char **)((char *)this + v5);
  if (v8 != v6 + 8)
  {
    v9 = result;
    do
    {
      if (v8[69] != v9)
      {
        if (*((_DWORD *)v8 + 16) != 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v30, "nas");
          std::string::basic_string[abi:ne180100]<0>(v28, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v10 = ImsLogger::debug(ims::_logger, (uint64_t)v30, (uint64_t)v28);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Updating status request ", 24);
          *(_BYTE *)(v10 + 17) = 0;
          v11 = *((int *)v8 + 16);
          v12 = "???";
          if (v11 <= 2)
            v12 = off_1E78C8EF8[v11];
          std::string::basic_string[abi:ne180100]<0>(v26, v12);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" on instance ", 13);
          *(_BYTE *)(v10 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v10 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" for media ", 11);
          *(_BYTE *)(v10 + 17) = 0;
          v13 = *((_QWORD *)v8 + 7) - 1;
          v14 = "???";
          if (v13 <= 7)
            v14 = off_1E78C8F10[v13];
          std::string::basic_string[abi:ne180100]<0>(v24, v14);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" and RAT ", 9);
          *(_BYTE *)(v10 + 17) = 0;
          v15 = (char *)nas::asString(v8[69]);
          std::string::basic_string[abi:ne180100]<0>(v22, v15);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" to ", 4);
          *(_BYTE *)(v10 + 17) = 0;
          v16 = (char *)nas::asString(v9);
          std::string::basic_string[abi:ne180100]<0>(__p, v16);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, __p);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v10 + 17) = 0;
          if (v21 < 0)
            operator delete(__p[0]);
          if (v23 < 0)
            operator delete(v22[0]);
          if (v25 < 0)
            operator delete(v24[0]);
          if (v27 < 0)
            operator delete(v26[0]);
          if (v29 < 0)
            operator delete(v28[0]);
          if (v31 < 0)
            operator delete(v30[0]);
          result = *(_QWORD *)this;
          if (*(_QWORD *)this)
            result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, const ims::AccessNetwork *))(*(_QWORD *)result + 16))(result, *((unsigned int *)this + 2), *((unsigned int *)v8 + 16), v9, *((_QWORD *)v8 + 7), a2);
        }
        v8[69] = v9;
      }
      v17 = (char *)*((_QWORD *)v8 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(char **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (char *)*((_QWORD *)v8 + 2);
          v19 = *(_QWORD *)v18 == (_QWORD)v8;
          v8 = v18;
        }
        while (!v19);
      }
      v8 = v18;
    }
    while (v18 != v6 + 8);
  }
  return result;
}

void sub_1BEF48AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (*(char *)(v38 - 81) < 0)
    operator delete(*(void **)(v38 - 104));
  _Unwind_Resume(exception_object);
}

double QMINasCache::cancel@<D0>(QMINasCache *this@<X0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  double result;
  uint64_t v16;
  char *v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;

  v6 = 40;
  if (a2)
    v6 = 16;
  v7 = (char *)this + v6;
  v8 = 1;
  if ((a3 & 2) != 0)
    v8 = 2;
  if ((a3 & 4) != 0)
    v8 = 4;
  if (a4)
    v9 = 8;
  else
    v9 = v8;
  v10 = (_QWORD *)*((_QWORD *)v7 + 1);
  if (!v10)
    goto LABEL_21;
  v11 = v7 + 8;
  do
  {
    v12 = v10[4];
    v13 = v12 >= v9;
    if (v12 >= v9)
      v14 = v10;
    else
      v14 = v10 + 1;
    if (v13)
      v11 = (char *)v10;
    v10 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 != v7 + 8 && v9 >= *((_QWORD *)v11 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "nas");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v16 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"Removing call status record on instance ", 40);
    *(_BYTE *)(v16 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v16 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" for media ", 11);
    *(_BYTE *)(v16 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v20, off_1E78C8F10[v9 - 1]);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 32))(v16, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" and RAT ", 9);
    *(_BYTE *)(v16 + 17) = 0;
    v17 = (char *)nas::asString(v11[69]);
    std::string::basic_string[abi:ne180100]<0>(__p, v17);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 32))(v16, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (v19 < 0)
      operator delete(__p[0]);
    if (v21 < 0)
      operator delete(v20[0]);
    if (v23 < 0)
      operator delete(v22[0]);
    if (v25 < 0)
      operator delete(v24[0]);
    std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer((uint64_t **)v7, (uint64_t *)v11);
    operator delete(v11);
    result = 0.0;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_QWORD *)a5 = &off_1E78B7238;
    *(_QWORD *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 0;
  }
  else
  {
LABEL_21:
    result = 0.0;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_QWORD *)a5 = &off_1E78B7238;
    *(_QWORD *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 1073741836;
  }
  return result;
}

void sub_1BEF48DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

double QMINasCache::cancelLast@<D0>(QMINasCache *this@<X0>, BOOL *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  _QWORD *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  double result;
  int v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;

  if (*((_BYTE *)this + 64))
    v4 = (char *)this + 16;
  else
    v4 = (char *)this + 40;
  if (a2)
    *a2 = *((_BYTE *)this + 64);
  v5 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (!v5)
    goto LABEL_17;
  v6 = *((_QWORD *)this + 9);
  v7 = v4 + 8;
  do
  {
    v8 = v5[4];
    v9 = v8 >= v6;
    if (v8 >= v6)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = (char *)v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v4 + 8 || v6 < *((_QWORD *)v7 + 4))
  {
LABEL_17:
    result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    v12 = 1073741836;
LABEL_18:
    *(_DWORD *)(a3 + 16) = v12;
    return result;
  }
  if (*((_DWORD *)v7 + 16))
  {
    result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    v12 = 1073741826;
    goto LABEL_18;
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "nas");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v13 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Removing call status record on instance ", 40);
  *(_BYTE *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" for media ", 11);
  *(_BYTE *)(v13 + 17) = 0;
  v14 = *((_QWORD *)v7 + 7) - 1;
  if (v14 > 7)
    v15 = "???";
  else
    v15 = off_1E78C8F10[v14];
  std::string::basic_string[abi:ne180100]<0>(v19, v15);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 32))(v13, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" and RAT ", 9);
  *(_BYTE *)(v13 + 17) = 0;
  v16 = (char *)nas::asString(v7[69]);
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 32))(v13, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer((uint64_t **)v4, (uint64_t *)v7);
  operator delete(v7);
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void sub_1BEF490E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

double QMINasCache::setLastResponded@<D0>(QMINasCache *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  double result;

  v2 = 1073741836;
  v3 = (char *)this + 16;
  if (!*((_BYTE *)this + 64))
    v3 = (char *)this + 40;
  v6 = (_QWORD *)*((_QWORD *)v3 + 1);
  v4 = v3 + 8;
  v5 = v6;
  if (v6)
  {
    v7 = *((_QWORD *)this + 9);
    v8 = v4;
    do
    {
      v9 = v5[4];
      v10 = v9 >= v7;
      if (v9 >= v7)
        v11 = v5;
      else
        v11 = v5 + 1;
      if (v10)
        v8 = (char *)v5;
      v5 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != v4 && v7 >= *((_QWORD *)v8 + 4))
    {
      v2 = 1073741826;
      if (!*((_DWORD *)v8 + 16) && !v8[48])
      {
        v2 = 0;
        v8[48] = 1;
      }
    }
  }
  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = v2;
  return result;
}

uint64_t *std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
}

uint64_t BambiCallEvent::BambiCallEvent(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)a1 = &off_1E78BD300;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  v4 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = *(std::__shared_weak_count **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v5;
    if (v8)
      std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void BambiCallEvent::BambiCallEvent(BambiCallEvent *this, const BambiCallEvent *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)this = &off_1E78BD300;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 2) = v3;
    *((_QWORD *)this + 3) = v4;
    if (v7)
      std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    *((_QWORD *)this + 2) = v3;
    *((_QWORD *)this + 3) = 0;
  }
}

uint64_t BambiCallNamedEvent::BambiCallNamedEvent(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  std::string *v5;
  __int128 v6;
  uint64_t v8[2];

  v8[0] = 0;
  v8[1] = 0;
  v4 = (_QWORD *)BambiCallEvent::BambiCallEvent(a1, 0, v8);
  *v4 = off_1E78C8F60;
  v5 = (std::string *)(v4 + 5);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1BEF4938C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E78BD300;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void BambiCallNamedEvent::fullName(BambiCallNamedEvent *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 7);
  }
}

void BambiCallSessionRequestedEvent::~BambiCallSessionRequestedEvent(BambiCallSessionRequestedEvent *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E78BD300;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E78BD300;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

void BambiCallProvisionalResponseEvent::BambiCallProvisionalResponseEvent(BambiCallProvisionalResponseEvent *this, const SipResponse *a2)
{
  int v3;
  int v4;
  _QWORD *v5;
  uint64_t v6[2];

  v3 = *((_DWORD *)a2 + 22) - 180;
  if (v3 > 3)
    v4 = 3;
  else
    v4 = dword_1BF2A0420[v3];
  v6[0] = 0;
  v6[1] = 0;
  v5 = (_QWORD *)BambiCallEvent::BambiCallEvent((uint64_t)this, v4, v6);
  *v5 = off_1E78C5680;
  SipResponse::SipResponse((SipResponse *)(v5 + 5), (const std::string *)a2);
}

void sub_1BEF494D0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E78BD300;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t BambiCallPreconditionsSatisfiedEvent::BambiCallPreconditionsSatisfiedEvent(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v6[2];

  v6[0] = 0;
  v6[1] = 0;
  v4 = BambiCallEvent::BambiCallEvent(a1, 23, v6);
  *(_QWORD *)v4 = off_1E78C9298;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  std::string::operator=((std::string *)(v4 + 40), a2);
  return a1;
}

void sub_1BEF4955C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = &off_1E78BD300;
  v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

BambiCallEvent *BambiCallPreconditionsSatisfiedEvent::BambiCallPreconditionsSatisfiedEvent(BambiCallEvent *a1, uint64_t a2)
{
  uint64_t v4;

  BambiCallEvent::BambiCallEvent(a1, (const BambiCallEvent *)a2);
  *(_QWORD *)v4 = off_1E78C9298;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  std::string::operator=((std::string *)(v4 + 40), (const std::string *)(a2 + 40));
  return a1;
}

void sub_1BEF495E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = &off_1E78BD300;
  v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void SessionTerminatedResultDomain::~SessionTerminatedResultDomain(void **this)
{
  *this = off_1E78B7320;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78B7320;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  std::string *v6;
  uint64_t v8[2];

  v8[0] = 0;
  v8[1] = 0;
  v5 = BambiCallEvent::BambiCallEvent(a1, a2, v8);
  *(_QWORD *)v5 = &off_1E78C91A8;
  *(_QWORD *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_QWORD *)(v5 + 120) = 0;
  v6 = (std::string *)(v5 + 120);
  *(_BYTE *)(v5 + 56) = 0;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_DWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 128) = 0;
  *(_QWORD *)(v5 + 136) = 0;
  *(_DWORD *)(v5 + 144) = 0x10000;
  *(_BYTE *)(v5 + 148) = 0;
  *(_QWORD *)(v5 + 152) = 0;
  *(_QWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 168) = 0;
  *(_QWORD *)(v5 + 232) = 0;
  *(_QWORD *)(v5 + 240) = 0;
  *(_QWORD *)(v5 + 192) = &off_1E78D08F8;
  *(_QWORD *)(v5 + 200) = 0;
  *(_WORD *)(v5 + 224) = 0;
  *(_QWORD *)(v5 + 208) = 0;
  *(_QWORD *)(v5 + 216) = 0;
  *(_QWORD *)(v5 + 184) = &off_1E78BFCE8;
  *(_QWORD *)(v5 + 264) = 0;
  *(_QWORD *)(v5 + 272) = 0;
  *(_QWORD *)(v5 + 248) = &off_1E78B82D8;
  *(_QWORD *)(v5 + 256) = v5 + 264;
  *(_BYTE *)(v5 + 281) = 1;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_QWORD *)(v5 + 496) = 0;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_QWORD *)(v5 + 528) = 0;
  *(_QWORD *)(v5 + 536) = 0;
  *(_QWORD *)(v5 + 512) = &off_1E78B82D8;
  *(_QWORD *)(v5 + 520) = v5 + 528;
  *(_QWORD *)(v5 + 568) = 0;
  *(_QWORD *)(v5 + 576) = 0;
  *(_QWORD *)(v5 + 552) = &off_1E78B82D8;
  *(_QWORD *)(v5 + 560) = v5 + 568;
  *(_BYTE *)(v5 + 280) = 1;
  *(_WORD *)(v5 + 544) = 257;
  *(_WORD *)(v5 + 584) = 257;
  *(_BYTE *)(v5 + 504) = 0;
  *(_DWORD *)(v5 + 40) = *(_DWORD *)(a3 + 64);
  std::string::operator=((std::string *)(v5 + 64), (const std::string *)(a3 + 32));
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a3 + 134);
  std::string::operator=(v6, (const std::string *)(a3 + 32));
  *(_BYTE *)(a1 + 147) = *(_BYTE *)(a3 + 133);
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

{
  uint64_t result;
  int v5;
  uint64_t v6[2];

  v6[0] = 0;
  v6[1] = 0;
  result = BambiCallEvent::BambiCallEvent(a1, a2, v6);
  *(_QWORD *)result = &off_1E78C91A8;
  *(_DWORD *)(result + 40) = 10;
  *(_QWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_DWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_DWORD *)(result + 144) = 0x10000;
  *(_BYTE *)(result + 148) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 240) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_WORD *)(result + 224) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 264) = 0;
  *(_QWORD *)(result + 272) = 0;
  *(_QWORD *)(result + 248) = &off_1E78B82D8;
  *(_QWORD *)(result + 256) = result + 264;
  *(_BYTE *)(result + 281) = 1;
  *(_QWORD *)(result + 184) = &off_1E78BFCE8;
  *(_QWORD *)(result + 192) = &off_1E78D08F8;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_OWORD *)(result + 336) = 0u;
  *(_OWORD *)(result + 352) = 0u;
  *(_OWORD *)(result + 368) = 0u;
  *(_OWORD *)(result + 384) = 0u;
  *(_OWORD *)(result + 400) = 0u;
  *(_OWORD *)(result + 416) = 0u;
  *(_OWORD *)(result + 432) = 0u;
  *(_OWORD *)(result + 448) = 0u;
  *(_OWORD *)(result + 464) = 0u;
  *(_OWORD *)(result + 480) = 0u;
  *(_QWORD *)(result + 496) = 0;
  *(_QWORD *)(result + 512) = &off_1E78B82D8;
  *(_QWORD *)(result + 536) = 0;
  *(_QWORD *)(result + 528) = 0;
  *(_QWORD *)(result + 520) = result + 528;
  *(_QWORD *)(result + 552) = &off_1E78B82D8;
  *(_QWORD *)(result + 576) = 0;
  *(_QWORD *)(result + 568) = 0;
  *(_QWORD *)(result + 560) = result + 568;
  *(_BYTE *)(result + 280) = 1;
  *(_WORD *)(result + 544) = 257;
  *(_WORD *)(result + 584) = 257;
  *(_BYTE *)(result + 504) = 0;
  if (*(uint64_t **)(a3 + 8) == &SessionTerminatedResultDomain::_domain)
    v5 = *(_DWORD *)(a3 + 16);
  else
    v5 = 10;
  *(_DWORD *)(result + 40) = v5;
  return result;
}

void sub_1BEF497DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  SipUri *v4;
  void **v5;
  std::__shared_weak_count *v7;

  SipUri::~SipUri(v4);
  if (*(char *)(v1 + 175) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 143) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 111) < 0)
    operator delete(*(void **)(v1 + 88));
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = &off_1E78BD300;
  v7 = *(std::__shared_weak_count **)(v1 + 24);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  _Unwind_Resume(a1);
}

double BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  double result;
  uint64_t v6[2];

  v6[0] = 0;
  v6[1] = 0;
  v4 = BambiCallEvent::BambiCallEvent(a1, a2, v6);
  *(_QWORD *)v4 = &off_1E78C91A8;
  *(_BYTE *)(v4 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_DWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_DWORD *)(v4 + 144) = 0x10000;
  *(_BYTE *)(v4 + 148) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 168) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 232) = 0;
  *(_QWORD *)(v4 + 240) = 0;
  *(_QWORD *)(v4 + 200) = 0;
  *(_QWORD *)(v4 + 208) = 0;
  *(_WORD *)(v4 + 224) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_QWORD *)(v4 + 264) = 0;
  *(_QWORD *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 248) = &off_1E78B82D8;
  *(_QWORD *)(v4 + 256) = v4 + 264;
  *(_BYTE *)(v4 + 281) = 1;
  *(_QWORD *)(v4 + 184) = &off_1E78BFCE8;
  *(_QWORD *)(v4 + 192) = &off_1E78D08F8;
  *(_OWORD *)(v4 + 288) = 0u;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_OWORD *)(v4 + 416) = 0u;
  *(_OWORD *)(v4 + 432) = 0u;
  *(_OWORD *)(v4 + 448) = 0u;
  *(_OWORD *)(v4 + 464) = 0u;
  *(_OWORD *)(v4 + 480) = 0u;
  *(_QWORD *)(v4 + 496) = 0;
  *(_QWORD *)(v4 + 512) = &off_1E78B82D8;
  *(_QWORD *)(v4 + 536) = 0;
  *(_QWORD *)(v4 + 528) = 0;
  *(_QWORD *)(v4 + 520) = v4 + 528;
  *(_QWORD *)(v4 + 552) = &off_1E78B82D8;
  *(_QWORD *)(v4 + 568) = 0;
  *(_QWORD *)(v4 + 576) = 0;
  *(_QWORD *)(v4 + 560) = v4 + 568;
  *(_BYTE *)(v4 + 280) = 1;
  *(_WORD *)(v4 + 544) = 257;
  *(_WORD *)(v4 + 584) = 257;
  *(_BYTE *)(v4 + 504) = 0;
  *(_DWORD *)(v4 + 40) = a3;
  *(_QWORD *)(v4 + 48) = 0;
  return result;
}

uint64_t BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent(uint64_t a1, int a2, BambiCallEvent *a3)
{
  uint64_t v6;
  std::string *v7;
  std::string *v8;
  uint64_t v9;

  BambiCallEvent::BambiCallEvent((BambiCallEvent *)a1, a3);
  *(_QWORD *)v6 = &off_1E78C91A8;
  *(_DWORD *)(v6 + 40) = 10;
  *(_QWORD *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_OWORD *)(v6 + 64) = 0u;
  v7 = (std::string *)(v6 + 64);
  *(_QWORD *)(v6 + 120) = 0;
  v8 = (std::string *)(v6 + 120);
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_DWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_DWORD *)(v6 + 144) = 0x10000;
  *(_BYTE *)(v6 + 148) = 0;
  *(_QWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 160) = 0;
  *(_QWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 192) = &off_1E78D08F8;
  *(_QWORD *)(v6 + 232) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 184) = &off_1E78BFCE8;
  *(_QWORD *)(v6 + 200) = 0;
  *(_QWORD *)(v6 + 208) = 0;
  *(_WORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 264) = 0;
  *(_QWORD *)(v6 + 272) = 0;
  *(_QWORD *)(v6 + 248) = &off_1E78B82D8;
  *(_QWORD *)(v6 + 256) = v6 + 264;
  *(_BYTE *)(v6 + 281) = 1;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_QWORD *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 480) = 0u;
  *(_QWORD *)(v6 + 528) = 0;
  *(_QWORD *)(v6 + 536) = 0;
  *(_QWORD *)(v6 + 512) = &off_1E78B82D8;
  *(_QWORD *)(v6 + 520) = v6 + 528;
  *(_QWORD *)(v6 + 568) = 0;
  *(_QWORD *)(v6 + 576) = 0;
  *(_QWORD *)(v6 + 552) = &off_1E78B82D8;
  *(_QWORD *)(v6 + 560) = v6 + 568;
  *(_BYTE *)(v6 + 280) = 1;
  *(_WORD *)(v6 + 544) = 257;
  *(_WORD *)(v6 + 584) = 257;
  *(_BYTE *)(v6 + 504) = 0;
  *(_DWORD *)(v6 + 8) = a2;
  *(_DWORD *)(v6 + 40) = *((_DWORD *)a3 + 10);
  v9 = *((_QWORD *)a3 + 6);
  if (v9)
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a3 + 56);
  std::string::operator=(v7, (const std::string *)((char *)a3 + 64));
  std::string::operator=(v8, (const std::string *)a3 + 5);
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a3 + 144);
  *(_WORD *)(a1 + 147) = *(_WORD *)((char *)a3 + 147);
  return a1;
}

void sub_1BEF49B00(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  SipUri *v4;
  void **v5;
  std::__shared_weak_count *v7;

  SipUri::~SipUri(v4);
  if (*(char *)(v1 + 175) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 143) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 111) < 0)
    operator delete(*(void **)(v1 + 88));
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = &off_1E78BD300;
  v7 = *(std::__shared_weak_count **)(v1 + 24);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  _Unwind_Resume(a1);
}

void BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent(BambiCallSessionTerminationBaseEvent *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78C91A8;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  SipUri::~SipUri((BambiCallSessionTerminationBaseEvent *)((char *)this + 184));
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  *(_QWORD *)this = &off_1E78BD300;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

{
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiCallSessionTerminationBaseEvent::setReasonFromOutgoingResponse(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 32))(a2);
  *(_QWORD *)(a1 + 48) = result;
  *(_BYTE *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 40) = 10;
  v6 = a2[22];
  if (v6 == 403)
  {
    v7 = 16;
  }
  else if (v6 == 486)
  {
    v7 = 2;
  }
  else
  {
    if ((v6 - 500) > 0x63)
      return result;
    v7 = 18;
  }
  *(_DWORD *)(a1 + 40) = v7;
  return result;
}

void BambiCallSessionTerminationBaseEvent::setReasonFromIncomingResponse(BambiCallSessionTerminationBaseEvent *this, const SipResponse *a2, const BambiCallIncomingTerminationReasons *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  BambiCall *v8;
  SipSession *v9;
  char v10;
  std::__shared_weak_count *v11;
  SipUserAgentConfig *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  _BOOL4 v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  const void *v20;
  void *v21;
  BambiCall *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  ImsPrefs *v25;
  void **IgnoreOverridesForWPSCallsKey;
  void *v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::string v46;
  std::string v47;
  int *v48;
  std::__shared_weak_count *v49;
  void *v50[2];
  char v51;
  std::string __p;
  BambiCall *v53;
  std::__shared_weak_count *v54;

  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = (*(uint64_t (**)(const SipResponse *))(*(_QWORD *)a2 + 32))(a2);
  *((_BYTE *)this + 56) = 0;
  v53 = 0;
  v54 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v7)
  {
    v54 = std::__shared_weak_count::lock(v7);
    if (v54)
    {
      v8 = (BambiCall *)*((_QWORD *)this + 2);
      v53 = v8;
      if (v8)
      {
        v9 = (SipSession *)*((_QWORD *)v8 + 48);
        if (v9)
        {
          v10 = SipSession::confirmed(v9);
          *((_BYTE *)this + 145) = v10;
          if ((v10 & 1) != 0)
          {
LABEL_15:
            v15 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)v8 + 45));
            v50[0] = *((void **)v8 + 44);
            v50[1] = v15;
            v16 = SipUserAgent::config(*((SipUserAgent **)v50[0] + 18));
            std::string::basic_string[abi:ne180100]<0>(&__p, "INVITE");
            v17 = SipResponseCodeMap::containsResponseCodeForMethod(v16 + 1184, (void **)&__p.__r_.__value_.__l.__data_, *((_DWORD *)a2 + 22), 0);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v19 = __ldaxr(p_shared_owners);
            while (__stlxr(v19 - 1, p_shared_owners));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
            if (v17)
              *((_BYTE *)this + 147) = 1;
            goto LABEL_23;
          }
        }
        else
        {
          *((_BYTE *)this + 145) = 0;
        }
        v11 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)v8 + 45));
        __p.__r_.__value_.__r.__words[0] = *((_QWORD *)v8 + 44);
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
        v12 = (SipUserAgentConfig *)SipUserAgent::config(*(SipUserAgent **)(__p.__r_.__value_.__r.__words[0] + 144));
        *((_BYTE *)this + 144) = SipUserAgentConfig::shouldCSFBOnInviteResponse(v12, *((_DWORD *)a2 + 22), *((_QWORD *)v8 + 64) != 0);
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v8 = v53;
        if (v53)
          goto LABEL_15;
      }
    }
  }
LABEL_23:
  SipMessage::reasonText(a2, &__p);
  std::string::operator=((std::string *)((char *)this + 64), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SipMessage::reasonProtocol(a2, &__p);
  std::string::operator=((std::string *)((char *)this + 88), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_DWORD *)this + 28) = SipMessage::reasonCause(a2);
  if (*((_DWORD *)a2 + 22) == 380)
  {
    v20 = (const void *)*((_QWORD *)a2 + 9);
    if (v20)
    {
      if (v21)
      {
        if (Sip3gppImsInfo::alternativeServiceWithServiceType((uint64_t)v21 + 32, (unsigned __int8 **)"emergency"))
        {
          *((_DWORD *)this + 10) = 15;
          goto LABEL_86;
        }
      }
    }
  }
  v22 = v53;
  if (!v53 || !BambiCall::isWPSCall(v53))
    goto LABEL_52;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v23 = (std::__shared_weak_count *)*((_QWORD *)v22 + 45);
  if (v23)
  {
    v23 = std::__shared_weak_count::lock(v23);
    v24 = v23;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
    if (v23)
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)v22 + 44);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    }
  }
  else
  {
    v24 = 0;
  }
  v25 = (ImsPrefs *)SipStack::prefs((SipStack *)v23);
  IgnoreOverridesForWPSCallsKey = (void **)ImsPrefs::getIgnoreOverridesForWPSCallsKey(v25);
  v27 = ImsPrefs::prefWithKey(v25, IgnoreOverridesForWPSCallsKey);
  if (v27)
  {
    v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 40))(v27);
    if (!v24)
      goto LABEL_45;
  }
  else
  {
    v28 = *((_BYTE *)IgnoreOverridesForWPSCallsKey + 57) != 0;
    if (!v24)
      goto LABEL_45;
  }
  v29 = (unint64_t *)&v24->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (v28)
      goto LABEL_46;
LABEL_52:
    v32 = 1;
    goto LABEL_53;
  }
LABEL_45:
  if (!v28)
    goto LABEL_52;
LABEL_46:
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
  std::string::basic_string[abi:ne180100]<0>(v50, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v31 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"call was dialed as WPS", 22);
  *(_BYTE *)(v31 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v31 + 17) = 0;
  if (v51 < 0)
    operator delete(v50[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v32 = 0;
  *((_BYTE *)this + 144) = 1;
LABEL_53:
  v48 = 0;
  v49 = 0;
  BambiCallIncomingTerminationReasons::reasonForResponse(a3, a2, v32, &v48);
  if (!v48)
  {
    if (*((_DWORD *)a2 + 22) / 0x64u - 5 >= 2)
      v37 = 10;
    else
      v37 = 11;
    *((_DWORD *)this + 10) = v37;
    std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
    std::string::basic_string[abi:ne180100]<0>(v50, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v38 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"incoming ", 9);
    *(_BYTE *)(v38 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v38 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)" response didn't match a termination reason. Defaulting to ", 59);
    *(_BYTE *)(v38 + 17) = 0;
    v39 = *((_DWORD *)this + 10);
    if (v39 > 37)
      v39 = 10;
    LoggableString::LoggableString(&v47, (const std::string *)(reasonStrings + 24 * v39));
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v38 + 40))(v38, &v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)".", 1);
    *(_BYTE *)(v38 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v38 + 17) = 0;
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (v51 < 0)
      operator delete(v50[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_81;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
  std::string::basic_string[abi:ne180100]<0>(v50, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v33 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"incoming ", 9);
  *(_BYTE *)(v33 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v33 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" response matched termination reason ", 37);
  *(_BYTE *)(v33 + 17) = 0;
  LoggableString::LoggableString(&v47, (const std::string *)(v48 + 2));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v33 + 40))(v33, &v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" with event ", 12);
  *(_BYTE *)(v33 + 17) = 0;
  v34 = v48[16];
  if (v34 > 37)
    v34 = 10;
  LoggableString::LoggableString(&v46, (const std::string *)(reasonStrings + 24 * v34));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v33 + 40))(v33, &v46);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v33 + 17) = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (v51 < 0)
    operator delete(v50[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v35 = v48;
  *((_DWORD *)this + 10) = v48[16];
  if (!*((_BYTE *)this + 145))
  {
    v36 = *v35;
    if (*v35 == 1)
    {
LABEL_68:
      *((_BYTE *)this + 144) = v36;
      goto LABEL_69;
    }
    if (v36 == 2)
    {
      LOBYTE(v36) = 0;
      goto LABEL_68;
    }
  }
LABEL_69:
  *((_BYTE *)this + 147) = *((_BYTE *)v35 + 133);
LABEL_81:
  v40 = v49;
  if (v49)
  {
    v41 = (unint64_t *)&v49->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_86:
  v43 = v54;
  if (v54)
  {
    v44 = (unint64_t *)&v54->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1BEF4A53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a34 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 - 64);
  _Unwind_Resume(a1);
}

void BambiCallSessionTerminationBaseEvent::setReasonFromIncomingByeOrCancelRequest(BambiCallSessionTerminationBaseEvent *this, const SipRequest *a2, const void ***a3)
{
  const void **v6;
  uint64_t v7;
  const std::string *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::string __p;
  std::string v26;
  std::string v27;
  void *v28[2];
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string __str;

  *((_BYTE *)this + 56) = 0;
  SipMessage::reasonText(a2, &__str);
  std::string::operator=((std::string *)((char *)this + 64), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  SipMessage::reasonProtocol(a2, &__str);
  v6 = (const void **)((char *)this + 88);
  std::string::operator=((std::string *)((char *)this + 88), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *((_DWORD *)this + 28) = SipMessage::reasonCause(a2);
  v30 = 0;
  v31 = 0;
  BambiCallIncomingTerminationReasons::reasonForByeOrCancelRequest(a3, a2, 1, &v30);
  if (v30)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "bambi.call");
    std::string::basic_string[abi:ne180100]<0>(v28, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)&__str, (uint64_t)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"incoming ", 9);
    *(_BYTE *)(v7 + 17) = 0;
    v8 = (const std::string *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
    LoggableString::LoggableString(&v27, v8);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 40))(v7, &v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" request matched termination reason ", 36);
    *(_BYTE *)(v7 + 17) = 0;
    LoggableString::LoggableString(&v26, (const std::string *)(v30 + 8));
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 40))(v7, &v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" with event ", 12);
    *(_BYTE *)(v7 + 17) = 0;
    v9 = *(_DWORD *)(v30 + 64);
    if (v9 > 37)
      v9 = 10;
    LoggableString::LoggableString(&__p, (const std::string *)(reasonStrings + 24 * v9));
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 40))(v7, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (v29 < 0)
      operator delete(v28[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v10 = v30;
    *((_DWORD *)this + 10) = *(_DWORD *)(v30 + 64);
    *((_BYTE *)this + 147) = *(_BYTE *)(v10 + 133);
    goto LABEL_51;
  }
  v11 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v12 = v11[23];
  if ((v12 & 0x80u) == 0)
    v13 = v11[23];
  else
    v13 = *((_QWORD *)v11 + 1);
  if (v13 == 6)
  {
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, "CANCEL", *((_QWORD *)v11 + 1)))
        goto LABEL_30;
    }
    else if (v11[23])
    {
      v14 = "CANCEL";
      while (*v11 == *(unsigned __int8 *)v14)
      {
        ++v11;
        ++v14;
        if (!--v12)
          goto LABEL_40;
      }
      goto LABEL_30;
    }
LABEL_40:
    v18 = 5;
LABEL_44:
    *((_DWORD *)this + 10) = v18;
    goto LABEL_45;
  }
LABEL_30:
  *((_DWORD *)this + 10) = 1;
  v15 = *((unsigned __int8 *)this + 111);
  if ((v15 & 0x80u) == 0)
    v16 = *((unsigned __int8 *)this + 111);
  else
    v16 = *((_QWORD *)this + 12);
  if (v16 != 3)
    goto LABEL_45;
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*v6, &SipReason::kProtocolSip, *((_QWORD *)this + 12)))
      goto LABEL_45;
  }
  else if (*((_BYTE *)this + 111))
  {
    v17 = &SipReason::kProtocolSip;
    while (*(unsigned __int8 *)v6 == v17->__r_.__value_.__s.__data_[0])
    {
      v6 = (const void **)((char *)v6 + 1);
      v17 = (std::string *)((char *)v17 + 1);
      if (!--v15)
        goto LABEL_42;
    }
    goto LABEL_45;
  }
LABEL_42:
  if ((*((_DWORD *)this + 28) - 300) <= 0x18F)
  {
    v18 = 11;
    goto LABEL_44;
  }
LABEL_45:
  std::string::basic_string[abi:ne180100]<0>(&__str, "bambi.call");
  std::string::basic_string[abi:ne180100]<0>(v28, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v19 = ImsLogger::debug(ims::_logger, (uint64_t)&__str, (uint64_t)v28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"incoming ", 9);
  *(_BYTE *)(v19 + 17) = 0;
  v20 = (*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" request didn't match a termination reason. Defaulting to ", 58);
  *(_BYTE *)(v19 + 17) = 0;
  v21 = *((_DWORD *)this + 10);
  if (v21 > 37)
    v21 = 10;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, reasonStrings + 24 * v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)".", 1);
  *(_BYTE *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v19 + 17) = 0;
  if (v29 < 0)
    operator delete(v28[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_51:
  v22 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1BEF4AB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 33) < 0)
    operator delete(*(void **)(v33 - 56));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v33 - 72);
  _Unwind_Resume(a1);
}

void BambiCallSessionTerminationBaseEvent::setReferrerFromIncomingByeRequest(BambiCallSessionTerminationBaseEvent *this, const SipRequest *a2)
{
  std::string __str;

  SipMessage::referredBy(a2, &__str);
  std::string::operator=((std::string *)((char *)this + 152), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BEF4AC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *BambiCallSessionTerminationBaseEvent::setReason(BambiCallSessionTerminationBaseEvent *this, const BambiCallTerminationReason *a2)
{
  const std::string *v4;
  std::string *result;

  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 16);
  v4 = (const std::string *)((char *)a2 + 32);
  std::string::operator=((std::string *)((char *)this + 64), (const std::string *)((char *)a2 + 32));
  result = std::string::operator=((std::string *)this + 5, v4);
  *((_BYTE *)this + 147) = *((_BYTE *)a2 + 133);
  return result;
}

uint64_t BambiCallSessionTerminationBaseEvent::reasonForName(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const char *v3;
  const char *v4;

  v1 = 0;
  v2 = reasonStrings;
  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  do
  {
    if (*(char *)(v2 + 23) >= 0)
      v4 = (const char *)v2;
    else
      v4 = *(const char **)v2;
    if (!strcasecmp(v4, v3))
      break;
    ++v1;
    v2 += 24;
  }
  while (v1 != 38);
  return v1;
}

uint64_t BambiCallSessionTerminationBaseEvent::fullName@<X0>(BambiCallSessionTerminationBaseEvent *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v16[4];
  void *__p[2];
  __int128 v18;
  __int128 v19;
  _OWORD v20[9];
  uint64_t v21;
  char v22;

  v21 = 0;
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  *(_OWORD *)__p = 0u;
  v18 = 0u;
  memset(v16, 0, sizeof(v16));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v4 = eventNames + 24 * *((unsigned int *)this + 2);
  v5 = *(char *)(v4 + 23);
  if (v5 >= 0)
    v6 = eventNames + 24 * *((unsigned int *)this + 2);
  else
    v6 = *(_QWORD *)v4;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 23);
  else
    v7 = *(_QWORD *)(v4 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v6, v7);
  v22 = 58;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v22, 1);
  v10 = *((_DWORD *)this + 10);
  if (v10 > 37)
    v10 = 10;
  v11 = reasonStrings + 24 * v10;
  v12 = *(char *)(v11 + 23);
  if (v12 >= 0)
    v13 = v11;
  else
    v13 = *(_QWORD *)v11;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v11 + 23);
  else
    v14 = *(_QWORD *)(v11 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v13, v14);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16 + 8, a2);
  *(_QWORD *)&v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(*(_QWORD *)&v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v16[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v18) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v20);
}

void sub_1BEF4AE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t BambiCallJoinedConferenceEvent::BambiCallJoinedConferenceEvent(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v4 = (_QWORD *)BambiCallEvent::BambiCallEvent(a1, 20, v11);
  *v4 = &off_1E78C89C0;
  v4[5] = 0;
  v4[6] = 0;
  v5 = *a2;
  v6 = a2[1];
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = *(std::__shared_weak_count **)(a1 + 48);
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = v6;
    if (v9)
      std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = 0;
  }
  return a1;
}

uint64_t BambiCallConferenceEvent::BambiCallConferenceEvent(uint64_t a1, int a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v8[3];

  v8[0] = 0;
  v8[1] = 0;
  v6 = BambiCallEvent::BambiCallEvent(a1, 21, v8);
  *(_QWORD *)v6 = off_1E78C9130;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 64) = a2;
  if ((uint64_t **)(v6 + 40) != a3)
    std::vector<std::weak_ptr<BambiConferenceParticipant>>::__assign_with_size[abi:ne180100]<std::weak_ptr<BambiConferenceParticipant>*,std::weak_ptr<BambiConferenceParticipant>*>((uint64_t *)(v6 + 40), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_1BEF4AF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD *v4;
  std::__shared_weak_count *v6;
  va_list va;

  va_start(va, a4);
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *v4 = &off_1E78BD300;
  v6 = (std::__shared_weak_count *)v4[3];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  _Unwind_Resume(a1);
}

uint64_t BambiCallConferenceEvent::BambiCallConferenceEvent(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24[2];
  void *v25[6];

  v24[0] = 0;
  v24[1] = 0;
  v6 = BambiCallEvent::BambiCallEvent(a1, 21, v24);
  *(_QWORD *)v6 = off_1E78C9130;
  *(_QWORD *)(v6 + 40) = 0;
  v7 = (uint64_t *)(v6 + 40);
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 64) = a2;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100]((uint64_t *)(v6 + 40));
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 1);
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD **)(a1 + 48);
  if ((unint64_t)v13 >= v12)
  {
    v23 = v8;
    v15 = ((uint64_t)v13 - *v7) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v17 = v12 - *v7;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v25[4] = (void *)(a1 + 56);
    v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(a1 + 56, v18);
    v20 = &v19[16 * v15];
    v25[0] = v19;
    v25[1] = v20;
    v25[3] = &v19[16 * v21];
    *(_OWORD *)v20 = v23;
    v25[2] = v20 + 16;
    std::vector<std::weak_ptr<BambiConferenceParticipant>>::__swap_out_circular_buffer(v7, v25);
    v14 = *(_QWORD **)(a1 + 48);
    std::__split_buffer<std::weak_ptr<BambiConferenceParticipant>>::~__split_buffer(v25);
  }
  else
  {
    *v13 = v8;
    v13[1] = v9;
    v14 = v13 + 2;
    *(_QWORD *)(a1 + 48) = v13 + 2;
  }
  *(_QWORD *)(a1 + 48) = v14;
  return a1;
}

void sub_1BEF4B0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v9;
  va_list va;

  va_start(va, a5);
  std::__split_buffer<std::weak_ptr<BambiConferenceParticipant>>::~__split_buffer((void **)va);
  *(_QWORD *)(v7 - 40) = v6;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v7 - 40));
  *v5 = &off_1E78BD300;
  v9 = (std::__shared_weak_count *)v5[3];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  _Unwind_Resume(a1);
}

uint64_t BambiCallConferenceEvent::fullName@<X0>(BambiCallConferenceEvent *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v16[4];
  void *__p[2];
  __int128 v18;
  __int128 v19;
  _OWORD v20[9];
  uint64_t v21;
  char v22;

  v21 = 0;
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  *(_OWORD *)__p = 0u;
  v18 = 0u;
  memset(v16, 0, sizeof(v16));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v4 = eventNames + 24 * *((unsigned int *)this + 2);
  v5 = *(char *)(v4 + 23);
  if (v5 >= 0)
    v6 = eventNames + 24 * *((unsigned int *)this + 2);
  else
    v6 = *(_QWORD *)v4;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 23);
  else
    v7 = *(_QWORD *)(v4 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v6, v7);
  v22 = 58;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v22, 1);
  v10 = *((_DWORD *)this + 16);
  if (v10 > 6)
    v10 = 0;
  v11 = (char *)&kCodeStrings + 24 * v10;
  v12 = v11[23];
  if (v12 >= 0)
    v13 = (uint64_t)v11;
  else
    v13 = *(_QWORD *)v11;
  if (v12 >= 0)
    v14 = v11[23];
  else
    v14 = *((_QWORD *)v11 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v13, v14);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16 + 8, a2);
  *(_QWORD *)&v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(*(_QWORD *)&v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v16[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v18) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v20);
}

void sub_1BEF4B288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCallSessionIntervalTooSmallEvent::BambiCallSessionIntervalTooSmallEvent(BambiCallSessionIntervalTooSmallEvent *this, const std::string *a2)
{
  _QWORD *v3;
  uint64_t v4[2];

  v4[0] = 0;
  v4[1] = 0;
  v3 = (_QWORD *)BambiCallEvent::BambiCallEvent((uint64_t)this, 22, v4);
  *v3 = off_1E78C91E8;
  SipResponse::SipResponse((SipResponse *)(v3 + 5), a2);
}

void sub_1BEF4B2EC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E78BD300;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void BambiCallSessionIntervalTooSmallEvent::BambiCallSessionIntervalTooSmallEvent(BambiCallSessionIntervalTooSmallEvent *this, const BambiCallSessionIntervalTooSmallEvent *a2)
{
  _QWORD *v3;

  BambiCallEvent::BambiCallEvent(this, a2);
  *v3 = off_1E78C91E8;
  SipResponse::SipResponse((SipResponse *)(v3 + 5), (const std::string *)((char *)a2 + 40));
}

void sub_1BEF4B34C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E78BD300;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void BambiCallSessionMovedEvent::BambiCallSessionMovedEvent(BambiCallSessionMovedEvent *this, const SipUri *a2, int a3)
{
  _QWORD *v6;
  uint64_t v7[2];

  v7[0] = 0;
  v7[1] = 0;
  v6 = (_QWORD *)BambiCallEvent::BambiCallEvent((uint64_t)this, 32, v7);
  *v6 = &off_1E78C9240;
  SipUri::SipUri((SipUri *)(v6 + 5), a2);
  *((_DWORD *)this + 112) = a3;
}

void sub_1BEF4B3D0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E78BD300;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void BambiCallSessionMovedEvent::BambiCallSessionMovedEvent(BambiCallSessionMovedEvent *this, const BambiCallSessionMovedEvent *a2)
{
  _QWORD *v4;

  BambiCallEvent::BambiCallEvent(this, a2);
  *v4 = &off_1E78C9240;
  SipUri::SipUri((SipUri *)(v4 + 5), (const BambiCallSessionMovedEvent *)((char *)a2 + 40));
  *((_DWORD *)this + 112) = *((_DWORD *)a2 + 112);
}

void sub_1BEF4B438(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E78BD300;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t BambiCallHoldResumeIndicationEvent::BambiCallHoldResumeIndicationEvent(uint64_t a1, int a2, int a3, int a4, uint64_t *a5)
{
  std::__shared_weak_count *v8;
  int v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14[2];

  v8 = (std::__shared_weak_count *)a5[1];
  if (a2)
    v9 = 18;
  else
    v9 = 19;
  v14[0] = *a5;
  v14[1] = (uint64_t)v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    BambiCallEvent::BambiCallEvent(a1, v9, v14);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    BambiCallEvent::BambiCallEvent(a1, v9, v14);
  }
  *(_QWORD *)a1 = &off_1E78C9020;
  *(_DWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = a3;
  return a1;
}

void BambiCallNamedEvent::~BambiCallNamedEvent(void **this)
{
  std::__shared_weak_count *v2;

  *this = off_1E78C8F60;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = &off_1E78BD300;
  v2 = (std::__shared_weak_count *)this[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *this = off_1E78C8F60;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = &off_1E78BD300;
  v2 = (std::__shared_weak_count *)this[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1C3B87100);
}

void BambiCallSessionRequestedEvent::clone(BambiCallSessionRequestedEvent *this)
{
  BambiCallEvent *v2;
  _QWORD *v3;

  v2 = (BambiCallEvent *)operator new();
  BambiCallEvent::BambiCallEvent(v2, this);
  *v3 = &off_1E78C8FA0;
}

void BambiCallConferenceEvent::~BambiCallConferenceEvent(BambiCallConferenceEvent *this)
{
  std::__shared_weak_count *v2;
  void **v3;

  *(_QWORD *)this = off_1E78C9130;
  v3 = (void **)((char *)this + 40);
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)this = &off_1E78BD300;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;
  void **v3;

  *(_QWORD *)this = off_1E78C9130;
  v3 = (void **)((char *)this + 40);
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)this = &off_1E78BD300;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  MEMORY[0x1C3B87100](this, 0x10A1C407AE6A5FBLL);
}

BambiCallEvent *BambiCallConferenceEvent::clone(uint64_t **this)
{
  BambiCallEvent *v2;
  uint64_t *v3;

  v2 = (BambiCallEvent *)operator new();
  BambiCallEvent::BambiCallEvent(v2, (const BambiCallEvent *)this);
  *v3 = (uint64_t)off_1E78C9130;
  v3[5] = 0;
  v3[6] = 0;
  v3[7] = 0;
  if (v3 != (uint64_t *)this)
    std::vector<std::weak_ptr<BambiConferenceParticipant>>::__assign_with_size[abi:ne180100]<std::weak_ptr<BambiConferenceParticipant>*,std::weak_ptr<BambiConferenceParticipant>*>(v3 + 5, this[5], this[6], ((char *)this[6] - (char *)this[5]) >> 4);
  *((_DWORD *)v2 + 16) = *((_DWORD *)this + 16);
  return v2;
}

void sub_1BEF4B77C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  std::__shared_weak_count *v4;
  va_list va;

  va_start(va, a2);
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *v2 = &off_1E78BD300;
  v4 = (std::__shared_weak_count *)v2[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  MEMORY[0x1C3B87100](v2, 0x10A1C407AE6A5FBLL);
  _Unwind_Resume(a1);
}

void BambiCallSessionConfirmedEvent::~BambiCallSessionConfirmedEvent(BambiCallSessionConfirmedEvent *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E78BD300;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E78BD300;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

void BambiCallSessionConfirmedEvent::clone(BambiCallSessionConfirmedEvent *this)
{
  BambiCallEvent *v2;
  _QWORD *v3;

  v2 = (BambiCallEvent *)operator new();
  BambiCallEvent::BambiCallEvent(v2, this);
  *v3 = &off_1E78C8FE0;
}

void BambiCallPreconditionsSatisfiedEvent::~BambiCallPreconditionsSatisfiedEvent(void **this)
{
  std::__shared_weak_count *v2;

  *this = off_1E78C9298;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = &off_1E78BD300;
  v2 = (std::__shared_weak_count *)this[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *this = off_1E78C9298;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = &off_1E78BD300;
  v2 = (std::__shared_weak_count *)this[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1C3B87100);
}

BambiCallEvent *BambiCallPreconditionsSatisfiedEvent::clone(BambiCallPreconditionsSatisfiedEvent *this)
{
  BambiCallEvent *v2;

  v2 = (BambiCallEvent *)operator new();
  BambiCallPreconditionsSatisfiedEvent::BambiCallPreconditionsSatisfiedEvent(v2, (uint64_t)this);
  return v2;
}

void sub_1BEF4B988(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C406AA0CD03);
  _Unwind_Resume(a1);
}

void BambiCallSessionIntervalTooSmallEvent::~BambiCallSessionIntervalTooSmallEvent(BambiCallSessionIntervalTooSmallEvent *this)
{
  SipMessage *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = off_1E78C91E8;
  *((_QWORD *)this + 5) = off_1E78E40E8;
  v2 = (BambiCallSessionIntervalTooSmallEvent *)((char *)this + 40);
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  SipMessage::~SipMessage(v2);
  *(_QWORD *)this = &off_1E78BD300;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

{
  SipMessage *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = off_1E78C91E8;
  *((_QWORD *)this + 5) = off_1E78E40E8;
  v2 = (BambiCallSessionIntervalTooSmallEvent *)((char *)this + 40);
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  SipMessage::~SipMessage(v2);
  *(_QWORD *)this = &off_1E78BD300;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x1C3B87100);
}

BambiCallSessionIntervalTooSmallEvent *BambiCallSessionIntervalTooSmallEvent::clone(BambiCallSessionIntervalTooSmallEvent *this)
{
  BambiCallSessionIntervalTooSmallEvent *v2;

  v2 = (BambiCallSessionIntervalTooSmallEvent *)operator new();
  BambiCallSessionIntervalTooSmallEvent::BambiCallSessionIntervalTooSmallEvent(v2, this);
  return v2;
}

void sub_1BEF4BAD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10F3C408053D7E0);
  _Unwind_Resume(a1);
}

void BambiCallSessionMovedEvent::~BambiCallSessionMovedEvent(BambiCallSessionMovedEvent *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78C9240;
  SipUri::~SipUri((BambiCallSessionMovedEvent *)((char *)this + 40));
  *(_QWORD *)this = &off_1E78BD300;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78C9240;
  SipUri::~SipUri((BambiCallSessionMovedEvent *)((char *)this + 40));
  *(_QWORD *)this = &off_1E78BD300;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1C3B87100);
}

BambiCallSessionMovedEvent *BambiCallSessionMovedEvent::clone(BambiCallSessionMovedEvent *this)
{
  BambiCallSessionMovedEvent *v2;

  v2 = (BambiCallSessionMovedEvent *)operator new();
  BambiCallSessionMovedEvent::BambiCallSessionMovedEvent(v2, this);
  return v2;
}

void sub_1BEF4BBE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40E35FCC66);
  _Unwind_Resume(a1);
}

void BambiCallHoldResumeIndicationEvent::~BambiCallHoldResumeIndicationEvent(BambiCallHoldResumeIndicationEvent *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E78BD300;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E78BD300;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

double BambiCallHoldResumeIndicationEvent::clone(BambiCallHoldResumeIndicationEvent *this)
{
  BambiCallEvent *v2;
  uint64_t v3;
  double result;

  v2 = (BambiCallEvent *)operator new();
  BambiCallEvent::BambiCallEvent(v2, this);
  *(_QWORD *)v3 = &off_1E78C9020;
  result = *((double *)this + 5);
  *(double *)(v3 + 40) = result;
  return result;
}

void SessionTerminatedResultDomain::textForResultCode(int a1@<W1>, std::string *a2@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  __int128 v5;

  if (a1 <= 37)
    v3 = a1;
  else
    v3 = 10;
  v4 = reasonStrings + 24 * v3;
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  }
}

BOOL SessionTerminatedResultDomain::isError(SessionTerminatedResultDomain *this, int a2)
{
  return a2 > 9;
}

void std::vector<std::weak_ptr<BambiConferenceParticipant>>::__assign_with_size[abi:ne180100]<std::weak_ptr<BambiConferenceParticipant>*,std::weak_ptr<BambiConferenceParticipant>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *i;
  std::__shared_weak_count *v26;

  v6 = a2;
  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = (_QWORD *)*a1;
  if (a4 <= (v8 - *a1) >> 4)
  {
    v18 = (a1[1] - (uint64_t)v10) >> 4;
    if (v18 >= a4)
    {
      v24 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<BambiConferenceParticipant> *,std::weak_ptr<BambiConferenceParticipant> *,std::weak_ptr<BambiConferenceParticipant> *>(a2, a3, v10);
      for (i = (_QWORD *)a1[1]; i != v24; i -= 2)
      {
        v26 = (std::__shared_weak_count *)*(i - 1);
        if (v26)
          std::__shared_weak_count::__release_weak(v26);
      }
      a1[1] = (uint64_t)v24;
    }
    else
    {
      v19 = &a2[2 * v18];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<BambiConferenceParticipant> *,std::weak_ptr<BambiConferenceParticipant> *,std::weak_ptr<BambiConferenceParticipant> *>(a2, v19, v10);
      v20 = (uint64_t *)a1[1];
      while (v19 != a3)
      {
        v21 = v19[1];
        *v20 = *v19;
        v20[1] = v21;
        if (v21)
        {
          v22 = (unint64_t *)(v21 + 16);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v19 += 2;
        v20 += 2;
      }
      a1[1] = (uint64_t)v20;
    }
  }
  else
  {
    if (v10)
    {
      std::vector<std::weak_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      goto LABEL_31;
    v11 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v11 = a4;
    v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v11;
    if (v12 >> 60)
LABEL_31:
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(v9, v12);
    *a1 = (uint64_t)v13;
    a1[1] = (uint64_t)v13;
    a1[2] = (uint64_t)&v13[2 * v14];
    while (v6 != a3)
    {
      v15 = v6[1];
      *v13 = *v6;
      v13[1] = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 16);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v6 += 2;
      v13 += 2;
    }
    a1[1] = (uint64_t)v13;
  }
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<BambiConferenceParticipant> *,std::weak_ptr<BambiConferenceParticipant> *,std::weak_ptr<BambiConferenceParticipant> *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v7 = *v5;
      v6 = v5[1];
      if (v6)
      {
        v8 = (unint64_t *)(v6 + 16);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = (std::__shared_weak_count *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (v10)
        std::__shared_weak_count::__release_weak(v10);
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::weak_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::weak_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
  }
  a1[1] = v2;
}

uint64_t std::vector<std::weak_ptr<BambiConferenceParticipant>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<BambiConferenceParticipant>>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<BambiConferenceParticipant>>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[4];
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = &v14;
  v12[3] = 1;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 16);
    do
    {
      v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((_QWORD *)&v14 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    v10 = v14;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<BambiConferenceParticipant>>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<BambiConferenceParticipant>>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<BambiConferenceParticipant>>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<BambiConferenceParticipant>>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v1 += 16;
  }
}

void **std::__split_buffer<std::weak_ptr<BambiConferenceParticipant>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::weak_ptr<BambiConferenceParticipant>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::weak_ptr<BambiConferenceParticipant>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  while (v1 != v2)
  {
    *(_QWORD *)(a1 + 16) = v1 - 16;
    v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      v1 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void __cxx_global_array_dtor()
{
  uint64_t i;

  for (i = 0; i != -120; i -= 24)
  {
    if (*((char *)&kCodeStrings + i + 119) < 0)
      operator delete(*(void **)((char *)&kCodeStrings + i + 96));
  }
}

uint64_t _GLOBAL__sub_I_BambiCallEvent_cpp()
{
  uint64_t v0;
  uint64_t v1;
  std::string __p;
  _QWORD v4[3];
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD v30[3];
  _QWORD v31[3];
  _QWORD v32[3];
  _QWORD v33[3];
  _QWORD v34[3];
  _QWORD v35[3];
  __int128 v36;
  _QWORD v37[3];
  _QWORD v38[3];
  _QWORD v39[3];
  _QWORD v40[3];
  __int128 v41;

  *(_QWORD *)&v41 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "Unknown");
  std::string::basic_string[abi:ne180100]<0>(v4, "Trying");
  std::string::basic_string[abi:ne180100]<0>(v5, "SessionRequested");
  std::string::basic_string[abi:ne180100]<0>(v6, "ProvisionalResponse");
  std::string::basic_string[abi:ne180100]<0>(v7, "Ringing");
  std::string::basic_string[abi:ne180100]<0>(v8, "PlayLRBT");
  std::string::basic_string[abi:ne180100]<0>(v9, "StopLRBT");
  std::string::basic_string[abi:ne180100]<0>(v10, "CallIsBeingForwarded");
  std::string::basic_string[abi:ne180100]<0>(v11, "SessionProgress");
  std::string::basic_string[abi:ne180100]<0>(v12, "SessionConfirmed");
  std::string::basic_string[abi:ne180100]<0>(v13, "SessionActivated");
  std::string::basic_string[abi:ne180100]<0>(v14, "SessionActivationAccepted");
  std::string::basic_string[abi:ne180100]<0>(v15, "SessionDeactivated");
  std::string::basic_string[abi:ne180100]<0>(v16, "SessionDeactivationAccepted");
  std::string::basic_string[abi:ne180100]<0>(v17, "SessionTerminating");
  std::string::basic_string[abi:ne180100]<0>(v18, "SessionTerminated");
  std::string::basic_string[abi:ne180100]<0>(v19, "SessionHoldFailed");
  std::string::basic_string[abi:ne180100]<0>(v20, "SessionResumeFailed");
  std::string::basic_string[abi:ne180100]<0>(v21, "SessionHoldIndication");
  std::string::basic_string[abi:ne180100]<0>(v22, "SessionResumeIndication");
  std::string::basic_string[abi:ne180100]<0>(v23, "JoinedConference");
  std::string::basic_string[abi:ne180100]<0>(v24, "ConferenceEvent");
  std::string::basic_string[abi:ne180100]<0>(v25, "SessionIntervalTooSmall");
  std::string::basic_string[abi:ne180100]<0>(v26, "PreconditionsSatisfied");
  std::string::basic_string[abi:ne180100]<0>(v27, "MediaInitialized");
  std::string::basic_string[abi:ne180100]<0>(v28, "MediaActivated");
  std::string::basic_string[abi:ne180100]<0>(v29, "MediaDeactivated");
  std::string::basic_string[abi:ne180100]<0>(v30, "MediaConfigured");
  std::string::basic_string[abi:ne180100]<0>(v31, "ActiveForkChanged");
  std::string::basic_string[abi:ne180100]<0>(v32, "TextSessionDetected");
  std::string::basic_string[abi:ne180100]<0>(v33, "SessionAcknowledged");
  std::string::basic_string[abi:ne180100]<0>(v34, "TextSessionDeactivated");
  std::string::basic_string[abi:ne180100]<0>(v35, "SessionMoved");
  eventNames = 0;
  qword_1ED704100 = 0;
  qword_1ED704108 = 0;
  eventNames = (uint64_t)operator new(0x318uLL);
  qword_1ED704100 = eventNames;
  qword_1ED704108 = eventNames + 792;
  qword_1ED704100 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&qword_1ED704108, (__int128 *)&__p, &v36, (std::string *)eventNames);
  v0 = 792;
  do
  {
    if (__p.__r_.__value_.__s.__data_[v0 - 1] < 0)
      operator delete(*(void **)((char *)&__p.__r_.__value_.__l + v0 - 24));
    v0 -= 24;
  }
  while (v0);
  __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &eventNames, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "SessionTerminated");
  ImsResultDomain::ImsResultDomain((uint64_t)&SessionTerminatedResultDomain::_domain, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SessionTerminatedResultDomain::_domain = (uint64_t)off_1E78C90E8;
  __cxa_atexit((void (*)(void *))SessionTerminatedResultDomain::~SessionTerminatedResultDomain, &SessionTerminatedResultDomain::_domain, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "LocalHangup");
  std::string::basic_string[abi:ne180100]<0>(v4, "RemoteHangup");
  std::string::basic_string[abi:ne180100]<0>(v5, "LocalCallRejected");
  std::string::basic_string[abi:ne180100]<0>(v6, "RemoteCallRejected");
  std::string::basic_string[abi:ne180100]<0>(v7, "LocalRequestCanceled");
  std::string::basic_string[abi:ne180100]<0>(v8, "RemoteRequestCanceled");
  std::string::basic_string[abi:ne180100]<0>(v9, "CallAnsweredElsewhere");
  std::string::basic_string[abi:ne180100]<0>(v10, "SecondaryDeviceInUse");
  std::string::basic_string[abi:ne180100]<0>(v11, "SilentHangup");
  std::string::basic_string[abi:ne180100]<0>(v12, "TransferredToOtherDevice");
  std::string::basic_string[abi:ne180100]<0>(v13, "UnknownError");
  std::string::basic_string[abi:ne180100]<0>(v14, "NetworkError");
  std::string::basic_string[abi:ne180100]<0>(v15, "RemoteRequestTerminated");
  std::string::basic_string[abi:ne180100]<0>(v16, "RequestTimeout");
  std::string::basic_string[abi:ne180100]<0>(v17, "TemporarilyUnavailable");
  std::string::basic_string[abi:ne180100]<0>(v18, "EmergencySessionRequired");
  std::string::basic_string[abi:ne180100]<0>(v19, "Forbidden");
  std::string::basic_string[abi:ne180100]<0>(v20, "InviteResponseTimeout");
  std::string::basic_string[abi:ne180100]<0>(v21, "LocalError");
  std::string::basic_string[abi:ne180100]<0>(v22, "MediaError");
  std::string::basic_string[abi:ne180100]<0>(v23, "MediaTimeout");
  std::string::basic_string[abi:ne180100]<0>(v24, "MediaHeartbeatTimeout");
  std::string::basic_string[abi:ne180100]<0>(v25, "LocalSocketError");
  std::string::basic_string[abi:ne180100]<0>(v26, "WaitForRingingTimeout");
  std::string::basic_string[abi:ne180100]<0>(v27, "LocalQosTimeout");
  std::string::basic_string[abi:ne180100]<0>(v28, "VoiceNotSupported");
  std::string::basic_string[abi:ne180100]<0>(v29, "EmergencyStateExited");
  std::string::basic_string[abi:ne180100]<0>(v30, "AccessBarring");
  std::string::basic_string[abi:ne180100]<0>(v31, "OnEmergencyCall");
  std::string::basic_string[abi:ne180100]<0>(v32, "SdpError");
  std::string::basic_string[abi:ne180100]<0>(v33, "Deinitializing");
  std::string::basic_string[abi:ne180100]<0>(v34, "NoEmergencyCallLocation");
  std::string::basic_string[abi:ne180100]<0>(v35, "AudioUnit");
  std::string::basic_string[abi:ne180100]<0>(&v36, "AVConferenceCrash");
  std::string::basic_string[abi:ne180100]<0>(v37, "LocalBusy");
  std::string::basic_string[abi:ne180100]<0>(v38, "BasebandCrash");
  std::string::basic_string[abi:ne180100]<0>(v39, "NetworkUnreachable");
  std::string::basic_string[abi:ne180100]<0>(v40, "RequiresRedialReasonMax");
  reasonStrings = 0;
  qword_1ED7042E0 = 0;
  qword_1ED7042E8 = 0;
  reasonStrings = (uint64_t)operator new(0x390uLL);
  qword_1ED7042E0 = reasonStrings;
  qword_1ED7042E8 = reasonStrings + 912;
  qword_1ED7042E0 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&qword_1ED7042E8, (__int128 *)&__p, &v41, (std::string *)reasonStrings);
  v1 = 912;
  do
  {
    if (__p.__r_.__value_.__s.__data_[v1 - 1] < 0)
      operator delete(*(void **)((char *)&__p.__r_.__value_.__l + v1 - 24));
    v1 -= 24;
  }
  while (v1);
  __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &reasonStrings, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(kCodeStrings, "Unknown");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70E530, "AllParticipantsJoined");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70E548, "MergeFailed");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70E560, "ConferenceSubscriptionFailed");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70E578, "ConferenceSubscriptionSuccess");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_1BEDF4000);
}

void sub_1BEF4CA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v19;

  qword_1ED7042E0 = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  v19 = 912;
  while (1)
  {
    if (*((char *)&__p + v19 - 1) < 0)
      operator delete(*(void **)((char *)&__p + v19 - 24));
    v19 -= 24;
    if (!v19)
      _Unwind_Resume(a1);
  }
}

void SipDigestAuthScheme::SipDigestAuthScheme(SipDigestAuthScheme *this, const SipDigestAuthScheme *a2)
{
  uint64_t v4;
  std::vector<std::string> *v5;
  std::string *v6;
  std::string *v7;
  std::vector<std::string> *v8;

  SipAuthScheme::SipAuthScheme(this, a2);
  *(_OWORD *)(v4 + 56) = 0u;
  *(_QWORD *)v4 = &off_1E78C92F0;
  v5 = (std::vector<std::string> *)(v4 + 80);
  *(_OWORD *)(v4 + 104) = 0u;
  v6 = (std::string *)(v4 + 104);
  v7 = (std::string *)(v4 + 128);
  *(_QWORD *)(v4 + 160) = 0;
  v8 = (std::vector<std::string> *)(v4 + 160);
  *(_QWORD *)(v4 + 168) = 0;
  *(_QWORD *)(v4 + 176) = 0;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_DWORD *)(v4 + 48) = *((_DWORD *)a2 + 12);
  std::string::operator=((std::string *)(v4 + 56), (const std::string *)((char *)a2 + 56));
  if (this != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *((std::string **)a2 + 10), *((__int128 **)a2 + 11), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3));
  std::string::operator=(v6, (const std::string *)((char *)a2 + 104));
  *((_BYTE *)this + 152) = *((_BYTE *)a2 + 152);
  std::string::operator=(v7, (const std::string *)((char *)a2 + 128));
  if (this != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v8, *((std::string **)a2 + 20), *((__int128 **)a2 + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 3));
}

void sub_1BEF4CCC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 151) < 0)
    operator delete(*v5);
  if (*(char *)(v2 + 127) < 0)
    operator delete(*v4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v3);
  *(_QWORD *)v2 = off_1E78D92D8;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2 + 8);
  _Unwind_Resume(a1);
}

void SipDigestAuthScheme::clear(SipDigestAuthScheme *this)
{
  *((_DWORD *)this + 12) = 0;
  if (*((char *)this + 79) < 0)
  {
    **((_BYTE **)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
  }
  else
  {
    *((_BYTE *)this + 56) = 0;
    *((_BYTE *)this + 79) = 0;
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 10);
  if (*((char *)this + 127) < 0)
  {
    **((_BYTE **)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
  }
  else
  {
    *((_BYTE *)this + 104) = 0;
    *((_BYTE *)this + 127) = 0;
  }
  *((_BYTE *)this + 152) = 0;
  if (*((char *)this + 151) < 0)
  {
    **((_BYTE **)this + 16) = 0;
    *((_QWORD *)this + 17) = 0;
  }
  else
  {
    *((_BYTE *)this + 128) = 0;
    *((_BYTE *)this + 151) = 0;
  }
}

uint64_t SipDigestAuthScheme::encodeNonceCount(SipDigestAuthScheme *this, ImsOutStream *a2)
{
  _QWORD *v3;
  uint64_t result;
  char v5;

  v3 = (_QWORD *)*((_QWORD *)a2 + 1);
  *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  *((_BYTE *)a2 + 17) = 0;
  v5 = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, &v5);
  *(_QWORD *)(*((_QWORD *)a2 + 1) + *(_QWORD *)(**((_QWORD **)a2 + 1) - 24) + 24) = 8;
  result = std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

uint64_t SipDigestAuthScheme::encodeDirectives(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  void **v10;
  unsigned __int8 *v11;
  void **v12;
  unsigned __int8 *v13;
  void **v14;
  unsigned __int8 *v15;
  std::string::size_type size;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  __int128 v21;
  uint64_t v22;
  void *__p[2];
  uint64_t v24;
  std::string __str;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  const char *v29;

  SipAuthScheme::encodeDirectives(a1, a2);
  if (!a3)
  {
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v26, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v26 + 1), (uint64_t)"\"", 1);
    BYTE1(v27) = 0;
    v6 = *(_QWORD *)(a1 + 80);
    if (*(_QWORD *)(a1 + 88) != v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        if (v8)
        {
          __str.__r_.__value_.__s.__data_[0] = 44;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v26 + 1), (uint64_t)&__str, 1);
          BYTE1(v27) = 0;
          v6 = *(_QWORD *)(a1 + 80);
        }
        (*(void (**)(__int128 *, uint64_t))(v26 + 32))(&v26, v6 + v7);
        ++v8;
        v6 = *(_QWORD *)(a1 + 80);
        v7 += 24;
      }
      while (v8 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 88) - v6) >> 3));
    }
    __str.__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v26 + 1), (uint64_t)&__str, 1);
    BYTE1(v27) = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v27 + 1) + 8, &__str);
    __p[0] = SipDigestAuthScheme::kDirectiveQualityOfProtection;
    v9 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, SipDigestAuthScheme::kDirectiveQualityOfProtection, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    v10 = (void **)(v9 + 40);
    if ((char)v9[63] < 0)
      operator delete(*v10);
    *(std::string *)v10 = __str;
    *(_QWORD *)&v26 = &off_1E78D7A10;
    if ((_BYTE)v27 && *((_QWORD *)&v26 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 8))(*((_QWORD *)&v26 + 1));
    goto LABEL_36;
  }
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_16:
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v26, 1);
    __str.__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v26 + 1), (uint64_t)&__str, 1);
    BYTE1(v27) = 0;
    (*(void (**)(__int128 *, uint64_t))(v26 + 32))(&v26, a1 + 56);
    __str.__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v26 + 1), (uint64_t)&__str, 1);
    BYTE1(v27) = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v27 + 1) + 8, &__str);
    std::string::basic_string[abi:ne180100]<0>(__p, "uri");
    *(_QWORD *)&v21 = __p;
    v11 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__p, (__int128 **)&v21);
    v12 = (void **)(v11 + 40);
    if ((char)v11[63] < 0)
      operator delete(*v12);
    *(std::string *)v12 = __str;
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
    __str.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v24) < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(_QWORD *)&v26 = &off_1E78D7A10;
    if ((_BYTE)v27 && *((_QWORD *)&v26 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 8))(*((_QWORD *)&v26 + 1));
    goto LABEL_24;
  }
  if (*(_QWORD *)(a1 + 64))
    goto LABEL_16;
LABEL_24:
  if (*(_DWORD *)(a1 + 48))
  {
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v26, 1);
    SipDigestAuthScheme::encodeNonceCount((SipDigestAuthScheme *)a1, (ImsOutStream *)&v26);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v27 + 1) + 8, &__str);
    std::string::basic_string[abi:ne180100]<0>(__p, "nc");
    *(_QWORD *)&v21 = __p;
    v13 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__p, (__int128 **)&v21);
    v14 = (void **)(v13 + 40);
    if ((char)v13[63] < 0)
      operator delete(*v14);
    *(std::string *)v14 = __str;
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
    __str.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v24) < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(_QWORD *)&v26 = &off_1E78D7A10;
    if ((_BYTE)v27 && *((_QWORD *)&v26 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 8))(*((_QWORD *)&v26 + 1));
  }
  if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 127))
      goto LABEL_36;
    goto LABEL_35;
  }
  if (*(_QWORD *)(a1 + 112))
  {
LABEL_35:
    *(_QWORD *)&v26 = SipDigestAuthScheme::kDirectiveQualityOfProtection;
    v15 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, SipDigestAuthScheme::kDirectiveQualityOfProtection, (uint64_t)&std::piecewise_construct, (__int128 **)&v26);
    std::string::operator=((std::string *)(v15 + 40), (const std::string *)(a1 + 104));
  }
LABEL_36:
  memset(&__str, 0, sizeof(__str));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 120))(a1, &__str);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    *(_QWORD *)&v26 = "algorithm";
    v17 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, "algorithm", (uint64_t)&std::piecewise_construct, (__int128 **)&v26);
    std::string::operator=((std::string *)(v17 + 40), &__str);
  }
  __p[0] = 0;
  __p[1] = 0;
  v24 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1))
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 104))(a1, __p);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v26, 1);
  LOBYTE(v21) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v26 + 1), (uint64_t)&v21, 1);
  BYTE1(v27) = 0;
  (*(void (**)(__int128 *, void **))(v26 + 32))(&v26, __p);
  LOBYTE(v21) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v26 + 1), (uint64_t)&v21, 1);
  BYTE1(v27) = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v27 + 1) + 8, &v21);
  v29 = "nonce";
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, "nonce", (uint64_t)&std::piecewise_construct, (__int128 **)&v29);
  v19 = v18 + 40;
  if ((char)v18[63] < 0)
    operator delete(*(void **)v19);
  *(_OWORD *)v19 = v21;
  *((_QWORD *)v19 + 2) = v22;
  *(_QWORD *)&v26 = &off_1E78D7A10;
  if ((_BYTE)v27 && *((_QWORD *)&v26 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 8))(*((_QWORD *)&v26 + 1));
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BEF4D3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a30)
  {
    if (a29)
      (*(void (**)(uint64_t))(*(_QWORD *)a29 + 8))(a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipDigestAuthScheme::parseDirective(uint64_t a1, std::string::size_type a2, std::string *__str)
{
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  std::string *v8;
  unsigned __int16 *v9;
  int v11;
  int v12;
  std::string::size_type v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;
  int v20;
  unsigned __int16 *v23;
  uint64_t v24;
  int v25;
  std::string *v27;
  uint64_t v28;
  std::string __p;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  void (**v34)(SipParameterMap *__hidden);
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  void (**v52)(SipParameterMap *__hidden);
  _QWORD *v53;
  _QWORD v54[5];
  uint64_t v55;
  __int128 v56;

  v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  switch(v5)
  {
    case 2:
      if (v6 >= 0)
        v7 = (unsigned __int16 *)a2;
      else
        v7 = *(unsigned __int16 **)a2;
      if (*v7 != 25454)
        goto LABEL_49;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = __str;
      else
        v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
      *(_DWORD *)(a1 + 48) = strtoul((const char *)v8, 0, 16);
      return 1;
    case 3:
      if (v6 >= 0)
        v9 = (unsigned __int16 *)a2;
      else
        v9 = *(unsigned __int16 **)a2;
      if (*v9 != 29301 || *((_BYTE *)v9 + 2) != 105)
      {
        v11 = *v9;
        v12 = *((unsigned __int8 *)v9 + 2);
        if (v11 == 28529 && v12 == 112)
        {
          v14 = 0;
          memset(&__p, 0, sizeof(__p));
          while (1)
          {
            v14 = ims::nextToken(__str, v14, &__p, 0x2Cu);
            if (v14 == -1)
              break;
            ims::chomp(&__p, "\r\n\t ", 3);
            v15 = *(_QWORD *)(a1 + 88);
            if (v15 >= *(_QWORD *)(a1 + 96))
            {
              v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 80), (__int128 *)&__p);
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(a1 + 88), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else
              {
                v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(_QWORD *)(v15 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)v15 = v16;
              }
              v17 = v15 + 24;
              *(_QWORD *)(a1 + 88) = v15 + 24;
            }
            *(_QWORD *)(a1 + 88) = v17;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (std::string::find(__str, 44, 0) != -1)
            return 1;
          v27 = (std::string *)(a1 + 104);
        }
        else
        {
LABEL_49:
          __p.__r_.__value_.__r.__words[0] = a2;
          v27 = (std::string *)(std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 40);
        }
        std::string::operator=(v27, __str);
        return 1;
      }
      std::string::operator=((std::string *)(a1 + 56), __str);
      v56 = 0u;
      v54[2] = 257;
      v51 = 0u;
      v37 = 257;
      v32 = 0u;
      v33 = 0;
      v30 = 0;
      v31 = 0;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E78D08F8;
      __p.__r_.__value_.__r.__words[2] = 0;
      LOWORD(v32) = 0;
      v36 = 0;
      v34 = &off_1E78B82D8;
      v35 = (unint64_t)&v35 + 8;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BFCE8;
      v48 = 0u;
      v49 = 0u;
      v50 = 0u;
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      *(_QWORD *)&v51 = 0;
      v54[0] = 0;
      v54[1] = 0;
      v52 = &off_1E78B82D8;
      v53 = v54;
      v55 = 0;
      *(_QWORD *)&v56 = 0;
      v54[3] = &off_1E78B82D8;
      v54[4] = &v55;
      WORD4(v56) = 257;
      v28 = SipUri::fromString((uint64_t)&__p, __str);
      SipUri::~SipUri((SipUri *)&__p);
      return v28;
    case 5:
      if (v6 >= 0)
        v18 = (unsigned __int16 *)a2;
      else
        v18 = *(unsigned __int16 **)a2;
      v19 = *(_DWORD *)v18;
      v20 = *((unsigned __int8 *)v18 + 4);
      if (v19 != 1668181870 || v20 != 101)
        goto LABEL_49;
      return (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, __str);
    case 9:
      if (v6 >= 0)
        v23 = (unsigned __int16 *)a2;
      else
        v23 = *(unsigned __int16 **)a2;
      v24 = *(_QWORD *)v23;
      v25 = *((unsigned __int8 *)v23 + 8);
      if (v24 != 0x687469726F676C61 || v25 != 109)
        goto LABEL_49;
      return (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 112))(a1, __str);
    default:
      goto LABEL_49;
  }
}

void sub_1BEF4D880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  SipUri::~SipUri((SipUri *)&__p);
  _Unwind_Resume(a1);
}

uint64_t SipDigestAuthScheme::_computeResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, size_t a6)
{
  uint64_t v12;
  std::string __p;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v17, 1);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a3 + 40))(a3, &v17);
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  if (a4)
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a4 + 80))(a4, v15);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v18 + 1) + 8, &__p);
  v12 = SipDigestAuthScheme::_computeResponse(a1, a2, &__p, (uint64_t)v15, a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  *(_QWORD *)&v17 = &off_1E78D7A10;
  if ((_BYTE)v18 && *((_QWORD *)&v17 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 8))(*((_QWORD *)&v17 + 1));
  return v12;
}

void sub_1BEF4D9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a20 < 0)
    operator delete(__p);
  if (a23)
  {
    if (a22)
      (*(void (**)(uint64_t))(*(_QWORD *)a22 + 8))(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipDigestAuthScheme::_computeResponse(uint64_t a1, uint64_t a2, const std::string *a3, uint64_t a4, void *a5, size_t a6)
{
  SipDigestAuthScheme *v10;
  std::string::size_type size;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  __int128 *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t *v27;
  _BYTE *v28;
  unsigned __int8 *v29;
  __int128 *v30;
  size_t v31;
  char v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  void *v37;
  size_t v38;
  __int128 *p_str;
  size_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  size_t v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  SipDigestAuthScheme *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  uint64_t v54;
  SipDigestAuthScheme *v55;
  _QWORD **v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _DWORD *v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unsigned __int8 *v75;
  BOOL v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  unsigned __int8 *v82;
  __int128 *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  std::string *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  SipDigestAuthScheme *v91;
  uint64_t v92;
  uint64_t v93;
  const std::string *v94;
  void *__src;
  size_t v96;
  std::string v97;
  void *__p;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD v104[2];
  uint64_t v105;
  std::string v106;
  _QWORD v107[2];
  std::string v108;
  void *v109[2];
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  std::string v114;
  __int128 __str;
  __int128 __str_16;
  uint64_t v117;

  v10 = (SipDigestAuthScheme *)a1;
  memset(&v106, 0, sizeof(v106));
  if (*(char *)(a1 + 151) < 0)
    std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)(a1 + 128), *(_QWORD *)(a1 + 136));
  else
    v106 = *(std::string *)(a1 + 128);
  size = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v106.__r_.__value_.__l.__size_;
  if (!size)
    std::string::operator=(&v106, (const std::string *)SipDigestAlgorithm::kAlgorithmMD5);
  __src = a5;
  v96 = a6;
  v105 = 0;
  memset(v104, 0, sizeof(v104));
  SipDigestAlgorithmManager::SipDigestAlgorithmManager((SipDigestAlgorithmManager *)v104);
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v104, (unsigned __int8 *)&v106);
  if (v12 && (v13 = *((_QWORD *)v12 + 5)) != 0)
  {
    v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)v10 + 1, "username");
    v15 = (__int128 *)(v14 + 40);
    if (!v14)
      v15 = &ims::kEmptyString;
    v16 = *((unsigned __int8 *)v15 + 23);
    v17 = *((_QWORD *)v15 + 1);
    if ((v16 & 0x80u) == 0)
      v17 = v16;
    if (v17)
    {
      v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)v10 + 1, "realm");
      v19 = (__int128 *)(v18 + 40);
      if (!v18)
        v19 = &ims::kEmptyString;
      v20 = *((unsigned __int8 *)v19 + 23);
      v21 = *((_QWORD *)v19 + 1);
      if ((v20 & 0x80u) == 0)
        v21 = v20;
      if (v21)
      {
        v88 = v13;
        v89 = (_QWORD *)((char *)v10 + 8);
        if (((*(uint64_t (**)(SipDigestAuthScheme *))(*(_QWORD *)v10 + 88))(v10) & 1) != 0)
        {
          v91 = v10;
          v87 = a4;
          v94 = a3;
          if (!*((_BYTE *)v10 + 152))
          {
            v27 = *((_QWORD *)v10 + 20) == *((_QWORD *)v10 + 21) ? &kPreferredQopList : (uint64_t *)((char *)v10 + 160);
            v86 = (std::string *)((char *)v10 + 104);
            if (*((char *)v10 + 127) < 0)
            {
              *((_QWORD *)v10 + 14) = 0;
              v28 = (_BYTE *)*((_QWORD *)v10 + 13);
            }
            else
            {
              *((_BYTE *)v10 + 127) = 0;
              v28 = (char *)v10 + 104;
            }
            *v28 = 0;
            v64 = v27[1];
            v90 = *v27;
            v65 = v64 - *v27;
            if (v64 != v90)
            {
              v66 = 0;
              v67 = v65 / 24;
              if (v67 <= 1)
                v68 = 1;
              else
                v68 = v67;
              v69 = *((_QWORD *)v10 + 10);
              v92 = v68;
              v93 = *((_QWORD *)v10 + 11);
              if ((unint64_t)((v93 - v69) / 24) <= 1)
                v70 = 1;
              else
                v70 = (v93 - v69) / 24;
              while (1)
              {
                if (v93 != v69)
                {
                  v71 = 0;
                  v72 = v90 + 24 * v66;
                  v73 = *(_BYTE *)(v72 + 23);
                  v74 = v73 >= 0 ? *(unsigned __int8 *)(v72 + 23) : *(_QWORD *)(v72 + 8);
                  v75 = v73 >= 0 ? (unsigned __int8 *)(v90 + 24 * v66) : *(unsigned __int8 **)v72;
                  v76 = 1;
                  do
                  {
                    v77 = (unsigned __int8 *)(v69 + 24 * v71);
                    v78 = v77[23];
                    if ((v78 & 0x80u) == 0)
                      v79 = v77[23];
                    else
                      v79 = *((_QWORD *)v77 + 1);
                    if (v79 == v74)
                    {
                      if ((v78 & 0x80) != 0)
                      {
                        if (!memcmp(*(const void **)v77, v75, *((_QWORD *)v77 + 1)))
                          break;
                      }
                      else
                      {
                        if (!v77[23])
                          break;
                        v80 = v75;
                        while (*v77 == *v80)
                        {
                          ++v77;
                          ++v80;
                          if (!--v78)
                            goto LABEL_161;
                        }
                      }
                    }
                    v76 = ++v71 < (unint64_t)((v93 - v69) / 24);
                  }
                  while (v71 != v70);
LABEL_161:
                  v10 = v91;
                  a3 = v94;
                  if (v76)
                    break;
                }
                if (++v66 == v92)
                  goto LABEL_22;
              }
              std::string::operator=(v86, (const std::string *)v72);
            }
          }
LABEL_22:
          std::string::operator=((std::string *)((char *)v10 + 56), a3);
          v101 = 0;
          v102 = 0;
          v103 = 0;
          __str = 0uLL;
          *(_QWORD *)&__str_16 = 0;
          v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v89, "username");
          v23 = (__int128 *)(v22 + 40);
          if (!v22)
            v23 = &ims::kEmptyString;
          if (*((char *)v23 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
          }
          else
          {
            __str = *v23;
            *(_QWORD *)&__str_16 = *((_QWORD *)v23 + 2);
          }
          v111 = 0uLL;
          *(_QWORD *)&v112 = 0;
          v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v89, "realm");
          v30 = (__int128 *)(v29 + 40);
          if (!v29)
            v30 = &ims::kEmptyString;
          if (*((char *)v30 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v111, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
          }
          else
          {
            v111 = *v30;
            *(_QWORD *)&v112 = *((_QWORD *)v30 + 2);
          }
          memset(&v114, 0, sizeof(v114));
          v31 = BYTE7(__str_16);
          v32 = BYTE7(__str_16);
          v33 = *((_QWORD *)&__str + 1);
          if ((SBYTE7(__str_16) & 0x80u) == 0)
            v34 = BYTE7(__str_16);
          else
            v34 = *((_QWORD *)&__str + 1);
          v35 = BYTE7(v112);
          if (SBYTE7(v112) < 0)
            v35 = *((_QWORD *)&v111 + 1);
          v36 = v96 + v34 + v35;
          if (v36 == -2)
          {
            v37 = 0;
          }
          else
          {
            std::vector<unsigned char>::__append((unint64_t *)&v114, v36 + 2);
            v31 = BYTE7(__str_16);
            v33 = *((_QWORD *)&__str + 1);
            v37 = (void *)v114.__r_.__value_.__r.__words[0];
            v32 = BYTE7(__str_16);
          }
          if (v32 >= 0)
            v38 = v31;
          else
            v38 = v33;
          if (v38)
          {
            if (v32 >= 0)
              p_str = &__str;
            else
              p_str = (__int128 *)__str;
            memmove(v37, p_str, v38);
            v31 = BYTE7(__str_16);
            v33 = *((_QWORD *)&__str + 1);
            v37 = (void *)v114.__r_.__value_.__r.__words[0];
            v32 = BYTE7(__str_16);
          }
          if (v32 < 0)
            v31 = v33;
          *((_BYTE *)v37 + v31) = 58;
          v40 = v31 + 1;
          v41 = BYTE7(v112);
          v42 = BYTE7(v112);
          v43 = *((_QWORD *)&v111 + 1);
          if ((SBYTE7(v112) & 0x80u) == 0)
            v44 = BYTE7(v112);
          else
            v44 = *((_QWORD *)&v111 + 1);
          if (v44)
          {
            if ((SBYTE7(v112) & 0x80u) == 0)
              v45 = &v111;
            else
              v45 = (__int128 *)v111;
            memmove((void *)(v114.__r_.__value_.__r.__words[0] + v40), v45, v44);
            v41 = BYTE7(v112);
            v43 = *((_QWORD *)&v111 + 1);
            v42 = BYTE7(v112);
          }
          if (v42 < 0)
            v41 = v43;
          v46 = v41 + v40;
          *(_BYTE *)(v114.__r_.__value_.__r.__words[0] + v46) = 58;
          if (v96)
            memmove((void *)(v46 + v114.__r_.__value_.__r.__words[0] + 1), __src, v96);
          v101 = 0;
          v102 = 0;
          v103 = 0;
          (*(void (**)(uint64_t, std::string::size_type, std::string::size_type, void **))(*(_QWORD *)v88 + 24))(v88, v114.__r_.__value_.__r.__words[0], v114.__r_.__value_.__l.__size_ - v114.__r_.__value_.__r.__words[0], &v101);
          if (v114.__r_.__value_.__r.__words[0])
          {
            v114.__r_.__value_.__l.__size_ = v114.__r_.__value_.__r.__words[0];
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          if (SBYTE7(v112) < 0)
            operator delete((void *)v111);
          if (SBYTE7(__str_16) < 0)
            operator delete((void *)__str);
          __p = 0;
          v99 = 0;
          v100 = 0;
          v117 = 0;
          __str = 0u;
          __str_16 = 0u;
          ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&__str, 1);
          (*(void (**)(void))(__str + 32))();
          LOBYTE(v111) = 58;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)&v111, 1);
          BYTE1(__str_16) = 0;
          (*(void (**)(__int128 *, const std::string *))(__str + 32))(&__str, v94);
          v47 = *((unsigned __int8 *)v10 + 127);
          v48 = (char)v47;
          if ((v47 & 0x80u) != 0)
            v47 = *((_QWORD *)v10 + 14);
          if (v47 == 8)
          {
            v49 = v48 >= 0 ? (SipDigestAuthScheme *)((char *)v10 + 104) : (SipDigestAuthScheme *)*((_QWORD *)v10 + 13);
            if (*(_QWORD *)v49 == 0x746E692D68747561)
            {
              LOBYTE(v111) = 58;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)&v111, 1);
              BYTE1(__str_16) = 0;
              v111 = 0uLL;
              *(_QWORD *)&v112 = 0;
              v50 = *(char *)(v87 + 23);
              v51 = v50 >= 0 ? v87 : *(_QWORD *)v87;
              v52 = v50 >= 0 ? *(unsigned __int8 *)(v87 + 23) : *(_QWORD *)(v87 + 8);
              (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v88 + 24))(v88, v51, v52, &v111);
              (*(void (**)(__int128 *, __int128 *))(__str + 32))(&__str, &v111);
              if (SBYTE7(v112) < 0)
                operator delete((void *)v111);
            }
          }
          __p = 0;
          v99 = 0;
          v100 = 0;
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&__str_16 + 1) + 8, &v111);
          if ((SBYTE7(v112) & 0x80u) == 0)
            v53 = &v111;
          else
            v53 = (__int128 *)v111;
          if ((SBYTE7(v112) & 0x80u) == 0)
            v54 = BYTE7(v112);
          else
            v54 = *((_QWORD *)&v111 + 1);
          (*(void (**)(uint64_t, __int128 *, uint64_t, void **))(*(_QWORD *)v88 + 24))(v88, v53, v54, &__p);
          if (SBYTE7(v112) < 0)
            operator delete((void *)v111);
          *(_QWORD *)&__str = &off_1E78D7A10;
          if ((_BYTE)__str_16 && *((_QWORD *)&__str + 1))
            (*(void (**)(_QWORD))(**((_QWORD **)&__str + 1) + 8))(*((_QWORD *)&__str + 1));
          memset(&v97, 0, sizeof(v97));
          v113 = 0;
          v111 = 0u;
          v112 = 0u;
          ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v111, 1);
          v109[0] = 0;
          v109[1] = 0;
          v110 = 0;
          (*(void (**)(SipDigestAuthScheme *, void **))(*(_QWORD *)v10 + 104))(v10, v109);
          (*(void (**)(__int128 *, void **))(v111 + 32))(&v111, &v101);
          LOBYTE(__str) = 58;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v111 + 1), (uint64_t)&__str, 1);
          BYTE1(v112) = 0;
          (*(void (**)(__int128 *, void **))(v111 + 32))(&v111, v109);
          LOBYTE(__str) = 58;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v111 + 1), (uint64_t)&__str, 1);
          BYTE1(v112) = 0;
          v55 = v10;
          v56 = (_QWORD **)((char *)v10 + 104);
          v57 = *((unsigned __int8 *)v55 + 127);
          v58 = (char)v57;
          v59 = *((_QWORD *)v55 + 14);
          if ((v57 & 0x80u) != 0)
            v57 = v59;
          if (v57 == 8)
          {
            if (v58 >= 0)
              v61 = v56;
            else
              v61 = *v56;
            if (*v61 == 0x746E692D68747561)
              goto LABEL_124;
          }
          else if (v57 == 4)
          {
            v60 = v58 >= 0 ? v56 : *v56;
            if (*v60 == 1752462689)
            {
LABEL_124:
              ++*((_DWORD *)v91 + 12);
              memset(&v108, 0, sizeof(v108));
              v117 = 0;
              __str = 0u;
              __str_16 = 0u;
              ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&__str, 1);
              SipDigestAuthScheme::encodeNonceCount(v91, (ImsOutStream *)&__str);
              std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&__str_16 + 1) + 8, &v114);
              if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v108.__r_.__value_.__l.__data_);
              v108 = v114;
              *(_QWORD *)&__str = &off_1E78D7A10;
              if ((_BYTE)__str_16 && *((_QWORD *)&__str + 1))
                (*(void (**)(_QWORD))(**((_QWORD **)&__str + 1) + 8))(*((_QWORD *)&__str + 1));
              (*(void (**)(__int128 *, std::string *))(v111 + 32))(&v111, &v108);
              LOBYTE(__str) = 58;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v111 + 1), (uint64_t)&__str, 1);
              BYTE1(v112) = 0;
              __str = 0uLL;
              *(_QWORD *)&__str_16 = 0;
              v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v89, "cnonce");
              v63 = (__int128 *)(v62 + 40);
              if (!v62)
                v63 = &ims::kEmptyString;
              if (*((char *)v63 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)v63, *((_QWORD *)v63 + 1));
              }
              else
              {
                __str = *v63;
                *(_QWORD *)&__str_16 = *((_QWORD *)v63 + 2);
              }
              v81 = BYTE7(__str_16);
              if (SBYTE7(__str_16) < 0)
                v81 = *((_QWORD *)&__str + 1);
              if (!v81)
              {
                v107[0] = 0;
                v107[1] = 0;
                ImsRandomNumberGenerator<unsigned char>::ImsRandomNumberGenerator(v107, 0, 63);
                ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)v107, 8, &v114);
                if (SBYTE7(__str_16) < 0)
                  operator delete((void *)__str);
                __str = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
                *(_QWORD *)&__str_16 = *((_QWORD *)&v114.__r_.__value_.__l + 2);
                v114.__r_.__value_.__r.__words[0] = (std::string::size_type)"cnonce";
                v82 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v89, "cnonce", (uint64_t)&std::piecewise_construct, (__int128 **)&v114);
                std::string::operator=((std::string *)(v82 + 40), (const std::string *)&__str);
                ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator(v107);
              }
              (*(void (**)(__int128 *, __int128 *))(v111 + 32))(&v111, &__str);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v111 + 1), (uint64_t)":", 1);
              BYTE1(v112) = 0;
              (*(void (**)(__int128 *, _QWORD **))(v111 + 32))(&v111, v56);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v111 + 1), (uint64_t)":", 1);
              BYTE1(v112) = 0;
              if (SBYTE7(__str_16) < 0)
                operator delete((void *)__str);
              if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v108.__r_.__value_.__l.__data_);
            }
          }
          (*(void (**)(__int128 *, void **))(v111 + 32))(&v111, &__p);
          memset(&v97, 0, sizeof(v97));
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v112 + 1) + 8, &__str);
          if ((SBYTE7(__str_16) & 0x80u) == 0)
            v83 = &__str;
          else
            v83 = (__int128 *)__str;
          if ((SBYTE7(__str_16) & 0x80u) == 0)
            v84 = BYTE7(__str_16);
          else
            v84 = *((_QWORD *)&__str + 1);
          (*(void (**)(uint64_t, __int128 *, uint64_t, std::string *))(*(_QWORD *)v88 + 24))(v88, v83, v84, &v97);
          if (SBYTE7(__str_16) < 0)
            operator delete((void *)__str);
          if (SHIBYTE(v110) < 0)
            operator delete(v109[0]);
          *(_QWORD *)&v111 = &off_1E78D7A10;
          if ((_BYTE)v112 && *((_QWORD *)&v111 + 1))
            (*(void (**)(_QWORD))(**((_QWORD **)&v111 + 1) + 8))(*((_QWORD *)&v111 + 1));
          *(_QWORD *)&__str = "response";
          v85 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v89, "response", (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
          std::string::operator=((std::string *)(v85 + 40), &v97);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
          if (SHIBYTE(v100) < 0)
            operator delete(__p);
          if (SHIBYTE(v103) < 0)
            operator delete(v101);
          v25 = 1;
          goto LABEL_32;
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "auth");
        std::string::basic_string[abi:ne180100]<0>(&v111, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v24 = (_BYTE *)ImsLogger::info(ims::_logger, (uint64_t)&__str, (uint64_t)&v111);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v24 + 1), (uint64_t)"Invalid Authorization header: missing or invalid nonce", 54);
        v24[17] = 0;
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "auth");
        std::string::basic_string[abi:ne180100]<0>(&v111, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v24 = (_BYTE *)ImsLogger::info(ims::_logger, (uint64_t)&__str, (uint64_t)&v111);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v24 + 1), (uint64_t)"Invalid Authorization header: missing realm", 43);
        v24[17] = 0;
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "auth");
      std::string::basic_string[abi:ne180100]<0>(&v111, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v24 = (_BYTE *)ImsLogger::info(ims::_logger, (uint64_t)&__str, (uint64_t)&v111);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v24 + 1), (uint64_t)"Invalid Authorization header: missing username", 46);
      v24[17] = 0;
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "auth");
    std::string::basic_string[abi:ne180100]<0>(&v111, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v24 = (_BYTE *)ImsLogger::info(ims::_logger, (uint64_t)&__str, (uint64_t)&v111);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v24 + 1), (uint64_t)"Invalid Authorization header: unsupported algorithm ", 52);
    v24[17] = 0;
    (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v24 + 32))(v24, &v106);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  v24[17] = 0;
  if (SBYTE7(v112) < 0)
    operator delete((void *)v111);
  if (SBYTE7(__str_16) < 0)
    operator delete((void *)__str);
  v25 = 0;
LABEL_32:
  SipDigestAlgorithmManager::~SipDigestAlgorithmManager((SipDigestAlgorithmManager *)v104);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  return v25;
}

void sub_1BEF4E798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;

  ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator(&a53);
  if (*(char *)(v54 - 121) < 0)
    operator delete(*(void **)(v54 - 144));
  if (*(char *)(v54 - 233) < 0)
    operator delete(*(void **)(v54 - 256));
  if (*(char *)(v54 - 209) < 0)
    operator delete(*(void **)(v54 - 232));
  *(_QWORD *)(v54 - 208) = v53;
  if (*(_BYTE *)(v54 - 192))
  {
    v56 = *(_QWORD *)(v54 - 200);
    if (v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  }
  if (a33 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  SipDigestAlgorithmManager::~SipDigestAlgorithmManager((SipDigestAlgorithmManager *)&a40);
  if (a51 < 0)
    operator delete(a46);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[3];

  v6 = (_QWORD *)(a1 + 24);
  v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v8)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9)
              v15 %= v9;
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v28[2] = 1;
  v16 = operator new(0x40uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v8;
  v17 = *a3;
  v18 = **a3;
  v16[4] = *((_QWORD *)*a3 + 2);
  *((_OWORD *)v16 + 1) = v18;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = 0;
  v16[6] = 0;
  v16[7] = 0;
  v16[5] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a1 + 16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v26 >= v9)
          v26 %= v9;
      }
      else
      {
        v26 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_1BEF4EC78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_SipDigestAuthScheme_cpp()
{
  uint64_t v0;
  __int128 v2;
  _QWORD v3[3];
  __int128 v4;

  *(_QWORD *)&v4 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v2, "auth");
  std::string::basic_string[abi:ne180100]<0>(v3, "auth-int");
  kPreferredQopList = 0;
  qword_1ED70E5E0 = 0;
  qword_1ED70E5E8 = 0;
  kPreferredQopList = (uint64_t)operator new(0x30uLL);
  qword_1ED70E5E0 = kPreferredQopList;
  qword_1ED70E5E8 = kPreferredQopList + 48;
  v0 = 0;
  qword_1ED70E5E0 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&qword_1ED70E5E8, &v2, &v4, (std::string *)kPreferredQopList);
  do
  {
    if (SHIBYTE(v3[v0 + 2]) < 0)
      operator delete((void *)v3[v0]);
    v0 -= 3;
  }
  while (v0 != -6);
  return __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &kPreferredQopList, &dword_1BEDF4000);
}

void sub_1BEF4ED94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v25;

  qword_1ED70E5E0 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  v25 = 0;
  while (1)
  {
    if (*(&a23 + v25) < 0)
      operator delete(*(void **)((char *)&a18 + v25));
    v25 -= 24;
    if (v25 == -48)
      _Unwind_Resume(a1);
  }
}

void ims::analytics::populateCellularInfo(void *a1, uint64_t a2)
{
  BOOL isIwlanOverCellular;
  unsigned __int8 v5;
  const char *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t object;
  void *v17;
  const char *v18;
  char v19;
  void *__p;
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;

  v26 = 0;
  v25 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  if (*(_QWORD *)a2)
  {
    HIDWORD(v26) = ims::strToUint32((uint64_t *)(*(_QWORD *)a2 + 3712), 0);
    LODWORD(v26) = ims::strToUint32((uint64_t *)(*(_QWORD *)a2 + 3688), 0);
    ims::AccessNetworks::cellular((ims::AccessNetworks *)(*(_QWORD *)a2 + 3136), (uint64_t)&v17);
    ims::AccessNetwork::extractCellularInfo(&v17, (int *)&v26, (int *)&v26 + 1, (int *)&v25, (uint64_t)&v22);
    if (v21 < 0)
      operator delete(__p);
    if (v19 < 0)
      operator delete(v17);
    v15 = xpc_int64_create(v26);
    if (!v15)
      v15 = xpc_null_create();
    v17 = a1;
    v18 = "mcc";
    xpc::dict::object_proxy::operator=((uint64_t)&v17, &v15, &object);
    xpc_release(object);
    object = 0;
    xpc_release(v15);
    v15 = 0;
    v13 = xpc_int64_create(HIDWORD(v26));
    if (!v13)
      v13 = xpc_null_create();
    v17 = a1;
    v18 = "mnc";
    xpc::dict::object_proxy::operator=((uint64_t)&v17, &v13, &v14);
    xpc_release(v14);
    v14 = 0;
    xpc_release(v13);
    v13 = 0;
    isIwlanOverCellular = ims::AccessNetworks::isIwlanOverCellular((ims::AccessNetworks *)(*(_QWORD *)a2 + 3136));
    v11 = xpc_BOOL_create(isIwlanOverCellular);
    if (!v11)
      v11 = xpc_null_create();
    v17 = a1;
    v18 = "over_cellular";
    xpc::dict::object_proxy::operator=((uint64_t)&v17, &v11, &v12);
    xpc_release(v12);
    v12 = 0;
    xpc_release(v11);
    v11 = 0;
    v5 = atomic_load((unsigned __int8 *)&_MergedGlobals_7);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_7))
    {
      ims::analytics::CoreLocationState::create(&qword_1ED70EA58);
      __cxa_atexit((void (*)(void *))std::shared_ptr<ims::analytics::CoreLocationState>::~shared_ptr[abi:ne180100], &qword_1ED70EA58, &dword_1BEDF4000);
      __cxa_guard_release(&_MergedGlobals_7);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)qword_1ED70EA58 + 16))(qword_1ED70EA58))
    {
      v9 = xpc_int64_create(v25);
      if (!v9)
        v9 = xpc_null_create();
      v17 = a1;
      v18 = "area_id";
      xpc::dict::object_proxy::operator=((uint64_t)&v17, &v9, &v10);
      xpc_release(v10);
      v10 = 0;
      xpc_release(v9);
      v9 = 0;
      if (SHIBYTE(v24) < 0)
      {
        if (!v23)
          goto LABEL_24;
        v6 = v22;
      }
      else
      {
        if (!HIBYTE(v24))
          goto LABEL_24;
        v6 = (const char *)&v22;
      }
      v7 = xpc_string_create(v6);
      if (!v7)
        v7 = xpc_null_create();
      v17 = a1;
      v18 = "cell_id";
      xpc::dict::object_proxy::operator=((uint64_t)&v17, &v7, &v8);
      xpc_release(v8);
      v8 = 0;
      xpc_release(v7);
      v7 = 0;
    }
  }
LABEL_24:
  if (SHIBYTE(v24) < 0)
    operator delete(v22);
}

void sub_1BEF4F0C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&_MergedGlobals_7);
  if (*(char *)(v1 - 33) < 0)
    operator delete(*(void **)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ims::analytics::CoreLocationState>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<`anonymous namespace'::CTAnalyticsSender>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C93A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::CTAnalyticsSender>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C93A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::CTAnalyticsSender>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::CTAnalyticsSender::~CTAnalyticsSender(_anonymous_namespace_::CTAnalyticsSender *this)
{
  JUMPOUT(0x1C3B87100);
}

void `anonymous namespace'::CTAnalyticsSender::sendEvent(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  void **v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t object;
  xpc_object_t v13;
  void *__p[2];
  char v15;
  void *v16[2];
  uint64_t v17;

  std::string::basic_string[abi:ne180100]<0>(v16, "ims.ca.util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v16, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Sending ", 8);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  v13 = 0;
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (v6)
  {
    v13 = v6;
  }
  else
  {
    v7 = xpc_null_create();
    v13 = v7;
    if (!v7)
    {
      v8 = xpc_null_create();
      v7 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C3B87B98](v7) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v7);
    goto LABEL_13;
  }
  v8 = xpc_null_create();
LABEL_12:
  v13 = v8;
LABEL_13:
  xpc_release(v7);
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, (char *)*MEMORY[0x1E0D15448]);
  v11 = xpc_BOOL_create(1);
  if (!v11)
    v11 = xpc_null_create();
  v9 = v16;
  if (v17 < 0)
    v9 = (void **)v16[0];
  __p[0] = &v13;
  __p[1] = v9;
  xpc::dict::object_proxy::operator=((uint64_t)__p, &v11, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v11);
  v11 = 0;
  v10 = *a3;
  if (*a3)
    xpc_retain(*a3);
  else
    v10 = xpc_null_create();
  analytics_send_event_lazy_with_options();
  xpc_release(v10);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  xpc_release(v13);
}

void sub_1BEF4F488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, xpc_object_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  xpc_release(object);
  if (*(char *)(v22 - 33) < 0)
    operator delete(*(void **)(v22 - 56));
  xpc_release(a16);
  _Unwind_Resume(a1);
}

xpc_object_t ___ZN12_GLOBAL__N_117CTAnalyticsSender9sendEventERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN3xpc4dictE_block_invoke(uint64_t a1)
{
  xpc_object_t v1;
  xpc_object_t v2;

  v1 = *(xpc_object_t *)(a1 + 32);
  if (v1)
    xpc_retain(*(xpc_object_t *)(a1 + 32));
  else
    v1 = xpc_null_create();
  v2 = xpc_null_create();
  xpc_release(v2);
  return v1;
}

void sub_1BEF4F558(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
}

void SDPMediaPath::SDPMediaPath(SDPMediaPath *this, const LazuliRouteSet *a2)
{
  void *__p[2];
  uint64_t v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "path");
  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = off_1E78ED0A8;
  if (SHIBYTE(v5) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v5) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *((_OWORD *)this + 1) = *(_OWORD *)__p;
    *((_QWORD *)this + 4) = v5;
  }
  *(_QWORD *)this = &off_1E78C9470;
  LazuliRouteSet::LazuliRouteSet((SDPMediaPath *)((char *)this + 40), a2);
}

void sub_1BEF4F688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void SDPMediaPath::SDPMediaPath(SDPMediaPath *this, const SDPMediaPath *a2)
{
  std::string __p;

  if (*((char *)a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  else
    __p = *(std::string *)((char *)a2 + 16);
  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = off_1E78ED0A8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)((char *)this + 16) = __p;
  }
  *(_QWORD *)this = &off_1E78C9470;
  LazuliRouteSet::LazuliRouteSet((SDPMediaPath *)((char *)this + 40), (const SDPMediaPath *)((char *)a2 + 40));
}

void sub_1BEF4F784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void SDPMediaPath::~SDPMediaPath(void **this)
{
  *this = &off_1E78C9470;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(this + 5));
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  SDPMediaPath::~SDPMediaPath(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SDPMediaPath::value@<X0>(SDPMediaPath *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = 0;
  v5 = 0u;
  v6 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v5, 1);
  LazuliRouteSet::toStream((SDPMediaPath *)((char *)this + 40), (ImsOutStream *)&v5);
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v6 + 1) + 8, a2);
  *(_QWORD *)&v5 = &off_1E78D7A10;
  if ((_BYTE)v6)
  {
    result = *((_QWORD *)&v5 + 1);
    if (*((_QWORD *)&v5 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 8))(*((_QWORD *)&v5 + 1));
  }
  return result;
}

void sub_1BEF4F8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a10)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *SDPMediaPath::key@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "path");
}

void SipState::SipState(SipState *this, const SipUserAgent *a2)
{
  char *v4;

  *(_QWORD *)this = &off_1E78C94C8;
  *((_QWORD *)this + 1) = &unk_1E78C9520;
  v4 = (char *)this + 8;
  SipTimerContainer::SipTimerContainer((SipState *)((char *)this + 24));
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 15) = this;
  *((_QWORD *)this + 16) = v4;
  if (a2)
    *((_QWORD *)this + 20) = SipUserAgent::config(a2) + 512;
}

void sub_1BEF4F978(_Unwind_Exception *a1)
{
  SipTimerContainer *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 191) < 0)
    operator delete(*v3);
  SipTimerContainer::~SipTimerContainer(v1);
  _Unwind_Resume(a1);
}

void SipState::exitState(SipState *this)
{
  SipTimerContainer::cancelAllTimers((SipState *)((char *)this + 24));
}

BOOL SipState::timersEnabled(SipState *this)
{
  uint64_t v2;
  int v3;

  v2 = (*(uint64_t (**)(SipState *))(*(_QWORD *)this + 40))(this);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3 == (*(unsigned int (**)(SipState *))(*(_QWORD *)this + 48))(this);
}

void SipState::loggableName(SipState *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __p;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  if (*((char *)this + 191) < 0)
    v4 = *((_QWORD *)this + 22);
  else
    v4 = *((unsigned __int8 *)this + 191);
  v5 = (void **)((char *)this + 168);
  if (!v4)
  {
    v6 = (*(uint64_t (**)(SipState *))(*(_QWORD *)this + 40))(this);
    if (v6)
    {
      v7 = v6;
      v13 = 0;
      v11 = 0u;
      v12 = 0u;
      ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v11, 1);
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v7 + 40))(&__p, v7);
      (*(void (**)(__int128 *, std::string *))(v11 + 40))(&v11, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v11 + 1), (uint64_t)" [", 2);
      BYTE1(v12) = 0;
      v8 = (*(uint64_t (**)(SipState *))(*(_QWORD *)this + 48))(this);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v8);
      (*(void (**)(__int128 *, uint64_t))(v11 + 32))(&v11, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v11 + 1), (uint64_t)"]", 1);
      BYTE1(v12) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ImsStringOutStream::loggableStr((ImsStringOutStream *)&v11, &__p);
      if (*((char *)this + 191) < 0)
        operator delete(*v5);
      *(_OWORD *)v5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((_QWORD *)this + 23) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_QWORD *)&v11 = &off_1E78D7A10;
      if ((_BYTE)v12 && *((_QWORD *)&v11 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 8))(*((_QWORD *)&v11 + 1));
    }
    else
    {
      (*(void (**)(SipState *))(*(_QWORD *)this + 48))(this);
      ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(&__p);
      LoggableString::LoggableString((std::string *)&v11, &__p);
      if (*((char *)this + 191) < 0)
        operator delete(*v5);
      *(_OWORD *)v5 = v11;
      *((_QWORD *)this + 23) = v12;
      BYTE7(v12) = 0;
      LOBYTE(v11) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*((char *)this + 191) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 21), *((_QWORD *)this + 22));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 23);
  }
}

void sub_1BEF4FBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipState::loggableName(SipState *this@<X0>, std::string *a2@<X8>)
{
  SipState::loggableName((SipState *)((char *)this - 8), a2);
}

uint64_t SipState::stateMachine(SipState *this)
{
  return 0;
}

{
  return 0;
}

uint64_t SipState::id(SipState *this)
{
  return 0;
}

void `non-virtual thunk to'SipState::~SipState(SipState *this)
{
  SipState::~SipState((SipState *)((char *)this - 8));
}

{
  SipState::~SipState((SipState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

uint64_t MsrpTransportTcp::MsrpTransportTcp(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void **v10;
  std::string __p;
  std::string v13;

  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  *(_QWORD *)a1 = off_1E78D2580;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_1E78D25C0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v4;
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    std::__shared_weak_count::__release_weak(v4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "msrp.tport");
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a2 + 48))(&__p);
  ImsLogContainer::ImsLogContainer(a1 + 80, &v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E78C9598;
  *(_QWORD *)(a1 + 24) = &unk_1E78C9610;
  *(_QWORD *)(a1 + 80) = &unk_1E78C9660;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  v10 = (void **)(a1 + 216);
  *(_QWORD *)(a1 + 232) = 0;
  ims::convertBundleIdToUuid(&v13);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 232) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  return a1;
}

void sub_1BEF4FE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  char *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;

  if (v20[239] < 0)
    operator delete(*v24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22);
  ImsLogContainer::~ImsLogContainer(v21);
  MsrpTransportInterface::~MsrpTransportInterface((MsrpTransportInterface *)v20);
  _Unwind_Resume(a1);
}

void MsrpTransportTcp::~MsrpTransportTcp(MsrpTransportTcp *this)
{
  *(_QWORD *)this = &off_1E78C9598;
  *((_QWORD *)this + 3) = &unk_1E78C9610;
  *((_QWORD *)this + 10) = &unk_1E78C9660;
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  *((_QWORD *)this + 10) = off_1E78CFE68;
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  MsrpTransportInterface::~MsrpTransportInterface(this);
}

{
  MsrpTransportTcp::~MsrpTransportTcp(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'MsrpTransportTcp::~MsrpTransportTcp(MsrpTransportTcp *this)
{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)((char *)this - 24));
}

{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)((char *)this - 80));
}

{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)((char *)this - 80));
  JUMPOUT(0x1C3B87100);
}

void MsrpTransportTcp::initListener(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t *v27;
  int v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *__p;
  std::__shared_weak_count *v34;
  char v35;
  _QWORD v36[2];
  dispatch_object_t v37;

  v6 = a1 + 80;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 64))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"MsrpTransportTcp::initListener()", 32);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v6 - 48), a2);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, (_QWORD *)(v6 - 72));
  LODWORD(v37) = 0;
  std::allocate_shared[abi:ne180100]<ImsListenSocket,std::allocator<ImsListenSocket>,std::shared_ptr<MsrpTransportInterface>,DscpClass,void>((uint64_t *)&__p, (int *)&v37, &v26);
  v8 = v27;
  if (v26)
    v9 = (char *)v26 + 80;
  else
    v9 = 0;
  v26 = 0;
  v27 = 0;
  v10 = *(std::__shared_weak_count **)(a1 + 192);
  *(_QWORD *)(a1 + 184) = v9;
  *(_QWORD *)(a1 + 192) = v8;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)v27;
  if (v27)
  {
    v14 = (unint64_t *)(v27 + 1);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v34;
  if (v34)
  {
    v17 = (unint64_t *)&v34->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32), 0);
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v19 = *(_QWORD *)(a1 + 184);
  v20 = sImsDispatchQueue;
  if (sImsDispatchQueue)
  {
    v37 = (dispatch_object_t)sImsDispatchQueue;
  }
  else
  {
    v20 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v20;
    v37 = v20;
    if (!v20)
      goto LABEL_23;
  }
  dispatch_retain(v20);
LABEL_23:
  v36[0] = &off_1E78B7BD8;
  v36[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v26, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  (*(void (**)(uint64_t, uint64_t *, dispatch_object_t *, uint64_t, _QWORD, _QWORD *, void **, void **, _BYTE))(*(_QWORD *)v19 + 16))(v19, a2, &v37, a1 + 216, 0, v36, &v26, &__p, 0);
  if (v35 < 0)
    operator delete(__p);
  if (v29 < 0)
    operator delete(v26);
  ims::CFType::~CFType((ims::CFType *)v36);
  if (v37)
    dispatch_release(v37);
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v26 = &off_1E78B7238;
  v27 = &_bambiDomain;
  v28 = 0;
  if (*(uint64_t **)(a3 + 8) == &_bambiDomain)
  {
    v21 = *(_DWORD *)(a3 + 16);
    ImsResult::~ImsResult((ImsResult *)&v26);
    if (!v21)
    {
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 184) + 56))(&v26);
      std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v6 - 48), (uint64_t *)&v26);
      v22 = (std::__shared_weak_count *)v27;
      if (v27)
      {
        v23 = (unint64_t *)(v27 + 1);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"initialized listener on local port ", 35);
      *(_BYTE *)(v25 + 17) = 0;
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 - 48) + 56))(*(_QWORD *)(v6 - 48));
      std::ostream::operator<<();
      *(_BYTE *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v25 + 17) = 0;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v26);
  }
}

void sub_1BEF50364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  ImsResult *v28;

  ImsResult::~ImsResult(v28);
  _Unwind_Resume(a1);
}

void MsrpTransportTcp::initConnection(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  dispatch_object_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  int v45;
  int v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *p_shared_weak_owners;
  unint64_t v54;
  NSObject *v55;
  unint64_t *v56;
  unint64_t v57;
  void (**v58)(ImsResult *__hidden);
  uint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unsigned int v66;
  _QWORD v67[2];
  dispatch_object_t object;
  std::__shared_weak_count *v69;
  char v70;
  _QWORD v71[2];
  dispatch_object_t v72;
  void *__p;
  std::__shared_weak_count *v74;
  uint64_t v75;
  void (**v76)(ImsResult *__hidden);
  uint64_t *v77;
  int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;

  v8 = a1 + 10;
  v9 = (*(uint64_t (**)(_QWORD *))(a1[10] + 64))(a1 + 10);
  (*(void (**)(_QWORD *, uint64_t))(*v8 + 16))(v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"MsrpTransportTcp::initConnection()", 34);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  v10 = v8 - 6;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](v8 - 6, a2);
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](v8 - 4, a3);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&object, v8 - 9);
  v11 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v12 = v11;
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9A18;
  v13 = v11 + 1;
  v14 = v69;
  if (object)
    v15 = object + 3;
  else
    v15 = 0;
  v76 = (void (**)(ImsResult *__hidden))v15;
  v77 = (uint64_t *)v69;
  object = 0;
  v69 = 0;
  ImsTcpSocket::ImsTcpSocket((uint64_t)&v11[1], (uint64_t *)&v76, 0, 0);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  __p = v13;
  v74 = v12;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&__p, &v12[1].__shared_owners_, (uint64_t)v13);
  v18 = v74;
  if (__p)
    v19 = (char *)__p + 80;
  else
    v19 = 0;
  __p = 0;
  v74 = 0;
  v20 = (std::__shared_weak_count *)a1[26];
  a1[25] = v19;
  a1[26] = v18;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v74;
  if (v74)
  {
    v24 = (unint64_t *)&v74->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v69;
  if (v69)
  {
    v27 = (unint64_t *)&v69->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v10 + 64))(*v10, 0);
  a4[2] = 0;
  a4[3] = 0;
  a4[7] = 0;
  a4[8] = 0;
  a4[5] = 0;
  a4[6] = 0;
  *a4 = &off_1E78B7238;
  a4[1] = &_bambiDomain;
  a4[4] = 0;
  v29 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 128))(*a2);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 128))(*a3);
  v31 = v29[23];
  if ((v31 & 0x80u) == 0)
    v32 = v29[23];
  else
    v32 = *((_QWORD *)v29 + 1);
  v33 = *(unsigned __int8 *)(v30 + 23);
  v34 = (char)v33;
  if ((v33 & 0x80u) != 0)
    v33 = *(_QWORD *)(v30 + 8);
  if (v32 != v33)
    goto LABEL_42;
  if (v34 >= 0)
    v35 = (unsigned __int8 *)v30;
  else
    v35 = *(unsigned __int8 **)v30;
  if ((v31 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v29, v35, *((_QWORD *)v29 + 1)))
      goto LABEL_42;
LABEL_45:
    v43 = a1[25];
    __p = 0;
    v74 = 0;
    v75 = 0;
    v44 = sImsDispatchQueue;
    if (sImsDispatchQueue)
    {
      v72 = (dispatch_object_t)sImsDispatchQueue;
    }
    else
    {
      v44 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v44;
      v72 = v44;
      if (!v44)
      {
LABEL_57:
        v71[0] = &off_1E78B7BD8;
        v71[1] = 0;
        std::string::basic_string[abi:ne180100]<0>(&object, "");
        LOBYTE(v66) = 0;
        (*(void (**)(void (***__return_ptr)(ImsResult *__hidden), uint64_t, uint64_t *, uint64_t *, void **, dispatch_object_t *, _QWORD *, _QWORD, _QWORD *, dispatch_object_t *, _QWORD))(*(_QWORD *)v43 + 16))(&v76, v43, a2, a3, &__p, &v72, a1 + 27, 0, v71, &object, v66);
        ImsResult::operator=((uint64_t)a4, (uint64_t)&v76);
        ImsResult::~ImsResult((ImsResult *)&v76);
        if (v70 < 0)
          operator delete(object);
        ims::CFType::~CFType((ims::CFType *)v71);
        if (v72)
          dispatch_release(v72);
        if (SHIBYTE(v75) < 0)
          operator delete(__p);
        goto LABEL_63;
      }
    }
    dispatch_retain(v44);
    goto LABEL_57;
  }
  if (!v29[23])
    goto LABEL_45;
  while (*v29 == *v35)
  {
    ++v29;
    ++v35;
    if (!--v31)
      goto LABEL_45;
  }
LABEL_42:
  v36 = (*(uint64_t (**)(_QWORD *))(*v8 + 64))(v8);
  (*(void (**)(_QWORD *, uint64_t))(*v8 + 16))(v8, v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"Ignoring local address recommendation ", 38);
  *(_BYTE *)(v36 + 17) = 0;
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 128))(*a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 32))(v36, v37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)" to match destination address type ", 35);
  *(_BYTE *)(v36 + 17) = 0;
  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 128))(*a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 32))(v36, v38);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v36 + 17) = 0;
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 72))(*a3);
  v40 = socket(*(unsigned __int8 *)(v39 + 1), 1, 0);
  if ((_DWORD)v40 != -1)
  {
    v41 = a1[25];
    v42 = sImsDispatchQueue;
    if (sImsDispatchQueue)
    {
      object = (dispatch_object_t)sImsDispatchQueue;
    }
    else
    {
      v42 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v42;
      object = v42;
      if (!v42)
      {
LABEL_51:
        v67[0] = &off_1E78B7BD8;
        v67[1] = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        (*(void (**)(void (***__return_ptr)(ImsResult *__hidden), uint64_t, uint64_t, uint64_t *, dispatch_object_t *, _QWORD *, _QWORD, _QWORD *, void **, _DWORD))(*(_QWORD *)v41 + 24))(&v76, v41, v40, a3, &object, a1 + 27, 0, v67, &__p, 0);
        ImsResult::operator=((uint64_t)a4, (uint64_t)&v76);
        ImsResult::~ImsResult((ImsResult *)&v76);
        if (SHIBYTE(v75) < 0)
          operator delete(__p);
        ims::CFType::~CFType((ims::CFType *)v67);
        if (object)
          dispatch_release(object);
        goto LABEL_63;
      }
    }
    dispatch_retain(v42);
    goto LABEL_51;
  }
  v45 = *__error();
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v76 = &off_1E78B7238;
  v77 = &_posixDomain;
  v78 = v45;
  ImsResult::operator=((uint64_t)a4, (uint64_t)&v76);
  ImsResult::~ImsResult((ImsResult *)&v76);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a4[1] + 24))(a4[1], *((unsigned int *)a4 + 4)) & 1) == 0)
  {
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v76 = &off_1E78B7238;
    v77 = &_bambiDomain;
    v78 = 1073741842;
    ImsResult::operator=((uint64_t)a4, (uint64_t)&v76);
    ImsResult::~ImsResult((ImsResult *)&v76);
  }
LABEL_63:
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v76 = &off_1E78B7238;
  v77 = &_bambiDomain;
  v78 = 0;
  if ((uint64_t *)a4[1] == &_bambiDomain)
  {
    v46 = *((_DWORD *)a4 + 4);
    ImsResult::~ImsResult((ImsResult *)&v76);
    if (!v46)
    {
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1[25] + 136))(&v76);
      std::shared_ptr<IpAddress>::operator=[abi:ne180100](v8 - 6, (uint64_t *)&v76);
      v47 = (std::__shared_weak_count *)v77;
      if (v77)
      {
        v48 = (unint64_t *)(v77 + 1);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = (*(uint64_t (**)(_QWORD *))(*v8 + 64))(v8);
      (*(void (**)(_QWORD *, uint64_t))(*v8 + 16))(v8, v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v50 + 8), (uint64_t)"initialized on local port ", 26);
      *(_BYTE *)(v50 + 17) = 0;
      (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 56))(*v10);
      std::ostream::operator<<();
      *(_BYTE *)(v50 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v50 + 17) = 0;
      v52 = a1[8];
      v51 = (std::__shared_weak_count *)a1[9];
      if (v51)
      {
        p_shared_weak_owners = (unint64_t *)&v51->__shared_weak_owners_;
        do
          v54 = __ldxr(p_shared_weak_owners);
        while (__stxr(v54 + 1, p_shared_weak_owners));
      }
      v76 = 0;
      v77 = 0;
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1[25] + 104))(&v76);
      v55 = sImsDispatchQueue;
      if (!sImsDispatchQueue)
      {
        v55 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
        sImsDispatchQueue = (uint64_t)v55;
      }
      if (v51)
      {
        v56 = (unint64_t *)&v51->__shared_weak_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      v58 = v76;
      v59 = v77;
      if (v77)
      {
        v60 = (unint64_t *)(v77 + 1);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      v62 = (_QWORD *)operator new();
      *v62 = v52;
      v62[1] = v51;
      v62[2] = v58;
      v62[3] = v59;
      __p = 0;
      object = 0;
      dispatch_async_f(v55, v62, (dispatch_function_t)dispatch::async<MsrpTransportTcp::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::$_0>(dispatch_queue_s *,std::unique_ptr<MsrpTransportTcp::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::$_0,std::default_delete<MsrpTransportTcp::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::$_0>>)::{lambda(void *)#1}::__invoke);
      std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&object);
      std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&__p);
      v63 = (std::__shared_weak_count *)v77;
      if (v77)
      {
        v64 = (unint64_t *)(v77 + 1);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      if (v51)
        std::__shared_weak_count::__release_weak(v51);
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v76);
  }
}

void sub_1BEF50C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,dispatch_object_t object,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  ImsResult *v29;
  std::__shared_weak_count *v30;

  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  ImsResult::~ImsResult(v29);
  _Unwind_Resume(a1);
}

double MsrpTransportTcp::createListener@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  double result;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *__p[2];
  char v40;
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;

  v54 = 0uLL;
  v6 = (std::__shared_weak_count *)operator new(0x108uLL);
  v7 = v6;
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C96F8;
  v9 = &v6[1].__vftable;
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
  }
  *(_QWORD *)&v49 = v10;
  *((_QWORD *)&v49 + 1) = v11;
  MsrpTransportTcp::MsrpTransportTcp((uint64_t)&v6[1], &v49);
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9748;
    v7[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78C97C0;
    v7[4].__shared_owners_ = (uint64_t)&unk_1E78C9810;
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9748;
    v7[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78C97C0;
    v7[4].__shared_owners_ = (uint64_t)&unk_1E78C9810;
  }
  *(_QWORD *)&v54 = v9;
  *((_QWORD *)&v54 + 1) = v7;
  shared_weak_owners = (std::__shared_weak_count *)v7[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_28;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
    v7[1].__shared_owners_ = (uint64_t)v9;
    v7[1].__shared_weak_owners_ = (uint64_t)v7;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    v23 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v7[1].__shared_owners_ = (uint64_t)v9;
    v7[1].__shared_weak_owners_ = (uint64_t)v7;
  }
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_28:
  v53 = 0;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v26 = v54;
  v27 = (std::__shared_weak_count *)a2[1];
  v47 = *a2;
  v48 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v26 + 48))(&v49, v26, &v47);
  v30 = v48;
  if (v48)
  {
    v31 = (unint64_t *)&v48->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v41 = &off_1E78B7238;
  v42 = &_bambiDomain;
  LODWORD(v43) = 0;
  if (*((uint64_t **)&v49 + 1) == &_bambiDomain)
  {
    v33 = v50;
    ImsResult::~ImsResult((ImsResult *)&v41);
    if (!v33)
    {
      ImsResult::~ImsResult((ImsResult *)&v49);
      result = *(double *)&v54;
      *(_OWORD *)a3 = v54;
      return result;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v41);
  }
  v41 = 0;
  v42 = 0;
  v43 = 0;
  if (*a1)
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 48))(&v41);
  else
    std::string::basic_string[abi:ne180100]<0>(&v41, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "msrp.tport");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v34 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)"Failed to init listner! ", 24);
  *(_BYTE *)(v34 + 17) = 0;
  (*(void (**)(__int128 *, uint64_t))(v49 + 16))(&v49, v34);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v34 + 17) = 0;
  if (v40 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (SHIBYTE(v43) < 0)
    operator delete(v41);
  ImsResult::~ImsResult((ImsResult *)&v49);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  return result;
}

void sub_1BEF51128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a20 < 0)
    operator delete(__p);
  ImsResult::~ImsResult((ImsResult *)&a29);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29 - 96);
  _Unwind_Resume(a1);
}

double MsrpTransportTcp::createConnection@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  double result;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void *__p[2];
  char v57;
  void *v58;
  uint64_t *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;

  v73 = 0uLL;
  v8 = (std::__shared_weak_count *)operator new(0x108uLL);
  v9 = v8;
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9888;
  v11 = &v8[1].__vftable;
  v12 = *a1;
  v13 = (std::__shared_weak_count *)a1[1];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
  }
  *(_QWORD *)&v68 = v12;
  *((_QWORD *)&v68 + 1) = v13;
  MsrpTransportTcp::MsrpTransportTcp((uint64_t)&v8[1], &v68);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C98D8;
    v9[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78C9950;
    v9[4].__shared_owners_ = (uint64_t)&unk_1E78C99A0;
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C98D8;
    v9[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78C9950;
    v9[4].__shared_owners_ = (uint64_t)&unk_1E78C99A0;
  }
  *(_QWORD *)&v73 = v11;
  *((_QWORD *)&v73 + 1) = v9;
  shared_weak_owners = (std::__shared_weak_count *)v9[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_28;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v23 = __ldxr(p_shared_weak_owners);
    while (__stxr(v23 + 1, p_shared_weak_owners));
    v9[1].__shared_owners_ = (uint64_t)v11;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
    v25 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v9[1].__shared_owners_ = (uint64_t)v11;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
  }
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_28:
  v72 = 0;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v28 = v73;
  v29 = (std::__shared_weak_count *)a2[1];
  v66 = *a2;
  v67 = v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (std::__shared_weak_count *)a3[1];
  v64 = *a3;
  v65 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 56))(&v68, v28, &v66, &v64);
  v35 = v65;
  if (v65)
  {
    v36 = (unint64_t *)&v65->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v67;
  if (v67)
  {
    v39 = (unint64_t *)&v67->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v58 = &off_1E78B7238;
  v59 = &_bambiDomain;
  LODWORD(v60) = 0;
  if (*((uint64_t **)&v68 + 1) == &_bambiDomain)
  {
    v41 = v69;
    ImsResult::~ImsResult((ImsResult *)&v58);
    if (!v41)
    {
      ImsResult::~ImsResult((ImsResult *)&v68);
      result = *(double *)&v73;
      *(_OWORD *)a4 = v73;
      return result;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v58);
  }
  v58 = 0;
  v59 = 0;
  v60 = 0;
  if (*a1)
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 48))(&v58);
  else
    std::string::basic_string[abi:ne180100]<0>(&v58, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "msrp.tport");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v42 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v58);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"Failed to init connection! ", 27);
  *(_BYTE *)(v42 + 17) = 0;
  (*(void (**)(__int128 *, uint64_t))(v68 + 16))(&v68, v42);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v42 + 17) = 0;
  if (v57 < 0)
    operator delete(__p[0]);
  v43 = *a1;
  if (*a1)
  {
    v44 = (std::__shared_weak_count *)a3[1];
    v54 = *a3;
    v55 = v44;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v43 + 24))(v43, &v54);
    v47 = v55;
    if (v55)
    {
      v48 = (unint64_t *)&v55->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (SHIBYTE(v60) < 0)
    operator delete(v58);
  ImsResult::~ImsResult((ImsResult *)&v68);
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  return result;
}

void sub_1BEF516A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  uint64_t v33;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a22 < 0)
    operator delete(__p);
  ImsResult::~ImsResult((ImsResult *)&a33);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v33 - 112);
  _Unwind_Resume(a1);
}

void MsrpTransportTcp::send(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void (**v18)(ImsResult *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v20;
  _BYTE v21[72];
  void (**v22)(ImsResult *__hidden);
  uint64_t *v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[2];
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v5 = *(_QWORD *)(a1 + 200);
  if (v5)
  {
    v32 = 0;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(&v28, v5, a2);
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v22 = &off_1E78B7238;
    v23 = &_bambiDomain;
    v24 = 0;
    if (*((uint64_t **)&v28 + 1) == &_bambiDomain)
    {
      v13 = v29;
      ImsResult::~ImsResult((ImsResult *)&v22);
      if (!v13)
      {
LABEL_21:
        ImsResult::~ImsResult((ImsResult *)&v28);
        return;
      }
    }
    else
    {
      ImsResult::~ImsResult((ImsResult *)&v22);
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 56))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"send ", 5);
    *(_BYTE *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" bytes failed to ", 17);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v14);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    v15 = *(std::__shared_weak_count **)(a1 + 72);
    if (v15)
    {
      v16 = std::__shared_weak_count::lock(v15);
      v23 = (uint64_t *)v16;
      if (v16)
      {
        v17 = v16;
        v18 = *(void (***)(ImsResult *__hidden))(a1 + 64);
        v22 = v18;
        if (v18)
        {
          ImsResult::ImsResult((ImsResult *)v21, (const ImsResult *)&v28);
          (*((void (**)(void (**)(ImsResult *__hidden), uint64_t, _BYTE *))*v18 + 5))(v18, a3, v21);
          ImsResult::~ImsResult((ImsResult *)v21);
        }
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    goto LABEL_21;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 56))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"drop ", 5);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" bytes on null socket", 21);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 72);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    *((_QWORD *)&v28 + 1) = v8;
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)&v28 = v10;
      if (v10)
      {
        v35 = 0u;
        v37 = 0u;
        v36 = 0u;
        v33[0] = &off_1E78B7238;
        v33[1] = &_bambiDomain;
        v34 = 1073741840;
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v10 + 40))(v10, a3, v33);
        ImsResult::~ImsResult((ImsResult *)v33);
      }
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BEF51AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  ImsResult::~ImsResult((ImsResult *)(v27 - 136));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

ImsOutStream *MsrpTransportTcp::toStream(MsrpTransportTcp *this, ImsOutStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *__p[2];
  uint64_t v9;

  v4 = *((_QWORD *)this + 4);
  if (!v4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"MSRP transport w/o local info", 29);
    *((_BYTE *)a2 + 17) = 0;
    goto LABEL_5;
  }
  v5 = *((_QWORD *)this + 6);
  (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)v4 + 40))(v4, a2);
  v6 = (_QWORD *)*((_QWORD *)a2 + 1);
  if (v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" <-> ", 5);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(_QWORD, ImsOutStream *))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), a2);
LABEL_5:
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    return a2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" is ", 4);
  *((_BYTE *)a2 + 17) = 0;
  if (*((_QWORD *)this + 23))
  {
    __p[0] = 0;
    __p[1] = 0;
    v9 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "not ");
  }
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 32))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"listening", 9);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return a2;
}

void sub_1BEF51C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MsrpTransportTcp::handleIncomingConnection(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v3 = a1 + 25;
  v5 = a1 + 10;
  v4 = a1[10];
  if (a1[25])
  {
    v6 = (*(uint64_t (**)(_QWORD *))(v4 + 56))(a1 + 10);
    (*(void (**)(_QWORD *, uint64_t))(*v5 + 16))(v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"socket already set: ", 20);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v3 + 104))(&v38);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" ignoring: ", 11);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 104))(&v36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 40))(v36, v6);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    v7 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v39;
    if (v39)
    {
      v11 = (unint64_t *)&v39->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
LABEL_40:
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    v14 = (*(uint64_t (**)(_QWORD *))(v4 + 64))(a1 + 10);
    (*(void (**)(_QWORD *, uint64_t))(*v5 + 16))(v5, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"incoming connection ", 20);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 104))(&v38);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v14);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    v15 = v39;
    if (v39)
    {
      v16 = (unint64_t *)&v39->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](v3, a2);
    v18 = a1[25];
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v38, a1 + 1);
    if (v38)
      v19 = v38 + 24;
    else
      v19 = 0;
    v34 = v19;
    v35 = v39;
    v38 = 0;
    v39 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 184))(v18, &v34);
    v20 = v35;
    if (v35)
    {
      v21 = (unint64_t *)&v35->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v39;
    if (v39)
    {
      v24 = (unint64_t *)&v39->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v38 = 0;
    v39 = 0;
    v26 = (std::__shared_weak_count *)a1[9];
    if (v26)
    {
      v39 = std::__shared_weak_count::lock(v26);
      if (v39)
      {
        v27 = a1[8];
        v38 = v27;
        if (v27)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 104))(&v32);
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 16))(v27, &v32);
          v28 = v33;
          if (v33)
          {
            v29 = (unint64_t *)&v33->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
      }
    }
    v10 = v39;
    if (v39)
    {
      v31 = (unint64_t *)&v39->__shared_owners_;
      do
        v12 = __ldaxr(v31);
      while (__stlxr(v12 - 1, v31));
      goto LABEL_40;
    }
  }
}

void sub_1BEF52004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MsrpTransportTcp::handleDisconnect(MsrpTransportTcp *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v2)
  {
    v13 = std::__shared_weak_count::lock(v2);
    if (v13)
    {
      v3 = *((_QWORD *)this + 8);
      v12 = v3;
      if (v3)
      {
        (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 25) + 104))(&v10);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 24))(v3, &v10);
        v4 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
      }
    }
  }
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 25);
}

void sub_1BEF52150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void MsrpTransportTcp::connectionClosedByPeer(MsrpTransportTcp *this)
{
  _QWORD **v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (_QWORD **)((char *)this + 80);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 56))((char *)this + 80);
  ((void (*)(_QWORD **, uint64_t))(*v2)[2])(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"closed by peer ", 15);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v2[15] + 104))(&v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v3);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  MsrpTransportTcp::handleDisconnect(this);
}

void sub_1BEF52268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MsrpTransportTcp::connectionClosedByPeer(MsrpTransportTcp *this)
{
  MsrpTransportTcp::connectionClosedByPeer((MsrpTransportTcp *)((char *)this - 24));
}

void MsrpTransportTcp::connectionResetByPeer(MsrpTransportTcp *this)
{
  _QWORD **v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (_QWORD **)((char *)this + 80);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 56))((char *)this + 80);
  ((void (*)(_QWORD **, uint64_t))(*v2)[2])(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"reset by peer ", 14);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v2[15] + 104))(&v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v3);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  MsrpTransportTcp::handleDisconnect(this);
}

void sub_1BEF52378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MsrpTransportTcp::connectionResetByPeer(MsrpTransportTcp *this)
{
  MsrpTransportTcp::connectionResetByPeer((MsrpTransportTcp *)((char *)this - 24));
}

void MsrpTransportTcp::handleConnectError(MsrpTransportTcp *this, const ImsResult *a2)
{
  _QWORD **v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char v12;

  v4 = (_QWORD **)((char *)this + 80);
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 56))((char *)this + 80);
  ((void (*)(_QWORD **, uint64_t))(*v4)[2])(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"connection error ", 17);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v4[15] + 104))(&v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v5);
  v6 = *(_QWORD **)(v5 + 8);
  v12 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v12, 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  MsrpTransportTcp::handleDisconnect(this);
}

void sub_1BEF524BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MsrpTransportTcp::handleConnectError(MsrpTransportTcp *this, const ImsResult *a2)
{
  MsrpTransportTcp::handleConnectError((MsrpTransportTcp *)((char *)this - 24), a2);
}

void MsrpTransportTcp::handleSocketError(MsrpTransportTcp *this, const ImsResult *a2)
{
  _QWORD **v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char v12;

  v4 = (_QWORD **)((char *)this + 80);
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 56))((char *)this + 80);
  ((void (*)(_QWORD **, uint64_t))(*v4)[2])(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"socket error ", 13);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v4[15] + 104))(&v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v5);
  v6 = *(_QWORD **)(v5 + 8);
  v12 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v12, 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  MsrpTransportTcp::handleDisconnect(this);
}

void sub_1BEF52600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MsrpTransportTcp::handleSocketError(MsrpTransportTcp *this, const ImsResult *a2)
{
  MsrpTransportTcp::handleSocketError((MsrpTransportTcp *)((char *)this - 24), a2);
}

void MsrpTransportTcp::processDataFromSocket(_QWORD *a1, void *a2, size_t a3, _QWORD *a4)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  v7 = (std::__shared_weak_count *)a1[9];
  if (!v7)
  {
    v9 = 0;
    goto LABEL_7;
  }
  v9 = std::__shared_weak_count::lock(v7);
  v22 = v9;
  if (!v9 || (v10 = a1[8], (v21 = v10) == 0))
  {
LABEL_7:
    v15 = a1[10];
    v14 = a1 + 10;
    v16 = (*(uint64_t (**)(_QWORD *))(v15 + 56))(v14);
    (*(void (**)(_QWORD *, uint64_t))(*v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"No delegate: dropping ", 22);
    *(_BYTE *)(v16 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v16 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" bytes from ", 12);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 40))(*a4, v16);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (!v9)
      return;
    goto LABEL_8;
  }
  v12 = a1[10];
  v11 = a1 + 10;
  v13 = (*(uint64_t (**)(_QWORD *))(v12 + 64))(v11);
  (*(void (**)(_QWORD *, uint64_t))(*v11 + 16))(v11, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Received ", 9);
  *(_BYTE *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" bytes from ", 12);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 40))(*a4, v13);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v20 = 0;
  std::string::basic_string[abi:ne180100](__p, a2, a3);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, __p);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
LABEL_8:
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1BEF52834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MsrpTransportTcp::processDataFromSocket(uint64_t a1, void *a2, size_t a3, _QWORD *a4)
{
  MsrpTransportTcp::processDataFromSocket((_QWORD *)(a1 - 24), a2, a3, a4);
}

_QWORD *MsrpTransportTcp::type@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "TCP");
}

void std::__shared_ptr_emplace<ImsTcpSocket>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9A18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsTcpSocket>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9A18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<ImsTcpSocket>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

uint64_t *dispatch::async<MsrpTransportTcp::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::$_0>(dispatch_queue_s *,std::unique_ptr<MsrpTransportTcp::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::$_0,std::default_delete<MsrpTransportTcp::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v15 = a1;
  v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *a1;
      if (*a1)
      {
        v6 = (std::__shared_weak_count *)a1[3];
        v16 = a1[2];
        v17 = v6;
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldxr(p_shared_owners);
          while (__stxr(v8 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 16))(v5, &v16);
        v9 = v17;
        if (v17)
        {
          v10 = (unint64_t *)&v17->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      v12 = (unint64_t *)&v4->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v15);
}

void sub_1BEF529B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v14 = a12;
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (unint64_t *)&v12->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper,std::allocator<MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C96F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper,std::allocator<MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C96F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper,std::allocator<MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper::~MsrpTransportTcpWrapper(MsrpTransportTcp *a1)
{
  MsrpTransportTcp::~MsrpTransportTcp(a1);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper::~MsrpTransportTcpWrapper(uint64_t a1)
{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)(a1 - 24));
}

{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)(a1 - 24));
  JUMPOUT(0x1C3B87100);
}

{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)(a1 - 80));
}

{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)(a1 - 80));
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper,std::allocator<MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper,std::allocator<MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper,std::allocator<MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper::~MsrpTransportTcpWrapper(MsrpTransportTcp *a1)
{
  MsrpTransportTcp::~MsrpTransportTcp(a1);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper::~MsrpTransportTcpWrapper(uint64_t a1)
{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)(a1 - 24));
}

{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)(a1 - 24));
  JUMPOUT(0x1C3B87100);
}

{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)(a1 - 80));
}

{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)(a1 - 80));
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiServices::serviceMaskForNames(std::string *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  void **v8;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  ims::tokenize(a1, (uint64_t *)&v5, 0x2Cu);
  v1 = v5;
  v2 = v6;
  if (v5 == v6)
  {
    v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    do
    {
      v3 = ims::Services::serviceWithName(v1) | v3;
      v1 += 24;
    }
    while (v1 != v2);
  }
  v8 = (void **)&v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v3;
}

void sub_1BEF52C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void BambiServices::nameArrayForServiceMask(int a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::string *v35;
  std::string *v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  std::string *v47;
  std::string *v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  std::string *v59;
  std::string *v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  std::string *v71;
  std::string *v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  std::string *v83;
  std::string *v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  __int128 v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  std::string *v95;
  std::string *v96;
  __int128 v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  __int128 v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  std::string *v107;
  std::string *v108;
  __int128 v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  __int128 v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  std::string *v119;
  std::string *v120;
  __int128 v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  __int128 v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  std::string *v131;
  std::string *v132;
  __int128 v133;
  uint64_t v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  __int128 v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  std::string *v143;
  std::string *v144;
  __int128 v145;
  uint64_t v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  __int128 v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  std::string *v155;
  std::string *v156;
  __int128 v157;
  uint64_t v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  __int128 v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  std::string *v167;
  std::string *v168;
  __int128 v169;
  uint64_t v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  __int128 v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  std::string *v179;
  std::string *v180;
  __int128 v181;
  uint64_t v182;
  int v183;
  unint64_t v184;
  unint64_t v185;
  __int128 v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  std::string *v191;
  std::string *v192;
  __int128 v193;
  uint64_t v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  __int128 v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  std::string *v203;
  std::string *v204;
  __int128 v205;
  uint64_t v206;
  int v207;
  void *__p[2];
  std::string::size_type v209;
  std::__split_buffer<std::string> __v;

  if ((a1 & 4) == 0)
    goto LABEL_15;
  std::string::basic_string[abi:ne180100]<0>(__p, "sms");
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < v4)
  {
    v6 = *(_OWORD *)__p;
    *(_QWORD *)(v5 + 16) = v209;
    *(_OWORD *)v5 = v6;
    *(_QWORD *)(a2 + 8) = v5 + 24;
    if ((a1 & 1) == 0)
      goto LABEL_30;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(__p, "voice");
    v16 = *(_QWORD *)(a2 + 16);
    v17 = *(_QWORD *)(a2 + 8);
    if (v17 >= v16)
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(_QWORD *)a2) >> 3);
      v20 = v19 + 1;
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)a2) >> 3);
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v20;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v22)
        v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v22);
      else
        v23 = 0;
      v24 = v23 + v19;
      __v.__first_ = v23;
      __v.__begin_ = v24;
      __v.__end_cap_.__value_ = &v23[v22];
      v25 = *(_OWORD *)__p;
      v24->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
      __p[1] = 0;
      v209 = 0;
      __p[0] = 0;
      __v.__end_ = v24 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      v26 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v27 = SHIBYTE(v209);
      *(_QWORD *)(a2 + 8) = v26;
      if (v27 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v18 = *(_OWORD *)__p;
      *(_QWORD *)(v17 + 16) = v209;
      *(_OWORD *)v17 = v18;
      *(_QWORD *)(a2 + 8) = v17 + 24;
    }
    goto LABEL_30;
  }
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(_QWORD *)a2) >> 3);
  v8 = v7 + 1;
  if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(_QWORD *)a2) >> 3);
  if (2 * v9 > v8)
    v8 = 2 * v9;
  v10 = v9 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v8;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  v11 = v10 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v10) : 0;
  v12 = v11 + v7;
  __v.__first_ = v11;
  __v.__begin_ = v12;
  __v.__end_cap_.__value_ = &v11[v10];
  v13 = *(_OWORD *)__p;
  v12->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  __p[1] = 0;
  v209 = 0;
  __p[0] = 0;
  __v.__end_ = v12 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  v14 = *(_QWORD *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v15 = SHIBYTE(v209);
  *(_QWORD *)(a2 + 8) = v14;
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 1) != 0)
      goto LABEL_16;
  }
  else
  {
LABEL_15:
    if ((a1 & 1) != 0)
      goto LABEL_16;
  }
  if ((a1 & 8) == 0)
    goto LABEL_44;
LABEL_30:
  std::string::basic_string[abi:ne180100]<0>(__p, "audio");
  v28 = *(_QWORD *)(a2 + 16);
  v29 = *(_QWORD *)(a2 + 8);
  if (v29 < v28)
  {
    v30 = *(_OWORD *)__p;
    *(_QWORD *)(v29 + 16) = v209;
    *(_OWORD *)v29 = v30;
    *(_QWORD *)(a2 + 8) = v29 + 24;
    if ((a1 & 2) == 0)
      goto LABEL_59;
LABEL_45:
    std::string::basic_string[abi:ne180100]<0>(__p, "video");
    v40 = *(_QWORD *)(a2 + 16);
    v41 = *(_QWORD *)(a2 + 8);
    if (v41 >= v40)
    {
      v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *(_QWORD *)a2) >> 3);
      v44 = v43 + 1;
      if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *(_QWORD *)a2) >> 3);
      if (2 * v45 > v44)
        v44 = 2 * v45;
      if (v45 >= 0x555555555555555)
        v46 = 0xAAAAAAAAAAAAAAALL;
      else
        v46 = v44;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v46)
        v47 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v46);
      else
        v47 = 0;
      v48 = v47 + v43;
      __v.__first_ = v47;
      __v.__begin_ = v48;
      __v.__end_cap_.__value_ = &v47[v46];
      v49 = *(_OWORD *)__p;
      v48->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v49;
      __p[1] = 0;
      v209 = 0;
      __p[0] = 0;
      __v.__end_ = v48 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      v50 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v51 = SHIBYTE(v209);
      *(_QWORD *)(a2 + 8) = v50;
      if (v51 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v42 = *(_OWORD *)__p;
      *(_QWORD *)(v41 + 16) = v209;
      *(_OWORD *)v41 = v42;
      *(_QWORD *)(a2 + 8) = v41 + 24;
    }
    goto LABEL_59;
  }
  v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *(_QWORD *)a2) >> 3);
  v32 = v31 + 1;
  if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *(_QWORD *)a2) >> 3);
  if (2 * v33 > v32)
    v32 = 2 * v33;
  v34 = v33 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v32;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  v35 = v34 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v34) : 0;
  v36 = v35 + v31;
  __v.__first_ = v35;
  __v.__begin_ = v36;
  __v.__end_cap_.__value_ = &v35[v34];
  v37 = *(_OWORD *)__p;
  v36->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
  __p[1] = 0;
  v209 = 0;
  __p[0] = 0;
  __v.__end_ = v36 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  v38 = *(_QWORD *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v39 = SHIBYTE(v209);
  *(_QWORD *)(a2 + 8) = v38;
  if (v39 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 2) != 0)
      goto LABEL_45;
  }
  else
  {
LABEL_44:
    if ((a1 & 2) != 0)
      goto LABEL_45;
  }
  if ((a1 & 0x10) == 0)
    goto LABEL_73;
LABEL_59:
  std::string::basic_string[abi:ne180100]<0>(__p, "ipcall");
  v52 = *(_QWORD *)(a2 + 16);
  v53 = *(_QWORD *)(a2 + 8);
  if (v53 < v52)
  {
    v54 = *(_OWORD *)__p;
    *(_QWORD *)(v53 + 16) = v209;
    *(_OWORD *)v53 = v54;
    *(_QWORD *)(a2 + 8) = v53 + 24;
    if ((a1 & 0x20) == 0)
      goto LABEL_88;
LABEL_74:
    std::string::basic_string[abi:ne180100]<0>(__p, "text");
    v64 = *(_QWORD *)(a2 + 16);
    v65 = *(_QWORD *)(a2 + 8);
    if (v65 >= v64)
    {
      v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - *(_QWORD *)a2) >> 3);
      v68 = v67 + 1;
      if (v67 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - *(_QWORD *)a2) >> 3);
      if (2 * v69 > v68)
        v68 = 2 * v69;
      if (v69 >= 0x555555555555555)
        v70 = 0xAAAAAAAAAAAAAAALL;
      else
        v70 = v68;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v70)
        v71 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v70);
      else
        v71 = 0;
      v72 = v71 + v67;
      __v.__first_ = v71;
      __v.__begin_ = v72;
      __v.__end_cap_.__value_ = &v71[v70];
      v73 = *(_OWORD *)__p;
      v72->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v73;
      __p[1] = 0;
      v209 = 0;
      __p[0] = 0;
      __v.__end_ = v72 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      v74 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v75 = SHIBYTE(v209);
      *(_QWORD *)(a2 + 8) = v74;
      if (v75 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v66 = *(_OWORD *)__p;
      *(_QWORD *)(v65 + 16) = v209;
      *(_OWORD *)v65 = v66;
      *(_QWORD *)(a2 + 8) = v65 + 24;
    }
    goto LABEL_88;
  }
  v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *(_QWORD *)a2) >> 3);
  v56 = v55 + 1;
  if (v55 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(_QWORD *)a2) >> 3);
  if (2 * v57 > v56)
    v56 = 2 * v57;
  v58 = v57 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v56;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  v59 = v58 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v58) : 0;
  v60 = v59 + v55;
  __v.__first_ = v59;
  __v.__begin_ = v60;
  __v.__end_cap_.__value_ = &v59[v58];
  v61 = *(_OWORD *)__p;
  v60->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v61;
  __p[1] = 0;
  v209 = 0;
  __p[0] = 0;
  __v.__end_ = v60 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  v62 = *(_QWORD *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v63 = SHIBYTE(v209);
  *(_QWORD *)(a2 + 8) = v62;
  if (v63 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x20) != 0)
      goto LABEL_74;
  }
  else
  {
LABEL_73:
    if ((a1 & 0x20) != 0)
      goto LABEL_74;
  }
  if ((a1 & 0x40) == 0)
    goto LABEL_102;
LABEL_88:
  std::string::basic_string[abi:ne180100]<0>(__p, "reg");
  v76 = *(_QWORD *)(a2 + 16);
  v77 = *(_QWORD *)(a2 + 8);
  if (v77 < v76)
  {
    v78 = *(_OWORD *)__p;
    *(_QWORD *)(v77 + 16) = v209;
    *(_OWORD *)v77 = v78;
    *(_QWORD *)(a2 + 8) = v77 + 24;
    if ((a1 & 0x80) == 0)
      goto LABEL_117;
LABEL_103:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliPager");
    v88 = *(_QWORD *)(a2 + 16);
    v89 = *(_QWORD *)(a2 + 8);
    if (v89 >= v88)
    {
      v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - *(_QWORD *)a2) >> 3);
      v92 = v91 + 1;
      if (v91 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - *(_QWORD *)a2) >> 3);
      if (2 * v93 > v92)
        v92 = 2 * v93;
      if (v93 >= 0x555555555555555)
        v94 = 0xAAAAAAAAAAAAAAALL;
      else
        v94 = v92;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v94)
        v95 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v94);
      else
        v95 = 0;
      v96 = v95 + v91;
      __v.__first_ = v95;
      __v.__begin_ = v96;
      __v.__end_cap_.__value_ = &v95[v94];
      v97 = *(_OWORD *)__p;
      v96->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v96->__r_.__value_.__l.__data_ = v97;
      __p[1] = 0;
      v209 = 0;
      __p[0] = 0;
      __v.__end_ = v96 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      v98 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v99 = SHIBYTE(v209);
      *(_QWORD *)(a2 + 8) = v98;
      if (v99 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v90 = *(_OWORD *)__p;
      *(_QWORD *)(v89 + 16) = v209;
      *(_OWORD *)v89 = v90;
      *(_QWORD *)(a2 + 8) = v89 + 24;
    }
    goto LABEL_117;
  }
  v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - *(_QWORD *)a2) >> 3);
  v80 = v79 + 1;
  if (v79 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - *(_QWORD *)a2) >> 3);
  if (2 * v81 > v80)
    v80 = 2 * v81;
  v82 = v81 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v80;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  v83 = v82 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v82) : 0;
  v84 = v83 + v79;
  __v.__first_ = v83;
  __v.__begin_ = v84;
  __v.__end_cap_.__value_ = &v83[v82];
  v85 = *(_OWORD *)__p;
  v84->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v84->__r_.__value_.__l.__data_ = v85;
  __p[1] = 0;
  v209 = 0;
  __p[0] = 0;
  __v.__end_ = v84 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  v86 = *(_QWORD *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v87 = SHIBYTE(v209);
  *(_QWORD *)(a2 + 8) = v86;
  if (v87 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x80) != 0)
      goto LABEL_103;
  }
  else
  {
LABEL_102:
    if ((a1 & 0x80) != 0)
      goto LABEL_103;
  }
  if ((a1 & 0x100) == 0)
    goto LABEL_131;
LABEL_117:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliChat");
  v100 = *(_QWORD *)(a2 + 16);
  v101 = *(_QWORD *)(a2 + 8);
  if (v101 < v100)
  {
    v102 = *(_OWORD *)__p;
    *(_QWORD *)(v101 + 16) = v209;
    *(_OWORD *)v101 = v102;
    *(_QWORD *)(a2 + 8) = v101 + 24;
    if ((a1 & 0x200) == 0)
      goto LABEL_146;
LABEL_132:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliChatbot");
    v112 = *(_QWORD *)(a2 + 16);
    v113 = *(_QWORD *)(a2 + 8);
    if (v113 >= v112)
    {
      v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v113 - *(_QWORD *)a2) >> 3);
      v116 = v115 + 1;
      if (v115 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - *(_QWORD *)a2) >> 3);
      if (2 * v117 > v116)
        v116 = 2 * v117;
      if (v117 >= 0x555555555555555)
        v118 = 0xAAAAAAAAAAAAAAALL;
      else
        v118 = v116;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v118)
        v119 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v118);
      else
        v119 = 0;
      v120 = v119 + v115;
      __v.__first_ = v119;
      __v.__begin_ = v120;
      __v.__end_cap_.__value_ = &v119[v118];
      v121 = *(_OWORD *)__p;
      v120->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v120->__r_.__value_.__l.__data_ = v121;
      __p[1] = 0;
      v209 = 0;
      __p[0] = 0;
      __v.__end_ = v120 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      v122 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v123 = SHIBYTE(v209);
      *(_QWORD *)(a2 + 8) = v122;
      if (v123 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v114 = *(_OWORD *)__p;
      *(_QWORD *)(v113 + 16) = v209;
      *(_OWORD *)v113 = v114;
      *(_QWORD *)(a2 + 8) = v113 + 24;
    }
    goto LABEL_146;
  }
  v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - *(_QWORD *)a2) >> 3);
  v104 = v103 + 1;
  if (v103 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v105 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - *(_QWORD *)a2) >> 3);
  if (2 * v105 > v104)
    v104 = 2 * v105;
  v106 = v105 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v104;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  v107 = v106 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v106) : 0;
  v108 = v107 + v103;
  __v.__first_ = v107;
  __v.__begin_ = v108;
  __v.__end_cap_.__value_ = &v107[v106];
  v109 = *(_OWORD *)__p;
  v108->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v108->__r_.__value_.__l.__data_ = v109;
  __p[1] = 0;
  v209 = 0;
  __p[0] = 0;
  __v.__end_ = v108 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  v110 = *(_QWORD *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v111 = SHIBYTE(v209);
  *(_QWORD *)(a2 + 8) = v110;
  if (v111 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x200) != 0)
      goto LABEL_132;
  }
  else
  {
LABEL_131:
    if ((a1 & 0x200) != 0)
      goto LABEL_132;
  }
  if ((a1 & 0x400) == 0)
    goto LABEL_160;
LABEL_146:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliCpmOnly");
  v124 = *(_QWORD *)(a2 + 16);
  v125 = *(_QWORD *)(a2 + 8);
  if (v125 < v124)
  {
    v126 = *(_OWORD *)__p;
    *(_QWORD *)(v125 + 16) = v209;
    *(_OWORD *)v125 = v126;
    *(_QWORD *)(a2 + 8) = v125 + 24;
    if ((a1 & 0x800) == 0)
      goto LABEL_175;
LABEL_161:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliLargeMsgOnly");
    v136 = *(_QWORD *)(a2 + 16);
    v137 = *(_QWORD *)(a2 + 8);
    if (v137 >= v136)
    {
      v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v137 - *(_QWORD *)a2) >> 3);
      v140 = v139 + 1;
      if (v139 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v136 - *(_QWORD *)a2) >> 3);
      if (2 * v141 > v140)
        v140 = 2 * v141;
      if (v141 >= 0x555555555555555)
        v142 = 0xAAAAAAAAAAAAAAALL;
      else
        v142 = v140;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v142)
        v143 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v142);
      else
        v143 = 0;
      v144 = v143 + v139;
      __v.__first_ = v143;
      __v.__begin_ = v144;
      __v.__end_cap_.__value_ = &v143[v142];
      v145 = *(_OWORD *)__p;
      v144->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v144->__r_.__value_.__l.__data_ = v145;
      __p[1] = 0;
      v209 = 0;
      __p[0] = 0;
      __v.__end_ = v144 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      v146 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v147 = SHIBYTE(v209);
      *(_QWORD *)(a2 + 8) = v146;
      if (v147 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v138 = *(_OWORD *)__p;
      *(_QWORD *)(v137 + 16) = v209;
      *(_OWORD *)v137 = v138;
      *(_QWORD *)(a2 + 8) = v137 + 24;
    }
    goto LABEL_175;
  }
  v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v125 - *(_QWORD *)a2) >> 3);
  v128 = v127 + 1;
  if (v127 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - *(_QWORD *)a2) >> 3);
  if (2 * v129 > v128)
    v128 = 2 * v129;
  v130 = v129 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v128;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  v131 = v130 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v130) : 0;
  v132 = v131 + v127;
  __v.__first_ = v131;
  __v.__begin_ = v132;
  __v.__end_cap_.__value_ = &v131[v130];
  v133 = *(_OWORD *)__p;
  v132->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v132->__r_.__value_.__l.__data_ = v133;
  __p[1] = 0;
  v209 = 0;
  __p[0] = 0;
  __v.__end_ = v132 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  v134 = *(_QWORD *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v135 = SHIBYTE(v209);
  *(_QWORD *)(a2 + 8) = v134;
  if (v135 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x800) != 0)
      goto LABEL_161;
  }
  else
  {
LABEL_160:
    if ((a1 & 0x800) != 0)
      goto LABEL_161;
  }
  if ((a1 & 0x1000) == 0)
    goto LABEL_189;
LABEL_175:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliFileXfer");
  v148 = *(_QWORD *)(a2 + 16);
  v149 = *(_QWORD *)(a2 + 8);
  if (v149 < v148)
  {
    v150 = *(_OWORD *)__p;
    *(_QWORD *)(v149 + 16) = v209;
    *(_OWORD *)v149 = v150;
    *(_QWORD *)(a2 + 8) = v149 + 24;
    if ((a1 & 0x2000) == 0)
      goto LABEL_204;
LABEL_190:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliGeoPush");
    v160 = *(_QWORD *)(a2 + 16);
    v161 = *(_QWORD *)(a2 + 8);
    if (v161 >= v160)
    {
      v163 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v161 - *(_QWORD *)a2) >> 3);
      v164 = v163 + 1;
      if (v163 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v165 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160 - *(_QWORD *)a2) >> 3);
      if (2 * v165 > v164)
        v164 = 2 * v165;
      if (v165 >= 0x555555555555555)
        v166 = 0xAAAAAAAAAAAAAAALL;
      else
        v166 = v164;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v166)
        v167 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v166);
      else
        v167 = 0;
      v168 = v167 + v163;
      __v.__first_ = v167;
      __v.__begin_ = v168;
      __v.__end_cap_.__value_ = &v167[v166];
      v169 = *(_OWORD *)__p;
      v168->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v168->__r_.__value_.__l.__data_ = v169;
      __p[1] = 0;
      v209 = 0;
      __p[0] = 0;
      __v.__end_ = v168 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      v170 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v171 = SHIBYTE(v209);
      *(_QWORD *)(a2 + 8) = v170;
      if (v171 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v162 = *(_OWORD *)__p;
      *(_QWORD *)(v161 + 16) = v209;
      *(_OWORD *)v161 = v162;
      *(_QWORD *)(a2 + 8) = v161 + 24;
    }
    goto LABEL_204;
  }
  v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - *(_QWORD *)a2) >> 3);
  v152 = v151 + 1;
  if (v151 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v153 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - *(_QWORD *)a2) >> 3);
  if (2 * v153 > v152)
    v152 = 2 * v153;
  v154 = v153 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v152;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  v155 = v154 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v154) : 0;
  v156 = v155 + v151;
  __v.__first_ = v155;
  __v.__begin_ = v156;
  __v.__end_cap_.__value_ = &v155[v154];
  v157 = *(_OWORD *)__p;
  v156->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v156->__r_.__value_.__l.__data_ = v157;
  __p[1] = 0;
  v209 = 0;
  __p[0] = 0;
  __v.__end_ = v156 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  v158 = *(_QWORD *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v159 = SHIBYTE(v209);
  *(_QWORD *)(a2 + 8) = v158;
  if (v159 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x2000) != 0)
      goto LABEL_190;
  }
  else
  {
LABEL_189:
    if ((a1 & 0x2000) != 0)
      goto LABEL_190;
  }
  if ((a1 & 0x4000) == 0)
    goto LABEL_218;
LABEL_204:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliImage");
  v172 = *(_QWORD *)(a2 + 16);
  v173 = *(_QWORD *)(a2 + 8);
  if (v173 < v172)
  {
    v174 = *(_OWORD *)__p;
    *(_QWORD *)(v173 + 16) = v209;
    *(_OWORD *)v173 = v174;
    *(_QWORD *)(a2 + 8) = v173 + 24;
    if ((a1 & 0x8000) == 0)
      goto LABEL_233;
    goto LABEL_219;
  }
  v175 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v173 - *(_QWORD *)a2) >> 3);
  v176 = v175 + 1;
  if (v175 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v177 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v172 - *(_QWORD *)a2) >> 3);
  if (2 * v177 > v176)
    v176 = 2 * v177;
  v178 = v177 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v176;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  v179 = v178 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v178) : 0;
  v180 = v179 + v175;
  __v.__first_ = v179;
  __v.__begin_ = v180;
  __v.__end_cap_.__value_ = &v179[v178];
  v181 = *(_OWORD *)__p;
  v180->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v180->__r_.__value_.__l.__data_ = v181;
  __p[1] = 0;
  v209 = 0;
  __p[0] = 0;
  __v.__end_ = v180 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  v182 = *(_QWORD *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v183 = SHIBYTE(v209);
  *(_QWORD *)(a2 + 8) = v182;
  if (v183 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x8000) == 0)
      goto LABEL_233;
  }
  else
  {
LABEL_218:
    if ((a1 & 0x8000) == 0)
      goto LABEL_233;
  }
LABEL_219:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliVideo");
  v184 = *(_QWORD *)(a2 + 16);
  v185 = *(_QWORD *)(a2 + 8);
  if (v185 >= v184)
  {
    v187 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v185 - *(_QWORD *)a2) >> 3);
    v188 = v187 + 1;
    if (v187 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v189 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v184 - *(_QWORD *)a2) >> 3);
    if (2 * v189 > v188)
      v188 = 2 * v189;
    if (v189 >= 0x555555555555555)
      v190 = 0xAAAAAAAAAAAAAAALL;
    else
      v190 = v188;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v190)
      v191 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v190);
    else
      v191 = 0;
    v192 = v191 + v187;
    __v.__first_ = v191;
    __v.__begin_ = v192;
    __v.__end_cap_.__value_ = &v191[v190];
    v193 = *(_OWORD *)__p;
    v192->__r_.__value_.__r.__words[2] = v209;
    *(_OWORD *)&v192->__r_.__value_.__l.__data_ = v193;
    __p[1] = 0;
    v209 = 0;
    __p[0] = 0;
    __v.__end_ = v192 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    v194 = *(_QWORD *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v195 = SHIBYTE(v209);
    *(_QWORD *)(a2 + 8) = v194;
    if (v195 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v186 = *(_OWORD *)__p;
    *(_QWORD *)(v185 + 16) = v209;
    *(_OWORD *)v185 = v186;
    *(_QWORD *)(a2 + 8) = v185 + 24;
  }
LABEL_233:
  if ((a1 & 0x10000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliIM");
    v196 = *(_QWORD *)(a2 + 16);
    v197 = *(_QWORD *)(a2 + 8);
    if (v197 >= v196)
    {
      v199 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v197 - *(_QWORD *)a2) >> 3);
      v200 = v199 + 1;
      if (v199 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v201 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v196 - *(_QWORD *)a2) >> 3);
      if (2 * v201 > v200)
        v200 = 2 * v201;
      if (v201 >= 0x555555555555555)
        v202 = 0xAAAAAAAAAAAAAAALL;
      else
        v202 = v200;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v202)
        v203 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v202);
      else
        v203 = 0;
      v204 = v203 + v199;
      __v.__first_ = v203;
      __v.__begin_ = v204;
      __v.__end_cap_.__value_ = &v203[v202];
      v205 = *(_OWORD *)__p;
      v204->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v204->__r_.__value_.__l.__data_ = v205;
      __p[1] = 0;
      v209 = 0;
      __p[0] = 0;
      __v.__end_ = v204 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      v206 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v207 = SHIBYTE(v209);
      *(_QWORD *)(a2 + 8) = v206;
      if (v207 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v198 = *(_OWORD *)__p;
      *(_QWORD *)(v197 + 16) = v209;
      *(_OWORD *)v197 = v198;
      *(_QWORD *)(a2 + 8) = v197 + 24;
    }
  }
}

void sub_1BEF53EB0(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a15);
  if (a14 < 0)
    operator delete(__pa);
  _Unwind_Resume(__p);
}

void BambiServices::namesForServiceMask(int a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  BambiServices::nameArrayForServiceMask(a1, (uint64_t)&v5);
  if (v5 == v6)
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  else
    ims::join<std::__wrap_iter<std::string const*>>(v5, v6, a2, a3);
  v8 = (void **)&v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_1BEF53FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void BambiServices::addServiceParameters(BambiServices *this, uint64_t a2, SipParameterMap *a3)
{
  unsigned int v4;
  size_t size;
  std::string *v6;
  void *v7;
  std::string *p_str;
  std::string::size_type v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  std::string::size_type v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t *v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string __str;
  std::string *v38;
  std::string v39;
  uint64_t v40;

  v4 = this;
  v40 = *MEMORY[0x1E0C80C00];
  if ((this & 1) == 0)
    goto LABEL_22;
  memset(&__str, 0, sizeof(__str));
  if (BambiServices::kFeatureTagMmtel[23] < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)BambiServices::kFeatureTagMmtel, *(std::string::size_type *)&BambiServices::kFeatureTagMmtel[8]);
  else
    __str = *(std::string *)BambiServices::kFeatureTagMmtel;
  ims::addPercentEscapes((uint64_t)&__str, 0, 0);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  memset(&v36, 0, sizeof(v36));
  v6 = &v36;
  std::string::basic_string[abi:ne180100]((uint64_t)&v36, size + 1);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v36.__r_.__value_.__r.__words[0];
  v6->__r_.__value_.__s.__data_[0] = 34;
  v7 = (char *)&v6->__r_.__value_.__l.__data_ + 1;
  if (size)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    memmove(v7, p_str, size);
  }
  *((_BYTE *)v7 + size) = 0;
  std::string::push_back(&v36, 34);
  v39.__r_.__value_.__r.__words[0] = v36.__r_.__value_.__l.__size_;
  v9 = v36.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 7);
  v10 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  memset(&v36, 0, sizeof(v36));
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    __str.__r_.__value_.__r.__words[0] = v9;
    __str.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = v10;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  else
  {
    __str.__r_.__value_.__r.__words[0] = v9;
    __str.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = v10;
  }
  std::string::basic_string[abi:ne180100]<0>(&v36, "+g.3gpp.icsi-ref");
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&v36.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v39);
  std::string::operator=((std::string *)(v11 + 7), &__str);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v4 & 2) == 0)
      goto LABEL_28;
  }
  else
  {
LABEL_22:
    if ((v4 & 2) == 0)
      goto LABEL_28;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "video");
  std::string::basic_string[abi:ne180100]<0>(&v36, "");
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v39);
  std::string::operator=((std::string *)(v12 + 7), &v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((v4 & 4) == 0)
    goto LABEL_32;
LABEL_28:
  std::string::basic_string[abi:ne180100]<0>(&__str, "+g.3gpp.smsip");
  std::string::basic_string[abi:ne180100]<0>(&v36, "");
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v39);
  std::string::operator=((std::string *)(v13 + 7), &v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v4 & 8) == 0)
      goto LABEL_38;
  }
  else
  {
LABEL_32:
    if ((v4 & 8) == 0)
      goto LABEL_38;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "audio");
  std::string::basic_string[abi:ne180100]<0>(&v36, "");
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v39);
  std::string::operator=((std::string *)(v14 + 7), &v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((v4 & 0x10) == 0)
    goto LABEL_42;
LABEL_38:
  std::string::basic_string[abi:ne180100]<0>(&__str, "+g.gsma.rcs.ipcall");
  std::string::basic_string[abi:ne180100]<0>(&v36, "");
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v39);
  std::string::operator=((std::string *)(v15 + 7), &v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v4 & 0x20) == 0)
      goto LABEL_48;
  }
  else
  {
LABEL_42:
    if ((v4 & 0x20) == 0)
      goto LABEL_48;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "text");
  std::string::basic_string[abi:ne180100]<0>(&v36, "");
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v39);
  std::string::operator=((std::string *)(v16 + 7), &v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_48:
  memset(&__str, 0, sizeof(__str));
  memset(&v36, 0, sizeof(v36));
  if ((v4 & 0x80) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "+g.gsma.rcs.cpm.pager-large");
    std::string::basic_string[abi:ne180100]<0>(&v35, "");
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
    v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&v39.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v34);
    std::string::operator=((std::string *)(v17 + 7), &v35);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if ((v4 & 0x200) != 0)
  }
  if ((v4 & 0x100) != 0)
  {
    if ((v4 & 0x200) != 0)
    v18 = 1;
  }
  else
  {
    v18 = (v4 >> 7) & 1;
  }
  v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = __str.__r_.__value_.__l.__size_;
  if (v19
    && (ims::addQuotes((uint64_t)&__str, 0),
        std::string::basic_string[abi:ne180100]<0>(&v39, "+g.3gpp.icsi-ref"),
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39,
        v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&v39.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v35), std::string::operator=((std::string *)(v20 + 7), &__str), SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((v4 & 0x200) == 0)
    {
LABEL_65:
      if (!v18)
        goto LABEL_73;
      goto LABEL_72;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_65;
  }
  memset(&v39, 0, sizeof(v39));
  v21 = std::string::basic_string[abi:ne180100]<0>(&v39, "#=1,#=2");
  ims::addQuotes((uint64_t)v21, 0);
  std::string::basic_string[abi:ne180100]<0>(&v35, "+g.gsma.rcs.botversion");
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&v35.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v34);
  std::string::operator=((std::string *)(v22 + 7), &v39);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
LABEL_72:
  ims::addQuotes((uint64_t)&v36, 0);
  std::string::basic_string[abi:ne180100]<0>(&v39, "+g.3gpp.iari-ref");
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&v39.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v35);
  std::string::operator=((std::string *)(v23 + 7), &v36);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((v4 & 0x400) == 0)
      goto LABEL_79;
    goto LABEL_76;
  }
LABEL_73:
  if ((v4 & 0x400) == 0)
    goto LABEL_79;
LABEL_76:
  memset(&v39, 0, sizeof(v39));
  v24 = std::string::basic_string[abi:ne180100]<0>(&v39, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg");
  ims::addPercentEscapes((uint64_t)v24, 0, 0);
  ims::addQuotes((uint64_t)&v39, 0);
  std::string::basic_string[abi:ne180100]<0>(&v35, "+g.3gpp.icsi-ref");
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&v35.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v34);
  std::string::operator=((std::string *)(v25 + 7), &v39);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_79:
    if ((v4 & 0x800) == 0)
      goto LABEL_85;
    goto LABEL_80;
  }
  operator delete(v39.__r_.__value_.__l.__data_);
  if ((v4 & 0x800) == 0)
    goto LABEL_85;
LABEL_80:
  memset(&v39, 0, sizeof(v39));
  v26 = std::string::basic_string[abi:ne180100]<0>(&v39, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.largemsg");
  ims::addPercentEscapes((uint64_t)v26, 0, 0);
  ims::addQuotes((uint64_t)&v39, 0);
  std::string::basic_string[abi:ne180100]<0>(&v35, "+g.3gpp.icsi-ref");
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&v35.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v34);
  std::string::operator=((std::string *)(v27 + 7), &v39);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if ((v4 & 0x20000) == 0)
    goto LABEL_89;
LABEL_85:
  memset(&v39, 0, sizeof(v39));
  v28 = std::string::basic_string[abi:ne180100]<0>(&v39, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.session");
  ims::addPercentEscapes((uint64_t)v28, 0, 0);
  ims::addQuotes((uint64_t)&v39, 0);
  std::string::basic_string[abi:ne180100]<0>(&v35, "+g.3gpp.icsi-ref");
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&v35.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v34);
  std::string::operator=((std::string *)(v29 + 7), &v39);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((v4 & 0x40000) == 0)
      goto LABEL_99;
  }
  else
  {
LABEL_89:
    if ((v4 & 0x40000) == 0)
      goto LABEL_99;
  }
  memset(&v39, 0, sizeof(v39));
  v30 = std::string::basic_string[abi:ne180100]<0>(&v39, "urn:urn-7:3gpp-application.ims.iari.rcs.botspam");
  ims::addPercentEscapes((uint64_t)v30, 0, 0);
  ims::addQuotes((uint64_t)&v39, 0);
  std::string::basic_string[abi:ne180100]<0>(&v35, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.systemmsg");
  std::string::basic_string[abi:ne180100]<0>(&v34, "");
  v31 = (uint64_t **)(a2 + 8);
  v38 = &v35;
  v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, (void **)&v35.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v38);
  std::string::operator=((std::string *)(v32 + 7), &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v35, "+g.3gpp.iari-ref");
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, (void **)&v35.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v34);
  std::string::operator=((std::string *)(v33 + 7), &v39);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
LABEL_99:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BEF549F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::addParam(std::string *this, char *__s)
{
  std::string::size_type size;
  const std::string::value_type *p_p;
  std::string::size_type v6;
  void *__p;
  std::string::size_type v8;
  uint64_t v9;

  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size)
    std::string::push_back(this, 44);
  __p = 0;
  v8 = 0;
  v9 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  ims::addPercentEscapes((uint64_t)&__p, 0, 0);
  if (v9 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v9 >= 0)
    v6 = HIBYTE(v9);
  else
    v6 = v8;
  std::string::append(this, p_p, v6);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
}

void sub_1BEF54BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BambiServices::serviceFromKeyValue(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  int *v8;
  int v10;
  int v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  _DWORD *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  int v28;
  void *v29;
  std::string *v30;
  int64_t v31;
  char *v32;
  uint64_t v33;
  std::string *v34;
  char *v35;
  char *v36;
  int64_t size;
  std::string *v38;
  char *v39;
  int64_t v40;
  std::string *v41;
  char *v42;
  uint64_t v46;
  std::string *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  std::string *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  std::string *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  std::string *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  std::string *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  std::string *v67;
  char *v68;
  char *v69;
  std::string *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  std::string *v74;
  char *v75;
  char *v76;
  std::string *v77;
  char *v78;
  char *v79;
  std::string v80;

  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = a1[1];
  if (v3 <= 12)
  {
    if (v3 == 4)
    {
      if (v2 >= 0)
        v19 = a1;
      else
        v19 = (_DWORD *)*a1;
      if (*v19 == 1954047348)
        return 32;
    }
    else
    {
      if (v3 != 5)
      {
LABEL_59:
        if (v2 >= 0)
          v4 = a1;
        else
          v4 = (_QWORD *)*a1;
        if (v3 >= 17)
        {
LABEL_63:
          v20 = (char *)v4 + v3;
          v21 = v3;
          v22 = v4;
          while (1)
          {
            v23 = (char *)memchr(v22, 43, v21 - 16);
            if (!v23)
              break;
            if (*(_QWORD *)v23 == 0x2E616D73672E672BLL
              && *((_QWORD *)v23 + 1) == 0x6F6273692E736372
              && v23[16] == 116)
            {
              if (v23 != v20 && v23 - (char *)v4 != -1)
                return 512;
              return 0;
            }
            v22 = v23 + 1;
            v21 = v20 - (_BYTE *)v22;
            if (v20 - (_BYTE *)v22 < 17)
              return 0;
          }
          return 0;
        }
        return 0;
      }
      if (v2 >= 0)
        v8 = (int *)a1;
      else
        v8 = (int *)*a1;
      if (*v8 == 1701079414 && *((_BYTE *)v8 + 4) == 111)
        return 2;
      v10 = *v8;
      v11 = *((unsigned __int8 *)v8 + 4);
      if (v10 == 1768191329 && v11 == 111)
        return 8;
    }
    return 0;
  }
  if (v3 == 13)
  {
    if (v2 >= 0)
      v13 = a1;
    else
      v13 = (uint64_t *)*a1;
    v14 = *v13;
    v15 = *(uint64_t *)((char *)v13 + 5);
    if (v14 == 0x2E707067332E672BLL && v15 == 0x7069736D732E7070)
      return 4;
    return 0;
  }
  if (v3 == 16)
  {
    if (v2 >= 0)
      v17 = a1;
    else
      v17 = (_QWORD *)*a1;
    if (*v17 == 0x2E707067332E672BLL && v17[1] == 0x6665722D69736369)
    {
      memset(&v80, 0, sizeof(v80));
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v80 = *(std::string *)a2;
      ims::removeQuotes((uint64_t)&v80);
      ims::removePercentEscapes((uint64_t)&v80);
      v28 = SHIBYTE(v80.__r_.__value_.__r.__words[2]);
      v29 = (void *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      else
        size = v80.__r_.__value_.__l.__size_;
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v80;
      else
        v38 = (std::string *)v80.__r_.__value_.__r.__words[0];
      v39 = (char *)v38 + size;
      if (size >= 27)
      {
        v40 = size;
        v41 = v38;
        do
        {
          v42 = (char *)memchr(v41, 51, v40 - 26);
          if (!v42)
            break;
          if (*(_QWORD *)v42 == 0x7265732D70706733
            && *((_QWORD *)v42 + 1) == 0x736D692E65636976
            && *((_QWORD *)v42 + 2) == 0x6D6D2E697363692ELL
            && *(_QWORD *)(v42 + 19) == 0x6C65746D6D2E6973)
          {
            if (v42 != v39 && v42 - (char *)v38 != -1)
            {
              v7 = 1;
              goto LABEL_209;
            }
            break;
          }
          v41 = (std::string *)(v42 + 1);
          v40 = v39 - (char *)v41;
        }
        while (v39 - (char *)v41 >= 27);
        if (size >= 43)
        {
          v58 = size;
          v59 = v38;
          do
          {
            v60 = (char *)memchr(v59, 117, v58 - 42);
            if (!v60)
              break;
            v61 = v60;
            if (!memcmp(v60, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg", 0x2BuLL))
            {
              if (v61 != v39 && v61 - (char *)v38 != -1)
              {
                v7 = 128;
                goto LABEL_170;
              }
              break;
            }
            v59 = (std::string *)(v61 + 1);
            v58 = v39 - (v61 + 1);
          }
          while (v58 >= 43);
        }
      }
      v7 = 0;
LABEL_170:
      if (size >= 47)
      {
        v66 = size;
        v67 = v38;
        do
        {
          v68 = (char *)memchr(v67, 117, v66 - 46);
          if (!v68)
            break;
          v69 = v68;
          if (!memcmp(v68, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.session", 0x2FuLL))
          {
            if (v69 != v39 && v69 - (char *)v38 != -1)
              v7 = v7 | 0x100;
            break;
          }
          v67 = (std::string *)(v69 + 1);
          v66 = v39 - (v69 + 1);
        }
        while (v66 >= 47);
      }
      if (size >= 37)
      {
        v70 = v38;
        do
        {
          v71 = (char *)memchr(v70, 51, size - 36);
          if (!v71)
            break;
          v72 = v71;
          if (!memcmp(v71, "3gpp-service.ims.icsi.gsma.videoshare", 0x25uLL))
          {
            if (v72 != v39 && v72 - (char *)v38 != -1)
              v7 = v7 | 0x8000;
            break;
          }
          v70 = (std::string *)(v72 + 1);
          size = v39 - (v72 + 1);
        }
        while (size >= 37);
      }
    }
    else
    {
      if (*v17 != 0x2E707067332E672BLL || v17[1] != 0x6665722D69726169)
        return 0;
      memset(&v80, 0, sizeof(v80));
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v80 = *(std::string *)a2;
      ims::removeQuotes((uint64_t)&v80);
      ims::removePercentEscapes((uint64_t)&v80);
      v28 = SHIBYTE(v80.__r_.__value_.__r.__words[2]);
      v29 = (void *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v80;
      else
        v30 = (std::string *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      else
        v31 = v80.__r_.__value_.__l.__size_;
      v32 = (char *)v30 + v31;
      if (v31 >= 46)
      {
        v33 = v31;
        v34 = v30;
        do
        {
          v35 = (char *)memchr(v34, 117, v33 - 45);
          if (!v35)
            break;
          v36 = v35;
          if (!memcmp(v35, "urn:urn-7:3gpp-application.ims.iari.rcs.fthttp", 0x2EuLL))
          {
            if (v36 != v32 && v36 - (char *)v30 != -1)
            {
              v7 = 4096;
              goto LABEL_126;
            }
            break;
          }
          v34 = (std::string *)(v36 + 1);
          v33 = v32 - (v36 + 1);
        }
        while (v33 >= 46);
      }
      v7 = 0;
LABEL_126:
      if (v31 > 46)
      {
        v46 = v31;
        v47 = v30;
        do
        {
          v48 = (char *)memchr(v47, 117, v46 - 46);
          if (!v48)
            break;
          v49 = v48;
          if (!memcmp(v48, "urn:urn-7:3gpp-application.ims.iari.rcs.geopush", 0x2FuLL))
          {
            if (v49 != v32 && v49 - (char *)v30 != -1)
            {
LABEL_142:
              v7 = v7 | 0x2000;
              goto LABEL_143;
            }
            break;
          }
          v47 = (std::string *)(v49 + 1);
          v46 = v32 - (v49 + 1);
        }
        while (v46 > 46);
      }
      if (v31 >= 46)
      {
        v50 = v31;
        v51 = v30;
        do
        {
          v52 = (char *)memchr(v51, 117, v50 - 45);
          if (!v52)
            break;
          v53 = v52;
          if (!memcmp(v52, "urn:urn-7:3gpp-application.ims.iari.rcs.geosms", 0x2EuLL))
          {
            if (v53 == v32 || v53 - (char *)v30 == -1)
              break;
            goto LABEL_142;
          }
          v51 = (std::string *)(v53 + 1);
          v50 = v32 - (v53 + 1);
        }
        while (v50 >= 46);
LABEL_143:
        if (v31 > 46)
        {
          v54 = v31;
          v55 = v30;
          do
          {
            v56 = (char *)memchr(v55, 117, v54 - 46);
            if (!v56)
              break;
            v57 = v56;
            if (!memcmp(v56, "urn:urn-7:3gpp-application.ims.iari.rcs.chatbot", 0x2FuLL))
            {
              if (v57 != v32 && v57 - (char *)v30 != -1)
              {
LABEL_190:
                v7 = v7 | 0x100;
                goto LABEL_191;
              }
              break;
            }
            v55 = (std::string *)(v57 + 1);
            v54 = v32 - (v57 + 1);
          }
          while (v54 >= 47);
          if (v31 >= 50)
          {
            v62 = v31;
            v63 = v30;
            do
            {
              v64 = (char *)memchr(v63, 117, v62 - 49);
              if (!v64)
                break;
              v65 = v64;
              if (!memcmp(v64, "urn:urn-7:3gpp-application.ims.iari.rcs.chatbot.sa", 0x32uLL))
              {
                if (v65 == v32 || v65 - (char *)v30 == -1)
                  break;
                goto LABEL_190;
              }
              v63 = (std::string *)(v65 + 1);
              v62 = v32 - (v65 + 1);
            }
            while (v62 >= 50);
          }
        }
      }
LABEL_191:
      if (v31 >= 43)
      {
        v73 = v31;
        v74 = v30;
        do
        {
          v75 = (char *)memchr(v74, 117, v73 - 42);
          if (!v75)
            break;
          v76 = v75;
          if (!memcmp(v75, "urn:urn-7:3gpp-application.ims.iari.rcse.im", 0x2BuLL))
          {
            if (v76 != v32 && v76 - (char *)v30 != -1)
              v7 = v7 | 0x100;
            break;
          }
          v74 = (std::string *)(v76 + 1);
          v73 = v32 - (v76 + 1);
        }
        while (v73 >= 43);
      }
      if (v31 >= 43)
      {
        v77 = v30;
        do
        {
          v78 = (char *)memchr(v77, 117, v31 - 42);
          if (!v78)
            break;
          v79 = v78;
          if (!memcmp(v78, "urn:urn-7:3gpp-application.ims.iari.gsma-is", 0x2BuLL))
          {
            if (v79 != v32 && v79 - (char *)v30 != -1)
              v7 = v7 | 0x4000;
            break;
          }
          v77 = (std::string *)(v79 + 1);
          v31 = v32 - (v79 + 1);
        }
        while (v31 >= 43);
      }
    }
LABEL_209:
    if (v28 < 0)
      operator delete(v29);
    return v7;
  }
  if (v3 != 18)
    goto LABEL_59;
  if (v2 >= 0)
    v4 = a1;
  else
    v4 = (_QWORD *)*a1;
  if (*v4 != 0x2E616D73672E672BLL || v4[1] != 0x616370692E736372 || *((_WORD *)v4 + 8) != 27756)
    goto LABEL_63;
  return 16;
}

void sub_1BEF55434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BambiServices::serviceMaskFromParameters(BambiServices *this, const SipParameterMap *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  BOOL v8;

  v2 = (char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  if (v2 == (char *)this + 16)
    return 0;
  LODWORD(v4) = 0;
  do
  {
    v5 = BambiServices::serviceFromKeyValue((uint64_t *)v2 + 4, (uint64_t)(v2 + 56));
    v6 = (char *)*((_QWORD *)v2 + 1);
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = *(char **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (char *)*((_QWORD *)v2 + 2);
        v8 = *(_QWORD *)v7 == (_QWORD)v2;
        v2 = v7;
      }
      while (!v8);
    }
    v4 = v5 | v4;
    v2 = v7;
  }
  while (v7 != v3);
  return v4;
}

uint64_t _GLOBAL__sub_I_BambiServices_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(BambiServices::kFeatureTagMmtel, "urn:urn-7:3gpp-service.ims.icsi.mmtel");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], BambiServices::kFeatureTagMmtel, &dword_1BEDF4000);
}

void SipCallWaitingInfoBody::generateXml(SipCallWaitingInfoBody *this@<X0>, std::string *a2@<X8>)
{
  void (**v4)(bambi::XmlTreeItem *__hidden);
  _QWORD v5[3];
  __int128 v6;
  __int128 v7;

  v7 = 0u;
  v6 = 0u;
  v4 = off_1E78EC640;
  memset(v5, 0, sizeof(v5));
  std::vector<bambi::XmlTreeNs>::__init_with_size[abi:ne180100]<bambi::XmlTreeNs*,bambi::XmlTreeNs*>(v5, *((_QWORD *)this + 6), *((_QWORD *)this + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 4));
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v6, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    v6 = *(_OWORD *)((char *)this + 72);
    *(_QWORD *)&v7 = *((_QWORD *)this + 11);
  }
  v4 = (void (**)(bambi::XmlTreeItem *__hidden))&unk_1E78E82E0;
  BYTE8(v7) = *((_BYTE *)this + 96);
  bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)&v4, 0, 1, a2);
  bambi::XmlTreeItem::~XmlTreeItem((void **)&v4);
}

void sub_1BEF55610(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 56) = v1;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

void SipCallWaitingInfoBody::~SipCallWaitingInfoBody(void **this)
{
  *this = off_1E78C9A68;
  bambi::XmlTreeItem::~XmlTreeItem(this + 5);
  *this = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78C9A68;
  bambi::XmlTreeItem::~XmlTreeItem(this + 5);
  *this = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

std::string *SipCallWaitingInfoBody::clone(SipCallWaitingInfoBody *this)
{
  uint64_t v2;
  std::string *v3;
  std::string *v4;

  v2 = operator new();
  v3 = (std::string *)v2;
  *(_QWORD *)v2 = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 8), *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v2 + 24) = *((_QWORD *)this + 3);
  }
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C9A68;
  v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E78CE278;
  v3[1].__r_.__value_.__r.__words[2] = (std::string::size_type)off_1E78EC640;
  v3[2].__r_.__value_.__r.__words[0] = 0;
  v3[2].__r_.__value_.__l.__size_ = 0;
  v3[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<bambi::XmlTreeNs>::__init_with_size[abi:ne180100]<bambi::XmlTreeNs*,bambi::XmlTreeNs*>(v3[2].__r_.__value_.__r.__words, *((_QWORD *)this + 6), *((_QWORD *)this + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 4));
  v4 = v3 + 3;
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    v3[3].__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
  v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E78E8268;
  v3[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E78E82E0;
  v3[4].__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 96);
  return v3;
}

void sub_1BEF55800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *(_QWORD *)v2 = v4;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);
  MEMORY[0x1C3B87100](v2, 0x10B3C405772A826);
  _Unwind_Resume(a1);
}

void *SipCallWaitingInfoBody::contentType(SipCallWaitingInfoBody *this)
{
  return &SipCallWaitingInfoBody::kContentType;
}

uint64_t SipCallWaitingInfoBody::rootItem(SipCallWaitingInfoBody *this)
{
  return (uint64_t)this + 32;
}

uint64_t _GLOBAL__sub_I_SipCallWaitingInfoBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(SipCallWaitingInfoBody::kContentType, "application/vnd.3gpp.cw+xml");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], SipCallWaitingInfoBody::kContentType, &dword_1BEDF4000);
}

void ImsDnsResolver::resolveHostname(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, "");
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, a3, __p, a4);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_1BEF55924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsDnsResolver::resolveHostname(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, 3, a3);
}

void ImsDnsResolver::cleanAddressesAndPerformBlock(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  __int128 *v6;
  __int128 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  char **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  void **v16[2];
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v6 = *a3;
  v7 = a3[1];
  if (*a3 == v7)
  {
    v15 = 0;
    v14 = 0;
    v13 = 0;
    goto LABEL_18;
  }
  do
  {
    v8 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v6 + 128))(*(_QWORD *)v6);
    v9 = v8[23];
    if ((v9 & 0x80u) == 0)
      v10 = v8[23];
    else
      v10 = *((_QWORD *)v8 + 1);
    if (v10 != 3)
      goto LABEL_13;
    if ((v9 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v8, &IpAddress::kAddressTypeIPv4, *((_QWORD *)v8 + 1)))
        goto LABEL_13;
    }
    else if (v8[23])
    {
      v11 = &IpAddress::kAddressTypeIPv4;
      while (*v8 == *(unsigned __int8 *)v11)
      {
        ++v8;
        v11 = (__int128 *)((char *)v11 + 1);
        if (!--v9)
          goto LABEL_14;
      }
LABEL_13:
      v12 = (char **)&v27;
      goto LABEL_15;
    }
LABEL_14:
    v12 = (char **)&v24;
LABEL_15:
    std::vector<std::shared_ptr<LazuliHeader>>::push_back[abi:ne180100](v12, v6++);
  }
  while (v6 != v7);
  v13 = v22;
  v14 = v27;
  v15 = v28;
LABEL_18:
  std::vector<std::shared_ptr<IpAddress>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<IpAddress>*>,std::__wrap_iter<std::shared_ptr<IpAddress>*>>(&v21, v13, v14, v15, ((char *)v15 - (char *)v14) >> 4);
  std::vector<std::shared_ptr<IpAddress>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<IpAddress>*>,std::__wrap_iter<std::shared_ptr<IpAddress>*>>(&v21, v22, v24, v25, ((char *)v25 - (char *)v24) >> 4);
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v16[0] = (void **)&off_1E78B7238;
  v16[1] = (void **)&_bambiDomain;
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void ***, uint64_t **))(a4 + 16))(a4, a2, v16, &v21);
  ImsResult::~ImsResult((ImsResult *)v16);
  v16[0] = (void **)&v21;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v24;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v27;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v16);
}

void sub_1BEF55AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  ImsResult::~ImsResult((ImsResult *)&a9);
  a9 = &a18;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a9 = &a21;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a9 = (char *)(v21 - 72);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [15]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF55BD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char const*>(uint64_t a1, const char **a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = *a2;
  v6 = strlen(v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)v5, v6);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF55C78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t **std::vector<std::shared_ptr<IpAddress>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<IpAddress>*>,std::__wrap_iter<std::shared_ptr<IpAddress>*>>(uint64_t **result, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t *v46;
  char *v47;
  uint64_t **v48;

  if (a5 < 1)
    return result;
  v6 = a3;
  v7 = result;
  v8 = *result;
  v9 = a2 - (_QWORD)*result;
  v10 = v9 >> 4;
  v11 = (uint64_t *)((char *)*result + (v9 & 0xFFFFFFFFFFFFFFF0));
  v13 = result[2];
  result += 2;
  v12 = v13;
  v14 = (unint64_t)*(result - 1);
  if (a5 > (uint64_t)((uint64_t)v13 - v14) >> 4)
  {
    v15 = a5 + ((uint64_t)(v14 - (_QWORD)v8) >> 4);
    if (v15 >> 60)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v16 = (char *)v12 - (char *)v8;
    if (v16 >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    v48 = result;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)result, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v10];
    v44 = v18;
    v47 = &v18[16 * v17];
    v27 = &v26[2 * a5];
    v28 = v26;
    do
    {
      *v28 = *v6;
      v29 = v6[1];
      v28[1] = v29;
      if (v29)
      {
        v30 = (unint64_t *)(v29 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v28 += 2;
      v6 += 2;
    }
    while (v28 != v27);
    v32 = (char *)*v7;
    if (*v7 != v11)
    {
      v33 = (char *)v11;
      do
      {
        v34 = *((_OWORD *)v33 - 1);
        v33 -= 16;
        *((_OWORD *)v26 - 1) = v34;
        v26 -= 2;
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v33 + 1) = 0;
      }
      while (v33 != v32);
    }
    v45 = v26;
    v35 = v7[1];
    if (v35 != v11)
    {
      do
      {
        *(_OWORD *)v27 = *(_OWORD *)v11;
        v27 += 2;
        *v11 = 0;
        v11[1] = 0;
        v11 += 2;
      }
      while (v11 != v35);
      v26 = v45;
      v11 = v7[1];
    }
    v36 = (char *)*v7;
    *v7 = v26;
    v7[1] = v27;
    v37 = (char *)v7[2];
    v7[2] = (uint64_t *)v47;
    v46 = v11;
    v47 = v37;
    v44 = v36;
    v45 = (uint64_t *)v36;
    return (uint64_t **)std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)&v44);
  }
  v19 = (uint64_t)(v14 - (_QWORD)v11) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
    v22 = (char *)*(result - 1);
LABEL_35:
    v38 = (char *)&v11[2 * a5];
    v39 = &v22[-16 * a5];
    v40 = v22;
    if ((unint64_t)v39 < v14)
    {
      v40 = v22;
      do
      {
        *(_OWORD *)v40 = *(_OWORD *)v39;
        v40 += 16;
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
        v39 += 16;
      }
      while ((unint64_t)v39 < v14);
    }
    v7[1] = (uint64_t *)v40;
    if (v22 != v38)
    {
      v41 = (uint64_t)(v22 - 16);
      v42 = 16 * ((v22 - v38) >> 4);
      v43 = (uint64_t)&v8[2 * v10 - 2];
      do
      {
        result = (uint64_t **)std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v41, (__int128 *)(v43 + v42));
        v41 -= 16;
        v42 -= 16;
      }
      while (v42);
    }
    for (; v6 != v20; v11 += 2)
    {
      result = (uint64_t **)std::shared_ptr<IpAddress>::operator=[abi:ne180100](v11, v6);
      v6 += 2;
    }
    return result;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = (char *)*(result - 1);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = (char *)*(result - 1);
    do
    {
      *(_QWORD *)v22 = *v21;
      v23 = v21[1];
      *((_QWORD *)v22 + 1) = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 16;
    }
    while (v21 != a4);
  }
  v7[1] = (uint64_t *)v22;
  if ((uint64_t)(v14 - (_QWORD)v11) >= 1)
    goto LABEL_35;
  return result;
}

void SipSupportedHeader::~SipSupportedHeader(char **this)
{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipMultiStringHeader *SipSupportedHeader::clone(SipSupportedHeader *this)
{
  SipMultiStringHeader *v2;

  v2 = (SipMultiStringHeader *)operator new();
  SipMultiStringHeader::SipMultiStringHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78C9B18;
  *((_BYTE *)v2 + 56) = 0;
  return v2;
}

void sub_1BEF55FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

void RTPTransportManager::~RTPTransportManager(char **this)
{
  char *v2;
  char **v3;

  *this = (char *)&off_1E78C9B98;
  v2 = (char *)(this + 1);
  v3 = this + 2;
  std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::destroy((uint64_t)(this + 1), this[2]);
  this[1] = (char *)v3;
  this[3] = 0;
  *v3 = 0;
  std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>>>::destroy(this[5]);
  std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::destroy((uint64_t)v2, *v3);
}

{
  RTPTransportManager::~RTPTransportManager(this);
  JUMPOUT(0x1C3B87100);
}

void RTPTransportManager::setupTransport(RTPTransportManager *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, SipStack **a10)
{
  ImsPrefs *v14;
  void **UseEphemeralRTPPortsKey;
  capabilities::radio *v16;
  _BOOL4 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  int v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  void **v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  void **v44;
  void **v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  NSObject *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  RTPTransportManager *v73;
  uint64_t *v74;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  BOOL v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  int v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v98;
  uint64_t v101;
  NSObject *v102;
  std::__shared_weak_count *v103;
  NSObject *v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  void *v108;
  uint64_t *v109;
  int v110;
  char v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  dispatch_object_t object;
  std::__shared_weak_count *v118;
  char v119;
  _QWORD v120[2];
  dispatch_object_t v121;
  void *__p;
  std::__shared_weak_count *v123;
  char v124;
  NSObject *v125;
  std::__shared_weak_count *v126;
  char v127;
  _QWORD v128[2];
  void *v129[9];
  __int128 v130;
  __int128 v131;
  RTPTransportManager *v132[3];

  if (!*a10)
  {
    *(_OWORD *)(a9 + 24) = 0u;
    *(_OWORD *)(a9 + 40) = 0u;
    *(_OWORD *)(a9 + 56) = 0u;
    *(_QWORD *)a9 = &off_1E78B7238;
    *(_QWORD *)(a9 + 8) = &_bambiDomain;
    *(_DWORD *)(a9 + 16) = 0x40000000;
    return;
  }
  v14 = (ImsPrefs *)SipStack::prefs(*a10);
  UseEphemeralRTPPortsKey = (void **)ImsPrefs::getUseEphemeralRTPPortsKey(v14);
  v16 = (capabilities::radio *)ImsPrefs::prefWithKey(v14, UseEphemeralRTPPortsKey);
  if (v16)
  {
    v16 = (capabilities::radio *)(*(uint64_t (**)(capabilities::radio *))(*(_QWORD *)v16 + 40))(v16);
    v17 = (int)v16;
  }
  else
  {
    v17 = *((_BYTE *)UseEphemeralRTPPortsKey + 57) != 0;
  }
  if (capabilities::radio::mav20Plus(v16) && *((_BYTE *)*a10 + 176))
  {
    std::string::basic_string[abi:ne180100]<0>(v129, "rtp.transport");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Using higher RTP port for an emergency call to work around MAV20 baseband bug.", 78);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (v124 < 0)
      operator delete(__p);
    if (SHIBYTE(v129[2]) < 0)
      operator delete(v129[0]);
    LOWORD(v19) = -16414;
  }
  else
  {
    LOWORD(v19) = -16416;
  }
  v115 = 0;
  v116 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 32))(&v115);
  v20 = *(_QWORD *)(*(_QWORD *)a5 + 416);
  v101 = *(_QWORD *)(*(_QWORD *)a5 + 424);
  if (v20 == v101)
  {
    v91 = 0;
    goto LABEL_181;
  }
  do
  {
    if (!*(_QWORD *)(v20 + 16))
    {
      std::string::basic_string[abi:ne180100]<0>(v129, "rtp.transport");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v49 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"Skipping socket creation for session with 0 port", 48);
      *(_BYTE *)(v49 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v49 + 17) = 0;
LABEL_95:
      if (v124 < 0)
        operator delete(__p);
      if (SHIBYTE(v129[2]) < 0)
        operator delete(v129[0]);
      goto LABEL_177;
    }
    if (*(_DWORD *)(v20 + 12) != a6)
    {
      std::string::basic_string[abi:ne180100]<0>(v129, "rtp.transport");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v50 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v50 + 8), (uint64_t)"Skipping socket creation for media type ", 40);
      *(_BYTE *)(v50 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v50 + 32))(v50, &v108);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v50 + 17) = 0;
      if (v111 < 0)
        operator delete(v108);
      goto LABEL_95;
    }
    std::string::basic_string[abi:ne180100]<0>(v129, "rtp.transport");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v21 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Setting up sockets for ", 23);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v21 + 32))(v21, &v108);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)" session [sessionId=", 20);
    *(_BYTE *)(v21 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v21 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    if (v111 < 0)
      operator delete(v108);
    if (v124 < 0)
      operator delete(__p);
    if (SHIBYTE(v129[2]) < 0)
      operator delete(v129[0]);
    v106 = v115;
    v107 = v116;
    if (v116)
    {
      p_shared_owners = (unint64_t *)&v116->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    v24 = *(std::__shared_weak_count **)(a7 + 8);
    v104 = *(NSObject **)a7;
    v105 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = *(std::__shared_weak_count **)(a8 + 8);
    v102 = *(NSObject **)a8;
    v103 = v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v98 = v27;
    v132[0] = a1;
    std::allocate_shared[abi:ne180100]<ImsUdpSocket,std::allocator<ImsUdpSocket>,decltype(nullptr),DscpClass,void>(v129, *(_DWORD *)(a4 + 4));
    if (v129[0])
      v30 = (char *)v129[0] + 80;
    else
      v30 = 0;
    *(_QWORD *)&v131 = v30;
    *((void **)&v131 + 1) = v129[1];
    std::allocate_shared[abi:ne180100]<ImsUdpSocket,std::allocator<ImsUdpSocket>,decltype(nullptr),DscpClass,void>(v129, *(_DWORD *)(a4 + 4));
    v31 = 0;
    if (v129[0])
      v32 = (char *)v129[0] + 80;
    else
      v32 = 0;
    *(_QWORD *)&v130 = v32;
    *((void **)&v130 + 1) = v129[1];
    while (1)
    {
      (*(void (**)(void))(*(_QWORD *)v106 + 64))();
      memset(v129, 0, sizeof(v129));
      v33 = v131;
      v34 = sImsDispatchQueue;
      if (sImsDispatchQueue)
      {
        object = (dispatch_object_t)sImsDispatchQueue;
      }
      else
      {
        v34 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
        sImsDispatchQueue = (uint64_t)v34;
        object = v34;
        if (!v34)
          goto LABEL_43;
      }
      dispatch_retain(v34);
LABEL_43:
      std::string::basic_string[abi:ne180100]<0>(&__p, "67A03811-DB0A-594E-C2AE-8B0517EDF26F");
      v128[0] = &off_1E78B7BD8;
      v128[1] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v125, "");
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t *, dispatch_object_t *, void **, _QWORD, _QWORD *, NSObject **, uint64_t))(*(_QWORD *)v33 + 16))(v129, v33, &v106, &object, &__p, 0, v128, &v125, a3);
      if (v127 < 0)
        operator delete(v125);
      ims::CFType::~CFType((ims::CFType *)v128);
      if (v124 < 0)
        operator delete(__p);
      if (object)
        dispatch_release(object);
      if (!(*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)v129[1] + 24))(v129[1], LODWORD(v129[2])))
        break;
      v35 = v129;
      do
      {
        v36 = v35;
        v35 = (void **)v35[4];
      }
      while (v35);
      if (*((_DWORD *)v36 + 4) == 48 && v36[1] == &_posixDomain)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.transport");
        std::string::basic_string[abi:ne180100]<0>(&v125, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v38 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v125);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"RTP port ", 9);
        *(_BYTE *)(v38 + 17) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v106 + 56))(v106);
        std::ostream::operator<<();
        *(_BYTE *)(v38 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)" already in use", 15);
        *(_BYTE *)(v38 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.transport");
        std::string::basic_string[abi:ne180100]<0>(&v125, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v37 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v125);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"Could not bind to RTP port at ", 30);
        *(_BYTE *)(v37 + 17) = 0;
        v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 40))(v106, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)" error: ", 8);
        *(_BYTE *)(v38 + 17) = 0;
        (*((void (**)(void **, uint64_t))v129[0] + 2))(v129, v38);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
LABEL_82:
      *(_BYTE *)(v38 + 17) = 0;
      if (v127 < 0)
        operator delete(v125);
      if (v124 < 0)
        operator delete(__p);
LABEL_86:
      ImsResult::~ImsResult((ImsResult *)v129);
      ++v31;
      LOWORD(v19) = v19 + 2;
      if (v31 == 100)
      {
        std::string::basic_string[abi:ne180100]<0>(v46, "rtp.transport");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v47 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"No more ports available", 23);
        *(_BYTE *)(v47 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v47 + 17) = 0;
        if (v124 < 0)
          operator delete(__p);
        if (SHIBYTE(v129[2]) < 0)
          operator delete(v129[0]);
        RTPTransportManager::removeTransport(v132[0]);
        v48 = 0x40000000;
        goto LABEL_145;
      }
    }
    if (v17)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v33 + 64))(&__p, v33);
      v19 = (*(uint64_t (**)(void *))(*(_QWORD *)__p + 56))(__p);
      v39 = v123;
      if (v123)
      {
        v40 = (unint64_t *)&v123->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v19 < 0xC000 || (v19 & 1) != 0)
        goto LABEL_86;
    }
    v42 = v130;
    if (!(_QWORD)v130)
      goto LABEL_99;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v106 + 64))(v106, (unsigned __int16)(v19 + 1));
    v43 = sImsDispatchQueue;
    if (sImsDispatchQueue)
    {
      v121 = (dispatch_object_t)sImsDispatchQueue;
      goto LABEL_67;
    }
    v43 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v43;
    v121 = v43;
    if (v43)
LABEL_67:
      dispatch_retain(v43);
    std::string::basic_string[abi:ne180100]<0>(&v125, "67A03811-DB0A-594E-C2AE-8B0517EDF26F");
    v120[0] = &off_1E78B7BD8;
    v120[1] = 0;
    std::string::basic_string[abi:ne180100]<0>(&object, "");
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t *, dispatch_object_t *, NSObject **, _QWORD, _QWORD *, dispatch_object_t *, uint64_t))(*(_QWORD *)v42 + 16))(&__p, v42, &v106, &v121, &v125, 0, v120, &object, a3);
    ImsResult::operator=((uint64_t)v129, (uint64_t)&__p);
    ImsResult::~ImsResult((ImsResult *)&__p);
    if (v119 < 0)
      operator delete(object);
    ims::CFType::~CFType((ims::CFType *)v120);
    if (v127 < 0)
      operator delete(v125);
    if (v121)
      dispatch_release(v121);
    if (((*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)v129[1] + 24))(v129[1], LODWORD(v129[2])) & 1) != 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v131 + 40))(v131);
      v44 = v129;
      do
      {
        v45 = v44;
        v44 = (void **)v44[4];
      }
      while (v44);
      if (*((_DWORD *)v45 + 4) == 48 && v45[1] == &_posixDomain)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.transport");
        std::string::basic_string[abi:ne180100]<0>(&v125, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v38 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v125);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"RTCP port ", 10);
        *(_BYTE *)(v38 + 17) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v106 + 56))(v106);
        std::ostream::operator<<();
        *(_BYTE *)(v38 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)" already in use", 15);
        *(_BYTE *)(v38 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.transport");
        std::string::basic_string[abi:ne180100]<0>(&v125, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v38 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v125);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"Could not bind to RTCP port at ", 31);
        *(_BYTE *)(v38 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 40))(v106, v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)" error: ", 8);
        *(_BYTE *)(v38 + 17) = 0;
        (*((void (**)(void **, uint64_t))v129[0] + 2))(v129, v38);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      goto LABEL_82;
    }
LABEL_99:
    ImsResult::~ImsResult((ImsResult *)v129);
    if (v102 && *(_DWORD *)(v20 + 12) == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v51, "rtp.transport");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v52 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"Save port number (", 18);
      *(_BYTE *)(v52 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v52 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"), with audio delegate.", 23);
      *(_BYTE *)(v52 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v52 + 17) = 0;
      if (v124 < 0)
        operator delete(__p);
      if (SHIBYTE(v129[2]) < 0)
        operator delete(v129[0]);
      (*((void (**)(NSObject *, _QWORD))v102->isa + 4))(v102, (unsigned __int16)v19);
      v53 = v131;
      v125 = v102;
      v126 = v103;
      if (v103)
      {
        v54 = (unint64_t *)&v103->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      (*(void (**)(uint64_t, NSObject **))(*(_QWORD *)v53 + 136))(v53, &v125);
      v56 = v126;
      if (v126)
      {
        v57 = (unint64_t *)&v126->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
LABEL_125:
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v51, "rtp.transport");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v59 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v59 + 8), (uint64_t)"Setting RTPManager as socket delegate.", 38);
      *(_BYTE *)(v59 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v59 + 64))(v59, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v59 + 17) = 0;
      if (v124 < 0)
        operator delete(__p);
      if (SHIBYTE(v129[2]) < 0)
        operator delete(v129[0]);
      v60 = v131;
      if (v104)
        v61 = v104 + 5;
      else
        v61 = 0;
      v125 = v61;
      v126 = v105;
      if (v105)
      {
        v62 = (unint64_t *)&v105->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      (*(void (**)(uint64_t, NSObject **))(*(_QWORD *)v60 + 136))(v60, &v125);
      v56 = v126;
      if (v126)
      {
        v64 = (unint64_t *)&v126->__shared_owners_;
        do
          v58 = __ldaxr(v64);
        while (__stlxr(v58 - 1, v64));
        goto LABEL_125;
      }
    }
    v65 = v130;
    if ((_QWORD)v130)
    {
      if (v104)
        v66 = v104 + 5;
      else
        v66 = 0;
      object = v66;
      v118 = v105;
      if (v105)
      {
        v67 = (unint64_t *)&v105->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      (*(void (**)(uint64_t, dispatch_object_t *))(*(_QWORD *)v65 + 136))(v65, &object);
      v69 = v118;
      if (v118)
      {
        v70 = (unint64_t *)&v118->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v129, "rtp.transport");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v72 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v72 + 8), (uint64_t)"Using RTP port ", 15);
    *(_BYTE *)(v72 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v72 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v72 + 17) = 0;
    if (v124 < 0)
      operator delete(__p);
    if (SHIBYTE(v129[2]) < 0)
      operator delete(v129[0]);
    SDPMedia::setPort((SDPMedia *)v20, (unsigned __int16)v19);
    v73 = v132[0];
    RTPManager::sendPortUpdate(v104, (uint64_t)v132[0], (unsigned __int16)v19, *(unsigned int *)(v20 + 12));
    v74 = std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((unint64_t)v73, (uint64_t *)v132);
    std::vector<std::shared_ptr<ImsUdpSocketInterface>>::push_back[abi:ne180100]((char **)v74 + 5, &v131);
    v48 = v130;
    if ((_QWORD)v130)
    {
      v75 = std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((unint64_t)v73, (uint64_t *)v132);
      std::vector<std::shared_ptr<ImsUdpSocketInterface>>::push_back[abi:ne180100]((char **)v75 + 5, &v130);
      v48 = 0;
    }
LABEL_145:
    v112 = 0u;
    v113 = 0u;
    v114 = 0u;
    v108 = &off_1E78B7238;
    v109 = &_bambiDomain;
    v110 = v48;
    v76 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
    if (*((_QWORD *)&v130 + 1))
    {
      v77 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
    if (*((_QWORD *)&v131 + 1))
    {
      v80 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    memset(&v129[3], 0, 48);
    v129[0] = &off_1E78B7238;
    v129[1] = &_bambiDomain;
    LODWORD(v129[2]) = 0;
    v83 = v109 != &_bambiDomain || v110 != 0;
    ImsResult::~ImsResult((ImsResult *)v129);
    ImsResult::~ImsResult((ImsResult *)&v108);
    if (v98)
    {
      v84 = (unint64_t *)&v98->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    if (v105)
    {
      v86 = (unint64_t *)&v105->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v88 = v107;
    if (v107)
    {
      v89 = (unint64_t *)&v107->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    if (v83)
    {
      v91 = 0x40000000;
      goto LABEL_181;
    }
LABEL_177:
    v20 += 200;
  }
  while (v20 != v101);
  v91 = 0;
LABEL_181:
  *(_OWORD *)(a9 + 24) = 0u;
  *(_OWORD *)(a9 + 40) = 0u;
  *(_OWORD *)(a9 + 56) = 0u;
  *(_QWORD *)a9 = &off_1E78B7238;
  *(_QWORD *)(a9 + 8) = &_bambiDomain;
  *(_DWORD *)(a9 + 16) = v91;
  v92 = v116;
  if (v116)
  {
    v93 = (unint64_t *)&v116->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
}

void sub_1BEF57284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,dispatch_object_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,dispatch_object_t object,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 185) < 0)
    operator delete(*(void **)(v54 - 208));
  _Unwind_Resume(exception_object);
}

double RTPTransportManager::setupTransport@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  ImsPrefs *v14;
  void **UseEphemeralRTPPortsKey;
  capabilities::radio *v16;
  uint64_t v17;
  unsigned __int16 v18;
  unsigned int *v19;
  char *v20;
  uint64_t v21;
  SipStack *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  IpAddress *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  NSObject *secure_udp;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  int v38;
  NSObject *host_with_numeric_port;
  uint64_t v40;
  char *v41;
  void **v42;
  size_t v43;
  _QWORD *v44;
  ImsPrefs *v45;
  void **UseRTPDetectionAutoStartKey;
  void *v47;
  int v48;
  uint32_t v49;
  ImsUdpNw *v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  void **v55;
  size_t v56;
  _QWORD *v57;
  NSObject *v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  int v89;
  double result;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  ImsUdpNw *v101;
  std::__shared_weak_count *v102;
  unsigned int *v105;
  NSObject *parameters;
  unsigned int *v107;
  IpAddress *v108;
  std::__shared_weak_count *v109;
  SipStack *v110;
  std::__shared_weak_count *v111;
  void (**v112)(ImsResult *__hidden);
  uint64_t *v113;
  int v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  IpAddress *v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  int v121;
  char v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  void *v126[2];
  char v127;
  void *__p[10];
  void *v129[10];
  ImsUdpNw *v130;
  std::__shared_weak_count *v131;
  ImsUdpNw *v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  _BYTE v135[17];

  if (*(_QWORD *)a9)
  {
    v14 = (ImsPrefs *)SipStack::prefs(*(SipStack **)a9);
    UseEphemeralRTPPortsKey = (void **)ImsPrefs::getUseEphemeralRTPPortsKey(v14);
    v16 = (capabilities::radio *)ImsPrefs::prefWithKey(v14, UseEphemeralRTPPortsKey);
    if (v16)
      v16 = (capabilities::radio *)(*(uint64_t (**)(capabilities::radio *))(*(_QWORD *)v16 + 40))(v16);
    v97 = a3;
    v94 = a7;
    v95 = a8;
    if (capabilities::radio::mav20Plus(v16) && *(_BYTE *)(*(_QWORD *)a9 + 176))
    {
      std::string::basic_string[abi:ne180100]<0>(v129, "rtp.transport");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v17 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Using higher RTP port for an emergency call to work around MAV20 baseband bug.", 78);
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v129[2]) < 0)
        operator delete(v129[0]);
      v18 = -16414;
    }
    else
    {
      v18 = -16416;
    }
    v118 = 0;
    v119 = 0;
    (*(void (**)(IpAddress **__return_ptr))(**(_QWORD **)a2 + 32))(&v118);
    v105 = *(unsigned int **)(*(_QWORD *)a4 + 424);
    if (*(unsigned int **)(*(_QWORD *)a4 + 416) != v105)
    {
      v19 = *(unsigned int **)(*(_QWORD *)a4 + 416);
      v99 = (void *)*MEMORY[0x1E0CCED20];
      v98 = (void *)*MEMORY[0x1E0CCED18];
      v20 = "rtp.transport";
      while (1)
      {
        v107 = v19;
        if (!*((_QWORD *)v19 + 2))
          break;
        if (v19[3] != a5)
        {
          std::string::basic_string[abi:ne180100]<0>(v129, v20);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v66 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)"Skipping NW path creation for media type ", 41);
          *(_BYTE *)(v66 + 17) = 0;
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v66 + 32))(v66, v120);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v66 + 17) = 0;
          if (v122 < 0)
            operator delete(v120[0]);
          goto LABEL_100;
        }
        std::string::basic_string[abi:ne180100]<0>(v129, v20);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v21 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Setting up NW Paths for ", 24);
        *(_BYTE *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v21 + 32))(v21, v120);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)" session [sessionId=", 20);
        *(_BYTE *)(v21 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v21 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v21 + 17) = 0;
        if (v122 < 0)
          operator delete(v120[0]);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v129[2]) < 0)
          operator delete(v129[0]);
        v22 = *(SipStack **)a9;
        v23 = *(std::__shared_weak_count **)(a9 + 8);
        v110 = *(SipStack **)a9;
        v111 = v23;
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
        }
        v26 = v118;
        v108 = v118;
        v109 = v119;
        if (v119)
        {
          v27 = (unint64_t *)&v119->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = *(std::__shared_weak_count **)(a6 + 8);
        v96 = *(_QWORD **)a6;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v102 = v29;
        v133 = 0;
        v134 = a1;
        v132 = 0;
        std::allocate_shared[abi:ne180100]<ImsUdpNw,std::allocator<ImsUdpNw>,std::shared_ptr<SipStack> const&,void>(&v132, (uint64_t)v22, v23);
        v130 = 0;
        v131 = 0;
        std::allocate_shared[abi:ne180100]<ImsUdpNw,std::allocator<ImsUdpNw>,std::shared_ptr<SipStack> const&,void>(&v130, (uint64_t)v22, v23);
        secure_udp = nw_parameters_create_secure_udp(v99, v98);
        parameters = nw_parameters_create_secure_udp(v99, v98);
        if (secure_udp)
        {
          if (parameters)
          {
            std::string::basic_string[abi:ne180100]<0>(v129, v20);
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v33 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"findPort address=", 17);
            *(_BYTE *)(v33 + 17) = 0;
            IpAddress::asString(v26, 0, v120);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v33 + 32))(v33, v120);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" port_start=", 12);
            *(_BYTE *)(v33 + 17) = 0;
            std::ostream::operator<<();
            *(_BYTE *)(v33 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v33 + 17) = 0;
            if (v122 < 0)
              operator delete(v120[0]);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v129[2]) < 0)
              operator delete(v129[0]);
            v34 = *(unsigned __int8 *)(v97 + 23);
            if ((v34 & 0x80u) != 0)
              v34 = *(_QWORD *)(v97 + 8);
            if (v34)
            {
              std::string::basic_string[abi:ne180100]<0>(v129, v20);
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v35 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"nw_parameters_require_interface interface=", 42);
              *(_BYTE *)(v35 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 32))(v35, v97);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v35 + 17) = 0;
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v129[2]) < 0)
                operator delete(v129[0]);
              v36 = nw_interface_create_with_name();
              v37 = nw_interface_create_with_name();
              nw_parameters_require_interface(secure_udp, v36);
              nw_parameters_require_interface(parameters, v37);
              nw_release(v36);
              nw_release(v37);
            }
            v38 = 100;
            while (1)
            {
              IpAddress::asString(v26, 0, v129);
              host_with_numeric_port = nw_endpoint_create_host_with_numeric_port();
              if (SHIBYTE(v129[2]) < 0)
                operator delete(v129[0]);
              nw_parameters_set_local_endpoint(secure_udp, host_with_numeric_port);
              std::string::basic_string[abi:ne180100]<0>(v129, v20);
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v40 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"Init RTP listener ", 18);
              v41 = v20;
              *(_BYTE *)(v40 + 17) = 0;
              v26 = v108;
              IpAddress::asString(v108, 0, v120);
              if (v122 >= 0)
                v42 = v120;
              else
                v42 = (void **)v120[0];
              v43 = strlen((const char *)v42);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)v42, v43);
              *(_BYTE *)(v40 + 17) = 0;
              v44 = *(_QWORD **)(v40 + 8);
              LOBYTE(v126[0]) = 58;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v126, 1);
              *(_BYTE *)(v40 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v40 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v40 + 17) = 0;
              if (v122 < 0)
                operator delete(v120[0]);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v129[2]) < 0)
                operator delete(v129[0]);
              v45 = (ImsPrefs *)SipStack::prefs(v110);
              UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v45);
              v47 = ImsPrefs::prefWithKey(v45, UseRTPDetectionAutoStartKey);
              v48 = v47
                  ? (*(uint64_t (**)(void *))(*(_QWORD *)v47 + 40))(v47)
                  : *((_BYTE *)UseRTPDetectionAutoStartKey + 57) != 0;
              v49 = v107[3] == 2 ? v48 : 0;
              memset(v129, 0, 72);
              v50 = v132;
              ImsUdpNw::initializeNwListener(v132, (nw_parameters *)secure_udp, host_with_numeric_port, v49, (uint64_t)v129);
              nw_release(host_with_numeric_port);
              memset(&__p[3], 0, 48);
              __p[0] = &off_1E78B7238;
              __p[1] = &_bambiDomain;
              LODWORD(__p[2]) = 0;
              if (v129[1] != &_bambiDomain)
                break;
              v51 = (int)v129[2];
              ImsResult::~ImsResult((ImsResult *)__p);
              if (v51)
                goto LABEL_68;
              std::string::basic_string[abi:ne180100]<0>(__p, v20);
              std::string::basic_string[abi:ne180100]<0>(v120, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v54 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v120);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"Init RTCP listener ", 19);
              *(_BYTE *)(v54 + 17) = 0;
              IpAddress::asString(v108, 0, v126);
              if (v127 >= 0)
                v55 = v126;
              else
                v55 = (void **)v126[0];
              v56 = strlen((const char *)v55);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)v55, v56);
              *(_BYTE *)(v54 + 17) = 0;
              v57 = *(_QWORD **)(v54 + 8);
              v135[0] = 58;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v135, 1);
              *(_BYTE *)(v54 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v54 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v54 + 17) = 0;
              if (v127 < 0)
                operator delete(v126[0]);
              if (v122 < 0)
                operator delete(v120[0]);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              IpAddress::asString(v108, 0, __p);
              v58 = nw_endpoint_create_host_with_numeric_port();
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              nw_parameters_set_local_endpoint(parameters, v58);
              memset(__p, 0, 72);
              v101 = v130;
              ImsUdpNw::initializeNwListener(v130, (nw_parameters *)parameters, v58, 0, (uint64_t)__p);
              nw_release(v58);
              v123 = 0u;
              v124 = 0u;
              v125 = 0u;
              v120[0] = &off_1E78B7238;
              v120[1] = &_bambiDomain;
              v121 = 0;
              if (__p[1] == &_bambiDomain)
              {
                v59 = (int)__p[2];
                ImsResult::~ImsResult((ImsResult *)v120);
                if (!v59)
                {
                  ImsResult::~ImsResult((ImsResult *)__p);
                  ImsResult::~ImsResult((ImsResult *)v129);
                  if (v94 && v107[3] == 2)
                  {
                    v20 = v41;
                    std::string::basic_string[abi:ne180100]<0>(v82, v41);
                    std::string::basic_string[abi:ne180100]<0>(__p, "");
                    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                    v83 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)__p);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v83 + 8), (uint64_t)"Save port number (", 18);
                    *(_BYTE *)(v83 + 17) = 0;
                    std::ostream::operator<<();
                    *(_BYTE *)(v83 + 17) = 0;
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v83 + 8), (uint64_t)"), with audio delegate.", 23);
                    *(_BYTE *)(v83 + 17) = 0;
                    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(_BYTE *)(v83 + 17) = 0;
                    if (SHIBYTE(__p[2]) < 0)
                      operator delete(__p[0]);
                    if (SHIBYTE(v129[2]) < 0)
                      operator delete(v129[0]);
                    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 24))(v94, v18);
                    (*(void (**)(ImsUdpNw *, uint64_t))(*(_QWORD *)v50 + 16))(v50, v94);
                  }
                  else
                  {
                    v20 = v41;
                    std::string::basic_string[abi:ne180100]<0>(v82, v41);
                    std::string::basic_string[abi:ne180100]<0>(__p, "");
                    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                    v84 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)__p);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v84 + 8), (uint64_t)"Setting RTPManager as socket delegate.", 38);
                    *(_BYTE *)(v84 + 17) = 0;
                    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(_BYTE *)(v84 + 17) = 0;
                    if (SHIBYTE(__p[2]) < 0)
                      operator delete(__p[0]);
                    if (SHIBYTE(v129[2]) < 0)
                      operator delete(v129[0]);
                    if (v96)
                      v85 = v96 + 7;
                    else
                      v85 = 0;
                    (*(void (**)(ImsUdpNw *, _QWORD *))(*(_QWORD *)v50 + 16))(v50, v85);
                  }
                  std::string::basic_string[abi:ne180100]<0>(v129, v20);
                  std::string::basic_string[abi:ne180100]<0>(__p, "");
                  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                  v86 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)__p);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v86 + 8), (uint64_t)"Using RTP port ", 15);
                  *(_BYTE *)(v86 + 17) = 0;
                  std::ostream::operator<<();
                  *(_BYTE *)(v86 + 17) = 0;
                  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v86 + 64))(v86, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(_BYTE *)(v86 + 17) = 0;
                  if (SHIBYTE(__p[2]) < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v129[2]) < 0)
                    operator delete(v129[0]);
                  SDPMedia::setPort((SDPMedia *)v107, v18);
                  RTPManager::sendPortUpdate(v96, a1, v18, v107[3]);
                  v87 = std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, &v134);
                  std::vector<std::shared_ptr<ImsUdpNw>>::push_back[abi:ne180100]((uint64_t)(v87 + 5), (uint64_t)v50, (uint64_t)v133);
                  v88 = std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, &v134);
                  std::vector<std::shared_ptr<ImsUdpNw>>::push_back[abi:ne180100]((uint64_t)(v88 + 5), (uint64_t)v101, (uint64_t)v131);
                  nw_release(secure_udp);
                  nw_release(parameters);
                  v64 = 0;
                  goto LABEL_111;
                }
              }
              else
              {
                ImsResult::~ImsResult((ImsResult *)v120);
              }
              v20 = v41;
              std::string::basic_string[abi:ne180100]<0>(v120, v41);
              std::string::basic_string[abi:ne180100]<0>(v126, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v60 = ImsLogger::error(ims::_logger, (uint64_t)v120, (uint64_t)v126);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"Could not create RTCP Listener at ", 34);
              *(_BYTE *)(v60 + 17) = 0;
              (*(void (**)(IpAddress *, uint64_t))(*(_QWORD *)v108 + 40))(v108, v60);
              v61 = *(_QWORD **)(v60 + 8);
              v135[0] = 58;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v135, 1);
              *(_BYTE *)(v60 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v60 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v60 + 17) = 0;
              if (v127 < 0)
                operator delete(v126[0]);
              if (v122 < 0)
                operator delete(v120[0]);
              ImsResult::~ImsResult((ImsResult *)__p);
LABEL_91:
              ImsResult::~ImsResult((ImsResult *)v129);
              v18 += 2;
              if (!--v38)
              {
                std::string::basic_string[abi:ne180100]<0>(v62, v20);
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                v63 = ImsLogger::error(ims::_logger, (uint64_t)v129, (uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v63 + 8), (uint64_t)"No more ports available", 23);
                *(_BYTE *)(v63 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v63 + 17) = 0;
                if (SHIBYTE(__p[2]) < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v129[2]) < 0)
                  operator delete(v129[0]);
                nw_release(secure_udp);
                nw_release(parameters);
                v64 = 0x40000000;
                goto LABEL_111;
              }
            }
            ImsResult::~ImsResult((ImsResult *)__p);
LABEL_68:
            std::string::basic_string[abi:ne180100]<0>(__p, v20);
            std::string::basic_string[abi:ne180100]<0>(v120, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v52 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v120);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"Could not create RTP Listener at ", 33);
            *(_BYTE *)(v52 + 17) = 0;
            (*(void (**)(IpAddress *, uint64_t))(*(_QWORD *)v108 + 40))(v108, v52);
            v53 = *(_QWORD **)(v52 + 8);
            LOBYTE(v126[0]) = 58;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v126, 1);
            *(_BYTE *)(v52 + 17) = 0;
            std::ostream::operator<<();
            *(_BYTE *)(v52 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v52 + 17) = 0;
            if (v122 < 0)
              operator delete(v120[0]);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            goto LABEL_91;
          }
          std::string::basic_string[abi:ne180100]<0>(v129, v20);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v67 = ImsLogger::error(ims::_logger, (uint64_t)v129, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v67 + 8), (uint64_t)"Failed to create rtcp nw_parameters", 35);
          *(_BYTE *)(v67 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v129, v20);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v67 = ImsLogger::error(ims::_logger, (uint64_t)v129, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v67 + 8), (uint64_t)"Failed to create rtp nw_parameters", 34);
          *(_BYTE *)(v67 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        *(_BYTE *)(v67 + 17) = 0;
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v129[2]) < 0)
          operator delete(v129[0]);
        v64 = 1073741825;
LABEL_111:
        v115 = 0u;
        v116 = 0u;
        v117 = 0u;
        v112 = &off_1E78B7238;
        v113 = &_bambiDomain;
        v114 = v64;
        v68 = v131;
        if (v131)
        {
          v69 = (unint64_t *)&v131->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        v71 = v133;
        if (v133)
        {
          v72 = (unint64_t *)&v133->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        memset(&v129[3], 0, 48);
        v129[0] = &off_1E78B7238;
        v129[1] = &_bambiDomain;
        LODWORD(v129[2]) = 0;
        v75 = v113 != &_bambiDomain || v114 != 0;
        ImsResult::~ImsResult((ImsResult *)v129);
        ImsResult::~ImsResult((ImsResult *)&v112);
        if (v102)
        {
          v76 = (unint64_t *)&v102->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
        }
        if (v109)
        {
          v78 = (unint64_t *)&v109->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
        }
        if (v111)
        {
          v80 = (unint64_t *)&v111->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        if (v75)
        {
          v89 = 0x40000000;
          goto LABEL_166;
        }
LABEL_143:
        v19 = v107 + 50;
        if (v107 + 50 == v105)
          goto LABEL_165;
      }
      std::string::basic_string[abi:ne180100]<0>(v129, v20);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v65 = ImsLogger::debug(ims::_logger, (uint64_t)v129, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v65 + 8), (uint64_t)"Skipping NW path creation for session with 0 port", 49);
      *(_BYTE *)(v65 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v65 + 17) = 0;
LABEL_100:
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v129[2]) < 0)
        operator delete(v129[0]);
      goto LABEL_143;
    }
LABEL_165:
    v89 = 0;
LABEL_166:
    result = 0.0;
    *(_OWORD *)(v95 + 24) = 0u;
    *(_OWORD *)(v95 + 40) = 0u;
    *(_OWORD *)(v95 + 56) = 0u;
    *(_QWORD *)v95 = &off_1E78B7238;
    *(_QWORD *)(v95 + 8) = &_bambiDomain;
    *(_DWORD *)(v95 + 16) = v89;
    v91 = v119;
    if (v119)
    {
      v92 = (unint64_t *)&v119->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a8 + 24) = 0u;
    *(_OWORD *)(a8 + 40) = 0u;
    *(_OWORD *)(a8 + 56) = 0u;
    *(_QWORD *)a8 = &off_1E78B7238;
    *(_QWORD *)(a8 + 8) = &_bambiDomain;
    *(_DWORD *)(a8 + 16) = 0x40000000;
  }
  return result;
}

void sub_1BEF589B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  if (*(char *)(v43 - 201) < 0)
    operator delete(*(void **)(v43 - 224));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v43 - 144);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v43 - 128);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void RTPTransportManager::removeTransport(RTPTransportManager *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  BOOL v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *__p[2];
  char v45;
  void *v46[2];
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;

  v2 = (uint64_t *)qword_1ED70CB30;
  if (qword_1ED70CB30)
  {
    v3 = &qword_1ED70CB30;
    v4 = qword_1ED70CB30;
    do
    {
      v5 = *(_QWORD *)(v4 + 32);
      v6 = v5 >= (unint64_t)this;
      if (v5 >= (unint64_t)this)
        v7 = (uint64_t *)v4;
      else
        v7 = (uint64_t *)(v4 + 8);
      if (v6)
        v3 = (uint64_t *)v4;
      v4 = *v7;
    }
    while (*v7);
    if (v3 != &qword_1ED70CB30 && v3[4] <= (unint64_t)this)
    {
      v8 = (uint64_t *)v3[5];
      v9 = (uint64_t *)v3[6];
      if (v8 != v9)
      {
        do
        {
          v11 = *v8;
          v10 = (std::__shared_weak_count *)v8[1];
          v48 = *v8;
          v49 = v10;
          if (v10)
          {
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v13 = __ldxr(p_shared_owners);
            while (__stxr(v13 + 1, p_shared_owners));
          }
          std::string::basic_string[abi:ne180100]<0>(v46, "rtp.transport");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v14 = ImsLogger::debug(ims::_logger, (uint64_t)v46, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Deleting socket for port ", 25);
          *(_BYTE *)(v14 + 17) = 0;
          (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 64))(&v42, v11);
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 56))(v42);
          std::ostream::operator<<();
          *(_BYTE *)(v14 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v14 + 17) = 0;
          v15 = v43;
          if (v43)
          {
            v16 = (unint64_t *)&v43->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          if (v45 < 0)
            operator delete(__p[0]);
          if (v47 < 0)
            operator delete(v46[0]);
          v18 = v49;
          v48 = 0;
          v49 = 0;
          if (v18)
          {
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
            v21 = v49;
            if (v49)
            {
              v22 = (unint64_t *)&v49->__shared_owners_;
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
          }
          v8 += 2;
        }
        while (v8 != v9);
        v24 = (uint64_t *)v3[5];
        v8 = (uint64_t *)v3[6];
        if (v8 != v24)
        {
          do
          {
            v8 -= 2;
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v8);
          }
          while (v8 != v24);
          v8 = v24;
        }
      }
      v3[6] = (uint64_t)v8;
      v2 = (uint64_t *)qword_1ED70CB30;
    }
    if (v2)
    {
      v25 = &qword_1ED70CB30;
      v26 = v2;
      do
      {
        v27 = v26[4];
        v28 = v27 >= (unint64_t)this;
        if (v27 >= (unint64_t)this)
          v29 = (uint64_t **)v26;
        else
          v29 = (uint64_t **)(v26 + 1);
        if (v28)
          v25 = v26;
        v26 = *v29;
      }
      while (*v29);
      if (v25 != &qword_1ED70CB30 && v25[4] <= (unint64_t)this)
      {
        v30 = (uint64_t *)v25[1];
        if (v30)
        {
          do
          {
            v31 = v30;
            v30 = (uint64_t *)*v30;
          }
          while (v30);
        }
        else
        {
          v32 = v25;
          do
          {
            v31 = (uint64_t *)v32[2];
            v33 = *v31 == (_QWORD)v32;
            v32 = v31;
          }
          while (!v33);
        }
        if ((uint64_t *)qword_1ED70CB28 == v25)
          qword_1ED70CB28 = (uint64_t)v31;
        --qword_1ED70CB38;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v25);
        v46[0] = v25 + 5;
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
        operator delete(v25);
      }
    }
  }
  if (qword_1ED70CB48)
  {
    v34 = &qword_1ED70CB48;
    v35 = qword_1ED70CB48;
    do
    {
      v36 = *(_QWORD *)(v35 + 32);
      v37 = v36 >= (unint64_t)this;
      if (v36 >= (unint64_t)this)
        v38 = (uint64_t *)v35;
      else
        v38 = (uint64_t *)(v35 + 8);
      if (v37)
        v34 = (uint64_t *)v35;
      v35 = *v38;
    }
    while (*v38);
    if (v34 != &qword_1ED70CB48 && v34[4] <= (unint64_t)this)
    {
      v39 = (uint64_t *)v34[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (uint64_t *)*v39;
        }
        while (v39);
      }
      else
      {
        v41 = v34;
        do
        {
          v40 = (uint64_t *)v41[2];
          v33 = *v40 == (_QWORD)v41;
          v41 = v40;
        }
        while (!v33);
      }
      if ((uint64_t *)qword_1ED70CB40 == v34)
        qword_1ED70CB40 = (uint64_t)v40;
      --qword_1ED70CB50;
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ED70CB48, v34);
      v46[0] = v34 + 5;
      std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
      operator delete(v34);
    }
  }
}

void sub_1BEF59044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<ImsUdpSocketInterface>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *a1;
    v23 = a1[1];
    if (v23 == *a1)
    {
      v11 = v18 + 16;
      *a1 = v18;
      a1[1] = v18 + 16;
      a1[2] = &v16[16 * v17];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v23 - 1);
        v23 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
      }
      while (v23 != v22);
      v23 = *a1;
      v26 = (uint64_t)a1[1];
      v11 = v18 + 16;
      *a1 = v24;
      a1[1] = v18 + 16;
      a1[2] = &v16[16 * v17];
      while ((char *)v26 != v23)
      {
        v26 -= 16;
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v26);
      }
    }
    if (v23)
      operator delete(v23);
  }
  else
  {
    v8 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v7 = *(_QWORD *)a2;
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
}

void std::vector<std::shared_ptr<ImsUdpNw>>::push_back[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;

  v7 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    v11 = *(_QWORD **)a1;
    v12 = ((uint64_t)v7 - *(_QWORD *)a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__throw_length_error[abi:ne180100]();
    v14 = v6 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(16 * v15);
    v17 = &v16[16 * v12];
    *(_QWORD *)v17 = a2;
    *((_QWORD *)v17 + 1) = a3;
    if (a3)
    {
      v18 = (unint64_t *)(a3 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v11 = *(_QWORD **)a1;
      v7 = *(_QWORD **)(a1 + 8);
    }
    if (v7 == v11)
    {
      v10 = v17 + 16;
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v17 + 16;
      *(_QWORD *)(a1 + 16) = &v16[16 * v15];
    }
    else
    {
      v20 = &v16[16 * v12];
      do
      {
        v21 = *((_OWORD *)v7 - 1);
        v7 -= 2;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *v7 = 0;
        v7[1] = 0;
      }
      while (v7 != v11);
      v11 = *(_QWORD **)a1;
      v22 = *(_QWORD *)(a1 + 8);
      v10 = v17 + 16;
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v17 + 16;
      *(_QWORD *)(a1 + 16) = &v16[16 * v15];
      while ((_QWORD *)v22 != v11)
      {
        v22 -= 16;
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22);
      }
    }
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v7 = a2;
    v7[1] = a3;
    if (a3)
    {
      v8 = (unint64_t *)(a3 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = v7 + 2;
  }
  *(_QWORD *)(a1 + 8) = v10;
}

void RTPTransportManager::getTransport(RTPTransportManager *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = qword_1ED70CB30;
  if (qword_1ED70CB30)
  {
    v6 = &qword_1ED70CB30;
    do
    {
      v7 = *(_QWORD *)(v4 + 32);
      v8 = v7 >= (unint64_t)this;
      if (v7 >= (unint64_t)this)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (v8)
        v6 = (uint64_t *)v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != &qword_1ED70CB30 && v6[4] <= (unint64_t)this)
    {
      v10 = (uint64_t *)v6[5];
      v11 = (uint64_t *)v6[6];
      while (v10 != v11)
      {
        v12 = *v10;
        *a3 = *v10;
        v13 = v10[1];
        a3[1] = v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v12 = *a3;
        }
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v12 + 64))(&v20);
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 56))(v20);
        v17 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (v16 == a2)
          return;
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a3);
        v10 += 2;
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
}

void sub_1BEF59454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

char *RTPTransportManager::getTransports@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  BOOL v5;
  uint64_t *v6;

  v2 = qword_1ED70CB30;
  if (!qword_1ED70CB30)
    goto LABEL_12;
  v3 = &qword_1ED70CB30;
  do
  {
    v4 = *(_QWORD *)(v2 + 32);
    v5 = v4 >= (unint64_t)this;
    if (v4 >= (unint64_t)this)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (v5)
      v3 = (uint64_t *)v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 != &qword_1ED70CB30 && v3[4] <= (unint64_t)this)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__init_with_size[abi:ne180100]<std::shared_ptr<ImsUdpSocketInterface>*,std::shared_ptr<ImsUdpSocketInterface>*>((char *)a2, (_QWORD *)v3[5], (_QWORD *)v3[6], (v3[6] - v3[5]) >> 4);
  }
  else
  {
LABEL_12:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return this;
}

unint64_t RTPTransportManager::getNwTransport@<X0>(unint64_t this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = qword_1ED70CB48;
  if (qword_1ED70CB48)
  {
    v6 = &qword_1ED70CB48;
    do
    {
      v7 = *(_QWORD *)(v4 + 32);
      v8 = v7 >= this;
      if (v7 >= this)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (v8)
        v6 = (uint64_t *)v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != &qword_1ED70CB48 && v6[4] <= this)
    {
      v10 = (uint64_t *)v6[5];
      v11 = (uint64_t *)v6[6];
      while (v10 != v11)
      {
        v12 = *v10;
        v13 = v10[1];
        *a3 = *v10;
        a3[1] = v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v12 = *a3;
        }
        this = nw_endpoint_get_port(*(nw_endpoint_t *)(v12 + 24));
        if ((_DWORD)this == a2)
          return this;
        this = std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a3);
        v10 += 2;
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  return this;
}

void sub_1BEF595AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RTPTransportManager::clearAll(RTPTransportManager *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  v1 = qword_1ED70CB28;
  if ((uint64_t *)qword_1ED70CB28 != &qword_1ED70CB30)
  {
    do
    {
      v2 = *(_QWORD **)(v1 + 40);
      v14 = 0;
      v15 = 0;
      v13 = 0;
      std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__init_with_size[abi:ne180100]<std::shared_ptr<ImsUdpSocketInterface>*,std::shared_ptr<ImsUdpSocketInterface>*>((char *)&v13, v2, *(_QWORD **)(v1 + 48), (uint64_t)(*(_QWORD *)(v1 + 48) - (_QWORD)v2) >> 4);
      v3 = v13;
      v4 = v14;
      if (v13 != v14)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 + 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldxr(p_shared_owners);
            while (__stxr(v7 + 1, p_shared_owners));
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 += 16;
        }
        while (v3 != v4);
        v9 = v13;
        v3 = v14;
        if (v14 != v13)
        {
          do
          {
            v3 -= 16;
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
          }
          while (v3 != v9);
          v3 = v9;
        }
      }
      v14 = v3;
      v16 = (void **)&v13;
      std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v16);
      v10 = *(uint64_t **)(v1 + 8);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = *(uint64_t **)(v1 + 16);
          v12 = *v11 == v1;
          v1 = (uint64_t)v11;
        }
        while (!v12);
      }
      v1 = (uint64_t)v11;
    }
    while (v11 != &qword_1ED70CB30);
  }
  std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::destroy((uint64_t)&qword_1ED70CB28, (char *)qword_1ED70CB30);
  qword_1ED70CB28 = (uint64_t)&qword_1ED70CB30;
  qword_1ED70CB38 = 0;
  qword_1ED70CB30 = 0;
}

void std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

char *std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__init_with_size[abi:ne180100]<std::shared_ptr<ImsUdpSocketInterface>*,std::shared_ptr<ImsUdpSocketInterface>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BEF597CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 40);
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void std::allocate_shared[abi:ne180100]<ImsUdpSocket,std::allocator<ImsUdpSocket>,decltype(nullptr),DscpClass,void>(_QWORD *a1, int a2)
{
  _QWORD *v4;
  uint64_t v5[2];

  v4 = operator new(0x88uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E78C9BC8;
  v5[0] = 0;
  v5[1] = 0;
  ImsUdpSocket::ImsUdpSocket((uint64_t)(v4 + 3), v5, a2);
  *a1 = v4 + 3;
  a1[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1BEF5993C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ImsUdpSocket>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9BC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsUdpSocket>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9BC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<ImsUdpSocket>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(unint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  v3 = qword_1ED70CB30;
  if (qword_1ED70CB30)
  {
    while (1)
    {
      while (1)
      {
        v4 = (uint64_t *)v3;
        v5 = *(_QWORD *)(v3 + 32);
        if (v5 <= a1)
          break;
        v3 = *v4;
        v6 = v4;
        if (!*v4)
          goto LABEL_9;
      }
      if (v5 >= a1)
        break;
      v3 = v4[1];
      if (!v3)
      {
        v6 = v4 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = &qword_1ED70CB30;
    v4 = &qword_1ED70CB30;
LABEL_9:
    v7 = v4;
    v4 = (uint64_t *)operator new(0x40uLL);
    v4[4] = *a2;
    v4[5] = 0;
    v4[6] = 0;
    v4[7] = 0;
    *v4 = 0;
    v4[1] = 0;
    v4[2] = (uint64_t)v7;
    *v6 = (uint64_t)v4;
    v8 = v4;
    if (*(_QWORD *)qword_1ED70CB28)
    {
      qword_1ED70CB28 = *(_QWORD *)qword_1ED70CB28;
      v8 = (uint64_t *)*v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ED70CB30, v8);
    ++qword_1ED70CB38;
  }
  return v4;
}

void std::allocate_shared[abi:ne180100]<ImsUdpNw,std::allocator<ImsUdpNw>,std::shared_ptr<SipStack> const&,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v21[2];

  v6 = (std::__shared_weak_count *)operator new(0x88uLL);
  v7 = v6;
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9C18;
  v9 = &v6[1].__vftable;
  v21[0] = a2;
  v21[1] = a3;
  if (a3)
  {
    v10 = (unint64_t *)&a3->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    ImsUdpNw::ImsUdpNw((uint64_t)&v6[1], v21, 0);
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ImsUdpNw::ImsUdpNw((uint64_t)&v6[1], v21, 0);
  }
  *a1 = v9;
  a1[1] = v7;
  shared_weak_owners = (std::__shared_weak_count *)v7[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v7[1].__shared_owners_ = (uint64_t)v9;
    v7[1].__shared_weak_owners_ = (uint64_t)v7;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v7[1].__shared_owners_ = (uint64_t)v9;
    v7[1].__shared_weak_owners_ = (uint64_t)v7;
  }
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void std::__shared_ptr_emplace<ImsUdpNw>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsUdpNw>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9C18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<ImsUdpNw>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(unint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  v3 = qword_1ED70CB48;
  if (qword_1ED70CB48)
  {
    while (1)
    {
      while (1)
      {
        v4 = (uint64_t *)v3;
        v5 = *(_QWORD *)(v3 + 32);
        if (v5 <= a1)
          break;
        v3 = *v4;
        v6 = v4;
        if (!*v4)
          goto LABEL_9;
      }
      if (v5 >= a1)
        break;
      v3 = v4[1];
      if (!v3)
      {
        v6 = v4 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = &qword_1ED70CB48;
    v4 = &qword_1ED70CB48;
LABEL_9:
    v7 = v4;
    v4 = (uint64_t *)operator new(0x40uLL);
    v4[4] = *a2;
    v4[5] = 0;
    v4[6] = 0;
    v4[7] = 0;
    *v4 = 0;
    v4[1] = 0;
    v4[2] = (uint64_t)v7;
    *v6 = (uint64_t)v4;
    v8 = v4;
    if (*(_QWORD *)qword_1ED70CB40)
    {
      qword_1ED70CB40 = *(_QWORD *)qword_1ED70CB40;
      v8 = (uint64_t *)*v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ED70CB48, v8);
    ++qword_1ED70CB50;
  }
  return v4;
}

uint64_t _GLOBAL__sub_I_RTPTransportManager_cpp()
{
  qword_1ED70CB30 = 0;
  RTPTransportManager::_transportManager = (uint64_t)&off_1E78C9B98;
  qword_1ED70CB28 = (uint64_t)&qword_1ED70CB30;
  qword_1ED70CB50 = 0;
  qword_1ED70CB48 = 0;
  qword_1ED70CB38 = 0;
  qword_1ED70CB40 = (uint64_t)&qword_1ED70CB48;
  return __cxa_atexit((void (*)(void *))RTPTransportManager::~RTPTransportManager, &RTPTransportManager::_transportManager, &dword_1BEDF4000);
}

void SipUssdData::SipUssdData(SipUssdData *this)
{
  char *v2;
  void *__p[2];
  char v4;

  *(_QWORD *)this = &off_1E78CE278;
  v2 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "ussd-data");
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v2, (__int128 *)__p, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = off_1E78C9C68;
  *((_QWORD *)this + 1) = &unk_1E78C9CE0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
}

void sub_1BEF59DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipUssdData::SipUssdData(SipUssdData *this, const SipUssdData *a2)
{
  char *v4;
  void *__p[2];
  char v6;

  *(_QWORD *)this = &off_1E78CE278;
  v4 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "ussd-data");
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v4, (__int128 *)__p, 0);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = off_1E78C9C68;
  *((_QWORD *)this + 1) = &unk_1E78C9CE0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  std::string::operator=((std::string *)((char *)this + 64), (const std::string *)((char *)a2 + 64));
  std::string::operator=((std::string *)((char *)this + 88), (const std::string *)((char *)a2 + 88));
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
}

void sub_1BEF59EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipUssdData::SipUssdData(uint64_t a1, const std::string *a2, const std::string *a3)
{
  uint64_t v6;
  void *__p[2];
  char v9;

  *(_QWORD *)a1 = &off_1E78CE278;
  v6 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "ussd-data");
  bambi::XmlTreeItem::XmlTreeItem(v6, (__int128 *)__p, 0);
  if (v9 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_1E78C9C68;
  *(_QWORD *)(a1 + 8) = &unk_1E78C9CE0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  std::string::operator=((std::string *)(a1 + 88), a2);
  std::string::operator=((std::string *)(a1 + 64), a3);
  return a1;
}

void sub_1BEF59FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *SipUssdData::setText(std::string *result, uint64_t *a2, std::string *__str)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  std::string *v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v3 = (uint64_t)result;
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  if (v4 != 11)
  {
    if (v4 != 10)
    {
      if (v4 == 8)
      {
        v6 = v5 >= 0 ? a2 : (uint64_t *)*a2;
        if (*v6 == 0x65676175676E616CLL)
        {
          v7 = (std::string *)((char *)result + 64);
          return std::string::operator=(v7, __str);
        }
      }
      return result;
    }
    if (v5 >= 0)
      v13 = a2;
    else
      v13 = (uint64_t *)*a2;
    v14 = *v13;
    v15 = *((unsigned __int16 *)v13 + 4);
    if (v14 != 0x6F632D726F727265 || v15 != 25956)
      return result;
LABEL_32:
    result = (std::string *)ims::strToUint32((uint64_t *)__str, 0);
    *(_DWORD *)(v3 + 112) = (_DWORD)result;
    return result;
  }
  if (v5 >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  if (*v8 == 0x7274732D64737375 && *(uint64_t *)((char *)v8 + 3) == 0x676E697274732D64)
  {
    v7 = (std::string *)((char *)result + 88);
    return std::string::operator=(v7, __str);
  }
  v10 = *v8;
  v11 = *(uint64_t *)((char *)v8 + 3);
  if (v10 == 0x632D746C75736572 && v11 == 0x65646F632D746C75)
    goto LABEL_32;
  return result;
}

void SipUssdData::constructTree(SipUssdData *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  char v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  void **v48;

  *a2 = 0;
  a2[1] = 0;
  v4 = (char *)this + 8;
  bambi::XmlTreeItem::makeNode((SipUssdData *)((char *)this + 8), a2);
  if (*((char *)this + 87) < 0)
  {
    if (!*((_QWORD *)this + 9))
      goto LABEL_20;
  }
  else if (!*((_BYTE *)this + 87))
  {
    goto LABEL_20;
  }
  v5 = a2[1];
  v44 = *a2;
  v45 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "language");
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, void **, char *, _QWORD))(*(_QWORD *)v4 + 80))(&v46, v4, &v44, __p, (char *)this + 64, 0);
  v8 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v43 < 0)
    operator delete(__p[0]);
  v11 = v45;
  if (v45)
  {
    v12 = (unint64_t *)&v45->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_20:
  if (*((char *)this + 111) < 0)
  {
    if (!*((_QWORD *)this + 12))
      goto LABEL_39;
  }
  else if (!*((_BYTE *)this + 111))
  {
    goto LABEL_39;
  }
  v14 = a2[1];
  v38 = *a2;
  v39 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ussd-string");
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, void **, char *, _QWORD))(*(_QWORD *)v4 + 80))(&v40, v4, &v38, __p, (char *)this + 88, 0);
  v17 = v41;
  if (v41)
  {
    v18 = (unint64_t *)&v41->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v43 < 0)
    operator delete(__p[0]);
  v20 = v39;
  if (v39)
  {
    v21 = (unint64_t *)&v39->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
LABEL_39:
  if (*((_DWORD *)this + 28))
  {
    v23 = a2[1];
    v34 = *a2;
    v35 = (std::__shared_weak_count *)v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "result-code");
    v26 = *((unsigned int *)this + 28);
    memset(v33, 0, sizeof(v33));
    (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, void **, uint64_t, _QWORD *))(*((_QWORD *)this + 1)
                                                                                                 + 96))(&v36, v4, &v34, __p, v26, v33);
    v27 = v37;
    if (v37)
    {
      v28 = (unint64_t *)&v37->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v48 = (void **)v33;
    std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&v48);
    if (v43 < 0)
      operator delete(__p[0]);
    v30 = v35;
    if (v35)
    {
      v31 = (unint64_t *)&v35->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
}

void sub_1BEF5A494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v28 - 40) = v27;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  if (a26 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipUssdData::constructTree(SipUssdData *this@<X0>, uint64_t *a2@<X8>)
{
  SipUssdData::constructTree((SipUssdData *)((char *)this - 8), a2);
}

void `non-virtual thunk to'SipUssdData::~SipUssdData(SipUssdData *this)
{
  *((_QWORD *)this - 1) = off_1E78C9C68;
  *(_QWORD *)this = &unk_1E78C9CE0;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  bambi::XmlTreeItem::~XmlTreeItem((void **)this);
}

{
  *((_QWORD *)this - 1) = off_1E78C9C68;
  *(_QWORD *)this = &unk_1E78C9CE0;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  bambi::XmlTreeItem::~XmlTreeItem((void **)this);
  JUMPOUT(0x1C3B87100);
}

void SipSessionStateMachine::stateMachineName(SipSessionStateMachine *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 13);
  }
}

void SipSessionStateMachine::~SipSessionStateMachine(void **this)
{
  *this = off_1E78CA130;
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  SipSimpleStateMachine<SipSessionState>::~SipSimpleStateMachine((uint64_t)this);
}

{
  *this = off_1E78CA130;
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  SipSimpleStateMachine<SipSessionState>::~SipSimpleStateMachine((uint64_t)this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSession::SipSession(uint64_t a1, const std::string *a2)
{
  std::__shared_weak_count *size;
  unint64_t *v5;
  unint64_t v6;
  std::string __p;

  *(_QWORD *)(a1 + 104) = &off_1E78B7B60;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.session");
  SipSessionInterface::SipSessionInterface(a1, (uint64_t *)&off_1E78C9FB8, &__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E78C9D98;
  *(_QWORD *)(a1 + 104) = &unk_1E78C9F10;
  *(_QWORD *)(a1 + 616) = &unk_1E78C9F58;
  *(_QWORD *)(a1 + 624) = &unk_1E78C9F88;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 632) = a1 + 640;
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_DWORD *)(a1 + 704) = 1065353216;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_QWORD *)(a1 + 656) = off_1E78CA130;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 770) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_QWORD *)(a1 + 824) = 90;
  *(_WORD *)(a1 + 832) = 1;
  *(_BYTE *)(a1 + 834) = 1;
  *(_QWORD *)(a1 + 836) = 0x200000001;
  *(_WORD *)(a1 + 844) = 256;
  *(_BYTE *)(a1 + 846) = 1;
  *(_QWORD *)(a1 + 847) = 0;
  *(_WORD *)(a1 + 855) = 256;
  *(_DWORD *)(a1 + 857) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_DWORD *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 868) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_BYTE *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 960) = 0x40A7700000000000;
  *(_BYTE *)(a1 + 1104) = 0;
  *(_BYTE *)(a1 + 1128) = 0;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_QWORD *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_QWORD *)(a1 + 1256) = 90;
  *(_DWORD *)(a1 + 1264) = 65537;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_BYTE *)(a1 + 1368) = 0;
  *(_QWORD *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_QWORD *)(a1 + 1408) = a1;
  *(_QWORD *)(a1 + 1400) = &off_1E78CFF28;
  *(_QWORD *)(a1 + 1424) = 0x200000001;
  *(_WORD *)(a1 + 1432) = 256;
  *(_BYTE *)(a1 + 1434) = 1;
  *(_QWORD *)(a1 + 1435) = 0;
  *(_WORD *)(a1 + 1443) = 256;
  *(_DWORD *)(a1 + 1445) = 0;
  *(_QWORD *)(a1 + 1472) = 0;
  *(_QWORD *)(a1 + 1464) = 0;
  *(_QWORD *)(a1 + 1456) = a1 + 1464;
  *(_QWORD *)(a1 + 1480) = 0x100000003;
  *(_DWORD *)(a1 + 1488) = 5;
  *(_WORD *)(a1 + 1492) = 0;
  *(_QWORD *)(a1 + 1416) = a1 + 624;
  *(_QWORD *)(a1 + 1512) = 0;
  *(_QWORD *)(a1 + 1504) = 0;
  *(_QWORD *)(a1 + 1520) = 0;
  *(_BYTE *)(a1 + 1536) = 0;
  *(_BYTE *)(a1 + 1724) = 0;
  *(_BYTE *)(a1 + 1608) = 0;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1692) = 0u;
  *(_OWORD *)(a1 + 1676) = 0u;
  *(_OWORD *)(a1 + 1660) = 0u;
  *(_OWORD *)(a1 + 1644) = 0u;
  *(_OWORD *)(a1 + 1628) = 0u;
  *(_OWORD *)(a1 + 1612) = 0u;
  *(_WORD *)(a1 + 1725) = 1;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 240, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v5 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_QWORD *)(a1 + 1336) = 0;
  *(_BYTE *)(a1 + 1360) = 0;
  *(_DWORD *)(a1 + 1364) = 0;
  *(_BYTE *)(a1 + 1537) = 0;
  *(_DWORD *)(a1 + 1720) = 0;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_DWORD *)(a1 + 1496) = -1;
  *(_BYTE *)(a1 + 1528) = 0;
  return a1;
}

void sub_1BEF5A9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipSession::constructStateMachine(SipSession *this)
{
  char *v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  void **v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  std::__shared_weak_count *v37;
  void *lpsrc[2];
  uint64_t v39;

  v36 = 0;
  v37 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(lpsrc, (_QWORD *)this + 22);
  if (lpsrc[0]
  {
    v36 = v2;
    v37 = (std::__shared_weak_count *)lpsrc[1];
    v3 = lpsrc;
  }
  else
  {
    v3 = (void **)&v36;
  }
  *v3 = 0;
  v3[1] = 0;
  v4 = (std::__shared_weak_count *)lpsrc[1];
  if (lpsrc[1])
  {
    v5 = (unint64_t *)((char *)lpsrc[1] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!v36)
  {
    v32 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"Couldn't set delegate for stateMachine", 38);
    *(_BYTE *)(v32 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v32 + 17) = 0;
    goto LABEL_46;
  }
  v7 = (std::__shared_weak_count *)operator new(0xF0uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA4E0;
  v9 = v7 + 1;
  SipSessionTimer::SipSessionTimer((SipSessionTimer *)&v7[1]);
  shared_weak_owners = (std::__shared_weak_count *)v7[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v7[1].__shared_owners_ = (uint64_t)v9;
    v7[1].__shared_weak_owners_ = (uint64_t)v7;
    do
LABEL_21:
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    goto LABEL_24;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v7[1].__shared_owners_ = (uint64_t)v9;
    v7[1].__shared_weak_owners_ = (uint64_t)v7;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    goto LABEL_21;
  }
LABEL_24:
  *((_QWORD *)this + 168) = v9;
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = v7;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v22 = v36;
  v21 = v37;
  if (v37)
  {
    v23 = (unint64_t *)&v37->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  (*(void (**)(void **__return_ptr, char *))(*(_QWORD *)v22 + 320))(lpsrc, v22);
  v25 = (void **)((char *)this + 744);
  if (*((char *)this + 767) < 0)
    operator delete(*v25);
  *(_OWORD *)v25 = *(_OWORD *)lpsrc;
  *((_QWORD *)this + 95) = v39;
  if (v21)
  {
    v26 = (unint64_t *)&v21->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    do
      v28 = __ldxr(v26);
    while (__stxr(v28 + 1, v26));
  }
  *((_QWORD *)this + 91) = v22 + 616;
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = v21;
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  if (v21)
  {
    std::__shared_weak_count::__release_weak(v21);
    v30 = (unint64_t *)&v21->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
LABEL_46:
  v33 = v37;
  if (v37)
  {
    v34 = (unint64_t *)&v37->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1BEF5AD04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void SipSession::create(const std::string *a1@<X0>, SipSession **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  std::allocate_shared[abi:ne180100]<SipSession,std::allocator<SipSession>,std::string const&,void>(a1, a2);
  SipSession::constructStateMachine(*a2);
}

void sub_1BEF5AD7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipSession::~SipSession(SipSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;

  *(_QWORD *)this = &off_1E78C9D98;
  *((_QWORD *)this + 13) = &unk_1E78C9F10;
  *((_QWORD *)this + 77) = &unk_1E78C9F58;
  *((_QWORD *)this + 78) = &unk_1E78C9F88;
  v2 = ImsLogContainer::debugStream(this);
  (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"~SipSession", 11);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = *((_QWORD *)this + 194);
  if (v3)
  {
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3 + 112);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3 + 96);
    if (*(char *)(v3 + 95) < 0)
      operator delete(*(void **)(v3 + 72));
    if (*(char *)(v3 + 55) < 0)
      operator delete(*(void **)(v3 + 32));
    if (*(char *)(v3 + 31) < 0)
      operator delete(*(void **)(v3 + 8));
    MEMORY[0x1C3B87100](v3, 0x1032C40D4AF1F8FLL);
  }
  v4 = *((_QWORD *)this + 167);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 193);
  if (v5)
  {
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v5 + 112);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v5 + 96);
    if (*(char *)(v5 + 95) < 0)
      operator delete(*(void **)(v5 + 72));
    if (*(char *)(v5 + 55) < 0)
      operator delete(*(void **)(v5 + 32));
    if (*(char *)(v5 + 31) < 0)
      operator delete(*(void **)(v5 + 8));
    MEMORY[0x1C3B87100](v5, 0x1032C40D4AF1F8FLL);
  }
  v6 = *((_QWORD *)this + 195);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 196);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (*((char *)this + 1719) < 0)
    operator delete(*((void **)this + 212));
  if (*((char *)this + 1695) < 0)
    operator delete(*((void **)this + 209));
  if (*((char *)this + 1671) < 0)
    operator delete(*((void **)this + 206));
  if (*((char *)this + 1647) < 0)
    operator delete(*((void **)this + 203));
  if (*((char *)this + 1607) < 0)
    operator delete(*((void **)this + 198));
  std::unique_ptr<ImsPowerAssertion>::reset[abi:ne180100]((void ***)this + 197, 0);
  v8 = (void *)*((_QWORD *)this + 188);
  if (v8)
  {
    *((_QWORD *)this + 189) = v8;
    operator delete(v8);
  }
  *((_QWORD *)this + 175) = &off_1E78CFF28;
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)this + 1456, *((_QWORD **)this + 183));
  *((_QWORD *)this + 182) = (char *)this + 1464;
  *((_QWORD *)this + 184) = 0;
  *((_QWORD *)this + 183) = 0;
  if (*((char *)this + 1399) < 0)
    operator delete(*((void **)this + 172));
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 169);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (*((char *)this + 1319) < 0)
    operator delete(*((void **)this + 162));
  if (*((char *)this + 1295) < 0)
    operator delete(*((void **)this + 159));
  if (*((char *)this + 1247) < 0)
    operator delete(*((void **)this + 153));
  if (*((char *)this + 1223) < 0)
    operator delete(*((void **)this + 150));
  if (*((char *)this + 1199) < 0)
    operator delete(*((void **)this + 147));
  if (*((char *)this + 1175) < 0)
    operator delete(*((void **)this + 144));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1136);
  BambiCallOptions::~BambiCallOptions((void **)this + 98);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  *((_QWORD *)this + 82) = off_1E78CA130;
  if (*((char *)this + 767) < 0)
    operator delete(*((void **)this + 93));
  SipSimpleStateMachine<SipSessionState>::~SipSimpleStateMachine((uint64_t)this + 656);
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(*((_QWORD **)this + 80));
  SipSessionInterface::~SipSessionInterface(this, (uint64_t *)&off_1E78C9FB8);
}

{
  SipSession::~SipSession(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipSession::~SipSession(SipSession *this)
{
  SipSession::~SipSession((SipSession *)((char *)this - 104));
}

{
  SipSession::~SipSession((SipSession *)((char *)this - 616));
}

{
  SipSession::~SipSession((SipSession *)((char *)this - 624));
}

{
  SipSession::~SipSession((SipSession *)((char *)this - 104));
  JUMPOUT(0x1C3B87100);
}

{
  SipSession::~SipSession((SipSession *)((char *)this - 616));
  JUMPOUT(0x1C3B87100);
}

{
  SipSession::~SipSession((SipSession *)((char *)this - 624));
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSession::requireQosBeforeRinging(SipSession *this)
{
  ImsPrefs *v1;
  void **RequireQoSBeforeRingingKey;
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  SipStack *v9;
  std::__shared_weak_count *v10;

  if (!*((_BYTE *)this + 1725))
    return 0;
  SipSessionInterface::stack((std::__shared_weak_count *)this, &v9);
  v1 = (ImsPrefs *)SipStack::prefs(v9);
  RequireQoSBeforeRingingKey = (void **)ImsPrefs::getRequireQoSBeforeRingingKey(v1);
  v3 = ImsPrefs::prefWithKey(v1, RequireQoSBeforeRingingKey);
  if (v3)
    v4 = (*(uint64_t (**)(void *))(*(_QWORD *)v3 + 40))(v3);
  else
    v4 = *((_BYTE *)RequireQoSBeforeRingingKey + 57) != 0;
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1BEF5B224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSession::removeAllAckHandlers(SipSession **this)
{
  SipSession *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  SipSession *v13;
  SipSession *v14;
  BOOL v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;

  SipSessionInterface::removeAllAckHandlers((SipSessionInterface *)this);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v2 = this[79];
  if (v2 != (SipSession *)(this + 80))
  {
    v3 = 0;
    do
    {
      if (v3 >= v19)
      {
        v4 = v17;
        v5 = (v3 - v17) >> 2;
        v6 = v5 + 1;
        if ((unint64_t)(v5 + 1) >> 62)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        v7 = v19 - v17;
        if ((v19 - v17) >> 1 > v6)
          v6 = v7 >> 1;
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
          v8 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v8 = v6;
        if (v8)
        {
          v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)&v19, v8);
          v4 = v17;
          v3 = v18;
        }
        else
        {
          v9 = 0;
        }
        v10 = &v9[4 * v5];
        *(_DWORD *)v10 = *((_DWORD *)v2 + 8);
        v11 = v10 + 4;
        while (v3 != v4)
        {
          v12 = *((_DWORD *)v3 - 1);
          v3 -= 4;
          *((_DWORD *)v10 - 1) = v12;
          v10 -= 4;
        }
        v17 = v10;
        v19 = &v9[4 * v8];
        if (v4)
          operator delete(v4);
        v3 = v11;
      }
      else
      {
        *(_DWORD *)v3 = *((_DWORD *)v2 + 8);
        v3 += 4;
      }
      v18 = v3;
      v13 = (SipSession *)*((_QWORD *)v2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(SipSession **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (SipSession *)*((_QWORD *)v2 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != (SipSession *)(this + 80));
    if (v3 == v17)
      goto LABEL_30;
    v16 = 0;
    v3 = v17;
    do
    {
      SipSession::removePrackHandler((SipSession *)this, *(_DWORD *)&v3[4 * v16++]);
      v3 = v17;
    }
    while (v16 < (v18 - v17) >> 2);
    if (v17)
LABEL_30:
      operator delete(v3);
  }
}

void sub_1BEF5B3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *SipSession::removePrackHandler(SipSession *this, unsigned int a2)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t v13;
  std::string v14;
  std::string __p;
  _OWORD v16[4];
  void *v17[2];
  __int128 v18;
  __int128 v19;
  _OWORD v20[9];
  uint64_t v21;

  result = (uint64_t *)*((_QWORD *)this + 80);
  if (result)
  {
    v4 = (uint64_t *)((char *)this + 640);
    v5 = result;
    do
    {
      v6 = *((_DWORD *)v5 + 8);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v5;
      else
        v8 = v5 + 1;
      if (v7)
        v4 = v5;
      v5 = (uint64_t *)*v8;
    }
    while (*v8);
    if (v4 != (uint64_t *)((char *)this + 640) && *((_DWORD *)v4 + 8) <= a2)
    {
      v9 = (uint64_t *)v4[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        v11 = v4;
        do
        {
          v10 = (uint64_t *)v11[2];
          v12 = *v10 == (_QWORD)v11;
          v11 = v10;
        }
        while (!v12);
      }
      if (*((uint64_t **)this + 79) == v4)
        *((_QWORD *)this + 79) = v10;
      --*((_QWORD *)this + 81);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(result, v4);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v4 + 5));
      operator delete(v4);
      v13 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"removed PRACK handler for cseq ", 31);
      *(_BYTE *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      v21 = 0;
      v19 = 0u;
      memset(v20, 0, sizeof(v20));
      *(_OWORD *)v17 = 0u;
      v18 = 0u;
      memset(v16, 0, sizeof(v16));
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"PrackHandler ", 13);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16 + 8, &v14);
      LoggableString::LoggableString(&__p, &v14);
      (*(void (**)(char *, std::string *))(*((_QWORD *)this + 13) + 40))((char *)this + 104, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      *(_QWORD *)&v16[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(*(_QWORD *)&v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      *((_QWORD *)&v16[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
      if (SHIBYTE(v18) < 0)
        operator delete(v17[1]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (uint64_t *)MEMORY[0x1C3B8707C](v20);
    }
  }
  return result;
}

void sub_1BEF5B638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void SipSession::initializeWithOptions(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void **v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string __p;

  if (a3)
  {
    *(_WORD *)(a1 + 784) = *(_WORD *)a3;
    std::string::operator=((std::string *)(a1 + 792), (const std::string *)(a3 + 8));
    v7 = *(_OWORD *)(a3 + 48);
    v6 = *(_OWORD *)(a3 + 64);
    v8 = *(_OWORD *)(a3 + 32);
    *(_QWORD *)(a1 + 861) = *(_QWORD *)(a3 + 77);
    *(_OWORD *)(a1 + 832) = v7;
    *(_OWORD *)(a1 + 848) = v6;
    *(_OWORD *)(a1 + 816) = v8;
    std::string::operator=((std::string *)(a1 + 872), (const std::string *)(a3 + 88));
    std::string::operator=((std::string *)(a1 + 896), (const std::string *)(a3 + 112));
    *(_BYTE *)(a1 + 920) = *(_BYTE *)(a3 + 136);
    v9 = *(_OWORD *)(a3 + 144);
    v10 = *(_OWORD *)(a3 + 176);
    *(_OWORD *)(a1 + 944) = *(_OWORD *)(a3 + 160);
    *(_OWORD *)(a1 + 960) = v10;
    *(_OWORD *)(a1 + 928) = v9;
    std::string::operator=((std::string *)(a1 + 976), (const std::string *)(a3 + 192));
    std::string::operator=((std::string *)(a1 + 1000), (const std::string *)(a3 + 216));
    std::string::operator=((std::string *)(a1 + 1024), (const std::string *)(a3 + 240));
    std::string::operator=((std::string *)(a1 + 1048), (const std::string *)(a3 + 264));
    std::string::operator=((std::string *)(a1 + 1072), (const std::string *)(a3 + 288));
    *(_BYTE *)(a1 + 1096) = *(_BYTE *)(a3 + 312);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a1 + 1104), (const std::string *)(a3 + 320));
  }
  v11 = (void **)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "com.apple.ipTelephony.sipInvite");
  ImsPowerAssertion::ImsPowerAssertion((uint64_t)v11, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::unique_ptr<ImsPowerAssertion>::reset[abi:ne180100]((void ***)(a1 + 1576), v11);
  v12 = (std::__shared_weak_count *)a2[1];
  v18 = *a2;
  v19 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v18);
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BEF5B828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void SipSession::initializeWithOptions(uint64_t a1, uint64_t *a2, std::string *__str)
{
  int v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::string __p;

  if (__str)
  {
    std::string::operator=((std::string *)(a1 + 1152), __str);
    std::string::operator=((std::string *)(a1 + 1176), __str + 1);
    std::string::operator=((std::string *)(a1 + 1200), __str + 2);
    std::string::operator=((std::string *)(a1 + 1224), __str + 3);
    v6 = __str[4].__r_.__value_.__r.__words[2];
    *(_OWORD *)(a1 + 1248) = *(_OWORD *)&__str[4].__r_.__value_.__l.__data_;
    *(_DWORD *)(a1 + 1264) = v6;
    std::string::operator=((std::string *)(a1 + 1272), __str + 5);
    std::string::operator=((std::string *)(a1 + 1296), __str + 6);
  }
  v7 = (void **)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "com.apple.ipTelephony.rcs");
  ImsPowerAssertion::ImsPowerAssertion((uint64_t)v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::unique_ptr<ImsPowerAssertion>::reset[abi:ne180100]((void ***)(a1 + 1576), v7);
  v8 = (std::__shared_weak_count *)a2[1];
  v14 = *a2;
  v15 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v14);
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BEF5B9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void SipSession::initialize(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  SipUserAgent *v22;
  void *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  std::__shared_weak_count_vtbl *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *shared_owners;
  unint64_t v35;
  unint64_t *p_shared_weak_owners;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  void *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  void *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  std::__shared_weak_count_vtbl *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  void *v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  std::__shared_weak_count_vtbl *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  std::__shared_weak_count_vtbl *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  void *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  std::__shared_weak_count_vtbl *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  void *v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  std::__shared_weak_count_vtbl *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  void *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  std::__shared_weak_count_vtbl *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  void *v238;
  std::__shared_weak_count *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  std::__shared_weak_count_vtbl *v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  void *v262;
  std::__shared_weak_count *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  std::__shared_weak_count_vtbl *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  void *v290;
  std::__shared_weak_count *v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  std::__shared_weak_count_vtbl *v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  void *v319;
  std::__shared_weak_count *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  std::__shared_weak_count_vtbl *v323;
  unint64_t *v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  void *v347;
  std::__shared_weak_count *v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  std::__shared_weak_count_vtbl *v351;
  unint64_t *v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  void *v375;
  std::__shared_weak_count *v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  std::__shared_weak_count_vtbl *v379;
  unint64_t *v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t v389;
  unint64_t *v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  void *v403;
  std::__shared_weak_count *v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  std::__shared_weak_count_vtbl *v407;
  unint64_t *v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t v417;
  unint64_t *v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t *v421;
  unint64_t v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  uint64_t v433[2];
  uint64_t v434[2];
  uint64_t v435[2];
  uint64_t v436[2];
  uint64_t v437[2];
  uint64_t v438[2];
  uint64_t v439[2];
  uint64_t v440[2];
  uint64_t v441[2];
  uint64_t v442[2];
  uint64_t v443[2];
  uint64_t v444[2];
  uint64_t v445[2];
  uint64_t v446;
  uint64_t v447;
  uint64_t v448[2];
  uint64_t v449[2];
  _QWORD v450[2];
  void *v451;
  std::__shared_weak_count *v452;
  char v453;
  void *v454;
  std::__shared_weak_count *v455;
  uint64_t v456;
  std::__shared_weak_count *v457;
  uint64_t v458;
  uint64_t v459;

  v3 = a2[1];
  v456 = *a2;
  v457 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  SipSessionInterface::initialize(a1, &v456);
  v6 = v457;
  if (v457)
  {
    p_shared_owners = (unint64_t *)&v457->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v454 = 0;
  v455 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v451, (_QWORD *)(a1 + 176));
  if (v451
  {
    v454 = v9;
    v455 = v452;
    v10 = &v451;
  }
  else
  {
    v10 = &v454;
  }
  *v10 = 0;
  v10[1] = 0;
  v11 = v452;
  if (v452)
  {
    v12 = (unint64_t *)&v452->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v454)
  {
    if (*(_BYTE *)(a1 + 832))
    {
      v14 = *(_QWORD *)(a1 + 1344);
      v15 = v455;
      v450[0] = v454;
      v450[1] = v455;
      if (v455)
      {
        v16 = (unint64_t *)&v455->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      SipSessionTimer::initialize(v14, v450, *(_BYTE *)(a1 + 833));
      if (v15)
      {
        v18 = (unint64_t *)&v15->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v20 = *(_QWORD *)(a1 + 240);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 208);
      if (v21)
      {
        v22 = *(SipUserAgent **)(v21 + 136);
        if (v22)
        {
          if (*(_BYTE *)(SipUserAgent::config(v22) + 609))
            *(_DWORD *)(a1 + 1364) = 1;
        }
      }
    }
    v23 = v454;
    v24 = v455;
    v25 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v26 = v25;
    v25->__shared_owners_ = 0;
    v27 = (unint64_t *)&v25->__shared_owners_;
    v25->__shared_weak_owners_ = 0;
    v25->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA580;
    v28 = (std::__shared_weak_count_vtbl *)&v25[1];
    v451 = v23;
    v452 = v24;
    if (v24)
    {
      v29 = (unint64_t *)&v24->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    SipSessionConfirmedState::SipSessionConfirmedState((SipSessionState *)&v25[1], (uint64_t)v23, v24);
    v31 = (_QWORD *)(a1 + 656);
    if (v24)
    {
      v32 = (unint64_t *)&v24->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v458 = (uint64_t)v28;
    v459 = (uint64_t)v26;
    shared_owners = (std::__shared_weak_count *)v26[9].__shared_owners_;
    if (shared_owners)
    {
      if (shared_owners->__shared_owners_ != -1)
        goto LABEL_54;
      do
        v35 = __ldxr(v27);
      while (__stxr(v35 + 1, v27));
      p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
      do
        v37 = __ldxr(p_shared_weak_owners);
      while (__stxr(v37 + 1, p_shared_weak_owners));
      v26[9].__vftable = v28;
      v26[9].__shared_owners_ = (uint64_t)v26;
      std::__shared_weak_count::__release_weak(shared_owners);
    }
    else
    {
      do
        v38 = __ldxr(v27);
      while (__stxr(v38 + 1, v27));
      v39 = (unint64_t *)&v26->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v26[9].__vftable = v28;
      v26[9].__shared_owners_ = (uint64_t)v26;
    }
    do
      v41 = __ldaxr(v27);
    while (__stlxr(v41 - 1, v27));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
LABEL_54:
    v42 = (std::__shared_weak_count *)v459;
    v449[0] = v458;
    v449[1] = v459;
    v458 = 0;
    v459 = 0;
    SipTypedStateMachine<SipSessionState>::addState(a1 + 656, v449);
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = (std::__shared_weak_count *)v459;
    if (v459)
    {
      v46 = (unint64_t *)(v459 + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v49 = v454;
    v48 = v455;
    v50 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v51 = v50;
    v50->__shared_owners_ = 0;
    v52 = (unint64_t *)&v50->__shared_owners_;
    v50->__shared_weak_owners_ = 0;
    v50->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA5D0;
    v53 = (std::__shared_weak_count_vtbl *)&v50[1];
    v458 = (uint64_t)v49;
    v459 = (uint64_t)v48;
    if (v48)
    {
      v54 = (unint64_t *)&v48->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      do
        v56 = __ldxr(v54);
      while (__stxr(v56 + 1, v54));
    }
    v451 = v49;
    v452 = v48;
    SipSessionState::SipSessionState((SipSessionState *)&v50[1], &v451);
    if (v48)
    {
      v57 = (unint64_t *)&v48->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E7B48;
    v51[1].__shared_owners_ = (uint64_t)&unk_1E78E7BF8;
    v59 = (std::__shared_weak_count *)v459;
    if (v459)
    {
      v60 = (unint64_t *)(v459 + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v446 = (uint64_t)v53;
    v447 = (uint64_t)v51;
    v62 = (std::__shared_weak_count *)v51[9].__shared_owners_;
    if (v62)
    {
      if (v62->__shared_owners_ != -1)
        goto LABEL_91;
      do
        v63 = __ldxr(v52);
      while (__stxr(v63 + 1, v52));
      v64 = (unint64_t *)&v51->__shared_weak_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
      v51[9].__vftable = v53;
      v51[9].__shared_owners_ = (uint64_t)v51;
      std::__shared_weak_count::__release_weak(v62);
    }
    else
    {
      do
        v66 = __ldxr(v52);
      while (__stxr(v66 + 1, v52));
      v67 = (unint64_t *)&v51->__shared_weak_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
      v51[9].__vftable = v53;
      v51[9].__shared_owners_ = (uint64_t)v51;
    }
    do
      v69 = __ldaxr(v52);
    while (__stlxr(v69 - 1, v52));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
LABEL_91:
    v70 = (std::__shared_weak_count *)v447;
    v448[0] = v446;
    v448[1] = v447;
    v446 = 0;
    v447 = 0;
    SipTypedStateMachine<SipSessionState>::addState(a1 + 656, v448);
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v74 = v454;
    v73 = v455;
    v75 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v76 = v75;
    v75->__shared_owners_ = 0;
    v77 = (unint64_t *)&v75->__shared_owners_;
    v75->__shared_weak_owners_ = 0;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA620;
    v78 = (std::__shared_weak_count_vtbl *)&v75[1];
    v458 = (uint64_t)v74;
    v459 = (uint64_t)v73;
    if (v73)
    {
      v79 = (unint64_t *)&v73->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
      do
        v81 = __ldxr(v79);
      while (__stxr(v81 + 1, v79));
    }
    v451 = v74;
    v452 = v73;
    SipSessionState::SipSessionState((SipSessionState *)&v75[1], &v451);
    if (v73)
    {
      v82 = (unint64_t *)&v73->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E7C28;
    v76[1].__shared_owners_ = (uint64_t)&unk_1E78E7CD8;
    v84 = (std::__shared_weak_count *)v459;
    if (v459)
    {
      v85 = (unint64_t *)(v459 + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v446 = (uint64_t)v78;
    v447 = (uint64_t)v76;
    v87 = (std::__shared_weak_count *)v76[9].__shared_owners_;
    if (v87)
    {
      if (v87->__shared_owners_ != -1)
        goto LABEL_123;
      do
        v88 = __ldxr(v77);
      while (__stxr(v88 + 1, v77));
      v89 = (unint64_t *)&v76->__shared_weak_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
      v76[9].__vftable = v78;
      v76[9].__shared_owners_ = (uint64_t)v76;
      std::__shared_weak_count::__release_weak(v87);
    }
    else
    {
      do
        v91 = __ldxr(v77);
      while (__stxr(v91 + 1, v77));
      v92 = (unint64_t *)&v76->__shared_weak_owners_;
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
      v76[9].__vftable = v78;
      v76[9].__shared_owners_ = (uint64_t)v76;
    }
    do
      v94 = __ldaxr(v77);
    while (__stlxr(v94 - 1, v77));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
LABEL_123:
    v95 = (std::__shared_weak_count *)v447;
    v445[0] = v446;
    v445[1] = v447;
    v446 = 0;
    v447 = 0;
    SipTypedStateMachine<SipSessionState>::addState(a1 + 656, v445);
    if (v95)
    {
      v96 = (unint64_t *)&v95->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    v98 = (std::__shared_weak_count *)v447;
    if (v447)
    {
      v99 = (unint64_t *)(v447 + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v102 = v454;
    v101 = v455;
    v103 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v104 = v103;
    v103->__shared_owners_ = 0;
    v105 = (unint64_t *)&v103->__shared_owners_;
    v103->__shared_weak_owners_ = 0;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA670;
    v106 = (std::__shared_weak_count_vtbl *)&v103[1];
    v458 = (uint64_t)v102;
    v459 = (uint64_t)v101;
    if (v101)
    {
      v107 = (unint64_t *)&v101->__shared_owners_;
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
      do
        v109 = __ldxr(v107);
      while (__stxr(v109 + 1, v107));
    }
    v451 = v102;
    v452 = v101;
    SipSessionState::SipSessionState((SipSessionState *)&v103[1], &v451);
    if (v101)
    {
      v110 = (unint64_t *)&v101->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v104[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E7D08;
    v104[1].__shared_owners_ = (uint64_t)&unk_1E78E7DB0;
    v112 = (std::__shared_weak_count *)v459;
    if (v459)
    {
      v113 = (unint64_t *)(v459 + 8);
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    v446 = (uint64_t)v106;
    v447 = (uint64_t)v104;
    v115 = (std::__shared_weak_count *)v104[9].__shared_owners_;
    if (v115)
    {
      if (v115->__shared_owners_ != -1)
        goto LABEL_160;
      do
        v116 = __ldxr(v105);
      while (__stxr(v116 + 1, v105));
      v117 = (unint64_t *)&v104->__shared_weak_owners_;
      do
        v118 = __ldxr(v117);
      while (__stxr(v118 + 1, v117));
      v104[9].__vftable = v106;
      v104[9].__shared_owners_ = (uint64_t)v104;
      std::__shared_weak_count::__release_weak(v115);
    }
    else
    {
      do
        v119 = __ldxr(v105);
      while (__stxr(v119 + 1, v105));
      v120 = (unint64_t *)&v104->__shared_weak_owners_;
      do
        v121 = __ldxr(v120);
      while (__stxr(v121 + 1, v120));
      v104[9].__vftable = v106;
      v104[9].__shared_owners_ = (uint64_t)v104;
    }
    do
      v122 = __ldaxr(v105);
    while (__stlxr(v122 - 1, v105));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
LABEL_160:
    v123 = (std::__shared_weak_count *)v447;
    v444[0] = v446;
    v444[1] = v447;
    v446 = 0;
    v447 = 0;
    SipTypedStateMachine<SipSessionState>::addState(a1 + 656, v444);
    if (v123)
    {
      v124 = (unint64_t *)&v123->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v126 = (std::__shared_weak_count *)v447;
    if (v447)
    {
      v127 = (unint64_t *)(v447 + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    v130 = v454;
    v129 = v455;
    v131 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v132 = v131;
    v131->__shared_owners_ = 0;
    v133 = (unint64_t *)&v131->__shared_owners_;
    v131->__shared_weak_owners_ = 0;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA6C0;
    v134 = (std::__shared_weak_count_vtbl *)&v131[1];
    v458 = (uint64_t)v130;
    v459 = (uint64_t)v129;
    if (v129)
    {
      v135 = (unint64_t *)&v129->__shared_owners_;
      do
        v136 = __ldxr(v135);
      while (__stxr(v136 + 1, v135));
      do
        v137 = __ldxr(v135);
      while (__stxr(v137 + 1, v135));
    }
    v451 = v130;
    v452 = v129;
    SipSessionConfirmedState::SipSessionConfirmedState((SipSessionState *)&v131[1], (uint64_t)v130, v129);
    if (v129)
    {
      v138 = (unint64_t *)&v129->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    v132[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E7DE0;
    v132[1].__shared_owners_ = (uint64_t)&unk_1E78E7E90;
    v140 = (std::__shared_weak_count *)v459;
    if (v459)
    {
      v141 = (unint64_t *)(v459 + 8);
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    v446 = (uint64_t)v134;
    v447 = (uint64_t)v132;
    v143 = (std::__shared_weak_count *)v132[9].__shared_owners_;
    if (v143)
    {
      if (v143->__shared_owners_ != -1)
        goto LABEL_197;
      do
        v144 = __ldxr(v133);
      while (__stxr(v144 + 1, v133));
      v145 = (unint64_t *)&v132->__shared_weak_owners_;
      do
        v146 = __ldxr(v145);
      while (__stxr(v146 + 1, v145));
      v132[9].__vftable = v134;
      v132[9].__shared_owners_ = (uint64_t)v132;
      std::__shared_weak_count::__release_weak(v143);
    }
    else
    {
      do
        v147 = __ldxr(v133);
      while (__stxr(v147 + 1, v133));
      v148 = (unint64_t *)&v132->__shared_weak_owners_;
      do
        v149 = __ldxr(v148);
      while (__stxr(v149 + 1, v148));
      v132[9].__vftable = v134;
      v132[9].__shared_owners_ = (uint64_t)v132;
    }
    do
      v150 = __ldaxr(v133);
    while (__stlxr(v150 - 1, v133));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
LABEL_197:
    v151 = (std::__shared_weak_count *)v447;
    v443[0] = v446;
    v443[1] = v447;
    v446 = 0;
    v447 = 0;
    SipTypedStateMachine<SipSessionState>::addState(a1 + 656, v443);
    if (v151)
    {
      v152 = (unint64_t *)&v151->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
    v154 = (std::__shared_weak_count *)v447;
    if (v447)
    {
      v155 = (unint64_t *)(v447 + 8);
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      if (!v156)
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 240) + 1920))
    {
      SipPreconditions::initializeMobileOriginated((unsigned int *)(a1 + 1400), (_OWORD *)(a1 + 836));
      v158 = v454;
      v157 = v455;
      v159 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v160 = v159;
      v159->__shared_owners_ = 0;
      v161 = (unint64_t *)&v159->__shared_owners_;
      v159->__shared_weak_owners_ = 0;
      v159->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA710;
      v162 = (std::__shared_weak_count_vtbl *)&v159[1];
      v451 = v158;
      v452 = v157;
      if (v157)
      {
        v163 = (unint64_t *)&v157->__shared_owners_;
        do
          v164 = __ldxr(v163);
        while (__stxr(v164 + 1, v163));
      }
      SipSessionClientInviteState::SipSessionClientInviteState((SipSessionState *)&v159[1], (uint64_t)v158, v157);
      if (v157)
      {
        v165 = (unint64_t *)&v157->__shared_owners_;
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      v458 = (uint64_t)v162;
      v459 = (uint64_t)v160;
      v167 = (std::__shared_weak_count *)v160[9].__shared_owners_;
      if (v167)
      {
        if (v167->__shared_owners_ != -1)
          goto LABEL_229;
        do
          v168 = __ldxr(v161);
        while (__stxr(v168 + 1, v161));
        v169 = (unint64_t *)&v160->__shared_weak_owners_;
        do
          v170 = __ldxr(v169);
        while (__stxr(v170 + 1, v169));
        v160[9].__vftable = v162;
        v160[9].__shared_owners_ = (uint64_t)v160;
        std::__shared_weak_count::__release_weak(v167);
      }
      else
      {
        do
          v171 = __ldxr(v161);
        while (__stxr(v171 + 1, v161));
        v172 = (unint64_t *)&v160->__shared_weak_owners_;
        do
          v173 = __ldxr(v172);
        while (__stxr(v173 + 1, v172));
        v160[9].__vftable = v162;
        v160[9].__shared_owners_ = (uint64_t)v160;
      }
      do
        v174 = __ldaxr(v161);
      while (__stlxr(v174 - 1, v161));
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
        std::__shared_weak_count::__release_weak(v160);
      }
LABEL_229:
      v175 = (std::__shared_weak_count *)v459;
      v442[0] = v458;
      v442[1] = v459;
      v458 = 0;
      v459 = 0;
      SipTypedStateMachine<SipSessionState>::addState((uint64_t)v31, v442);
      if (v175)
      {
        v176 = (unint64_t *)&v175->__shared_owners_;
        do
          v177 = __ldaxr(v176);
        while (__stlxr(v177 - 1, v176));
        if (!v177)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
      v178 = (std::__shared_weak_count *)v459;
      if (v459)
      {
        v179 = (unint64_t *)(v459 + 8);
        do
          v180 = __ldaxr(v179);
        while (__stlxr(v180 - 1, v179));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
          std::__shared_weak_count::__release_weak(v178);
        }
      }
      v182 = v454;
      v181 = v455;
      v183 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v184 = v183;
      v183->__shared_owners_ = 0;
      v185 = (unint64_t *)&v183->__shared_owners_;
      v183->__shared_weak_owners_ = 0;
      v183->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA760;
      v186 = (std::__shared_weak_count_vtbl *)&v183[1];
      v458 = (uint64_t)v182;
      v459 = (uint64_t)v181;
      if (v181)
      {
        v187 = (unint64_t *)&v181->__shared_owners_;
        do
          v188 = __ldxr(v187);
        while (__stxr(v188 + 1, v187));
        do
          v189 = __ldxr(v187);
        while (__stxr(v189 + 1, v187));
      }
      v451 = v182;
      v452 = v181;
      SipSessionClientInviteState::SipSessionClientInviteState((SipSessionState *)&v183[1], (uint64_t)v182, v181);
      if (v181)
      {
        v190 = (unint64_t *)&v181->__shared_owners_;
        do
          v191 = __ldaxr(v190);
        while (__stlxr(v191 - 1, v190));
        if (!v191)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
      v184[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C5890;
      v184[1].__shared_owners_ = (uint64_t)&unk_1E78C5940;
      v192 = (std::__shared_weak_count *)v459;
      if (v459)
      {
        v193 = (unint64_t *)(v459 + 8);
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 - 1, v193));
        if (!v194)
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
        }
      }
      v446 = (uint64_t)v186;
      v447 = (uint64_t)v184;
      v195 = (std::__shared_weak_count *)v184[9].__shared_owners_;
      if (v195)
      {
        if (v195->__shared_owners_ != -1)
          goto LABEL_266;
        do
          v196 = __ldxr(v185);
        while (__stxr(v196 + 1, v185));
        v197 = (unint64_t *)&v184->__shared_weak_owners_;
        do
          v198 = __ldxr(v197);
        while (__stxr(v198 + 1, v197));
        v184[9].__vftable = v186;
        v184[9].__shared_owners_ = (uint64_t)v184;
        std::__shared_weak_count::__release_weak(v195);
      }
      else
      {
        do
          v199 = __ldxr(v185);
        while (__stxr(v199 + 1, v185));
        v200 = (unint64_t *)&v184->__shared_weak_owners_;
        do
          v201 = __ldxr(v200);
        while (__stxr(v201 + 1, v200));
        v184[9].__vftable = v186;
        v184[9].__shared_owners_ = (uint64_t)v184;
      }
      do
        v202 = __ldaxr(v185);
      while (__stlxr(v202 - 1, v185));
      if (!v202)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
LABEL_266:
      v203 = (std::__shared_weak_count *)v447;
      v441[0] = v446;
      v441[1] = v447;
      v446 = 0;
      v447 = 0;
      SipTypedStateMachine<SipSessionState>::addState((uint64_t)v31, v441);
      if (v203)
      {
        v204 = (unint64_t *)&v203->__shared_owners_;
        do
          v205 = __ldaxr(v204);
        while (__stlxr(v205 - 1, v204));
        if (!v205)
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
      }
      v206 = (std::__shared_weak_count *)v447;
      if (v447)
      {
        v207 = (unint64_t *)(v447 + 8);
        do
          v208 = __ldaxr(v207);
        while (__stlxr(v208 - 1, v207));
        if (!v208)
        {
          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
          std::__shared_weak_count::__release_weak(v206);
        }
      }
      v210 = v454;
      v209 = v455;
      v211 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v212 = v211;
      v211->__shared_owners_ = 0;
      v213 = (unint64_t *)&v211->__shared_owners_;
      v211->__shared_weak_owners_ = 0;
      v211->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA7B0;
      v214 = (std::__shared_weak_count_vtbl *)&v211[1];
      v458 = (uint64_t)v210;
      v459 = (uint64_t)v209;
      if (v209)
      {
        v215 = (unint64_t *)&v209->__shared_owners_;
        do
          v216 = __ldxr(v215);
        while (__stxr(v216 + 1, v215));
        do
          v217 = __ldxr(v215);
        while (__stxr(v217 + 1, v215));
      }
      v451 = v210;
      v452 = v209;
      SipSessionClientUnconfirmedState::SipSessionClientUnconfirmedState((SipSessionState *)&v211[1], (uint64_t)v210, v209);
      if (v209)
      {
        v218 = (unint64_t *)&v209->__shared_owners_;
        do
          v219 = __ldaxr(v218);
        while (__stlxr(v219 - 1, v218));
        if (!v219)
        {
          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
          std::__shared_weak_count::__release_weak(v209);
        }
      }
      v212[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA800;
      v212[1].__shared_owners_ = (uint64_t)&unk_1E78CA8A8;
      v220 = (std::__shared_weak_count *)v459;
      if (v459)
      {
        v221 = (unint64_t *)(v459 + 8);
        do
          v222 = __ldaxr(v221);
        while (__stlxr(v222 - 1, v221));
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
      }
      v446 = (uint64_t)v214;
      v447 = (uint64_t)v212;
      v223 = (std::__shared_weak_count *)v212[9].__shared_owners_;
      if (v223)
      {
        if (v223->__shared_owners_ != -1)
          goto LABEL_303;
        do
          v224 = __ldxr(v213);
        while (__stxr(v224 + 1, v213));
        v225 = (unint64_t *)&v212->__shared_weak_owners_;
        do
          v226 = __ldxr(v225);
        while (__stxr(v226 + 1, v225));
        v212[9].__vftable = v214;
        v212[9].__shared_owners_ = (uint64_t)v212;
        std::__shared_weak_count::__release_weak(v223);
      }
      else
      {
        do
          v227 = __ldxr(v213);
        while (__stxr(v227 + 1, v213));
        v228 = (unint64_t *)&v212->__shared_weak_owners_;
        do
          v229 = __ldxr(v228);
        while (__stxr(v229 + 1, v228));
        v212[9].__vftable = v214;
        v212[9].__shared_owners_ = (uint64_t)v212;
      }
      do
        v230 = __ldaxr(v213);
      while (__stlxr(v230 - 1, v213));
      if (!v230)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
LABEL_303:
      v231 = (std::__shared_weak_count *)v447;
      v440[0] = v446;
      v440[1] = v447;
      v446 = 0;
      v447 = 0;
      SipTypedStateMachine<SipSessionState>::addState((uint64_t)v31, v440);
      if (v231)
      {
        v232 = (unint64_t *)&v231->__shared_owners_;
        do
          v233 = __ldaxr(v232);
        while (__stlxr(v233 - 1, v232));
        if (!v233)
        {
          ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
          std::__shared_weak_count::__release_weak(v231);
        }
      }
      v234 = (std::__shared_weak_count *)v447;
      if (v447)
      {
        v235 = (unint64_t *)(v447 + 8);
        do
          v236 = __ldaxr(v235);
        while (__stlxr(v236 - 1, v235));
        if (!v236)
        {
          ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
          std::__shared_weak_count::__release_weak(v234);
        }
      }
      v238 = v454;
      v237 = v455;
      v239 = (std::__shared_weak_count *)operator new(0x100uLL);
      v240 = v239;
      v239->__shared_owners_ = 0;
      v241 = (unint64_t *)&v239->__shared_owners_;
      v239->__shared_weak_owners_ = 0;
      v239->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA8F0;
      v242 = (std::__shared_weak_count_vtbl *)&v239[1];
      v451 = v238;
      v452 = v237;
      if (v237)
      {
        v243 = (unint64_t *)&v237->__shared_owners_;
        do
          v244 = __ldxr(v243);
        while (__stxr(v244 + 1, v243));
      }
      SipSessionClientCanceledState::SipSessionClientCanceledState((uint64_t)&v239[1], (uint64_t)v238, v237);
      if (v237)
      {
        v245 = (unint64_t *)&v237->__shared_owners_;
        do
          v246 = __ldaxr(v245);
        while (__stlxr(v246 - 1, v245));
        if (!v246)
        {
          ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
          std::__shared_weak_count::__release_weak(v237);
        }
      }
      v458 = (uint64_t)v242;
      v459 = (uint64_t)v240;
      v247 = (std::__shared_weak_count *)v240[9].__shared_owners_;
      if (v247)
      {
        if (v247->__shared_owners_ != -1)
          goto LABEL_334;
        do
          v248 = __ldxr(v241);
        while (__stxr(v248 + 1, v241));
        v249 = (unint64_t *)&v240->__shared_weak_owners_;
        do
          v250 = __ldxr(v249);
        while (__stxr(v250 + 1, v249));
        v240[9].__vftable = v242;
        v240[9].__shared_owners_ = (uint64_t)v240;
        std::__shared_weak_count::__release_weak(v247);
      }
      else
      {
        do
          v251 = __ldxr(v241);
        while (__stxr(v251 + 1, v241));
        v252 = (unint64_t *)&v240->__shared_weak_owners_;
        do
          v253 = __ldxr(v252);
        while (__stxr(v253 + 1, v252));
        v240[9].__vftable = v242;
        v240[9].__shared_owners_ = (uint64_t)v240;
      }
      do
        v254 = __ldaxr(v241);
      while (__stlxr(v254 - 1, v241));
      if (!v254)
      {
        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
        std::__shared_weak_count::__release_weak(v240);
      }
LABEL_334:
      v255 = (std::__shared_weak_count *)v459;
      v439[0] = v458;
      v439[1] = v459;
      v458 = 0;
      v459 = 0;
      SipTypedStateMachine<SipSessionState>::addState((uint64_t)v31, v439);
      if (v255)
      {
        v256 = (unint64_t *)&v255->__shared_owners_;
        do
          v257 = __ldaxr(v256);
        while (__stlxr(v257 - 1, v256));
        if (!v257)
        {
          ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
          std::__shared_weak_count::__release_weak(v255);
        }
      }
      v258 = (std::__shared_weak_count *)v459;
      if (v459)
      {
        v259 = (unint64_t *)(v459 + 8);
        do
          v260 = __ldaxr(v259);
        while (__stlxr(v260 - 1, v259));
        if (!v260)
        {
          ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
          std::__shared_weak_count::__release_weak(v258);
        }
      }
      v262 = v454;
      v261 = v455;
      v263 = (std::__shared_weak_count *)operator new(0x100uLL);
      v264 = v263;
      v263->__shared_owners_ = 0;
      v265 = (unint64_t *)&v263->__shared_owners_;
      v263->__shared_weak_owners_ = 0;
      v263->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA940;
      v266 = (std::__shared_weak_count_vtbl *)&v263[1];
      v458 = (uint64_t)v262;
      v459 = (uint64_t)v261;
      if (v261)
      {
        v267 = (unint64_t *)&v261->__shared_owners_;
        do
          v268 = __ldxr(v267);
        while (__stxr(v268 + 1, v267));
        do
          v269 = __ldxr(v267);
        while (__stxr(v269 + 1, v267));
      }
      v451 = v262;
      v452 = v261;
      SipSessionClientCanceledState::SipSessionClientCanceledState((uint64_t)&v263[1], (uint64_t)v262, v261);
      if (v261)
      {
        v270 = (unint64_t *)&v261->__shared_owners_;
        do
          v271 = __ldaxr(v270);
        while (__stlxr(v271 - 1, v270));
        if (!v271)
        {
          ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
          std::__shared_weak_count::__release_weak(v261);
        }
      }
      v264[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C5A68;
      v264[1].__shared_owners_ = (uint64_t)&unk_1E78C5B18;
      v272 = (std::__shared_weak_count *)v459;
      if (v459)
      {
        v273 = (unint64_t *)(v459 + 8);
        do
          v274 = __ldaxr(v273);
        while (__stlxr(v274 - 1, v273));
        if (!v274)
        {
          ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
          std::__shared_weak_count::__release_weak(v272);
        }
      }
      v446 = (uint64_t)v266;
      v447 = (uint64_t)v264;
      v275 = (std::__shared_weak_count *)v264[9].__shared_owners_;
      if (v275)
      {
        if (v275->__shared_owners_ != -1)
          goto LABEL_371;
        do
          v276 = __ldxr(v265);
        while (__stxr(v276 + 1, v265));
        v277 = (unint64_t *)&v264->__shared_weak_owners_;
        do
          v278 = __ldxr(v277);
        while (__stxr(v278 + 1, v277));
        v264[9].__vftable = v266;
        v264[9].__shared_owners_ = (uint64_t)v264;
        std::__shared_weak_count::__release_weak(v275);
      }
      else
      {
        do
          v279 = __ldxr(v265);
        while (__stxr(v279 + 1, v265));
        v280 = (unint64_t *)&v264->__shared_weak_owners_;
        do
          v281 = __ldxr(v280);
        while (__stxr(v281 + 1, v280));
        v264[9].__vftable = v266;
        v264[9].__shared_owners_ = (uint64_t)v264;
      }
      do
        v282 = __ldaxr(v265);
      while (__stlxr(v282 - 1, v265));
      if (!v282)
      {
        ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
        std::__shared_weak_count::__release_weak(v264);
      }
LABEL_371:
      v283 = (std::__shared_weak_count *)v447;
      v438[0] = v446;
      v438[1] = v447;
      v446 = 0;
      v447 = 0;
      SipTypedStateMachine<SipSessionState>::addState((uint64_t)v31, v438);
      if (v283)
      {
        v284 = (unint64_t *)&v283->__shared_owners_;
        do
          v285 = __ldaxr(v284);
        while (__stlxr(v285 - 1, v284));
        if (!v285)
        {
          ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
          std::__shared_weak_count::__release_weak(v283);
        }
      }
      v286 = (std::__shared_weak_count *)v447;
      if (v447)
      {
        v287 = (unint64_t *)(v447 + 8);
        do
          v288 = __ldaxr(v287);
        while (__stlxr(v288 - 1, v287));
        if (!v288)
        {
          ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
          std::__shared_weak_count::__release_weak(v286);
        }
      }
      v290 = v454;
      v289 = v455;
      v291 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v292 = v291;
      v291->__shared_owners_ = 0;
      v293 = (unint64_t *)&v291->__shared_owners_;
      v291->__shared_weak_owners_ = 0;
      v291->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA990;
      v294 = (std::__shared_weak_count_vtbl *)&v291[1];
      v458 = (uint64_t)v290;
      v459 = (uint64_t)v289;
      if (v289)
      {
        v295 = (unint64_t *)&v289->__shared_owners_;
        do
          v296 = __ldxr(v295);
        while (__stxr(v296 + 1, v295));
        do
          v297 = __ldxr(v295);
        while (__stxr(v297 + 1, v295));
      }
      v451 = v290;
      v452 = v289;
      SipSessionState::SipSessionState((SipSessionState *)&v291[1], &v451);
      if (v289)
      {
        v298 = (unint64_t *)&v289->__shared_owners_;
        do
          v299 = __ldaxr(v298);
        while (__stlxr(v299 - 1, v298));
        if (!v299)
        {
          ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
          std::__shared_weak_count::__release_weak(v289);
        }
      }
      v292[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C5B48;
      v292[1].__shared_owners_ = (uint64_t)&unk_1E78C5BF8;
      v300 = (std::__shared_weak_count *)v459;
      if (v459)
      {
        v301 = (unint64_t *)(v459 + 8);
        do
          v302 = __ldaxr(v301);
        while (__stlxr(v302 - 1, v301));
        if (!v302)
        {
          ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
          std::__shared_weak_count::__release_weak(v300);
        }
      }
      v446 = (uint64_t)v294;
      v447 = (uint64_t)v292;
      v303 = (std::__shared_weak_count *)v292[9].__shared_owners_;
      if (v303)
      {
        if (v303->__shared_owners_ != -1)
        {
LABEL_408:
          v311 = (std::__shared_weak_count *)v447;
          v437[0] = v446;
          v437[1] = v447;
          v446 = 0;
          v447 = 0;
          SipTypedStateMachine<SipSessionState>::addState((uint64_t)v31, v437);
          if (v311)
          {
            v312 = (unint64_t *)&v311->__shared_owners_;
            do
              v313 = __ldaxr(v312);
            while (__stlxr(v313 - 1, v312));
            if (!v313)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
            }
          }
          v314 = (std::__shared_weak_count *)v447;
          if (v447)
          {
            v315 = (unint64_t *)(v447 + 8);
            do
              v316 = __ldaxr(v315);
            while (__stlxr(v316 - 1, v315));
            if (!v316)
            {
              ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
              std::__shared_weak_count::__release_weak(v314);
            }
          }
          goto LABEL_569;
        }
        do
          v304 = __ldxr(v293);
        while (__stxr(v304 + 1, v293));
        v305 = (unint64_t *)&v292->__shared_weak_owners_;
        do
          v306 = __ldxr(v305);
        while (__stxr(v306 + 1, v305));
        v292[9].__vftable = v294;
        v292[9].__shared_owners_ = (uint64_t)v292;
        std::__shared_weak_count::__release_weak(v303);
      }
      else
      {
        do
          v307 = __ldxr(v293);
        while (__stxr(v307 + 1, v293));
        v308 = (unint64_t *)&v292->__shared_weak_owners_;
        do
          v309 = __ldxr(v308);
        while (__stxr(v309 + 1, v308));
        v292[9].__vftable = v294;
        v292[9].__shared_owners_ = (uint64_t)v292;
      }
      do
        v310 = __ldaxr(v293);
      while (__stlxr(v310 - 1, v293));
      if (!v310)
      {
        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
        std::__shared_weak_count::__release_weak(v292);
      }
      goto LABEL_408;
    }
    v319 = v454;
    v318 = v455;
    v320 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v321 = v320;
    v320->__shared_owners_ = 0;
    v322 = (unint64_t *)&v320->__shared_owners_;
    v320->__shared_weak_owners_ = 0;
    v320->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA9E0;
    v323 = (std::__shared_weak_count_vtbl *)&v320[1];
    v458 = (uint64_t)v319;
    v459 = (uint64_t)v318;
    if (v318)
    {
      v324 = (unint64_t *)&v318->__shared_owners_;
      do
        v325 = __ldxr(v324);
      while (__stxr(v325 + 1, v324));
      do
        v326 = __ldxr(v324);
      while (__stxr(v326 + 1, v324));
    }
    v451 = v319;
    v452 = v318;
    SipSessionServerUnconfirmedState::SipSessionServerUnconfirmedState((SipSessionState *)&v320[1], (uint64_t)v319, v318);
    if (v318)
    {
      v327 = (unint64_t *)&v318->__shared_owners_;
      do
        v328 = __ldaxr(v327);
      while (__stlxr(v328 - 1, v327));
      if (!v328)
      {
        ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
        std::__shared_weak_count::__release_weak(v318);
      }
    }
    v321[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DC528;
    v321[1].__shared_owners_ = (uint64_t)&unk_1E78DC5D0;
    v329 = (std::__shared_weak_count *)v459;
    if (v459)
    {
      v330 = (unint64_t *)(v459 + 8);
      do
        v331 = __ldaxr(v330);
      while (__stlxr(v331 - 1, v330));
      if (!v331)
      {
        ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
        std::__shared_weak_count::__release_weak(v329);
      }
    }
    v446 = (uint64_t)v323;
    v447 = (uint64_t)v321;
    v332 = (std::__shared_weak_count *)v321[9].__shared_owners_;
    if (v332)
    {
      if (v332->__shared_owners_ != -1)
        goto LABEL_447;
      do
        v333 = __ldxr(v322);
      while (__stxr(v333 + 1, v322));
      v334 = (unint64_t *)&v321->__shared_weak_owners_;
      do
        v335 = __ldxr(v334);
      while (__stxr(v335 + 1, v334));
      v321[9].__vftable = v323;
      v321[9].__shared_owners_ = (uint64_t)v321;
      std::__shared_weak_count::__release_weak(v332);
    }
    else
    {
      do
        v336 = __ldxr(v322);
      while (__stxr(v336 + 1, v322));
      v337 = (unint64_t *)&v321->__shared_weak_owners_;
      do
        v338 = __ldxr(v337);
      while (__stxr(v338 + 1, v337));
      v321[9].__vftable = v323;
      v321[9].__shared_owners_ = (uint64_t)v321;
    }
    do
      v339 = __ldaxr(v322);
    while (__stlxr(v339 - 1, v322));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
      std::__shared_weak_count::__release_weak(v321);
    }
LABEL_447:
    v340 = (std::__shared_weak_count *)v447;
    v436[0] = v446;
    v436[1] = v447;
    v446 = 0;
    v447 = 0;
    SipTypedStateMachine<SipSessionState>::addState((uint64_t)v31, v436);
    if (v340)
    {
      v341 = (unint64_t *)&v340->__shared_owners_;
      do
        v342 = __ldaxr(v341);
      while (__stlxr(v342 - 1, v341));
      if (!v342)
      {
        ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
        std::__shared_weak_count::__release_weak(v340);
      }
    }
    v343 = (std::__shared_weak_count *)v447;
    if (v447)
    {
      v344 = (unint64_t *)(v447 + 8);
      do
        v345 = __ldaxr(v344);
      while (__stlxr(v345 - 1, v344));
      if (!v345)
      {
        ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
        std::__shared_weak_count::__release_weak(v343);
      }
    }
    v347 = v454;
    v346 = v455;
    v348 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v349 = v348;
    v348->__shared_owners_ = 0;
    v350 = (unint64_t *)&v348->__shared_owners_;
    v348->__shared_weak_owners_ = 0;
    v348->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CAA30;
    v351 = (std::__shared_weak_count_vtbl *)&v348[1];
    v458 = (uint64_t)v347;
    v459 = (uint64_t)v346;
    if (v346)
    {
      v352 = (unint64_t *)&v346->__shared_owners_;
      do
        v353 = __ldxr(v352);
      while (__stxr(v353 + 1, v352));
      do
        v354 = __ldxr(v352);
      while (__stxr(v354 + 1, v352));
    }
    v451 = v347;
    v452 = v346;
    SipSessionServerUnconfirmedState::SipSessionServerUnconfirmedState((SipSessionState *)&v348[1], (uint64_t)v347, v346);
    if (v346)
    {
      v355 = (unint64_t *)&v346->__shared_owners_;
      do
        v356 = __ldaxr(v355);
      while (__stlxr(v356 - 1, v355));
      if (!v356)
      {
        ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
        std::__shared_weak_count::__release_weak(v346);
      }
    }
    v349[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CAA80;
    v349[1].__shared_owners_ = (uint64_t)&unk_1E78CAB28;
    v357 = (std::__shared_weak_count *)v459;
    if (v459)
    {
      v358 = (unint64_t *)(v459 + 8);
      do
        v359 = __ldaxr(v358);
      while (__stlxr(v359 - 1, v358));
      if (!v359)
      {
        ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
        std::__shared_weak_count::__release_weak(v357);
      }
    }
    v446 = (uint64_t)v351;
    v447 = (uint64_t)v349;
    v360 = (std::__shared_weak_count *)v349[9].__shared_owners_;
    if (v360)
    {
      if (v360->__shared_owners_ != -1)
        goto LABEL_484;
      do
        v361 = __ldxr(v350);
      while (__stxr(v361 + 1, v350));
      v362 = (unint64_t *)&v349->__shared_weak_owners_;
      do
        v363 = __ldxr(v362);
      while (__stxr(v363 + 1, v362));
      v349[9].__vftable = v351;
      v349[9].__shared_owners_ = (uint64_t)v349;
      std::__shared_weak_count::__release_weak(v360);
    }
    else
    {
      do
        v364 = __ldxr(v350);
      while (__stxr(v364 + 1, v350));
      v365 = (unint64_t *)&v349->__shared_weak_owners_;
      do
        v366 = __ldxr(v365);
      while (__stxr(v366 + 1, v365));
      v349[9].__vftable = v351;
      v349[9].__shared_owners_ = (uint64_t)v349;
    }
    do
      v367 = __ldaxr(v350);
    while (__stlxr(v367 - 1, v350));
    if (!v367)
    {
      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
      std::__shared_weak_count::__release_weak(v349);
    }
LABEL_484:
    v368 = (std::__shared_weak_count *)v447;
    v435[0] = v446;
    v435[1] = v447;
    v446 = 0;
    v447 = 0;
    SipTypedStateMachine<SipSessionState>::addState((uint64_t)v31, v435);
    if (v368)
    {
      v369 = (unint64_t *)&v368->__shared_owners_;
      do
        v370 = __ldaxr(v369);
      while (__stlxr(v370 - 1, v369));
      if (!v370)
      {
        ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
        std::__shared_weak_count::__release_weak(v368);
      }
    }
    v371 = (std::__shared_weak_count *)v447;
    if (v447)
    {
      v372 = (unint64_t *)(v447 + 8);
      do
        v373 = __ldaxr(v372);
      while (__stlxr(v373 - 1, v372));
      if (!v373)
      {
        ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
        std::__shared_weak_count::__release_weak(v371);
      }
    }
    v375 = v454;
    v374 = v455;
    v376 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v377 = v376;
    v376->__shared_owners_ = 0;
    v378 = (unint64_t *)&v376->__shared_owners_;
    v376->__shared_weak_owners_ = 0;
    v376->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CAB70;
    v379 = (std::__shared_weak_count_vtbl *)&v376[1];
    v458 = (uint64_t)v375;
    v459 = (uint64_t)v374;
    if (v374)
    {
      v380 = (unint64_t *)&v374->__shared_owners_;
      do
        v381 = __ldxr(v380);
      while (__stxr(v381 + 1, v380));
      do
        v382 = __ldxr(v380);
      while (__stxr(v382 + 1, v380));
    }
    v451 = v375;
    v452 = v374;
    SipSessionState::SipSessionState((SipSessionState *)&v376[1], &v451);
    if (v374)
    {
      v383 = (unint64_t *)&v374->__shared_owners_;
      do
        v384 = __ldaxr(v383);
      while (__stlxr(v384 - 1, v383));
      if (!v384)
      {
        ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
        std::__shared_weak_count::__release_weak(v374);
      }
    }
    v377[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DC6F0;
    v377[1].__shared_owners_ = (uint64_t)&unk_1E78DC798;
    v385 = (std::__shared_weak_count *)v459;
    if (v459)
    {
      v386 = (unint64_t *)(v459 + 8);
      do
        v387 = __ldaxr(v386);
      while (__stlxr(v387 - 1, v386));
      if (!v387)
      {
        ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
        std::__shared_weak_count::__release_weak(v385);
      }
    }
    v446 = (uint64_t)v379;
    v447 = (uint64_t)v377;
    v388 = (std::__shared_weak_count *)v377[9].__shared_owners_;
    if (v388)
    {
      if (v388->__shared_owners_ != -1)
        goto LABEL_521;
      do
        v389 = __ldxr(v378);
      while (__stxr(v389 + 1, v378));
      v390 = (unint64_t *)&v377->__shared_weak_owners_;
      do
        v391 = __ldxr(v390);
      while (__stxr(v391 + 1, v390));
      v377[9].__vftable = v379;
      v377[9].__shared_owners_ = (uint64_t)v377;
      std::__shared_weak_count::__release_weak(v388);
    }
    else
    {
      do
        v392 = __ldxr(v378);
      while (__stxr(v392 + 1, v378));
      v393 = (unint64_t *)&v377->__shared_weak_owners_;
      do
        v394 = __ldxr(v393);
      while (__stxr(v394 + 1, v393));
      v377[9].__vftable = v379;
      v377[9].__shared_owners_ = (uint64_t)v377;
    }
    do
      v395 = __ldaxr(v378);
    while (__stlxr(v395 - 1, v378));
    if (!v395)
    {
      ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
      std::__shared_weak_count::__release_weak(v377);
    }
LABEL_521:
    v396 = (std::__shared_weak_count *)v447;
    v434[0] = v446;
    v434[1] = v447;
    v446 = 0;
    v447 = 0;
    SipTypedStateMachine<SipSessionState>::addState((uint64_t)v31, v434);
    if (v396)
    {
      v397 = (unint64_t *)&v396->__shared_owners_;
      do
        v398 = __ldaxr(v397);
      while (__stlxr(v398 - 1, v397));
      if (!v398)
      {
        ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
        std::__shared_weak_count::__release_weak(v396);
      }
    }
    v399 = (std::__shared_weak_count *)v447;
    if (v447)
    {
      v400 = (unint64_t *)(v447 + 8);
      do
        v401 = __ldaxr(v400);
      while (__stlxr(v401 - 1, v400));
      if (!v401)
      {
        ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
        std::__shared_weak_count::__release_weak(v399);
      }
    }
    v403 = v454;
    v402 = v455;
    v404 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v405 = v404;
    v404->__shared_owners_ = 0;
    v406 = (unint64_t *)&v404->__shared_owners_;
    v404->__shared_weak_owners_ = 0;
    v404->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CABC0;
    v407 = (std::__shared_weak_count_vtbl *)&v404[1];
    v458 = (uint64_t)v403;
    v459 = (uint64_t)v402;
    if (v402)
    {
      v408 = (unint64_t *)&v402->__shared_owners_;
      do
        v409 = __ldxr(v408);
      while (__stxr(v409 + 1, v408));
      do
        v410 = __ldxr(v408);
      while (__stxr(v410 + 1, v408));
    }
    v451 = v403;
    v452 = v402;
    SipSessionState::SipSessionState((SipSessionState *)&v404[1], &v451);
    if (v402)
    {
      v411 = (unint64_t *)&v402->__shared_owners_;
      do
        v412 = __ldaxr(v411);
      while (__stlxr(v412 - 1, v411));
      if (!v412)
      {
        ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
        std::__shared_weak_count::__release_weak(v402);
      }
    }
    v405[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DC7C8;
    v405[1].__shared_owners_ = (uint64_t)&unk_1E78DC878;
    v413 = (std::__shared_weak_count *)v459;
    if (v459)
    {
      v414 = (unint64_t *)(v459 + 8);
      do
        v415 = __ldaxr(v414);
      while (__stlxr(v415 - 1, v414));
      if (!v415)
      {
        ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
        std::__shared_weak_count::__release_weak(v413);
      }
    }
    v446 = (uint64_t)v407;
    v447 = (uint64_t)v405;
    v416 = (std::__shared_weak_count *)v405[9].__shared_owners_;
    if (v416)
    {
      if (v416->__shared_owners_ != -1)
      {
LABEL_558:
        v424 = (std::__shared_weak_count *)v447;
        v433[0] = v446;
        v433[1] = v447;
        v446 = 0;
        v447 = 0;
        SipTypedStateMachine<SipSessionState>::addState((uint64_t)v31, v433);
        if (v424)
        {
          v425 = (unint64_t *)&v424->__shared_owners_;
          do
            v426 = __ldaxr(v425);
          while (__stlxr(v426 - 1, v425));
          if (!v426)
          {
            ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
            std::__shared_weak_count::__release_weak(v424);
          }
        }
        v427 = (std::__shared_weak_count *)v447;
        if (v447)
        {
          v428 = (unint64_t *)(v447 + 8);
          do
            v429 = __ldaxr(v428);
          while (__stlxr(v429 - 1, v428));
          if (!v429)
          {
            ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
            std::__shared_weak_count::__release_weak(v427);
          }
        }
        SipTypedStateMachine<SipSessionState>::transitionToState(v31, 3);
        goto LABEL_569;
      }
      do
        v417 = __ldxr(v406);
      while (__stxr(v417 + 1, v406));
      v418 = (unint64_t *)&v405->__shared_weak_owners_;
      do
        v419 = __ldxr(v418);
      while (__stxr(v419 + 1, v418));
      v405[9].__vftable = v407;
      v405[9].__shared_owners_ = (uint64_t)v405;
      std::__shared_weak_count::__release_weak(v416);
    }
    else
    {
      do
        v420 = __ldxr(v406);
      while (__stxr(v420 + 1, v406));
      v421 = (unint64_t *)&v405->__shared_weak_owners_;
      do
        v422 = __ldxr(v421);
      while (__stxr(v422 + 1, v421));
      v405[9].__vftable = v407;
      v405[9].__shared_owners_ = (uint64_t)v405;
    }
    do
      v423 = __ldaxr(v406);
    while (__stlxr(v423 - 1, v406));
    if (!v423)
    {
      ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
      std::__shared_weak_count::__release_weak(v405);
    }
    goto LABEL_558;
  }
  v317 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v317);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v317 + 8), (uint64_t)"Couldn't initialize ", 20);
  *(_BYTE *)(v317 + 17) = 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 320))(&v451, a1);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v317 + 40))(v317, &v451);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v317 + 64))(v317, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v317 + 17) = 0;
  if (v453 < 0)
    operator delete(v451);
LABEL_569:
  v430 = v455;
  if (v455)
  {
    v431 = (unint64_t *)&v455->__shared_owners_;
    do
      v432 = __ldaxr(v431);
    while (__stlxr(v432 - 1, v431));
    if (!v432)
    {
      ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
      std::__shared_weak_count::__release_weak(v430);
    }
  }
}

void sub_1BEF5DA1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 200);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 112);
  _Unwind_Resume(a1);
}

_QWORD *SipTypedStateMachine<SipSessionState>::addState(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v36;
  _QWORD v37[3];

  result = (_QWORD *)*a2;
  if (!*a2)
    return result;
  v5 = (*(uint64_t (**)(_QWORD *))(*result + 48))(result);
  v6 = v5;
  v7 = v5;
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v5;
      if (v8 <= v5)
        v10 = v5 % v8;
    }
    else
    {
      v10 = ((_DWORD)v8 - 1) & v5;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)(a1 + 16) + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == v5)
        {
          if (*((_DWORD *)i + 4) == v5)
            return std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](i + 3, *a2, a2[1]);
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v14 = (_QWORD *)(a1 + 32);
  v37[2] = 1;
  v15 = operator new(0x28uLL);
  v37[0] = v15;
  v37[1] = a1 + 32;
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = v6;
  v15[3] = 0;
  v15[4] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v17 = *(float *)(a1 + 48);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v10;
    goto LABEL_66;
  }
  v18 = 1;
  if (v8 >= 3)
    v18 = (v8 & (v8 - 1)) != 0;
  v19 = v18 | (2 * v8);
  v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20)
    prime = (int8x8_t)v20;
  else
    prime = (int8x8_t)v19;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v8 = *(_QWORD *)(a1 + 24);
  }
  if (*(_QWORD *)&prime <= v8)
  {
    if (*(_QWORD *)&prime >= v8)
      goto LABEL_62;
    v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
    if (v8 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
    {
      v28 = std::__next_prime(v28);
    }
    else
    {
      v30 = 1 << -(char)__clz(v28 - 1);
      if (v28 >= 2)
        v28 = v30;
    }
    if (*(_QWORD *)&prime <= v28)
      prime = (int8x8_t)v28;
    if (*(_QWORD *)&prime >= v8)
    {
      v8 = *(_QWORD *)(a1 + 24);
      goto LABEL_62;
    }
    if (!*(_QWORD *)&prime)
    {
      v36 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v36)
        operator delete(v36);
      v8 = 0;
      *(_QWORD *)(a1 + 24) = 0;
      goto LABEL_62;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v22 = operator new(8 * *(_QWORD *)&prime);
  v23 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v22;
  if (v23)
    operator delete(v23);
  v24 = 0;
  *(int8x8_t *)(a1 + 24) = prime;
  do
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v24++) = 0;
  while (*(_QWORD *)&prime != v24);
  v25 = (_QWORD *)*v14;
  if (*v14)
  {
    v26 = v25[1];
    v27 = (uint8x8_t)vcnt_s8(prime);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      if (v26 >= *(_QWORD *)&prime)
        v26 %= *(_QWORD *)&prime;
    }
    else
    {
      v26 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v26) = v14;
    v31 = (_QWORD *)*v25;
    if (*v25)
    {
      do
      {
        v32 = v31[1];
        if (v27.u32[0] > 1uLL)
        {
          if (v32 >= *(_QWORD *)&prime)
            v32 %= *(_QWORD *)&prime;
        }
        else
        {
          v32 &= *(_QWORD *)&prime - 1;
        }
        if (v32 != v26)
        {
          v33 = *(_QWORD *)(a1 + 16);
          if (!*(_QWORD *)(v33 + 8 * v32))
          {
            *(_QWORD *)(v33 + 8 * v32) = v25;
            goto LABEL_58;
          }
          *v25 = *v31;
          *v31 = **(_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * v32);
          **(_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * v32) = v31;
          v31 = v25;
        }
        v32 = v26;
LABEL_58:
        v25 = v31;
        v31 = (_QWORD *)*v31;
        v26 = v32;
      }
      while (v31);
    }
  }
  v8 = (unint64_t)prime;
LABEL_62:
  if ((v8 & (v8 - 1)) != 0)
  {
    if (v8 <= v7)
      v7 %= v8;
  }
  else
  {
    v7 = ((_DWORD)v8 - 1) & v7;
  }
LABEL_66:
  v34 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * v7);
  i = (uint64_t *)v37[0];
  if (v34)
  {
    *(_QWORD *)v37[0] = *v34;
  }
  else
  {
    *(_QWORD *)v37[0] = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = i;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v7) = v14;
    if (!*i)
      goto LABEL_75;
    v35 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8)
        v35 %= v8;
    }
    else
    {
      v35 &= v8 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v35);
  }
  *v34 = i;
LABEL_75:
  v37[0] = 0;
  ++*(_QWORD *)(a1 + 40);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>>>>::reset[abi:ne180100]((uint64_t)v37);
  return std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](i + 3, *a2, a2[1]);
}

void sub_1BEF5E0CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SipTypedStateMachine<SipSessionState>::transitionToState(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const std::string *v12;
  std::string::size_type v14;
  _QWORD *v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string::size_type v36;
  std::__shared_weak_count *v37;
  std::string __p;

  v4 = a1[3];
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = a2;
      if (v4 <= a2)
        v6 = a2 % v4;
    }
    else
    {
      v6 = ((_DWORD)v4 - 1) & a2;
    }
    v7 = *(uint64_t ***)(a1[2] + 8 * v6);
    if (v7)
    {
      for (i = *v7; i; i = (uint64_t *)*i)
      {
        v9 = i[1];
        if (v9 == a2)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)a2)
          {
            v14 = a1[7];
            v16 = a1[8];
            v15 = a1 + 7;
            __p.__r_.__value_.__r.__words[0] = v14;
            __p.__r_.__value_.__l.__size_ = v16;
            if (v16)
            {
              v17 = (unint64_t *)(v16 + 8);
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            if (v14)
            {
              v19 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v14 + 48))(v14);
              (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)v14 + 64))(v14, a2);
            }
            else
            {
              v19 = 0;
            }
            std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](a1 + 7, i[3], i[4]);
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v15 + 56))(*v15, v19);
            v36 = v14;
            v37 = (std::__shared_weak_count *)v16;
            if (v16)
            {
              v20 = (unint64_t *)(v16 + 8);
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
            v22 = (std::__shared_weak_count *)a1[8];
            v34 = a1[7];
            v35 = v22;
            if (v22)
            {
              p_shared_owners = (unint64_t *)&v22->__shared_owners_;
              do
                v24 = __ldxr(p_shared_owners);
              while (__stxr(v24 + 1, p_shared_owners));
            }
            (*(void (**)(_QWORD *, std::string::size_type *, uint64_t *))(*a1 + 56))(a1, &v36, &v34);
            v25 = v35;
            if (v35)
            {
              v26 = (unint64_t *)&v35->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            v28 = v37;
            if (v37)
            {
              v29 = (unint64_t *)&v37->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            return 1;
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= v4)
              v9 %= v4;
          }
          else
          {
            v9 &= v4 - 1;
          }
          if (v9 != v6)
            break;
        }
      }
    }
  }
  v10 = a1[1];
  if (v10)
  {
    v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 56))(a1[1]);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"transitionToState: no such state ", 33);
    *(_BYTE *)(v11 + 17) = 0;
    v12 = (const std::string *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
    LoggableString::LoggableString(&__p, v12);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 40))(v11, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1BEF5E3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void SipSession::replaceDialog(uint64_t *a1, uint64_t *a2, const SipMessage *a3, const std::string *a4)
{
  uint64_t v7;
  uint64_t *v8;
  SipRequest *RequestInDialog;
  uint64_t v11;
  SipUserAgent *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  void **p_p;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  SipUriHeader *v35;
  __int128 *v36;
  void **v37;
  void **v38;
  SipDialogFork *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  SipUriHeader *v44;
  __int128 *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void *__p;
  std::__shared_weak_count *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;

  v8 = a1 + 30;
  v7 = a1[30];
  if (v7)
  {
    RequestInDialog = SipDialog::createRequestInDialog(v7, (const std::string *)&SipRequest::kMethodBye, 0);
    if (*v8 && (v11 = *(_QWORD *)(*v8 + 208)) != 0)
      v12 = *(SipUserAgent **)(v11 + 136);
    else
      v12 = 0;
    if (*(_BYTE *)(SipUserAgent::config(v12) + 612))
      BambiCallTerminationReason::addReasonToRequest(a4, RequestInDialog);
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_23_1);
    SipSession::sendRequest(RequestInDialog, (uint64_t)a1, (uint64_t)&__p, &v62);
    v13 = v63;
    if (v63)
    {
      p_shared_owners = (unint64_t *)&v63->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v53 < 0)
      operator delete(__p);
    if (RequestInDialog)
      (*(void (**)(SipRequest *))(*(_QWORD *)RequestInDialog + 8))(RequestInDialog);
    v17 = (void *)a1[30];
    v16 = (std::__shared_weak_count *)a1[31];
    __p = v17;
    v52 = v16;
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v8);
    SipDialog::detachSession((SipDialog *)v17);
    if (v16)
    {
      v20 = (unint64_t *)&v16->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v60 = 0;
  v61 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, a1 + 22);
  if (__p
  {
    v60 = (uint64_t)v22;
    v61 = v52;
    p_p = &__p;
  }
  else
  {
    p_p = (void **)&v60;
  }
  *p_p = 0;
  p_p[1] = 0;
  v24 = v52;
  if (v52)
  {
    v25 = (unint64_t *)&v52->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v60;
  if (v60)
  {
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](v8, a2);
    v28 = *v8;
    v58 = v27;
    v59 = v61;
    if (v61)
    {
      v29 = (unint64_t *)&v61->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    SipDialog::attachSession(v28, &v58);
    v31 = v59;
    if (v59)
    {
      v32 = (unint64_t *)&v59->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = *v8;
    v35 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a3);
    if (v35)
      v36 = SipUriHeader::tag(v35);
    else
      v36 = &ims::kEmptyString;
    v37 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v34 + 2040, (void **)v36);
    v38 = v37;
    if ((void **)(v34 + 2048) == v37)
    {
      v40 = 0;
      v56 = 0;
      v57 = 0;
    }
    else
    {
      v39 = (SipDialogFork *)v37[7];
      v40 = (std::__shared_weak_count *)v38[8];
      v56 = v38[7];
      v57 = v40;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      if (v39)
      {
        SipDialogFork::updateRouteSet(v39, a3, 0);
LABEL_60:
        if (v40)
        {
          v46 = (unint64_t *)&v40->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        goto LABEL_65;
      }
    }
    v43 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)"no fork with remote tag", 23);
    *(_BYTE *)(v43 + 17) = 0;
    v44 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a3);
    if (v44)
      v45 = SipUriHeader::tag(v44);
    else
      v45 = &ims::kEmptyString;
    ObfuscatedString::ObfuscatedString((uint64_t)&__p, (const std::string *)v45);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v43 + 56))(v43, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v43 + 17) = 0;
    if (v55 < 0)
      operator delete(v54);
    if (v53 < 0)
      operator delete(__p);
    goto LABEL_60;
  }
LABEL_65:
  v48 = v61;
  if (v61)
  {
    v49 = (unint64_t *)&v61->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1BEF5E844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void SipSession::sendRequest(SipRequest *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _BOOL4 isSessionRefresh;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  isSessionRefresh = SipRequest::isSessionRefresh(this);
  if (isSessionRefresh)
    SipSessionTimer::addHeadersToRequest(*(SipSessionTimer **)(a2 + 1344), this);
  v14 = 0;
  v15 = 0;
  SipDialog::sendRequest(*(_QWORD **)(a2 + 240), this, a3, &v14);
  v9 = v14;
  if (v14)
  {
    if (isSessionRefresh)
    {
      SipTimerContainer::cancelAllTimers((SipTimerContainer *)(*(_QWORD *)(a2 + 1344) + 48));
      v9 = v14;
    }
    v10 = v15;
    *a4 = v9;
    a4[1] = v10;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    v11 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_1BEF5E98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSession::handleStateTransition(SipSession *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const std::string *v15;
  const std::string *v16;
  _BYTE v17[72];
  std::string __p;
  std::string v19;
  std::string *v20;

  if (a2 <= 5 && a3 >= 6)
  {
    v6 = *((_QWORD *)this + 30);
    memset(&v19, 0, sizeof(v19));
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    SipDialog::currentClientTransactions(v6, (uint64_t)&v19, "PRACK", (uint64_t *)&__p);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v8 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v10 = v19.__r_.__value_.__r.__words[0];
    if (v19.__r_.__value_.__l.__size_ != v19.__r_.__value_.__r.__words[0])
    {
      v11 = 0;
      v12 = 0;
      do
      {
        SipTransaction::abort(*(SipTransaction **)(v10 + v11));
        ++v12;
        v10 = v19.__r_.__value_.__r.__words[0];
        v11 += 16;
      }
      while (v12 < (uint64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) >> 4);
    }
    v20 = &v19;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    SipTimerContainer::cancelAllTimers((SipSession *)((char *)this + 264));
    v13 = *((_QWORD *)this + 197);
    if (*(_DWORD *)(v13 + 24))
      ImsPowerAssertion::deinitialize(v13);
  }
  v14 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"state transition [", 18);
  *(_BYTE *)(v14 + 17) = 0;
  v15 = (const std::string *)(*(uint64_t (**)(SipSession *, uint64_t))(*(_QWORD *)this + 272))(this, a2);
  LoggableString::LoggableString(&v19, v15);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 40))(v14, &v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" --> ", 5);
  *(_BYTE *)(v14 + 17) = 0;
  v16 = (const std::string *)(*(uint64_t (**)(SipSession *, uint64_t))(*(_QWORD *)this + 272))(this, a3);
  LoggableString::LoggableString(&__p, v16);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 40))(v14, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((_DWORD)a2)
      goto LABEL_17;
  }
  else if ((_DWORD)a2)
  {
    goto LABEL_17;
  }
  ImsPowerAssertion::initialize(*((ImsPowerAssertion **)this + 197), 300.0, 6, (uint64_t)v17);
  ImsResult::~ImsResult((ImsResult *)v17);
LABEL_17:
  if ((_DWORD)a3 == 6)
  {
    *((_BYTE *)this + 1724) = 1;
  }
  else if (a3 >= 7)
  {
    SipTimerContainer::cancelAllTimers((SipTimerContainer *)(*((_QWORD *)this + 168) + 48));
    if ((_DWORD)a3 == 13)
      (*(void (**)(SipSession *))(*(_QWORD *)this + 192))(this);
  }
}

void sub_1BEF5EC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  *(_QWORD *)(v23 - 56) = v23 - 80;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 56));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipSession::handleStateTransition(SipSession *this, uint64_t a2, uint64_t a3)
{
  SipSession::handleStateTransition((SipSession *)((char *)this - 616), a2, a3);
}

void SipSession::fireCallEvent(SipSession *this, BambiCallEvent *a2)
{
  SipStack *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  char *v11;
  char *v12;
  int v13;
  uint64_t v14;
  SipUriHeader *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  void **v20;
  std::__shared_weak_count *v21;
  void **v22;
  unint64_t *v23;
  unint64_t v24;
  void **v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  SipTimerContainer *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  ImsPrefs *v35;
  void **RingbackTimerSecondsKey;
  void *v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  ImsPrefs *v42;
  void **EmergencyRingbackTimerSecondsKey;
  void *v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  ImsPrefs *v49;
  void **v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *p_shared_weak_owners;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  SipUserAgent *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  char *v81;
  SipStack *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  _BOOL4 isNR;
  ImsPrefs *v89;
  void **EPSFallbackTimerSecondsKey;
  void *v91;
  int v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void **v109;
  std::__shared_weak_count *v110;
  BambiCall *v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count *v116;
  SipStack *v117;
  std::__shared_weak_count *v118;
  char v119;
  void *__p;
  char v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return;
  v113 = 0;
  v114 = 0;
  SipSessionInterface::stack((std::__shared_weak_count *)this, &v113);
  if (v113 && *(_BYTE *)(v113 + 2657))
  {
    v4 = (SipStack *)*((_QWORD *)this + 142);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 143);
    v117 = v4;
    v118 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    if (v4)
      LazuliSession::processEvent((LazuliSession *)v4, a2);
    if (!v5)
      goto LABEL_172;
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    goto LABEL_170;
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (!v10)
  {
    v5 = 0;
    goto LABEL_21;
  }
  v5 = std::__shared_weak_count::lock(v10);
  v112 = v5;
  if (!v5 || (v111 = (BambiCall *)*((_QWORD *)this + 96)) == 0)
  {
LABEL_21:
    v17 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"fireCallEvent: we don't have a call", 35);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (v5)
      goto LABEL_168;
    goto LABEL_172;
  }
  v12 = v11;
  v13 = *((_DWORD *)a2 + 2);
  if ((v13 - 7) < 2)
  {
    v117 = 0;
    v118 = 0;
    if (v11)
    {
      v14 = *((_QWORD *)this + 30);
      v15 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)(v11 + 40));
      v16 = (void **)(v15 ? SipUriHeader::tag(v15) : &ims::kEmptyString);
      v25 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v14 + 2040, v16);
      if ((void **)(v14 + 2048) != v25)
      {
        v26 = v25[7];
        v27 = (std::__shared_weak_count *)v25[8];
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v117 = (SipStack *)v26;
        v118 = v27;
        if (v26 && SipPreconditions::preconditionsSatisfiedInFork((void **)this + 175, (void **)v26 + 19))
        {
          v30 = (SipSession *)((char *)this + 264);
          SipTimerContainer::cancelTimer(v30, (std::string *)"WaitForRingingTimer");
        }
        if (v27)
        {
          v31 = (unint64_t *)&v27->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            v33 = v27;
LABEL_115:
            std::__shared_weak_count::__release_weak(v33);
            goto LABEL_116;
          }
        }
      }
    }
    goto LABEL_116;
  }
  if (v13 != 4)
    goto LABEL_116;
  v109 = 0;
  v110 = 0;
  if (v11)
  {
    v18 = *((_QWORD *)this + 30);
    v19 = SipMessage::toTag((SipMessage *)(v11 + 40));
    v20 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v18 + 2040, (void **)v19);
    if ((void **)(v18 + 2048) == v20)
    {
      v22 = 0;
      v21 = 0;
    }
    else
    {
      v22 = (void **)v20[7];
      v21 = (std::__shared_weak_count *)v20[8];
      if (v21)
      {
        v23 = (unint64_t *)&v21->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
    }
    v109 = v22;
    v110 = v21;
  }
  else
  {
    v22 = 0;
  }
  SipTimerContainer::cancelTimer((SipSession *)((char *)this + 264), (std::string *)"WaitForRingingTimer");
  if (*(_BYTE *)(*((_QWORD *)this + 30) + 1920))
  {
    SipTimerContainer::cancelTimer((SipSession *)((char *)this + 264), (std::string *)"WaitForRingingTimer");
    v115 = 0;
    v116 = 0;
    v34 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
    if (v34)
    {
      v116 = std::__shared_weak_count::lock(v34);
      if (v116)
        v115 = (std::__shared_weak_count *)*((_QWORD *)this + 96);
    }
    SipSessionInterface::stack((std::__shared_weak_count *)this, &v117);
    v35 = (ImsPrefs *)SipStack::prefs(v117);
    RingbackTimerSecondsKey = (void **)ImsPrefs::getRingbackTimerSecondsKey(v35);
    v37 = ImsPrefs::prefWithKey(v35, RingbackTimerSecondsKey);
    if (v37)
      v38 = (*(uint64_t (**)(void *))(*(_QWORD *)v37 + 56))(v37);
    else
      v38 = *((_DWORD *)RingbackTimerSecondsKey + 15);
    v39 = v118;
    if (v118)
    {
      v40 = (unint64_t *)&v118->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v115 && v115[21].__shared_owners_)
    {
      SipSessionInterface::stack((std::__shared_weak_count *)this, &v117);
      v42 = (ImsPrefs *)SipStack::prefs(v117);
      EmergencyRingbackTimerSecondsKey = (void **)ImsPrefs::getEmergencyRingbackTimerSecondsKey(v42);
      v44 = ImsPrefs::prefWithKey(v42, EmergencyRingbackTimerSecondsKey);
      if (v44)
        v45 = (*(uint64_t (**)(void *))(*(_QWORD *)v44 + 56))(v44);
      else
        v45 = *((_DWORD *)EmergencyRingbackTimerSecondsKey + 15);
      v46 = v118;
      if (v118)
      {
        v47 = (unint64_t *)&v118->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (v45)
      {
        SipSessionInterface::stack((std::__shared_weak_count *)this, &v117);
        v49 = (ImsPrefs *)SipStack::prefs(v117);
        v50 = (void **)ImsPrefs::getEmergencyRingbackTimerSecondsKey(v49);
        v51 = ImsPrefs::prefWithKey(v49, v50);
        v38 = v51 ? (*(uint64_t (**)(void *))(*(_QWORD *)v51 + 56))(v51) : *((_DWORD *)v50 + 15);
        v52 = v118;
        if (v118)
        {
          v53 = (unint64_t *)&v118->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
      }
    }
    v56 = *((_QWORD *)this + 22);
    v55 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (v55)
    {
      p_shared_weak_owners = (unint64_t *)&v55->__shared_weak_owners_;
      do
        v58 = __ldxr(p_shared_weak_owners);
      while (__stxr(v58 + 1, p_shared_weak_owners));
      do
        v59 = __ldxr(p_shared_weak_owners);
      while (__stxr(v59 + 1, p_shared_weak_owners));
    }
    if (!v38)
      goto LABEL_97;
    v60 = *((_QWORD *)this + 30);
    if (v60 && (v61 = *(_QWORD *)(v60 + 208)) != 0)
      v62 = *(SipUserAgent **)(v61 + 136);
    else
      v62 = 0;
    if (!*(_BYTE *)(SipUserAgent::config(v62) + 953)
      && std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 34, "RingbackTimer"))
    {
      goto LABEL_97;
    }
    v63 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v63 + 8), (uint64_t)"starting ringback timer", 23);
    *(_BYTE *)(v63 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v63 + 17) = 0;
    if (v55)
    {
      v64 = (unint64_t *)&v55->__shared_weak_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    __p = 0;
    v66 = operator new(0x20uLL);
    *v66 = &off_1E78CAC90;
    v66[1] = this;
    v66[2] = v56;
    v66[3] = v55;
    __p = v66;
    SipTimerContainer::startTimer((_QWORD *)this + 33, (uint64_t)"RingbackTimer", (uint64_t)&v117, 1000 * v38, 0);
    v67 = __p;
    if (__p == &v117)
    {
      v68 = 4;
      v67 = &v117;
    }
    else
    {
      if (!__p)
      {
LABEL_97:
        if (v55)
        {
          std::__shared_weak_count::__release_weak(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
        v69 = v116;
        if (v116)
        {
          v70 = (unint64_t *)&v116->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        goto LABEL_104;
      }
      v68 = 5;
    }
    (*(void (**)(void))(*v67 + 8 * v68))();
    goto LABEL_97;
  }
LABEL_104:
  if (!SipPreconditions::remotePreconditionsSatisfiedInFork((void **)this + 175, v22 + 19))
  {
    v72 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v72 + 8), (uint64_t)"received 180 ringing. Forcing remote preconditions satisfied in fork ", 69);
    *(_BYTE *)(v72 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v117, (const std::string *)(v109 + 19));
    (*(void (**)(uint64_t, SipStack **))(*(_QWORD *)v72 + 56))(v72, &v117);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v72 + 17) = 0;
    if (v121 < 0)
      operator delete(__p);
    if (v119 < 0)
      operator delete(v117);
    SipPreconditions::setRemotePreconditionsSatisfiedInFork((__int128 *)((char *)this + 1400), (std::string *)(v109 + 19), 0);
  }
  if (v110)
  {
    v73 = (unint64_t *)&v110->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      v33 = v110;
      goto LABEL_115;
    }
  }
LABEL_116:
  if (v12)
  {
    v75 = (std::__shared_weak_count *)*((_QWORD *)v111 + 45);
    if (v75)
    {
      v76 = std::__shared_weak_count::lock(v75);
      if (v76)
      {
        v77 = v76;
        v78 = *((_QWORD *)v111 + 44);
        v79 = (unint64_t *)&v76->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v77);
        }
        if (v78)
        {
          v81 = SipMessage::body<SipSdpBody>((uint64_t)(v12 + 40));
          if (v81)
          {
            v82 = (SipStack *)*((_QWORD *)v81 + 1);
            v83 = (std::__shared_weak_count *)*((_QWORD *)v81 + 2);
            v117 = v82;
            v118 = v83;
            if (v83)
            {
              v84 = (unint64_t *)&v83->__shared_owners_;
              do
                v85 = __ldxr(v84);
              while (__stxr(v85 + 1, v84));
            }
            if (v82)
            {
              v115 = 0;
              v116 = 0;
              v86 = (std::__shared_weak_count *)*((_QWORD *)v111 + 45);
              if (v86)
              {
                v86 = std::__shared_weak_count::lock(v86);
                v87 = v86;
                v116 = v86;
                if (v86)
                {
                  v86 = (std::__shared_weak_count *)*((_QWORD *)v111 + 44);
                  v115 = v86;
                }
              }
              else
              {
                v87 = 0;
              }
              v89 = (ImsPrefs *)SipStack::prefs((SipStack *)v86);
              EPSFallbackTimerSecondsKey = (void **)ImsPrefs::getEPSFallbackTimerSecondsKey(v89);
              v91 = ImsPrefs::prefWithKey(v89, EPSFallbackTimerSecondsKey);
              if (v91)
                v92 = (*(uint64_t (**)(void *))(*(_QWORD *)v91 + 56))(v91);
              else
                v92 = *((_DWORD *)EPSFallbackTimerSecondsKey + 15);
              if (v92)
              {
                v93 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)v111 + 45));
                if (*(_BYTE *)(*((_QWORD *)v111 + 44) + 3685))
                {
                  v94 = (std::__shared_weak_count *)*((_QWORD *)v111 + 45);
                  if (v94 && (v95 = std::__shared_weak_count::lock(v94)) != 0)
                  {
                    v96 = v95;
                    isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)(*((_QWORD *)v111 + 44) + 3136));
                    v97 = (unint64_t *)&v96->__shared_owners_;
                    do
                      v98 = __ldaxr(v97);
                    while (__stlxr(v98 - 1, v97));
                    if (!v98)
                    {
                      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                      std::__shared_weak_count::__release_weak(v96);
                    }
                  }
                  else
                  {
                    isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)0xC40);
                  }
                }
                else
                {
                  isNR = 0;
                }
                v99 = (unint64_t *)&v93->__shared_owners_;
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
                v87 = v116;
              }
              else
              {
                isNR = 0;
              }
              if (v87)
              {
                v101 = (unint64_t *)&v87->__shared_owners_;
                do
                  v102 = __ldaxr(v101);
                while (__stlxr(v102 - 1, v101));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                  std::__shared_weak_count::__release_weak(v87);
                }
              }
              v83 = v118;
            }
            else
            {
              isNR = 0;
            }
            if (!v83)
              goto LABEL_163;
            v103 = (unint64_t *)&v83->__shared_owners_;
            do
              v104 = __ldaxr(v103);
            while (__stlxr(v104 - 1, v103));
            if (!v104)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
              if (!isNR)
                goto LABEL_167;
            }
            else
            {
LABEL_163:
              if (!isNR)
                goto LABEL_167;
            }
            BambiCall::startEPSWatchdogTimer(v111);
          }
        }
      }
    }
  }
LABEL_167:
  (*(void (**)(BambiCall *, BambiCallEvent *))(*(_QWORD *)v111 + 56))(v111, a2);
  v5 = v112;
  if (v112)
  {
LABEL_168:
    v105 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v105);
    while (__stlxr(v9 - 1, v105));
LABEL_170:
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_172:
  v106 = v114;
  if (v114)
  {
    v107 = (unint64_t *)&v114->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
}

void sub_1BEF5F6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t SipSession::performPendingTermination(SipSession *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string __p[24];
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _OWORD v22[3];

  memset(v22, 0, sizeof(v22));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v18, (_QWORD *)a1 + 22);
  if (v18)
    v6 = v18 + 104;
  else
    v6 = 0;
  v20 = v6;
  v21 = v19;
  v18 = 0;
  v19 = 0;
  LoggableString::LoggableString((LoggableString *)__p, "performPendingTermination");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v22, &v20, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v7 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *((_QWORD *)a1 + 193);
  if (v13)
  {
    bzero(__p, 0x250uLL);
    BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)__p, 15, v13);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BD2A8;
    SipSession::terminateWithEvent(a1, (BambiCallEvent *)__p, a2);
    if (a3)
    {
      v14 = *((_QWORD *)a1 + 193);
      if (v14)
      {
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v14 + 112);
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v14 + 96);
        if (*(char *)(v14 + 95) < 0)
          operator delete(*(void **)(v14 + 72));
        if (*(char *)(v14 + 55) < 0)
          operator delete(*(void **)(v14 + 32));
        if (*(char *)(v14 + 31) < 0)
          operator delete(*(void **)(v14 + 8));
        MEMORY[0x1C3B87100](v14, 0x1032C40D4AF1F8FLL);
      }
      *((_QWORD *)a1 + 193) = 0;
    }
    BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)__p);
  }
  else
  {
    v15 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"performPendingTermination: no pending termination reason", 56);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v22);
}

void sub_1BEF5F9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v14 - 96);
  _Unwind_Resume(a1);
}

uint64_t SipSession::terminateWithEvent(SipSession *a1, BambiCallEvent *a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  BambiCall *v15;
  std::__shared_weak_count *v16;
  LazuliSession *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  std::string __p;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _OWORD v35[3];

  memset(v35, 0, sizeof(v35));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v31, (_QWORD *)a1 + 22);
  if (v31)
    v6 = v31 + 104;
  else
    v6 = 0;
  v33 = v6;
  v34 = v32;
  v31 = 0;
  v32 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "terminateWithEvent");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v35, &v33, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v32;
  if (!v32)
    goto LABEL_15;
  v11 = (unint64_t *)&v32->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!(_DWORD)a3)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    if (!(_DWORD)a3)
      goto LABEL_21;
  }
  v13 = *((_QWORD *)a1 + 89);
  if (v13)
    LODWORD(v13) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
  if ((_DWORD)v13 != (_DWORD)a3)
    SipTypedStateMachine<SipSessionState>::transitionToState((_QWORD *)a1 + 82, a3);
LABEL_21:
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v14 = (std::__shared_weak_count *)*((_QWORD *)a1 + 97);
  if (v14)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v14);
    if (__p.__r_.__value_.__l.__size_)
    {
      v15 = (BambiCall *)*((_QWORD *)a1 + 96);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
      if (v15)
      {
        if (a2)
          SipSession::fireCallEvent(a1, a2);
        BambiCall::detachSipSession(v15);
        v16 = (std::__shared_weak_count *)*((_QWORD *)a1 + 97);
        *((_OWORD *)a1 + 48) = 0u;
        if (v16)
          std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v17 = (LazuliSession *)*((_QWORD *)a1 + 142);
  if (!v17)
  {
LABEL_35:
    if (!a2)
      goto LABEL_42;
    goto LABEL_36;
  }
  if (!a2 || (SipSession::fireCallEvent(a1, a2), (v17 = (LazuliSession *)*((_QWORD *)a1 + 142)) != 0))
  {
    LazuliSession::detachSipSession(v17);
    v18 = (std::__shared_weak_count *)*((_QWORD *)a1 + 143);
    *((_OWORD *)a1 + 71) = 0u;
    if (!v18)
      goto LABEL_35;
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (v20)
      goto LABEL_35;
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!a2)
      goto LABEL_42;
  }
LABEL_36:
  if (v21)
  {
    v22 = v21[10];
    v23 = v22 > 0x15;
    v24 = (1 << v22) & 0x320000;
    if (!v23 && v24 != 0)
      SipSession::reportSetupTimeoutToIRat((std::__shared_weak_count *)a1);
  }
LABEL_42:
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v35);
}

void sub_1BEF5FCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t SipTypedStateMachine<SipSessionState>::currentStateId(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void SipSession::reportSetupTimeoutToIRat(std::__shared_weak_count *this)
{
  std::__shared_weak_count *size;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::string v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  SipSessionInterface::stack(this, &v18);
  LOBYTE(v21) = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v18.__r_.__value_.__r.__words[0] + 3136));
  size = (std::__shared_weak_count *)v18.__r_.__value_.__l.__size_;
  if (v18.__r_.__value_.__l.__size_)
  {
    v3 = (unint64_t *)(v18.__r_.__value_.__l.__size_ + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  SipSessionInterface::stack(this, &v18);
  v5 = (std::__shared_weak_count *)v18.__r_.__value_.__l.__size_;
  v22 = *(unsigned int *)(v18.__r_.__value_.__r.__words[0] + 4076);
  if (v18.__r_.__value_.__l.__size_)
  {
    v6 = (unint64_t *)(v18.__r_.__value_.__l.__size_ + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  LODWORD(v23) = 4;
  SipSessionInterface::stack(this, &v19);
  v8 = *(_QWORD *)(v19 + 136);
  SipSessionInterface::stack(this, &v16);
  if (*(char *)(v16 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v16 + 4136), *(_QWORD *)(v16 + 4144));
  else
    v18 = *(std::string *)(v16 + 4136);
  v9 = *(_QWORD *)(v8 + 248);
  if (v9)
    (*(void (**)(uint64_t, std::string *, uint64_t *))(*(_QWORD *)v9 + 136))(v9, &v18, &v21);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BEF5FF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t SipSession::handleInitializationFailure(SipSession *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"session initialization failed", 29);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 192))(this);
}

void SipSession::loggableName(std::__shared_weak_count *this@<X0>, std::string *a2@<X8>)
{
  int v4;
  const char *v5;
  uint64_t v6;
  std::__shared_weak_count_vtbl *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v8, 1);
  v4 = SipSession::emergency(this);
  if (v4)
    v5 = "Emergency Session ";
  else
    v5 = "Session ";
  if (v4)
    v6 = 18;
  else
    v6 = 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v8 + 1), (uint64_t)v5, v6);
  BYTE1(v9) = 0;
  v7 = this[10].__vftable;
  if (v7)
  {
    (*((void (**)(const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *), __int128 *))v7[37].__get_deleter
     + 2))(&v7[37].__get_deleter, &v8);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v8 + 1), (uint64_t)"[Unknown]", 9);
    BYTE1(v9) = 0;
  }
  ImsStringOutStream::loggableStr((ImsStringOutStream *)&v8, a2);
  *(_QWORD *)&v8 = &off_1E78D7A10;
  if ((_BYTE)v9)
  {
    if (*((_QWORD *)&v8 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 8))(*((_QWORD *)&v8 + 1));
  }
}

void sub_1BEF600A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a10)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSession::emergency(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_owners;
  std::__shared_weak_count *v3;
  _BOOL4 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _BOOL4 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;

  v19 = 0;
  v20 = 0;
  shared_owners = (std::__shared_weak_count *)this[32].__shared_owners_;
  if (shared_owners)
  {
    v20 = std::__shared_weak_count::lock(shared_owners);
    if (v20)
      v19 = this[32].__vftable;
  }
  SipSessionInterface::stack(this, &v17);
  if (v17)
  {
    SipSessionInterface::stack(this, &v15);
    v3 = v16;
    v4 = *(_BYTE *)(v15 + 176) != 0;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else
  {
    v4 = 0;
  }
  v7 = v18;
  if (v18)
  {
    v8 = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v19)
    v10 = v19[12].__on_zero_shared_weak != 0;
  else
    v10 = 0;
  v11 = v20;
  if (v20)
  {
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v4 | v10;
}

void sub_1BEF60220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipSession::loggableName(SipSession *this@<X0>, std::string *a2@<X8>)
{
  SipSession::loggableName((std::__shared_weak_count *)((char *)this - 104), a2);
}

void SipSession::terminationLocksReleased(SipSession *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  BambiCall *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = (BambiCall *)*((_QWORD *)this + 96);
      if (v4)
        BambiCall::detachSipSession(v4);
    }
  }
  else
  {
    v3 = 0;
  }
  SipSessionInterface::terminationLocksReleased(this);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BEF602EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipSession::terminationLocksReleased(SipSession *this)
{
  SipSession::terminationLocksReleased((SipSession *)((char *)this - 104));
}

void SipSession::startPingTimer(SipSession *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SipUserAgent *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  SipUserAgent *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 22);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  v7 = *((_QWORD *)this + 30);
  if (v7 && (v8 = *(_QWORD *)(v7 + 208)) != 0)
    v9 = *(SipUserAgent **)(v8 + 136);
  else
    v9 = 0;
  if (*(_DWORD *)(SipUserAgent::config(v9) + 36))
  {
    if (v2)
    {
      v10 = (unint64_t *)&v2->__shared_weak_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = operator new(0x20uLL);
    *v12 = &off_1E78CAD10;
    v12[1] = this;
    v12[2] = v3;
    v12[3] = v2;
    v20 = v12;
    v13 = *((_QWORD *)this + 30);
    if (v13 && (v14 = *(_QWORD *)(v13 + 208)) != 0)
      v15 = *(SipUserAgent **)(v14 + 136);
    else
      v15 = 0;
    v16 = SipUserAgent::config(v15);
    SipTimerContainer::startTimer((_QWORD *)this + 33, (uint64_t)"PingTimer", (uint64_t)v19, *(_DWORD *)(v16 + 36), 0);
    v17 = v20;
    if (v20 == v19)
    {
      v18 = 4;
      v17 = v19;
    }
    else
    {
      if (!v20)
        goto LABEL_22;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
LABEL_22:
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BEF60470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;

  if (v13)
  {
    std::__shared_weak_count::__release_weak(v13);
    std::__shared_weak_count::__release_weak(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::clientInviteTransaction(SipSession *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  void **v18;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  v3 = *((_QWORD *)this + 30);
  v13 = 0;
  v14 = 0;
  SipDialog::currentClientTransactions(v3, (uint64_t)&v15, "INVITE", &v13);
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v15;
  v8 = v16;
  while (v7 != v8)
  {
    v9 = *v7;
    *a2 = *v7;
    v10 = v7[1];
    a2[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v9 = *a2;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 144))(v9))
      goto LABEL_15;
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a2);
    v7 += 2;
  }
  *a2 = 0;
  a2[1] = 0;
LABEL_15:
  v18 = (void **)&v15;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v18);
}

void sub_1BEF605D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void SipSession::serverInviteTransaction(SipSession *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  void **v18;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  v3 = *((_QWORD *)this + 30);
  v13 = 0;
  v14 = 0;
  SipDialog::currentServerTransactions(v3, (uint64_t)&v15, "INVITE", &v13);
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v15;
  v8 = v16;
  while (v7 != v8)
  {
    v9 = *v7;
    *a2 = *v7;
    v10 = v7[1];
    a2[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v9 = *a2;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 144))(v9))
      goto LABEL_15;
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a2);
    v7 += 2;
  }
  *a2 = 0;
  a2[1] = 0;
LABEL_15:
  v18 = (void **)&v15;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v18);
}

void sub_1BEF606F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void SipSession::handleTimer(SipSession *this, unsigned __int8 *a2)
{
  const void **v2;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  const char *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  const char *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  const char *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  _BOOL4 v20;
  ImsPrefs *v21;
  void **DropRegistrationOnWaitTimeoutKey;
  void *v23;
  int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  const void **v35;
  uint64_t v36;
  const char *v37;
  const void **v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  const char *v48;
  const void **v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  const char *v64;
  const char *v65;
  const void **v66;
  uint64_t v67;
  char *v68;
  void **v69;
  unsigned __int8 *v70;
  uint64_t v71;
  _BYTE *v72;
  int v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  int v86;
  const char *v87;
  const void **v88;
  uint64_t v89;
  const char *v90;
  const void **v91;
  uint64_t v92;
  char *v93;
  void **v94;
  unsigned __int8 *v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t *p_shared_weak_owners;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  SipUserAgent *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _BYTE v119[72];
  _BYTE v120[72];
  void *__p;
  uint64_t *v122;
  int v123;
  char v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[72];
  _BYTE v129[72];
  _BYTE v130[79];
  char v131;
  _BYTE v132[72];
  _BYTE v133[72];
  uint64_t v134[4];
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  void *v138;
  char v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  _BYTE v144[24];
  _BYTE *v145;
  uint64_t v146;

  v2 = (const void **)a2;
  v146 = *MEMORY[0x1E0C80C00];
  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  if (v6 != 19)
  {
    if (v6 != 13)
    {
      if (v6 != 12)
        goto LABEL_58;
      if ((v4 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "RingingTimer", v5))
          goto LABEL_58;
      }
      else if (a2[23])
      {
        v7 = "RingingTimer";
        v8 = a2;
        v9 = a2[23];
        while (*v8 == *(unsigned __int8 *)v7)
        {
          ++v8;
          ++v7;
          if (!--v9)
            goto LABEL_77;
        }
        goto LABEL_58;
      }
LABEL_77:
      if ((SipSession::confirmed(this) & 1) != 0)
        return;
      v40 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"ringing timer fired.  Rejecting call.", 37);
      *(_BYTE *)(v40 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v40 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(v134, "NoAnswer");
      SipSession::rejectWithReason((SipSession *)v133, (std::__shared_weak_count *)this, (uint64_t)v134);
      ImsResult::~ImsResult((ImsResult *)v133);
      goto LABEL_126;
    }
    if ((v4 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, "RingbackTimer", v5))
        goto LABEL_58;
    }
    else if (a2[23])
    {
      v13 = "RingbackTimer";
      v14 = a2;
      v15 = a2[23];
      while (*v14 == *(unsigned __int8 *)v13)
      {
        ++v14;
        ++v13;
        if (!--v15)
          goto LABEL_38;
      }
      goto LABEL_58;
    }
LABEL_38:
    if ((SipSession::confirmed(this) & 1) != 0)
      return;
    v25 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"ringback timer fired.  Canceling call.", 38);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "NoAnswer");
    SipSessionInterface::terminationReason((std::__shared_weak_count *)this, (uint64_t)&__p, (BambiCallTerminationReason *)v134);
    SipSession::cancel((SipSession *)v132, this, (const BambiCallTerminationReason *)v134);
    v26 = v141;
    if (v141)
    {
      p_shared_owners = (unint64_t *)&v141->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v140;
    if (v140)
    {
      v30 = (unint64_t *)&v140->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v139 < 0)
      operator delete(v138);
    if (SBYTE7(v136) < 0)
      operator delete((void *)v135);
    if (SHIBYTE(v134[3]) < 0)
      operator delete((void *)v134[1]);
    ImsResult::~ImsResult((ImsResult *)v132);
    if ((v124 & 0x80000000) == 0)
      return;
    v32 = __p;
LABEL_128:
    operator delete(v32);
    return;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "WaitForRingingTimer", v5))
      goto LABEL_58;
    goto LABEL_26;
  }
  if (!a2[23])
  {
LABEL_26:
    v16 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"timed out waiting for ringing/preconditions", 43);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    memset(v134, 0, 24);
    if (*(_BYTE *)(*((_QWORD *)this + 30) + 1920)
      && (SipPreconditions::preconditionsSatisfiedInAnyFork((SipSession *)((char *)this + 1400)) & 1) != 0)
    {
      v17 = (char *)&v134[2] + 5;
      HIBYTE(v134[2]) = 21;
      qmemcpy(v134, "WaitForRingingTimeout", 21);
    }
    else
    {
      v17 = (char *)&v134[2] + 3;
      HIBYTE(v134[2]) = 19;
      qmemcpy(v134, "PreconditionFailure", 19);
    }
    *v17 = 0;
    v142 = 0;
    v143 = 0;
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
    v20 = v18
       && (v143 = std::__shared_weak_count::lock(v18)) != 0
       && (v19 = *((_QWORD *)this + 96), (v142 = v19) != 0)
       && *(_QWORD *)(v19 + 512) != 0;
    SipSession::reportSetupTimeoutToIRat((std::__shared_weak_count *)this);
    SipSessionInterface::stack((std::__shared_weak_count *)this, &__p);
    v21 = (ImsPrefs *)SipStack::prefs((SipStack *)__p);
    DropRegistrationOnWaitTimeoutKey = (void **)ImsPrefs::getDropRegistrationOnWaitTimeoutKey(v21);
    v23 = ImsPrefs::prefWithKey(v21, DropRegistrationOnWaitTimeoutKey);
    if (v23)
      v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v23 + 40))(v23);
    else
      v24 = *((_BYTE *)DropRegistrationOnWaitTimeoutKey + 57) != 0;
    v51 = (std::__shared_weak_count *)v122;
    if (v122)
    {
      v52 = (unint64_t *)(v122 + 1);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (((v24 ^ 1 | v20) & 1) != 0)
    {
      SipSession::hangUp((std::__shared_weak_count *)this, (uint64_t)v134, 0, (uint64_t)v129);
      ImsResult::~ImsResult((ImsResult *)v129);
    }
    else
    {
      v131 = 0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "Deregistering");
      SipSession::hangUp((std::__shared_weak_count *)this, (uint64_t)&__p, &v131, (uint64_t)v130);
      ImsResult::~ImsResult((ImsResult *)v130);
      if (v124 < 0)
        operator delete(__p);
      if (v131 != 2)
      {
        v54 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 30) + 208) + 136);
        v55 = *(void **)(v54 + 248);
        v56 = *(std::__shared_weak_count **)(v54 + 256);
        __p = v55;
        v122 = (uint64_t *)v56;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        (*(void (**)(void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v55 + 168))(v55, 3, 0, 0);
        if (v56)
        {
          v59 = (unint64_t *)&v56->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
      }
    }
    v61 = v143;
    if (v143)
    {
      v62 = (unint64_t *)&v143->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
LABEL_126:
    if ((SHIBYTE(v134[2]) & 0x80000000) == 0)
      return;
    v32 = (void *)v134[0];
    goto LABEL_128;
  }
  v10 = "WaitForRingingTimer";
  v11 = a2;
  v12 = a2[23];
  while (*v11 == *(unsigned __int8 *)v10)
  {
    ++v11;
    ++v10;
    if (!--v12)
      goto LABEL_26;
  }
LABEL_58:
  v33 = qword_1ED70E300;
  if (byte_1ED70E30F >= 0)
    v33 = byte_1ED70E30F;
  if (v6 != v33)
  {
LABEL_70:
    switch(v6)
    {
      case 9:
        if ((v4 & 0x80) != 0)
        {
          v41 = *v2;
          goto LABEL_130;
        }
        if (!(_DWORD)v4)
          goto LABEL_131;
        v37 = "PingTimer";
        v38 = v2;
        v39 = v4;
        do
        {
          if (*(unsigned __int8 *)v38 != *(unsigned __int8 *)v37)
            goto LABEL_135;
          v38 = (const void **)((char *)v38 + 1);
          ++v37;
          --v39;
        }
        while (v39);
        goto LABEL_131;
      case 10:
        if ((v4 & 0x80) != 0)
        {
          v41 = *v2;
          goto LABEL_134;
        }
        if (!(_DWORD)v4)
          goto LABEL_152;
        v48 = "GlareTimer";
        v49 = v2;
        v50 = v4;
        do
        {
          if (*(unsigned __int8 *)v49 != *(unsigned __int8 *)v48)
            goto LABEL_135;
          v49 = (const void **)((char *)v49 + 1);
          ++v48;
          --v50;
        }
        while (v50);
        break;
      case 11:
        goto LABEL_138;
      case 16:
        goto LABEL_146;
      case 20:
        goto LABEL_182;
      default:
        return;
    }
    goto LABEL_152;
  }
  if (byte_1ED70E30F >= 0)
  else
  if ((v4 & 0x80) != 0)
  {
    v41 = *v2;
    if (!memcmp(*v2, v34, v5))
      goto LABEL_83;
    if (v5 != 9)
    {
      if (v5 == 10)
      {
LABEL_134:
        if (!memcmp(v41, "GlareTimer", v5))
        {
LABEL_152:
          SipSession::sendPendingInvite(this);
          return;
        }
      }
LABEL_135:
      if (v6 <= 15)
      {
        if (v6 != 9)
          goto LABEL_137;
LABEL_192:
        if ((v4 & 0x80) != 0)
        {
          if (memcmp(*v2, "HoldTimer", v5))
            return;
        }
        else if ((_DWORD)v4)
        {
          v90 = "HoldTimer";
          v91 = v2;
          v92 = v4;
          while (*(unsigned __int8 *)v91 == *(unsigned __int8 *)v90)
          {
            v91 = (const void **)((char *)v91 + 1);
            ++v90;
            if (!--v92)
              goto LABEL_199;
          }
LABEL_137:
          if (v6 != 11)
            return;
LABEL_138:
          if ((v4 & 0x80) != 0)
          {
            if (memcmp(*v2, "ResumeTimer", v5))
              return;
          }
          else if ((_DWORD)v4)
          {
            v64 = "ResumeTimer";
            while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v64)
            {
              v2 = (const void **)((char *)v2 + 1);
              ++v64;
              if (!--v4)
                goto LABEL_154;
            }
            return;
          }
LABEL_154:
          __p = 0;
          v122 = 0;
          SipSession::clientInviteTransaction(this, (uint64_t *)&__p);
          if (__p && ((*(uint64_t (**)(void *))(*(_QWORD *)__p + 144))(__p) & 1) == 0)
          {
            v68 = (char *)__p;
            v69 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)__p + 376, (void **)"InviteType");
            v70 = v68 + 384 == (char *)v69 ? (unsigned __int8 *)&ims::kEmptyString : (unsigned __int8 *)(v69 + 7);
            if (std::operator==[abi:ne180100]<std::allocator<char>>(v70, "ResumeInvite"))
            {
              v71 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
              (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v71);
              v72 = (_BYTE *)ImsOutStream::operator<<(v71, "timed out waiting for resume to complete");
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v72[17] = 0;
              SipSession::reportSetupTimeoutToIRat((std::__shared_weak_count *)this);
              std::string::basic_string[abi:ne180100]<0>(v134, "HoldResumeTimeout");
              SipSession::hangUp((std::__shared_weak_count *)this, (uint64_t)v134, 0, (uint64_t)v119);
              ImsResult::~ImsResult((ImsResult *)v119);
              if (SHIBYTE(v134[2]) < 0)
                operator delete((void *)v134[0]);
            }
          }
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
          return;
        }
LABEL_199:
        __p = 0;
        v122 = 0;
        SipSession::clientInviteTransaction(this, (uint64_t *)&__p);
        if (__p && ((*(uint64_t (**)(void *))(*(_QWORD *)__p + 144))(__p) & 1) == 0)
        {
          v93 = (char *)__p;
          v94 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)__p + 376, (void **)"InviteType");
          v95 = v93 + 384 == (char *)v94 ? (unsigned __int8 *)&ims::kEmptyString : (unsigned __int8 *)(v94 + 7);
          if (std::operator==[abi:ne180100]<std::allocator<char>>(v95, "HoldInvite"))
          {
            v96 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
            (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v96);
            v97 = (_BYTE *)ImsOutStream::operator<<(v96, "timed out waiting for hold to complete");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v97 + 64))(v97, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v97[17] = 0;
            SipSession::reportSetupTimeoutToIRat((std::__shared_weak_count *)this);
            std::string::basic_string[abi:ne180100]<0>(v134, "HoldResumeTimeout");
            SipSession::hangUp((std::__shared_weak_count *)this, (uint64_t)v134, 0, (uint64_t)v120);
            ImsResult::~ImsResult((ImsResult *)v120);
            if (SHIBYTE(v134[2]) < 0)
              operator delete((void *)v134[0]);
          }
        }
        v98 = v122;
        if (v122)
        {
          v99 = (unint64_t *)(v122 + 1);
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            (*(void (**)(uint64_t *))(*v98 + 16))(v98);
            v101 = (std::__shared_weak_count *)v98;
LABEL_246:
            std::__shared_weak_count::__release_weak(v101);
            return;
          }
        }
        return;
      }
      if (v6 != 20)
      {
        if (v6 != 16)
          return;
LABEL_146:
        if ((v4 & 0x80) != 0)
        {
          if (memcmp(*v2, "TTYReinviteTimer", v5))
            return;
        }
        else if ((_DWORD)v4)
        {
          v65 = "TTYReinviteTimer";
          v66 = v2;
          v67 = v4;
          while (*(unsigned __int8 *)v66 == *(unsigned __int8 *)v65)
          {
            v66 = (const void **)((char *)v66 + 1);
            ++v65;
            if (!--v67)
              goto LABEL_164;
          }
          if (v6 == 9)
            goto LABEL_192;
          if (v6 == 11)
            goto LABEL_138;
          if (v6 != 20)
            return;
          goto LABEL_182;
        }
LABEL_164:
        v137 = 0;
        v135 = 0u;
        v136 = 0u;
        memset(v134, 0, sizeof(v134));
        SipSession::sendInvite((uint64_t)this, (std::string *)"InviteTypeTTYReinvite", (ImsResult *)v134);
        v125 = 0u;
        v126 = 0u;
        v127 = 0u;
        __p = &off_1E78B7238;
        v122 = &_bambiDomain;
        v123 = 1073741838;
        if ((uint64_t *)v134[1] == &_bambiDomain)
        {
          v73 = v134[2];
          ImsResult::~ImsResult((ImsResult *)&__p);
          if (v73 == 1073741838)
          {
            v74 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
            (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v74);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v74 + 8), (uint64_t)"can't send pending INVITE now. I'll try later.", 46);
            *(_BYTE *)(v74 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v74 + 64))(v74, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v74 + 17) = 0;
            std::string::operator=((std::string *)((char *)this + 1696), (const std::string *)"InviteTypeTTYReinvite");
          }
        }
        else
        {
          ImsResult::~ImsResult((ImsResult *)&__p);
        }
        ImsResult::~ImsResult((ImsResult *)v134);
        return;
      }
LABEL_182:
      if ((v4 & 0x80) != 0)
      {
        if (memcmp(*v2, "PrackErrorDelayTimer", v5))
          return;
      }
      else if ((_DWORD)v4)
      {
        v87 = "PrackErrorDelayTimer";
        v88 = v2;
        v89 = v4;
        while (*(unsigned __int8 *)v88 == *(unsigned __int8 *)v87)
        {
          v88 = (const void **)((char *)v88 + 1);
          ++v87;
          if (!--v89)
            goto LABEL_189;
        }
        if (v6 == 11)
          goto LABEL_138;
        if (v6 != 9)
          return;
        goto LABEL_192;
      }
LABEL_189:
      SipSession::handlePrackErrorResponse(this, *((_DWORD *)this + 430));
      return;
    }
LABEL_130:
    if (memcmp(v41, "PingTimer", v5))
      goto LABEL_135;
LABEL_131:
    __p = 0;
    v122 = 0;
    if (*(_BYTE *)(*((_QWORD *)this + 30) + 1920))
      SipSession::clientInviteTransaction(this, v134);
    else
      SipSession::serverInviteTransaction(this, v134);
    v75 = (std::__shared_weak_count *)v134[1];
    __p = (void *)v134[0];
    v122 = (uint64_t *)v134[1];
    if (!v134[0])
    {
      v85 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v85 + 8), (uint64_t)"handlePingTimer: no INVITE transaction", 38);
      *(_BYTE *)(v85 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v85 + 64))(v85, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v86 = 0;
      *(_BYTE *)(v85 + 17) = 0;
LABEL_223:
      if (v75)
      {
        v105 = (unint64_t *)&v75->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      if (!v86)
        return;
      v107 = *((_QWORD *)this + 22);
      v43 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
      if (v43)
      {
        p_shared_weak_owners = (unint64_t *)&v43->__shared_weak_owners_;
        do
          v109 = __ldxr(p_shared_weak_owners);
        while (__stxr(v109 + 1, p_shared_weak_owners));
        do
          v110 = __ldxr(p_shared_weak_owners);
        while (__stxr(v110 + 1, p_shared_weak_owners));
        do
          v111 = __ldxr(p_shared_weak_owners);
        while (__stxr(v111 + 1, p_shared_weak_owners));
      }
      v145 = 0;
      v112 = operator new(0x20uLL);
      *v112 = &off_1E78CAD90;
      v112[1] = this;
      v112[2] = v107;
      v112[3] = v43;
      v145 = v112;
      v113 = *((_QWORD *)this + 30);
      if (v113 && (v114 = *(_QWORD *)(v113 + 208)) != 0)
        v115 = *(SipUserAgent **)(v114 + 136);
      else
        v115 = 0;
      v116 = SipUserAgent::config(v115);
      SipTimerContainer::startTimer((_QWORD *)this + 33, (uint64_t)"PingTimer", (uint64_t)v144, *(_DWORD *)(v116 + 36), 0);
      v117 = v145;
      if (v145 == v144)
      {
        v118 = 4;
        v117 = v144;
      }
      else
      {
        if (!v145)
        {
LABEL_243:
          if (!v43)
            return;
          std::__shared_weak_count::__release_weak(v43);
          goto LABEL_245;
        }
        v118 = 5;
      }
      (*(void (**)(void))(*v117 + 8 * v118))();
      goto LABEL_243;
    }
    v76 = *(std::__shared_weak_count **)(v134[0] + 88);
    if (v76)
    {
      v77 = *(_QWORD *)(v134[0] + 80);
      v78 = (unint64_t *)&v76->__shared_weak_owners_;
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
      v142 = 0;
      v80 = std::__shared_weak_count::lock(v76);
      v143 = v80;
      if (v80)
      {
        v142 = v77;
        std::__shared_weak_count::__release_weak(v76);
        if (v77)
        {
          v137 = 0;
          v135 = 0u;
          v136 = 0u;
          memset(v134, 0, sizeof(v134));
          (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v77 + 64))(v134, v77, 0);
          v81 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v134[1] + 24))(v134[1], LODWORD(v134[2]));
          v82 = *(_QWORD *)this;
          if (v81)
          {
            v83 = (*(uint64_t (**)(SipSession *))(v82 + 56))(this);
            (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v83);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v83 + 8), (uint64_t)"unable to send ping: ", 21);
            *(_BYTE *)(v83 + 17) = 0;
            v84 = (_BYTE *)(v83 + 17);
            (*(void (**)(uint64_t *, uint64_t))(v134[0] + 16))(v134, v83);
          }
          else
          {
            v83 = (*(uint64_t (**)(SipSession *))(v82 + 64))(this);
            (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v83);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v83 + 8), (uint64_t)"ping!", 5);
            *(_BYTE *)(v83 + 17) = 0;
            v84 = (_BYTE *)(v83 + 17);
          }
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *v84 = 0;
          ImsResult::~ImsResult((ImsResult *)v134);
          v86 = 1;
          goto LABEL_218;
        }
      }
      else
      {
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    else
    {
      v80 = 0;
      v142 = 0;
      v143 = 0;
    }
    v102 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v102);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v102 + 8), (uint64_t)"handlePingTimer: INVITE transaction doesn't have an associated transport", 72);
    *(_BYTE *)(v102 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v102 + 64))(v102, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v86 = 0;
    *(_BYTE *)(v102 + 17) = 0;
    if (!v80)
    {
LABEL_222:
      v75 = (std::__shared_weak_count *)v122;
      goto LABEL_223;
    }
LABEL_218:
    v103 = (unint64_t *)&v80->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
    goto LABEL_222;
  }
  if ((_DWORD)v4)
  {
    v35 = v2;
    v36 = v4;
    while (*(unsigned __int8 *)v35 == *(unsigned __int8 *)v34)
    {
      v35 = (const void **)((char *)v35 + 1);
      v34 = (uint64_t *)((char *)v34 + 1);
      if (!--v36)
        goto LABEL_83;
    }
    goto LABEL_70;
  }
LABEL_83:
  __p = 0;
  v122 = 0;
  v42 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (!v42)
  {
    v43 = 0;
    goto LABEL_89;
  }
  v43 = std::__shared_weak_count::lock(v42);
  v122 = (uint64_t *)v43;
  if (!v43 || (v44 = (_BYTE *)*((_QWORD *)this + 96), (__p = v44) == 0) || !v44[455])
  {
LABEL_89:
    v45 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v45 + 8), (uint64_t)"timed out waiting for local QoS", 31);
    *(_BYTE *)(v45 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v45 + 17) = 0;
    SipSession::reportSetupTimeoutToIRat((std::__shared_weak_count *)this);
    std::string::basic_string[abi:ne180100]<0>(v134, "LocalQualityOfServiceTimeout");
    SipSession::hangUp((std::__shared_weak_count *)this, (uint64_t)v134, 0, (uint64_t)v128);
    ImsResult::~ImsResult((ImsResult *)v128);
    if (SHIBYTE(v134[2]) < 0)
      operator delete((void *)v134[0]);
    if (!v43)
      return;
  }
  v46 = (unint64_t *)&v43->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
LABEL_245:
    v101 = v43;
    goto LABEL_246;
  }
}

void sub_1BEF618F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 233) < 0)
    operator delete(*(void **)(v33 - 256));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t SipSession::confirmed(SipSession *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v1 = *((_QWORD *)this + 89);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  v15 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  if (!v1)
  {
    v9 = 0;
    if (!v2)
      return v9;
    goto LABEL_16;
  }
  v5 = *((_QWORD *)this + 89);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 144))(v5);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v2 = v15;
  if (v15)
  {
LABEL_16:
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v9;
}

void sub_1BEF61B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipSession::rejectWithReason(SipSession *a1, std::__shared_weak_count *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[8];
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;

  SipSessionInterface::terminationReason(a2, a3, (BambiCallTerminationReason *)v11);
  SipSession::rejectWithReason(a1, a2, (uint64_t)v11);
  v5 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v18;
  if (v18)
  {
    v9 = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v17 < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
}

void sub_1BEF61CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BambiCallTerminationReason::~BambiCallTerminationReason((void **)va);
  _Unwind_Resume(a1);
}

void SipSession::hangUp(std::__shared_weak_count *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[8];
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *__p;
  char v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;

  SipSessionInterface::terminationReason(a1, a2, (BambiCallTerminationReason *)v13);
  SipSession::hangUp((uint64_t *)a1, (uint64_t)v13, a3, a4);
  v7 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v20;
  if (v20)
  {
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v19 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
}

void sub_1BEF61DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BambiCallTerminationReason::~BambiCallTerminationReason((void **)va);
  _Unwind_Resume(a1);
}

void SipSession::sendPendingInvite(SipSession *this)
{
  uint64_t v2;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD v8[2];
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  std::string __str;

  if (*((char *)this + 1719) < 0)
  {
    if (!*((_QWORD *)this + 213))
      return;
  }
  else if (!*((_BYTE *)this + 1719))
  {
    return;
  }
  if (SipSession::terminating(this) || (*(unsigned int (**)(SipSession *))(*(_QWORD *)this + 264))(this))
  {
    v2 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
    v3 = *(_QWORD **)(v2 + 8);
    v4 = "not sending pending INVITE in terminated session";
    v5 = 48;
LABEL_8:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    return;
  }
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 34, "GlareTimer"))
  {
    v2 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
    v3 = *(_QWORD **)(v2 + 8);
    v4 = "not sending pending INVITE while glare timer is active";
    v5 = 54;
    goto LABEL_8;
  }
  memset(&__str, 0, sizeof(__str));
  if (*((char *)this + 1719) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 212), *((_QWORD *)this + 213));
    if (*((char *)this + 1719) < 0)
    {
      **((_BYTE **)this + 212) = 0;
      *((_QWORD *)this + 213) = 0;
      goto LABEL_16;
    }
  }
  else
  {
    __str = *(std::string *)((char *)this + 1696);
  }
  *((_BYTE *)this + 1696) = 0;
  *((_BYTE *)this + 1719) = 0;
LABEL_16:
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  SipSession::sendInvite((uint64_t)this, &__str, (ImsResult *)&v13);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v8[0] = &off_1E78B7238;
  v8[1] = &_bambiDomain;
  v9 = 1073741838;
  if (*((uint64_t **)&v13 + 1) == &_bambiDomain)
  {
    v6 = v14;
    ImsResult::~ImsResult((ImsResult *)v8);
    if (v6 == 1073741838)
    {
      v7 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"can't send pending INVITE now. I'll try later.", 46);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
      std::string::operator=((std::string *)((char *)this + 1696), &__str);
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)v8);
  }
  ImsResult::~ImsResult((ImsResult *)&v13);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BEF62020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  ImsResult::~ImsResult((ImsResult *)va);
  if (*(char *)(v11 - 41) < 0)
    operator delete(*(void **)(v11 - 64));
  _Unwind_Resume(a1);
}

void SipSession::sendInvite(uint64_t a1@<X0>, std::string *a2@<X1>, ImsResult *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::string::size_type size;
  SipRequest *RequestInDialog;
  SipMessage *v11;
  ImsResult *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  ImsResult *v15;
  SipHeader *v16;
  unsigned int v17;
  size_t v18;
  std::string::size_type v19;
  const char *v20;
  std::string *v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  const char *v25;
  std::string *v26;
  uint64_t v27;
  SipHeader *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  SipDialog *v37;
  uint64_t v38;
  SipUserAgent *v39;
  uint64_t v40;
  const SipUri *v41;
  size_t v42;
  const char *v43;
  std::string *v44;
  ImsPrefs *v45;
  void **SupportsCurrentLocationDiscoveryKey;
  void *v47;
  int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::string::size_type v53;
  const char *v54;
  std::string *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  SipUserAgent *v62;
  uint64_t v63;
  SipUserAgent *v64;
  unsigned int *v65;
  unsigned int v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *p_shared_weak_owners;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  size_t v76;
  std::string::size_type v77;
  const char *v78;
  const char *v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  _BYTE *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  void *__p[2];
  void *v91[7];
  uint64_t v92;
  std::__shared_weak_count *v93;
  _BYTE v94[24];
  _BYTE *v95;
  _BYTE v96[24];
  _BYTE *v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v92 = 0;
  v93 = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 776);
  if (!v5)
  {
    v7 = 0;
LABEL_11:
    memset(&v91[1], 0, 48);
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    LODWORD(v91[0]) = 1073741826;
    v12 = (ImsResult *)ImsResult::operator<<<char [36]>((uint64_t)__p, "can't send an INVITE without a call");
    ImsLogContainer::logResult((ImsLogContainer *)a1, v12);
    ImsResult::ImsResult(a3, v12);
    goto LABEL_12;
  }
  v7 = std::__shared_weak_count::lock(v5);
  v93 = v7;
  if (!v7)
    goto LABEL_11;
  v8 = *(_QWORD *)(a1 + 768);
  v92 = v8;
  if (!v8)
    goto LABEL_11;
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (!size)
  {
    memset(&v91[1], 0, 48);
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    LODWORD(v91[0]) = 1073741825;
    v15 = (ImsResult *)ImsResult::operator<<<char [29]>((uint64_t)__p, "sendInvite: empty inviteType");
    ImsLogContainer::logResult((ImsLogContainer *)a1, v15);
    ImsResult::ImsResult(a3, v15);
    ImsResult::~ImsResult((ImsResult *)__p);
LABEL_13:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  RequestInDialog = SipDialog::createRequestInDialog(*(_QWORD *)(a1 + 240), (const std::string *)"INVITE", *(_QWORD *)(v8 + 512) != 0);
  v11 = RequestInDialog;
  if (*(char *)(a1 + 815) < 0)
  {
    if (!*(_QWORD *)(a1 + 800))
      goto LABEL_21;
    goto LABEL_20;
  }
  if (*(_BYTE *)(a1 + 815))
  {
LABEL_20:
    v16 = SipMessage::header<SipSubjectHeader>(RequestInDialog, 1);
    std::string::operator=((std::string *)((char *)v16 + 64), (const std::string *)(a1 + 792));
  }
LABEL_21:
  v17 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v18 = a2->__r_.__value_.__l.__size_;
  if ((v17 & 0x80u) == 0)
    v19 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v19 = a2->__r_.__value_.__l.__size_;
  if (v19 == 11)
  {
    if ((v17 & 0x80) != 0)
    {
      if (!memcmp(a2->__r_.__value_.__l.__data_, "EmptyInvite", a2->__r_.__value_.__l.__size_))
        goto LABEL_37;
    }
    else
    {
      if (!*((_BYTE *)&a2->__r_.__value_.__s + 23))
        goto LABEL_37;
      v20 = "EmptyInvite";
      v21 = a2;
      v22 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      while (v21->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v20)
      {
        v21 = (std::string *)((char *)v21 + 1);
        ++v20;
        if (!--v22)
          goto LABEL_37;
      }
    }
  }
  *(_OWORD *)__p = 0u;
  memset(v91, 0, sizeof(v91));
  SipSession::addBodyToInvite((uint64_t)__p, (SipSession *)a1, v11, (unsigned __int8 *)a2);
  if ((*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)__p[1] + 24))(__p[1], LODWORD(v91[0])))
  {
    if (v11)
      (*(void (**)(SipMessage *))(*(_QWORD *)v11 + 8))(v11);
    ImsLogContainer::logResult((ImsLogContainer *)a1, (ImsResult *)__p);
    ImsResult::ImsResult(a3, (const ImsResult *)__p);
LABEL_12:
    ImsResult::~ImsResult((ImsResult *)__p);
    if (!v7)
      return;
    goto LABEL_13;
  }
  ImsResult::~ImsResult((ImsResult *)__p);
  v17 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v18 = a2->__r_.__value_.__l.__size_;
LABEL_37:
  v23 = v17;
  if ((v17 & 0x80u) == 0)
    v24 = v17;
  else
    v24 = v18;
  if (v24 != 18)
    goto LABEL_51;
  if ((v17 & 0x80) != 0)
  {
    if (memcmp(a2->__r_.__value_.__l.__data_, "SRVCCFailureInvite", v18))
      goto LABEL_51;
    goto LABEL_48;
  }
  if (!v17)
  {
LABEL_48:
    std::string::basic_string[abi:ne180100]<0>(__p, "failure to transition to CS domain");
    v28 = SipMessage::header<SipReasonHeader>(v11, 1);
    SipReasonHeader::addReason(v28, &SipReason::kProtocolSip, 487, (uint64_t)__p);
    if (SHIBYTE(v91[0]) < 0)
      operator delete(__p[0]);
    v23 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v18 = a2->__r_.__value_.__l.__size_;
    v17 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    goto LABEL_51;
  }
  v25 = "SRVCCFailureInvite";
  v26 = a2;
  v27 = v17;
  while (v26->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v25)
  {
    v26 = (std::string *)((char *)v26 + 1);
    ++v25;
    if (!--v27)
      goto LABEL_48;
  }
LABEL_51:
  if ((v17 & 0x80u) == 0)
    v29 = v23;
  else
    v29 = v18;
  if (v29 != 13)
    goto LABEL_87;
  if ((v17 & 0x80) != 0)
  {
    if (memcmp(a2->__r_.__value_.__l.__data_, "InitialInvite", v18))
      goto LABEL_87;
  }
  else if (v17)
  {
    v30 = 0;
    while (a2->__r_.__value_.__s.__data_[v30] == SipSession::kInviteTypeInitial[v30])
    {
      if (v23 == ++v30)
        goto LABEL_62;
    }
    goto LABEL_87;
  }
LABEL_62:
  if (*(char *)(a1 + 919) < 0)
    v31 = *(_QWORD *)(a1 + 904);
  else
    v31 = *(unsigned __int8 *)(a1 + 919);
  if (v31)
  {
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"sendInvite", 10);
    *(_BYTE *)(v32 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)": Starting INVITE with Replace for pull call id : ", 50);
    *(_BYTE *)(v32 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)__p, (const std::string *)(a1 + 896));
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v32 + 56))(v32, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v32 + 17) = 0;
    if (SHIBYTE(v91[3]) < 0)
      operator delete(v91[1]);
    if (SHIBYTE(v91[0]) < 0)
      operator delete(__p[0]);
    v33 = SipMessage::addHeader<SipReplacesHeader>(v11);
    v34 = *(_QWORD *)(a1 + 240);
    if (v34 && (v35 = *(_QWORD *)(v34 + 208)) != 0)
      v36 = *(_QWORD *)(v35 + 136);
    else
      v36 = 0;
    if ((SipUserAgent::getCallTransferInfo(v36, a1 + 896, (uint64_t)v33) & 1) == 0)
    {
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"sendInvite", 10);
      *(_BYTE *)(v40 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)": cannot find dialog for pull call id : ", 40);
      *(_BYTE *)(v40 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)__p, (const std::string *)(a1 + 896));
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v40 + 56))(v40, __p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v40 + 17) = 0;
      if (SHIBYTE(v91[3]) < 0)
        operator delete(v91[1]);
      if (SHIBYTE(v91[0]) < 0)
        operator delete(__p[0]);
      if (v11)
        (*(void (**)(SipMessage *))(*(_QWORD *)v11 + 8))(v11);
      memset(&v91[1], 0, 48);
      __p[0] = &off_1E78B7238;
      __p[1] = &_bambiDomain;
      LODWORD(v91[0]) = 1073741836;
      ImsLogContainer::logResult(a1, (uint64_t)__p, (uint64_t)a3);
      goto LABEL_12;
    }
    v37 = *(SipDialog **)(a1 + 240);
    if (v37 && (v38 = *((_QWORD *)v37 + 26)) != 0)
      v39 = *(SipUserAgent **)(v38 + 136);
    else
      v39 = 0;
    v41 = (const SipUri *)SipUserAgent::publicUri(v39);
    SipDialog::updateRemoteUri(v37, v41);
    v23 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v18 = a2->__r_.__value_.__l.__size_;
    v17 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
LABEL_87:
  if ((v17 & 0x80u) == 0)
    v42 = v23;
  else
    v42 = v18;
  if (v42 != 13)
    goto LABEL_112;
  if ((v17 & 0x80) != 0)
  {
    if (memcmp(a2->__r_.__value_.__l.__data_, "InitialInvite", v18))
      goto LABEL_112;
    goto LABEL_98;
  }
  if (!v17)
  {
LABEL_98:
    if (SipSession::emergency((std::__shared_weak_count *)a1))
    {
      SipSessionInterface::stack((std::__shared_weak_count *)a1, __p);
      v45 = (ImsPrefs *)SipStack::prefs((SipStack *)__p[0]);
      SupportsCurrentLocationDiscoveryKey = (void **)ImsPrefs::getSupportsCurrentLocationDiscoveryKey(v45);
      v47 = ImsPrefs::prefWithKey(v45, SupportsCurrentLocationDiscoveryKey);
      if (v47)
        v48 = (*(uint64_t (**)(void *))(*(_QWORD *)v47 + 40))(v47);
      else
        v48 = *((_BYTE *)SupportsCurrentLocationDiscoveryKey + 57) != 0;
      v49 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v50 = (unint64_t *)((char *)__p[1] + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (v48)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "application/sdp, application/vnd.3gpp.current-location-discovery+xml");
        SipMessage::addHeader(v11, (uint64_t)"Accept", (uint64_t)__p, 0);
        if (SHIBYTE(v91[0]) < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "g.3gpp.current-location-discovery");
        SipMessage::addHeader(v11, (uint64_t)"Recv-Info", (uint64_t)__p, 0);
        if (SHIBYTE(v91[0]) < 0)
          operator delete(__p[0]);
      }
    }
    goto LABEL_112;
  }
  v43 = "InitialInvite";
  v44 = a2;
  while (v44->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v43)
  {
    v44 = (std::string *)((char *)v44 + 1);
    ++v43;
    if (!--v23)
      goto LABEL_98;
  }
LABEL_112:
  v52 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v52 & 0x80u) == 0)
    v53 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v53 = a2->__r_.__value_.__l.__size_;
  if (v53 != 13)
    goto LABEL_128;
  if ((v52 & 0x80) != 0)
  {
    if (memcmp(a2->__r_.__value_.__l.__data_, "InitialInvite", a2->__r_.__value_.__l.__size_))
      goto LABEL_128;
    goto LABEL_123;
  }
  if (!*((_BYTE *)&a2->__r_.__value_.__s + 23))
  {
LABEL_123:
    SipSessionInterface::stack((std::__shared_weak_count *)a1, __p);
    *(_BYTE *)(a1 + 1726) = ims::AccessNetwork::isNR((ims::AccessNetwork *)((char *)__p[0] + 3136));
    v56 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v57 = (unint64_t *)((char *)__p[1] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    goto LABEL_128;
  }
  v54 = "InitialInvite";
  v55 = a2;
  while (v55->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v54)
  {
    v55 = (std::string *)((char *)v55 + 1);
    ++v54;
    if (!--v52)
      goto LABEL_123;
  }
LABEL_128:
  *(_OWORD *)__p = 0u;
  memset(v91, 0, sizeof(v91));
  (*(void (**)(void **__return_ptr, uint64_t, std::string *, SipMessage *))(*(_QWORD *)v92 + 64))(__p, v92, a2, v11);
  if (((*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)__p[1] + 24))(__p[1], LODWORD(v91[0])) & 1) == 0)
  {
    SipSession::sendInvite((uint64_t)&v88, (std::__shared_weak_count *)a1, v11, a2);
    ImsResult::operator=((uint64_t)__p, (uint64_t)&v88);
    ImsResult::~ImsResult((ImsResult *)&v88);
  }
  if (v11)
    (*(void (**)(SipMessage *))(*(_QWORD *)v11 + 8))(v11);
  SipSessionInterface::stack((std::__shared_weak_count *)a1, &v88);
  v59 = BambiClient::callCount(*(BambiClient **)(v88 + 136));
  v60 = *(_QWORD *)(a1 + 240);
  if (v59 < 2)
  {
    if (v60 && (v63 = *(_QWORD *)(v60 + 208)) != 0)
      v64 = *(SipUserAgent **)(v63 + 136);
    else
      v64 = 0;
    v65 = (unsigned int *)(SipUserAgent::config(v64) + 24);
  }
  else
  {
    if (v60 && (v61 = *(_QWORD *)(v60 + 208)) != 0)
      v62 = *(SipUserAgent **)(v61 + 136);
    else
      v62 = 0;
    v65 = (unsigned int *)(SipUserAgent::config(v62) + 28);
  }
  v66 = *v65;
  v67 = v89;
  if (v89)
  {
    v68 = (unint64_t *)&v89->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v71 = *(_QWORD *)(a1 + 176);
  v70 = *(std::__shared_weak_count **)(a1 + 184);
  if (v70)
  {
    p_shared_weak_owners = (unint64_t *)&v70->__shared_weak_owners_;
    do
      v73 = __ldxr(p_shared_weak_owners);
    while (__stxr(v73 + 1, p_shared_weak_owners));
    do
      v74 = __ldxr(p_shared_weak_owners);
    while (__stxr(v74 + 1, p_shared_weak_owners));
  }
  if (!v66)
    goto LABEL_185;
  v75 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v76 = a2->__r_.__value_.__l.__size_;
  if ((v75 & 0x80u) == 0)
    v77 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v77 = a2->__r_.__value_.__l.__size_;
  if (v77 != 12)
  {
    if (v77 != 10)
      goto LABEL_185;
    if ((v75 & 0x80) != 0)
    {
      if (memcmp(a2->__r_.__value_.__l.__data_, "HoldInvite", v76))
        goto LABEL_185;
    }
    else if (*((_BYTE *)&a2->__r_.__value_.__s + 23))
    {
      v78 = "HoldInvite";
      while (a2->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v78)
      {
        a2 = (std::string *)((char *)a2 + 1);
        ++v78;
        if (!--v75)
          goto LABEL_171;
      }
      goto LABEL_185;
    }
LABEL_171:
    if (v70)
    {
      v80 = (unint64_t *)&v70->__shared_weak_owners_;
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
    v97 = 0;
    v82 = operator new(0x20uLL);
    *v82 = &off_1E78CAE10;
    v82[1] = a1;
    v82[2] = v71;
    v82[3] = v70;
    v97 = v82;
    SipTimerContainer::startTimer((_QWORD *)(a1 + 264), (uint64_t)"HoldTimer", (uint64_t)v96, v66, 0);
    v83 = v97;
    if (v97 == v96)
    {
      v84 = 4;
      v83 = v96;
LABEL_184:
      (*(void (**)(void))(*(_QWORD *)v83 + 8 * v84))();
      goto LABEL_185;
    }
    goto LABEL_181;
  }
  if ((v75 & 0x80) != 0)
  {
    if (memcmp(a2->__r_.__value_.__l.__data_, "ResumeInvite", v76))
      goto LABEL_185;
LABEL_177:
    if (v70)
    {
      v85 = (unint64_t *)&v70->__shared_weak_owners_;
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
    }
    v95 = 0;
    v87 = operator new(0x20uLL);
    *v87 = &off_1E78CAE10;
    v87[1] = a1;
    v87[2] = v71;
    v87[3] = v70;
    v95 = v87;
    SipTimerContainer::startTimer((_QWORD *)(a1 + 264), (uint64_t)"ResumeTimer", (uint64_t)v94, v66, 0);
    v83 = v95;
    if (v95 == v94)
    {
      v84 = 4;
      v83 = v94;
      goto LABEL_184;
    }
LABEL_181:
    if (!v83)
      goto LABEL_185;
    v84 = 5;
    goto LABEL_184;
  }
  if (!*((_BYTE *)&a2->__r_.__value_.__s + 23))
    goto LABEL_177;
  v79 = "ResumeInvite";
  while (a2->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v79)
  {
    a2 = (std::string *)((char *)a2 + 1);
    ++v79;
    if (!--v75)
      goto LABEL_177;
  }
LABEL_185:
  ImsLogContainer::logResult((ImsLogContainer *)a1, (ImsResult *)__p);
  ImsResult::ImsResult(a3, (const ImsResult *)__p);
  if (v70)
  {
    std::__shared_weak_count::__release_weak(v70);
    std::__shared_weak_count::__release_weak(v70);
  }
  ImsResult::~ImsResult((ImsResult *)__p);
  v7 = v93;
  if (v93)
    goto LABEL_13;
}

void sub_1BEF62C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void SipSession::handlePrackErrorResponse(SipSession *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[72];
  void *__p[2];
  char v15;
  void *v16[2];
  __int128 v17;
  void *v18[2];
  __int128 v19;
  void *v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  if (a2 >= 0x12C)
  {
    v3 = SipSession::confirmed(this);
    v4 = *(_QWORD *)this;
    if (v3)
    {
      v5 = (*(uint64_t (**)(SipSession *))(v4 + 64))(this);
      (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"ignoring PRACK error in confirmed session", 41);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
    }
    else
    {
      v6 = (*(uint64_t (**)(SipSession *))(v4 + 56))(this);
      (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"received ", 9);
      *(_BYTE *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" response to PRACK. Terminating session", 39);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      v24 = 0;
      v22 = 0u;
      v23 = 0u;
      *(_OWORD *)v20 = 0u;
      v21 = 0u;
      *(_OWORD *)v18 = 0u;
      v19 = 0u;
      *(_OWORD *)v16 = 0u;
      v17 = 0u;
      std::string::basic_string[abi:ne180100]<0>(__p, "NetworkError");
      SipSessionInterface::terminationReason((std::__shared_weak_count *)this, (uint64_t)__p, (BambiCallTerminationReason *)v16);
      if (v15 < 0)
        operator delete(__p[0]);
      std::string::__assign_external((std::string *)v18, "Remote end rejected PRACK", 0x19uLL);
      SipSession::hangUp((uint64_t *)this, (uint64_t)v16, 0, (uint64_t)v13);
      ImsResult::~ImsResult((ImsResult *)v13);
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      if (*((_QWORD *)&v23 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
      if (*((_QWORD *)&v22 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (SHIBYTE(v21) < 0)
        operator delete(v20[1]);
      if (SBYTE7(v19) < 0)
        operator delete(v18[0]);
      if (SHIBYTE(v17) < 0)
        operator delete(v16[1]);
    }
  }
}

void sub_1BEF62FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipSession::refer(uint64_t *a1@<X0>, uint64_t *a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X3>, SipEventPackage **a5@<X4>, ImsResult *a6@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  SipUserAgent *v20;
  const ImsResult *v21;
  uint64_t v22;
  uint64_t v23;
  const ImsResult *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  const SipUri *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40[2];
  uint64_t v41[3];
  uint64_t v42;
  std::__shared_weak_count *v43;
  void (**v44)(ImsResult *__hidden);
  uint64_t *v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v7 = *a2;
  if (*a2 == a1[30])
  {
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v44 = &off_1E78B7238;
    v45 = &_bambiDomain;
    v46 = 1073741825;
    v21 = (const ImsResult *)ImsResult::operator<<<char [31]>((uint64_t)&v44, "can't REFER with my own dialog");
    ImsResult::ImsResult(a6, v21);
    ImsResult::~ImsResult((ImsResult *)&v44);
    return;
  }
  if (*(_QWORD *)(v7 + 2056) != 1)
  {
    v42 = 0;
    v43 = 0;
LABEL_12:
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v44 = &off_1E78B7238;
    v45 = &_bambiDomain;
    v46 = 1073741825;
    v22 = ImsResult::operator<<<char [27]>((uint64_t)&v44, "can't REFER a dialog with ");
    v41[2] = *(_QWORD *)(*a2 + 2056);
    v23 = ImsResult::operator<<<unsigned long>(v22);
    v24 = (const ImsResult *)ImsResult::operator<<<char [7]>(v23, " forks");
    ImsResult::ImsResult(a6, v24);
    ImsResult::~ImsResult((ImsResult *)&v44);
    goto LABEL_13;
  }
  v13 = *(_QWORD *)(v7 + 2040);
  v15 = *(_QWORD *)(v13 + 56);
  v14 = *(std::__shared_weak_count **)(v13 + 64);
  v42 = v15;
  v43 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (!v15)
    goto LABEL_12;
  v18 = a1[30];
  if (v18 && (v19 = *(_QWORD *)(v18 + 208)) != 0)
    v20 = *(SipUserAgent **)(v19 + 136);
  else
    v20 = 0;
  if (*(_BYTE *)(SipUserAgent::config(v20) + 617))
  {
    v28 = *a4;
    v29 = (std::__shared_weak_count *)a4[1];
    v41[0] = v28;
    v41[1] = (uint64_t)v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    SipSession::refer(a1, (const SipUri *)(v15 + 184), a3, v41, a5, *a2 + 1536, v15 + 152, *a2 + 1072, (uint64_t)a6);
    if (!v29)
      goto LABEL_13;
    v32 = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
  }
  else
  {
    v34 = *a2;
    if (*(_QWORD *)(*a2 + 632))
      v35 = *(const SipUri **)(*a2 + 632);
    else
      v35 = (const SipUri *)(*a2 + 224);
    v36 = *a4;
    v29 = (std::__shared_weak_count *)a4[1];
    v40[0] = v36;
    v40[1] = (uint64_t)v29;
    if (v29)
    {
      v37 = (unint64_t *)&v29->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      v34 = *a2;
    }
    SipSession::refer(a1, v35, a3, v40, a5, v34 + 1536, v15 + 152, v34 + 1072, (uint64_t)a6);
    if (!v29)
      goto LABEL_13;
    v39 = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldaxr(v39);
    while (__stlxr(v33 - 1, v39));
  }
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_13:
  v25 = v43;
  if (v43)
  {
    v26 = (unint64_t *)&v43->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1BEF63284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<unsigned long>(uint64_t a1)
{
  ImsStringOutStream *v2;

  v2 = *(ImsStringOutStream **)(a1 + 24);
  if (!v2)
  {
    v2 = (ImsStringOutStream *)operator new();
    ImsStringOutStream::ImsStringOutStream(v2, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v2;
  }
  std::ostream::operator<<();
  *((_BYTE *)v2 + 17) = 0;
  return a1;
}

void sub_1BEF63348(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [7]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF633EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipSession::refer(uint64_t *a1@<X0>, const SipUri *a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X3>, SipEventPackage **a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  const ImsResult *v18;
  _BOOL4 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const ImsResult *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  SipRequest *RequestInDialog;
  uint64_t v28;
  uint64_t v29;
  SipUserAgent *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  SipUserAgent *v38;
  uint64_t v39;
  std::string::size_type v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  SipUserAgent *v48;
  uint64_t v49;
  SipEventPackage *v50;
  SipEventPackage *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  SipEventPackage **v66;
  uint64_t *v67;
  std::string v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  void *v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  void *v77[2];
  __int128 v78;
  __int128 v79;
  _BYTE v80[144];
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  __int128 __p;
  uint64_t v85;
  void (**v86)(ImsResult *__hidden);
  uint64_t *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t *v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[2];
  _QWORD v111[5];
  _QWORD v112[3];

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 264))(a1))
  {
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v86 = &off_1E78B7238;
    v87 = &_bambiDomain;
    LODWORD(v88) = 1073741826;
    v18 = (const ImsResult *)ImsResult::operator<<<char [41]>((uint64_t)&v86, "can't send REFER in a terminated session");
    ImsResult::ImsResult((ImsResult *)a9, v18);
LABEL_13:
    ImsResult::~ImsResult((ImsResult *)&v86);
    return;
  }
  if ((SipSession::confirmed((SipSession *)a1) & 1) == 0)
  {
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v86 = &off_1E78B7238;
    v87 = &_bambiDomain;
    LODWORD(v88) = 1073741826;
    v23 = (const ImsResult *)ImsResult::operator<<<char [42]>((uint64_t)&v86, "can't send REFER in an unconfirmed dialog");
    ImsResult::ImsResult((ImsResult *)a9, v23);
    goto LABEL_13;
  }
  SipSession::clientInviteTransaction((SipSession *)a1, (uint64_t *)&v86);
  v66 = a5;
  v67 = a4;
  if (v86)
  {
    v19 = 1;
  }
  else
  {
    SipSession::serverInviteTransaction((SipSession *)a1, (uint64_t *)v73);
    v24 = (std::__shared_weak_count *)v73[1];
    v19 = v73[0] != 0;
    if (v73[1])
    {
      v25 = (unint64_t *)((char *)v73[1] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v20 = (std::__shared_weak_count *)v87;
  if (!v87)
    goto LABEL_10;
  v21 = (unint64_t *)(v87 + 1);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (v19)
      goto LABEL_11;
  }
  else
  {
LABEL_10:
    if (v19)
    {
LABEL_11:
      v89 = 0u;
      v90 = 0u;
      v91 = 0u;
      v86 = &off_1E78B7238;
      v87 = &_bambiDomain;
      LODWORD(v88) = 1073741826;
      ImsResult::operator<<<char [61]>((uint64_t)&v86);
      ImsResult::ImsResult((ImsResult *)a9, (const ImsResult *)&v86);
      goto LABEL_13;
    }
  }
  RequestInDialog = SipDialog::createRequestInDialog(a1[30], (const std::string *)"REFER", 0);
  v112[2] = 257;
  v111[2] = 257;
  v109 = 0;
  v94 = 0u;
  v90 = 0uLL;
  *(_QWORD *)&v91 = 0;
  v89 = 0uLL;
  v87 = (uint64_t *)&off_1E78D08F8;
  v88 = 0;
  v93 = 0;
  *(_QWORD *)&v94 = 0;
  *((_QWORD *)&v91 + 1) = &off_1E78B82D8;
  v92 = &v93;
  v86 = &off_1E78BFCE8;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v108 = 0;
  v110[0] = &off_1E78B82D8;
  v111[1] = 0;
  v111[0] = 0;
  v110[1] = v111;
  v112[1] = 0;
  v112[0] = 0;
  v111[3] = &off_1E78B82D8;
  v111[4] = v112;
  WORD4(v94) = 257;
  v28 = a1[30];
  if (v28 && (v29 = *(_QWORD *)(v28 + 208)) != 0)
    v30 = *(SipUserAgent **)(v29 + 136);
  else
    v30 = 0;
  if (*(_BYTE *)(SipUserAgent::config(v30) + 616))
  {
    SipUri::operator=((SipUri *)&v86, (uint64_t)a2);
  }
  else
  {
    v77[0] = 0;
    v75 = 0u;
    v76 = 0u;
    *(_OWORD *)v73 = 0u;
    v74 = 0u;
    SipSessionInterface::stack((std::__shared_weak_count *)a1, &__p);
    SipStack::makeOutgoingSipUri((SipStack *)__p, a2, (SipUri *)&v86, (uint64_t)v73);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if ((*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)v73[1] + 24))(v73[1], v74))
    {
      v34 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)"unable to convert ", 18);
      *(_BYTE *)(v34 + 17) = 0;
      (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)" to a SIP URI: ", 15);
      *(_BYTE *)(v34 + 17) = 0;
      (*((void (**)(void **, uint64_t))v73[0] + 2))(v73, v34);
      SipUri::operator=((SipUri *)&v86, (uint64_t)a2);
    }
    ImsResult::~ImsResult((ImsResult *)v73);
  }
  v73[0] = "method";
  v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v92, (void **)"method", (uint64_t)&std::piecewise_construct, (__int128 **)v73);
  std::string::operator=((std::string *)(v35 + 7), a3);
  v36 = a1[30];
  if (v36 && (v37 = *(_QWORD *)(v36 + 208)) != 0)
    v38 = *(SipUserAgent **)(v37 + 136);
  else
    v38 = 0;
  if (!*(_BYTE *)(SipUserAgent::config(v38) + 617))
  {
    v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    v40 = (v39 & 0x80u) == 0 ? HIBYTE(a3->__r_.__value_.__r.__words[2]) : a3->__r_.__value_.__l.__size_;
    if (v40 == 6)
    {
      if ((v39 & 0x80) == 0)
      {
        if (*((_BYTE *)&a3->__r_.__value_.__s + 23))
        {
          v41 = "INVITE";
          while (a3->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v41)
          {
            a3 = (const std::string *)((char *)a3 + 1);
            ++v41;
            if (!--v39)
              goto LABEL_50;
          }
          goto LABEL_63;
        }
        goto LABEL_50;
      }
      if (!memcmp(a3->__r_.__value_.__l.__data_, "INVITE", a3->__r_.__value_.__l.__size_))
      {
LABEL_50:
        v42 = *(unsigned __int8 *)(a6 + 23);
        if ((v42 & 0x80u) != 0)
          v42 = *(_QWORD *)(a6 + 8);
        if (v42)
        {
          v43 = *(unsigned __int8 *)(a7 + 23);
          if ((v43 & 0x80u) != 0)
            v43 = *(_QWORD *)(a7 + 8);
          if (v43)
          {
            v44 = *(unsigned __int8 *)(a8 + 23);
            if ((v44 & 0x80u) != 0)
              v44 = *(_QWORD *)(a8 + 8);
            if (v44)
            {
              v73[0] = 0;
              v73[1] = 0;
              *(_QWORD *)&v74 = 0;
              SipSession::createReplacesHeaderAsString(a1[30], (const std::string *)a6, (const std::string *)a7, (const std::string *)a8, (uint64_t)v73);
              std::string::basic_string[abi:ne180100]<0>(&__p, "Replaces");
              SipParameterMap::setParameter((uint64_t)v110, &__p, (const std::string *)v73);
              if (SHIBYTE(v85) < 0)
                operator delete((void *)__p);
              if (SBYTE7(v74) < 0)
                operator delete(v73[0]);
            }
          }
        }
      }
    }
  }
LABEL_63:
  v45 = (char *)SipMessage::addHeader<SipReferToHeader>(RequestInDialog);
  SipUri::operator=((SipUri *)(v45 + 104), (uint64_t)&v86);
  __p = 0uLL;
  v85 = 0;
  v46 = a1[30];
  if (v46 && (v47 = *(_QWORD *)(v46 + 208)) != 0)
    v48 = *(SipUserAgent **)(v47 + 136);
  else
    v48 = 0;
  v49 = SipUserAgent::publicUri(v48);
  SipUri::asString(v49, (uint64_t)&__p, 2);
  SipMessage::addHeader(RequestInDialog, (uint64_t)"Referred-By", (uint64_t)&__p, 0);
  v82 = 0;
  v83 = 0;
  std::string::basic_string[abi:ne180100]<0>(v73, (char *)&str_23_1);
  SipSession::sendRequest(RequestInDialog, (uint64_t)a1, (uint64_t)v73, &v82);
  if (SBYTE7(v74) < 0)
    operator delete(v73[0]);
  if (RequestInDialog)
    (*(void (**)(SipRequest *))(*(_QWORD *)RequestInDialog + 8))(RequestInDialog);
  v81 = 0;
  v79 = 0u;
  memset(v80, 0, sizeof(v80));
  v78 = 0u;
  v76 = 0u;
  *(_OWORD *)v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  *(_OWORD *)v73 = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v73);
  SipMessage::header<SipCSeqHeader>(*(_QWORD *)(v82 + 288));
  std::ostream::operator<<();
  v50 = (SipEventPackage *)operator new();
  v51 = v50;
  v52 = v67[1];
  v71 = *v67;
  v72 = (std::__shared_weak_count *)v52;
  if (v52)
  {
    v53 = (unint64_t *)(v52 + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55 = a1[30];
  if (v55)
  {
    v55 = *(_QWORD *)(v55 + 208);
    if (v55)
      v55 = *(_QWORD *)(v55 + 136);
  }
  SipReferEventPackage::SipReferEventPackage(v50, &v71, v55 + 288);
  v56 = v72;
  if (v72)
  {
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v66)
    *v66 = v51;
  v59 = a1[30];
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v73[1], &v68);
  SipDialog::subscribeToEventPackage(v59, v51, &v68, 1, &v69);
  v60 = v70;
  if (v70)
  {
    v61 = (unint64_t *)&v70->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  *(_OWORD *)(a9 + 24) = 0u;
  *(_OWORD *)(a9 + 40) = 0u;
  *(_OWORD *)(a9 + 56) = 0u;
  *(_QWORD *)a9 = &off_1E78B7238;
  *(_QWORD *)(a9 + 8) = &_bambiDomain;
  *(_DWORD *)(a9 + 16) = 0;
  v73[0] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)v73 + *((_QWORD *)v73[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v73[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (SHIBYTE(v78) < 0)
    operator delete(v77[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v80);
  v63 = v83;
  if (v83)
  {
    v64 = (unint64_t *)&v83->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v85) < 0)
    operator delete((void *)__p);
  SipUri::~SipUri((SipUri *)&v86);
}

void sub_1BEF63D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  if (a62 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  SipUri::~SipUri((SipUri *)&a63);
  _Unwind_Resume(a1);
}

void SipSession::refer(uint64_t *a1@<X0>, const SipUri *a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X3>, SipEventPackage **a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  uint64_t v22[2];

  v11 = (std::__shared_weak_count *)a4[1];
  v22[0] = *a4;
  v22[1] = (uint64_t)v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v20, (char *)&str_23_1);
  std::string::basic_string[abi:ne180100]<0>(v18, (char *)&str_23_1);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_23_1);
  SipSession::refer(a1, a2, a3, v22, a5, (uint64_t)v20, (uint64_t)v18, (uint64_t)__p, a6);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BEF63F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 64);
  _Unwind_Resume(a1);
}

void SipSession::createReplacesHeaderAsString(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;

  if (a1)
  {
    v9 = *(_QWORD *)(a1 + 208);
    if (v9)
      v9 = *(_QWORD *)(v9 + 136);
  }
  else
  {
    v9 = 0;
  }
  v10 = SipMessageEncodingMap::headerPrototype<SipReplacesHeader>((_QWORD *)(v9 + 288));
  if (v10)
    v11 = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 32))(v10);
  else
    v11 = 0;
  std::string::operator=((std::string *)(v11 + 104), a2);
  *(_QWORD *)&v16 = "to-tag";
  v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v11 + 72), (void **)"to-tag", (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
  std::string::operator=((std::string *)(v12 + 7), a3);
  *(_QWORD *)&v16 = "from-tag";
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v11 + 72), (void **)"from-tag", (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
  std::string::operator=((std::string *)(v13 + 7), a4);
  __p[0] = 0;
  __p[1] = 0;
  v20 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v16, 1);
  (*(void (**)(__int128 *, void **))(v16 + 32))(&v16, __p);
  SipParameterMap::toStream((SipParameterMap *)(v11 + 64), (ImsOutStream *)&v16, 0, 0, 0, 0);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v17 + 1) + 8, &v14);
  if (*(char *)(a5 + 23) < 0)
    operator delete(*(void **)a5);
  *(_OWORD *)a5 = v14;
  *(_QWORD *)(a5 + 16) = v15;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *(_QWORD *)&v16 = &off_1E78D7A10;
  if ((_BYTE)v17 && *((_QWORD *)&v16 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v16 + 1) + 8))(*((_QWORD *)&v16 + 1));
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_1BEF6417C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 && a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsResult::operator<<<char [42]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF64250(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [61]>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
  {
    v2 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v2, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"can't send REFER while there is a current INVITE transaction", 60);
  *(_BYTE *)(v2 + 17) = 0;
  return a1;
}

void sub_1BEF642E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void *SipMessage::addHeader<SipReferToHeader>(SipMessage *a1)
{
  const void *v2;
  void *v3;
  SipHeader *v4;
  SipHeader *v5;

  v2 = (const void *)SipMessageEncodingMap::headerPrototypeWithName(*((_QWORD **)a1 + 10), (uint64_t)"Refer-To");
  if (v2
  {
  }
  else
  {
    return 0;
  }
}

void SipSession::lazuliRefer(uint64_t *a1@<X0>, uint64_t *a2@<X1>, const SipUri *a3@<X2>, const std::string *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  const ImsResult *v12;
  _BOOL4 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  SipRequest *RequestInDialog;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  SipUserAgent *v26;
  uint64_t v27;
  SipHeader *v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  void **v41;
  void *i;
  unint64_t v43;
  _QWORD *v44;
  float v45;
  float v46;
  _BOOL8 v47;
  unint64_t v48;
  unint64_t v49;
  int8x8_t prime;
  void *v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint8x8_t v56;
  unint64_t v57;
  uint8x8_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  void *v73[2];
  char v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  void *__p;
  std::__shared_weak_count *v78;
  _QWORD *v79[3];
  void *v80[2];
  uint64_t v81;
  void *v82[2];
  uint64_t v83;
  _OWORD v84[25];
  uint64_t v85;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 264))(a1))
  {
    memset((char *)&v84[1] + 8, 0, 48);
    *(_QWORD *)&v84[0] = &off_1E78B7238;
    *((_QWORD *)&v84[0] + 1) = &_bambiDomain;
    LODWORD(v84[1]) = 1073741826;
    v12 = (const ImsResult *)ImsResult::operator<<<char [41]>((uint64_t)v84, "can't send REFER in a terminated session");
    ImsResult::ImsResult((ImsResult *)a6, v12);
LABEL_11:
    ImsResult::~ImsResult((ImsResult *)v84);
    return;
  }
  SipSession::clientInviteTransaction((SipSession *)a1, (uint64_t *)v84);
  if (*(_QWORD *)&v84[0])
  {
    v13 = 1;
  }
  else
  {
    SipSession::serverInviteTransaction((SipSession *)a1, (uint64_t *)&__p);
    v17 = v78;
    v13 = __p != 0;
    if (v78)
    {
      p_shared_owners = (unint64_t *)&v78->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v84[0] + 1);
  if (!*((_QWORD *)&v84[0] + 1))
    goto LABEL_9;
  v15 = (unint64_t *)(*((_QWORD *)&v84[0] + 1) + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v13)
      goto LABEL_10;
  }
  else
  {
LABEL_9:
    if (v13)
    {
LABEL_10:
      memset((char *)&v84[1] + 8, 0, 48);
      *(_QWORD *)&v84[0] = &off_1E78B7238;
      *((_QWORD *)&v84[0] + 1) = &_bambiDomain;
      LODWORD(v84[1]) = 1073741826;
      ImsResult::operator<<<char [61]>((uint64_t)v84);
      ImsResult::ImsResult((ImsResult *)a6, (const ImsResult *)v84);
      goto LABEL_11;
    }
  }
  v20 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Refer ", 6);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)a3 + 40))(a3, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" to group ", 10);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1[30] + 224) + 40))(a1[30] + 224, v20);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v20 + 17) = 0;
  RequestInDialog = SipDialog::createRequestInDialog(a1[30], (const std::string *)"REFER", 0);
  v85 = 0;
  memset(v84, 0, sizeof(v84));
  SipUri::SipUri((SipUri *)v84, a3);
  __p = "method";
  v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84[4] + 1, (void **)"method", (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  std::string::operator=((std::string *)(v22 + 7), a4);
  v23 = (char *)SipMessage::addHeader<SipReferToHeader>(RequestInDialog);
  SipUri::operator=((SipUri *)(v23 + 104), (uint64_t)v84);
  std::string::basic_string[abi:ne180100]<0>(&__p, "false");
  SipMessage::addHeader(RequestInDialog, (uint64_t)"Refer-Sub", (uint64_t)&__p, 0);
  if (SHIBYTE(v79[0]) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "norefersub");
  SipMessage::addHeader(RequestInDialog, (uint64_t)"Supported", (uint64_t)&__p, 0);
  if (SHIBYTE(v79[0]) < 0)
    operator delete(__p);
  v82[0] = 0;
  v82[1] = 0;
  v83 = 0;
  v24 = a1[30];
  if (v24 && (v25 = *(_QWORD *)(v24 + 208)) != 0)
    v26 = *(SipUserAgent **)(v25 + 136);
  else
    v26 = 0;
  v27 = SipUserAgent::publicUri(v26);
  SipUri::asString(v27, (uint64_t)v82, 2);
  SipMessage::addHeader(RequestInDialog, (uint64_t)"Referred-By", (uint64_t)v82, 0);
  v80[0] = 0;
  v80[1] = 0;
  v81 = 0;
  std::string::basic_string[abi:ne180100]<0>(v80, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.session.group");
  SipMessage::addHeader(RequestInDialog, (uint64_t)"P-Preferred-Service", (uint64_t)v80, 0);
  v79[1] = 0;
  v79[2] = (_QWORD *)256;
  __p = &off_1E78B82D8;
  v78 = (std::__shared_weak_count *)v79;
  v79[0] = 0;
  v28 = SipMessage::header<SipAcceptContactHeader>(RequestInDialog, 1);
  SipAcceptContactHeader::addValueWithServiceMaskAndParams(v28, (BambiServices *)0x20000, (const SipParameterMap *)&__p);
  v75 = 0;
  v76 = 0;
  std::string::basic_string[abi:ne180100]<0>(v73, (char *)&str_23_1);
  SipSession::sendRequest(RequestInDialog, (uint64_t)a1, (uint64_t)v73, &v75);
  if (v74 < 0)
    operator delete(v73[0]);
  v29 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"Refer sent", 10);
  *(_BYTE *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v29 + 17) = 0;
  if (RequestInDialog)
    (*(void (**)(SipRequest *))(*(_QWORD *)RequestInDialog + 8))(RequestInDialog);
  v30 = SipMessage::header<SipCSeqHeader>(*(_QWORD *)(v75 + 288));
  if (v30)
    v31 = v30[15];
  else
    v31 = 0;
  v32 = *a5;
  v34 = *a2;
  v33 = (std::__shared_weak_count *)a2[1];
  if (v33)
  {
    p_shared_weak_owners = (unint64_t *)&v33->__shared_weak_owners_;
    do
      v36 = __ldxr(p_shared_weak_owners);
    while (__stxr(v36 + 1, p_shared_weak_owners));
  }
  v37 = v31;
  v38 = *(_QWORD *)(v32 + 1808);
  if (v38)
  {
    v39 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
    v39.i16[0] = vaddlv_u8(v39);
    if (v39.u32[0] > 1uLL)
    {
      v40 = v31;
      if (v38 <= v31)
        v40 = v31 % v38;
    }
    else
    {
      v40 = ((_DWORD)v38 - 1) & v31;
    }
    v41 = *(void ***)(*(_QWORD *)(v32 + 1800) + 8 * v40);
    if (v41)
    {
      for (i = *v41; i; i = *(void **)i)
      {
        v43 = *((_QWORD *)i + 1);
        if (v43 == v31)
        {
          if (*((_DWORD *)i + 4) == v31)
          {
            if (!v33)
              goto LABEL_111;
            goto LABEL_109;
          }
        }
        else
        {
          if (v39.u32[0] > 1uLL)
          {
            if (v43 >= v38)
              v43 %= v38;
          }
          else
          {
            v43 &= v38 - 1;
          }
          if (v43 != v40)
            break;
        }
      }
    }
  }
  else
  {
    v40 = 0;
  }
  i = operator new(0x28uLL);
  v44 = (_QWORD *)(v32 + 1816);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v31;
  *((_DWORD *)i + 4) = v31;
  *((_QWORD *)i + 3) = 0;
  *((_QWORD *)i + 4) = 0;
  v45 = (float)(unint64_t)(*(_QWORD *)(v32 + 1824) + 1);
  v46 = *(float *)(v32 + 1832);
  if (v38 && (float)(v46 * (float)v38) >= v45)
  {
    v37 = v40;
    goto LABEL_99;
  }
  v47 = 1;
  if (v38 >= 3)
    v47 = (v38 & (v38 - 1)) != 0;
  v48 = v47 | (2 * v38);
  v49 = vcvtps_u32_f32(v45 / v46);
  if (v48 <= v49)
    prime = (int8x8_t)v49;
  else
    prime = (int8x8_t)v48;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v38 = *(_QWORD *)(v32 + 1808);
  }
  if (*(_QWORD *)&prime <= v38)
  {
    if (*(_QWORD *)&prime >= v38)
      goto LABEL_95;
    v57 = vcvtps_u32_f32((float)*(unint64_t *)(v32 + 1824) / *(float *)(v32 + 1832));
    if (v38 < 3 || (v58 = (uint8x8_t)vcnt_s8((int8x8_t)v38), v58.i16[0] = vaddlv_u8(v58), v58.u32[0] > 1uLL))
    {
      v57 = std::__next_prime(v57);
    }
    else
    {
      v59 = 1 << -(char)__clz(v57 - 1);
      if (v57 >= 2)
        v57 = v59;
    }
    if (*(_QWORD *)&prime <= v57)
      prime = (int8x8_t)v57;
    if (*(_QWORD *)&prime >= v38)
    {
      v38 = *(_QWORD *)(v32 + 1808);
      goto LABEL_95;
    }
    if (!*(_QWORD *)&prime)
    {
      v72 = *(void **)(v32 + 1800);
      *(_QWORD *)(v32 + 1800) = 0;
      if (v72)
        operator delete(v72);
      v38 = 0;
      *(_QWORD *)(v32 + 1808) = 0;
      goto LABEL_95;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v51 = operator new(8 * *(_QWORD *)&prime);
  v52 = *(void **)(v32 + 1800);
  *(_QWORD *)(v32 + 1800) = v51;
  if (v52)
    operator delete(v52);
  v53 = 0;
  *(int8x8_t *)(v32 + 1808) = prime;
  do
    *(_QWORD *)(*(_QWORD *)(v32 + 1800) + 8 * v53++) = 0;
  while (*(_QWORD *)&prime != v53);
  v54 = (_QWORD *)*v44;
  if (*v44)
  {
    v55 = v54[1];
    v56 = (uint8x8_t)vcnt_s8(prime);
    v56.i16[0] = vaddlv_u8(v56);
    if (v56.u32[0] > 1uLL)
    {
      if (v55 >= *(_QWORD *)&prime)
        v55 %= *(_QWORD *)&prime;
    }
    else
    {
      v55 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)(v32 + 1800) + 8 * v55) = v44;
    v60 = (_QWORD *)*v54;
    if (*v54)
    {
      do
      {
        v61 = v60[1];
        if (v56.u32[0] > 1uLL)
        {
          if (v61 >= *(_QWORD *)&prime)
            v61 %= *(_QWORD *)&prime;
        }
        else
        {
          v61 &= *(_QWORD *)&prime - 1;
        }
        if (v61 != v55)
        {
          v62 = *(_QWORD *)(v32 + 1800);
          if (!*(_QWORD *)(v62 + 8 * v61))
          {
            *(_QWORD *)(v62 + 8 * v61) = v54;
            goto LABEL_91;
          }
          *v54 = *v60;
          *v60 = **(_QWORD **)(*(_QWORD *)(v32 + 1800) + 8 * v61);
          **(_QWORD **)(*(_QWORD *)(v32 + 1800) + 8 * v61) = v60;
          v60 = v54;
        }
        v61 = v55;
LABEL_91:
        v54 = v60;
        v60 = (_QWORD *)*v60;
        v55 = v61;
      }
      while (v60);
    }
  }
  v38 = (unint64_t)prime;
LABEL_95:
  if ((v38 & (v38 - 1)) != 0)
  {
    if (v38 <= v37)
      v37 %= v38;
  }
  else
  {
    v37 = ((_DWORD)v38 - 1) & v37;
  }
LABEL_99:
  v63 = *(_QWORD *)(v32 + 1800);
  v64 = *(_QWORD **)(v63 + 8 * v37);
  if (v64)
  {
    *(_QWORD *)i = *v64;
LABEL_107:
    *v64 = i;
    goto LABEL_108;
  }
  *(_QWORD *)i = *v44;
  *v44 = i;
  *(_QWORD *)(v63 + 8 * v37) = v44;
  if (*(_QWORD *)i)
  {
    v65 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v38 & (v38 - 1)) != 0)
    {
      if (v65 >= v38)
        v65 %= v38;
    }
    else
    {
      v65 &= v38 - 1;
    }
    v64 = (_QWORD *)(*(_QWORD *)(v32 + 1800) + 8 * v65);
    goto LABEL_107;
  }
LABEL_108:
  ++*(_QWORD *)(v32 + 1824);
  if (!v33)
    goto LABEL_111;
LABEL_109:
  v66 = (unint64_t *)&v33->__shared_weak_owners_;
  do
    v67 = __ldxr(v66);
  while (__stxr(v67 + 1, v66));
LABEL_111:
  v68 = (std::__shared_weak_count *)*((_QWORD *)i + 4);
  *((_QWORD *)i + 3) = v34;
  *((_QWORD *)i + 4) = v33;
  if (v68)
    std::__shared_weak_count::__release_weak(v68);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  *(_OWORD *)(a6 + 24) = 0u;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_QWORD *)a6 = &off_1E78B7238;
  *(_QWORD *)(a6 + 8) = &_bambiDomain;
  *(_DWORD *)(a6 + 16) = 0;
  v69 = v76;
  if (v76)
  {
    v70 = (unint64_t *)&v76->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  __p = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v78, v79[0]);
  if (SHIBYTE(v81) < 0)
    operator delete(v80[0]);
  if (SHIBYTE(v83) < 0)
    operator delete(v82[0]);
  SipUri::~SipUri((SipUri *)v84);
}

void sub_1BEF64D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void (**a19)(SipParameterMap *__hidden this), uint64_t a20,_QWORD *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  std::__shared_weak_count *v36;
  _QWORD *v37;
  std::__shared_weak_count *v39;

  v39 = (std::__shared_weak_count *)v37[4];
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  operator delete(v37);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a10, a21);
  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  SipUri::~SipUri((SipUri *)&a36);
  _Unwind_Resume(a1);
}

void SipSession::makeLocalResumeSdp(_QWORD **a1, char a2)
{
  uint64_t v3;
  SDPMedia *v4;
  SDPMedia *v5;

  SDPModel::resumeAllStreams(*a1, a2);
  v3 = (uint64_t)*a1;
  v4 = (SDPMedia *)(*a1)[52];
  v5 = *(SDPMedia **)(v3 + 424);
  while (v4 != v5)
  {
    SDPMedia::removePreconditions(v4);
    v4 = (SDPMedia *)((char *)v4 + 200);
  }
}

void SipSession::addBodyToInvite(uint64_t a1, SipSession *a2, SipMessage *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  const char *v12;
  unsigned __int8 *v13;
  const char *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  SipDialogFork *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const ImsResult *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  SipUserAgent *v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  const char *v43;
  unsigned __int8 *v44;
  const ImsResult *v45;
  const char *v46;
  unsigned __int8 *v47;
  const char *v48;
  unsigned __int8 *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  SDPMedia *v53;
  SDPMedia *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  SipUserAgent *v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  SipCallWaitingInfoBody *v79;
  SipRecipientListBody *v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  __int128 v87;
  _QWORD *v88[2];
  _QWORD *v89[5];
  __int128 v90;
  int v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;

  v8 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)a2 + 64))(a2);
  (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"SipSession::addBodyToInvite type=", 33);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v8 + 32))(v8, a4);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v96 = 0uLL;
  v9 = a4[23];
  v10 = *((_QWORD *)a4 + 1);
  if ((v9 & 0x80u) == 0)
    v11 = a4[23];
  else
    v11 = *((_QWORD *)a4 + 1);
  if (v11 != 13)
  {
    if (v11 != 19)
      goto LABEL_28;
    if ((v9 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, "InitialInviteLazuli", v10))
        goto LABEL_28;
    }
    else if (a4[23])
    {
      v12 = "InitialInviteLazuli";
      v13 = a4;
      while (*v13 == *(unsigned __int8 *)v12)
      {
        ++v13;
        ++v12;
        if (!--v9)
          goto LABEL_19;
      }
      goto LABEL_28;
    }
LABEL_19:
    v90 = 0uLL;
    v16 = *((_QWORD *)a2 + 142);
    if (v16)
      SDPSession::localLazuliSdp(*(SDPSession **)(v16 + 120), &v90);
    v17 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)a2 + 64))(a2);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"SipSession::addBodyToInvite local=", 34);
    *(_BYTE *)(v17 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if ((_QWORD)v90)
    {
      std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> const&,void>((uint64_t *)&v90, &v95);
      v96 = v95;
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
    if (!*((_QWORD *)&v90 + 1))
      goto LABEL_56;
    v19 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
LABEL_54:
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_56;
  }
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a4, "InitialInvite", v10))
      goto LABEL_28;
    goto LABEL_42;
  }
  if (!a4[23])
  {
LABEL_42:
    v90 = 0uLL;
    SipSession::localTemplateSdp(a2, (uint64_t *)&v90);
    if ((_QWORD)v90)
    {
      std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> const&,void>((uint64_t *)&v90, &v95);
      v86 = (_QWORD *)v95;
      v96 = v95;
      v35 = *((_QWORD *)a2 + 30);
      if (v35 && (v36 = *(_QWORD *)(v35 + 208)) != 0)
        v37 = *(SipUserAgent **)(v36 + 136);
      else
        v37 = 0;
      if (*(_BYTE *)(SipUserAgent::config(v37) + 813))
        SDPModel::setDirectionForSessionAndMedia(v86, 4);
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
    if (!*((_QWORD *)&v90 + 1))
      goto LABEL_56;
    v38 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v20 = __ldaxr(v38);
    while (__stlxr(v20 - 1, v38));
    goto LABEL_54;
  }
  v14 = "InitialInvite";
  v15 = a4;
  while (*v15 == *(unsigned __int8 *)v14)
  {
    ++v15;
    ++v14;
    if (!--v9)
      goto LABEL_42;
  }
LABEL_28:
  v21 = *((_QWORD *)a2 + 30);
  if (*(_QWORD *)(v21 + 2056) != 1)
  {
    v24 = 0;
    v95 = 0uLL;
    goto LABEL_36;
  }
  v22 = *(_QWORD *)(v21 + 2040);
  v23 = *(SipDialogFork **)(v22 + 56);
  v24 = *(std::__shared_weak_count **)(v22 + 64);
  *(_QWORD *)&v95 = v23;
  *((_QWORD *)&v95 + 1) = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  if (!v23)
  {
LABEL_36:
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    *(_QWORD *)&v90 = &off_1E78B7238;
    *((_QWORD *)&v90 + 1) = &_bambiDomain;
    v91 = 1073741826;
    v28 = ImsResult::operator<<<char [14]>((uint64_t)&v90, "can't send a ");
    v29 = ImsResult::operator<<<std::string>(v28, (uint64_t)a4);
    v30 = ImsResult::operator<<<char [17]>(v29, " when there are ");
    v89[4] = *(_QWORD **)(*((_QWORD *)a2 + 30) + 2056);
    v31 = ImsResult::operator<<<unsigned long>(v30);
    v32 = (const ImsResult *)ImsResult::operator<<<char [6]>(v31, "forks");
    ImsResult::ImsResult((ImsResult *)a1, v32);
    ImsResult::~ImsResult((ImsResult *)&v90);
    v27 = 1;
    if (!v24)
      goto LABEL_40;
    goto LABEL_37;
  }
  SipDialogFork::createSdpOffer(v23, "INVITE", a4, &v90);
  v27 = 0;
  v96 = v90;
  if (!v24)
    goto LABEL_40;
LABEL_37:
  v33 = (unint64_t *)&v24->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_40:
    if ((v27 & 1) != 0)
      goto LABEL_153;
LABEL_56:
    v39 = (_QWORD *)v96;
    if (!(_QWORD)v96)
    {
      v92 = 0u;
      v93 = 0u;
      v94 = 0u;
      *(_QWORD *)&v90 = &off_1E78B7238;
      *((_QWORD *)&v90 + 1) = &_bambiDomain;
      v91 = 1073741826;
      v45 = (const ImsResult *)ImsResult::operator<<<char [42]>((uint64_t)&v90, "no local SDP when trying to create INVITE");
      ImsResult::ImsResult((ImsResult *)a1, v45);
      ImsResult::~ImsResult((ImsResult *)&v90);
      goto LABEL_153;
    }
    v40 = a4[23];
    v41 = *((_QWORD *)a4 + 1);
    if ((v40 & 0x80u) == 0)
      v42 = a4[23];
    else
      v42 = *((_QWORD *)a4 + 1);
    if (v42 != 14)
    {
      if (v42 != 12)
      {
        if (v42 != 10)
          goto LABEL_114;
        if ((v40 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a4, "HoldInvite", v41))
            goto LABEL_114;
        }
        else if (a4[23])
        {
          v43 = "HoldInvite";
          v44 = a4;
          while (*v44 == *(unsigned __int8 *)v43)
          {
            ++v44;
            ++v43;
            if (!--v40)
              goto LABEL_83;
          }
          goto LABEL_114;
        }
LABEL_83:
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
        v89[2] = v39;
        v89[3] = *((_QWORD **)&v96 + 1);
        if (*((_QWORD *)&v96 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        SDPModel::hold(v39);
        v54 = (SDPMedia *)v39[52];
        v53 = (SDPMedia *)v39[53];
        while (v54 != v53)
        {
          SDPMedia::removePreconditions(v54);
          v54 = (SDPMedia *)((char *)v54 + 200);
        }
        if (!v50)
          goto LABEL_114;
        v55 = (unint64_t *)&v50->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
LABEL_112:
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
        goto LABEL_114;
      }
      if ((v40 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a4, "ResumeInvite", v41))
          goto LABEL_114;
      }
      else if (a4[23])
      {
        v48 = "ResumeInvite";
        v49 = a4;
        while (*v49 == *(unsigned __int8 *)v48)
        {
          ++v49;
          ++v48;
          if (!--v40)
            goto LABEL_102;
        }
        goto LABEL_114;
      }
LABEL_102:
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
      v89[0] = v39;
      v89[1] = *((_QWORD **)&v96 + 1);
      if (*((_QWORD *)&v96 + 1))
      {
        v60 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      v62 = *((_QWORD *)a2 + 30);
      if (v62 && (v63 = *(_QWORD *)(v62 + 208)) != 0)
        v64 = *(SipUserAgent **)(v63 + 136);
      else
        v64 = 0;
      v65 = SipUserAgent::config(v64);
      SipSession::makeLocalResumeSdp(v89, *(_BYTE *)(v65 + 814));
      if (!v50)
        goto LABEL_114;
      v66 = (unint64_t *)&v50->__shared_owners_;
      do
        v56 = __ldaxr(v66);
      while (__stlxr(v56 - 1, v66));
      goto LABEL_112;
    }
    if ((v40 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, "SendRecvInvite", v41))
        goto LABEL_114;
    }
    else if (a4[23])
    {
      v46 = "SendRecvInvite";
      v47 = a4;
      while (*v47 == *(unsigned __int8 *)v46)
      {
        ++v47;
        ++v46;
        if (!--v40)
          goto LABEL_94;
      }
LABEL_114:
      v67 = operator new();
      v68 = v67;
      v87 = v96;
      if (*((_QWORD *)&v96 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      *(_QWORD *)v67 = &off_1E78BB550;
      *(_OWORD *)(v67 + 24) = 0u;
      *(_QWORD *)(v67 + 40) = 0;
      *(_OWORD *)(v67 + 8) = 0u;
      std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v67 + 8), (uint64_t *)&v87);
      *(_BYTE *)(v68 + 48) = 1;
      v71 = *((_QWORD *)a3 + 9);
      if (v71 != v68)
      {
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
        *((_QWORD *)a3 + 9) = v68;
      }
      v72 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
      if (*((_QWORD *)&v87 + 1))
      {
        v73 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = a4[23];
      if ((v75 & 0x80u) == 0)
        v76 = a4[23];
      else
        v76 = *((_QWORD *)a4 + 1);
      v77 = qword_1ED70C858;
      if (byte_1ED70C867 >= 0)
        v77 = byte_1ED70C867;
      if (v76 != v77)
        goto LABEL_142;
      if (byte_1ED70C867 >= 0)
        v78 = &SipSession::kInviteTypeFakeNetworkBasedCallWaiting;
      else
        v78 = (uint64_t *)SipSession::kInviteTypeFakeNetworkBasedCallWaiting;
      if ((v75 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a4, v78, *((_QWORD *)a4 + 1)))
          goto LABEL_142;
      }
      else if (a4[23])
      {
        while (*a4 == *(unsigned __int8 *)v78)
        {
          ++a4;
          v78 = (uint64_t *)((char *)v78 + 1);
          if (!--v75)
            goto LABEL_141;
        }
LABEL_142:
        if (*((char *)a2 + 1295) < 0)
        {
          if (!*((_QWORD *)a2 + 160))
          {
LABEL_152:
            SipSession::addLocationToMessage(a2, a3);
            *(_OWORD *)(a1 + 24) = 0u;
            *(_OWORD *)(a1 + 40) = 0u;
            *(_OWORD *)(a1 + 56) = 0u;
            *(_QWORD *)a1 = &off_1E78B7238;
            *(_QWORD *)(a1 + 8) = &_bambiDomain;
            *(_DWORD *)(a1 + 16) = 0;
            goto LABEL_153;
          }
        }
        else if (!*((_BYTE *)a2 + 1295))
        {
          goto LABEL_152;
        }
        v80 = (SipRecipientListBody *)operator new();
        SipRecipientListBody::SipRecipientListBody(v80);
        v81 = *((_QWORD *)a2 + 30);
        if (v81)
        {
          v81 = *(_QWORD *)(v81 + 208);
          if (v81)
            v81 = *(_QWORD *)(v81 + 136);
        }
        if ((*(unsigned int (**)(SipRecipientListBody *, _QWORD *, uint64_t))(*(_QWORD *)v80 + 88))(v80, (_QWORD *)a2 + 159, v81 + 288))
        {
          SipMessage::addBody((uint64_t)a3, (uint64_t)v80);
        }
        else
        {
          (*(void (**)(SipRecipientListBody *))(*(_QWORD *)v80 + 8))(v80);
          v82 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)a2 + 56))(a2);
          (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v82 + 8), (uint64_t)"Unable to add Group Chat XML to INVITE body: ", 45);
          *(_BYTE *)(v82 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v82 + 32))(v82, (_QWORD *)a2 + 159);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v82 + 17) = 0;
        }
        goto LABEL_152;
      }
LABEL_141:
      v79 = (SipCallWaitingInfoBody *)operator new();
      SipCallWaitingInfoBody::SipCallWaitingInfoBody(v79, 1);
      SipMessage::addBody((uint64_t)a3, (uint64_t)v79);
      goto LABEL_142;
    }
LABEL_94:
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
    v88[0] = v39;
    v88[1] = *((_QWORD **)&v96 + 1);
    if (*((_QWORD *)&v96 + 1))
    {
      v57 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    SipSession::makeLocalResumeSdp(v88, 1);
    if (!v50)
      goto LABEL_114;
    v59 = (unint64_t *)&v50->__shared_owners_;
    do
      v56 = __ldaxr(v59);
    while (__stlxr(v56 - 1, v59));
    goto LABEL_112;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if ((v27 & 1) == 0)
    goto LABEL_56;
LABEL_153:
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
}

void sub_1BEF65820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v6 - 80);
  _Unwind_Resume(a1);
}

void SipSession::localTemplateSdp(SipSession *this@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = *((_QWORD *)this + 96);
    if (v7)
    {
      SDPSession::localTemplateSdp(*(SDPSession **)(v7 + 192), (*(_DWORD *)(v7 + 440) & 0xFFFFFFFE) == 2, a2);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1BEF659AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [6]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF65A40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipSession::addLocationToMessage(SipSession *this, SipMessage *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  SipGeoLocationBody *v9;
  uint64_t v10;
  uint64_t v11;
  SipUserAgent *v12;
  uint64_t v13;
  uint64_t v14;
  SipUserAgent *v15;
  uint64_t v16;
  ImsPrefs *v17;
  void *PIDFConfidenceKey;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  SipUserAgent *v23;
  uint64_t v24;
  SipUserAgent *v25;
  int v26;
  uint64_t v27;
  SipUserAgent *v28;
  int v29;
  uint64_t v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  SipUserAgent *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  SipUserAgentConfig *v40;
  _BOOL4 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __n128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  ImsPrefs *v51;
  const ImsPrefsKeyEnum *PIDFGeoPrivShapeKey;
  char v53;
  const char *p_p;
  int v55;
  void *v56;
  std::string *v57;
  int v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  __n128 v62;
  void *v63;
  void *v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  ImsPrefs *v72;
  void **v73;
  void *v74;
  int v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  ImsPrefs *v85;
  void **v86;
  void *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  SipUserAgent *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  SipUserAgentConfig *v97;
  _BOOL4 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  SipUserAgent *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  SipUserAgentConfig *v108;
  _BOOL4 v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  SipUserAgent *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  SipUserAgent *v120;
  SipStack *v121;
  ImsPrefs *v122;
  void **AddGeolocationSupportedHeaderKey;
  void *v124;
  int v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  SipStack *v132;
  std::__shared_weak_count *v133;
  char v134;
  void *v135[18];
  double v136[8];
  char v137;
  void *v138;
  char v139;
  void *v140;
  char v141;
  void *v142;
  char v143;
  __int128 __p;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  std::string v153;
  uint64_t v154;
  std::__shared_weak_count *v155;

  v154 = 0;
  v155 = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (!v3)
    goto LABEL_229;
  v155 = std::__shared_weak_count::lock(v3);
  if (!v155)
    goto LABEL_229;
  v5 = *((_QWORD *)this + 96);
  v154 = v5;
  if (!v5)
    goto LABEL_229;
  v6 = *(_QWORD *)(v5 + 512);
  if (v6 && *(_BYTE *)(v6 + 4672))
  {
    v7 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Skipping Geolocation for suspicious call SIP message ", 53);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(std::string *__return_ptr, SipMessage *))(*(_QWORD *)a2 + 48))(&v153, a2);
    LoggableString::LoggableString((std::string *)&__p, &v153);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 40))(v7, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (SBYTE7(v145) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    {
      v8 = (void *)v153.__r_.__value_.__r.__words[0];
LABEL_228:
      operator delete(v8);
      goto LABEL_229;
    }
    goto LABEL_229;
  }
  v9 = (SipGeoLocationBody *)operator new();
  v10 = *((_QWORD *)this + 30);
  if (v10 && (v11 = *(_QWORD *)(v10 + 208)) != 0)
    v12 = *(SipUserAgent **)(v11 + 136);
  else
    v12 = 0;
  SipUserAgent::publicDomain(v12, (uint64_t)&__p);
  v13 = *((_QWORD *)this + 30);
  if (v13 && (v14 = *(_QWORD *)(v13 + 208)) != 0)
    v15 = *(SipUserAgent **)(v14 + 136);
  else
    v15 = 0;
  v16 = SipUserAgent::config(v15);
  SipSessionInterface::stack((std::__shared_weak_count *)this, &v153);
  v17 = (ImsPrefs *)SipStack::prefs((SipStack *)v153.__r_.__value_.__l.__data_);
  PIDFConfidenceKey = ImsPrefs::getPIDFConfidenceKey(v17);
  v19 = ImsPrefs::prefWithKey(v17, (void **)PIDFConfidenceKey);
  if (v19)
    v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 56))(v19);
  else
    v20 = *((_DWORD *)PIDFConfidenceKey + 15);
  v21 = *((_QWORD *)this + 30);
  if (v21 && (v22 = *(_QWORD *)(v21 + 208)) != 0)
    v23 = *(SipUserAgent **)(v22 + 136);
  else
    v23 = 0;
  v24 = SipUserAgent::config(v23);
  v25 = (SipUserAgent *)*((_QWORD *)this + 30);
  if (v25)
  {
    v25 = (SipUserAgent *)*((_QWORD *)v25 + 26);
    if (v25)
      v25 = (SipUserAgent *)*((_QWORD *)v25 + 17);
  }
  v26 = *(unsigned __int8 *)(v24 + 919);
  v27 = SipUserAgent::config(v25);
  v28 = (SipUserAgent *)*((_QWORD *)this + 30);
  if (v28)
  {
    v28 = (SipUserAgent *)*((_QWORD *)v28 + 26);
    if (v28)
      v28 = (SipUserAgent *)*((_QWORD *)v28 + 17);
  }
  v29 = *(unsigned __int8 *)(v27 + 920);
  v30 = SipUserAgent::config(v28);
  SipGeoLocationBody::SipGeoLocationBody((uint64_t)v9, v10 + 664, (const std::string *)&__p, (const std::string *)(v16 + 928), v20, v26 != 0, v29 != 0, *(_BYTE *)(v30 + 921));
  size = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
  if (v153.__r_.__value_.__l.__size_)
  {
    v32 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (SBYTE7(v145) < 0)
    operator delete((void *)__p);
  SipSessionInterface::stack((std::__shared_weak_count *)this, &__p);
  if (!ims::AccessNetwork::isWifi((ims::AccessNetwork *)(__p + 3136)))
  {
    v37 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    goto LABEL_61;
  }
  v34 = *((_QWORD *)this + 30);
  if (v34 && (v35 = *(_QWORD *)(v34 + 208)) != 0)
    v36 = *(SipUserAgent **)(v35 + 136);
  else
    v36 = 0;
  v40 = (SipUserAgentConfig *)SipUserAgent::config(v36);
  v41 = SipUserAgentConfig::countryOfOriginationAllowedInBody(v40);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (!v41)
  {
LABEL_61:
    v50 = 0;
    goto LABEL_62;
  }
  SipSessionInterface::stack((std::__shared_weak_count *)this, &__p);
  v45.n128_f64[0] = SipGeoLocationBody::setCountry((uint64_t)v9, (const std::string *)(__p + 4088));
  v46 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v46->__on_zero_shared)(v46, v45);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  SipSessionInterface::stack((std::__shared_weak_count *)this, &__p);
  if (*(char *)(__p + 4111) < 0)
    v49 = *(_QWORD *)(__p + 4096);
  else
    v49 = *(unsigned __int8 *)(__p + 4111);
  v50 = v49 != 0;
  v69 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
LABEL_62:
  SipSessionInterface::stack((std::__shared_weak_count *)this, &v132);
  v51 = (ImsPrefs *)SipStack::prefs(v132);
  PIDFGeoPrivShapeKey = (const ImsPrefsKeyEnum *)ImsPrefs::getPIDFGeoPrivShapeKey(v51);
  ImsPrefs::stringValue(v51, PIDFGeoPrivShapeKey, (std::string *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v153, "ellipsoid");
  v53 = BYTE7(v145);
  if ((SBYTE7(v145) & 0x80u) == 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v55 = SHIBYTE(v153.__r_.__value_.__r.__words[2]);
  v56 = (void *)v153.__r_.__value_.__r.__words[0];
  if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v57 = &v153;
  else
    v57 = (std::string *)v153.__r_.__value_.__r.__words[0];
  v58 = strcasecmp(p_p, (const char *)v57);
  if (v55 < 0)
  {
    operator delete(v56);
    v53 = BYTE7(v145);
  }
  if (v53 < 0)
    operator delete((void *)__p);
  v59 = v133;
  if (v133)
  {
    p_shared_owners = (unint64_t *)&v133->__shared_owners_;
    do
      v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if ((SipSession::emergency((std::__shared_weak_count *)this) & 1) != 0)
    goto LABEL_78;
  if (a2)
  {
    if (*((_BYTE *)this + 1096))
    {
      if (v63)
      {
        v64 = v63;
        v65 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(_QWORD *)v63 + 112))(v63);
        v66 = v65[23];
        if ((v66 & 0x80u) == 0)
          v67 = v65[23];
        else
          v67 = *((_QWORD *)v65 + 1);
        if (v67 != 6)
          goto LABEL_128;
        if ((v66 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v65, "INVITE", *((_QWORD *)v65 + 1)))
            goto LABEL_128;
        }
        else if (v65[23])
        {
          v68 = "INVITE";
          while (*v65 == *(unsigned __int8 *)v68)
          {
            ++v65;
            ++v68;
            if (!--v66)
              goto LABEL_118;
          }
          goto LABEL_128;
        }
LABEL_118:
        SipSessionInterface::stack((std::__shared_weak_count *)this, &__p);
        v72 = (ImsPrefs *)SipStack::prefs((SipStack *)__p);
        v73 = (void **)ImsPrefs::getAlwaysAddGeolocationToInviteForNormalSetupEmergencyCallKey(v72);
        v74 = ImsPrefs::prefWithKey(v72, v73);
        if (v74)
          v75 = (*(uint64_t (**)(void *))(*(_QWORD *)v74 + 40))(v74);
        else
          v75 = *((_BYTE *)v73 + 57) != 0;
        v76 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v77 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        if (v75)
        {
          v79 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
          (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v79);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"Invite needs Geolocation for NormalSetupEmergencyCall", 53);
          *(_BYTE *)(v79 + 17) = 0;
          v80 = (_BYTE *)(v79 + 17);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_144;
        }
LABEL_128:
        v81 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(_QWORD *)v64 + 112))(v64);
        v82 = v81[23];
        if ((v82 & 0x80u) == 0)
          v83 = v81[23];
        else
          v83 = *((_QWORD *)v81 + 1);
        if (v83 != 6)
          goto LABEL_145;
        if ((v82 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v81, "UPDATE", *((_QWORD *)v81 + 1)))
            goto LABEL_145;
        }
        else if (v81[23])
        {
          v84 = "UPDATE";
          while (*v81 == *(unsigned __int8 *)v84)
          {
            ++v81;
            ++v84;
            if (!--v82)
              goto LABEL_139;
          }
          goto LABEL_145;
        }
LABEL_139:
        SipSessionInterface::stack((std::__shared_weak_count *)this, &__p);
        v85 = (ImsPrefs *)SipStack::prefs((SipStack *)__p);
        v86 = (void **)ImsPrefs::getAlwaysAddGeolocationToUpdateForNormalSetupEmergencyCallKey(v85);
        v87 = ImsPrefs::prefWithKey(v85, v86);
        if (v87)
          v88 = (*(uint64_t (**)(void *))(*(_QWORD *)v87 + 40))(v87);
        else
          v88 = *((unsigned __int8 *)v86 + 57);
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
        if (!v88)
          goto LABEL_145;
        v89 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v89);
        v90 = ImsOutStream::operator<<(v89, "Update needs Geolocation for NormalSetupEmergencyCall");
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v90 + 64))(v90, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v80 = (_BYTE *)(v90 + 17);
LABEL_144:
        *v80 = 0;
LABEL_78:
        v151 = 0u;
        v152 = 0u;
        v149 = 0u;
        v150 = 0u;
        v147 = 0u;
        v148 = 0u;
        v145 = 0u;
        v146 = 0u;
        __p = 0u;
        ims::LocationInfo::LocationInfo((ims::LocationInfo *)&__p, (const ims::LocationInfo *)(v154 + 520));
        if (*((double *)&v146 + 1) > 0.0)
        {
          if (v58)
          {
            v62.n128_f64[0] = SipGeoLocationBody::setCircle(v9, *(double *)&__p, *((double *)&__p + 1), *(double *)&v145, *((double *)&v146 + 1));
          }
          else
          {
            ims::LocationInfo::LocationInfo((ims::LocationInfo *)v136, (const ims::LocationInfo *)&__p);
            v62.n128_f64[0] = SipGeoLocationBody::setEllipsoid(v9, v136);
            if (v143 < 0)
              operator delete(v142);
            if (v141 < 0)
              operator delete(v140);
            if (v139 < 0)
              operator delete(v138);
            if (v137 < 0)
              operator delete(*(void **)&v136[6]);
          }
          LOBYTE(v50) = 1;
        }
        if (SHIBYTE(v152) < 0)
          operator delete(*((void **)&v151 + 1));
        if (SBYTE7(v151) < 0)
          operator delete((void *)v150);
        if (SHIBYTE(v149) < 0)
          operator delete(*((void **)&v148 + 1));
        if (SBYTE7(v148) < 0)
          operator delete((void *)v147);
        goto LABEL_175;
      }
    }
  }
LABEL_145:
  if (*((_BYTE *)this + 920))
  {
    SipSessionInterface::stack((std::__shared_weak_count *)this, &__p);
    if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)(__p + 3136)))
    {
      v91 = *((_QWORD *)this + 30);
      if (v91 && (v92 = *(_QWORD *)(v91 + 208)) != 0)
        v93 = *(SipUserAgent **)(v92 + 136);
      else
        v93 = 0;
      v97 = (SipUserAgentConfig *)SipUserAgent::config(v93);
      v98 = SipUserAgentConfig::latLongAllowedInShortCodeCall(v97);
      v99 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v100 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      if (v98)
      {
        if (v58)
        {
          SipGeoLocationBody::setCircle(v9, *((double *)this + 116), *((double *)this + 117), *((double *)this + 118), *((double *)this + 121));
        }
        else
        {
          ims::LocationInfo::LocationInfo((ims::LocationInfo *)v135, (SipSession *)((char *)this + 928));
          SipGeoLocationBody::setEllipsoid(v9, (double *)v135);
          ims::LocationInfo::~LocationInfo(v135);
        }
        v50 = 1;
      }
    }
    else
    {
      v94 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v95 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
    }
    SipSessionInterface::stack((std::__shared_weak_count *)this, &__p);
    if (!ims::AccessNetwork::isWifi((ims::AccessNetwork *)(__p + 3136)))
    {
      v105 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v106 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
LABEL_175:
      if (!v50)
        goto LABEL_193;
      goto LABEL_186;
    }
    v102 = *((_QWORD *)this + 30);
    if (v102 && (v103 = *(_QWORD *)(v102 + 208)) != 0)
      v104 = *(SipUserAgent **)(v103 + 136);
    else
      v104 = 0;
    v108 = (SipUserAgentConfig *)SipUserAgent::config(v104);
    v109 = SipUserAgentConfig::civicInfoAllowedInShortCodeCall(v108);
    v110 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v111 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    if (v109)
    {
      SipGeoLocationBody::setFullCivic((uint64_t)v9, (const std::string *)((char *)this + 976), (const std::string *)((char *)this + 1000), (const std::string *)((char *)this + 1024), (const std::string *)((char *)this + 1048));
      goto LABEL_186;
    }
  }
  if (!v50)
  {
LABEL_193:
    v117 = (*(uint64_t (**)(SipSession *, __n128))(*(_QWORD *)this + 64))(this, v62);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v117);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v117 + 8), (uint64_t)"No Location available to add to ", 32);
    *(_BYTE *)(v117 + 17) = 0;
    (*(void (**)(std::string *__return_ptr, SipMessage *))(*(_QWORD *)a2 + 48))(&v153, a2);
    LoggableString::LoggableString((std::string *)&__p, &v153);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v117 + 40))(v117, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v117 + 64))(v117, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v117 + 17) = 0;
    if (SBYTE7(v145) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
    (*(void (**)(SipGeoLocationBody *))(*(_QWORD *)v9 + 8))(v9);
    goto LABEL_229;
  }
LABEL_186:
  v113 = (*(uint64_t (**)(SipSession *, __n128))(*(_QWORD *)this + 64))(this, v62);
  (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v113 + 8), (uint64_t)"Adding location headers and body to ", 36);
  *(_BYTE *)(v113 + 17) = 0;
  (*(void (**)(std::string *__return_ptr, SipMessage *))(*(_QWORD *)a2 + 48))(&v153, a2);
  LoggableString::LoggableString((std::string *)&__p, &v153);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v113 + 40))(v113, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v113 + 64))(v113, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v113 + 17) = 0;
  if (SBYTE7(v145) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  SipMessage::addBody((uint64_t)a2, (uint64_t)v9);
  v114 = *((_QWORD *)this + 30);
  if (v114 && (v115 = *(_QWORD *)(v114 + 208)) != 0)
    v116 = *(SipUserAgent **)(v115 + 136);
  else
    v116 = 0;
  if (!*(_BYTE *)(SipUserAgent::config(v116) + 919))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Geolocation");
    SipUri::asString(*((_QWORD *)this + 30) + 664, 0, &v153);
    SipMessage::addHeader(a2, (uint64_t)&__p, (uint64_t)&v153, 0);
    if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_211;
    v121 = (SipStack *)v153.__r_.__value_.__r.__words[0];
    goto LABEL_210;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Geolocation");
  v118 = *((_QWORD *)this + 30);
  if (v118 && (v119 = *(_QWORD *)(v118 + 208)) != 0)
    v120 = *(SipUserAgent **)(v119 + 136);
  else
    v120 = 0;
  SipUserAgent::publicDomain(v120, (uint64_t)&v132);
  SipUri::getContentIdString(v118 + 664, (uint64_t)&v132, 1, &v153);
  SipMessage::addHeader(a2, (uint64_t)&__p, (uint64_t)&v153, 0);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if (v134 < 0)
  {
    v121 = v132;
LABEL_210:
    operator delete(v121);
  }
LABEL_211:
  if (SBYTE7(v145) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Geolocation-Routing");
  std::string::basic_string[abi:ne180100]<0>(&v153, "yes");
  SipMessage::addHeader(a2, (uint64_t)&__p, (uint64_t)&v153, 0);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if (SBYTE7(v145) < 0)
    operator delete((void *)__p);
  SipSessionInterface::stack((std::__shared_weak_count *)this, &__p);
  v122 = (ImsPrefs *)SipStack::prefs((SipStack *)__p);
  AddGeolocationSupportedHeaderKey = (void **)ImsPrefs::getAddGeolocationSupportedHeaderKey(v122);
  v124 = ImsPrefs::prefWithKey(v122, AddGeolocationSupportedHeaderKey);
  if (v124)
    v125 = (*(uint64_t (**)(void *))(*(_QWORD *)v124 + 40))(v124);
  else
    v125 = *((_BYTE *)AddGeolocationSupportedHeaderKey + 57) != 0;
  v126 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v127 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (v125)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "geolocation");
    SipMessage::addSupportedOption(a2, (void **)&__p);
    if (SBYTE7(v145) < 0)
    {
      v8 = (void *)__p;
      goto LABEL_228;
    }
  }
LABEL_229:
  v129 = v155;
  if (v155)
  {
    v130 = (unint64_t *)&v155->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *, SipMessage *))v129->__on_zero_shared)(v129, a2);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
}

void sub_1BEF668A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  ims::LocationInfo::~LocationInfo(&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v57 - 96);
  _Unwind_Resume(a1);
}

void *SipMessage::addHeader<SipReplacesHeader>(SipMessage *a1)
{
  void *v2;
  SipHeader *v3;
  SipHeader *v4;

  v2 = SipMessageEncodingMap::headerPrototype<SipReplacesHeader>(*((_QWORD **)a1 + 10));
  if (v2
    && (v3 = (SipHeader *)(*(uint64_t (**)(void *))(*(_QWORD *)v2 + 32))(v2)) != 0
    && (v4 = SipMessage::addHeader(a1, v3, 0)) != 0)
  {
  }
  else
  {
    return 0;
  }
}

void SipSession::sendInvite(uint64_t a1, std::__shared_weak_count *this, SipMessage *a3, const std::string *a4)
{
  std::__shared_weak_count *size;
  _BOOL4 v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  ImsResult *v15;
  _BOOL4 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  ImsResult *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  ImsResult *v30;
  std::__shared_weak_count_vtbl *v31;
  void (__cdecl *v32)(std::__shared_weak_count *__hidden);
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  SipOfferAnswer *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _BOOL4 v41;
  unint64_t *v42;
  unint64_t v43;
  ImsResult *v44;
  std::__shared_weak_count_vtbl *v45;
  void (__cdecl *v46)(std::__shared_weak_count *__hidden);
  SipUserAgent *v47;
  ImsPrefs *v48;
  void *SwitchoverSizeKey;
  void *v50;
  int v51;
  std::string::size_type v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _BOOL4 v56;
  unint64_t *v57;
  unint64_t v58;
  ImsResult *v59;
  uint64_t v60;
  SipHeader *v61;
  std::__shared_weak_count_vtbl *v62;
  void (__cdecl *v63)(std::__shared_weak_count *__hidden);
  SipUserAgent *v64;
  uint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  void (__cdecl *v67)(std::__shared_weak_count *__hidden);
  SipUserAgent *v68;
  ImsPrefs *v69;
  void **LazuliConferenceFactoryKey;
  std::__shared_weak_count_vtbl *v71;
  void (__cdecl *v72)(std::__shared_weak_count *__hidden);
  SipUserAgent *v73;
  SipHeader *v74;
  std::__shared_weak_count *shared_owners;
  std::__shared_weak_count *v76;
  BambiCall *v77;
  ImsPrefs *v78;
  void **WaitForRingingTimerWPSSecondsKey;
  void *v80;
  int v81;
  std::__shared_weak_count_vtbl *v82;
  void (__cdecl *v83)(std::__shared_weak_count *__hidden);
  SipUserAgent *v84;
  std::__shared_weak_count *shared_weak_owners;
  uint64_t v86;
  unint64_t *p_shared_weak_owners;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  void (__cdecl *v95)(std::__shared_weak_count *__hidden);
  SipUserAgent *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  void (__cdecl *v100)(std::__shared_weak_count *__hidden);
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  ImsPrefs *v104;
  void **AddPreconditionToSupportedHeaderIfEnabledKey;
  void *v106;
  int v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  std::string::size_type v111;
  uint64_t *v112;
  SipOfferAnswer *v113;
  std::string::size_type v114;
  unint64_t *v115;
  unint64_t v116;
  ImsResult *v117;
  std::__shared_weak_count *v118;
  BambiCall *v119;
  char *v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  int v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  _QWORD v138[5];
  uint64_t v139[2];
  _BYTE v140[72];
  SipStack *v141;
  uint64_t v142;
  std::string __p;
  std::string v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t *v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  void (**v166)(SipParameterMap *__hidden);
  _QWORD *v167;
  _QWORD v168[5];
  _QWORD v169[4];
  std::string v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  _BYTE v173[24];
  _BYTE *v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  SipSessionInterface::stack(this, &v144);
  if (v144.__r_.__value_.__r.__words[0])
  {
    SipSessionInterface::stack(this, &v170);
    size = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
    v9 = *(_BYTE *)(v170.__r_.__value_.__r.__words[0] + 2657) != 0;
    if (v170.__r_.__value_.__l.__size_)
    {
      v10 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v12 = (std::__shared_weak_count *)v144.__r_.__value_.__l.__size_;
  if (v144.__r_.__value_.__l.__size_)
  {
    v13 = (unint64_t *)(v144.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (((unsigned int (*)(std::__shared_weak_count *))this->__vftable[6].__get_deleter)(this))
  {
    v145 = 0u;
    v146 = 0u;
    v147 = 0u;
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    v144.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v144.__r_.__value_.__r.__words[2]) = 1073741826;
    v15 = (ImsResult *)ImsResult::operator<<<char [45]>((uint64_t)&v144, "can't send an INVITE in a terminated session");
    ImsLogContainer::logResult((ImsLogContainer *)this, v15);
    ImsResult::ImsResult((ImsResult *)a1, v15);
LABEL_41:
    ImsResult::~ImsResult((ImsResult *)&v144);
    return;
  }
  SipSession::clientInviteTransaction((SipSession *)this, (uint64_t *)&v144);
  if (v144.__r_.__value_.__r.__words[0])
  {
    v16 = 1;
  }
  else
  {
    SipSession::serverInviteTransaction((SipSession *)this, (uint64_t *)&v170);
    v21 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
    v16 = v170.__r_.__value_.__r.__words[0] != 0;
    if (v170.__r_.__value_.__l.__size_)
    {
      v22 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v17 = (std::__shared_weak_count *)v144.__r_.__value_.__l.__size_;
  if (!v144.__r_.__value_.__l.__size_)
    goto LABEL_21;
  v18 = (unint64_t *)(v144.__r_.__value_.__l.__size_ + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (v16)
      goto LABEL_22;
  }
  else
  {
LABEL_21:
    if (v16)
    {
LABEL_22:
      v145 = 0u;
      v146 = 0u;
      v147 = 0u;
      v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
      v144.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v144.__r_.__value_.__r.__words[2]) = 1073741838;
      v20 = (ImsResult *)ImsResult::operator<<<char [65]>((uint64_t)&v144, "can't send an INVITE while there is a current INVITE transaction");
      ImsLogContainer::logResult((ImsLogContainer *)this, v20);
      ImsResult::ImsResult((ImsResult *)a1, v20);
      goto LABEL_41;
    }
  }
  v24 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(_QWORD *)a3 + 112))(a3);
  v25 = v24[23];
  if ((v25 & 0x80u) == 0)
    v26 = v24[23];
  else
    v26 = *((_QWORD *)v24 + 1);
  if (v26 != 6)
    goto LABEL_40;
  if ((v25 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v24, "INVITE", *((_QWORD *)v24 + 1)))
      goto LABEL_43;
LABEL_40:
    v145 = 0u;
    v146 = 0u;
    v147 = 0u;
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    v144.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v144.__r_.__value_.__r.__words[2]) = 1073741825;
    v28 = ImsResult::operator<<<char [31]>((uint64_t)&v144, "sendInvite called with method ");
    v29 = (*(uint64_t (**)(SipMessage *))(*(_QWORD *)a3 + 112))(a3);
    v30 = (ImsResult *)ImsResult::operator<<<std::string>(v28, v29);
    ImsLogContainer::logResult((ImsLogContainer *)this, v30);
    ImsResult::ImsResult((ImsResult *)a1, v30);
    goto LABEL_41;
  }
  if (v24[23])
  {
    v27 = "INVITE";
    while (*v24 == *(unsigned __int8 *)v27)
    {
      ++v24;
      ++v27;
      if (!--v25)
        goto LABEL_43;
    }
    goto LABEL_40;
  }
LABEL_43:
  v31 = this[10].__vftable;
  if (v31[51].__on_zero_shared != (void (__cdecl *)(std::__shared_count *__hidden))1)
  {
    v171 = 0;
    v172 = 0;
    goto LABEL_59;
  }
  v32 = v31[51].~__shared_weak_count;
  v33 = *((_QWORD *)v32 + 7);
  v34 = (std::__shared_weak_count *)*((_QWORD *)v32 + 8);
  v171 = v33;
  v172 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
  }
  if (!v33)
  {
LABEL_59:
    if ((SipSession::confirmed((SipSession *)this) & 1) != 0)
      goto LABEL_152;
    v45 = this[10].__vftable;
    if (v45 && (v46 = v45[5].~__shared_weak_count_0) != 0)
      v47 = (SipUserAgent *)*((_QWORD *)v46 + 17);
    else
      v47 = 0;
    if (*(_BYTE *)(SipUserAgent::config(v47) + 546))
    {
      if (v9)
      {
        SipSessionInterface::stack(this, &v144);
        v48 = (ImsPrefs *)SipStack::prefs((SipStack *)v144.__r_.__value_.__l.__data_);
        SwitchoverSizeKey = ImsPrefs::getSwitchoverSizeKey(v48);
        v50 = ImsPrefs::prefWithKey(v48, (void **)SwitchoverSizeKey);
        if (v50)
          v51 = (*(uint64_t (**)(void *))(*(_QWORD *)v50 + 56))(v50);
        else
          v51 = *((_DWORD *)SwitchoverSizeKey + 15);
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v144);
        if (v51 <= 0)
          v60 = 0x20000;
        else
          v60 = 2048;
      }
      else
      {
        v60 = 1;
      }
      v61 = SipMessage::header<SipAcceptContactHeader>(a3, 1);
      v62 = this[10].__vftable;
      if (v62 && (v63 = v62[5].~__shared_weak_count_0) != 0)
        v64 = (SipUserAgent *)*((_QWORD *)v63 + 17);
      else
        v64 = 0;
      v65 = SipUserAgent::config(v64);
      SipAcceptContactHeader::addValueWithServiceMaskAndParams(v61, (BambiServices *)v60, (const SipParameterMap *)(v65 + 552));
    }
    v66 = this[10].__vftable;
    if (v66 && (v67 = v66[5].~__shared_weak_count_0) != 0)
      v68 = (SipUserAgent *)*((_QWORD *)v67 + 17);
    else
      v68 = 0;
    if (*(_BYTE *)(SipUserAgent::config(v68) + 548))
    {
      memset(&v170, 0, sizeof(v170));
      if (BambiServices::kFeatureTagMmtel[23] < 0)
        std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)BambiServices::kFeatureTagMmtel, *(std::string::size_type *)&BambiServices::kFeatureTagMmtel[8]);
      else
        v170 = *(std::string *)BambiServices::kFeatureTagMmtel;
      if (v9)
      {
        v169[2] = 257;
        v168[2] = 257;
        v165 = 0;
        v150 = 0u;
        v146 = 0uLL;
        *(_QWORD *)&v147 = 0;
        v145 = 0uLL;
        v144.__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E78D08F8;
        v144.__r_.__value_.__r.__words[2] = 0;
        v149 = 0;
        *(_QWORD *)&v150 = 0;
        *((_QWORD *)&v147 + 1) = &off_1E78B82D8;
        v148 = &v149;
        v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BFCE8;
        v161 = 0u;
        v162 = 0u;
        v163 = 0u;
        v151 = 0u;
        v152 = 0u;
        v153 = 0u;
        v154 = 0u;
        v155 = 0u;
        v156 = 0u;
        v157 = 0u;
        v158 = 0u;
        v159 = 0u;
        v160 = 0u;
        v164 = 0;
        v168[1] = 0;
        v168[0] = 0;
        v166 = &off_1E78B82D8;
        v167 = v168;
        v169[1] = 0;
        v169[0] = 0;
        v168[3] = &off_1E78B82D8;
        v168[4] = v169;
        WORD4(v150) = 257;
        SipSessionInterface::stack(this, &v141);
        v69 = (ImsPrefs *)SipStack::prefs(v141);
        LazuliConferenceFactoryKey = (void **)ImsPrefs::getLazuliConferenceFactoryKey(v69);
        ImsPrefs::stringValue(v69, LazuliConferenceFactoryKey);
        SipUri::fromString((uint64_t)&v144, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v141);
        if (SipUri::matches((SipUri *)&this[10].__vftable[5].__get_deleter, (const SipUri *)&v144))
          std::string::basic_string[abi:ne180100]<0>(&__p, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.session.group");
        else
          std::string::basic_string[abi:ne180100]<0>(&__p, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg");
        if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v170.__r_.__value_.__l.__data_);
        v170 = __p;
        SipUri::~SipUri((SipUri *)&v144);
      }
      SipMessage::addHeader(a3, (uint64_t)"P-Preferred-Service", (uint64_t)&v170, 0);
      if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v170.__r_.__value_.__l.__data_);
    }
    v71 = this[10].__vftable;
    if (v71 && (v72 = v71[5].~__shared_weak_count_0) != 0)
      v73 = (SipUserAgent *)*((_QWORD *)v72 + 17);
    else
      v73 = 0;
    if (*(_BYTE *)(SipUserAgent::config(v73) + 608))
    {
      v74 = SipMessage::header<SipPEarlyMediaHeader>(a3);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v74 + 8, (void **)"supported", (uint64_t)"supported");
    }
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = 0uLL;
    shared_owners = (std::__shared_weak_count *)this[32].__shared_owners_;
    if (shared_owners)
    {
      v76 = std::__shared_weak_count::lock(shared_owners);
      v144.__r_.__value_.__l.__size_ = (std::string::size_type)v76;
      if (v76)
      {
        v77 = (BambiCall *)this[32].__vftable;
        v144.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
        if (v77)
        {
          if (BambiCall::isWPSCall(v77))
          {
            SipSessionInterface::stack(this, &v170);
            v78 = (ImsPrefs *)SipStack::prefs((SipStack *)v170.__r_.__value_.__l.__data_);
            WaitForRingingTimerWPSSecondsKey = (void **)ImsPrefs::getWaitForRingingTimerWPSSecondsKey(v78);
            v80 = ImsPrefs::prefWithKey(v78, WaitForRingingTimerWPSSecondsKey);
            v81 = v80
                ? (*(uint64_t (**)(void *))(*(_QWORD *)v80 + 56))(v80)
                : *((_DWORD *)WaitForRingingTimerWPSSecondsKey + 15);
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v170);
            if (v81)
              goto LABEL_126;
          }
        }
      }
    }
    else
    {
      v76 = 0;
    }
    v82 = this[10].__vftable;
    if (v82 && (v83 = v82[5].~__shared_weak_count_0) != 0)
      v84 = (SipUserAgent *)*((_QWORD *)v83 + 17);
    else
      v84 = 0;
    v81 = *(_DWORD *)(SipUserAgent::config(v84) + 8);
LABEL_126:
    v86 = this[7].__shared_owners_;
    shared_weak_owners = (std::__shared_weak_count *)this[7].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      p_shared_weak_owners = (unint64_t *)&shared_weak_owners->__shared_weak_owners_;
      do
        v88 = __ldxr(p_shared_weak_owners);
      while (__stxr(v88 + 1, p_shared_weak_owners));
      do
        v89 = __ldxr(p_shared_weak_owners);
      while (__stxr(v89 + 1, p_shared_weak_owners));
      if (!v81)
        goto LABEL_139;
      do
        v90 = __ldxr(p_shared_weak_owners);
      while (__stxr(v90 + 1, p_shared_weak_owners));
    }
    else if (!v81)
    {
      goto LABEL_139;
    }
    v174 = 0;
    v91 = operator new(0x20uLL);
    *v91 = &off_1E78CAF90;
    v91[1] = this;
    v91[2] = v86;
    v91[3] = shared_weak_owners;
    v174 = v91;
    SipTimerContainer::startTimer(&this[11].__vftable, (uint64_t)"WaitForRingingTimer", (uint64_t)v173, 1000 * v81, 0);
    v92 = v174;
    if (v174 == v173)
    {
      v93 = 4;
      v92 = v173;
    }
    else
    {
      if (!v174)
        goto LABEL_139;
      v93 = 5;
    }
    (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_139:
    v94 = this[10].__vftable;
    if (v94 && (v95 = v94[5].~__shared_weak_count_0) != 0)
      v96 = (SipUserAgent *)*((_QWORD *)v95 + 17);
    else
      v96 = 0;
    if (!*(_BYTE *)(SipUserAgent::config(v96) + 35))
      SipSession::startLocalQosTimerMO((SipSession *)this);
    if (shared_weak_owners)
    {
      std::__shared_weak_count::__release_weak(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    if (v76)
    {
      v97 = (unint64_t *)&v76->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
LABEL_152:
    if (SipSession::confirmed((SipSession *)this) && !BYTE1(this[35].__shared_weak_owners_))
    {
      v110 = v171;
LABEL_180:
      *(_OWORD *)&v170.__r_.__value_.__l.__data_ = 0uLL;
      if (v110)
      {
        if (*(char *)(v110 + 175) < 0)
          std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)(v110 + 152), *(_QWORD *)(v110 + 160));
        else
          v144 = *(std::string *)(v110 + 152);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v144, (char *)&str_23_1);
      }
      SipSession::sendRequest(a3, (uint64_t)this, (uint64_t)&v144, &v170);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      v111 = v170.__r_.__value_.__r.__words[0];
      if (v170.__r_.__value_.__r.__words[0])
      {
        v144.__r_.__value_.__r.__words[0] = (std::string::size_type)"InviteType";
        v112 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v170.__r_.__value_.__r.__words[0] + 376), (void **)"InviteType", (uint64_t)&std::piecewise_construct, (__int128 **)&v144);
        std::string::operator=((std::string *)(v112 + 7), a4);
        if (v110)
        {
          v113 = *(SipOfferAnswer **)(v110 + 656);
          v114 = *(_QWORD *)(v110 + 664);
          v144.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
          v144.__r_.__value_.__l.__size_ = v114;
          if (v114)
          {
            v115 = (unint64_t *)(v114 + 8);
            do
              v116 = __ldxr(v115);
            while (__stxr(v116 + 1, v115));
          }
          SipOfferAnswer::updateWithOutgoingMessage(v113, (uint64_t)a3, (std::string *)(v111 + 320), (uint64_t)v140);
          ImsResult::~ImsResult((ImsResult *)v140);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v144);
        }
        else if ((SipSession::confirmed((SipSession *)this) & 1) == 0)
        {
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
          v118 = (std::__shared_weak_count *)this[32].__shared_owners_;
          if (v118)
          {
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v118);
            if (__p.__r_.__value_.__l.__size_)
            {
              v119 = (BambiCall *)this[32].__vftable;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
            }
            else
            {
              v119 = (BambiCall *)__p.__r_.__value_.__r.__words[0];
            }
            if (v119 && BambiCall::shouldFakeLocalQOS(v119))
            {
              LoggableString::LoggableString((LoggableString *)&v144, "fakeLocalQoSForMobileOriginated");
              std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v141, &this[7].__shared_owners_);
              v120 = (char *)v141 + 104;
              if (!v141)
                v120 = 0;
              v139[0] = (uint64_t)v120;
              v139[1] = v142;
              v141 = 0;
              v142 = 0;
              v138[0] = MEMORY[0x1E0C809B0];
              v138[1] = 0x40000000;
              v138[2] = ___ZN10SipSession10sendInviteEP10SipRequestRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
              v138[3] = &__block_descriptor_tmp_15;
              v138[4] = this;
              SipLockable::performBlock((uint64_t)&this[4].__shared_owners_, (__int128 *)&v144, v139, v138);
              std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v139);
              std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v141);
              if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v144.__r_.__value_.__l.__data_);
            }
          }
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
        }
        v121 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].__get_deleter)(this);
        ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v121);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v121 + 8), (uint64_t)"sendInvite[", 11);
        *(_BYTE *)(v121 + 17) = 0;
        (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v121 + 32))(v121, a4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v121 + 8), (uint64_t)"], Fork: ", 9);
        *(_BYTE *)(v121 + 17) = 0;
        if (v110)
          v122 = "yes";
        else
          v122 = "no";
        if (v110)
          v123 = 3;
        else
          v123 = 2;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v121 + 8), (uint64_t)v122, v123);
        *(_BYTE *)(v121 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v121 + 8), (uint64_t)" Confirmed: ", 12);
        *(_BYTE *)(v121 + 17) = 0;
        v124 = SipSession::confirmed((SipSession *)this);
        if (v124)
          v125 = "yes";
        else
          v125 = "no";
        if (v124)
          v126 = 3;
        else
          v126 = 2;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v121 + 8), (uint64_t)v125, v126);
        *(_BYTE *)(v121 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v121 + 64))(v121, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v121 + 17) = 0;
        v127 = this[29].__shared_weak_owners_;
        v128 = (std::__shared_weak_count *)this[30].__vftable;
        if (v128)
        {
          v129 = (unint64_t *)&v128->__shared_owners_;
          do
            v130 = __ldxr(v129);
          while (__stxr(v130 + 1, v129));
          do
            v131 = __ldaxr(v129);
          while (__stlxr(v131 - 1, v129));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
        if (!v127)
          SipTypedStateMachine<SipSessionState>::transitionToState(&this[27].__shared_owners_, 1);
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        *(_QWORD *)a1 = &off_1E78B7238;
        *(_QWORD *)(a1 + 8) = &_bambiDomain;
        *(_DWORD *)(a1 + 16) = 0;
      }
      else
      {
        v145 = 0u;
        v146 = 0u;
        v147 = 0u;
        v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
        v144.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
        LODWORD(v144.__r_.__value_.__r.__words[2]) = 0x40000000;
        v117 = (ImsResult *)ImsResult::operator<<<char [31]>((uint64_t)&v144, "sendInvite: sendRequest failed");
        ImsLogContainer::logResult((ImsLogContainer *)this, v117);
        ImsResult::ImsResult((ImsResult *)a1, v117);
        ImsResult::~ImsResult((ImsResult *)&v144);
      }
      v132 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
      if (v170.__r_.__value_.__l.__size_)
      {
        v133 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      goto LABEL_232;
    }
    v99 = this[10].__vftable;
    if (v99 && (v100 = v99[5].~__shared_weak_count_0) != 0)
      v101 = *((_QWORD *)v100 + 17);
    else
      v101 = 0;
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = 0uLL;
    v102 = *(std::__shared_weak_count **)(v101 + 16);
    if (v102)
    {
      v102 = std::__shared_weak_count::lock(v102);
      v103 = v102;
      v144.__r_.__value_.__l.__size_ = (std::string::size_type)v102;
      if (v102)
      {
        v102 = *(std::__shared_weak_count **)(v101 + 8);
        v144.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
      }
    }
    else
    {
      v103 = 0;
    }
    v104 = (ImsPrefs *)SipStack::prefs((SipStack *)v102);
    AddPreconditionToSupportedHeaderIfEnabledKey = (void **)ImsPrefs::getAddPreconditionToSupportedHeaderIfEnabledKey(v104);
    v106 = ImsPrefs::prefWithKey(v104, AddPreconditionToSupportedHeaderIfEnabledKey);
    if (v106)
    {
      if (!(*(unsigned int (**)(void *))(*(_QWORD *)v106 + 40))(v106))
      {
LABEL_164:
        v107 = 0;
        goto LABEL_167;
      }
    }
    else if (!*((_BYTE *)AddPreconditionToSupportedHeaderIfEnabledKey + 57))
    {
      goto LABEL_164;
    }
    v107 = SipSession::confirmed((SipSession *)this);
LABEL_167:
    if (v103)
    {
      v108 = (unint64_t *)&v103->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    v110 = v171;
    if (v171)
    {
      if (*(char *)(v171 + 175) < 0)
        std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)(v171 + 152), *(_QWORD *)(v171 + 160));
      else
        v144 = *(std::string *)(v171 + 152);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v144, (char *)&str_23_1);
    }
    SipPreconditions::addPreconditionsToOutgoingRequest((uint64_t)&this[58].__shared_owners_, (uint64_t)&v144, (uint64_t)a3, v107);
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
    goto LABEL_180;
  }
  v37 = *(SipOfferAnswer **)(v33 + 656);
  v38 = *(std::__shared_weak_count **)(v33 + 664);
  v144.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
  v144.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = SipOfferAnswer::remoteAnswerPending(v37);
  if (v38)
  {
    v42 = (unint64_t *)&v38->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (!v41)
  {
    v52 = *(_QWORD *)(v171 + 656);
    v53 = *(std::__shared_weak_count **)(v171 + 664);
    v144.__r_.__value_.__r.__words[0] = v52;
    v144.__r_.__value_.__l.__size_ = (std::string::size_type)v53;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v56 = SipOfferAnswer::localAnswerPending(*(SipOfferAnswer **)(*(_QWORD *)(v52 + 152) + 16), *(std::__shared_weak_count **)(*(_QWORD *)(v52 + 152) + 24));
    if (v53)
    {
      v57 = (unint64_t *)&v53->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (v56)
    {
      v145 = 0u;
      v146 = 0u;
      v147 = 0u;
      v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
      v144.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v144.__r_.__value_.__r.__words[2]) = 1073741838;
      v59 = (ImsResult *)ImsResult::operator<<<char [51]>((uint64_t)&v144, "Can't send INVITE with offer: local answer pending");
      ImsLogContainer::logResult((ImsLogContainer *)this, v59);
      ImsResult::ImsResult((ImsResult *)a1, v59);
      goto LABEL_78;
    }
    goto LABEL_59;
  }
  v145 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
  v144.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  LODWORD(v144.__r_.__value_.__r.__words[2]) = 1073741838;
  v44 = (ImsResult *)ImsResult::operator<<<char [52]>((uint64_t)&v144, "Can't send INVITE with offer: remote answer pending");
  ImsLogContainer::logResult((ImsLogContainer *)this, v44);
  ImsResult::ImsResult((ImsResult *)a1, v44);
LABEL_78:
  ImsResult::~ImsResult((ImsResult *)&v144);
LABEL_232:
  v135 = v172;
  if (v172)
  {
    v136 = (unint64_t *)&v172->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
}

void sub_1BEF67B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (a39 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 160);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 136);
  _Unwind_Resume(a1);
}

void SipSession::sendLazuliInvite(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, ImsResult *a3@<X8>)
{
  unsigned __int8 *v5;
  uint64_t v6;
  SipRequest *RequestInDialog;
  SipMessage *v8;
  SipHeader *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unsigned __int8 *v13;
  ImsResult *v14;
  ImsResult *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  SipUserAgent *v19;
  uint64_t v20;
  SipUserAgent *v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  __int128 v47;
  _BYTE v48[56];
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 1136))
  {
    memset(&v48[8], 0, 48);
    *(_QWORD *)&v47 = &off_1E78B7238;
    *((_QWORD *)&v47 + 1) = &_bambiDomain;
    *(_DWORD *)v48 = 1073741826;
    v14 = (ImsResult *)ImsResult::operator<<<char [46]>((uint64_t)&v47, "can't send an INVITE without a lazuli session");
    ImsLogContainer::logResult((ImsLogContainer *)a1, v14);
    ImsResult::ImsResult(a3, v14);
    goto LABEL_85;
  }
  v5 = a2;
  v6 = a2[23];
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (!v6)
  {
    memset(&v48[8], 0, 48);
    *(_QWORD *)&v47 = &off_1E78B7238;
    *((_QWORD *)&v47 + 1) = &_bambiDomain;
    *(_DWORD *)v48 = 1073741825;
    v15 = (ImsResult *)ImsResult::operator<<<char [29]>((uint64_t)&v47, "sendInvite: empty inviteType");
    ImsLogContainer::logResult((ImsLogContainer *)a1, v15);
    ImsResult::ImsResult(a3, v15);
    goto LABEL_85;
  }
  RequestInDialog = SipDialog::createRequestInDialog(*(_QWORD *)(a1 + 240), (const std::string *)"INVITE", 0);
  v8 = RequestInDialog;
  if ((*(char *)(a1 + 1175) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 1175))
      goto LABEL_8;
    goto LABEL_7;
  }
  if (*(_QWORD *)(a1 + 1160))
  {
LABEL_7:
    v9 = SipMessage::header<SipSubjectHeader>(RequestInDialog, 1);
    std::string::operator=((std::string *)((char *)v9 + 64), (const std::string *)(a1 + 1152));
  }
LABEL_8:
  v10 = v5[23];
  if ((v10 & 0x80u) == 0)
    v11 = v5[23];
  else
    v11 = *((_QWORD *)v5 + 1);
  if (v11 == 11)
  {
    if ((v10 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v5, "EmptyInvite", *((_QWORD *)v5 + 1)))
        goto LABEL_28;
    }
    else
    {
      if (!v5[23])
        goto LABEL_28;
      v12 = "EmptyInvite";
      v13 = v5;
      while (*v13 == *(unsigned __int8 *)v12)
      {
        ++v13;
        ++v12;
        if (!--v10)
          goto LABEL_28;
      }
    }
  }
  v47 = 0u;
  memset(v48, 0, sizeof(v48));
  SipSession::addBodyToInvite((uint64_t)&v47, (SipSession *)a1, v8, v5);
  if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v47 + 1) + 24))(*((_QWORD *)&v47 + 1), *(unsigned int *)v48))
  {
    ImsResult::~ImsResult((ImsResult *)&v47);
LABEL_28:
    v47 = 0u;
    memset(v48, 0, sizeof(v48));
    SipSession::sendInvite((int)&v47, (SipSessionInterface *)a1);
    *(std::chrono::steady_clock::time_point *)(a1 + 1328) = std::chrono::steady_clock::now();
    if (v8)
      (*(void (**)(SipMessage *))(*(_QWORD *)v8 + 8))(v8);
    SipSessionInterface::stack((std::__shared_weak_count *)a1, &v45);
    v16 = BambiClient::callCount(*(BambiClient **)(v45 + 136));
    v17 = *(_QWORD *)(a1 + 240);
    if (v16 < 2)
    {
      if (v17 && (v20 = *(_QWORD *)(v17 + 208)) != 0)
        v21 = *(SipUserAgent **)(v20 + 136);
      else
        v21 = 0;
      v22 = (unsigned int *)(SipUserAgent::config(v21) + 24);
    }
    else
    {
      if (v17 && (v18 = *(_QWORD *)(v17 + 208)) != 0)
        v19 = *(SipUserAgent **)(v18 + 136);
      else
        v19 = 0;
      v22 = (unsigned int *)(SipUserAgent::config(v19) + 28);
    }
    v23 = *v22;
    v24 = v46;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v28 = *(_QWORD *)(a1 + 176);
    v27 = *(std::__shared_weak_count **)(a1 + 184);
    if (v27)
    {
      p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
      do
        v31 = __ldxr(p_shared_weak_owners);
      while (__stxr(v31 + 1, p_shared_weak_owners));
    }
    if (!v23)
      goto LABEL_83;
    v32 = v5[23];
    v33 = *((_QWORD *)v5 + 1);
    if ((v32 & 0x80u) == 0)
      v34 = v5[23];
    else
      v34 = *((_QWORD *)v5 + 1);
    if (v34 == 12)
    {
      if ((v32 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v5, "ResumeInvite", v33))
          goto LABEL_83;
      }
      else if (v5[23])
      {
        v36 = "ResumeInvite";
        while (*v5 == *(unsigned __int8 *)v36)
        {
          ++v5;
          ++v36;
          if (!--v32)
            goto LABEL_75;
        }
        goto LABEL_83;
      }
LABEL_75:
      if (v27)
      {
        v42 = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v50 = 0;
      v44 = operator new(0x20uLL);
      *v44 = &off_1E78CAE90;
      v44[1] = a1;
      v44[2] = v28;
      v44[3] = v27;
      v50 = v44;
      SipTimerContainer::startTimer((_QWORD *)(a1 + 264), (uint64_t)"ResumeTimer", (uint64_t)v49, v23, 0);
      v40 = v50;
      if (v50 == v49)
      {
        v41 = 4;
        v40 = v49;
        goto LABEL_82;
      }
    }
    else
    {
      if (v34 != 10)
        goto LABEL_83;
      if ((v32 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v5, "HoldInvite", v33))
          goto LABEL_83;
      }
      else if (v5[23])
      {
        v35 = "HoldInvite";
        while (*v5 == *(unsigned __int8 *)v35)
        {
          ++v5;
          ++v35;
          if (!--v32)
            goto LABEL_69;
        }
        goto LABEL_83;
      }
LABEL_69:
      if (v27)
      {
        v37 = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v52 = 0;
      v39 = operator new(0x20uLL);
      *v39 = &off_1E78CAE90;
      v39[1] = a1;
      v39[2] = v28;
      v39[3] = v27;
      v52 = v39;
      SipTimerContainer::startTimer((_QWORD *)(a1 + 264), (uint64_t)"HoldTimer", (uint64_t)v51, v23, 0);
      v40 = v52;
      if (v52 == v51)
      {
        v41 = 4;
        v40 = v51;
        goto LABEL_82;
      }
    }
    if (!v40)
      goto LABEL_83;
    v41 = 5;
LABEL_82:
    (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
LABEL_83:
    ImsLogContainer::logResult((ImsLogContainer *)a1, (ImsResult *)&v47);
    ImsResult::ImsResult(a3, (const ImsResult *)&v47);
    if (v27)
    {
      std::__shared_weak_count::__release_weak(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    goto LABEL_85;
  }
  if (v8)
    (*(void (**)(SipMessage *))(*(_QWORD *)v8 + 8))(v8);
  ImsLogContainer::logResult((ImsLogContainer *)a1, (ImsResult *)&v47);
  ImsResult::ImsResult(a3, (const ImsResult *)&v47);
LABEL_85:
  ImsResult::~ImsResult((ImsResult *)&v47);
}

void sub_1BEF68298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  std::__shared_weak_count *v24;
  char *v26;
  uint64_t v27;

  v26 = a23;
  if (a23 == v23)
  {
    v27 = 4;
    v26 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  if (v24)
  {
    std::__shared_weak_count::__release_weak(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  ImsResult::~ImsResult((ImsResult *)&a11);
  _Unwind_Resume(a1);
}

void SipSession::startLocalQosTimerMO(SipSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  SipUserAgent *v13;
  int v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 30);
  if (*(_QWORD *)(v2 + 2056) != 1)
  {
    v26 = 0;
LABEL_9:
    v8 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"No fork for MO call to set QoS!", 31);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 2040);
  v4 = *(_QWORD *)(v3 + 56);
  v5 = *(std::__shared_weak_count **)(v3 + 64);
  v25 = v4;
  v26 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v4)
    goto LABEL_9;
  if ((*(unsigned int (**)(SipSession *, uint64_t))(*(_QWORD *)this + 304))(this, v4 + 152))
  {
    v8 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"local QoS is already established. Don't need to start QoS timer.", 64);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_10:
    *(_BYTE *)(v8 + 17) = 0;
    goto LABEL_11;
  }
  {
    v8 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"local QoS is already active", 27);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_10;
  }
  v11 = *((_QWORD *)this + 30);
  if (v11 && (v12 = *(_QWORD *)(v11 + 208)) != 0)
    v13 = *(SipUserAgent **)(v12 + 136);
  else
    v13 = 0;
  v14 = *(_DWORD *)(SipUserAgent::config(v13) + 16);
  v16 = *((_QWORD *)this + 22);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v15)
  {
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
  }
  if (v14 && SipPreconditions::preconditionsEnabled((uint64_t)this + 1400, (void **)(v25 + 152)))
  {
    if (v15)
    {
      v20 = (unint64_t *)&v15->__shared_weak_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = operator new(0x20uLL);
    *v22 = &off_1E78CAF10;
    v22[1] = this;
    v22[2] = v16;
    v22[3] = v15;
    v28 = v22;
    v23 = v28;
    if (v28 == v27)
    {
      v24 = 4;
      v23 = v27;
    }
    else
    {
      if (!v28)
        goto LABEL_37;
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
LABEL_37:
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_11:
  if (v26)
  {
    v9 = (unint64_t *)&v26->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1BEF6866C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::__shared_weak_count *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [45]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF68768(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [65]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF6880C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

BOOL SipOfferAnswer::remoteAnswerPending(SipOfferAnswer *this)
{
  uint64_t v1;
  SipOfferAnswerExchange *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BOOL8 v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = *((_QWORD *)this + 19);
  v2 = *(SipOfferAnswerExchange **)(v1 + 16);
  v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = SipOfferAnswerExchange::remoteAnswerPending(v2);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6;
}

void sub_1BEF688B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [52]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF68948(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

BOOL SipOfferAnswer::localAnswerPending(SipOfferAnswer *this, std::__shared_weak_count *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  _BOOL8 v5;
  unint64_t *v6;
  unint64_t v7;

  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = SipOfferAnswerExchange::localAnswerPending(this);
  if (a2)
  {
    v6 = (unint64_t *)&a2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
      std::__shared_weak_count::__release_weak(a2);
    }
  }
  return v5;
}

void sub_1BEF689EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

SipHeader *SipMessage::header<SipPEarlyMediaHeader>(SipMessage *a1)
{
  SipHeader *result;

  result = SipMessage::headerWithName(a1, "P-Early-Media", 1);
  if (result)
  return result;
}

void ___ZN10SipSession10sendInviteEP10SipRequestRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _WORD *v3;
  void *__p;
  void *v5;
  _WORD *v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 64))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Faking local QoS notification for MO Call", 41);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = operator new(2uLL);
  __p = v3;
  *v3 = 0;
  v5 = v3 + 1;
  v6 = v3 + 1;
  SipSession::handleQualityOfServiceEstablished(v1, 0xFFFFFFFF, 1, (uint64_t)&__p, 1);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_1BEF68AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipSession::handleQualityOfServiceEstablished(uint64_t a1, unsigned int a2, int a3, uint64_t a4, char a5)
{
  uint64_t v10;
  int v11;
  BOOL v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v16[5];

  *(_BYTE *)(a1 + 1536) = a3;
  v10 = *(_QWORD *)(a1 + 1472);
  v11 = *(_DWORD *)(a1 + 1488);
  if (v10)
    v12 = v11 == 5;
  else
    v12 = 0;
  if (!v12)
  {
    if (v10)
      v13 = 0;
    else
      v13 = v11 == 5;
    if (!v13)
      goto LABEL_13;
LABEL_10:
    if (a3)
      SipSession::handleLocalQoSEstablished((SipSession *)a1);
    else
      SipSession::handleRemoteQoSEstablished(a1, a2, 0, a4, a5);
    v14 = *(_QWORD **)(a1 + 240);
    v15 = &__block_literal_global_2;
    goto LABEL_17;
  }
  if ((SipPreconditions::preconditionsActiveInAnyFork((SipPreconditions *)(a1 + 1400)) & 1) != 0)
    goto LABEL_10;
LABEL_13:
  SipSession::updateBearerForPorts((uint64_t *)a1, a2, a3, (unsigned __int16 **)a4, a5);
  if (!SipSession::requireQosBeforeRinging((SipSession *)a1))
    goto LABEL_18;
  v14 = *(_QWORD **)(a1 + 240);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZN10SipSession33handleQualityOfServiceEstablishedEjbRKNSt3__16vectorItNS0_9allocatorItEEEEb_block_invoke_2;
  v16[3] = &__block_descriptor_tmp_372;
  v16[4] = a1;
  v15 = v16;
LABEL_17:
  SipDialog::performBlockOnForks(v14, (uint64_t)v15);
LABEL_18:
  if (a3)
  {
    *(_DWORD *)(a1 + 1496) = a2;
    if (a1 + 1504 != a4)
      std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>((char *)(a1 + 1504), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 1);
    *(_BYTE *)(a1 + 1528) = 1;
    *(_DWORD *)(a1 + 1500) = 2;
  }
}

uint64_t SipTypedStateMachine<SipSessionState>::currentState@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 64);
  *a2 = *(_QWORD *)(result + 56);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void SipSession::sendRingingNotification(std::__shared_weak_count **this@<X0>, uint64_t a2@<X8>)
{
  ImsResult *v4;
  ImsResult *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t shared_weak_owners;
  SipUserAgent *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  SipUserAgent *v22;
  _DWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  _QWORD *v30;
  SipHeader *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  _OWORD v45[5];
  __int128 v46;
  void *__p[2];
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (SipSession::confirmed((SipSession *)this))
  {
    memset((char *)&v45[1] + 8, 0, 48);
    *(_QWORD *)&v45[0] = &off_1E78B7238;
    *((_QWORD *)&v45[0] + 1) = &_bambiDomain;
    LODWORD(v45[1]) = 1073741826;
    v4 = (ImsResult *)ImsResult::operator<<<char [53]>((uint64_t)v45, "sendRingingNotification called on a confirmed dialog");
    ImsLogContainer::logResult((ImsLogContainer *)this, v4);
    ImsResult::ImsResult((ImsResult *)a2, v4);
LABEL_5:
    ImsResult::~ImsResult((ImsResult *)v45);
    return;
  }
  if (LOBYTE(this[30][80].__vftable))
  {
    memset((char *)&v45[1] + 8, 0, 48);
    *(_QWORD *)&v45[0] = &off_1E78B7238;
    *((_QWORD *)&v45[0] + 1) = &_bambiDomain;
    LODWORD(v45[1]) = 1073741825;
    v5 = (ImsResult *)ImsResult::operator<<<char [46]>((uint64_t)v45, "sendRingingNotification called on a MO dialog");
    ImsLogContainer::logResult((ImsLogContainer *)this, v5);
    ImsResult::ImsResult((ImsResult *)a2, v5);
    goto LABEL_5;
  }
  if (!*((_BYTE *)this + 1360))
  {
    memset((char *)&v45[1] + 8, 0, 48);
    *(_QWORD *)&v45[0] = &off_1E78B7238;
    *((_QWORD *)&v45[0] + 1) = &_bambiDomain;
    LODWORD(v45[1]) = 1073741826;
    v14 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v14, algn_1ED704220[24]);
    *((_QWORD *)&v45[1] + 1) = v14;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"can't send a ringing notification when we haven't alerted the user", 66);
    *(_BYTE *)(v14 + 17) = 0;
    ImsLogContainer::logResult((ImsLogContainer *)this, (ImsResult *)v45);
    ImsResult::ImsResult((ImsResult *)a2, (const ImsResult *)v45);
    goto LABEL_5;
  }
  v43 = 0;
  v44 = 0;
  SipSession::serverInviteTransaction((SipSession *)this, &v43);
  if (v43)
  {
    if (LOBYTE(this[30][80].__vftable))
    {
LABEL_36:
      v48 = 0;
      v46 = 0u;
      *(_OWORD *)__p = 0u;
      memset(v45, 0, sizeof(v45));
      SipResponse::SipResponse((SipResponse *)v45, 180, *(const SipRequest **)(v43 + 288));
      SipSessionInterface::stack((std::__shared_weak_count *)this, &v41);
      v26 = BambiClient::callCount(*(BambiClient **)(v41 + 136));
      v27 = v42;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v26 >= 2)
      {
        v30 = (_QWORD *)SipMessageEncodingMap::headerPrototypeWithName((_QWORD *)v46, (uint64_t)"Alert-Info");
        if (v30)
        {
          if (v30)
          {
            v31 = (SipHeader *)(*(uint64_t (**)(_QWORD *))(*v30 + 32))(v30);
            if (v31)
            {
              v30 = SipMessage::addHeader((SipMessage *)v45, v31, 0);
              if (v30)
            }
            else
            {
              v30 = 0;
            }
          }
        }
        SipAlertInfoHeader::addAlertInfo(v30, &kCallWaitingUrn);
      }
      *(_QWORD *)(a2 + 64) = 0;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      v32 = v44;
      v40[0] = v43;
      v40[1] = v44;
      if (v44)
      {
        v33 = (unint64_t *)&v44->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      SipSession::sendResponseToInviteOrUpdateRequest((ImsResult *)a2, (uint64_t)this, (SipResponse *)v45, v40);
      if (v32)
      {
        v35 = (unint64_t *)&v32->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16)) & 1) == 0)SipSession::startPingTimer((SipSession *)this);
      *(_QWORD *)&v45[0] = off_1E78E40E8;
      if (SHIBYTE(v48) < 0)
        operator delete(__p[0]);
      SipMessage::~SipMessage((SipMessage *)v45);
      goto LABEL_62;
    }
    SipTimerContainer::cancelTimer((SipTimerContainer *)(this + 33), (std::string *)"WaitForRingingTimer");
    v7 = this[22];
    v6 = this[23];
    if (v6)
    {
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
    }
    v11 = this[30];
    if (v11 && (shared_weak_owners = v11[8].__shared_weak_owners_) != 0)
      v13 = *(SipUserAgent **)(shared_weak_owners + 136);
    else
      v13 = 0;
    if (*(_DWORD *)SipUserAgent::config(v13)
      && !std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(this + 34, "RingingTimer"))
    {
      v16 = ((uint64_t (*)(std::__shared_weak_count **))(*this)[2].__shared_weak_owners_)(this);
      ((void (*)(std::__shared_weak_count **, uint64_t))(*this)->__shared_weak_owners_)(this, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"starting ringing timer", 22);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v16 + 17) = 0;
      if (v6)
      {
        v17 = (unint64_t *)&v6->__shared_weak_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      *((_QWORD *)&v45[1] + 1) = 0;
      v19 = operator new(0x20uLL);
      *v19 = &off_1E78CAC10;
      v19[1] = this;
      v19[2] = v7;
      v19[3] = v6;
      *((_QWORD *)&v45[1] + 1) = v19;
      v20 = this[30];
      if (v20 && (v21 = v20[8].__shared_weak_owners_) != 0)
        v22 = *(SipUserAgent **)(v21 + 136);
      else
        v22 = 0;
      v23 = (_DWORD *)SipUserAgent::config(v22);
      SipTimerContainer::startTimer(this + 33, (uint64_t)"RingingTimer", (uint64_t)v45, 1000 * *v23, 0);
      v24 = (_QWORD *)*((_QWORD *)&v45[1] + 1);
      if (*((_OWORD **)&v45[1] + 1) == v45)
      {
        v25 = 4;
        v24 = v45;
      }
      else
      {
        if (!*((_QWORD *)&v45[1] + 1))
          goto LABEL_34;
        v25 = 5;
      }
      (*(void (**)(void))(*v24 + 8 * v25))();
    }
LABEL_34:
    if (v6)
    {
      std::__shared_weak_count::__release_weak(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_36;
  }
  memset((char *)&v45[1] + 8, 0, 48);
  *(_QWORD *)&v45[0] = &off_1E78B7238;
  *((_QWORD *)&v45[0] + 1) = &_bambiDomain;
  LODWORD(v45[1]) = 1073741826;
  v15 = operator new();
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v15, *(_BYTE *)(*((_QWORD *)&v45[0] + 1) + 32));
  *((_QWORD *)&v45[1] + 1) = v15;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"sendRingingNotification: no server INVITE transaction", 53);
  *(_BYTE *)(v15 + 17) = 0;
  ImsLogContainer::logResult((ImsLogContainer *)this, (ImsResult *)v45);
  ImsResult::ImsResult((ImsResult *)a2, (const ImsResult *)v45);
  ImsResult::~ImsResult((ImsResult *)v45);
LABEL_62:
  v37 = v44;
  if (v44)
  {
    v38 = (unint64_t *)&v44->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_1BEF692C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::__shared_weak_count *v18;

  if (v18)
  {
    std::__shared_weak_count::__release_weak(v18);
    std::__shared_weak_count::__release_weak(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void SipSession::sendResponseToInviteOrUpdateRequest(ImsResult *a1, uint64_t a2, SipResponse *a3, _QWORD *a4)
{
  SipUriHeader *v8;
  __int128 *v9;
  uint64_t v10;
  void **v11;
  std::__shared_weak_count *v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  _BOOL4 v27;
  uint64_t v28;
  _BOOL4 v29;
  int v30;
  unsigned int v31;
  SDPModel *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _BOOL4 v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  const ImsResult *v48;
  int v49;
  char *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  BOOL v55;
  SDPModel *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _BOOL4 v69;
  const char *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  SipDialogFork *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  SDPModel *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  SDPSession *v108;
  char v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  void *v114;
  uint64_t v115;
  char v116;
  SipDialogFork *v117;
  int v118;
  int v119;
  SDPModel *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  char *v140;
  void *v141;
  unint64_t *v142;
  unint64_t *v143;
  unint64_t v144;
  _BOOL4 hasPreconditions;
  char *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  SipDialogFork *v155;
  SDPModel *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  SipUserAgent *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  const ImsResult *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  const ImsResult *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  _QWORD *v183;
  uint64_t i;
  uint64_t j;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  SDPModel *v193;
  uint64_t v194;
  char v195;
  void *__p[2];
  void *v197[9];
  char v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count *v200;
  uint64_t v201[2];
  SipDialogFork *v202;
  std::__shared_weak_count *v203;
  SipDialogFork *v204;
  std::__shared_weak_count *v205;
  uint64_t v206[2];
  SDPModel *v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;

  v8 = (SipUriHeader *)SipMessage::header<SipFromHeader>(*(_QWORD *)(*a4 + 288));
  if (v8)
    v9 = SipUriHeader::tag(v8);
  else
    v9 = &ims::kEmptyString;
  v10 = *(_QWORD *)(a2 + 240);
  v11 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v10 + 2040, (void **)v9);
  if ((void **)(v10 + 2048) == v11)
  {
    v13 = 0;
    v204 = 0;
    v205 = 0;
  }
  else
  {
    v13 = v11[7];
    v12 = (std::__shared_weak_count *)v11[8];
    v204 = (SipDialogFork *)v13;
    v205 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  v16 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a4 + 288) + 112))(*(_QWORD *)(*a4 + 288));
  v17 = v16[23];
  if ((v17 & 0x80u) == 0)
    v18 = v16[23];
  else
    v18 = *((_QWORD *)v16 + 1);
  if (v18 == 6)
  {
    if ((v17 & 0x80) != 0)
    {
      v27 = memcmp(*(const void **)v16, "INVITE", *((_QWORD *)v16 + 1)) == 0;
      if (v13)
        goto LABEL_23;
    }
    else if (v16[23])
    {
      v19 = v17 - 1;
      v20 = "INVITE";
      do
      {
        v22 = *v16++;
        v21 = v22;
        v24 = *(unsigned __int8 *)v20++;
        v23 = v24;
        v26 = v19-- != 0;
        v27 = v21 == v23;
      }
      while (v21 == v23 && v26);
      if (v13)
      {
LABEL_23:
        v28 = *(_QWORD *)(*a4 + 288);
        std::string::basic_string[abi:ne180100]<0>(__p, "100rel");
        v29 = SipMessage::supportsOption(v28, __p);
        if (SHIBYTE(v197[0]) < 0)
          operator delete(__p[0]);
        v30 = *((_DWORD *)a3 + 22);
        v31 = v30 - 200;
        if (v30 != 183 && v31 > 0x63)
        {
LABEL_27:
          if (v30 == 180 && v29)
          {
            v33 = (SDPModel *)*((_QWORD *)v204 + 82);
            v34 = (std::__shared_weak_count *)*((_QWORD *)v204 + 83);
            v193 = v33;
            v194 = (uint64_t)v34;
            if (v34)
            {
              v35 = (unint64_t *)&v34->__shared_owners_;
              do
                v36 = __ldxr(v35);
              while (__stxr(v36 + 1, v35));
            }
            v37 = *((_QWORD *)v33 + 19);
            v38 = *(void **)(v37 + 16);
            v39 = *(std::__shared_weak_count **)(v37 + 24);
            __p[0] = v38;
            __p[1] = v39;
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }
            v42 = SipOfferAnswerExchange::empty((SipOfferAnswerExchange *)v38);
            if (v39)
            {
              v43 = (unint64_t *)&v39->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            if (!v34)
              goto LABEL_46;
            v45 = (unint64_t *)&v34->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
              if (!v42)
                goto LABEL_223;
            }
            else
            {
LABEL_46:
              if (!v42)
                goto LABEL_223;
            }
            __p[0] = 0;
            __p[1] = 0;
            SipSession::localTemplateSdp((SipSession *)a2, (uint64_t *)&v193);
            if (v193)
              SipSession::localTemplateSdp((SipSession *)a2, (uint64_t *)__p);
            else
              (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 128))(__p, a2);
            v89 = (std::__shared_weak_count *)v194;
            if (v194)
            {
              v90 = (unint64_t *)(v194 + 8);
              do
                v91 = __ldaxr(v90);
              while (__stlxr(v91 - 1, v90));
              if (!v91)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
            }
            if (__p[0])
            {
              v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v92);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v92 + 8), (uint64_t)"adding SDP to RINGING", 21);
              *(_BYTE *)(v92 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v92 + 64))(v92, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v92 + 17) = 0;
              v93 = (std::__shared_weak_count *)__p[1];
              v201[0] = (uint64_t)__p[0];
              v201[1] = (uint64_t)__p[1];
              if (__p[1])
              {
                v94 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v95 = __ldxr(v94);
                while (__stxr(v95 + 1, v94));
              }
              SipMessage::setSdp((uint64_t)a3, v201);
              if (v93)
              {
                v96 = (unint64_t *)&v93->__shared_owners_;
                do
                  v97 = __ldaxr(v96);
                while (__stlxr(v97 - 1, v96));
                if (!v97)
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
              }
            }
            v98 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v99 = (unint64_t *)((char *)__p[1] + 8);
              do
                v100 = __ldaxr(v99);
              while (__stlxr(v100 - 1, v99));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
              }
            }
          }
LABEL_223:
          v140 = SipMessage::body<SipSdpBody>((uint64_t)a3);
          if (v140)
          {
            v141 = (void *)*((_QWORD *)v140 + 1);
            v142 = (unint64_t *)*((_QWORD *)v140 + 2);
            __p[0] = v141;
            __p[1] = v142;
            if (v142)
            {
              v143 = v142 + 1;
              do
                v144 = __ldxr(v143);
              while (__stxr(v144 + 1, v143));
            }
            if (v141)
            {
              hasPreconditions = SipMessage::hasPreconditions(*(SipMessage **)(*a4 + 288));
              if (!hasPreconditions && v27)
              {
                v146 = SipMessage::body<SipSdpBody>(*(_QWORD *)(*a4 + 288));
                if (v146)
                {
                  v147 = *((_QWORD *)v146 + 1);
                  v148 = (std::__shared_weak_count *)*((_QWORD *)v146 + 2);
                  if (v148)
                  {
                    v149 = (unint64_t *)&v148->__shared_owners_;
                    do
                      v150 = __ldxr(v149);
                    while (__stxr(v150 + 1, v149));
                    hasPreconditions = v147 == 0;
                    do
                      v151 = __ldaxr(v149);
                    while (__stlxr(v151 - 1, v149));
                    if (!v151)
                    {
                      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                      std::__shared_weak_count::__release_weak(v148);
                    }
                    goto LABEL_241;
                  }
                }
                else
                {
                  v147 = 0;
                }
                hasPreconditions = v147 == 0;
              }
            }
            else
            {
              hasPreconditions = 0;
            }
          }
          else
          {
            hasPreconditions = 0;
            __p[0] = 0;
            __p[1] = 0;
          }
LABEL_241:
          v152 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v153 = (unint64_t *)((char *)__p[1] + 8);
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
          v155 = v204;
          if (hasPreconditions
            && (SipPreconditions::addPreconditionsToOutgoingResponse(a2 + 1400, (uint64_t)v204 + 152, *(_QWORD *)(*a4 + 288), a3) & 1) == 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&v193, "InternalError");
            SipSessionInterface::terminationReason((std::__shared_weak_count *)a2, (uint64_t)&v193, (BambiCallTerminationReason *)__p);
            SipSession::generateTerminationResponse((SipSession *)a2, (const BambiCallTerminationReason *)__p, a3);
            v165 = v200;
            if (v200)
            {
              v166 = (unint64_t *)&v200->__shared_owners_;
              do
                v167 = __ldaxr(v166);
              while (__stlxr(v167 - 1, v166));
              if (!v167)
              {
                ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                std::__shared_weak_count::__release_weak(v165);
              }
            }
            v168 = v199;
            if (v199)
            {
              v169 = (unint64_t *)&v199->__shared_owners_;
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
              }
            }
            if (v198 < 0)
              operator delete(v197[7]);
            if (SHIBYTE(v197[4]) < 0)
              operator delete(v197[2]);
            if (SHIBYTE(v197[1]) < 0)
              operator delete(__p[1]);
            if (v195 < 0)
              operator delete(v193);
            memset(&v197[1], 0, 48);
            __p[0] = &off_1E78B7238;
            __p[1] = &_bambiDomain;
            LODWORD(v197[0]) = 0x40000000;
            v171 = (const ImsResult *)ImsResult::operator<<<char [49]>((uint64_t)__p, "unable to add preconditions to outgoing response");
            ImsResult::ImsResult(a1, v171);
          }
          else
          {
            *(_OWORD *)__p = 0u;
            memset(v197, 0, 56);
            v156 = (SDPModel *)*((_QWORD *)v155 + 82);
            v157 = (std::__shared_weak_count *)*((_QWORD *)v155 + 83);
            v193 = v156;
            v194 = (uint64_t)v157;
            if (v157)
            {
              v158 = (unint64_t *)&v157->__shared_owners_;
              do
                v159 = __ldxr(v158);
              while (__stxr(v159 + 1, v158));
            }
            SipOfferAnswer::updateWithOutgoingMessage(v156, (uint64_t)a3, (std::string *)(*a4 + 320), (uint64_t)__p);
            if (v157)
            {
              v160 = (unint64_t *)&v157->__shared_owners_;
              do
                v161 = __ldaxr(v160);
              while (__stlxr(v161 - 1, v160));
              if (!v161)
              {
                ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                std::__shared_weak_count::__release_weak(v157);
              }
            }
            if ((*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)__p[1] + 24))(__p[1], LODWORD(v197[0])))
            {
              SipResponse::setStatusFromImsResult(a3, (const ImsResult *)__p);
              ImsResult::ImsResult((uint64_t)a1, (uint64_t)__p);
            }
            else
            {
              if (v27)
              {
                v162 = *(_QWORD *)(a2 + 240);
                if (v162 && (v163 = *(_QWORD *)(v162 + 208)) != 0)
                  v164 = *(SipUserAgent **)(v163 + 136);
                else
                  v164 = 0;
                v172 = SipUserAgent::config(v164);
                if (SipResponseCodeMap::containsResponseCodeForMethod(v172 + 992, (void **)"INVITE", *((_DWORD *)a3 + 22), 0))
                {
                  SipSession::addLocationToMessage((SipSession *)a2, a3);
                }
              }
              SipSessionTimer::updateFromResponse(*(_QWORD *)(a2 + 1344), (uint64_t)a3, SipSessionTimer::kRoleUAS);
              v173 = (std::__shared_weak_count *)a4[1];
              v191 = *a4;
              v192 = v173;
              if (v173)
              {
                v174 = (unint64_t *)&v173->__shared_owners_;
                do
                  v175 = __ldxr(v174);
                while (__stxr(v175 + 1, v174));
              }
              (*(void (**)(uint64_t, SipResponse *, uint64_t *))(*(_QWORD *)a2 + 240))(a2, a3, &v191);
              v176 = v192;
              if (v192)
              {
                v177 = (unint64_t *)&v192->__shared_owners_;
                do
                  v178 = __ldaxr(v177);
                while (__stlxr(v178 - 1, v177));
                if (!v178)
                {
                  ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                  std::__shared_weak_count::__release_weak(v176);
                }
              }
            }
          }
          goto LABEL_293;
        }
        v49 = v31 < 0xFFFFFF9C || v29;
        if (v49 != 1)
          goto LABEL_223;
        v50 = SipMessage::body<SipSdpBody>((uint64_t)a3);
        if (v50)
        {
          v51 = (void *)*((_QWORD *)v50 + 1);
          v52 = (std::__shared_weak_count *)*((_QWORD *)v50 + 2);
          __p[0] = v51;
          __p[1] = v52;
          if (v52)
          {
            v53 = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldxr(v53);
            while (__stxr(v54 + 1, v53));
          }
          if (v51)
          {
            v55 = 0;
            if (!v52)
              goto LABEL_83;
LABEL_80:
            v62 = (unint64_t *)&v52->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
              if (v55)
              {
LABEL_84:
                v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v64);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)"adding SDP ", 11);
                *(_BYTE *)(v64 + 17) = 0;
                v65 = (_QWORD *)*((_QWORD *)v204 + 82);
                v66 = (std::__shared_weak_count *)*((_QWORD *)v204 + 83);
                __p[0] = v65;
                __p[1] = v66;
                if (v66)
                {
                  v67 = (unint64_t *)&v66->__shared_owners_;
                  do
                    v68 = __ldxr(v67);
                  while (__stxr(v68 + 1, v67));
                }
                v69 = SipOfferAnswer::localAnswerPending(*(SipOfferAnswer **)(v65[19] + 16), *(std::__shared_weak_count **)(v65[19] + 24));
                if (v69)
                  v70 = "answer";
                else
                  v70 = "offer";
                if (v69)
                  v71 = 6;
                else
                  v71 = 5;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)v70, v71);
                *(_BYTE *)(v64 + 17) = 0;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)" to ", 4);
                *(_BYTE *)(v64 + 17) = 0;
                std::ostream::operator<<();
                *(_BYTE *)(v64 + 17) = 0;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)" response", 9);
                *(_BYTE *)(v64 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v64 + 17) = 0;
                if (v66)
                {
                  v72 = (unint64_t *)&v66->__shared_owners_;
                  do
                    v73 = __ldaxr(v72);
                  while (__stlxr(v73 - 1, v72));
                  if (!v73)
                  {
                    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                    std::__shared_weak_count::__release_weak(v66);
                  }
                }
                v75 = v204;
                v74 = v205;
                v202 = v204;
                v203 = v205;
                if (v205)
                {
                  v76 = (unint64_t *)&v205->__shared_owners_;
                  do
                    v77 = __ldxr(v76);
                  while (__stxr(v77 + 1, v76));
                }
                v211 = 0;
                v212 = 0;
                v78 = *(std::__shared_weak_count **)(a2 + 776);
                if (v78)
                {
                  v212 = std::__shared_weak_count::lock(v78);
                  if (v212)
                    v211 = *(_QWORD *)(a2 + 768);
                }
                v79 = (SDPModel *)*((_QWORD *)v75 + 82);
                v80 = (std::__shared_weak_count *)*((_QWORD *)v75 + 83);
                v207 = v79;
                v208 = v80;
                if (v80)
                {
                  v81 = (unint64_t *)&v80->__shared_owners_;
                  do
                    v82 = __ldxr(v81);
                  while (__stxr(v82 + 1, v81));
                }
                SipOfferAnswer::offer((SipOfferAnswer *)__p, *(_QWORD *)(*((_QWORD *)v79 + 19) + 16), *(std::__shared_weak_count **)(*((_QWORD *)v79 + 19) + 24));
                if (__p[0])
                {
                  SipOfferAnswer::offer((SipOfferAnswer *)&v193, *(_QWORD *)(*((_QWORD *)v79 + 19) + 16), *(std::__shared_weak_count **)(*((_QWORD *)v79 + 19) + 24));
                  v83 = (std::__shared_weak_count *)*((_QWORD *)v193 + 1);
                  v209 = *(_QWORD *)v193;
                  v210 = v83;
                  if (v83)
                  {
                    v84 = (unint64_t *)&v83->__shared_owners_;
                    do
                      v85 = __ldxr(v84);
                    while (__stxr(v85 + 1, v84));
                  }
                  v86 = (std::__shared_weak_count *)v194;
                  if (v194)
                  {
                    v87 = (unint64_t *)(v194 + 8);
                    do
                      v88 = __ldaxr(v87);
                    while (__stlxr(v88 - 1, v87));
                    if (!v88)
                    {
                      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                      std::__shared_weak_count::__release_weak(v86);
                    }
                  }
                }
                else
                {
                  v209 = 0;
                  v210 = 0;
                }
                v101 = (std::__shared_weak_count *)__p[1];
                if (__p[1])
                {
                  v102 = (unint64_t *)((char *)__p[1] + 8);
                  do
                    v103 = __ldaxr(v102);
                  while (__stlxr(v103 - 1, v102));
                  if (!v103)
                  {
                    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                    std::__shared_weak_count::__release_weak(v101);
                  }
                }
                if (v80)
                {
                  v104 = (unint64_t *)&v80->__shared_owners_;
                  do
                    v105 = __ldaxr(v104);
                  while (__stlxr(v105 - 1, v104));
                  if (!v105)
                  {
                    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                    std::__shared_weak_count::__release_weak(v80);
                  }
                }
                __p[0] = 0;
                __p[1] = 0;
                if (!*(_BYTE *)(a2 + 1320))
                {
                  v109 = !v27;
                  if (v209)
                    v109 = 1;
                  if ((v109 & 1) != 0)
                    (*(void (**)(SDPModel **__return_ptr, uint64_t))(*(_QWORD *)a2 + 128))(&v193, a2);
                  else
                    SipSession::localTemplateSdp((SipSession *)a2, (uint64_t *)&v193);
                  std::shared_ptr<IpAddress>::operator=[abi:ne180100](__p, (uint64_t *)&v193);
                  v110 = (std::__shared_weak_count *)v194;
                  if (!v194)
                  {
LABEL_175:
                    v114 = __p[0];
                    if (!__p[0])
                    {
                      *((_DWORD *)a3 + 22) = 500;
                      goto LABEL_202;
                    }
                    v193 = 0;
                    v194 = 0;
                    std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> &,void>((uint64_t *)__p, &v193);
                    v115 = v209;
                    v116 = !v27;
                    v117 = v202;
                    if (v209)
                      v116 = 1;
                    if ((v116 & 1) == 0)
                    {
                      SipDialogFork::incrementSdpVersion(v202);
                      if (*(_BYTE *)(a2 + 1320))
                      {
                        *((_QWORD *)v193 + 18) = *((_QWORD *)v117 + 87);
LABEL_189:
                        v121 = (std::__shared_weak_count *)v194;
                        v206[0] = (uint64_t)v193;
                        v206[1] = v194;
                        if (v194)
                        {
                          v122 = (unint64_t *)(v194 + 8);
                          do
                            v123 = __ldxr(v122);
                          while (__stxr(v123 + 1, v122));
                        }
                        SipMessage::setSdp((uint64_t)a3, v206);
                        if (v121)
                        {
                          v124 = (unint64_t *)&v121->__shared_owners_;
                          do
                            v125 = __ldaxr(v124);
                          while (__stlxr(v125 - 1, v124));
                          if (!v125)
                          {
                            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                            std::__shared_weak_count::__release_weak(v121);
                          }
                        }
                        v126 = (std::__shared_weak_count *)v194;
                        if (v194)
                        {
                          v127 = (unint64_t *)(v194 + 8);
                          do
                            v128 = __ldaxr(v127);
                          while (__stlxr(v128 - 1, v127));
                          if (!v128)
                          {
                            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                            std::__shared_weak_count::__release_weak(v126);
                          }
                        }
LABEL_202:
                        v129 = (std::__shared_weak_count *)__p[1];
                        if (__p[1])
                        {
                          v130 = (unint64_t *)((char *)__p[1] + 8);
                          do
                            v131 = __ldaxr(v130);
                          while (__stlxr(v131 - 1, v130));
                          if (!v131)
                          {
                            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                            std::__shared_weak_count::__release_weak(v129);
                          }
                        }
                        v132 = v210;
                        if (v210)
                        {
                          v133 = (unint64_t *)&v210->__shared_owners_;
                          do
                            v134 = __ldaxr(v133);
                          while (__stlxr(v134 - 1, v133));
                          if (!v134)
                          {
                            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                            std::__shared_weak_count::__release_weak(v132);
                          }
                        }
                        v135 = v212;
                        if (v212)
                        {
                          v136 = (unint64_t *)&v212->__shared_owners_;
                          do
                            v137 = __ldaxr(v136);
                          while (__stlxr(v137 - 1, v136));
                          if (!v137)
                          {
                            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                            std::__shared_weak_count::__release_weak(v135);
                          }
                        }
                        if (v74)
                        {
                          v138 = (unint64_t *)&v74->__shared_owners_;
                          do
                            v139 = __ldaxr(v138);
                          while (__stlxr(v139 - 1, v138));
                          if (!v139)
                          {
                            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                            std::__shared_weak_count::__release_weak(v74);
                          }
                        }
                        if (!v114)
                        {
                          memset(&v197[1], 0, 48);
                          __p[0] = &off_1E78B7238;
                          __p[1] = &_bambiDomain;
                          LODWORD(v197[0]) = 0x40000000;
                          v179 = (const ImsResult *)ImsResult::operator<<<char [39]>((uint64_t)__p, "unable to add SDP to outgoing response");
                          ImsResult::ImsResult(a1, v179);
                          goto LABEL_293;
                        }
                        goto LABEL_223;
                      }
                      if (v211)
                      {
                        if ((*(_DWORD *)(v211 + 440) & 0xFFFFFFFE) == 2)
                          v118 = 3;
                        else
                          v118 = 1;
                      }
                      else
                      {
                        v118 = 1;
                      }
                      SDPModel::setDirectionForSessionAndMedia(v193, v118);
                    }
                    v119 = *(unsigned __int8 *)(a2 + 1320);
                    v120 = v193;
                    *((_QWORD *)v193 + 18) = *((_QWORD *)v117 + 87);
                    if (!v119)
                    {
                      v183 = (_QWORD *)v211;
                      if (v211)
                      {
                        if (*(_BYTE *)(v211 + 744) || *(_BYTE *)(v211 + 745))
                        {
                          if (v115)
                          {
                            for (i = *(_QWORD *)(v115 + 416); i != *(_QWORD *)(v115 + 424); i += 200)
                            {
                              if (*(_DWORD *)(i + 12) == 4)
                                goto LABEL_313;
                            }
                            SDPModel::removeTextSession(v120);
                            SipSession::schedulePendingReinviteForTTY((SipSession *)a2);
                          }
                          else
                          {
                            for (j = *((_QWORD *)v120 + 52); j != *((_QWORD *)v120 + 53); j += 200)
                            {
                              if (*(_DWORD *)(j + 12) == 4)
                              {
                                SipTimerContainer::cancelTimer((SipTimerContainer *)(a2 + 408), (std::string *)"TTYReinviteTimer");
                                break;
                              }
                            }
                          }
                        }
LABEL_313:
                        if (!*(_BYTE *)(a2 + 1320))
                        {
                          v207 = v193;
                          v208 = (std::__shared_weak_count *)v194;
                          if (v194)
                          {
                            v186 = (unint64_t *)(v194 + 8);
                            do
                              v187 = __ldxr(v186);
                            while (__stxr(v187 + 1, v186));
                          }
                          BambiCall::setDirectionForSdpBasedOnHoldState(v183, (_QWORD **)&v207);
                          v188 = v208;
                          if (v208)
                          {
                            v189 = (unint64_t *)&v208->__shared_owners_;
                            do
                              v190 = __ldaxr(v189);
                            while (__stlxr(v190 - 1, v189));
                            if (!v190)
                            {
                              ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                              std::__shared_weak_count::__release_weak(v188);
                            }
                          }
                        }
                      }
                    }
                    goto LABEL_189;
                  }
                  v113 = (unint64_t *)(v194 + 8);
                  do
                    v112 = __ldaxr(v113);
                  while (__stlxr(v112 - 1, v113));
LABEL_173:
                  if (!v112)
                  {
                    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                    std::__shared_weak_count::__release_weak(v110);
                  }
                  goto LABEL_175;
                }
                v106 = !v27;
                v107 = *(_QWORD *)(a2 + 1136);
                if (v209)
                  v106 = 1;
                if ((v106 & 1) != 0)
                {
                  if (v107)
                  {
                    v108 = *(SDPSession **)(v107 + 120);
                    goto LABEL_163;
                  }
                }
                else if (v107)
                {
                  v108 = *(SDPSession **)(v107 + 120);
                  v193 = 0;
                  v194 = 0;
LABEL_163:
                  SDPSession::localLazuliSdp(v108, &v193);
LABEL_165:
                  std::shared_ptr<IpAddress>::operator=[abi:ne180100](__p, (uint64_t *)&v193);
                  v110 = (std::__shared_weak_count *)v194;
                  if (!v194)
                    goto LABEL_175;
                  v111 = (unint64_t *)(v194 + 8);
                  do
                    v112 = __ldaxr(v111);
                  while (__stlxr(v112 - 1, v111));
                  goto LABEL_173;
                }
                v193 = 0;
                v194 = 0;
                goto LABEL_165;
              }
LABEL_119:
              v30 = *((_DWORD *)a3 + 22);
              goto LABEL_27;
            }
LABEL_83:
            if (v55)
              goto LABEL_84;
            goto LABEL_119;
          }
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
        }
        v56 = (SDPModel *)*((_QWORD *)v13 + 82);
        v57 = (std::__shared_weak_count *)*((_QWORD *)v13 + 83);
        v193 = v56;
        v194 = (uint64_t)v57;
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        v55 = SipOfferAnswer::localSdpPending(*(SipOfferAnswer **)(*((_QWORD *)v56 + 19) + 16), *(std::__shared_weak_count **)(*((_QWORD *)v56 + 19) + 24));
        if (v57)
        {
          v60 = (unint64_t *)&v57->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v52 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_83;
        goto LABEL_80;
      }
    }
    else
    {
      v27 = 1;
      if (v13)
        goto LABEL_23;
    }
  }
  else
  {
    v27 = 0;
    if (v13)
      goto LABEL_23;
  }
  v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"sendResponseToInviteOrUpdateRequest: couldn't find appropriate fork for remote tag ", 83);
  *(_BYTE *)(v47 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)__p, (const std::string *)v9);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v47 + 56))(v47, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v47 + 17) = 0;
  if (SHIBYTE(v197[3]) < 0)
    operator delete(v197[1]);
  if (SHIBYTE(v197[0]) < 0)
    operator delete(__p[0]);
  memset(&v197[1], 0, 48);
  __p[0] = &off_1E78B7238;
  __p[1] = &_bambiDomain;
  LODWORD(v197[0]) = 0x40000000;
  v48 = (const ImsResult *)ImsResult::operator<<<char [20]>((uint64_t)__p, "missing dialog fork");
  ImsResult::ImsResult(a1, v48);
LABEL_293:
  ImsResult::~ImsResult((ImsResult *)__p);
  v180 = v205;
  if (v205)
  {
    v181 = (unint64_t *)&v205->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
}

void sub_1BEF6A4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 128);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 112);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 176);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 160);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [56]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF6A6D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipSession::acceptInvitation(SipSessionTimer **this@<X0>, ImsResult *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  SipSessionTimer *v6;
  ImsResult *v7;
  ImsResult *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  ImsResult *v14;
  ImsResult *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[2];
  _BYTE v26[72];
  SipSessionTimer *v27;
  void *__p;
  uint64_t *v29;
  int v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[3];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::string v41[4];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  SipSessionTimer *v46;
  std::__shared_weak_count *v47;

  if (!*((_BYTE *)this + 1360))
  {
    memset(&v41[1], 0, 48);
    v41[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    v41[0].__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v41[0].__r_.__value_.__r.__words[2]) = 1073741826;
    v7 = (ImsResult *)ImsResult::operator<<<char [60]>((uint64_t)v41, "can't accept an invitation when we haven't alerted the user");
    ImsLogContainer::logResult((ImsLogContainer *)this, v7);
    ImsResult::ImsResult(a2, v7);
    ImsResult::~ImsResult((ImsResult *)v41);
    return;
  }
  v46 = 0;
  v47 = 0;
  v4 = (std::__shared_weak_count *)this[97];
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v47 = v5;
    if (v5)
    {
      v6 = this[96];
      v46 = v6;
      goto LABEL_8;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_8:
  if (*((_BYTE *)this + 1320))
  {
    if (!this[142])
    {
      memset(&v41[1], 0, 48);
      v41[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
      v41[0].__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v41[0].__r_.__value_.__r.__words[2]) = 1073741826;
      v8 = (ImsResult *)ImsResult::operator<<<char [43]>((uint64_t)v41, "acceptInvitation: no lazuli session object");
      ImsLogContainer::logResult((ImsLogContainer *)this, v8);
      ImsResult::ImsResult(a2, v8);
      goto LABEL_26;
    }
  }
  else if (!v6)
  {
    memset(&v41[1], 0, 48);
    v41[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    v41[0].__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v41[0].__r_.__value_.__r.__words[2]) = 1073741826;
    v15 = (ImsResult *)ImsResult::operator<<<char [33]>((uint64_t)v41, "acceptInvitation: no call object");
    ImsLogContainer::logResult((ImsLogContainer *)this, v15);
    ImsResult::ImsResult(a2, v15);
LABEL_26:
    ImsResult::~ImsResult((ImsResult *)v41);
    if (!v5)
      return;
    goto LABEL_46;
  }
  v44 = 0;
  v45 = 0;
  SipSession::serverInviteTransaction((SipSession *)this, &v44);
  if (v44)
  {
    v43 = 0;
    v42 = 0u;
    memset(v41, 0, sizeof(v41));
    SipResponse::SipResponse((SipResponse *)v41, 200, *(const SipRequest **)(v44 + 288));
    v39 = 0;
    v40 = 0;
    (*((void (**)(uint64_t *__return_ptr, SipSessionTimer **))*this + 16))(&v39, this);
    if (v39)
    {
      SipSessionTimer::validateIncomingRequestAndUpdateResponse(this[168], *(const SipRequest **)(v44 + 288), v41);
      v9 = v45;
      v25[0] = v44;
      v25[1] = v45;
      if (v45)
      {
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      SipSession::sendResponseToInviteOrUpdateRequest((ImsResult *)v35, (uint64_t)this, (SipResponse *)v41, v25);
      ImsLogContainer::logResult((uint64_t)this, (uint64_t)v35, (uint64_t)a2);
      ImsResult::~ImsResult((ImsResult *)v35);
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35[0] = &off_1E78B7238;
      v35[1] = &_bambiDomain;
      v35[2] = 1073741826;
      if (*((_BYTE *)this + 1320))
      {
        v32 = 0uLL;
        v33 = 0uLL;
        v34 = 0uLL;
        __p = &off_1E78B7238;
        v29 = &_bambiDomain;
        v30 = 1073741826;
        ImsResult::operator<<<char [66]>((uint64_t)&__p, "Unable to answer lazuli session: no local SDP for lazuli session ");
        v27 = v6;
        ImsResult::operator<<<BambiCall *>((uint64_t)&__p);
        ImsResult::operator=((uint64_t)v35, (uint64_t)&__p);
      }
      else
      {
        v32 = 0uLL;
        v33 = 0uLL;
        v34 = 0uLL;
        __p = &off_1E78B7238;
        v29 = &_bambiDomain;
        v30 = 1073741826;
        v16 = ImsResult::operator<<<char [55]>((uint64_t)&__p, "Unable to answer call: no local SDP for media session ");
        v27 = v6;
        ImsResult::operator<<<BambiCall *>(v16);
        ImsResult::operator=((uint64_t)v35, v16);
      }
      ImsResult::~ImsResult((ImsResult *)&__p);
      std::string::basic_string[abi:ne180100]<0>(&__p, "InternalError");
      SipSession::rejectWithReason((SipSession *)v26, (std::__shared_weak_count *)this, (uint64_t)&__p);
      ImsResult::~ImsResult((ImsResult *)v26);
      if (v31 < 0)
        operator delete(__p);
      ImsLogContainer::logResult((ImsLogContainer *)this, (ImsResult *)v35);
      ImsResult::ImsResult(a2, (const ImsResult *)v35);
      ImsResult::~ImsResult((ImsResult *)v35);
    }
    v17 = v40;
    if (v40)
    {
      v18 = (unint64_t *)&v40->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v41[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78E40E8;
    if (SHIBYTE(v43) < 0)
      operator delete((void *)v42);
    SipMessage::~SipMessage((SipMessage *)v41);
  }
  else
  {
    memset(&v41[1], 0, 48);
    v41[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    v41[0].__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v41[0].__r_.__value_.__r.__words[2]) = 1073741826;
    v14 = (ImsResult *)ImsResult::operator<<<char [55]>((uint64_t)v41, "acceptInvitation: no current server INVITE transaction");
    ImsLogContainer::logResult((ImsLogContainer *)this, v14);
    ImsResult::ImsResult(a2, v14);
    ImsResult::~ImsResult((ImsResult *)v41);
  }
  v20 = v45;
  if (v45)
  {
    v21 = (unint64_t *)&v45->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v5 = v47;
  if (v47)
  {
LABEL_46:
    v23 = (unint64_t *)&v5->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEF6ABFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  ImsResult::~ImsResult((ImsResult *)&__p);
  ImsResult::~ImsResult((ImsResult *)&a33);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v33 - 224);
  SipResponse::~SipResponse((void **)(v33 - 208));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v33 - 80);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v33 - 64);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [60]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF6AD5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [43]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF6AE00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [55]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF6AEA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [66]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF6AF48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<BambiCall *>(uint64_t a1)
{
  ImsStringOutStream *v2;

  v2 = *(ImsStringOutStream **)(a1 + 24);
  if (!v2)
  {
    v2 = (ImsStringOutStream *)operator new();
    ImsStringOutStream::ImsStringOutStream(v2, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v2;
  }
  std::ostream::operator<<();
  *((_BYTE *)v2 + 17) = 0;
  return a1;
}

void sub_1BEF6AFDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipSession::handleSessionConfirmed(SipSession *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[6];
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[2];
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _QWORD v35[3];
  __int128 v36;

  *((_DWORD *)this + 430) = 0;
  v35[1] = 9;
  v36 = 0u;
  v35[2] = 0;
  *(_QWORD *)&v36 = 0;
  v35[0] = &off_1E78C8FE0;
  SipSession::fireCallEvent(this, (BambiCallEvent *)v35);
  v33 = 0;
  v34 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (v2 && (v34 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v3 = *((_QWORD *)this + 96);
    v33 = v3;
  }
  else
  {
    v3 = 0;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 30) + 1920) && *((_BYTE *)this + 868) && v3 && *(_DWORD *)(v3 + 444) == 4)
  {
    v5 = *((_QWORD *)this + 22);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (v4)
    {
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    SipSessionInterface::stack((std::__shared_weak_count *)this, &v31);
    v8 = *(_QWORD *)(v31 + 136);
    LoggableString::LoggableString((LoggableString *)__p, "sendReInviteBlock");
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v26, (_QWORD *)this + 22);
    v9 = (std::__shared_weak_count *)v27;
    if (v26)
      v10 = v26 + 104;
    else
      v10 = 0;
    v28[0] = v10;
    v28[1] = v27;
    v26 = 0;
    v27 = 0;
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 1174405120;
    v24[2] = ___ZN10SipSession22handleSessionConfirmedEv_block_invoke;
    v24[3] = &__block_descriptor_tmp_119;
    v24[4] = this;
    v24[5] = v5;
    v25 = v4;
    if (v4)
    {
      v11 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    BambiClient::performBlock(v8, (__int128 *)__p, v28, v24);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v15 = (std::__shared_weak_count *)v27;
    if (v27)
    {
      v16 = (unint64_t *)(v27 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v18 = v32;
    if (v32)
    {
      v19 = (unint64_t *)&v32->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v25)
      std::__shared_weak_count::__release_weak(v25);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
  }
  v21 = v34;
  if (v34)
  {
    v22 = (unint64_t *)&v34->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v35[0] = &off_1E78BD300;
  if ((_QWORD)v36)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v36);
}

void sub_1BEF6B298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v30;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a26 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v28 - 104);
  *(_QWORD *)(v28 - 88) = &off_1E78BD300;
  v30 = *(std::__shared_weak_count **)(v28 - 64);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN10SipSession22handleSessionConfirmedEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  SipSession *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BOOL4 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  SipOfferAnswer *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  SipOfferAnswer *v34;
  std::__shared_weak_count *v35;
  uint64_t v36[2];
  uint64_t v37;
  std::__shared_weak_count *v38;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (SipSession *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (!a1[5])
      {
LABEL_18:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
      v37 = 0;
      v38 = 0;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v3 + 97);
      if (v6 && (v38 = std::__shared_weak_count::lock(v6)) != 0 && (v7 = *((_QWORD *)v3 + 96), (v37 = v7) != 0))
      {
        if ((SipSession::confirmed(v3) & 1) != 0)
        {
          if (SipSession::terminating(v3) || (*(unsigned int (**)(SipSession *))(*(_QWORD *)v3 + 264))(v3))
          {
            v8 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)v3 + 64))(v3);
            (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"sendReInvite: don't need to re-INVITE a terminating session", 59);
            *(_BYTE *)(v8 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          else
          {
            if (*(_DWORD *)(v7 + 444) == 4)
            {
              SipSession::clientInviteTransaction(v3, (uint64_t *)&v34);
              if (v34)
              {
                v14 = 1;
              }
              else
              {
                SipSession::serverInviteTransaction(v3, v36);
                v14 = v36[0] != 0;
                std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v36);
              }
              v15 = v35;
              if (v35)
              {
                v16 = (unint64_t *)&v35->__shared_owners_;
                do
                  v17 = __ldaxr(v16);
                while (__stlxr(v17 - 1, v16));
                if (!v17)
                {
                  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
              if (v14)
              {
                v18 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)v3 + 64))(v3);
                (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v18);
                v19 = (_BYTE *)ImsOutStream::operator<<(v18, "sendReInvite: already have an active INVITE transaction");
                (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                v19[17] = 0;
              }
              else
              {
                v20 = *((_QWORD *)v3 + 30);
                v21 = *(_QWORD *)(v20 + 2064);
                v22 = *(_QWORD *)(v20 + 2072);
                v36[0] = v21;
                v36[1] = v22;
                if (v22)
                {
                  v23 = (unint64_t *)(v22 + 8);
                  do
                    v24 = __ldxr(v23);
                  while (__stxr(v24 + 1, v23));
                }
                if (!v21)
                  goto LABEL_45;
                v25 = *(SipOfferAnswer **)(v21 + 656);
                v26 = *(std::__shared_weak_count **)(v21 + 664);
                v34 = v25;
                v35 = v26;
                if (v26)
                {
                  v27 = (unint64_t *)&v26->__shared_owners_;
                  do
                    v28 = __ldxr(v27);
                  while (__stxr(v28 + 1, v27));
                }
                v29 = SipOfferAnswer::satisfied(v25);
                std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v34);
                if (v29)
                {
                  v30 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)v3 + 64))(v3);
                  (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v30);
                  v31 = (_BYTE *)ImsOutStream::operator<<(v30, "sending re-INVITE to change media from inactive to sendrecv");
                  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  v31[17] = 0;
                  SipSession::sendInvite((uint64_t)v3, (std::string *)"SendRecvInvite", (ImsResult *)&v34);
                  ImsResult::~ImsResult((ImsResult *)&v34);
                }
                else
                {
LABEL_45:
                  v32 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)v3 + 64))(v3);
                  (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v32);
                  v33 = (_BYTE *)ImsOutStream::operator<<(v32, "sendReInvite: offer/answer is not satisfied");
                  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  v33[17] = 0;
                }
                std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v36);
              }
              goto LABEL_13;
            }
            v8 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)v3 + 64))(v3);
            (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"sendReInvite: media is no longer inactive", 41);
            *(_BYTE *)(v8 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
        }
        else
        {
          v8 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)v3 + 64))(v3);
          (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"sendReInvite: can't re-INVITE an unconfirmed session", 52);
          *(_BYTE *)(v8 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
      }
      else
      {
        v8 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)v3 + 64))(v3);
        (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"sendReInvite: no call", 21);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      *(_BYTE *)(v8 + 17) = 0;
LABEL_13:
      v9 = v38;
      if (v38)
      {
        v10 = (unint64_t *)&v38->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      goto LABEL_18;
    }
  }
}

void sub_1BEF6B7C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 64);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 48);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19SipSessionInterfaceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19SipSessionInterfaceEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

BOOL SipSession::terminating(SipSession *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;

  v2 = *((_QWORD *)this + 89);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2)
  {
    v6 = *((_QWORD *)this + 89);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
    v22 = v7;
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6) == 13)
    {
      v10 = 0;
      if (!v7)
        goto LABEL_26;
    }
    else
    {
      v11 = *((_QWORD *)this + 89);
      v12 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v10 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11) > 7;
      if (v12)
      {
        v15 = (unint64_t *)&v12->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v7 = v22;
      if (!v22)
      {
LABEL_26:
        v3 = v23;
        if (!v23)
          return v10;
        goto LABEL_27;
      }
    }
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    goto LABEL_26;
  }
  v10 = 0;
  if (!v3)
    return v10;
LABEL_27:
  v19 = (unint64_t *)&v3->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v10;
}

void sub_1BEF6B9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL SipOfferAnswer::satisfied(SipOfferAnswer *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BOOL8 v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = *((_QWORD *)this + 19);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (*(_QWORD *)(v2 + 40))
  {
    v6 = *(_QWORD *)(v2 + 56) != 0;
    if (!v3)
      return v6;
  }
  else
  {
    v6 = 0;
    if (!v3)
      return v6;
  }
  v7 = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

uint64_t SipSession::handleAck(std::__shared_weak_count *this, const SipRequest *a2)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  void (__cdecl *v13)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  SipOfferAnswer *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const void **v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  SipOfferAnswer *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _BOOL4 v47;
  unint64_t *v48;
  unint64_t v49;
  _DWORD *v50;
  int v51;
  char *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  SipOfferAnswer *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  int v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  ImsResult *v86;
  std::string::size_type shared_weak_owners;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  char *v100;
  uint64_t v101;
  _BYTE *v102;
  char v103;
  SipOfferAnswer *v104;
  std::__shared_weak_count *v105;
  std::string __p;
  std::__shared_weak_count *v107[2];
  char v108;
  char v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::string v114;
  std::string::size_type v115;
  std::string::size_type size;
  _BYTE v117[48];

  memset(v117, 0, sizeof(v117));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v114, &this[7].__shared_owners_);
  if (v114.__r_.__value_.__r.__words[0])
    v4 = v114.__r_.__value_.__r.__words[0] + 104;
  else
    v4 = 0;
  v115 = v4;
  size = v114.__r_.__value_.__l.__size_;
  *(_OWORD *)&v114.__r_.__value_.__l.__data_ = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "handleAck");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v117, (uint64_t *)&v115, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = (std::__shared_weak_count *)size;
  if (size)
  {
    v6 = (unint64_t *)(size + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)v114.__r_.__value_.__l.__size_;
  if (v114.__r_.__value_.__l.__size_)
  {
    v9 = (unint64_t *)(v114.__r_.__value_.__l.__size_ + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].__get_deleter)(this);
  ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"SipSession::handleAck", 21);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (SipSessionInterface::handleAck((SipSessionInterface *)this, a2))
  {
    BYTE1(this[64].__vftable) = 1;
    memset(&v114, 0, sizeof(v114));
    SipMessage::transactionId(a2, &v114);
    v12 = this[10].__vftable;
    if (v12[51].__on_zero_shared == (void (__cdecl *)(std::__shared_count *__hidden))1)
    {
      v13 = v12[51].~__shared_weak_count;
      v15 = *((_QWORD *)v13 + 7);
      v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 8);
      v112 = v15;
      v113 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      if (v15)
      {
        v110 = 0;
        v111 = 0;
        SipSession::clientInviteTransaction((SipSession *)this, &v110);
        v18 = v110;
        if (v110)
        {
          v19 = *(SipOfferAnswer **)(v15 + 656);
          v20 = *(std::__shared_weak_count **)(v15 + 664);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v23 = SipOfferAnswer::transactionId(v19);
          v25 = *(unsigned __int8 *)(v18 + 343);
          if ((v25 & 0x80u) == 0)
            v26 = *(unsigned __int8 *)(v18 + 343);
          else
            v26 = *(_QWORD *)(v18 + 328);
          v27 = *(unsigned __int8 *)(v23 + 23);
          v28 = (char)v27;
          if ((v27 & 0x80u) != 0)
            v27 = *(_QWORD *)(v23 + 8);
          if (v26 == v27)
          {
            v29 = (const void **)(v18 + 320);
            if (v28 >= 0)
              v24 = (unsigned __int8 *)v23;
            else
              v24 = *(unsigned __int8 **)v23;
            if ((v25 & 0x80) != 0)
            {
              v37 = memcmp(*v29, v24, *(_QWORD *)(v18 + 328)) == 0;
            }
            else if (*(_BYTE *)(v18 + 343))
            {
              v30 = v25 - 1;
              do
              {
                v32 = *(unsigned __int8 *)v29;
                v29 = (const void **)((char *)v29 + 1);
                v31 = v32;
                v34 = *v24++;
                v33 = v34;
                v36 = v30-- != 0;
                v37 = v31 == v33;
              }
              while (v31 == v33 && v36);
            }
            else
            {
              v37 = 1;
            }
          }
          else
          {
            v37 = 0;
          }
          if (v20)
          {
            v40 = (unint64_t *)&v20->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v20->__on_zero_shared)(v20, v24);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          if (v37)
          {
            v42 = ((uint64_t (*)(std::__shared_weak_count *, unsigned __int8 *))this->__vftable[1].__get_deleter)(this, v24);
            ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"handleAck: received ack for session inside client transaction, ignoring", 71);
            *(_BYTE *)(v42 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_125:
            *(_BYTE *)(v42 + 17) = 0;
            goto LABEL_126;
          }
          v15 = v112;
        }
        v43 = *(SipOfferAnswer **)(v15 + 656);
        v44 = *(std::__shared_weak_count **)(v15 + 664);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        v47 = SipOfferAnswer::remoteAnswerPending(v43);
        if (v44)
        {
          v48 = (unint64_t *)&v44->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        if (v47)
        {
          v50 = SipMessage::header<SipCSeqHeader>((uint64_t)a2);
          if (v50)
            v51 = v50[15];
          else
            v51 = 0;
          v58 = *(_QWORD *)(v112 + 656);
          v59 = *(std::__shared_weak_count **)(v112 + 664);
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
          }
          v62 = *(_QWORD *)(v58 + 152);
          v63 = *(_QWORD *)(v62 + 16);
          v64 = *(std::__shared_weak_count **)(v62 + 24);
          if (v64)
          {
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
            v67 = *(_DWORD *)(v63 + 96);
            do
              v68 = __ldaxr(v65);
            while (__stlxr(v68 - 1, v65));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          else
          {
            v67 = *(_DWORD *)(v63 + 96);
          }
          if (v59)
          {
            v69 = (unint64_t *)&v59->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          if (v51 != v67)
          {
            v42 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].__get_deleter)(this);
            ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"handleAck: received ack for differnt CSeq, ignoring", 51);
            *(_BYTE *)(v42 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            goto LABEL_125;
          }
          v71 = SipMessage::body<SipSdpBody>((uint64_t)a2);
          if (!v71)
            goto LABEL_152;
          v73 = *((_QWORD *)v71 + 1);
          v72 = (std::__shared_weak_count *)*((_QWORD *)v71 + 2);
          if (v72)
          {
            v74 = (unint64_t *)&v72->__shared_owners_;
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
            do
              v76 = __ldaxr(v74);
            while (__stlxr(v76 - 1, v74));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          if (!v73)
          {
LABEL_152:
            v100 = SipMessage::body<SipSdpBody>((uint64_t)a2);
            if (v100 && !v100[48])
            {
              if (LOBYTE(this[55].__vftable))
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "InvalidSdp");
                SipSession::logLazuliMessageSessionSetup((uint64_t)this, (uint64_t)&__p, 488);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "InvalidSdp");
              SipSession::bye(this, (uint64_t)&__p, 0);
              v86 = (ImsResult *)&v109;
            }
            else
            {
              v101 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].~__shared_weak_count_0)(this);
              ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v101);
              v102 = (_BYTE *)ImsOutStream::operator<<(v101, "expected SDP answer in ACK.  Terminating session.");
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v102 + 64))(v102, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v102[17] = 0;
              if (LOBYTE(this[55].__vftable))
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "MissingSdp");
                SipSession::logLazuliMessageSessionSetup((uint64_t)this, (uint64_t)&__p, 606);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "MissingSdp");
              SipSession::bye(this, (uint64_t)&__p, 0);
              v86 = (ImsResult *)&v108;
            }
            goto LABEL_162;
          }
          v77 = *(SipOfferAnswer **)(v112 + 656);
          v78 = *(std::__shared_weak_count **)(v112 + 664);
          v104 = v77;
          v105 = v78;
          if (v78)
          {
            v79 = (unint64_t *)&v78->__shared_owners_;
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
          }
          SipOfferAnswer::updateWithIncomingRequest(v77, a2, &v114, (uint64_t)&__p);
          v81 = (*(uint64_t (**)(std::string::size_type, _QWORD))(*(_QWORD *)__p.__r_.__value_.__l.__size_
                                                                          + 24))(__p.__r_.__value_.__l.__size_, LODWORD(__p.__r_.__value_.__r.__words[2]));
          ImsResult::~ImsResult((ImsResult *)&__p);
          if (v78)
          {
            v82 = (unint64_t *)&v78->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          if (v81)
          {
            v84 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].~__shared_weak_count_0)(this);
            ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v84);
            v85 = (_BYTE *)ImsOutStream::operator<<(v84, "invalid SDP answer in ACK.  Terminating session.");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v85 + 64))(v85, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v85[17] = 0;
            if (LOBYTE(this[55].__vftable))
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "InvalidSdp");
              SipSession::logLazuliMessageSessionSetup((uint64_t)this, (uint64_t)&__p, 488);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "InvalidSdp");
            SipSession::bye(this, (uint64_t)&__p, 0);
            v86 = (ImsResult *)&v103;
LABEL_162:
            ImsResult::~ImsResult(v86);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          v52 = SipMessage::body<SipSdpBody>((uint64_t)a2);
          if (v52)
          {
            v54 = *((_QWORD *)v52 + 1);
            v53 = (std::__shared_weak_count *)*((_QWORD *)v52 + 2);
            if (v53)
            {
              v55 = (unint64_t *)&v53->__shared_owners_;
              do
                v56 = __ldxr(v55);
              while (__stxr(v56 + 1, v55));
              do
                v57 = __ldaxr(v55);
              while (__stlxr(v57 - 1, v55));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            if (v54)
            {
              v42 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].~__shared_weak_count_0)(this);
              ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v42);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"incoming ACK contains SDP, but we aren't expecting any.  Ignoring it.", 69);
              *(_BYTE *)(v42 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_125;
            }
          }
        }
LABEL_126:
        shared_weak_owners = this[29].__shared_weak_owners_;
        v88 = (std::__shared_weak_count *)this[30].__vftable;
        __p.__r_.__value_.__r.__words[0] = shared_weak_owners;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v88;
        if (v88)
        {
          v89 = (unint64_t *)&v88->__shared_owners_;
          do
            v90 = __ldxr(v89);
          while (__stxr(v90 + 1, v89));
        }
        (*(void (**)(std::string::size_type, const SipRequest *))(*(_QWORD *)shared_weak_owners + 104))(shared_weak_owners, a2);
        if (v88)
        {
          v91 = (unint64_t *)&v88->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        if (SipSession::confirmed((SipSession *)this))
        {
          v93 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].__get_deleter)(this);
          ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v93);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v93 + 8), (uint64_t)"call confirmed, send session acknowledged", 41);
          *(_BYTE *)(v93 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v93 + 64))(v93, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v93 + 17) = 0;
          if (LOBYTE(this[55].__vftable))
          {
            memset(&__p, 0, sizeof(__p));
            SipSession::logLazuliMessageSessionSetup((uint64_t)this, (uint64_t)&__p, 200);
          }
          v107[1] = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BD300;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0x1EuLL;
          v107[0] = 0;
          SipSession::fireCallEvent((SipSession *)this, (BambiCallEvent *)&__p);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BD300;
          if (v107[0])
            std::__shared_weak_count::__release_weak(v107[0]);
        }
        v94 = v111;
        if (v111)
        {
          v95 = (unint64_t *)&v111->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        v38 = 1;
        v14 = v113;
        if (!v113)
          goto LABEL_149;
        goto LABEL_145;
      }
    }
    else
    {
      v14 = 0;
      v112 = 0;
      v113 = 0;
    }
    v39 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].__on_zero_shared)(this);
    ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"handleAck: dialog has no fork", 29);
    *(_BYTE *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v39 + 17) = 0;
    if (LOBYTE(this[55].__vftable))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "InternalError");
      SipSession::logLazuliMessageSessionSetup((uint64_t)this, (uint64_t)&__p, 481);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v38 = 0;
    if (!v14)
      goto LABEL_149;
LABEL_145:
    v97 = (unint64_t *)&v14->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
LABEL_149:
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v114.__r_.__value_.__l.__data_);
    goto LABEL_151;
  }
  if (LOBYTE(this[55].__vftable))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "InternalError");
    SipSession::logLazuliMessageSessionSetup((uint64_t)this, (uint64_t)&__p, 200);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v38 = 0;
LABEL_151:
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v117);
  return v38;
}

void sub_1BEF6C58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,std::__shared_weak_count *a27)
{
  uint64_t v27;

  if (a26 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 184);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 168);
  if (*(char *)(v27 - 129) < 0)
    operator delete(*(void **)(v27 - 152));
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v27 - 112);
  _Unwind_Resume(a1);
}

void SipSession::logLazuliMessageSessionSetup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::string::value_type *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string v23;
  void *__p[2];
  char v25;
  std::string v26;
  void *v27[2];
  char v28;
  std::string v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string v32;
  std::string v33;
  void *v34[226];
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  std::__shared_weak_count *v40;

  v39 = 0;
  v40 = 0;
  SipSessionInterface::stack((std::__shared_weak_count *)a1, &v39);
  v6 = v39;
  if (!v39)
    goto LABEL_61;
  bzero(v34, 0x9B8uLL);
  SipStackConfig::SipStackConfig((SipStackConfig *)v34, (const SipStackConfig *)(v6 + 208));
  memset(&v33, 0, sizeof(v33));
  std::string::basic_string[abi:ne180100]<0>(&v33, "none");
  if (v35)
  {
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v33.__r_.__value_.__l.__size_ = 5;
      v8 = (std::string *)v33.__r_.__value_.__r.__words[0];
      v7 = (std::string::value_type *)(v33.__r_.__value_.__r.__words[0] + 5);
    }
    else
    {
      v7 = &v33.__r_.__value_.__s.__data_[5];
      *((_BYTE *)&v33.__r_.__value_.__s + 23) = 5;
      v8 = &v33;
    }
    v8->__r_.__value_.__s.__data_[4] = 67;
    LODWORD(v8->__r_.__value_.__l.__data_) = 1163087945;
  }
  else
  {
    if (!v37)
      goto LABEL_13;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v33.__r_.__value_.__l.__size_ = 3;
      v9 = (std::string *)v33.__r_.__value_.__r.__words[0];
      v7 = (std::string::value_type *)(v33.__r_.__value_.__r.__words[0] + 3);
    }
    else
    {
      v7 = &v33.__r_.__value_.__s.__data_[3];
      *((_BYTE *)&v33.__r_.__value_.__s + 23) = 3;
      v9 = &v33;
    }
    v9->__r_.__value_.__s.__data_[2] = 83;
    LOWORD(v9->__r_.__value_.__l.__data_) = 19540;
  }
  *v7 = 0;
LABEL_13:
  memset(&v32, 0, sizeof(v32));
  std::string::basic_string[abi:ne180100]<0>(&v32, "P2P");
  if (*(char *)(a1 + 1295) < 0)
  {
    if (!*(_QWORD *)(a1 + 1280))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(a1 + 1295))
  {
    goto LABEL_21;
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    v32.__r_.__value_.__l.__size_ = 11;
    v10 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&v32.__r_.__value_.__s + 23) = 11;
    v10 = &v32;
  }
  strcpy((char *)v10, "GroupCreate");
LABEL_21:
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v39 + 136) + 104))(&v30);
  v11 = v30;
  v12 = *(char *)(a2 + 23);
  if (v12 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 1136) + 920))
  {
    v14 = 0;
    if ((v12 & 0x80) == 0)
      goto LABEL_26;
LABEL_28:
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    goto LABEL_29;
  }
  v14 = (uint64_t)((double)(std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)(a1 + 1328)) / 1000000.0);
  if ((*(_BYTE *)(a2 + 23) & 0x80) != 0)
    goto LABEL_28;
LABEL_26:
  v29 = *(std::string *)a2;
LABEL_29:
  if (*(_BYTE *)(*(_QWORD *)(a1 + 1136) + 920))
    v15 = "MO";
  else
    v15 = "MT";
  std::string::basic_string[abi:ne180100]<0>(v27, v15);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v26, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    v26 = v32;
  if (v36)
    v16 = "TCP";
  else
    v16 = "UDP";
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v23, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    v23 = v33;
  IMSMetricsManager::logLazuliMessageSessionSetup(v11, v13 == 0, v14, a3, (uint64_t)&v29, (uint64_t)v27, (uint64_t)&v26, (uint64_t)__p, (uint64_t)&v23, v38);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (v25 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (v28 < 0)
    operator delete(v27[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v17 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  SipStackConfig::~SipStackConfig(v34);
LABEL_61:
  v20 = v40;
  if (v40)
  {
    v21 = (unint64_t *)&v40->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1BEF6CAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55)
{
  uint64_t v55;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  if (a48 < 0)
    operator delete(a43);
  if (a54 < 0)
    operator delete(a49);
  SipStackConfig::~SipStackConfig(&a55);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v55 - 80);
  _Unwind_Resume(a1);
}

void sub_1BEF6CB98()
{
  JUMPOUT(0x1BEF6CB88);
}

uint64_t SipOfferAnswer::transactionId(SipOfferAnswer *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 19);
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(std::__shared_weak_count **)(v1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v3 + 72;
}

void SipSession::bye(std::__shared_weak_count *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[8];
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;

  SipSessionInterface::terminationReason(a1, a2, (BambiCallTerminationReason *)v11);
  ((void (*)(std::__shared_weak_count *, _BYTE *, uint64_t))a1->__vftable[3].~__shared_weak_count)(a1, v11, a3);
  v5 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v18;
  if (v18)
  {
    v9 = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v17 < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
}

void sub_1BEF6CD00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BambiCallTerminationReason::~BambiCallTerminationReason((void **)va);
  _Unwind_Resume(a1);
}

void SipSession::handlePrack(_QWORD *a1, SipMessage *a2, _QWORD *a3)
{
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  ImsResult *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  SipDialogFork *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  char *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  SipOfferAnswer *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  ImsResult *v42;
  uint64_t v43;
  _QWORD *v44;
  SipDialogFork *v45;
  std::string::size_type v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _BOOL4 v50;
  unint64_t *v51;
  unint64_t v52;
  SipPrackHandler *v53;
  std::string::size_type v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  SipOfferAnswer *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *size;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _QWORD *v96;
  SipOfferAnswer *v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  SipDialogFork *v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  char v105;
  char v106;
  SipOfferAnswer *v107;
  std::__shared_weak_count *v108;
  std::string __p[3];
  uint64_t v110;
  std::__shared_weak_count *v111;
  char v112[72];
  SipDialogFork *v113;
  std::__shared_weak_count *v114;
  _BYTE v115[72];
  _BYTE v116[72];

  v6 = SipMessage::header<SipRAckHeader>((uint64_t)a2);
  if (!v6)
  {
    v18 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"no RAck header found in PRACK request", 37);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    v19 = (std::__shared_weak_count *)a1[30];
    v20 = *a3 + 320;
    v21 = (*(uint64_t (**)(SipMessage *))(*(_QWORD *)a2 + 112))(a2);
    std::string::basic_string[abi:ne180100]<0>(__p, "Missing RAck header");
    SipDialog::sendResponse(__p, v19, v20, v21, 400, (ImsResult *)v116);
    v17 = (ImsResult *)v116;
LABEL_15:
    ImsResult::~ImsResult(v17);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return;
  }
  v7 = a1[80];
  if (!v7)
    goto LABEL_13;
  v8 = v6[16];
  v9 = a1 + 80;
  do
  {
    v10 = *(_DWORD *)(v7 + 32);
    v11 = v10 >= v8;
    if (v10 >= v8)
      v12 = (uint64_t *)v7;
    else
      v12 = (uint64_t *)(v7 + 8);
    if (v11)
      v9 = (_QWORD *)v7;
    v7 = *v12;
  }
  while (*v12);
  if (v9 == a1 + 80 || v8 < *((_DWORD *)v9 + 8))
  {
LABEL_13:
    v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"no provisional response found with CSeq ", 40);
    *(_BYTE *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    v14 = (std::__shared_weak_count *)a1[30];
    v15 = *a3 + 320;
    v16 = (*(uint64_t (**)(SipMessage *))(*(_QWORD *)a2 + 112))(a2);
    std::string::basic_string[abi:ne180100]<0>(__p, "Invalid CSeq");
    SipDialog::sendResponse(__p, v14, v15, v16, 400, (ImsResult *)v115);
    v17 = (ImsResult *)v115;
    goto LABEL_15;
  }
  v22 = a1[30];
  if (*(_QWORD *)(v22 + 2056) != 1)
  {
    v25 = 0;
    v113 = 0;
    v114 = 0;
LABEL_44:
    v43 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)"handlePrack: MT dialog doesn't have a fork", 42);
    *(_BYTE *)(v43 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v43 + 17) = 0;
    v44 = (_QWORD *)*a3;
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_23_1);
    SipServerTransaction::sendResponse(v44, 500, __p);
    ImsResult::~ImsResult((ImsResult *)v112);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    goto LABEL_110;
  }
  v23 = *(_QWORD *)(v22 + 2040);
  v24 = *(SipDialogFork **)(v23 + 56);
  v25 = *(std::__shared_weak_count **)(v23 + 64);
  v113 = v24;
  v114 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }
  if (!v24)
    goto LABEL_44;
  v110 = 0;
  v111 = 0;
  v28 = SipMessage::body<SipSdpBody>((uint64_t)a2);
  if (!v28)
    goto LABEL_56;
  v30 = *((_QWORD *)v28 + 1);
  v29 = (std::__shared_weak_count *)*((_QWORD *)v28 + 2);
  if (v29)
  {
    v31 = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    do
      v33 = __ldaxr(v31);
    while (__stlxr(v33 - 1, v31));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (!v30)
    goto LABEL_56;
  v34 = (SipOfferAnswer *)*((_QWORD *)v113 + 82);
  v35 = (std::__shared_weak_count *)*((_QWORD *)v113 + 83);
  v107 = v34;
  v108 = v35;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  SipOfferAnswer::updateWithIncomingRequest(v34, a2, (std::string *)(*a3 + 320), (uint64_t)__p);
  v38 = (*(uint64_t (**)(std::string::size_type, _QWORD))(*(_QWORD *)__p[0].__r_.__value_.__l.__size_ + 24))(__p[0].__r_.__value_.__l.__size_, LODWORD(__p[0].__r_.__value_.__r.__words[2]));
  ImsResult::~ImsResult((ImsResult *)__p);
  if (v35)
  {
    v39 = (unint64_t *)&v35->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v38)
  {
    v41 = (_QWORD *)*a3;
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_23_1);
    SipServerTransaction::sendResponse(v41, 488, __p);
    v42 = (ImsResult *)&v106;
    goto LABEL_41;
  }
  v45 = v113;
  SipPreconditions::updateFromIncomingMessage((uint64_t)(a1 + 175), (std::string *)((char *)v113 + 152), (uint64_t)a2);
  v46 = *((_QWORD *)v45 + 82);
  v47 = (std::__shared_weak_count *)*((_QWORD *)v45 + 83);
  __p[0].__r_.__value_.__r.__words[0] = v46;
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v47;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = SipOfferAnswer::localAnswerPending(*(SipOfferAnswer **)(*(_QWORD *)(v46 + 152) + 16), *(std::__shared_weak_count **)(*(_QWORD *)(v46 + 152) + 24));
  if (v47)
  {
    v51 = (unint64_t *)&v47->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (!v50
    || (SipDialogFork::createSdpToSend(v113, 0, 1, __p),
        std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)&v110, (__int128 *)__p),
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)__p),
        v110))
  {
LABEL_56:
    v53 = (SipPrackHandler *)v9[5];
    v54 = v9[6];
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    __p[0].__r_.__value_.__l.__size_ = v54;
    if (v54)
    {
      v55 = (unint64_t *)(v54 + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    v57 = (std::__shared_weak_count *)a3[1];
    v103 = *a3;
    v104 = v57;
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    v101 = v113;
    v102 = v114;
    if (v114)
    {
      v60 = (unint64_t *)&v114->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    v99 = v110;
    v100 = v111;
    if (v111)
    {
      v62 = (unint64_t *)&v111->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    SipPrackHandler::handlePrack(v53, (uint64_t)a2, &v103, &v101, &v99);
    v64 = v100;
    if (v100)
    {
      v65 = (unint64_t *)&v100->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = v102;
    if (v102)
    {
      v68 = (unint64_t *)&v102->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = v104;
    if (v104)
    {
      v71 = (unint64_t *)&v104->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v107 = 0;
    v108 = 0;
    v73 = (std::__shared_weak_count *)a1[97];
    if (v73)
    {
      v74 = std::__shared_weak_count::lock(v73);
      v108 = v74;
      if (v74)
      {
        v75 = (SipOfferAnswer *)a1[96];
        v107 = v75;
        if (v75)
        {
          v76 = v74;
          v77 = *((_QWORD *)v75 + 51);
          if (v77)
          {
            v97 = v75;
            v98 = v76;
            v78 = (unint64_t *)&v76->__shared_owners_;
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
            (*(void (**)(uint64_t, SipMessage *, SipOfferAnswer **))(*(_QWORD *)v77 + 16))(v77, a2, &v97);
            v80 = v98;
            if (v98)
            {
              v81 = (unint64_t *)&v98->__shared_owners_;
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 - 1, v81));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
          }
        }
      }
    }
    v83 = v108;
    if (v108)
    {
      v84 = (unint64_t *)&v108->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
    if (__p[0].__r_.__value_.__l.__size_)
    {
      v87 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    goto LABEL_104;
  }
  v94 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v94);
  v95 = (_BYTE *)ImsOutStream::operator<<(v94, "no local SDP to send in PRACK response");
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v95 + 64))(v95, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v95[17] = 0;
  v96 = (_QWORD *)*a3;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_23_1);
  SipServerTransaction::sendResponse(v96, 500, __p);
  v42 = (ImsResult *)&v105;
LABEL_41:
  ImsResult::~ImsResult(v42);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_104:
  v89 = v111;
  if (v111)
  {
    v90 = (unint64_t *)&v111->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v25 = v114;
LABEL_110:
  if (v25)
  {
    v92 = (unint64_t *)&v25->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1BEF6D52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  if (a42 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v49 - 224);
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipRAckHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "RAck");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

void SipSession::handleCancel(uint64_t *a1, const SipRequest *a2, uint64_t *a3)
{
  _QWORD **v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  ImsResult *v18;
  uint64_t v19;
  const std::string *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  BambiCallSessionTerminationBaseEvent *v37;
  std::__shared_weak_count *size;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _BYTE v51[72];
  std::string v52;
  std::string __p;
  std::string v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  char v59;
  char v60;
  _BYTE v61[72];
  _BYTE v62[72];
  std::string __str;
  void *v64;
  char v65;
  _QWORD **v66;
  std::__shared_weak_count *v67;

  v66 = 0;
  v67 = 0;
  SipDialog::serverTransactionWithIdAndMethod(a1[30], *a3 + 320, (uint64_t)"INVITE", &v66);
  v6 = v66;
  if (!v66)
  {
    v14 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"received CANCEL for unknown transaction ", 40);
    *(_BYTE *)(v14 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&__str, (const std::string *)(*a3 + 320));
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 56))(v14, &__str);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (v65 < 0)
      operator delete(v64);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v15 = (std::__shared_weak_count *)a1[30];
    v16 = *a3;
    v17 = (*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&str_23_1);
    SipDialog::sendResponse(&__str, v15, v16 + 320, v17, 481, (ImsResult *)v62);
    v18 = (ImsResult *)v62;
    goto LABEL_25;
  }
  v7 = (std::__shared_weak_count *)a1[30];
  v8 = *a3;
  v9 = (*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&str_23_1);
  SipDialog::sendResponse(&__str, v7, v8 + 320, v9, 200, (ImsResult *)v61);
  ImsResult::~ImsResult((ImsResult *)v61);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v10 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD *))(*v6[36] + 112))(v6[36]);
  v11 = v10[23];
  if ((v11 & 0x80u) == 0)
    v12 = v10[23];
  else
    v12 = *((_QWORD *)v10 + 1);
  if (v12 != 6)
    goto LABEL_20;
  if ((v11 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v10, "INVITE", *((_QWORD *)v10 + 1)))
      goto LABEL_21;
LABEL_20:
    v19 = (*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"remote end tried to cancel a ", 29);
    *(_BYTE *)(v19 + 17) = 0;
    v20 = (const std::string *)(*(uint64_t (**)(_QWORD *))(*v6[36] + 112))(v6[36]);
    LoggableString::LoggableString(&__str, v20);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 40))(v19, &__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" request. Ignoring", 18);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    goto LABEL_26;
  }
  if (v10[23])
  {
    v13 = "INVITE";
    while (*v10 == *(unsigned __int8 *)v13)
    {
      ++v10;
      ++v13;
      if (!--v11)
        goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_21:
  if (*((_BYTE *)a1 + 1724))
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"received CANCEL in a confirmed session. Terminating.", 52);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__str, "RemoteCancel");
    SipSession::bye((std::__shared_weak_count *)a1, (uint64_t)&__str, 0);
    v18 = (ImsResult *)&v60;
LABEL_25:
    ImsResult::~ImsResult(v18);
LABEL_26:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_28;
  }
  if (((unsigned int (*)(_QWORD **))(*v6)[18])(v6))
  {
    v22 = (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"received CANCEL for a completed INVITE. Terminating.", 52);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__str, "RemoteCancel");
    SipSession::bye((std::__shared_weak_count *)a1, (uint64_t)&__str, 0);
    v18 = (ImsResult *)&v59;
    goto LABEL_25;
  }
  v57 = 0;
  v58 = 0;
  v26 = (std::__shared_weak_count *)a1[97];
  if (!v26)
  {
    v27 = 0;
    goto LABEL_38;
  }
  v27 = std::__shared_weak_count::lock(v26);
  v58 = v27;
  if (!v27)
  {
LABEL_38:
    v28 = 0;
    goto LABEL_39;
  }
  v28 = a1[96];
  v57 = v28;
LABEL_39:
  v29 = a1[195];
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = (_QWORD *)operator new();
  v31 = v30;
  v55 = v28;
  v56 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
  }
  BambiCallSessionTerminatedEvent::BambiCallSessionTerminatedEvent(v30, &v55);
  a1[195] = (uint64_t)v31;
  v34 = v56;
  if (v56)
  {
    v35 = (unint64_t *)&v56->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (BambiCallSessionTerminationBaseEvent *)a1[195];
  SipSessionInterface::stack((std::__shared_weak_count *)a1, &__str);
  BambiCallSessionTerminationBaseEvent::setReasonFromIncomingByeOrCancelRequest(v37, a2, (const void ***)(__str.__r_.__value_.__r.__words[0] + 2392));
  size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v39 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v41 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"CancelReason: ", 14);
  *(_BYTE *)(v41 + 17) = 0;
  v42 = a1[195];
  if (*(char *)(v42 + 111) < 0)
    std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(v42 + 88), *(_QWORD *)(v42 + 96));
  else
    v54 = *(std::string *)(v42 + 88);
  LoggableString::LoggableString(&__str, &v54);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v41 + 40))(v41, &__str);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v41 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v41 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v41 + 17) = 0;
  v43 = a1[195];
  if (*(char *)(v43 + 87) < 0)
    std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)(v43 + 64), *(_QWORD *)(v43 + 72));
  else
    v52 = *(std::string *)(v43 + 64);
  LoggableString::LoggableString(&__p, &v52);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v41 + 40))(v41, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v41 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  SipTypedStateMachine<SipSessionState>::transitionToState(a1 + 82, 9);
  v44 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"canceling INVITE transaction ", 29);
  *(_BYTE *)(v44 + 17) = 0;
  v45 = v66;
  ((void (*)(std::string *__return_ptr, _QWORD **))(*v66)[20])(&__str, v66);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v44 + 40))(v44, &__str);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v44 + 17) = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v46 = (std::__shared_weak_count *)a1[30];
  v47 = (*(uint64_t (**)(_QWORD *))(*v45[36] + 112))(v45[36]);
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&str_23_1);
  SipDialog::sendResponse(&__str, v46, (uint64_t)(v45 + 40), v47, 487, (ImsResult *)v51);
  ImsResult::~ImsResult((ImsResult *)v51);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v48 = v58;
  if (v58)
  {
    v49 = (unint64_t *)&v58->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
LABEL_28:
  v23 = v67;
  if (v67)
  {
    v24 = (unint64_t *)&v67->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1BEF6DE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 105) < 0)
    operator delete(*(void **)(v40 - 128));
  if (a36 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v40 - 80);
  _Unwind_Resume(a1);
}

void SipSession::handleSessionProgressResponse(SipSession *a1, uint64_t a2)
{
  uint64_t v4;
  SipUriHeader *v5;
  __int128 *v6;
  void **v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  if ((SipSession::confirmed(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 30);
    v5 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
    if (v5)
      v6 = SipUriHeader::tag(v5);
    else
      v6 = &ims::kEmptyString;
    v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v4 + 2040, (void **)v6);
    if ((void **)(v4 + 2048) == v7)
    {
      v9 = 0;
    }
    else
    {
      v8 = (char *)v7[7];
      v9 = (std::__shared_weak_count *)v7[8];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (v8)
      {
        SipPreconditions::updateFromIncomingMessage((uint64_t)a1 + 1400, (std::string *)(v8 + 152), a2);
        if (!v9)
          return;
        goto LABEL_14;
      }
    }
    v12 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"no fork for 183 response", 24);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (!v9)
      return;
LABEL_14:
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEF6E110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSession::schedulePendingInvite(uint64_t a1, uint64_t a2)
{
  void **v4;
  const std::string *v5;
  int v6;
  int v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  std::string __p;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a2 + 376, (void **)"InviteType");
  if ((void **)(a2 + 384) == v4)
    v5 = (const std::string *)&ims::kEmptyString;
  else
    v5 = (const std::string *)(v4 + 7);
  std::string::operator=((std::string *)(a1 + 1696), v5);
  if ((*(char *)(a1 + 1719) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 1719))
      goto LABEL_6;
LABEL_22:
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"INVITE transaction doesn't have an InviteType tag. Can't schedule a retry.", 74);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
    return;
  }
  if (!*(_QWORD *)(a1 + 1704))
    goto LABEL_22;
LABEL_6:
  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 240) + 1920);
  v7 = random();
  if (v6)
    v8 = 10 * (v7 % 190) + 2100;
  else
    v8 = 10 * (v7 % 200);
  v10 = *(_QWORD *)(a1 + 176);
  v9 = *(std::__shared_weak_count **)(a1 + 184);
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"will re-attempt outgoing ", 25);
  *(_BYTE *)(v14 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)(a1 + 1696));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 40))(v14, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" in ", 4);
  *(_BYTE *)(v14 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"ms", 2);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v9)
  {
    v15 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v23 = 0;
  v17 = operator new(0x20uLL);
  *v17 = &off_1E78CB010;
  v17[1] = a1;
  v17[2] = v10;
  v17[3] = v9;
  v23 = v17;
  SipTimerContainer::startTimer((_QWORD *)(a1 + 264), (uint64_t)"GlareTimer", (uint64_t)v22, v8, 0);
  v18 = v23;
  if (v23 == v22)
  {
    v19 = 4;
    v18 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_25;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_25:
  if (v9)
  {
    std::__shared_weak_count::__release_weak(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1BEF6E444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  std::__shared_weak_count *v18;
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a18;
  if (a18 == v19)
  {
    v22 = 4;
    v21 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  if (v18)
  {
    std::__shared_weak_count::__release_weak(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::schedulePendingReinviteForTTY(SipSession *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  SipUserAgent *v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  std::string __p;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 30);
  if (*(_BYTE *)(v2 + 1920))
  {
    v3 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v3);
    v4 = *(_QWORD **)(v3 + 8);
    v5 = "Not scheduling Reinvite for TTY for MO call";
    v6 = 43;
LABEL_3:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    return;
  }
  v7 = *(_QWORD *)(v2 + 208);
  if (v7)
    v8 = *(SipUserAgent **)(v7 + 136);
  else
    v8 = 0;
  v9 = *(_DWORD *)(SipUserAgent::config(v8) + 820);
  if (!v9)
  {
    v3 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v3);
    v4 = *(_QWORD **)(v3 + 8);
    v5 = "Not scheduling Reinvite for TTY, since timeout value is configured to 0";
    v6 = 71;
    goto LABEL_3;
  }
  v11 = *((_QWORD *)this + 22);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v10)
  {
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
  }
  v15 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"will attempt outgoing ", 22);
  *(_BYTE *)(v15 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 1696));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v15 + 40))(v15, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" in ", 4);
  *(_BYTE *)(v15 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"ms", 2);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v23 = 0;
  v18 = operator new(0x20uLL);
  *v18 = &off_1E78CB090;
  v18[1] = this;
  v18[2] = v11;
  v18[3] = v10;
  v23 = v18;
  SipTimerContainer::startTimer((_QWORD *)this + 51, (uint64_t)"TTYReinviteTimer", (uint64_t)v22, v9, 0);
  v19 = v23;
  if (v23 == v22)
  {
    v20 = 4;
    v19 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_24;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_24:
  if (v10)
  {
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1BEF6E780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  std::__shared_weak_count *v18;
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a18;
  if (a18 == v19)
  {
    v22 = 4;
    v21 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  if (v18)
  {
    std::__shared_weak_count::__release_weak(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::upgradeToRtt(std::__shared_weak_count *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t shared_weak_owners;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void (**v10)(ImsResult *__hidden);
  uint64_t *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  shared_weak_owners = this[29].__shared_weak_owners_;
  if (shared_weak_owners
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)shared_weak_owners + 48))(shared_weak_owners) == 7)
  {
    SipSession::answerRttUpgradeRequest(this, (ImsResult *)a3);
    return;
  }
  if (!a2)
  {
    v7 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].__get_deleter)(this);
    ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Skipping reINVITE for existing text session.", 44);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
    return;
  }
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  SipSession::sendInvite((uint64_t)this, (std::string *)"InviteTypeTTYReinvite", (ImsResult *)&v16);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v10 = &off_1E78B7238;
  v11 = &_bambiDomain;
  v12 = 0;
  if (*((uint64_t **)&v16 + 1) == &_bambiDomain)
  {
    v8 = v17;
    ImsResult::~ImsResult((ImsResult *)&v10);
    if (!v8)
    {
      ImsResult::ImsResult(a3, (uint64_t)&v16);
      goto LABEL_10;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v10);
  }
  v9 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].~__shared_weak_count_0)(this);
  ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"unable to send RTT re-INVITE: ", 30);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(__int128 *, uint64_t))(v16 + 16))(&v16, v9);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  SipSession::schedulePendingReinviteForTTY((SipSession *)this);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v10 = &off_1E78B7238;
  v11 = &_bambiDomain;
  v12 = 1073741838;
  ims::result::resultWithCause((ims::result *)&v10, (const ImsResult *)&v16, a3);
  ImsResult::~ImsResult((ImsResult *)&v10);
LABEL_10:
  ImsResult::~ImsResult((ImsResult *)&v16);
}

void sub_1BEF6EA3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult((ImsResult *)va1);
  _Unwind_Resume(a1);
}

void SipSession::answerRttUpgradeRequest(std::__shared_weak_count *this@<X0>, ImsResult *a2@<X8>)
{
  std::__shared_weak_count *shared_owners;
  void *shared_weak_owners;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  SipRequest *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  ImsResult *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  const std::string *v29;
  ImsResult *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD v45[2];
  void *v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[2];
  void *v52[2];
  _OWORD v53[4];
  __int128 v54;
  void *__p[2];
  uint64_t v56;
  std::__shared_weak_count *v57;
  _BYTE v58[72];
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count_vtbl *v63;
  std::__shared_weak_count *v64;

  v63 = 0;
  v64 = 0;
  shared_owners = (std::__shared_weak_count *)this[32].__shared_owners_;
  if (!shared_owners
    || (v64 = std::__shared_weak_count::lock(shared_owners)) == 0
    || (v63 = this[32].__vftable) == 0)
  {
    memset((char *)v53 + 8, 0, 48);
    v52[0] = &off_1E78B7238;
    v52[1] = &_bambiDomain;
    LODWORD(v53[0]) = 1073741826;
    v24 = (ImsResult *)ImsResult::operator<<<char [40]>((uint64_t)v52, "answerRttUpgradeRequest: no call object");
    ImsLogContainer::logResult((ImsLogContainer *)this, v24);
    ImsResult::ImsResult(a2, v24);
LABEL_35:
    ImsResult::~ImsResult((ImsResult *)v52);
    goto LABEL_36;
  }
  shared_weak_owners = (void *)this[29].__shared_weak_owners_;
  v6 = (std::__shared_weak_count *)this[30].__vftable;
  v52[0] = shared_weak_owners;
  v52[1] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (*(uint64_t (**)(void *))(*(_QWORD *)shared_weak_owners + 48))(shared_weak_owners);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v12 = &this[27].__shared_owners_;
  if (v9 != 7)
  {
    memset((char *)v53 + 8, 0, 48);
    v52[0] = &off_1E78B7238;
    v52[1] = &_bambiDomain;
    LODWORD(v53[0]) = 1073741826;
    ImsResult::operator<<<char [66]>((uint64_t)v52, "answerRttUpgradeRequest: RTT upgrade response attempted in state ");
    v28 = (*(uint64_t (**)(uint64_t *))(*v12 + 24))(&this[27].__shared_owners_);
    v29 = (const std::string *)(*(uint64_t (**)(uint64_t *, uint64_t))(*v12 + 16))(&this[27].__shared_owners_, v28);
    LoggableString::LoggableString((std::string *)v46, v29);
    v30 = (ImsResult *)ImsResult::operator<<<LoggableString>((uint64_t)v52, (uint64_t)v46);
    ImsLogContainer::logResult((ImsLogContainer *)this, v30);
    ImsResult::ImsResult(a2, v30);
    if (SBYTE7(v47) < 0)
      operator delete(v46[0]);
    goto LABEL_35;
  }
  v61 = 0;
  v62 = 0;
  SipSession::serverInviteTransaction((SipSession *)this, &v61);
  if (v61)
  {
    v59 = 0;
    v60 = 0;
    ((void (*)(uint64_t *__return_ptr, std::__shared_weak_count *))this->__vftable[3].~__shared_weak_count_0)(&v59, this);
    if (v59)
    {
      v56 = 0;
      v54 = 0u;
      *(_OWORD *)__p = 0u;
      memset(v53, 0, sizeof(v53));
      *(_OWORD *)v52 = 0u;
      SipResponse::SipResponse((SipResponse *)v52, 200, *(const SipRequest **)(v61 + 288));
      v13 = v62;
      v14 = *(SipRequest **)(v61 + 288);
      v51[0] = v61;
      v51[1] = v62;
      if (v62)
      {
        v15 = (unint64_t *)&v62->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      SipSession::generateResponseForInviteOrUpdateRequest((uint64_t)this, v14, v51, (SipResponse *)v52);
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v50 = 0;
      v48 = 0u;
      v49 = 0u;
      *(_OWORD *)v46 = 0u;
      v47 = 0u;
      v19 = v62;
      v45[0] = v61;
      v45[1] = v62;
      if (v62)
      {
        v20 = (unint64_t *)&v62->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      SipSession::sendResponseToInviteOrUpdateRequest((ImsResult *)v46, (uint64_t)this, (SipResponse *)v52, v45);
      if (v19)
      {
        v22 = (unint64_t *)&v19->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      (*(void (**)(uint64_t *, uint64_t))(*v12 + 32))(&this[27].__shared_owners_, 6);
      ImsLogContainer::logResult((ImsLogContainer *)this, (ImsResult *)v46);
      ImsResult::ImsResult(a2, (const ImsResult *)v46);
      ImsResult::~ImsResult((ImsResult *)v46);
      v52[0] = off_1E78E40E8;
      if (SHIBYTE(v56) < 0)
        operator delete(__p[0]);
      SipMessage::~SipMessage((SipMessage *)v52);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v46, "InternalError");
      SipSessionInterface::terminationReason(this, (uint64_t)v46, (BambiCallTerminationReason *)v52);
      SipSession::hangUp((uint64_t *)this, (uint64_t)v52, 0, (uint64_t)v58);
      ImsResult::~ImsResult((ImsResult *)v58);
      v32 = v57;
      if (v57)
      {
        v33 = (unint64_t *)&v57->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v36 = (unint64_t *)((char *)__p[1] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (SHIBYTE(v54) < 0)
        operator delete(*((void **)&v53[3] + 1));
      if (SBYTE7(v53[2]) < 0)
        operator delete(*(void **)&v53[1]);
      if (SHIBYTE(v53[0]) < 0)
        operator delete(v52[1]);
      if (SBYTE7(v47) < 0)
        operator delete(v46[0]);
      memset((char *)v53 + 8, 0, 48);
      v52[0] = &off_1E78B7238;
      v52[1] = &_bambiDomain;
      LODWORD(v53[0]) = 1073741826;
      v38 = operator new();
      ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v38, *((_BYTE *)v52[1] + 32));
      *((_QWORD *)&v53[0] + 1) = v38;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"Unable to respond to RTT upgrade invite: no local SDP for media session ", 72);
      *(_BYTE *)(v38 + 17) = 0;
      v46[0] = v63;
      ImsResult::operator<<<BambiCall *>((uint64_t)v52);
      ImsLogContainer::logResult((ImsLogContainer *)this, (ImsResult *)v52);
      ImsResult::ImsResult(a2, (const ImsResult *)v52);
      ImsResult::~ImsResult((ImsResult *)v52);
    }
    v39 = v60;
    if (v60)
    {
      v40 = (unint64_t *)&v60->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t))(*v12 + 32))(&this[27].__shared_owners_, 6);
    memset((char *)v53 + 8, 0, 48);
    v52[0] = &off_1E78B7238;
    v52[1] = &_bambiDomain;
    LODWORD(v53[0]) = 1073741826;
    v31 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v31, algn_1ED704220[24]);
    *((_QWORD *)&v53[0] + 1) = v31;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"answerRttUpgradeRequest: no current server INVITE transaction", 61);
    *(_BYTE *)(v31 + 17) = 0;
    ImsLogContainer::logResult((ImsLogContainer *)this, (ImsResult *)v52);
    ImsResult::ImsResult(a2, (const ImsResult *)v52);
    ImsResult::~ImsResult((ImsResult *)v52);
  }
  v42 = v62;
  if (v62)
  {
    v43 = (unint64_t *)&v62->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
LABEL_36:
  v25 = v64;
  if (v64)
  {
    v26 = (unint64_t *)&v64->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1BEF6F0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  MEMORY[0x1C3B87100](v26, 0x10A1C4082A5C483);
  ImsResult::~ImsResult((ImsResult *)&a26);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 80);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 64);
  _Unwind_Resume(a1);
}

uint64_t SipSession::hangUp@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v21;
  BambiCallTerminationReason *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::string::size_type v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  char v37;
  ImsResult *v38;
  char v39;
  std::__shared_weak_count *size;
  unint64_t *v41;
  unint64_t v42;
  char v43;
  void (**v44)(ImsResult *__hidden);
  uint64_t *v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  std::string __p[24];
  uint64_t v51;
  std::__shared_weak_count *v52;
  _BYTE v53[48];

  memset(v53, 0, sizeof(v53));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v44, a1 + 22);
  if (v44)
    v8 = (uint64_t)(v44 + 13);
  else
    v8 = 0;
  v51 = v8;
  v52 = (std::__shared_weak_count *)v45;
  v44 = 0;
  v45 = 0;
  LoggableString::LoggableString((LoggableString *)__p, "hangUp");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v53, &v51, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v9 = v52;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)v45;
  if (v45)
  {
    v13 = (unint64_t *)(v45 + 1);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = SipSession::terminating((SipSession *)a1);
  v16 = *a1;
  if (v15)
  {
    v17 = (*(uint64_t (**)(uint64_t *))(v16 + 64))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"hangUp: already terminating", 27);
    *(_BYTE *)(v17 + 17) = 0;
    v18 = (_BYTE *)(v17 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_20:
    *v18 = 0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v53);
  }
  if ((*(unsigned int (**)(uint64_t *))(v16 + 264))(a1))
  {
    v19 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"hangUp: already terminated", 26);
    *(_BYTE *)(v19 + 17) = 0;
    v18 = (_BYTE *)(v19 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_20;
  }
  v21 = a1[194];
  if (v21)
  {
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v21 + 112);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v21 + 96);
    if (*(char *)(v21 + 95) < 0)
      operator delete(*(void **)(v21 + 72));
    if (*(char *)(v21 + 55) < 0)
      operator delete(*(void **)(v21 + 32));
    if (*(char *)(v21 + 31) < 0)
      operator delete(*(void **)(v21 + 8));
    MEMORY[0x1C3B87100](v21, 0x1032C40D4AF1F8FLL);
  }
  v22 = (BambiCallTerminationReason *)operator new();
  BambiCallTerminationReason::BambiCallTerminationReason(v22, (const BambiCallTerminationReason *)a2);
  a1[194] = (uint64_t)v22;
  v23 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"hanging up with reason ", 23);
  *(_BYTE *)(v23 + 17) = 0;
  LoggableString::LoggableString(__p, (const std::string *)(a2 + 8));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v23 + 40))(v23, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v23 + 17) = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v24 = a1[89];
  v25 = (std::__shared_weak_count *)a1[90];
  if (!v25)
    goto LABEL_37;
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
  do
    v28 = __ldaxr(v26);
  while (__stlxr(v28 - 1, v26));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (v24)
    {
LABEL_38:
      if (SipSession::confirmed((SipSession *)a1))
      {
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = 0uLL;
        v29 = (std::__shared_weak_count *)a1[97];
        if (v29
          && (__p[0].__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v29)) != 0)
        {
          v30 = a1[96];
          __p[0].__r_.__value_.__r.__words[0] = v30;
          if (v30)
          {
            v31 = *(std::__shared_weak_count **)(v30 + 360);
            if (v31 && (v32 = std::__shared_weak_count::lock(v31)) != 0)
            {
              v33 = v32;
              v30 = *(_DWORD *)(*(_QWORD *)(v30 + 352) + 200) == 3;
              v34 = (unint64_t *)&v32->__shared_owners_;
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            else
            {
              v30 = MEMORY[0xC8] == 3;
            }
          }
        }
        else
        {
          v30 = 0;
        }
        *(_QWORD *)(a4 + 64) = 0;
        *(_OWORD *)(a4 + 32) = 0u;
        *(_OWORD *)(a4 + 48) = 0u;
        *(_OWORD *)a4 = 0u;
        *(_OWORD *)(a4 + 16) = 0u;
        (*(void (**)(uint64_t *, uint64_t, std::string::size_type))(*a1 + 120))(a1, a2, v30);
        if (a3)
        {
          if (*((int *)a1 + 28) > 1)
            v39 = 1;
          else
            v39 = 2;
          *a3 = v39;
        }
        size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
        if (__p[0].__r_.__value_.__l.__size_)
        {
          v41 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
      }
      else
      {
        v36 = *(unsigned __int8 *)(a1[30] + 1920);
        *(_OWORD *)a4 = 0u;
        *(_OWORD *)(a4 + 16) = 0u;
        *(_OWORD *)(a4 + 32) = 0u;
        *(_OWORD *)(a4 + 48) = 0u;
        *(_QWORD *)(a4 + 64) = 0;
        if (v36)
          SipSession::cancel((SipSession *)a4, (const BambiCallTerminationReason *)a1, (const BambiCallTerminationReason *)a2);
        else
          SipSession::rejectWithReason((SipSession *)a4, (std::__shared_weak_count *)a1, a2);
        if (a3)
        {
          if (*((int *)a1 + 28) > 1)
            v43 = 1;
          else
            v43 = 2;
          *a3 = v43;
        }
      }
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v53);
    }
  }
  else
  {
LABEL_37:
    if (v24)
      goto LABEL_38;
  }
  bzero(__p, 0x250uLL);
  BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)__p, 15, a2);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BD2A8;
  SipSession::terminateWithEvent((SipSession *)a1, (BambiCallEvent *)__p, 13);
  if (a3)
  {
    if (*((int *)a1 + 28) > 1)
      v37 = 1;
    else
      v37 = 2;
    *a3 = v37;
  }
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v44 = &off_1E78B7238;
  v45 = &_bambiDomain;
  v46 = 1073741826;
  v38 = (ImsResult *)ImsResult::operator<<<char [34]>((uint64_t)&v44, "hangUp called while in NULL state");
  ImsLogContainer::logResult((ImsLogContainer *)a1, v38);
  ImsResult::ImsResult((ImsResult *)a4, v38);
  ImsResult::~ImsResult((ImsResult *)&v44);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)__p);
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v53);
}

void sub_1BEF6F7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v24 - 112);
  _Unwind_Resume(a1);
}

void SipSession::generateResponseForInviteOrUpdateRequest(uint64_t a1, SipRequest *a2, _QWORD *a3, SipResponse *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  SipUriHeader *v10;
  __int128 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void **v20;
  SipDialogFork *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  SipUriHeader *v30;
  __int128 *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  char *v54;
  char *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  BambiCall *v61;
  int v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  BOOL v67;
  std::__shared_weak_count *v68;
  SipStack *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  std::string::size_type v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  int v79;
  SipHeader *v80;
  uint64_t v81;
  _BYTE *v82;
  char v83;
  std::__shared_weak_count *size;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  char *v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  const ImsResult *v105;
  uint64_t v106;
  uint64_t v107;
  SipUserAgent *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  SipUserAgent *v119;
  _BOOL4 v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  SipDialogFork *v137;
  SipStack *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  SipDialogFork *v144;
  uint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  int v150;
  ImsPrefs *v151;
  void **EnableBrandedCallingKey;
  void *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  int v167;
  uint64_t v168;
  char *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  BambiCall *v178;
  std::__shared_weak_count *v179;
  _QWORD v180[2];
  int v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  SDPModel *v185[2];
  SipStack *v186;
  std::__shared_weak_count *v187;
  char v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  SipDialogFork *v191;
  std::__shared_weak_count *v192;
  std::string v193[3];
  void *__p;
  char v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count *v197;
  BambiCall *v198;
  std::__shared_weak_count *v199;

  v198 = 0;
  v199 = 0;
  v8 = *(std::__shared_weak_count **)(a1 + 776);
  if (v8)
  {
    v199 = std::__shared_weak_count::lock(v8);
    if (v199)
    {
      v198 = *(BambiCall **)(a1 + 768);
      if (v198)
        goto LABEL_5;
    }
  }
  if (*(_BYTE *)(a1 + 1320))
    goto LABEL_5;
  v16 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v17 = v16[23];
  if ((v17 & 0x80u) == 0)
    v18 = v16[23];
  else
    v18 = *((_QWORD *)v16 + 1);
  if (v18 != 6)
    goto LABEL_80;
  if ((v17 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v16, "UPDATE", *((_QWORD *)v16 + 1)))
      goto LABEL_72;
LABEL_80:
    v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"handleInviteOrUpdateRequest: no call", 36);
    *(_BYTE *)(v44 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v44 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v186, "InternalError");
    SipSessionInterface::terminationReason((std::__shared_weak_count *)a1, (uint64_t)&v186, (BambiCallTerminationReason *)v193);
    SipSession::generateTerminationResponse((SipSession *)a1, (const BambiCallTerminationReason *)v193, a4);
    v45 = v197;
    if (v197)
    {
      p_shared_owners = (unint64_t *)&v197->__shared_owners_;
      do
        v47 = __ldaxr(p_shared_owners);
      while (__stlxr(v47 - 1, p_shared_owners));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v196;
    if (!v196)
      goto LABEL_160;
    v49 = (unint64_t *)&v196->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    goto LABEL_158;
  }
  if (v16[23])
  {
    v19 = "UPDATE";
    while (*v16 == *(unsigned __int8 *)v19)
    {
      ++v16;
      ++v19;
      if (!--v17)
        goto LABEL_72;
    }
    goto LABEL_80;
  }
LABEL_72:
  v38 = SipMessage::body<SipSdpBody>((uint64_t)a2);
  if (v38)
  {
    v40 = *((_QWORD *)v38 + 1);
    v39 = (std::__shared_weak_count *)*((_QWORD *)v38 + 2);
    if (v39)
    {
      v41 = (unint64_t *)&v39->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      do
        v43 = __ldaxr(v41);
      while (__stlxr(v43 - 1, v41));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v40)
      goto LABEL_80;
  }
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)"handleInviteOrUpdateRequest: allowing empty UPDATE in headless state", 68);
  *(_BYTE *)(v51 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v51 + 17) = 0;
LABEL_5:
  if (*(_QWORD *)(a1 + 1136) || !*(_BYTE *)(a1 + 1320))
    goto LABEL_6;
  v12 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v13 = v12[23];
  if ((v13 & 0x80u) == 0)
    v14 = v12[23];
  else
    v14 = *((_QWORD *)v12 + 1);
  if (v14 != 6)
    goto LABEL_150;
  if ((v13 & 0x80) == 0)
  {
    if (v12[23])
    {
      v15 = "UPDATE";
      while (*v12 == *(unsigned __int8 *)v15)
      {
        ++v12;
        ++v15;
        if (!--v13)
          goto LABEL_142;
      }
      goto LABEL_150;
    }
    goto LABEL_142;
  }
  if (memcmp(*(const void **)v12, "UPDATE", *((_QWORD *)v12 + 1)))
  {
LABEL_150:
    v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v95 + 8), (uint64_t)"handleInviteOrUpdateRequest: no lazuli session", 46);
    *(_BYTE *)(v95 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v95 + 64))(v95, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v95 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v186, "InternalError");
    SipSessionInterface::terminationReason((std::__shared_weak_count *)a1, (uint64_t)&v186, (BambiCallTerminationReason *)v193);
    SipSession::generateTerminationResponse((SipSession *)a1, (const BambiCallTerminationReason *)v193, a4);
    v96 = v197;
    if (v197)
    {
      v97 = (unint64_t *)&v197->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    v48 = v196;
    if (!v196)
      goto LABEL_160;
    v99 = (unint64_t *)&v196->__shared_owners_;
    do
      v50 = __ldaxr(v99);
    while (__stlxr(v50 - 1, v99));
LABEL_158:
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
LABEL_160:
    if (v195 < 0)
      operator delete(__p);
    if (v193[2].__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v193[1].__r_.__value_.__l.__size_);
    if (v193[1].__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v193[0].__r_.__value_.__l.__size_);
    if (v188 < 0)
      operator delete(v186);
    goto LABEL_315;
  }
LABEL_142:
  v89 = SipMessage::body<SipSdpBody>((uint64_t)a2);
  if (v89)
  {
    v91 = *((_QWORD *)v89 + 1);
    v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 2);
    if (v90)
    {
      v92 = (unint64_t *)&v90->__shared_owners_;
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
      do
        v94 = __ldaxr(v92);
      while (__stlxr(v94 - 1, v92));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    if (v91)
      goto LABEL_150;
  }
  v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), (uint64_t)"handleInviteOrUpdateRequest: allowing empty UPDATE in headless state", 68);
  *(_BYTE *)(v100 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v100 + 64))(v100, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v100 + 17) = 0;
LABEL_6:
  v9 = *(_QWORD *)(a1 + 240);
  v10 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
  if (v10)
    v11 = SipUriHeader::tag(v10);
  else
    v11 = &ims::kEmptyString;
  v20 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9 + 2040, (void **)v11);
  if ((void **)(v9 + 2048) == v20)
  {
    v191 = 0;
    v192 = 0;
LABEL_46:
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"handleInviteOrUpdateRequest: couldn't find appropriate fork for remote tag ", 75);
    *(_BYTE *)(v29 + 17) = 0;
    v30 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
    if (v30)
      v31 = SipUriHeader::tag(v30);
    else
      v31 = &ims::kEmptyString;
    ObfuscatedString::ObfuscatedString((uint64_t)v193, (const std::string *)v31);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v29 + 56))(v29, v193);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v29 + 17) = 0;
    if (SHIBYTE(v193[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v193[1].__r_.__value_.__l.__data_);
    if (SHIBYTE(v193[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v193[0].__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v186, "InternalError");
    SipSessionInterface::terminationReason((std::__shared_weak_count *)a1, (uint64_t)&v186, (BambiCallTerminationReason *)v193);
    SipSession::generateTerminationResponse((SipSession *)a1, (const BambiCallTerminationReason *)v193, a4);
    v32 = v197;
    if (v197)
    {
      v33 = (unint64_t *)&v197->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = v196;
    if (!v196)
      goto LABEL_63;
    v36 = (unint64_t *)&v196->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    goto LABEL_61;
  }
  v21 = (SipDialogFork *)v20[7];
  v22 = (std::__shared_weak_count *)v20[8];
  v191 = v21;
  v192 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (!v21)
    goto LABEL_46;
  v25 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v26 = v25[23];
  if ((v26 & 0x80u) == 0)
    v27 = v25[23];
  else
    v27 = *((_QWORD *)v25 + 1);
  if (v27 != 6)
    goto LABEL_91;
  if ((v26 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v25, "INVITE", *((_QWORD *)v25 + 1)))
      goto LABEL_106;
LABEL_91:
    v52 = 0;
    v53 = 1;
    goto LABEL_92;
  }
  if (v25[23])
  {
    v28 = "INVITE";
    while (*v25 == *(unsigned __int8 *)v28)
    {
      ++v25;
      ++v28;
      if (!--v26)
        goto LABEL_106;
    }
    goto LABEL_91;
  }
LABEL_106:
  v62 = SipSession::confirmed((SipSession *)a1);
  v64 = *a3;
  v63 = (std::__shared_weak_count *)a3[1];
  v189 = *a3;
  v190 = v63;
  if (v63)
  {
    v65 = (unint64_t *)&v63->__shared_owners_;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  *(_OWORD *)&v193[0].__r_.__value_.__l.__data_ = 0uLL;
  SipSession::serverInviteTransaction((SipSession *)a1, (uint64_t *)v193);
  if (v193[0].__r_.__value_.__r.__words[0])
    v67 = v193[0].__r_.__value_.__r.__words[0] == v64;
  else
    v67 = 1;
  if (v67)
  {
    SipSession::clientInviteTransaction((SipSession *)a1, (uint64_t *)&v186);
    v69 = v186;
    v68 = v187;
    if (v187)
    {
      v70 = (unint64_t *)&v187->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if (!v69)
    {
      v83 = 1;
      goto LABEL_129;
    }
    *((_DWORD *)a4 + 22) = 491;
    v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v72 + 8), (uint64_t)"received an incoming INVITE while we're waiting for a response to our INVITE", 76);
    *(_BYTE *)(v72 + 17) = 0;
    v82 = (_BYTE *)(v72 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    *((_DWORD *)a4 + 22) = 500;
    v79 = random();
    v80 = SipMessage::headerWithName(a4, "Retry-After", 1);
    v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v81 + 8), (uint64_t)"received an incoming INVITE while we're already processing another one", 70);
    *(_BYTE *)(v81 + 17) = 0;
    v82 = (_BYTE *)(v81 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  v83 = 0;
  *v82 = 0;
LABEL_129:
  v52 = v62 ^ 1;
  size = (std::__shared_weak_count *)v193[0].__r_.__value_.__l.__size_;
  if (v193[0].__r_.__value_.__l.__size_)
  {
    v85 = (unint64_t *)(v193[0].__r_.__value_.__l.__size_ + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v63)
  {
    v87 = (unint64_t *)&v63->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v53 = v52;
  if ((v83 & 1) == 0)
    goto LABEL_310;
LABEL_92:
  if (SipSessionTimer::validateIncomingRequestAndUpdateResponse(*(SipSessionTimer **)(a1 + 1344), a2, (std::string *)a4))
  {
    v54 = SipMessage::body<SipSdpBody>((uint64_t)a2);
    if (!v54 || v54[48])
    {
      if (v52)
      {
        v55 = SipMessage::body<SipSdpBody>((uint64_t)a2);
        if (!v55)
          goto LABEL_104;
        v57 = *((_QWORD *)v55 + 1);
        v56 = (std::__shared_weak_count *)*((_QWORD *)v55 + 2);
        if (v56)
        {
          v58 = (unint64_t *)&v56->__shared_owners_;
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
          do
            v60 = __ldaxr(v58);
          while (__stlxr(v60 - 1, v58));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        if (!v57)
        {
LABEL_104:
          memset(&v193[1], 0, 48);
          v193[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
          v193[0].__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
          v193[0].__r_.__value_.__r.__words[2] = 0x40000000;
          v61 = v198;
          if (v198)
          {
            v185[0] = 0;
            v185[1] = 0;
            BambiCall::initializeMediaForMTSession(v198, v185, (uint64_t)&v186);
          }
          else
          {
            v182 = 0uLL;
            v183 = 0uLL;
            v184 = 0uLL;
            v180[0] = &off_1E78B7238;
            v180[1] = &_bambiDomain;
            v181 = 0x40000000;
            v105 = (const ImsResult *)ImsResult::operator<<<char [8]>((uint64_t)v180, "no call");
            ImsResult::ImsResult((ImsResult *)&v186, v105);
          }
          ImsResult::operator=((uint64_t)v193, (uint64_t)&v186);
          ImsResult::~ImsResult((ImsResult *)&v186);
          if (v61)
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v185);
          else
            ImsResult::~ImsResult((ImsResult *)v180);
          if ((*(unsigned int (**)(std::string::size_type, _QWORD))(*(_QWORD *)v193[0].__r_.__value_.__l.__size_
                                                                              + 24))(v193[0].__r_.__value_.__l.__size_, LODWORD(v193[0].__r_.__value_.__r.__words[2])))
          {
            SipSession::generateTerminationResponse((std::__shared_weak_count *)a1, (const ImsResult *)v193, a4);
LABEL_309:
            ImsResult::~ImsResult((ImsResult *)v193);
            goto LABEL_310;
          }
          ImsResult::~ImsResult((ImsResult *)v193);
        }
LABEL_202:
        SipSessionInterface::stack((std::__shared_weak_count *)a1, v193);
        v112 = *(_QWORD *)(v193[0].__r_.__value_.__r.__words[0] + 136);
        v113 = v199;
        v178 = v198;
        v179 = v199;
        if (v199)
        {
          v114 = (unint64_t *)&v199->__shared_owners_;
          do
            v115 = __ldxr(v114);
          while (__stxr(v115 + 1, v114));
        }
        if (BambiClient::callCountExcludingCall(v112, &v178))
        {
          SipSessionInterface::stack((std::__shared_weak_count *)a1, &v186);
          if (*(_BYTE *)(*((_QWORD *)v186 + 17) + 800))
            v116 = v52;
          else
            v116 = 0;
          if (v116 == 1)
          {
            v117 = *(_QWORD *)(a1 + 240);
            if (v117 && (v118 = *(_QWORD *)(v117 + 208)) != 0)
              v119 = *(SipUserAgent **)(v118 + 136);
            else
              v119 = 0;
            v120 = *(_BYTE *)(SipUserAgent::config(v119) + 1155) != 0;
          }
          else
          {
            v120 = 0;
          }
          v121 = v187;
          if (v187)
          {
            v122 = (unint64_t *)&v187->__shared_owners_;
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 - 1, v122));
            if (!v123)
            {
              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
              std::__shared_weak_count::__release_weak(v121);
            }
          }
          v113 = v179;
        }
        else
        {
          v120 = 0;
        }
        if (v113)
        {
          v124 = (unint64_t *)&v113->__shared_owners_;
          do
            v125 = __ldaxr(v124);
          while (__stlxr(v125 - 1, v124));
          if (!v125)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
        v126 = (std::__shared_weak_count *)v193[0].__r_.__value_.__l.__size_;
        if (v193[0].__r_.__value_.__l.__size_)
        {
          v127 = (unint64_t *)(v193[0].__r_.__value_.__l.__size_ + 8);
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        if (v120)
        {
          v129 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v129);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v129 + 8), (uint64_t)"Got INVITE, but in a call and call waiting is disabled", 54);
          *(_BYTE *)(v129 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v129 + 64))(v129, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v129 + 17) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v186, "CallWaitingDisabled");
          SipSessionInterface::terminationReason((std::__shared_weak_count *)a1, (uint64_t)&v186, (BambiCallTerminationReason *)v193);
          SipSession::generateTerminationResponse((SipSession *)a1, (const BambiCallTerminationReason *)v193, a4);
          v130 = v197;
          if (v197)
          {
            v131 = (unint64_t *)&v197->__shared_owners_;
            do
              v132 = __ldaxr(v131);
            while (__stlxr(v132 - 1, v131));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
          v133 = v196;
          if (v196)
          {
            v134 = (unint64_t *)&v196->__shared_owners_;
            do
              v135 = __ldaxr(v134);
            while (__stlxr(v135 - 1, v134));
            if (!v135)
            {
              ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
              std::__shared_weak_count::__release_weak(v133);
            }
          }
          if (v195 < 0)
            operator delete(__p);
          if (v193[2].__r_.__value_.__s.__data_[7] < 0)
            operator delete((void *)v193[1].__r_.__value_.__l.__size_);
          if (v193[1].__r_.__value_.__s.__data_[7] < 0)
            operator delete((void *)v193[0].__r_.__value_.__l.__size_);
          if (v188 < 0)
            operator delete(v186);
          SipSessionInterface::stack((std::__shared_weak_count *)a1, &v186);
          v136 = *((_QWORD *)v186 + 17);
          SipSessionInterface::stack((std::__shared_weak_count *)a1, &v176);
          if (*(char *)(v176 + 4159) < 0)
            std::string::__init_copy_ctor_external(v193, *(const std::string::value_type **)(v176 + 4136), *(_QWORD *)(v176 + 4144));
          else
            v193[0] = *(std::string *)(v176 + 4136);
          v154 = *(_QWORD *)(v136 + 248);
          if (v154)
            (*(void (**)(uint64_t))(*(_QWORD *)v154 + 104))(v154);
          if (SHIBYTE(v193[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v193[0].__r_.__value_.__l.__data_);
          v155 = v177;
          if (v177)
          {
            v156 = (unint64_t *)&v177->__shared_owners_;
            do
              v157 = __ldaxr(v156);
            while (__stlxr(v157 - 1, v156));
            if (!v157)
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v155);
            }
          }
          v158 = v187;
          if (v187)
          {
            v159 = (unint64_t *)&v187->__shared_owners_;
            do
              v160 = __ldaxr(v159);
            while (__stlxr(v160 - 1, v159));
            if (!v160)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
            }
          }
          goto LABEL_310;
        }
        if (v52)
        {
          SipPreconditions::initializeMobileTerminated((SipPreconditions *)(a1 + 1400), (_OWORD *)(a1 + 836), a2);
        }
        else if (!SipSession::confirmed((SipSession *)a1) || *(_BYTE *)(a1 + 857))
        {
          v137 = v191;
          SipSession::confirmed((SipSession *)a1);
          SipPreconditions::updateFromIncomingMessage(a1 + 1400, (std::string *)((char *)v137 + 152), (uint64_t)a2);
        }
        memset(v193, 0, sizeof(v193));
        v138 = (SipStack *)*((_QWORD *)v191 + 82);
        v139 = (std::__shared_weak_count *)*((_QWORD *)v191 + 83);
        v186 = v138;
        v187 = v139;
        if (v139)
        {
          v140 = (unint64_t *)&v139->__shared_owners_;
          do
            v141 = __ldxr(v140);
          while (__stxr(v141 + 1, v140));
        }
        SipOfferAnswer::updateWithIncomingRequest((SipOfferAnswer *)v138, a2, (std::string *)(*a3 + 320), (uint64_t)v193);
        if (v139)
        {
          v142 = (unint64_t *)&v139->__shared_owners_;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
            std::__shared_weak_count::__release_weak(v139);
          }
        }
        if ((*(unsigned int (**)(std::string::size_type, _QWORD))(*(_QWORD *)v193[0].__r_.__value_.__l.__size_
                                                                            + 24))(v193[0].__r_.__value_.__l.__size_, LODWORD(v193[0].__r_.__value_.__r.__words[2])))
        {
          SipSession::generateTerminationResponse((std::__shared_weak_count *)a1, (const ImsResult *)v193, a4);
          goto LABEL_309;
        }
        if (!v52)
        {
          if ((*((_DWORD *)a4 + 22) - 200) > 0x63)
            goto LABEL_303;
          v144 = v191;
LABEL_302:
          SipDialogFork::handleTargetRefresh(v144, a2);
LABEL_303:
          if (*(char *)(a1 + 1399) < 0)
            v168 = *(_QWORD *)(a1 + 1384);
          else
            v168 = *(unsigned __int8 *)(a1 + 1399);
          if (!v168)
          {
            v169 = (char *)SipMessage::header<SipPBambiCallIdHeader>((uint64_t)a2);
            if (v169)
              std::string::operator=((std::string *)(a1 + 1376), (const std::string *)(v169 + 64));
          }
          goto LABEL_309;
        }
        v144 = v191;
        SipDialogFork::updateRouteSet(v191, a2, 0);
        v145 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 240) + 208) + 136);
        v146 = *(_QWORD *)(v145 + 248);
        v147 = *(std::__shared_weak_count **)(v145 + 256);
        v186 = (SipStack *)v146;
        v187 = v147;
        if (v147)
        {
          v148 = (unint64_t *)&v147->__shared_owners_;
          do
            v149 = __ldxr(v148);
          while (__stxr(v149 + 1, v148));
        }
        v150 = *(unsigned __int8 *)(v146 + 4104);
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v186);
        if (!v150)
        {
LABEL_297:
          v162 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 240) + 208) + 136);
          v163 = *(_QWORD *)(v162 + 248);
          v164 = *(std::__shared_weak_count **)(v162 + 256);
          v186 = (SipStack *)v163;
          v187 = v164;
          if (v164)
          {
            v165 = (unint64_t *)&v164->__shared_owners_;
            do
              v166 = __ldxr(v165);
            while (__stxr(v166 + 1, v165));
          }
          v167 = *(unsigned __int8 *)(v163 + 4105);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v186);
          if (v167)
            SipSession::parseSpamHeaders((SipSession *)a1, a2);
          goto LABEL_302;
        }
        SipSession::parseVerstatParams((std::__shared_weak_count *)a1, a2);
        SipSessionInterface::stack((std::__shared_weak_count *)a1, &v186);
        v151 = (ImsPrefs *)SipStack::prefs(v186);
        EnableBrandedCallingKey = (void **)ImsPrefs::getEnableBrandedCallingKey(v151);
        v153 = ImsPrefs::prefWithKey(v151, EnableBrandedCallingKey);
        if (v153)
        {
          if (!(*(unsigned int (**)(void *))(*(_QWORD *)v153 + 40))(v153))
          {
LABEL_276:
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v186);
            goto LABEL_297;
          }
        }
        else if (!*((_BYTE *)EnableBrandedCallingKey + 57))
        {
          goto LABEL_276;
        }
        v161 = *(_DWORD *)(a1 + 1612);
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v186);
        if (v161 == 1)
          SipSession::parseBrandedCallingHeaders((SipSession *)a1, a2);
        goto LABEL_297;
      }
      if ((v53 & 1) != 0)
        goto LABEL_202;
      v73 = SipMessage::body<SipSdpBody>((uint64_t)a2);
      if (v73)
      {
        v74 = *((_QWORD *)v73 + 1);
        v75 = (std::__shared_weak_count *)*((_QWORD *)v73 + 2);
        v193[0].__r_.__value_.__r.__words[0] = v74;
        v193[0].__r_.__value_.__l.__size_ = (std::string::size_type)v75;
        if (v75)
        {
          v76 = (unint64_t *)&v75->__shared_owners_;
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
        if (v74)
        {
          v78 = 0;
LABEL_194:
          if (v75)
          {
            v109 = (unint64_t *)&v75->__shared_owners_;
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
          if (v78)
          {
            v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v111);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v111 + 8), (uint64_t)"Got an empty INVITE, trying to resume the call", 46);
            *(_BYTE *)(v111 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v111 + 64))(v111, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v111 + 17) = 0;
            if (v198)
              BambiCall::handleEmptyInvite(v198);
          }
          goto LABEL_202;
        }
      }
      else
      {
        v75 = 0;
        *(_OWORD *)&v193[0].__r_.__value_.__l.__data_ = 0uLL;
      }
      v106 = *(_QWORD *)(a1 + 240);
      if (v106 && (v107 = *(_QWORD *)(v106 + 208)) != 0)
        v108 = *(SipUserAgent **)(v107 + 136);
      else
        v108 = 0;
      if (*(_BYTE *)(SipUserAgent::config(v108) + 816))
        v78 = 1;
      else
        v78 = SipSession::confirmed((SipSession *)a1);
      goto LABEL_194;
    }
    std::string::basic_string[abi:ne180100]<0>(&v186, "InvalidSdp");
    SipSessionInterface::terminationReason((std::__shared_weak_count *)a1, (uint64_t)&v186, (BambiCallTerminationReason *)v193);
    SipSession::generateTerminationResponse((SipSession *)a1, (const BambiCallTerminationReason *)v193, a4);
    v101 = v197;
    if (v197)
    {
      v102 = (unint64_t *)&v197->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v35 = v196;
    if (!v196)
    {
LABEL_63:
      if (v195 < 0)
        operator delete(__p);
      if (v193[2].__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v193[1].__r_.__value_.__l.__size_);
      if (v193[1].__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v193[0].__r_.__value_.__l.__size_);
      if (v188 < 0)
        operator delete(v186);
      goto LABEL_310;
    }
    v104 = (unint64_t *)&v196->__shared_owners_;
    do
      v37 = __ldaxr(v104);
    while (__stlxr(v37 - 1, v104));
LABEL_61:
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
    goto LABEL_63;
  }
LABEL_310:
  v170 = v192;
  if (v192)
  {
    v171 = (unint64_t *)&v192->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
LABEL_315:
  v173 = v199;
  if (v199)
  {
    v174 = (unint64_t *)&v199->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
}

void sub_1BEF70BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  ImsResult::~ImsResult((ImsResult *)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v45 - 96);
  _Unwind_Resume(a1);
}

void SipSession::handleInviteOrUpdateRequest(uint64_t a1, const SipRequest *a2, _QWORD *a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  BOOL v19;
  BOOL v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  _BOOL4 v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  BambiCall *v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  unsigned __int8 *v40;
  const void *v41;
  char *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  const char *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  const char *v50;
  const void *v51;
  const char *v52;
  const void *v53;
  uint64_t v54;
  uint64_t i;
  const char *v56;
  void *v57;
  SipUriHeader *v58;
  __int128 *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  char *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  unint64_t *p_shared_weak_owners;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  SipUserAgent *v81;
  int v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  SipUserAgent *v90;
  int v91;
  SipUriHeader *v92;
  __int128 *v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  SipUriHeader *v101;
  __int128 *v102;
  void **v103;
  void *v104;
  SipStack *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  SipUserAgent *v112;
  uint64_t v113;
  uint64_t v114;
  ImsPrefs *v115;
  void **IR92PreconditionSupportKey;
  void *v117;
  int v118;
  ImsPrefs *v119;
  void **RTTUpgradeResponseTimeoutMillisecondsKey;
  void *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  _QWORD v140[2];
  _BYTE v141[72];
  _QWORD v142[5];
  SipStack *v143;
  std::__shared_weak_count *v144;
  char *v145;
  std::__shared_weak_count *v146;
  SipStack *v147[2];
  char v148;
  BambiCall *v149;
  std::__shared_weak_count *v150;
  _QWORD v151[2];
  __int128 __p;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  _BYTE v162[24];
  _BYTE *v163;
  _BYTE v164[24];
  _BYTE *v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  if ((SipSession::confirmed((SipSession *)a1) & 1) != 0)
    goto LABEL_13;
  v6 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v7 = v6[23];
  v8 = (v7 & 0x80u) == 0 ? v6[23] : *((_QWORD *)v6 + 1);
  if (v8 != 6)
    goto LABEL_13;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v6, "INVITE", *((_QWORD *)v6 + 1)))
      goto LABEL_13;
LABEL_29:
    std::string::basic_string[abi:ne180100]<0>(&__p, "100rel");
    v19 = SipMessage::supportsOption((uint64_t)a2, (void **)&__p);
    v20 = v19;
    if (SBYTE7(v153) < 0)
    {
      operator delete((void *)__p);
      if (v20)
      {
LABEL_92:
        v39 = 1;
        goto LABEL_62;
      }
    }
    else if (v19)
    {
      goto LABEL_92;
    }
    v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"Incoming INVITE doesn't support 100rel", 38);
    *(_BYTE *)(v54 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v54 + 17) = 0;
    *(_BYTE *)(a1 + 1725) = 0;
    goto LABEL_92;
  }
  if (!v6[23])
    goto LABEL_29;
  v9 = "INVITE";
  while (*v6 == *(unsigned __int8 *)v9)
  {
    ++v6;
    ++v9;
    if (!--v7)
      goto LABEL_29;
  }
LABEL_13:
  v10 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v11 = v10[23];
  if ((v11 & 0x80u) == 0)
    v12 = v10[23];
  else
    v12 = *((_QWORD *)v10 + 1);
  if (v12 != 6)
    goto LABEL_61;
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v10, "INVITE", *((_QWORD *)v10 + 1)))
      goto LABEL_61;
  }
  else if (v10[23])
  {
    v13 = "INVITE";
    while (*v10 == *(unsigned __int8 *)v13)
    {
      ++v10;
      ++v13;
      if (!--v11)
        goto LABEL_24;
    }
    goto LABEL_61;
  }
LABEL_24:
  v14 = SipMessage::body<SipSdpBody>((uint64_t)a2);
  if (v14)
  {
    v16 = *((_QWORD *)v14 + 1);
    v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 2);
    v160 = v16;
    v161 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
  }
  else
  {
    v16 = 0;
    v160 = 0;
    v161 = 0;
  }
  v21 = *(std::__shared_weak_count **)(a1 + 776);
  if (v21 && (v22 = std::__shared_weak_count::lock(v21), (*((_QWORD *)&__p + 1) = v22) != 0))
  {
    v23 = v22;
    v24 = *(_QWORD *)(a1 + 768);
    *(_QWORD *)&__p = v24;
    if (v24)
    {
      if (!*(_BYTE *)(v24 + 745) && v16 != 0)
      {
        for (i = *(_QWORD *)(v16 + 416); i != *(_QWORD *)(v16 + 424); i += 200)
        {
          if (*(_DWORD *)(i + 12) == 4)
          {
            SipSessionInterface::stack((std::__shared_weak_count *)a1, v147);
            v119 = (ImsPrefs *)SipStack::prefs(v147[0]);
            RTTUpgradeResponseTimeoutMillisecondsKey = (void **)ImsPrefs::getRTTUpgradeResponseTimeoutMillisecondsKey(v119);
            v121 = ImsPrefs::prefWithKey(v119, RTTUpgradeResponseTimeoutMillisecondsKey);
            if (v121)
              v122 = (*(uint64_t (**)(void *))(*(_QWORD *)v121 + 56))(v121);
            else
              v122 = *((_DWORD *)RTTUpgradeResponseTimeoutMillisecondsKey + 15);
            v26 = v122 > 0;
            v137 = (std::__shared_weak_count *)v147[1];
            if (v147[1])
            {
              v138 = (unint64_t *)((char *)v147[1] + 8);
              do
                v139 = __ldaxr(v138);
              while (__stlxr(v139 - 1, v138));
              if (!v139)
              {
                ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                std::__shared_weak_count::__release_weak(v137);
              }
            }
            v23 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1))
              goto LABEL_42;
            goto LABEL_47;
          }
        }
      }
    }
    v26 = 0;
LABEL_42:
    v27 = (unint64_t *)&v23->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  else
  {
    v26 = 0;
  }
LABEL_47:
  v29 = v161;
  if (v161)
  {
    v30 = (unint64_t *)&v161->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      if (v26)
        goto LABEL_52;
LABEL_61:
      v39 = 0;
LABEL_62:
      v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)a2 + 4, "Allow");
      if (v40)
      {
        v41 = (const void *)*((_QWORD *)v40 + 5);
        if (v41)
        {
          if (v42)
          {
            if (v42 + 64 != (char *)(*(_QWORD *)(a1 + 240) + 1896))
              std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)(*(_QWORD *)(a1 + 240) + 1896), *((_QWORD **)v42 + 8), (_QWORD *)v42 + 9);
          }
        }
      }
      if ((SipSession::confirmed((SipSession *)a1) & 1) != 0)
        goto LABEL_103;
      v43 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
      v44 = v43[23];
      v45 = *((_QWORD *)v43 + 1);
      if ((v44 & 0x80u) == 0)
        v46 = v43[23];
      else
        v46 = *((_QWORD *)v43 + 1);
      if (v46 == 5)
      {
        if ((v44 & 0x80) == 0)
        {
          if (v43[23])
          {
            v50 = "PRACK";
            while (*v43 == *(unsigned __int8 *)v50)
            {
              ++v43;
              ++v50;
              if (!--v44)
                goto LABEL_99;
            }
LABEL_103:
            v159 = 0;
            v157 = 0u;
            v158 = 0u;
            v155 = 0u;
            v156 = 0u;
            v153 = 0u;
            v154 = 0u;
            __p = 0u;
            SipResponse::SipResponse((SipResponse *)&__p, 200, a2);
            v60 = (std::__shared_weak_count *)a3[1];
            v151[0] = *a3;
            v151[1] = v60;
            if (v60)
            {
              v61 = (unint64_t *)&v60->__shared_owners_;
              do
                v62 = __ldxr(v61);
              while (__stxr(v62 + 1, v61));
            }
            SipSession::generateResponseForInviteOrUpdateRequest(a1, a2, v151, (SipResponse *)&__p);
            if (!v60)
              goto LABEL_110;
            v63 = (unint64_t *)&v60->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
              if (!v39)
                goto LABEL_215;
            }
            else
            {
LABEL_110:
              if (!v39)
                goto LABEL_215;
            }
            if ((DWORD2(v157) - 200) <= 0x63)
            {
              v149 = 0;
              v150 = 0;
              v65 = *(std::__shared_weak_count **)(a1 + 776);
              if (v65)
              {
                v150 = std::__shared_weak_count::lock(v65);
                if (v150)
                  v149 = *(BambiCall **)(a1 + 768);
              }
              if (*(_BYTE *)(a1 + 1320))
              {
                if (*(_QWORD *)(a1 + 1136))
                  goto LABEL_139;
                v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v66);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)"handleInviteOrUpdateRequest couldn't find the attached lazuli session", 69);
                *(_BYTE *)(v66 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              }
              else
              {
                if (v149)
                {
                  if (BambiCall::shouldFakeLocalQOS(v149))
                  {
                    LoggableString::LoggableString((LoggableString *)v147, "fakeLocalQoSForMobileTerminated");
                    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v143, (_QWORD *)(a1 + 176));
                    v67 = (char *)v143 + 104;
                    if (!v143)
                      v67 = 0;
                    v145 = v67;
                    v146 = v144;
                    v143 = 0;
                    v144 = 0;
                    v142[0] = MEMORY[0x1E0C809B0];
                    v142[1] = 0x40000000;
                    v142[2] = ___ZN10SipSession27handleInviteOrUpdateRequestERK10SipRequestNSt3__110shared_ptrI20SipServerTransactionEE_block_invoke;
                    v142[3] = &__block_descriptor_tmp_173;
                    v142[4] = a1;
                    SipLockable::performBlock(a1 + 104, (__int128 *)v147, (uint64_t *)&v145, v142);
                    v68 = v146;
                    if (v146)
                    {
                      v69 = (unint64_t *)&v146->__shared_owners_;
                      do
                        v70 = __ldaxr(v69);
                      while (__stlxr(v70 - 1, v69));
                      if (!v70)
                      {
                        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                        std::__shared_weak_count::__release_weak(v68);
                      }
                    }
                    v71 = v144;
                    if (v144)
                    {
                      v72 = (unint64_t *)&v144->__shared_owners_;
                      do
                        v73 = __ldaxr(v72);
                      while (__stlxr(v73 - 1, v72));
                      if (!v73)
                      {
                        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                        std::__shared_weak_count::__release_weak(v71);
                      }
                    }
                    if (v148 < 0)
                      operator delete(v147[0]);
LABEL_139:
                    v75 = *(_QWORD *)(a1 + 176);
                    v74 = *(std::__shared_weak_count **)(a1 + 184);
                    if (v74)
                    {
                      p_shared_weak_owners = (unint64_t *)&v74->__shared_weak_owners_;
                      do
                        v77 = __ldxr(p_shared_weak_owners);
                      while (__stxr(v77 + 1, p_shared_weak_owners));
                      do
                        v78 = __ldxr(p_shared_weak_owners);
                      while (__stxr(v78 + 1, p_shared_weak_owners));
                    }
                    v79 = *(_QWORD *)(a1 + 240);
                    if (v79 && (v80 = *(_QWORD *)(v79 + 208)) != 0)
                      v81 = *(SipUserAgent **)(v80 + 136);
                    else
                      v81 = 0;
                    v82 = *(_DWORD *)(SipUserAgent::config(v81) + 12);
                    if (v82)
                    {
                      if (v74)
                      {
                        v83 = (unint64_t *)&v74->__shared_weak_owners_;
                        do
                          v84 = __ldxr(v83);
                        while (__stxr(v84 + 1, v83));
                      }
                      v165 = 0;
                      v85 = operator new(0x20uLL);
                      *v85 = &off_1E78CB110;
                      v85[1] = a1;
                      v85[2] = v75;
                      v85[3] = v74;
                      v165 = v85;
                      SipTimerContainer::startTimer((_QWORD *)(a1 + 264), (uint64_t)"WaitForRingingTimer", (uint64_t)v164, 1000 * v82, 0);
                      v86 = v165;
                      if (v165 == v164)
                      {
                        v87 = 4;
                        v86 = v164;
                        goto LABEL_155;
                      }
                      if (v165)
                      {
                        v87 = 5;
LABEL_155:
                        (*(void (**)(void))(*v86 + 8 * v87))();
                      }
                    }
                    v88 = *(_QWORD *)(a1 + 240);
                    if (v88 && (v89 = *(_QWORD *)(v88 + 208)) != 0)
                      v90 = *(SipUserAgent **)(v89 + 136);
                    else
                      v90 = 0;
                    v91 = *(_DWORD *)(SipUserAgent::config(v90) + 20);
                    if (v91
                      && ((v92 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2)) == 0
                        ? (v93 = &ims::kEmptyString)
                        : (v93 = SipUriHeader::tag(v92)),
                          SipPreconditions::preconditionsEnabled(a1 + 1400, (void **)v93)
                       || SipSession::requireQosBeforeRinging((SipSession *)a1)))
                    {
                      if (v74)
                      {
                        v94 = (unint64_t *)&v74->__shared_weak_owners_;
                        do
                          v95 = __ldxr(v94);
                        while (__stxr(v95 + 1, v94));
                      }
                      v163 = 0;
                      v96 = operator new(0x20uLL);
                      *v96 = &off_1E78CB110;
                      v96[1] = a1;
                      v96[2] = v75;
                      v96[3] = v74;
                      v163 = v96;
                      v97 = v163;
                      if (v163 == v162)
                      {
                        v98 = 4;
                        v97 = v162;
                      }
                      else
                      {
                        if (!v163)
                          goto LABEL_175;
                        v98 = 5;
                      }
                      (*(void (**)(void))(*v97 + 8 * v98))();
                    }
                    else
                    {
                      v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v99);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v99 + 8), (uint64_t)"no local qos timer", 18);
                      *(_BYTE *)(v99 + 17) = 0;
                      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v99 + 64))(v99, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      *(_BYTE *)(v99 + 17) = 0;
                    }
LABEL_175:
                    v147[0] = 0;
                    v147[1] = 0;
                    v100 = *(_QWORD *)(a1 + 240);
                    v101 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
                    if (v101)
                      v102 = SipUriHeader::tag(v101);
                    else
                      v102 = &ims::kEmptyString;
                    v103 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v100 + 2040, (void **)v102);
                    if ((void **)(v100 + 2048) == v103)
                    {
                      v104 = 0;
                      v147[0] = 0;
                      v147[1] = 0;
                    }
                    else
                    {
                      v104 = v103[7];
                      v105 = (SipStack *)v103[8];
                      v147[0] = (SipStack *)v104;
                      v147[1] = v105;
                      if (v105)
                      {
                        v106 = (unint64_t *)((char *)v105 + 8);
                        do
                          v107 = __ldxr(v106);
                        while (__stxr(v107 + 1, v106));
                      }
                    }
                    if (SipPreconditions::preconditionsActiveInFork((void **)(a1 + 1400), (void **)v104 + 19))
                    {
                      v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v108);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v108 + 8), (uint64_t)"preconditions are active. Sending Session Progress.", 51);
                      *(_BYTE *)(v108 + 17) = 0;
                      v109 = (_BYTE *)(v108 + 17);
                      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v108 + 64))(v108, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    }
                    else
                    {
                      v110 = *(_QWORD *)(a1 + 240);
                      if (v110 && (v111 = *(_QWORD *)(v110 + 208)) != 0)
                        v112 = *(SipUserAgent **)(v111 + 136);
                      else
                        v112 = 0;
                      if (*(_BYTE *)(SipUserAgent::config(v112) + 793))
                      {
                        v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v113);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v113 + 8), (uint64_t)"always sending Session Progress", 31);
                        *(_BYTE *)(v113 + 17) = 0;
                        v109 = (_BYTE *)(v113 + 17);
                        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v113 + 64))(v113, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      }
                      else if (SipSession::requireQosBeforeRinging((SipSession *)a1))
                      {
                        v114 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v114);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v114 + 8), (uint64_t)"sending Session Progress to establish QoS before ringing", 56);
                        *(_BYTE *)(v114 + 17) = 0;
                        v109 = (_BYTE *)(v114 + 17);
                        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v114 + 64))(v114, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      }
                      else
                      {
                        if (!SipMessage::hasPreconditions(a2)
                          || ((SipSessionInterface::stack((std::__shared_weak_count *)a1, &v143),
                               v115 = (ImsPrefs *)SipStack::prefs(v143),
                               IR92PreconditionSupportKey = (void **)ImsPrefs::getIR92PreconditionSupportKey(v115),
                               (v117 = ImsPrefs::prefWithKey(v115, IR92PreconditionSupportKey)) == 0)
                            ? (v118 = *((unsigned __int8 *)IR92PreconditionSupportKey + 57))
                            : (v118 = (*(uint64_t (**)(void *))(*(_QWORD *)v117 + 40))(v117)),
                              std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v143),
                              !v118))
                        {
                          if (!*(_BYTE *)(a1 + 1320))
                          {
                            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v147);
                            if (v74)
                            {
                              std::__shared_weak_count::__release_weak(v74);
                              std::__shared_weak_count::__release_weak(v74);
                            }
                            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v149);
                            goto LABEL_223;
                          }
                          goto LABEL_203;
                        }
                        v123 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v123);
                        v124 = ImsOutStream::operator<<(v123, "Preconditions are present in initial INVITE.  Sending Session Progress.");
                        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v124 + 64))(v124, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                        v109 = (_BYTE *)(v124 + 17);
                      }
                    }
                    *v109 = 0;
                    DWORD2(v157) = 183;
LABEL_203:
                    v125 = (std::__shared_weak_count *)v147[1];
                    if (v147[1])
                    {
                      v126 = (unint64_t *)((char *)v147[1] + 8);
                      do
                        v127 = __ldaxr(v126);
                      while (__stlxr(v127 - 1, v126));
                      if (!v127)
                      {
                        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                        std::__shared_weak_count::__release_weak(v125);
                      }
                    }
                    if (v74)
                    {
                      std::__shared_weak_count::__release_weak(v74);
                      std::__shared_weak_count::__release_weak(v74);
                    }
                    v128 = v150;
                    if (v150)
                    {
                      v129 = (unint64_t *)&v150->__shared_owners_;
                      do
                        v130 = __ldaxr(v129);
                      while (__stlxr(v130 - 1, v129));
                      if (!v130)
                      {
                        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                        std::__shared_weak_count::__release_weak(v128);
                      }
                    }
                    goto LABEL_215;
                  }
                  if (v149)
                    goto LABEL_139;
                }
                v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v66);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)"handleInviteOrUpdateRequest couldn't find the attached call", 59);
                *(_BYTE *)(v66 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              }
              *(_BYTE *)(v66 + 17) = 0;
              goto LABEL_139;
            }
LABEL_215:
            v131 = *a3;
            v132 = (std::__shared_weak_count *)a3[1];
            v140[0] = v131;
            v140[1] = v132;
            if (v132)
            {
              v133 = (unint64_t *)&v132->__shared_owners_;
              do
                v134 = __ldxr(v133);
              while (__stxr(v134 + 1, v133));
            }
            SipSession::sendResponseToInviteOrUpdateRequest((ImsResult *)v141, a1, (SipResponse *)&__p, v140);
            ImsResult::~ImsResult((ImsResult *)v141);
            if (v132)
            {
              v135 = (unint64_t *)&v132->__shared_owners_;
              do
                v136 = __ldaxr(v135);
              while (__stlxr(v136 - 1, v135));
              if (!v136)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
LABEL_223:
            *(_QWORD *)&__p = off_1E78E40E8;
            if (SHIBYTE(v159) < 0)
              operator delete((void *)v158);
            SipMessage::~SipMessage((SipMessage *)&__p);
            return;
          }
LABEL_99:
          v57 = SipMessage::header<SipPEarlyMediaHeader>((uint64_t)a2);
          v58 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
          if (v58)
            v59 = SipUriHeader::tag(v58);
          else
            v59 = &ims::kEmptyString;
          SipSession::processEarlyMediaHeader(a1, (uint64_t)v57, (std::string *)v59);
          goto LABEL_103;
        }
        v53 = *(const void **)v43;
        v52 = "PRACK";
      }
      else
      {
        if (v46 != 6)
          goto LABEL_103;
        if ((v44 & 0x80) == 0)
        {
          if (v43[23])
          {
            v47 = "INVITE";
            v48 = v43;
            v49 = v43[23];
            while (*v48 == *(unsigned __int8 *)v47)
            {
              ++v48;
              ++v47;
              if (!--v49)
                goto LABEL_99;
            }
            v56 = "UPDATE";
            while (*v43 == *(unsigned __int8 *)v56)
            {
              ++v43;
              ++v56;
              if (!--v44)
                goto LABEL_99;
            }
            goto LABEL_103;
          }
          goto LABEL_99;
        }
        v51 = *(const void **)v43;
        if (!memcmp(*(const void **)v43, "INVITE", v45))
          goto LABEL_99;
        v52 = "UPDATE";
        v53 = v51;
      }
      if (memcmp(v53, v52, v45))
        goto LABEL_103;
      goto LABEL_99;
    }
  }
  if (!v26)
    goto LABEL_61;
LABEL_52:
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"Handling RTT upgrade request", 28);
  *(_BYTE *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v32 + 17) = 0;
  SipTypedStateMachine<SipSessionState>::transitionToState((_QWORD *)(a1 + 656), 7);
  v33 = *(std::__shared_weak_count **)(a1 + 776);
  if (v33)
  {
    v34 = std::__shared_weak_count::lock(v33);
    *((_QWORD *)&__p + 1) = v34;
    if (v34)
    {
      v35 = v34;
      v36 = *(BambiCall **)(a1 + 768);
      *(_QWORD *)&__p = v36;
      if (v36)
        BambiCall::textSessionDetected(v36);
      v37 = (unint64_t *)&v35->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
}

void sub_1BEF71C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v45 - 152);
  _Unwind_Resume(a1);
}

void ___ZN10SipSession27handleInviteOrUpdateRequestERK10SipRequestNSt3__110shared_ptrI20SipServerTransactionEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _WORD *v3;
  void *__p;
  void *v5;
  _WORD *v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 64))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Faking local QoS notification for MT Call", 41);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = operator new(2uLL);
  __p = v3;
  *v3 = 0;
  v5 = v3 + 1;
  v6 = v3 + 1;
  SipSession::handleQualityOfServiceEstablished(v1, 0xFFFFFFFF, 1, (uint64_t)&__p, 1);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_1BEF71EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SipOfferAnswer::localSdpPending(SipOfferAnswer *this, std::__shared_weak_count *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BOOL8 v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (SipOfferAnswerExchange::empty(this))
  {
    v6 = 1;
    if (!a2)
      return v6;
  }
  else
  {
    v6 = SipOfferAnswerExchange::localAnswerPending(this);
    if (!a2)
      return v6;
  }
  v7 = (unint64_t *)&a2->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
    std::__shared_weak_count::__release_weak(a2);
  }
  return v6;
}

void sub_1BEF71F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSession::generateTerminationResponse(SipSession *this, const BambiCallTerminationReason *a2, SipResponse *a3)
{
  uint64_t v5;
  uint64_t v6;
  BambiCallTerminationReason *v7;

  if (a3)
  {
    *((_DWORD *)a3 + 22) = *((_DWORD *)a2 + 15);
    std::string::operator=((std::string *)a3 + 4, (const std::string *)((char *)a2 + 32));
    v5 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Generating response from call termination reason: ", 50);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 32))(v5, (char *)a2 + 8);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    v6 = *((_QWORD *)this + 194);
    if (v6)
    {
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v6 + 112);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v6 + 96);
      if (*(char *)(v6 + 95) < 0)
        operator delete(*(void **)(v6 + 72));
      if (*(char *)(v6 + 55) < 0)
        operator delete(*(void **)(v6 + 32));
      if (*(char *)(v6 + 31) < 0)
        operator delete(*(void **)(v6 + 8));
      MEMORY[0x1C3B87100](v6, 0x1032C40D4AF1F8FLL);
    }
    v7 = (BambiCallTerminationReason *)operator new();
    BambiCallTerminationReason::BambiCallTerminationReason(v7, a2);
    *((_QWORD *)this + 194) = v7;
  }
}

void sub_1BEF720A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1032C40D4AF1F8FLL);
  _Unwind_Resume(a1);
}

void SipSession::generateTerminationResponse(std::__shared_weak_count *this, const ImsResult *a2, SipResponse *a3)
{
  const void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *__p;
  char v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;

  v6 = (const void *)*((_QWORD *)a2 + 5);
  if (v6
  {
    SipSessionInterface::terminationReason(this, (uint64_t)v7 + 8, (BambiCallTerminationReason *)v15);
    SipSession::generateTerminationResponse((SipSession *)this, (const BambiCallTerminationReason *)v15, a3);
    v8 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = v22;
    if (v22)
    {
      v12 = (unint64_t *)&v22->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v21 < 0)
      operator delete(__p);
    if (v19 < 0)
      operator delete(v18);
    if (v17 < 0)
      operator delete(v16);
  }
  else if (a3)
  {
    v14 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].~__shared_weak_count_0)(this);
    ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Unable to generate call termination reason from result, using ", 62);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" directly.", 10);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    SipResponse::setStatusFromImsResult(a3, a2);
  }
}

void sub_1BEF72290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BambiCallTerminationReason::~BambiCallTerminationReason((void **)va);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [8]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF72324(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipSession::parseVerstatParams(std::__shared_weak_count *this, const SipRequest *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  ImsPrefs *v7;
  void **EnableBrandedCallingKey;
  void *v9;
  int v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void **p_shared_weak_owners;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void **v22;
  void ***v23;
  std::string::size_type v24;
  void **v25;
  __int128 *v26;
  uint64_t v27;
  char v28;
  void **v29;
  __int128 *v30;
  void **v31;
  __int128 *v32;
  char *v33;
  char *v34;
  void **v35;
  void **v36;
  __int128 *v37;
  std::string::size_type v38;
  std::string v39;
  void *__p;
  uint64_t *v41;
  uint64_t v42;
  std::string v43;

  memset(&v43, 0, sizeof(v43));
  v4 = SipMessage::header<SipPAssertedIdentityHeader>((uint64_t)a2);
  v5 = v4;
  if (!v4 || v4[9] == v4[10])
    goto LABEL_48;
  v6 = (uint64_t)(v4 + 8);
  __p = 0;
  v41 = 0;
  v42 = 0;
  SipRouteSet::allParams((uint64_t)(v4 + 8), (char **)&__p);
  SipSessionInterface::stack(this, &v39);
  v7 = (ImsPrefs *)SipStack::prefs((SipStack *)v39.__r_.__value_.__l.__data_);
  EnableBrandedCallingKey = (void **)ImsPrefs::getEnableBrandedCallingKey(v7);
  v9 = ImsPrefs::prefWithKey(v7, EnableBrandedCallingKey);
  if (v9)
    v10 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 40))(v9);
  else
    v10 = *((_BYTE *)EnableBrandedCallingKey + 57) != 0;
  size = (std::__shared_weak_count *)v39.__r_.__value_.__l.__size_;
  if (!v39.__r_.__value_.__l.__size_)
    goto LABEL_10;
  v12 = (unint64_t *)(v39.__r_.__value_.__l.__size_ + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if (v10)
      goto LABEL_11;
  }
  else
  {
LABEL_10:
    if (v10)
    {
LABEL_11:
      v14 = (uint64_t *)v5[9];
      if (v14 == (uint64_t *)v5[10])
        v15 = 0;
      else
        v15 = *v14;
      ims::removeQuotes(v15 + 200, &v39);
      p_shared_weak_owners = (void **)&this[69].__shared_weak_owners_;
      if (SHIBYTE(this[70].__shared_owners_) < 0)
        operator delete(*p_shared_weak_owners);
      *(_OWORD *)p_shared_weak_owners = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
      this[70].__shared_owners_ = v39.__r_.__value_.__r.__words[2];
    }
  }
  v17 = (uint64_t *)__p;
  v18 = v41;
  if (__p != v41)
  {
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v20 = v19 + 8;
        v21 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v19 + 8, (void **)"verstat");
        v22 = (void **)(v19 + 16);
        if (v22 != v21)
        {
          v29 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v20, (void **)"verstat");
          if (v22 == v29)
            v30 = &ims::kEmptyString;
          else
            v30 = (__int128 *)(v29 + 7);
          SipSession::setVerstatValueFrom((uint64_t)this, (uint64_t)v30, (uint64_t)"P-Asserted-Identity");
          if (__p)
          {
            v41 = (uint64_t *)__p;
            operator delete(__p);
          }
          goto LABEL_58;
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }
  memset(&v39, 0, sizeof(v39));
  SipRouteSet::allHops(v6, &v39.__r_.__value_.__l.__data_);
  v24 = v39.__r_.__value_.__l.__size_;
  v23 = (void ***)v39.__r_.__value_.__r.__words[0];
  if (v39.__r_.__value_.__r.__words[0] == v39.__r_.__value_.__l.__size_)
  {
    v28 = 1;
    if (v39.__r_.__value_.__r.__words[0])
      goto LABEL_44;
    goto LABEL_45;
  }
  while (1)
  {
    v25 = *v23;
    if (!*v23)
      goto LABEL_29;
    if (v25 + 10 != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v25 + 9), (void **)"verstat"))break;
    v26 = SipUri::verstatLevel((SipUri *)v25);
    v27 = *((unsigned __int8 *)v26 + 23);
    if ((v27 & 0x80u) != 0)
      v27 = *((_QWORD *)v26 + 1);
    if (v27)
    {
      v32 = SipUri::verstatLevel((SipUri *)v25);
      goto LABEL_42;
    }
LABEL_29:
    if (++v23 == (void ***)v24)
    {
      v28 = 1;
      goto LABEL_43;
    }
  }
  v31 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v25 + 9), (void **)"verstat");
  if (v25 + 10 == v31)
    v32 = &ims::kEmptyString;
  else
    v32 = (__int128 *)(v31 + 7);
LABEL_42:
  SipSession::setVerstatValueFrom((uint64_t)this, (uint64_t)v32, (uint64_t)"P-Asserted-Identity");
  v28 = 0;
LABEL_43:
  v23 = (void ***)v39.__r_.__value_.__r.__words[0];
  if (v39.__r_.__value_.__r.__words[0])
  {
LABEL_44:
    v39.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
    operator delete(v23);
  }
LABEL_45:
  if (__p)
  {
    v41 = (uint64_t *)__p;
    operator delete(__p);
  }
  if ((v28 & 1) != 0)
  {
LABEL_48:
    v33 = (char *)SipMessage::header<SipFromHeader>((uint64_t)a2);
    v34 = v33;
    if (v33)
    {
      v35 = (void **)(v33 + 80);
      if (v33 + 80 == (char *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v33 + 72), (void **)"verstat"))
      {
        v37 = SipUri::verstatLevel((SipUri *)(v34 + 104));
      }
      else
      {
        v36 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v34 + 72), (void **)"verstat");
        if (v35 == v36)
          v37 = &ims::kEmptyString;
        else
          v37 = (__int128 *)(v36 + 7);
      }
      std::string::operator=(&v43, (const std::string *)v37);
      v38 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v38 = v43.__r_.__value_.__l.__size_;
      if (v38)
        SipSession::setVerstatValueFrom((uint64_t)this, (uint64_t)&v43, (uint64_t)&SipHeader::kHeaderFrom);
    }
  }
LABEL_58:
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
}

void sub_1BEF726D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void *SipSession::parseBrandedCallingHeaders(SipSession *this, const SipRequest *a2)
{
  void *result;
  uint64_t v4;
  void **v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;

  result = SipMessage::header<SipCallInfoHeader>((uint64_t)a2);
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)result + 72, (void **)"purpose");
    if ((void **)(v4 + 80) == v5)
      v6 = &ims::kEmptyString;
    else
      v6 = (__int128 *)(v5 + 7);
    v7 = *((unsigned __int8 *)v6 + 23);
    if ((v7 & 0x80u) == 0)
      v8 = *((unsigned __int8 *)v6 + 23);
    else
      v8 = *((_QWORD *)v6 + 1);
    if (v8 != 4)
      goto LABEL_17;
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, "icon", *((_QWORD *)v6 + 1)))
      {
LABEL_17:
        v10 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Call-Info Branded Calling header received [imageUrl=", 52);
        *(_BYTE *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 32))(v10, (char *)this + 1648);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" companyName=", 13);
        *(_BYTE *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 32))(v10, (char *)this + 1672);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v10 + 17) = 0;
        result = (void *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v10 + 17) = 0;
        return result;
      }
    }
    else if (*((_BYTE *)v6 + 23))
    {
      v9 = "icon";
      while (*(unsigned __int8 *)v6 == *(unsigned __int8 *)v9)
      {
        v6 = (__int128 *)((char *)v6 + 1);
        ++v9;
        if (!--v7)
          goto LABEL_16;
      }
      goto LABEL_17;
    }
LABEL_16:
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 40))(v4, (char *)this + 1648);
    ims::chomp((std::string *)((char *)this + 1648), "<>", 3);
    goto LABEL_17;
  }
  return result;
}

void SipSession::parseSpamHeaders(SipSession *this, const SipRequest *a2)
{
  unsigned __int8 *v4;
  const void *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **v11;
  void **v12;
  const std::string *v13;
  void **v14;
  const std::string *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void **v20;
  void **v21;
  const std::string *v22;
  void **v23;
  const std::string *v24;
  std::string::size_type size;
  uint64_t v26;
  uint64_t v27;
  SipUserAgent *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type v31;
  uint64_t v32;
  uint64_t v33;
  SipUserAgent *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  char *v39;
  SipDialog *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void **v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::string __p;
  std::string v54;
  std::string v55;

  memset(&v55, 0, sizeof(v55));
  memset(&v54, 0, sizeof(v54));
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)a2 + 4, (unsigned __int8 *)&SipHeader::kHeaderPComNameIdReputation);
  if (v4)
  {
    v5 = (const void *)*((_QWORD *)v4 + 5);
    if (v5)
    {
      if (v6)
      {
        v7 = v6;
        v8 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"P-Com SPAM header received", 26);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
        v9 = (uint64_t)(v7 + 72);
        v10 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v7 + 72), (void **)"ccat");
        v11 = (void **)(v7 + 80);
        if (v11 != v10)
        {
          v12 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9, (void **)"ccat");
          if (v11 == v12)
            v13 = (const std::string *)&ims::kEmptyString;
          else
            v13 = (const std::string *)(v12 + 7);
          std::string::operator=(&v55, v13);
        }
        if (v11 != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9, (void **)"urep"))
        {
          v14 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9, (void **)"urep");
          if (v11 == v14)
            v15 = (const std::string *)&ims::kEmptyString;
          else
            v15 = (const std::string *)(v14 + 7);
          std::string::operator=(&v54, v15);
        }
      }
    }
  }
  v16 = (char *)SipMessage::header<SipCallInfoHeader>((uint64_t)a2);
  if (v16)
  {
    v17 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Call-Info SPAM header received", 30);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    v18 = (uint64_t)(v16 + 72);
    v19 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v16 + 72), (void **)"type");
    v20 = (void **)(v16 + 80);
    if (v20 != v19)
    {
      v21 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v18, (void **)"type");
      if (v20 == v21)
        v22 = (const std::string *)&ims::kEmptyString;
      else
        v22 = (const std::string *)(v21 + 7);
      std::string::operator=(&v55, v22);
    }
    if (v20 != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v18, (void **)"confidence"))
    {
      v23 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v18, (void **)"confidence");
      if (v20 == v23)
        v24 = (const std::string *)&ims::kEmptyString;
      else
        v24 = (const std::string *)(v23 + 7);
      std::string::operator=(&v54, v24);
    }
  }
  size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v55.__r_.__value_.__l.__size_;
  if (size)
  {
    v26 = *((_QWORD *)this + 30);
    if (v26 && (v27 = *(_QWORD *)(v26 + 208)) != 0)
      v28 = *(SipUserAgent **)(v27 + 136);
    else
      v28 = 0;
    v29 = SipUserAgent::config(v28);
    *((_DWORD *)this + 404) = SpamCategoryMap::categoryForString(v29 + 1224, (uint64_t)&v55);
    v30 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"Found spam category ", 20);
    *(_BYTE *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v30 + 32))(v30, &v55);
    *(_BYTE *)(v30 + 17) = 0;
    ims::toString<ims::SpamCategory>((int *)this + 404, &__p);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v30 + 32))(v30, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"')", 2);
    *(_BYTE *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v30 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v31 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v31 = v54.__r_.__value_.__l.__size_;
  if (v31)
  {
    v32 = *((_QWORD *)this + 30);
    if (v32 && (v33 = *(_QWORD *)(v32 + 208)) != 0)
      v34 = *(SipUserAgent **)(v33 + 136);
    else
      v34 = 0;
    v35 = SipUserAgent::config(v34);
    __p.__r_.__value_.__r.__words[0] = 0;
    v36 = ims::strToLong((uint64_t *)&v54, (uint64_t *)&__p) ? LODWORD(__p.__r_.__value_.__l.__data_) : 0;
    *((_DWORD *)this + 405) = SpamRiskMap::classifyRisk((SpamRiskMap *)(v35 + 1248), v36);
    v37 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"Found spam risk ", 16);
    *(_BYTE *)(v37 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v37 + 32))(v37, &v54);
    *(_BYTE *)(v37 + 17) = 0;
    v38 = *((_DWORD *)this + 405) - 1;
    v39 = v38 > 2 ? "none" : off_1E78CB358[v38];
    std::string::basic_string[abi:ne180100]<0>(&__p, v39);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v37 + 32))(v37, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"')", 2);
    *(_BYTE *)(v37 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v37 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v40 = (SipDialog *)*((_QWORD *)this + 30);
  v41 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(p_shared_owners);
    while (__stxr(v43 + 1, p_shared_owners));
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (v44)
    {
      if (!v40)
        goto LABEL_70;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if (!v40)
        goto LABEL_70;
    }
    v40 = (SipDialog *)*((_QWORD *)this + 30);
    v45 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
    v52 = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
  }
  else
  {
    if (!v40)
      goto LABEL_70;
    v52 = 0;
  }
  SipDialog::dialogId(v40, &__p);
  v48 = (void **)((char *)this + 1624);
  if (*((char *)this + 1647) < 0)
    operator delete(*v48);
  *(_OWORD *)v48 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 205) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (v52)
  {
    v49 = (unint64_t *)&v52->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v51 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)"Using dialog-id ", 16);
  *(_BYTE *)(v51 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v51 + 32))(v51, (char *)this + 1624);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v51 + 17) = 0;
LABEL_70:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
}

void sub_1BEF72F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipPBambiCallIdHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "P-Bambi-Call-ID");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

void SipSession::setVerstatValueFrom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  int v8;
  void *v9;
  const char *v10;
  int v11;
  int v12;
  const char *v13;
  int v14;
  void *v15;
  const char *v16;
  int v17;
  int v18;
  const char *v19;
  int v20;
  void *v21;
  const char *v22;
  int v23;
  int v24;
  int v25;
  _QWORD v26[2];
  char v27;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"found verstat parameter '", 25);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"' in ", 5);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" header", 7);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  *(_BYTE *)(a1 + 1608) = 1;
  std::string::basic_string[abi:ne180100]<0>(v26, "TN-Validation-Passed");
  if (*(char *)(a2 + 23) >= 0)
    v7 = (const char *)a2;
  else
    v7 = *(const char **)a2;
  v8 = v27;
  v9 = (void *)v26[0];
  if (v27 >= 0)
    v10 = (const char *)v26;
  else
    v10 = (const char *)v26[0];
  v11 = strcasecmp(v7, v10);
  v12 = v11;
  if ((v8 & 0x80000000) == 0)
  {
    if (v11)
      goto LABEL_9;
LABEL_27:
    v25 = 1;
LABEL_30:
    *(_DWORD *)(a1 + 1612) = v25;
    return;
  }
  operator delete(v9);
  if (!v12)
    goto LABEL_27;
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(v26, "TN-Validation-Failed");
  if (*(char *)(a2 + 23) >= 0)
    v13 = (const char *)a2;
  else
    v13 = *(const char **)a2;
  v14 = v27;
  v15 = (void *)v26[0];
  if (v27 >= 0)
    v16 = (const char *)v26;
  else
    v16 = (const char *)v26[0];
  v17 = strcasecmp(v13, v16);
  v18 = v17;
  if (v14 < 0)
  {
    operator delete(v15);
    if (v18)
      goto LABEL_17;
    goto LABEL_29;
  }
  if (!v17)
  {
LABEL_29:
    v25 = 2;
    goto LABEL_30;
  }
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(v26, "No-TN-Validation");
  if (*(char *)(a2 + 23) >= 0)
    v19 = (const char *)a2;
  else
    v19 = *(const char **)a2;
  v20 = v27;
  v21 = (void *)v26[0];
  if (v27 >= 0)
    v22 = (const char *)v26;
  else
    v22 = (const char *)v26[0];
  v23 = strcasecmp(v19, v22);
  v24 = v23;
  if (v20 < 0)
  {
    operator delete(v21);
    if (v24)
      goto LABEL_25;
  }
  else if (v23)
  {
LABEL_25:
    *(_BYTE *)(a1 + 1608) = 0;
    return;
  }
  *(_DWORD *)(a1 + 1612) = 0;
}

void *SipMessage::header<SipCallInfoHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "Call-Info");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

void *SipMessage::header<SipFromHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "From");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

void SipSession::sendUpdate(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ImsResult *v6;
  const char *v7;
  const char *v8;
  int v9;
  SipRequest *RequestInDialog;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  int v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 264))(a1))
  {
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    v18 = 1073741826;
    v6 = (ImsResult *)ImsResult::operator<<<char [45]>((uint64_t)__p, "can't send an UPDATE in a terminated session");
    ImsLogContainer::logResult((ImsLogContainer *)a1, v6);
    ImsResult::ImsResult((ImsResult *)a3, v6);
    ImsResult::~ImsResult((ImsResult *)__p);
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0)
      v7 = (const char *)a2;
    else
      v7 = *(const char **)a2;
    if (byte_1ED70C84F >= 0)
      v8 = (const char *)&SipSession::kUpdateTypeEmergencyLocationUpdate;
    else
      v8 = (const char *)SipSession::kUpdateTypeEmergencyLocationUpdate;
    v9 = strcasecmp(v7, v8);
    RequestInDialog = SipDialog::createRequestInDialog(a1[30], (const std::string *)"UPDATE", v9 == 0);
    if (!v9)
      SipSession::addLocationToMessage((SipSession *)a1, RequestInDialog);
    v15 = 0;
    v16 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_23_1);
    SipSession::sendRequest(RequestInDialog, (uint64_t)a1, (uint64_t)__p, &v15);
    if (v19 < 0)
      operator delete(__p[0]);
    if (v15)
    {
      __p[0] = "UpdateType";
      v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v15 + 376), (void **)"UpdateType", (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      std::string::operator=((std::string *)(v11 + 7), (const std::string *)a2);
    }
    if (RequestInDialog)
      (*(void (**)(SipRequest *))(*(_QWORD *)RequestInDialog + 8))(RequestInDialog);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
    v12 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_1BEF73488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipSession::handleSessionMovedResponse(uint64_t a1, SipSession *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  const SipUri *v14;
  int v15;
  __int128 v16;
  std::__shared_weak_count *v17[2];
  _OWORD v18[26];
  uint64_t v19;
  int v20;

  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_BYTE *)(a1 + 97) = 1;
  *(_QWORD *)a1 = &off_1E78BFCE8;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 328) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 368) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  *(_BYTE *)(a1 + 96) = 1;
  *(_WORD *)(a1 + 360) = 257;
  *(_WORD *)(a1 + 400) = 257;
  v7 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 112))(a4);
  v8 = v7[23];
  if ((v8 & 0x80u) == 0)
    v9 = v7[23];
  else
    v9 = *((_QWORD *)v7 + 1);
  if (v9 != 6)
    return;
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v7, "INVITE", *((_QWORD *)v7 + 1)))
      return;
    goto LABEL_12;
  }
  if (!v7[23])
  {
LABEL_12:
    if ((SipSession::confirmed(a2) & 1) == 0)
    {
      v20 = 0;
      SipMessage::headerValueAsUint32(a3, "Expires", &v20);
      v11 = SipMessage::header<SipContactHeader>(a3);
      if (v11)
      {
        v12 = v11[9];
        if (v12)
        {
          if (v12 != v11[10])
          {
            v13 = v20;
            if (!v20)
              v13 = SipParameterMap::uintParameter(v12 + 416, (void **)"expires", 0);
            v14 = (const SipUri *)(v12 + 8);
            SipUri::operator=((SipUri *)a1, (uint64_t)v14);
            v19 = 0;
            memset(v18, 0, sizeof(v18));
            v16 = 0u;
            *(_OWORD *)v17 = 0u;
            v15 = time(0);
            BambiCallSessionMovedEvent::BambiCallSessionMovedEvent((BambiCallSessionMovedEvent *)&v16, v14, v13 + v15);
            SipSession::fireCallEvent(a2, (BambiCallEvent *)&v16);
            *(_QWORD *)&v16 = &off_1E78C9240;
            SipUri::~SipUri((SipUri *)((char *)v18 + 8));
            *(_QWORD *)&v16 = &off_1E78BD300;
            if (v17[1])
              std::__shared_weak_count::__release_weak(v17[1]);
          }
        }
      }
    }
    return;
  }
  v10 = "INVITE";
  while (*v7 == *(unsigned __int8 *)v10)
  {
    ++v7;
    ++v10;
    if (!--v8)
      goto LABEL_12;
  }
}

void sub_1BEF73774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SipUri *v9;

  BambiCallSessionMovedEvent::~BambiCallSessionMovedEvent((BambiCallSessionMovedEvent *)&a9);
  SipUri::~SipUri(v9);
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipContactHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "Contact");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

void SDPSession::applyOnStreams<SipSession::handleInviteOrUpdateErrorResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>,std::shared_ptr<SipDialogFork>)::$_0>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  void (**v13)(ImsResult *__hidden);
  uint64_t *v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::string __p;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_QWORD *)(a1 + 16) = 0;
  v3 = *(_QWORD **)(a2 + 1904);
  v4 = (_QWORD *)(a2 + 1912);
  if (v3 != (_QWORD *)(a2 + 1912))
  {
    while (1)
    {
      v7 = v3[5];
      v8 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ReInviteUpgradeFailure");
      BambiCall::activateMediaSessionIfAppropriate(v8, v7, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v13 = &off_1E78B7238;
      v14 = &_bambiDomain;
      v15 = 0;
      ImsResult::operator=(a1, (uint64_t)&v13);
      ImsResult::~ImsResult((ImsResult *)&v13);
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v13 = &off_1E78B7238;
      v14 = &_bambiDomain;
      v15 = 0;
      if (*(uint64_t **)(a1 + 8) != &_bambiDomain)
        break;
      v9 = *(_DWORD *)(a1 + 16);
      ImsResult::~ImsResult((ImsResult *)&v13);
      if (!v9)
      {
        v10 = (_QWORD *)v3[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v3[2];
            v12 = *v11 == (_QWORD)v3;
            v3 = v11;
          }
          while (!v12);
        }
        v3 = v11;
        if (v11 != v4)
          continue;
      }
      return;
    }
    ImsResult::~ImsResult((ImsResult *)&v13);
  }
}

void sub_1BEF73954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  ImsResult *v23;

  ImsResult::~ImsResult((ImsResult *)&a9);
  ImsResult::~ImsResult(v23);
  _Unwind_Resume(a1);
}

void SipSession::handleInviteResponseToCancel(_QWORD *a1, const SipResponse *a2, uint64_t *a3)
{
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[9];
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::string v24;
  void *v25[2];
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v23 = 0;
  *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = 0u;
  memset(v26, 0, sizeof(v26));
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  *(_OWORD *)v25 = 0u;
  *((_BYTE *)&v24.__r_.__value_.__s + 23) = 13;
  qmemcpy(&v24, "InternalError", 13);
  v4 = *((_DWORD *)a2 + 22) - 200;
  *(_QWORD *)&v26[12] = 0xA000001F4;
  if (v4 <= 0x63)
  {
    v5 = (std::__shared_weak_count *)a3[1];
    v21 = *a3;
    v22 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    SipSessionInterface::addAckRetransmitHandlerForClientTransaction((uint64_t)a1, (uint64_t)&v21, a2, 0);
    v8 = v22;
    if (v22)
    {
      v9 = (unint64_t *)&v22->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = a1[194];
  if (v11)
  {
    LODWORD(v23) = *(_DWORD *)v11;
    std::string::operator=(&v24, (const std::string *)(v11 + 8));
    std::string::operator=((std::string *)v25, (const std::string *)(v11 + 32));
    v12 = *(_QWORD *)(v11 + 56);
    *(_DWORD *)&v26[16] = *(_DWORD *)(v11 + 64);
    *(_QWORD *)&v26[8] = v12;
    std::string::operator=((std::string *)&v26[24], (const std::string *)(v11 + 72));
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v28, (uint64_t *)(v11 + 96));
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v29, (uint64_t *)(v11 + 112));
    v13 = *(_DWORD *)(v11 + 131);
    LODWORD(v30) = *(_DWORD *)(v11 + 128);
    *(_DWORD *)((char *)&v30 + 3) = v13;
  }
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t *, _QWORD))(*a1 + 120))(v20, a1, &v23, 0);
  ImsResult::~ImsResult((ImsResult *)v20);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(*(void **)&v26[24]);
  if ((v26[7] & 0x80000000) != 0)
    operator delete(v25[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_1BEF73BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  BambiCallTerminationReason::~BambiCallTerminationReason((void **)va1);
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipPEarlyMediaHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "P-Early-Media");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

void SipSession::processEarlyMediaHeader(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v6;
  void **v7;
  int v8;
  void **v9;
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  int v18;
  uint64_t v19;
  void **v20;
  std::string::size_type v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *size;
  ImsPrefs *v35;
  void **EnforceEarlyMediaInactiveDirectionKey;
  void *v37;
  int v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::string v43;
  void *__p;
  char v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::string v48;
  std::string v49;
  std::string v50;

  if (!a2)
    return;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Processing early media header", 29);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a2 + 64, (void **)"sendrecv");
  if ((void **)(a2 + 72) == v7)
  {
    v9 = v7;
    if (v7 != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a2 + 64, (void **)"sendonly"))
    {
      v8 = 3;
      goto LABEL_6;
    }
    if (v9 == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a2 + 64, (void **)"inactive"))return;
    v13 = *(std::__shared_weak_count **)(a1 + 776);
    if (v13
      && (v14 = std::__shared_weak_count::lock(v13), (v43.__r_.__value_.__l.__size_ = (std::string::size_type)v14) != 0))
    {
      v15 = *(_QWORD *)(a1 + 768);
      v43.__r_.__value_.__r.__words[0] = v15;
      if (v15)
      {
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = 0uLL;
        v16 = *(std::__shared_weak_count **)(v15 + 360);
        if (v16)
        {
          v16 = std::__shared_weak_count::lock(v16);
          v17 = v16;
          v50.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
          if (v16)
          {
            v16 = *(std::__shared_weak_count **)(v15 + 352);
            v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
          }
        }
        else
        {
          v17 = 0;
        }
        v35 = (ImsPrefs *)SipStack::prefs((SipStack *)v16);
        EnforceEarlyMediaInactiveDirectionKey = (void **)ImsPrefs::getEnforceEarlyMediaInactiveDirectionKey(v35);
        v37 = ImsPrefs::prefWithKey(v35, EnforceEarlyMediaInactiveDirectionKey);
        if (v37)
          v38 = (*(uint64_t (**)(void *))(*(_QWORD *)v37 + 40))(v37);
        else
          v38 = *((_BYTE *)EnforceEarlyMediaInactiveDirectionKey + 57) != 0;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (v38)
          v10 = 2;
        else
          v10 = 1;
        size = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
        if (!v43.__r_.__value_.__l.__size_)
          goto LABEL_78;
      }
      else
      {
        size = v14;
        v10 = 1;
      }
      v41 = (unint64_t *)&size->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    else
    {
      v10 = 1;
    }
LABEL_78:
    v8 = 4;
    goto LABEL_7;
  }
  v8 = 1;
LABEL_6:
  v10 = 2;
LABEL_7:
  v46 = 0;
  v47 = 0;
  v11 = *(std::__shared_weak_count **)(a1 + 776);
  if (v11)
  {
    v47 = std::__shared_weak_count::lock(v11);
    if (v47)
    {
      v12 = *(_QWORD *)(a1 + 768);
      v46 = v12;
      if (v12)
      {
        if (v8 == 3)
          v18 = 2;
        else
          v18 = v8;
        *(_DWORD *)(v12 + 448) = v18;
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 240);
  v20 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v19 + 2040, (void **)&a3->__r_.__value_.__l.__data_);
  if ((void **)(v19 + 2048) == v20)
  {
    v22 = 0;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = 0uLL;
LABEL_31:
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"processEarlyMediaHeader: Fork not found. Fork tag: ", 51);
    *(_BYTE *)(v26 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v43, a3);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v26 + 56))(v26, &v43);
    if (v45 < 0)
      operator delete(__p);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
  v21 = (std::string::size_type)v20[7];
  v22 = (std::__shared_weak_count *)v20[8];
  v50.__r_.__value_.__r.__words[0] = v21;
  v50.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (!v21)
    goto LABEL_31;
  if (v8 == 3)
    v25 = 2;
  else
    v25 = v8;
  *(_DWORD *)(v21 + 848) = v25;
LABEL_35:
  if (v22)
  {
    v27 = (unint64_t *)&v22->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (*(_DWORD *)(a1 + 1364) != v10)
  {
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"Setting early media support level to: ", 38);
    *(_BYTE *)(v29 + 17) = 0;
    if (v10 == 1)
      v30 = "kEarlyMediaSupportInactive";
    else
      v30 = "kEarlyMediaSupportEnforced";
    std::string::basic_string[abi:ne180100]<0>(&v50, v30);
    LoggableString::LoggableString(&v43, &v50);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v29 + 40))(v29, &v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)" was: ", 6);
    *(_BYTE *)(v29 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v48, off_1E78CB370[*(int *)(a1 + 1364)]);
    LoggableString::LoggableString(&v49, &v48);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v29 + 40))(v29, &v49);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v29 + 17) = 0;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    *(_DWORD *)(a1 + 1364) = v10;
  }
  v31 = v47;
  if (v47)
  {
    v32 = (unint64_t *)&v47->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1BEF74130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v32 - 72);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t SipSession::handleInviteOrUpdateResponse(_BYTE *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  SipUriHeader *v7;
  __int128 *v8;
  void **v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  SipOfferAnswer *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  SipUriHeader *v23;
  __int128 *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void **v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  std::string *v33;
  uint64_t v34;
  void **v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  SipOfferAnswer *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _BOOL4 v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned __int8 *v63;
  int v64;
  uint64_t v65;
  size_t v66;
  uint64_t v67;
  const char *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  SipOfferAnswer *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  __int128 v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  SipUserAgent *v106;
  char v107;
  char v108;
  unsigned __int8 *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  const void *v113;
  const char *v114;
  int v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  int v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  std::string::size_type v123;
  void **v124;
  std::string *v125;
  void **v126;
  __int128 *v127;
  unint64_t *v128;
  const char *v129;
  void *v130;
  SipUriHeader *v131;
  __int128 *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  SipOfferAnswer *v139;
  int v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  _BOOL4 v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  char v148;
  ImsPrefs *v149;
  void **EmergencyAnonymousAutomaticRedialKey;
  void *v151;
  int v152;
  uint64_t v153;
  char v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  unsigned int v159;
  BOOL v160;
  uint64_t *v161;
  __int128 *v162;
  unsigned int v163;
  __int128 *v164;
  void *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  unsigned int v171;
  BOOL v172;
  uint64_t *v173;
  __int128 *v174;
  unsigned int v175;
  __int128 *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unsigned __int8 *v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  unsigned __int8 *v192;
  uint64_t v193;
  uint64_t v194;
  const char *v195;
  char *v196;
  BOOL v197;
  uint64_t v198;
  uint64_t v199;
  SipUserAgent *v200;
  uint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _BYTE *v206;
  int v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  __int128 *v211;
  unsigned __int8 *v212;
  uint64_t v213;
  uint64_t v214;
  const char *v215;
  uint64_t v216;
  void **v217;
  __int128 *v218;
  int v219;
  void *v220;
  const char *v221;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  void **v225;
  uint64_t v226;
  uint64_t v227;
  SipUserAgent *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  SipUserAgent *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  SipUserAgent *v236;
  std::string *v237;
  __int128 v238;
  const std::string::value_type *v239;
  std::string::size_type v240;
  std::string *v241;
  __int128 v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  unsigned __int8 *v250;
  void **v251;
  unsigned __int8 *v252;
  _BOOL4 v253;
  uint64_t v254;
  _BYTE *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  uint64_t v259;
  _BYTE *v260;
  std::__shared_weak_count *v261;
  BambiCall *v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t *v265;
  unint64_t v266;
  unsigned __int8 *v267;
  uint64_t v268;
  uint64_t v269;
  const char *v270;
  uint64_t v271;
  const std::string *v272;
  _QWORD *v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  _QWORD *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count *v297;
  std::__shared_weak_count *v298;
  int v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t *v305;
  unint64_t v306;
  void **v308;
  unsigned __int8 *v309;
  _BOOL4 v310;
  _BOOL4 v311;
  uint64_t (*v312)(_BYTE *);
  uint64_t v313;
  uint64_t v314;
  _BYTE *v315;
  char *v316;
  char *v317;
  SDPModel *v318;
  uint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _BYTE *v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t *v329;
  unint64_t v330;
  _BOOL4 isHeld;
  uint64_t v332;
  BambiCall *v333;
  _BYTE v334[72];
  _BYTE v335[72];
  char v336[72];
  uint64_t v337;
  std::__shared_weak_count *v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  uint64_t v364;
  __int128 v365;
  __int128 v366;
  SipOfferAnswer *v367;
  std::__shared_weak_count *v368;
  __int128 v369;
  std::string v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  uint64_t v379;
  std::string::value_type *v380;
  std::__shared_weak_count *v381;
  unsigned __int8 v382;
  __int128 v383;
  __int128 v384;

  v6 = *((_QWORD *)a1 + 30);
  v7 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
  if (v7)
    v8 = SipUriHeader::tag(v7);
  else
    v8 = &ims::kEmptyString;
  v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v6 + 2040, (void **)v8);
  if ((void **)(v6 + 2048) == v9)
  {
    v11 = 0;
    v369 = 0uLL;
    goto LABEL_23;
  }
  v10 = v9[7];
  v11 = (std::__shared_weak_count *)v9[8];
  *(_QWORD *)&v369 = v10;
  *((_QWORD *)&v369 + 1) = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (!v10)
  {
LABEL_23:
    v22 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"handleInviteOrUpdateResponse: no fork with remote tag ", 54);
    *(_BYTE *)(v22 + 17) = 0;
    v23 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
    if (v23)
      v24 = SipUriHeader::tag(v23);
    else
      v24 = &ims::kEmptyString;
    ObfuscatedString::ObfuscatedString((uint64_t)&v339, (const std::string *)v24);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v22 + 56))(v22, &v339);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    if (SHIBYTE(v341) < 0)
      operator delete(*((void **)&v340 + 1));
    if (SBYTE7(v340) < 0)
      operator delete((void *)v339);
    if (a1[1320])
    {
      if (*(char *)(a2 + 119) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v339, *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
      }
      else
      {
        v339 = *(_OWORD *)(a2 + 96);
        *(_QWORD *)&v340 = *(_QWORD *)(a2 + 112);
      }
      SipSession::logLazuliMessageSessionSetup((uint64_t)a1, (uint64_t)&v339, *(unsigned int *)(a2 + 88));
      if (SBYTE7(v340) < 0)
        operator delete((void *)v339);
    }
    v25 = 1;
    if (v11)
      goto LABEL_595;
    return v25;
  }
  v14 = (SipOfferAnswer *)*((_QWORD *)v10 + 82);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v10 + 83);
  v367 = v14;
  v368 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 288) + 112))(*(_QWORD *)(*a3 + 288));
  v19 = v18[23];
  if ((v19 & 0x80u) == 0)
    v20 = v18[23];
  else
    v20 = *((_QWORD *)v18 + 1);
  if (v20 != 6)
    goto LABEL_39;
  if ((v19 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v18, "INVITE", *((_QWORD *)v18 + 1)))
      goto LABEL_40;
LABEL_39:
    v26 = 0;
    goto LABEL_81;
  }
  if (v18[23])
  {
    v21 = "INVITE";
    while (*v18 == *(unsigned __int8 *)v21)
    {
      ++v18;
      ++v21;
      if (!--v19)
        goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_40:
  if ((*(_DWORD *)(a2 + 88) - 200) > 0xFFFFFF9B)
    goto LABEL_72;
  v27 = *a3;
  v28 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(*a3 + 376, (void **)"InviteType");
  if ((void **)(v27 + 384) == v28)
    v29 = &ims::kEmptyString;
  else
    v29 = (__int128 *)(v28 + 7);
  v30 = *((unsigned __int8 *)v29 + 23);
  if ((v30 & 0x80u) == 0)
    v31 = *((unsigned __int8 *)v29 + 23);
  else
    v31 = *((_QWORD *)v29 + 1);
  if (v31 != 10)
    goto LABEL_55;
  if ((v30 & 0x80) == 0)
  {
    if (*((_BYTE *)v29 + 23))
    {
      v32 = "HoldInvite";
      v33 = (std::string *)"HoldTimer";
      while (*(unsigned __int8 *)v29 == *(unsigned __int8 *)v32)
      {
        v29 = (__int128 *)((char *)v29 + 1);
        ++v32;
        if (!--v30)
          goto LABEL_71;
      }
      goto LABEL_55;
    }
LABEL_68:
    v33 = (std::string *)"HoldTimer";
    goto LABEL_71;
  }
  if (!memcmp(*(const void **)v29, "HoldInvite", *((_QWORD *)v29 + 1)))
    goto LABEL_68;
LABEL_55:
  v34 = *a3;
  v35 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(*a3 + 376, (void **)"InviteType");
  if ((void **)(v34 + 384) == v35)
    v36 = &ims::kEmptyString;
  else
    v36 = (__int128 *)(v35 + 7);
  v37 = *((unsigned __int8 *)v36 + 23);
  if ((v37 & 0x80u) == 0)
    v38 = *((unsigned __int8 *)v36 + 23);
  else
    v38 = *((_QWORD *)v36 + 1);
  if (v38 != 12)
    goto LABEL_72;
  if ((v37 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v36, "ResumeInvite", *((_QWORD *)v36 + 1)))
      goto LABEL_72;
  }
  else if (*((_BYTE *)v36 + 23))
  {
    v39 = "ResumeInvite";
    v33 = (std::string *)"ResumeTimer";
    while (*(unsigned __int8 *)v36 == *(unsigned __int8 *)v39)
    {
      v36 = (__int128 *)((char *)v36 + 1);
      ++v39;
      if (!--v37)
        goto LABEL_71;
    }
    goto LABEL_72;
  }
  v33 = (std::string *)"ResumeTimer";
LABEL_71:
  SipTimerContainer::cancelTimer((SipTimerContainer *)(a1 + 264), v33);
LABEL_72:
  if ((SipSession::confirmed((SipSession *)a1) & 1) == 0)
  {
    if (SipSession::emergency((std::__shared_weak_count *)a1))
    {
      if ((*(_DWORD *)(a2 + 88) - 300) >= 0xFFFFFF39)
      {
        SipSessionInterface::stack((std::__shared_weak_count *)a1, &v339);
        SipTimerContainer::cancelTimer((SipTimerContainer *)(*(_QWORD *)(v339 + 4216) + 4904), (std::string *)&kEmergencySessionSetupTimer);
        v40 = (std::__shared_weak_count *)*((_QWORD *)&v339 + 1);
        if (*((_QWORD *)&v339 + 1))
        {
          v41 = (unint64_t *)(*((_QWORD *)&v339 + 1) + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
    }
  }
  v26 = 1;
LABEL_81:
  v43 = *a3;
  if (*(_DWORD *)(a2 + 88) >= 0x12Cu)
  {
    v44 = a3[1];
    *(_QWORD *)&v366 = *a3;
    *((_QWORD *)&v366 + 1) = v44;
    if (v44)
    {
      v45 = (unint64_t *)(v44 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = v369;
    v365 = v369;
    if (*((_QWORD *)&v369 + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&v369 + 1) + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = *(_QWORD *)(v43 + 288);
    v51 = SipMessage::body<SipSdpBody>(v50);
    if (!v51)
    {
LABEL_142:
      v82 = *(_DWORD *)(a2 + 88);
      switch(v82)
      {
        case 301:
          v371 = 0uLL;
          v96 = (std::__shared_weak_count *)*((_QWORD *)a1 + 97);
          if (v96)
          {
            *((_QWORD *)&v371 + 1) = std::__shared_weak_count::lock(v96);
            if (*((_QWORD *)&v371 + 1))
              *(_QWORD *)&v371 = *((_QWORD *)a1 + 96);
          }
          v364 = 0;
          v362 = 0u;
          v363 = 0u;
          v360 = 0u;
          v361 = 0u;
          v358 = 0u;
          v359 = 0u;
          v356 = 0u;
          v357 = 0u;
          v354 = 0u;
          v355 = 0u;
          v352 = 0u;
          v353 = 0u;
          v350 = 0u;
          v351 = 0u;
          v348 = 0u;
          v349 = 0u;
          v346 = 0u;
          v347 = 0u;
          v344 = 0u;
          v345 = 0u;
          v342 = 0u;
          v343 = 0u;
          v340 = 0u;
          v341 = 0u;
          v339 = 0u;
          v97 = v366;
          *(_OWORD *)&v370.__r_.__value_.__l.__data_ = v366;
          if (*((_QWORD *)&v366 + 1))
          {
            v98 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
            do
              v99 = __ldxr(v98);
            while (__stxr(v99 + 1, v98));
          }
          SipSession::handleSessionMovedResponse((uint64_t)&v339, (SipSession *)a1, a2, *(_QWORD *)(v97 + 288));
          if (*((_QWORD *)&v97 + 1))
          {
            v100 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v97 + 1) + 16))(*((_QWORD *)&v97 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v97 + 1));
            }
          }
          if ((_QWORD)v371
            && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v371 + 96))(v371)
            && SipUri::isValidUri((SipUri *)&v339))
          {
            v102 = HIBYTE(v346);
            if (v346 < 0)
              v102 = v346;
            if (v102)
            {
              v103 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
              (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v103);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v103 + 8), (uint64_t)"Updating conference server URI to ", 34);
              *(_BYTE *)(v103 + 17) = 0;
              (*(void (**)(__int128 *, uint64_t))(v339 + 40))(&v339, v103);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v103 + 64))(v103, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v103 + 17) = 0;
              v104 = *((_QWORD *)a1 + 30);
              if (v104 && (v105 = *(_QWORD *)(v104 + 208)) != 0)
                v106 = *(SipUserAgent **)(v105 + 136);
              else
                v106 = 0;
              v183 = SipUserAgent::config(v106);
              SipUri::operator=((SipUri *)(v183 + 48), (uint64_t)&v339);
            }
          }
          SipUri::~SipUri((SipUri *)&v339);
          v83 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
          if (!*((_QWORD *)&v371 + 1))
            goto LABEL_559;
          v184 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
          do
            v95 = __ldaxr(v184);
          while (__stlxr(v95 - 1, v184));
          break;
        case 302:
          v83 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
          v91 = v366;
          v371 = v366;
          if (*((_QWORD *)&v366 + 1))
          {
            v92 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }
          SipSession::handleSessionMovedResponse((uint64_t)&v339, (SipSession *)a1, a2, *(_QWORD *)(v91 + 288));
          SipUri::~SipUri((SipUri *)&v339);
          if (!v83)
            goto LABEL_559;
          v94 = (unint64_t *)&v83->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          break;
        case 422:
          v83 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
          v84 = v366;
          *(_OWORD *)&v370.__r_.__value_.__l.__data_ = v366;
          if (*((_QWORD *)&v366 + 1))
          {
            v85 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
            do
              v86 = __ldxr(v85);
            while (__stxr(v86 + 1, v85));
          }
          v87 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v84 + 288) + 112))(*(_QWORD *)(v84 + 288));
          v88 = v87[23];
          if ((v88 & 0x80u) == 0)
            v89 = v87[23];
          else
            v89 = *((_QWORD *)v87 + 1);
          if (v89 == 6)
          {
            if ((v88 & 0x80) == 0)
            {
              if (v87[23])
              {
                v90 = "INVITE";
                while (*v87 == *(unsigned __int8 *)v90)
                {
                  ++v87;
                  ++v90;
                  if (!--v88)
                    goto LABEL_217;
                }
                goto LABEL_202;
              }
LABEL_217:
              if ((SipSession::confirmed((SipSession *)a1) & 1) == 0)
              {
                v347 = 0u;
                v348 = 0u;
                v345 = 0u;
                v346 = 0u;
                v343 = 0u;
                v344 = 0u;
                v341 = 0u;
                v342 = 0u;
                v339 = 0u;
                v340 = 0u;
                BambiCallSessionIntervalTooSmallEvent::BambiCallSessionIntervalTooSmallEvent((BambiCallSessionIntervalTooSmallEvent *)&v339, (const std::string *)a2);
                SipSession::fireCallEvent((SipSession *)a1, (BambiCallEvent *)&v339);
                *(_QWORD *)&v339 = off_1E78C91E8;
                *((_QWORD *)&v341 + 1) = off_1E78E40E8;
                if (SHIBYTE(v348) < 0)
                  operator delete(*((void **)&v347 + 1));
                SipMessage::~SipMessage((SipMessage *)((char *)&v341 + 8));
                *(_QWORD *)&v339 = &off_1E78BD300;
                if (*((_QWORD *)&v340 + 1))
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v340 + 1));
                goto LABEL_224;
              }
              v115 = 1;
LABEL_203:
              v116 = *((_QWORD *)a1 + 168);
              *(_QWORD *)&v371 = v84;
              *((_QWORD *)&v371 + 1) = v83;
              if (v83)
              {
                v117 = (unint64_t *)&v83->__shared_owners_;
                do
                  v118 = __ldxr(v117);
                while (__stxr(v118 + 1, v117));
              }
              v119 = SipSessionTimer::handleIntervalTooSmallResponse(v116, a2, (uint64_t)&v371);
              if (v83)
              {
                v120 = (unint64_t *)&v83->__shared_owners_;
                do
                  v121 = __ldaxr(v120);
                while (__stlxr(v121 - 1, v120));
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                  std::__shared_weak_count::__release_weak(v83);
                }
              }
              if (v119)
              {
                v122 = v370.__r_.__value_.__r.__words[0] + 376;
                v123 = v370.__r_.__value_.__r.__words[0] + 384;
                if (v115)
                {
                  v124 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v122, (void **)"InviteType");
                  if ((void **)v123 == v124)
                    v125 = (std::string *)&ims::kEmptyString;
                  else
                    v125 = (std::string *)(v124 + 7);
                  SipSession::sendInvite((uint64_t)a1, v125, (ImsResult *)&v339);
                }
                else
                {
                  v126 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v122, (void **)"UpdateType");
                  if ((void **)v123 == v126)
                    v127 = &ims::kEmptyString;
                  else
                    v127 = (__int128 *)(v126 + 7);
                  SipSession::sendUpdate((uint64_t *)a1, (uint64_t)v127, (uint64_t)&v339);
                }
                ImsResult::~ImsResult((ImsResult *)&v339);
              }
LABEL_224:
              if (!v83)
                goto LABEL_559;
              v128 = (unint64_t *)&v83->__shared_owners_;
              do
                v95 = __ldaxr(v128);
              while (__stlxr(v95 - 1, v128));
              break;
            }
            if (!memcmp(*(const void **)v87, "INVITE", *((_QWORD *)v87 + 1)))
              goto LABEL_217;
          }
LABEL_202:
          v115 = 0;
          goto LABEL_203;
        default:
          SipSessionInterface::stack((std::__shared_weak_count *)a1, &v339);
          if (!*(_BYTE *)(v339 + 2615))
            goto LABEL_363;
          v107 = SipSession::confirmed((SipSession *)a1);
          v108 = *(_DWORD *)(a2 + 88) == 486 ? v107 : 1;
          if ((v108 & 1) != 0)
            goto LABEL_363;
          v109 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 112))(v50);
          v110 = v109[23];
          v111 = (v110 & 0x80u) == 0 ? v109[23] : *((_QWORD *)v109 + 1);
          if (v111 != 6)
            goto LABEL_363;
          if ((v110 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v109, "INVITE", *((_QWORD *)v109 + 1)))
            {
LABEL_363:
              v185 = (std::__shared_weak_count *)*((_QWORD *)&v339 + 1);
              if (*((_QWORD *)&v339 + 1))
              {
                v186 = (unint64_t *)(*((_QWORD *)&v339 + 1) + 8);
                do
                  v187 = __ldaxr(v186);
                while (__stlxr(v187 - 1, v186));
                if (!v187)
                {
                  ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                  std::__shared_weak_count::__release_weak(v185);
                }
              }
              goto LABEL_368;
            }
          }
          else if (v109[23])
          {
            v112 = "INVITE";
            while (*v109 == *(unsigned __int8 *)v112)
            {
              ++v109;
              ++v112;
              if (!--v110)
                goto LABEL_391;
            }
            goto LABEL_363;
          }
LABEL_391:
          v196 = SipMessage::body<SipCallWaitingInfoBody>(v50);
          if (v196)
            v197 = v196[96] != 0;
          else
            v197 = 0;
          v256 = (std::__shared_weak_count *)*((_QWORD *)&v339 + 1);
          if (*((_QWORD *)&v339 + 1))
          {
            v257 = (unint64_t *)(*((_QWORD *)&v339 + 1) + 8);
            do
              v258 = __ldaxr(v257);
            while (__stlxr(v258 - 1, v257));
            if (!v258)
            {
              ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
              std::__shared_weak_count::__release_weak(v256);
            }
          }
          if (!v197)
          {
            v259 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
            (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v259);
            v260 = (_BYTE *)ImsOutStream::operator<<(v259, "Faking network based call waiting");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v260 + 64))(v260, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v260[17] = 0;
            v339 = 0uLL;
            v261 = (std::__shared_weak_count *)*((_QWORD *)a1 + 97);
            if (v261)
            {
              *((_QWORD *)&v339 + 1) = std::__shared_weak_count::lock(v261);
              if (*((_QWORD *)&v339 + 1))
              {
                v262 = (BambiCall *)*((_QWORD *)a1 + 96);
                *(_QWORD *)&v339 = v262;
                if (v262)
                  BambiCall::fakeNetworkBasedCallWaiting(v262);
              }
            }
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v339);
            goto LABEL_559;
          }
LABEL_368:
          if (*(_DWORD *)(a2 + 88) == 491)
          {
            if (!SipSession::confirmed((SipSession *)a1))
              goto LABEL_559;
            v188 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 112))(v50);
            v189 = v188[23];
            v190 = (v189 & 0x80u) == 0 ? v188[23] : *((_QWORD *)v188 + 1);
            if (v190 != 6)
              goto LABEL_559;
            if ((v189 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v188, "INVITE", *((_QWORD *)v188 + 1)))
                goto LABEL_559;
            }
            else if (v188[23])
            {
              v191 = "INVITE";
              while (*v188 == *(unsigned __int8 *)v191)
              {
                ++v188;
                ++v191;
                if (!--v189)
                  goto LABEL_398;
              }
LABEL_559:
              if (*((_QWORD *)&v47 + 1))
              {
                v288 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
                do
                  v289 = __ldaxr(v288);
                while (__stlxr(v289 - 1, v288));
                if (!v289)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v47 + 1) + 16))(*((_QWORD *)&v47 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v47 + 1));
                }
              }
              v290 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
              if (*((_QWORD *)&v366 + 1))
              {
                v291 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
                do
                  v292 = __ldaxr(v291);
                while (__stlxr(v292 - 1, v291));
                if (!v292)
                {
                  ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
                  std::__shared_weak_count::__release_weak(v290);
                }
              }
              v293 = *((_QWORD *)a1 + 30);
              if (v293 && (v294 = *(_QWORD *)(v293 + 208)) != 0)
                v295 = *(_QWORD *)(v294 + 136);
              else
                v295 = 0;
              v296 = *(std::__shared_weak_count **)(v295 + 16);
              if (v296 && (v297 = std::__shared_weak_count::lock(v296)) != 0)
              {
                v298 = v297;
                v299 = *(unsigned __int8 *)(*(_QWORD *)(v295 + 8) + 2657);
                v300 = (unint64_t *)&v297->__shared_owners_;
                do
                  v301 = __ldaxr(v300);
                while (__stlxr(v301 - 1, v300));
                if (!v301)
                {
                  ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                  std::__shared_weak_count::__release_weak(v298);
                }
                if (!v299)
                  goto LABEL_588;
              }
              else if (!MEMORY[0xA61])
              {
LABEL_588:
                v25 = 1;
                goto LABEL_589;
              }
              if (*(char *)(a2 + 119) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v339, *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
              }
              else
              {
                v339 = *(_OWORD *)(a2 + 96);
                *(_QWORD *)&v340 = *(_QWORD *)(a2 + 112);
              }
              SipSession::logLazuliMessageSessionSetup((uint64_t)a1, (uint64_t)&v339, *(unsigned int *)(a2 + 88));
              if (SBYTE7(v340) < 0)
                operator delete((void *)v339);
              bzero(&v339, 0x250uLL);
              *(_QWORD *)&v375 = 0;
              *(_QWORD *)&v371 = &off_1E78B7238;
              *((_QWORD *)&v371 + 1) = &_bambiDomain;
              LODWORD(v372) = 0;
              v374 = 0uLL;
              *((_QWORD *)&v372 + 1) = 0;
              v373 = 0uLL;
              BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)&v339, 15, (uint64_t)&v371);
              *(_QWORD *)&v339 = &off_1E78BD2A8;
              ImsResult::~ImsResult((ImsResult *)&v371);
              LODWORD(v350) = *(_DWORD *)(a2 + 88);
              SipUri::operator=((SipUri *)((char *)&v350 + 8), *((_QWORD *)a1 + 30) + 224);
              SipSession::fireCallEvent((SipSession *)a1, (BambiCallEvent *)&v339);
              BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&v339);
              goto LABEL_588;
            }
LABEL_398:
            v201 = v366;
            v339 = v366;
            if (*((_QWORD *)&v366 + 1))
            {
              v202 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
              do
                v203 = __ldxr(v202);
              while (__stxr(v203 + 1, v202));
            }
            SipSession::schedulePendingInvite((uint64_t)a1, v201);
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v339);
            goto LABEL_559;
          }
          if (*(_QWORD *)(*((_QWORD *)a1 + 30) + 2056) >= 2uLL)
          {
            v192 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 112))(v50);
            v193 = v192[23];
            v194 = (v193 & 0x80u) == 0 ? v192[23] : *((_QWORD *)v192 + 1);
            if (v194 == 6)
            {
              if ((v193 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v192, "UPDATE", *((_QWORD *)v192 + 1)))
                  goto LABEL_412;
              }
              else if (v192[23])
              {
                v195 = "UPDATE";
                while (*v192 == *(unsigned __int8 *)v195)
                {
                  ++v192;
                  ++v195;
                  if (!--v193)
                    goto LABEL_394;
                }
                goto LABEL_412;
              }
LABEL_394:
              v198 = *((_QWORD *)a1 + 30);
              if (v198 && (v199 = *(_QWORD *)(v198 + 208)) != 0)
                v200 = *(SipUserAgent **)(v199 + 136);
              else
                v200 = 0;
              v204 = SipUserAgent::config(v200);
              if (SipResponseCodeMap::containsResponseCodeForMethod(v204 + 824, (void **)"UPDATE", *(_DWORD *)(a2 + 88), 0))
              {
                v205 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 32))(a1);
                (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v205);
                v206 = (_BYTE *)ImsOutStream::operator<<(v205, "killing fork, but not terminating call");
                (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v206 + 64))(v206, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                v206[17] = 0;
                v207 = *(_DWORD *)(a2 + 88);
                if (v207 == 481 || v207 == 408)
                {
                  v208 = *((_QWORD *)a1 + 30);
                  v371 = v365;
                  if (*((_QWORD *)&v365 + 1))
                  {
                    v209 = (unint64_t *)(*((_QWORD *)&v365 + 1) + 8);
                    do
                      v210 = __ldxr(v209);
                    while (__stxr(v210 + 1, v209));
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v339, "Received 481 response to UPDATE");
                  SipDialog::terminateForkWithBye(v208, &v371, (uint64_t)&v339);
                  if (SBYTE7(v340) < 0)
                    operator delete((void *)v339);
                  v211 = &v371;
                }
                else
                {
                  v263 = *((_QWORD *)a1 + 30);
                  v264 = v365;
                  v339 = v365;
                  if (*((_QWORD *)&v365 + 1))
                  {
                    v265 = (unint64_t *)(*((_QWORD *)&v365 + 1) + 8);
                    do
                      v266 = __ldxr(v265);
                    while (__stxr(v266 + 1, v265));
                  }
                  if (v264)
                    SipDialog::removeForkWithRemoteTag(v263, (std::string *)(v264 + 152));
                  v211 = &v339;
                }
                std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v211);
                goto LABEL_559;
              }
            }
          }
LABEL_412:
          v212 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 112))(v50);
          v213 = v212[23];
          if ((v213 & 0x80u) == 0)
            v214 = v212[23];
          else
            v214 = *((_QWORD *)v212 + 1);
          if (v214 != 6)
            goto LABEL_438;
          if ((v213 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v212, "UPDATE", *((_QWORD *)v212 + 1)))
              goto LABEL_438;
          }
          else if (v212[23])
          {
            v215 = "UPDATE";
            while (*v212 == *(unsigned __int8 *)v215)
            {
              ++v212;
              ++v215;
              if (!--v213)
                goto LABEL_423;
            }
            goto LABEL_438;
          }
LABEL_423:
          v339 = 0uLL;
          *(_QWORD *)&v340 = 0;
          v216 = v366;
          v217 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v366 + 376, (void **)"UpdateType");
          if ((void **)(v216 + 384) == v217)
            v218 = &ims::kEmptyString;
          else
            v218 = (__int128 *)(v217 + 7);
          if (*((char *)v218 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v339, *(const std::string::value_type **)v218, *((_QWORD *)v218 + 1));
          }
          else
          {
            v339 = *v218;
            *(_QWORD *)&v340 = *((_QWORD *)v218 + 2);
          }
          v219 = SBYTE7(v340);
          v220 = (void *)v339;
          if ((SBYTE7(v340) & 0x80u) == 0)
            v221 = (const char *)&v339;
          else
            v221 = (const char *)v339;
          if (byte_1ED70C84F >= 0)
            v222 = (const char *)&SipSession::kUpdateTypeEmergencyLocationUpdate;
          else
            v222 = (const char *)SipSession::kUpdateTypeEmergencyLocationUpdate;
          if (!strcasecmp(v221, v222))
          {
            v254 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
            (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v254);
            v255 = (_BYTE *)ImsOutStream::operator<<(v254, "ignoring emergency location update error response");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v255 + 64))(v255, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v255[17] = 0;
            if (SBYTE7(v340) < 0)
              operator delete((void *)v339);
            goto LABEL_559;
          }
          if (v219 < 0)
            operator delete(v220);
LABEL_438:
          v223 = v366;
          v224 = v366 + 376;
          v225 = (void **)(v366 + 384);
          if (v225 != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v366 + 376, (void **)"SessionRefresh"))
          {
            v226 = *((_QWORD *)a1 + 30);
            if (v226 && (v227 = *(_QWORD *)(v226 + 208)) != 0)
              v228 = *(SipUserAgent **)(v227 + 136);
            else
              v228 = 0;
            if (*(_BYTE *)(SipUserAgent::config(v228) + 1152))
            {
              v229 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
              (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v229);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v229 + 8), (uint64_t)"ignoring session refresh error response", 39);
              *(_BYTE *)(v229 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v229 + 64))(v229, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v229 + 17) = 0;
              goto LABEL_559;
            }
          }
          v383 = 0u;
          v384 = 0u;
          v230 = *((_QWORD *)a1 + 30);
          if (v230 && (v231 = *(_QWORD *)(v230 + 208)) != 0)
            v232 = *(SipUserAgent **)(v231 + 136);
          else
            v232 = 0;
          v233 = SipUserAgent::config(v232);
          *(_QWORD *)&v383 = &off_1E78EB020;
          std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)&v383 + 1, v233 + 1096);
          v234 = *((_QWORD *)a1 + 30);
          if (v234 && (v235 = *(_QWORD *)(v234 + 208)) != 0)
            v236 = *(SipUserAgent **)(v235 + 136);
          else
            v236 = 0;
          if (!*(_BYTE *)(SipUserAgent::config(v236) + 915))
          {
            v339 = 0uLL;
            *(_QWORD *)&v340 = 0;
            ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(&v370);
            v237 = std::string::append(&v370, ",", 1uLL);
            v238 = *(_OWORD *)&v237->__r_.__value_.__l.__data_;
            *(_QWORD *)&v372 = *((_QWORD *)&v237->__r_.__value_.__l + 2);
            v371 = v238;
            v237->__r_.__value_.__l.__size_ = 0;
            v237->__r_.__value_.__r.__words[2] = 0;
            v237->__r_.__value_.__r.__words[0] = 0;
            ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(&v380);
            if ((v382 & 0x80u) == 0)
              v239 = (const std::string::value_type *)&v380;
            else
              v239 = v380;
            if ((v382 & 0x80u) == 0)
              v240 = v382;
            else
              v240 = (std::string::size_type)v381;
            v241 = std::string::append((std::string *)&v371, v239, v240);
            v242 = *(_OWORD *)&v241->__r_.__value_.__l.__data_;
            *(_QWORD *)&v340 = *((_QWORD *)&v241->__r_.__value_.__l + 2);
            v339 = v242;
            v241->__r_.__value_.__l.__size_ = 0;
            v241->__r_.__value_.__r.__words[2] = 0;
            v241->__r_.__value_.__r.__words[0] = 0;
            if ((char)v382 < 0)
              operator delete(v380);
            if (SBYTE7(v372) < 0)
              operator delete((void *)v371);
            if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v370.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&v371, "INVITE");
            SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)&v383, (uint64_t)&v371, (std::string *)&v339);
            if (SBYTE7(v372) < 0)
              operator delete((void *)v371);
            if (SBYTE7(v340) < 0)
              operator delete((void *)v339);
          }
          v380 = 0;
          v381 = 0;
          v243 = (std::__shared_weak_count *)*((_QWORD *)a1 + 97);
          if (v243)
          {
            v244 = std::__shared_weak_count::lock(v243);
            v381 = v244;
            if (!v244)
              goto LABEL_510;
            v380 = (std::string::value_type *)*((_QWORD *)a1 + 96);
            v333 = (BambiCall *)v380;
            if (!v380 || !SipSession::confirmed((SipSession *)a1))
              goto LABEL_510;
            v245 = SipMessage::body<SipSdpBody>(v50);
            if (v245)
            {
              v246 = *((_QWORD *)v245 + 1);
              v247 = *((_QWORD *)v245 + 2);
              *(_QWORD *)&v339 = v246;
              *((_QWORD *)&v339 + 1) = v247;
              if (v247)
              {
                v248 = (unint64_t *)(v247 + 8);
                do
                  v249 = __ldxr(v248);
                while (__stxr(v249 + 1, v248));
              }
              if (v246)
              {
                v250 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 112))(v50);
                if (std::operator==[abi:ne180100]<std::allocator<char>>(v250, "INVITE"))
                {
                  SipSessionInterface::stack((std::__shared_weak_count *)a1, &v371);
                  v332 = BambiClient::callCount(*(BambiClient **)(v371 + 136));
                  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v371);
                  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v339);
                  if (v332 == 1)
                  {
                    v251 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v224, (void **)"InviteType");
                    if (v225 == v251)
                      v252 = (unsigned __int8 *)&ims::kEmptyString;
                    else
                      v252 = (unsigned __int8 *)(v251 + 7);
                    if (std::operator==[abi:ne180100]<std::allocator<char>>(v252, "HoldInvite"))
                    {
                      v253 = 1;
                    }
                    else
                    {
                      v308 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v224, (void **)"InviteType");
                      if (v225 == v308)
                        v309 = (unsigned __int8 *)&ims::kEmptyString;
                      else
                        v309 = (unsigned __int8 *)(v308 + 7);
                      v253 = std::operator==[abi:ne180100]<std::allocator<char>>(v309, "ResumeInvite");
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v339, "INVITE");
                    v310 = SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)&v383, (void **)&v339, *(_DWORD *)(a2 + 88), 0);
                    if (SBYTE7(v340) < 0)
                    {
                      v311 = v310;
                      operator delete((void *)v339);
                      v310 = v311;
                    }
                    if (v310)
                    {
                      v312 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64);
                      if (v253)
                      {
                        v313 = v312(a1);
                        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v313);
                        v314 = ImsOutStream::operator<<(v313, "received ");
                        std::ostream::operator<<();
                        *(_BYTE *)(v314 + 17) = 0;
                        v315 = (_BYTE *)ImsOutStream::operator<<(v314, " response to hold/resume reINVITE; falling back to original call setup");
                        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v315 + 64))(v315, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                        v315[17] = 0;
                        v316 = SipMessage::body<SipSdpBody>(v50);
                        v317 = v316;
                        if (v316)
                        {
                          v318 = (SDPModel *)*((_QWORD *)v316 + 1);
                          v319 = *((_QWORD *)v317 + 2);
                          *(_QWORD *)&v339 = v318;
                          *((_QWORD *)&v339 + 1) = v319;
                          if (v319)
                          {
                            v320 = (unint64_t *)(v319 + 8);
                            do
                              v321 = __ldxr(v320);
                            while (__stxr(v321 + 1, v320));
                          }
                        }
                        else
                        {
                          v318 = 0;
                          v339 = 0uLL;
                        }
                        isHeld = SDPModel::isHeld(v318);
                        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v339);
                        if (isHeld)
                          BambiCall::localHoldFailed(v333);
                        else
                          BambiCall::localResumeFailed(v333);
                      }
                      else
                      {
                        v322 = v312(a1);
                        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v322);
                        v323 = ImsOutStream::operator<<(v322, "received ");
                        std::ostream::operator<<();
                        *(_BYTE *)(v323 + 17) = 0;
                        v324 = (_BYTE *)ImsOutStream::operator<<(v323, " to reINVITE; fall back to original call setup");
                        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v324 + 64))(v324, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                        v324[17] = 0;
                        v325 = *((_QWORD *)v333 + 24);
                        v326 = *((_QWORD *)v333 + 25);
                        *(_QWORD *)&v371 = v325;
                        *((_QWORD *)&v371 + 1) = v326;
                        if (v326)
                        {
                          v327 = (unint64_t *)(v326 + 8);
                          do
                            v328 = __ldxr(v327);
                          while (__stxr(v328 + 1, v327));
                        }
                        v370.__r_.__value_.__r.__words[0] = (std::string::size_type)v333;
                        v370.__r_.__value_.__l.__size_ = (std::string::size_type)v244;
                        v329 = (unint64_t *)&v244->__shared_owners_;
                        do
                          v330 = __ldxr(v329);
                        while (__stxr(v330 + 1, v329));
                        SDPSession::applyOnStreams<SipSession::handleInviteOrUpdateErrorResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>,std::shared_ptr<SipDialogFork>)::$_0>((uint64_t)&v339, v325, (uint64_t *)&v370);
                        ImsResult::~ImsResult((ImsResult *)&v339);
                        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v370);
                        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v371);
                      }
                      goto LABEL_554;
                    }
                  }
LABEL_510:
                  if ((SipSession::confirmed((SipSession *)a1) & 1) == 0)
                  {
                    v267 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v223 + 288) + 112))(*(_QWORD *)(v223 + 288));
                    v268 = v267[23];
                    v269 = (v268 & 0x80u) == 0 ? v267[23] : *((_QWORD *)v267 + 1);
                    if (v269 == 6)
                    {
                      if ((v268 & 0x80) != 0)
                      {
                        if (!memcmp(*(const void **)v267, "INVITE", *((_QWORD *)v267 + 1)))
                          goto LABEL_553;
                      }
                      else
                      {
                        if (!v267[23])
                          goto LABEL_553;
                        v270 = "INVITE";
                        while (*v267 == *(unsigned __int8 *)v270)
                        {
                          ++v267;
                          ++v270;
                          if (!--v268)
                            goto LABEL_553;
                        }
                      }
                    }
                  }
                  v271 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
                  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v271);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v271 + 8), (uint64_t)"ending session due to ", 22);
                  *(_BYTE *)(v271 + 17) = 0;
                  std::ostream::operator<<();
                  *(_BYTE *)(v271 + 17) = 0;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v271 + 8), (uint64_t)" response to ", 13);
                  *(_BYTE *)(v271 + 17) = 0;
                  v272 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v223 + 288) + 112))(*(_QWORD *)(v223 + 288));
                  LoggableString::LoggableString((std::string *)&v339, v272);
                  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v271 + 40))(v271, &v339);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v271 + 8), (uint64_t)" request", 8);
                  *(_BYTE *)(v271 + 17) = 0;
                  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v271 + 64))(v271, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(_BYTE *)(v271 + 17) = 0;
                  if (SBYTE7(v340) < 0)
                    operator delete((void *)v339);
                  *(_QWORD *)&v355 = 0;
                  v353 = 0u;
                  v354 = 0u;
                  v351 = 0u;
                  v352 = 0u;
                  v349 = 0u;
                  v350 = 0u;
                  v347 = 0u;
                  v348 = 0u;
                  v345 = 0u;
                  v346 = 0u;
                  v343 = 0u;
                  v344 = 0u;
                  v341 = 0u;
                  v342 = 0u;
                  v339 = 0u;
                  v340 = 0u;
                  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v339);
                  v273 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v339, (uint64_t)"Remote end rejected ", 20);
                  v274 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v223 + 288) + 112))(*(_QWORD *)(v223 + 288));
                  v275 = *(char *)(v274 + 23);
                  if (v275 >= 0)
                    v276 = v274;
                  else
                    v276 = *(_QWORD *)v274;
                  if (v275 >= 0)
                    v277 = *(unsigned __int8 *)(v274 + 23);
                  else
                    v277 = *(_QWORD *)(v274 + 8);
                  v278 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v273, v276, v277);
                  v279 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v278, (uint64_t)" request ", 9);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v279, (uint64_t)" with response ", 15);
                  std::ostream::operator<<();
                  v379 = 0;
                  v377 = 0u;
                  v378 = 0u;
                  v375 = 0u;
                  v376 = 0u;
                  v373 = 0u;
                  v374 = 0u;
                  v371 = 0u;
                  v372 = 0u;
                  std::string::basic_string[abi:ne180100]<0>(&v370, "NetworkError");
                  SipSessionInterface::terminationReason((std::__shared_weak_count *)a1, (uint64_t)&v370, (BambiCallTerminationReason *)&v371);
                  if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v370.__r_.__value_.__l.__data_);
                  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v339 + 8, &v370);
                  if (SBYTE7(v374) < 0)
                    operator delete((void *)v373);
                  v373 = *(_OWORD *)&v370.__r_.__value_.__l.__data_;
                  *(_QWORD *)&v374 = *((_QWORD *)&v370.__r_.__value_.__l + 2);
                  SipSession::hangUp((uint64_t *)a1, (uint64_t)&v371, 0, (uint64_t)&v370);
                  ImsResult::~ImsResult((ImsResult *)&v370);
                  v280 = (std::__shared_weak_count *)*((_QWORD *)&v378 + 1);
                  if (*((_QWORD *)&v378 + 1))
                  {
                    v281 = (unint64_t *)(*((_QWORD *)&v378 + 1) + 8);
                    do
                      v282 = __ldaxr(v281);
                    while (__stlxr(v282 - 1, v281));
                    if (!v282)
                    {
                      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                      std::__shared_weak_count::__release_weak(v280);
                    }
                  }
                  v283 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
                  if (*((_QWORD *)&v377 + 1))
                  {
                    v284 = (unint64_t *)(*((_QWORD *)&v377 + 1) + 8);
                    do
                      v285 = __ldaxr(v284);
                    while (__stlxr(v285 - 1, v284));
                    if (!v285)
                    {
                      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                      std::__shared_weak_count::__release_weak(v283);
                    }
                  }
                  if (SHIBYTE(v376) < 0)
                    operator delete(*((void **)&v375 + 1));
                  if (SBYTE7(v374) < 0)
                    operator delete((void *)v373);
                  if (SHIBYTE(v372) < 0)
                    operator delete(*((void **)&v371 + 1));
                  *(_QWORD *)&v339 = *MEMORY[0x1E0DE4F60];
                  *(_QWORD *)((char *)&v339 + *(_QWORD *)(v339 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
                  *((_QWORD *)&v339 + 1) = MEMORY[0x1E0DE4FB8] + 16;
                  if (SHIBYTE(v344) < 0)
                    operator delete(*((void **)&v343 + 1));
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  MEMORY[0x1C3B8707C](&v346);
                  v244 = v381;
LABEL_553:
                  if (!v244)
                  {
LABEL_558:
                    *(_QWORD *)&v383 = &off_1E78EB020;
                    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)&v383 + 8, (_QWORD *)v384);
                    goto LABEL_559;
                  }
LABEL_554:
                  v286 = (unint64_t *)&v244->__shared_owners_;
                  do
                    v287 = __ldaxr(v286);
                  while (__stlxr(v287 - 1, v286));
                  if (!v287)
                  {
                    ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                    std::__shared_weak_count::__release_weak(v244);
                  }
                  goto LABEL_558;
                }
              }
            }
            else
            {
              v339 = 0uLL;
            }
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v339);
            goto LABEL_510;
          }
          v244 = 0;
          goto LABEL_510;
      }
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
      goto LABEL_559;
    }
    v52 = *((_QWORD *)v51 + 1);
    v53 = (std::__shared_weak_count *)*((_QWORD *)v51 + 2);
    *(_QWORD *)&v339 = v52;
    *((_QWORD *)&v339 + 1) = v53;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    if (v52)
    {
      v56 = *(SipOfferAnswer **)(v47 + 656);
      v57 = *(std::__shared_weak_count **)(v47 + 664);
      *(_QWORD *)&v371 = v56;
      *((_QWORD *)&v371 + 1) = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      v60 = SipOfferAnswer::remoteAnswerPending(v56);
      if (v57)
      {
        v61 = (unint64_t *)&v57->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v339 + 1);
      if (!*((_QWORD *)&v339 + 1))
        goto LABEL_131;
    }
    else
    {
      v60 = 0;
      if (!v53)
        goto LABEL_131;
    }
    v73 = (unint64_t *)&v53->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
      if (!v60)
        goto LABEL_142;
LABEL_134:
      v75 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v75 + 8), (uint64_t)"reverting offer/answer state after failed session renegotiation", 63);
      *(_BYTE *)(v75 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v75 + 64))(v75, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v75 + 17) = 0;
      v76 = *(SipOfferAnswer **)(v365 + 656);
      v77 = *(std::__shared_weak_count **)(v365 + 664);
      *(_QWORD *)&v339 = v76;
      *((_QWORD *)&v339 + 1) = v77;
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      SipOfferAnswer::revert(v76);
      if (v77)
      {
        v80 = (unint64_t *)&v77->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      goto LABEL_142;
    }
LABEL_131:
    if (!v60)
      goto LABEL_142;
    goto LABEL_134;
  }
  v63 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v43 + 288) + 112))(*(_QWORD *)(v43 + 288));
  if ((SipSession::confirmed((SipSession *)a1) & 1) == 0)
  {
    v64 = *(_DWORD *)(a2 + 88);
    if ((v64 - 180) <= 9)
    {
      v65 = v63[23];
      v66 = *((_QWORD *)v63 + 1);
      if ((v65 & 0x80u) == 0)
        v67 = v63[23];
      else
        v67 = *((_QWORD *)v63 + 1);
      if (v67 != 6)
        goto LABEL_245;
      if ((v65 & 0x80) != 0)
      {
        v113 = *(const void **)v63;
        v114 = "INVITE";
        goto LABEL_240;
      }
      if (!v63[23])
        goto LABEL_241;
      v68 = "INVITE";
      v69 = v63;
      while (*v69 == *(unsigned __int8 *)v68)
      {
        ++v69;
        ++v68;
        if (!--v65)
          goto LABEL_241;
      }
    }
    if ((v64 - 200) > 0x63)
      goto LABEL_245;
    v70 = v63[23];
    v66 = *((_QWORD *)v63 + 1);
    if ((v70 & 0x80u) == 0)
      v71 = v63[23];
    else
      v71 = *((_QWORD *)v63 + 1);
    if (v71 != 6)
    {
      if (v71 != 5)
        goto LABEL_245;
      if ((v70 & 0x80) == 0)
      {
        if (v63[23])
        {
          v72 = "PRACK";
          while (*v63 == *(unsigned __int8 *)v72)
          {
            ++v63;
            ++v72;
            if (!--v70)
              goto LABEL_241;
          }
          goto LABEL_245;
        }
LABEL_241:
        v130 = SipMessage::header<SipPEarlyMediaHeader>(a2);
        v131 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
        if (v131)
          v132 = SipUriHeader::tag(v131);
        else
          v132 = &ims::kEmptyString;
        SipSession::processEarlyMediaHeader((uint64_t)a1, (uint64_t)v130, (std::string *)v132);
        goto LABEL_245;
      }
      v113 = *(const void **)v63;
      v114 = "PRACK";
LABEL_240:
      if (memcmp(v113, v114, v66))
        goto LABEL_245;
      goto LABEL_241;
    }
    if ((v70 & 0x80) != 0)
    {
      v113 = *(const void **)v63;
      v114 = "UPDATE";
      goto LABEL_240;
    }
    if (!v63[23])
      goto LABEL_241;
    v129 = "UPDATE";
    while (*v63 == *(unsigned __int8 *)v129)
    {
      ++v63;
      ++v129;
      if (!--v70)
        goto LABEL_241;
    }
  }
LABEL_245:
  v371 = 0uLL;
  SipSessionInterface::stack((std::__shared_weak_count *)a1, &v371);
  if ((_QWORD)v371)
  {
    if (*(_BYTE *)(v371 + 2657))
    {
      v133 = SipMessage::header<SipContactHeader>(a2);
      if (v133)
      {
        v134 = v133[9];
        if (v134)
        {
          if (v134 != v133[10] && SipUri::isValidUri((SipUri *)(v134 + 8)))
          {
            v135 = *((_QWORD *)a1 + 30);
            std::string::basic_string[abi:ne180100]<0>(&v339, "+g.gsma.rcs.isbot");
            *(_BYTE *)(v135 + 1792) = v134 + 432 != (_QWORD)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v134 + 424, (void **)&v339);
            if (SBYTE7(v340) < 0)
              operator delete((void *)v339);
            SipUri::operator=((SipUri *)(*((_QWORD *)a1 + 30) + 1096), v134 + 8);
          }
        }
      }
    }
  }
  v136 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
  if (*((_QWORD *)&v371 + 1))
  {
    v137 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v367;
  SipOfferAnswer::updateWithIncomingResponse(v367, a2, (std::string *)(*a3 + 320), (uint64_t)&v339);
  v140 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v339 + 1) + 24))(*((_QWORD *)&v339 + 1), v340);
  ImsResult::~ImsResult((ImsResult *)&v339);
  SipDialogFork::handleTargetRefresh((SipDialogFork *)v369, (const SipMessage *)a2);
  if (v26 && (*(_DWORD *)(a2 + 88) - 200) <= 0x63)
  {
    v141 = (std::__shared_weak_count *)a3[1];
    v337 = *a3;
    v338 = v141;
    if (v141)
    {
      v142 = (unint64_t *)&v141->__shared_owners_;
      do
        v143 = __ldxr(v142);
      while (__stxr(v143 + 1, v142));
    }
    v144 = SipOfferAnswer::localAnswerPending(*(SipOfferAnswer **)(*((_QWORD *)v139 + 19) + 16), *(std::__shared_weak_count **)(*((_QWORD *)v139 + 19) + 24));
    SipSessionInterface::addAckRetransmitHandlerForClientTransaction((uint64_t)a1, (uint64_t)&v337, (const SipResponse *)a2, v144);
    v145 = v338;
    if (v338)
    {
      v146 = (unint64_t *)&v338->__shared_owners_;
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
  }
  if (!v140)
  {
    SipSessionTimer::updateFromIncomingResponse(*((SipSessionTimer **)a1 + 168), (const SipResponse *)a2);
    if (!SipSession::confirmed((SipSession *)a1) || a1[857])
    {
      v153 = v369;
      SipSession::confirmed((SipSession *)a1);
      SipPreconditions::updateFromIncomingMessage((uint64_t)(a1 + 1400), (std::string *)(v153 + 152), a2);
    }
    if (v26)
    {
      v154 = SipSession::confirmed((SipSession *)a1);
      v155 = *(_DWORD *)(a2 + 88) == 183 ? v154 : 1;
      if ((v155 & 1) == 0)
        SipSession::startLocalQosTimerMO((SipSession *)a1);
    }
    if (SipResponse::requiresPrack((SipResponse *)a2))
    {
      v156 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v156);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v156 + 8), (uint64_t)"waiting for PRACK to complete before sending precondition update", 64);
      *(_BYTE *)(v156 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v156 + 64))(v156, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v156 + 17) = 0;
    }
    else if (!v26 || (*(_DWORD *)(a2 + 88) - 200) >= 0xFFFFFF9C)
    {
      SipDialogFork::sendPreconditionUpdate((SipDialogFork *)v369, 1, (uint64_t)v334);
      ImsResult::~ImsResult((ImsResult *)v334);
    }
    goto LABEL_588;
  }
  v148 = v26 ^ 1;
  if ((*(_DWORD *)(a2 + 88) - 200) > 0x63)
    v148 = 1;
  if ((v148 & 1) != 0 || (SipSession::confirmed((SipSession *)a1) & 1) != 0)
  {
    *(_QWORD *)&v347 = 0;
    v345 = 0u;
    v346 = 0u;
    v343 = 0u;
    v344 = 0u;
    v341 = 0u;
    v342 = 0u;
    v339 = 0u;
    v340 = 0u;
    std::string::basic_string[abi:ne180100]<0>(&v371, "InvalidSdp");
    SipSessionInterface::terminationReason((std::__shared_weak_count *)a1, (uint64_t)&v371, (BambiCallTerminationReason *)&v339);
    if (SBYTE7(v372) < 0)
      operator delete((void *)v371);
    if (v26
      && (SipSession::confirmed((SipSession *)a1) & 1) == 0
      && SipSession::emergency((std::__shared_weak_count *)a1))
    {
      SipSessionInterface::stack((std::__shared_weak_count *)a1, &v371);
      v149 = (ImsPrefs *)SipStack::prefs((SipStack *)v371);
      EmergencyAnonymousAutomaticRedialKey = (void **)ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v149);
      v151 = ImsPrefs::prefWithKey(v149, EmergencyAnonymousAutomaticRedialKey);
      if (v151)
        v152 = (*(uint64_t (**)(void *))(*(_QWORD *)v151 + 40))(v151);
      else
        v152 = *((_BYTE *)EmergencyAnonymousAutomaticRedialKey + 57) != 0;
      v166 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
      if (*((_QWORD *)&v371 + 1))
      {
        v167 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
      if (v152)
        BYTE6(v347) = 1;
    }
    if (a1[1320])
    {
      v169 = qword_1ED7042F8;
      if (qword_1ED7042F8)
      {
        v170 = &qword_1ED7042F8;
        do
        {
          v171 = *(_DWORD *)(v169 + 32);
          v172 = v171 >= 0x1E8;
          if (v171 >= 0x1E8)
            v173 = (uint64_t *)v169;
          else
            v173 = (uint64_t *)(v169 + 8);
          if (v172)
            v170 = (uint64_t *)v169;
          v169 = *v173;
        }
        while (*v173);
        v174 = &ims::kEmptyString;
        if (v170 != &qword_1ED7042F8)
        {
          v175 = *((_DWORD *)v170 + 8);
          v176 = (__int128 *)(v170 + 5);
          if (v175 <= 0x1E8)
            v174 = v176;
        }
      }
      else
      {
        v174 = &ims::kEmptyString;
      }
      SipSession::logLazuliMessageSessionSetup((uint64_t)a1, (uint64_t)v174, 488);
    }
    SipSession::hangUp((uint64_t *)a1, (uint64_t)&v339, 0, (uint64_t)v335);
    ImsResult::~ImsResult((ImsResult *)v335);
    v177 = (std::__shared_weak_count *)*((_QWORD *)&v346 + 1);
    if (*((_QWORD *)&v346 + 1))
    {
      v178 = (unint64_t *)(*((_QWORD *)&v346 + 1) + 8);
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }
    v180 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
    if (*((_QWORD *)&v345 + 1))
    {
      v181 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
      do
        v182 = __ldaxr(v181);
      while (__stlxr(v182 - 1, v181));
      if (!v182)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
      }
    }
    if (SHIBYTE(v344) < 0)
      operator delete(*((void **)&v343 + 1));
    if (SBYTE7(v342) < 0)
      operator delete((void *)v341);
    if ((SHIBYTE(v340) & 0x80000000) == 0)
      goto LABEL_354;
    v165 = (void *)*((_QWORD *)&v339 + 1);
  }
  else
  {
    if (a1[1320])
    {
      v157 = qword_1ED7042F8;
      if (qword_1ED7042F8)
      {
        v158 = &qword_1ED7042F8;
        do
        {
          v159 = *(_DWORD *)(v157 + 32);
          v160 = v159 >= 0x25E;
          if (v159 >= 0x25E)
            v161 = (uint64_t *)v157;
          else
            v161 = (uint64_t *)(v157 + 8);
          if (v160)
            v158 = (uint64_t *)v157;
          v157 = *v161;
        }
        while (*v161);
        v162 = &ims::kEmptyString;
        if (v158 != &qword_1ED7042F8)
        {
          v163 = *((_DWORD *)v158 + 8);
          v164 = (__int128 *)(v158 + 5);
          if (v163 <= 0x25E)
            v162 = v164;
        }
      }
      else
      {
        v162 = &ims::kEmptyString;
      }
      SipSession::logLazuliMessageSessionSetup((uint64_t)a1, (uint64_t)v162, 606);
    }
    std::string::basic_string[abi:ne180100]<0>(&v339, "ReceivedRejectSdp");
    SipSession::bye((std::__shared_weak_count *)a1, (uint64_t)&v339, 0);
    ImsResult::~ImsResult((ImsResult *)v336);
    if ((SBYTE7(v340) & 0x80000000) == 0)
      goto LABEL_354;
    v165 = (void *)v339;
  }
  operator delete(v165);
LABEL_354:
  v25 = 0;
LABEL_589:
  v302 = v368;
  if (v368)
  {
    v303 = (unint64_t *)&v368->__shared_owners_;
    do
      v304 = __ldaxr(v303);
    while (__stlxr(v304 - 1, v303));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
      std::__shared_weak_count::__release_weak(v302);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v369 + 1);
  if (*((_QWORD *)&v369 + 1))
  {
LABEL_595:
    v305 = (unint64_t *)&v11->__shared_owners_;
    do
      v306 = __ldaxr(v305);
    while (__stlxr(v306 - 1, v305));
    if (!v306)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v25;
}

void sub_1BEF7655C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p)
{
  uint64_t v41;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v41 - 168);
  *(_QWORD *)(v41 - 144) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a11, *(_QWORD **)(v41 - 128));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x358]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x368]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x378]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x388]);
  _Unwind_Resume(a1);
}

void SipSession::handleBye(std::__shared_weak_count *a1, const SipRequest *a2, _QWORD *a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *shared_owners;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::string __p[24];
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  _BYTE v31[72];

  if (SipSession::established((SipSession *)a1))
  {
    v6 = (std::__shared_weak_count *)a1[10].__vftable;
    v7 = *a3 + 320;
    v8 = (*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_23_1);
    SipDialog::sendResponse(__p, v6, v7, v8, 200, (ImsResult *)v31);
    ImsResult::~ImsResult((ImsResult *)v31);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v29 = 0;
    v30 = 0;
    shared_owners = (std::__shared_weak_count *)a1[32].__shared_owners_;
    if (shared_owners && (v10 = std::__shared_weak_count::lock(shared_owners), (v30 = v10) != 0))
    {
      v11 = v10;
      v29 = a1[32].__vftable;
      v12 = (uint64_t)v29;
      bzero(__p, 0x250uLL);
      v26 = v12;
      v27 = v11;
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      bzero(__p, 0x250uLL);
      v26 = 0;
      v27 = 0;
    }
    BambiCallSessionTerminatedEvent::BambiCallSessionTerminatedEvent(__p, &v26);
    v15 = v27;
    if (v27)
    {
      v16 = (unint64_t *)&v27->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    SipSessionInterface::stack(a1, &v24);
    BambiCallSessionTerminationBaseEvent::setReasonFromIncomingByeOrCancelRequest((BambiCallSessionTerminationBaseEvent *)__p, a2, (const void ***)(v24 + 2392));
    v18 = v25;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    BambiCallSessionTerminationBaseEvent::setReferrerFromIncomingByeRequest((BambiCallSessionTerminationBaseEvent *)__p, a2);
    SipSession::terminateWithEvent((SipSession *)a1, (BambiCallEvent *)__p, 13);
    BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)__p);
    v21 = v30;
    if (v30)
    {
      v22 = (unint64_t *)&v30->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_1BEF76B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v19 - 136);
  _Unwind_Resume(a1);
}

uint64_t SipSession::established(SipSession *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v1 = *((_QWORD *)this + 89);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  v15 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  if (!v1)
  {
    v9 = 0;
    if (!v2)
      return v9;
    goto LABEL_16;
  }
  v5 = *((_QWORD *)this + 89);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 136))(v5);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v2 = v15;
  if (v15)
  {
LABEL_16:
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v9;
}

void sub_1BEF76C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipSession::handleOptions(_QWORD *a1, SipRequest *a2, uint64_t *a3)
{
  void *v6;
  void **p_lpsrc;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  int v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  _QWORD v53[9];
  uint64_t v54;
  std::__shared_weak_count *v55;
  void *lpsrc;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _QWORD v60[10];
  __int128 v61;
  __int128 __p;
  uint64_t v63;

  v63 = 0;
  v61 = 0u;
  __p = 0u;
  memset(v60, 0, sizeof(v60));
  SipResponse::SipResponse((SipResponse *)v60, 200, a2);
  v58 = 0;
  v59 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, a1 + 22);
  if (lpsrc
  {
    v58 = (uint64_t)v6;
    v59 = v57;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v58;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v8 = v57;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v58;
  if (v58)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1[30] + 208) + 136);
    v13 = *(void **)(v12 + 232);
    v14 = *(std::__shared_weak_count **)(v12 + 240);
    lpsrc = v13;
    v57 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v54 = v11;
    v55 = v59;
    if (v59)
    {
      v17 = (unint64_t *)&v59->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    SipOptionsManager::fillOptionsResponse((uint64_t)v13, a2, &v54, (SipResponse *)v60);
    v19 = v55;
    if (v55)
    {
      v20 = (unint64_t *)&v55->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v57;
    if (v57)
    {
      v23 = (unint64_t *)&v57->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = a1[30];
    if (v25 && (v26 = *(_QWORD *)(v25 + 208)) != 0)
      v27 = *(_QWORD *)(v26 + 136);
    else
      v27 = 0;
    v28 = *(std::__shared_weak_count **)(v27 + 16);
    if (v28 && (v29 = std::__shared_weak_count::lock(v28)) != 0)
    {
      v30 = v29;
      v31 = *(unsigned __int8 *)(*(_QWORD *)(v27 + 8) + 2657);
      v32 = (unint64_t *)&v29->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (v33)
      {
        if (!v31)
          goto LABEL_48;
LABEL_39:
        v34 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)"Routing incoming OPTIONS tags to Lazuli", 39);
        *(_BYTE *)(v34 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v34 + 17) = 0;
        v35 = *(_QWORD *)(*(_QWORD *)(a1[30] + 208) + 136);
        v36 = *(void **)(v35 + 208);
        v37 = *(std::__shared_weak_count **)(v35 + 216);
        lpsrc = v36;
        v57 = v37;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        (*(void (**)(void *, SipRequest *, _QWORD, _QWORD))(*(_QWORD *)v36 + 56))(v36, a2, DWORD2(v61), 0);
        if (v37)
        {
          v40 = (unint64_t *)&v37->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        goto LABEL_48;
      }
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v30);
      if (v31)
        goto LABEL_39;
    }
    else if (MEMORY[0xA61])
    {
      goto LABEL_39;
    }
LABEL_48:
    v42 = (std::__shared_weak_count *)a3[1];
    v51 = *a3;
    v52 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    (*(void (**)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t *))(*a1 + 240))(v53, a1, v60, &v51);
    ImsResult::~ImsResult((ImsResult *)v53);
    v45 = v52;
    if (v52)
    {
      v46 = (unint64_t *)&v52->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  v48 = v59;
  if (v59)
  {
    v49 = (unint64_t *)&v59->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v60[0] = off_1E78E40E8;
  if (SHIBYTE(v63) < 0)
    operator delete((void *)__p);
  SipMessage::~SipMessage((SipMessage *)v60);
}

void sub_1BEF77060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  SipResponse::~SipResponse(&a27);
  _Unwind_Resume(a1);
}

void SipSession::handleInfo(_QWORD *a1, SipRequest *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void (***v12)(_QWORD, SipRequest *);
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD v15[9];
  _OWORD v16[6];
  __int128 __p;
  uint64_t v18;

  v18 = 0;
  __p = 0u;
  memset(v16, 0, sizeof(v16));
  SipResponse::SipResponse((SipResponse *)v16, 200, a2);
  v6 = (std::__shared_weak_count *)a3[1];
  v13 = *a3;
  v14 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, _OWORD *, uint64_t *))(*a1 + 240))(v15, a1, v16, &v13);
  ImsResult::~ImsResult((ImsResult *)v15);
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(void (****)(_QWORD, SipRequest *))(*(_QWORD *)(*(_QWORD *)(a1[30] + 208) + 136) + 616);
  if (v12)
    (**v12)(v12, a2);
  *(_QWORD *)&v16[0] = off_1E78E40E8;
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p);
  SipMessage::~SipMessage((SipMessage *)v16);
}

void sub_1BEF771E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  SipResponse::~SipResponse((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SipSession::handleRequest(std::string *a1, const SipRequest *a2, uint64_t *a3)
{
  uint64_t v6;
  const std::string *v7;
  uint64_t v8;
  const std::string *v9;
  SipUriHeader *v10;
  __int128 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string::size_type v23;
  std::__shared_weak_count *data;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::string::size_type v35;
  std::string::size_type v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *size;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::string __p[3];
  void *v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;

  v6 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 64))(a1);
  (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handling ", 9);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = (const std::string *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  LoggableString::LoggableString((std::string *)v60, v7);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 40))(v6, v60);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" request in state ", 18);
  *(_BYTE *)(v6 + 17) = 0;
  v8 = (*(uint64_t (**)(std::string::size_type *))(a1[27].__r_.__value_.__l.__size_ + 24))(&a1[27].__r_.__value_.__l.__size_);
  v9 = (const std::string *)(*(uint64_t (**)(std::string::size_type *, uint64_t))(a1[27].__r_.__value_.__l.__size_
                                                                                         + 16))(&a1[27].__r_.__value_.__l.__size_, v8);
  LoggableString::LoggableString(__p, v9);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 40))(v6, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SBYTE7(v61) < 0)
    operator delete(v60[0]);
  v10 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
  if (v10)
    v11 = SipUriHeader::tag(v10);
  else
    v11 = &ims::kEmptyString;
  std::string::operator=(a1 + 66, (const std::string *)v11);
  v12 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v13 = v12[23];
  if ((v13 & 0x80u) == 0)
    v14 = v12[23];
  else
    v14 = *((_QWORD *)v12 + 1);
  if (v14 != 6)
    goto LABEL_28;
  if ((v13 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v12, "INVITE", *((_QWORD *)v12 + 1)))
      goto LABEL_28;
  }
  else if (v12[23])
  {
    v15 = "INVITE";
    while (*v12 == *(unsigned __int8 *)v15)
    {
      ++v12;
      ++v15;
      if (!--v13)
        goto LABEL_19;
    }
    goto LABEL_28;
  }
LABEL_19:
  if (a1[55].__r_.__value_.__r.__words[2])
  {
    v16 = (std::__shared_weak_count *)a3[1];
    v74 = *a3;
    v75 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    (*(void (**)(void **__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 240))(v60, a1);
    v19 = (*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)v60[1] + 24))(v60[1], v61) ^ 1;
    ImsResult::~ImsResult((ImsResult *)v60);
    v20 = v75;
    if (v75)
    {
      v21 = (unint64_t *)&v75->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    return v19;
  }
LABEL_28:
  v23 = a1[29].__r_.__value_.__r.__words[2];
  data = (std::__shared_weak_count *)a1[30].__r_.__value_.__l.__data_;
  if (!data)
    goto LABEL_33;
  v25 = (unint64_t *)&data->__shared_owners_;
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  do
    v27 = __ldaxr(v25);
  while (__stlxr(v27 - 1, v25));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))data->__on_zero_shared)(data);
    std::__shared_weak_count::__release_weak(data);
    if (v23)
    {
LABEL_34:
      v61 = 0u;
      v62 = 0u;
      *(_OWORD *)v60 = 0u;
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v70, &a1[7].__r_.__value_.__l.__size_);
      if (v70)
        v28 = v70 + 104;
      else
        v28 = 0;
      v72 = v28;
      v73 = v71;
      v70 = 0;
      v71 = 0;
      LoggableString::LoggableString((LoggableString *)__p, "handleRequest");
      SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v60, &v72, __p);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v29 = v73;
      if (v73)
      {
        v30 = (unint64_t *)&v73->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = v71;
      if (v71)
      {
        v33 = (unint64_t *)&v71->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = a1[29].__r_.__value_.__r.__words[2];
      v36 = a1[30].__r_.__value_.__r.__words[0];
      __p[0].__r_.__value_.__r.__words[0] = v35;
      __p[0].__r_.__value_.__l.__size_ = v36;
      if (v36)
      {
        v37 = (unint64_t *)(v36 + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = (std::__shared_weak_count *)a3[1];
      v68 = *a3;
      v69 = v39;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v42 = (*(uint64_t (**)(std::string::size_type, const SipRequest *, uint64_t *))(*(_QWORD *)v35 + 88))(v35, a2, &v68);
      v43 = v69;
      if (v69)
      {
        v44 = (unint64_t *)&v69->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
      if (__p[0].__r_.__value_.__l.__size_)
      {
        v47 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v60);
      if ((v42 & 1) != 0)
        return 1;
    }
  }
  else
  {
LABEL_33:
    if (v23)
      goto LABEL_34;
  }
  v67 = 0;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  *(_OWORD *)v60 = 0u;
  SipResponse::SipResponse((SipResponse *)v60, 405, a2);
  v49 = (std::__shared_weak_count *)a3[1];
  v57 = *a3;
  v58 = v49;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  (*(void (**)(std::string *__return_ptr, std::string *, void **, uint64_t *))(a1->__r_.__value_.__r.__words[0]
                                                                                       + 240))(__p, a1, v60, &v57);
  v52 = (*(uint64_t (**)(std::string::size_type, _QWORD))(*(_QWORD *)__p[0].__r_.__value_.__l.__size_ + 24))(__p[0].__r_.__value_.__l.__size_, LODWORD(__p[0].__r_.__value_.__r.__words[2]));
  ImsResult::~ImsResult((ImsResult *)__p);
  v53 = v58;
  if (v58)
  {
    v54 = (unint64_t *)&v58->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v19 = v52 ^ 1u;
  v60[0] = off_1E78E40E8;
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  SipMessage::~SipMessage((SipMessage *)v60);
  return v19;
}

void sub_1BEF77770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  ImsResult::~ImsResult((ImsResult *)&a24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29 - 64);
  _Unwind_Resume(a1);
}

uint64_t SipSession::handleResponse(std::string *a1, SipResponse *a2, _QWORD *a3)
{
  SipUriHeader *v6;
  __int128 *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  const std::string *v16;
  uint64_t v17;
  const std::string *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string::pointer data;
  SipUriHeader *v27;
  __int128 *v28;
  void **v29;
  std::__shared_weak_count *v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  std::string::size_type v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  SipStack *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  unint64_t *v54;
  unint64_t v55;
  std::string::size_type v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void **v68;
  void **v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *size;
  std::__shared_weak_count *v75;
  std::string::size_type v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  std::string::size_type v85;
  unint64_t *p_shared_weak_owners;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  SipStack *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::string::pointer v96;
  uint64_t v97;
  SipUserAgent *v98;
  int v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  std::string::pointer v105;
  uint64_t v106;
  SipUserAgent *v107;
  unsigned int v108;
  ImsPrefs *v109;
  void **v110;
  void *v111;
  char v112;
  std::string::pointer v113;
  SipUriHeader *v114;
  __int128 *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  void **v119;
  std::__shared_weak_count *v120;
  char *v121;
  unint64_t *v122;
  unint64_t v123;
  _DWORD *v124;
  unsigned int v125;
  uint64_t v126;
  SipUriHeader *v127;
  __int128 *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void **v142;
  unsigned int v143;
  uint64_t v144;
  SipRequest *RequestInDialog;
  const void *v146;
  void *v147;
  SipHeader *v148;
  SipHeader *v149;
  SipRAckHeader *v150;
  std::string::size_type v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  _BOOL4 v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  __int128 v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  std::string::size_type v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  __int128 v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  SipStack *v183;
  std::string::size_type v184;
  std::string::size_type v185;
  unint64_t *v186;
  unint64_t v187;
  _BOOL4 v188;
  uint64_t (*v189)(std::string *);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t (*v194)(std::string *);
  uint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  SipUriHeader *v202;
  __int128 *v203;
  char *v204;
  std::__shared_weak_count *v205;
  uint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  __int128 *v210;
  __int128 *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v231;
  _BYTE *v232;
  void **v233;
  std::__shared_weak_count *v234;
  std::__shared_weak_count *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  char *v238;
  std::__shared_weak_count *v239;
  std::string::size_type v240;
  std::__shared_weak_count *v241;
  _BYTE v242[72];
  char *v243;
  std::__shared_weak_count *v244;
  char *v245;
  std::__shared_weak_count *v246;
  __int128 __p;
  __int128 v248;
  __int128 v249;
  _QWORD v250[2];
  __int128 *v251[2];
  std::string v252;
  void *v253;
  char v254;
  std::string::size_type v255;
  std::__shared_weak_count *v256;
  __int128 v257;
  __int128 v258;
  SipStack *v259;
  std::__shared_weak_count *v260;
  _BYTE v261[24];
  _BYTE *v262;
  uint64_t v263;

  v263 = *MEMORY[0x1E0C80C00];
  v6 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
  if (v6)
    v7 = SipUriHeader::tag(v6);
  else
    v7 = &ims::kEmptyString;
  std::string::operator=(a1 + 66, (const std::string *)v7);
  v8 = (std::__shared_weak_count *)a3[1];
  v250[0] = *a3;
  v250[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = SipSessionInterface::handleResponse((uint64_t)a1, (uint64_t)a2, (uint64_t)v250);
  v12 = v11;
  if (!v8)
    goto LABEL_11;
  v13 = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if ((v12 & 1) != 0)
      return 1;
  }
  else
  {
LABEL_11:
    if ((v11 & 1) != 0)
      return 1;
  }
  v15 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 64))(a1);
  (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"handling ", 9);
  *(_BYTE *)(v15 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" response to ", 13);
  *(_BYTE *)(v15 + 17) = 0;
  v16 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 288) + 112))(*(_QWORD *)(*a3 + 288));
  LoggableString::LoggableString(&v252, v16);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v15 + 40))(v15, &v252);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" request in state ", 18);
  *(_BYTE *)(v15 + 17) = 0;
  v17 = (*(uint64_t (**)(std::string::size_type *))(a1[27].__r_.__value_.__l.__size_ + 24))(&a1[27].__r_.__value_.__l.__size_);
  v18 = (const std::string *)(*(uint64_t (**)(std::string::size_type *, uint64_t))(a1[27].__r_.__value_.__l.__size_
                                                                                          + 16))(&a1[27].__r_.__value_.__l.__size_, v17);
  LoggableString::LoggableString((std::string *)&__p, v18);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 40))(v15, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  if (SBYTE7(v248) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  v248 = 0u;
  v249 = 0u;
  __p = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v259, &a1[7].__r_.__value_.__l.__size_);
  if (v259)
    v19 = (char *)v259 + 104;
  else
    v19 = 0;
  v245 = v19;
  v246 = v260;
  v259 = 0;
  v260 = 0;
  LoggableString::LoggableString((LoggableString *)&v252, "handleResponse");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)&__p, (uint64_t *)&v245, &v252);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  v20 = v246;
  if (v246)
  {
    v21 = (unint64_t *)&v246->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v260;
  if (v260)
  {
    v24 = (unint64_t *)&v260->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  data = a1[10].__r_.__value_.__l.__data_;
  v27 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
  if (v27)
    v28 = SipUriHeader::tag(v27);
  else
    v28 = &ims::kEmptyString;
  v29 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(data + 2040), (void **)v28);
  if (data + 2048 == (std::string::pointer)v29)
  {
    v31 = 0;
    v243 = 0;
    v244 = 0;
  }
  else
  {
    v31 = (char *)v29[7];
    v30 = (std::__shared_weak_count *)v29[8];
    v243 = v31;
    v244 = v30;
    if (v30)
    {
      v32 = (unint64_t *)&v30->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
  }
  v34 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 288) + 112))(*(_QWORD *)(*a3 + 288));
  v35 = v34[23];
  if ((v35 & 0x80u) == 0)
    v36 = v34[23];
  else
    v36 = *((_QWORD *)v34 + 1);
  if (v36 == 5)
  {
    if ((v35 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v34, "PRACK", *((_QWORD *)v34 + 1)))
        goto LABEL_53;
    }
    else if (v34[23])
    {
      v37 = "PRACK";
      while (*v34 == *(unsigned __int8 *)v37)
      {
        ++v34;
        ++v37;
        if (!--v35)
          goto LABEL_60;
      }
      goto LABEL_53;
    }
LABEL_60:
    if ((*((_DWORD *)a2 + 22) - 200) <= 0x63)
    {
      if (v31)
      {
        v43 = SipMessage::body<SipSdpBody>((uint64_t)a2);
        if (v43)
        {
          v45 = *((_QWORD *)v43 + 1);
          v44 = (std::__shared_weak_count *)*((_QWORD *)v43 + 2);
          if (v44)
          {
            v46 = (unint64_t *)&v44->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
            do
              v48 = __ldaxr(v46);
            while (__stlxr(v48 - 1, v46));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          if (v45)
          {
            v49 = (SipStack *)*((_QWORD *)v243 + 82);
            v50 = (std::__shared_weak_count *)*((_QWORD *)v243 + 83);
            v259 = v49;
            v260 = v50;
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
            }
            SipOfferAnswer::updateWithIncomingResponse((SipOfferAnswer *)v49, (uint64_t)a2, (std::string *)(*a3 + 320), (uint64_t)&v252);
            v53 = (*(uint64_t (**)(std::string::size_type, _QWORD))(*(_QWORD *)v252.__r_.__value_.__l.__size_
                                                                            + 24))(v252.__r_.__value_.__l.__size_, LODWORD(v252.__r_.__value_.__r.__words[2]));
            ImsResult::~ImsResult((ImsResult *)&v252);
            if (v50)
            {
              v54 = (unint64_t *)&v50->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            if (v53)
            {
              std::string::basic_string[abi:ne180100]<0>(&v252, "InvalidSdp");
              SipSession::hangUp((std::__shared_weak_count *)a1, (uint64_t)&v252, 0, (uint64_t)v242);
              ImsResult::~ImsResult((ImsResult *)v242);
              if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v252.__r_.__value_.__l.__data_);
            }
            else if (!SipSession::confirmed((SipSession *)a1) || a1[35].__r_.__value_.__s.__data_[17])
            {
              SipSession::confirmed((SipSession *)a1);
              SipPreconditions::updateFromIncomingMessage((uint64_t)&a1[58].__r_.__value_.__l.__size_, (std::string *)(v243 + 152), (uint64_t)a2);
            }
          }
        }
      }
      goto LABEL_332;
    }
    *(_OWORD *)&v252.__r_.__value_.__l.__data_ = 0uLL;
    size = (std::__shared_weak_count *)a1[32].__r_.__value_.__l.__size_;
    if (size)
    {
      v75 = std::__shared_weak_count::lock(size);
      v252.__r_.__value_.__l.__size_ = (std::string::size_type)v75;
      if (v75)
      {
        v76 = a1[32].__r_.__value_.__r.__words[0];
        v252.__r_.__value_.__r.__words[0] = v76;
        if (v76)
        {
          v77 = v75;
          v78 = *(_QWORD *)(v76 + 408);
          if (v78)
          {
            v240 = v76;
            v241 = v77;
            v79 = (unint64_t *)&v77->__shared_owners_;
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
            (*(void (**)(uint64_t, SipResponse *, std::string::size_type *))(*(_QWORD *)v78 + 24))(v78, a2, &v240);
            v81 = v241;
            if (v241)
            {
              v82 = (unint64_t *)&v241->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
          }
        }
      }
    }
    v85 = a1[7].__r_.__value_.__l.__size_;
    v84 = (std::__shared_weak_count *)a1[7].__r_.__value_.__r.__words[2];
    if (v84)
    {
      p_shared_weak_owners = (unint64_t *)&v84->__shared_weak_owners_;
      do
        v87 = __ldxr(p_shared_weak_owners);
      while (__stxr(v87 + 1, p_shared_weak_owners));
      do
        v88 = __ldxr(p_shared_weak_owners);
      while (__stxr(v88 + 1, p_shared_weak_owners));
    }
    v89 = SipMessage::body<SipSdpBody>(*(_QWORD *)(*a3 + 288));
    if (v89)
    {
      v90 = (SipStack *)*((_QWORD *)v89 + 1);
      v91 = (std::__shared_weak_count *)*((_QWORD *)v89 + 2);
      v259 = v90;
      v260 = v91;
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      if (v90)
      {
        if (v91)
        {
          v94 = (unint64_t *)&v91->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        goto LABEL_152;
      }
    }
    else
    {
      v91 = 0;
      v259 = 0;
      v260 = 0;
    }
    v96 = a1[10].__r_.__value_.__l.__data_;
    if (v96 && (v97 = *((_QWORD *)v96 + 26)) != 0)
      v98 = *(SipUserAgent **)(v97 + 136);
    else
      v98 = 0;
    v99 = *(_DWORD *)(SipUserAgent::config(v98) + 860);
    if (v91)
    {
      v100 = (unint64_t *)&v91->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (v99)
    {
      LODWORD(a1[71].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 22);
      if (v84)
      {
        v102 = (unint64_t *)&v84->__shared_weak_owners_;
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
      v262 = 0;
      v104 = operator new(0x20uLL);
      *v104 = &off_1E78CB1A8;
      v104[1] = a1;
      v104[2] = v85;
      v104[3] = v84;
      v262 = v104;
      v105 = a1[10].__r_.__value_.__l.__data_;
      if (v105 && (v106 = *((_QWORD *)v105 + 26)) != 0)
        v107 = *(SipUserAgent **)(v106 + 136);
      else
        v107 = 0;
      v116 = SipUserAgent::config(v107);
      SipTimerContainer::startTimer(a1[11].__r_.__value_.__r.__words, (uint64_t)"PrackErrorDelayTimer", (uint64_t)v261, *(_DWORD *)(v116 + 860), 0);
      v117 = v262;
      if (v262 == v261)
      {
        v118 = 4;
        v117 = v261;
      }
      else
      {
        if (!v262)
          goto LABEL_198;
        v118 = 5;
      }
      (*(void (**)(void))(*v117 + 8 * v118))();
      goto LABEL_198;
    }
LABEL_152:
    v108 = *((_DWORD *)a2 + 22);
    if (v108 == 481)
    {
      SipSessionInterface::stack((std::__shared_weak_count *)a1, &v259);
      v109 = (ImsPrefs *)SipStack::prefs(v259);
      v110 = (void **)ImsPrefs::getRemoveForkOnTransactionDoesNotExistKey(v109);
      v111 = ImsPrefs::prefWithKey(v109, v110);
      if (v111)
        v112 = (*(uint64_t (**)(void *))(*(_QWORD *)v111 + 40))(v111);
      else
        v112 = *((_BYTE *)v110 + 57) != 0;
      v129 = v260;
      if (v260)
      {
        v130 = (unint64_t *)&v260->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
          std::__shared_weak_count::__release_weak(v129);
        }
      }
      if ((v112 & 1) != 0)
      {
        v132 = (uint64_t)a1[10].__r_.__value_.__l.__data_;
        v133 = v243;
        v134 = v244;
        v238 = v243;
        v239 = v244;
        if (v244)
        {
          v135 = (unint64_t *)&v244->__shared_owners_;
          do
            v136 = __ldxr(v135);
          while (__stxr(v136 + 1, v135));
        }
        if (v133)
          SipDialog::removeForkWithRemoteTag(v132, (std::string *)(v133 + 152));
        if (v134)
        {
          v137 = (unint64_t *)&v134->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
        }
        goto LABEL_198;
      }
      v108 = *((_DWORD *)a2 + 22);
    }
    SipSession::handlePrackErrorResponse((SipSession *)a1, v108);
LABEL_198:
    if (v84)
    {
      std::__shared_weak_count::__release_weak(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
    v139 = (std::__shared_weak_count *)v252.__r_.__value_.__l.__size_;
    if (!v252.__r_.__value_.__l.__size_)
      goto LABEL_332;
    v140 = (unint64_t *)(v252.__r_.__value_.__l.__size_ + 8);
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    goto LABEL_330;
  }
LABEL_53:
  v38 = a1[29].__r_.__value_.__r.__words[2];
  v39 = (std::__shared_weak_count *)a1[30].__r_.__value_.__l.__data_;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    do
      v42 = __ldaxr(v40);
    while (__stlxr(v42 - 1, v40));
    if (v42)
    {
      if (!v38)
        goto LABEL_100;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if (!v38)
        goto LABEL_100;
    }
    v56 = a1[30].__r_.__value_.__r.__words[0];
    v38 = a1[29].__r_.__value_.__r.__words[2];
    v252.__r_.__value_.__r.__words[0] = v38;
    v252.__r_.__value_.__l.__size_ = v56;
    if (v56)
    {
      v57 = (unint64_t *)(v56 + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
  }
  else
  {
    if (!v38)
      goto LABEL_100;
    *(_OWORD *)&v252.__r_.__value_.__l.__data_ = a1[29].__r_.__value_.__r.__words[2];
  }
  v59 = (std::__shared_weak_count *)a3[1];
  v236 = *a3;
  v237 = v59;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  (*(void (**)(std::string::size_type, SipResponse *, uint64_t *))(*(_QWORD *)v38 + 96))(v38, a2, &v236);
  v62 = v237;
  if (v237)
  {
    v63 = (unint64_t *)&v237->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)v252.__r_.__value_.__l.__size_;
  if (v252.__r_.__value_.__l.__size_)
  {
    v66 = (unint64_t *)(v252.__r_.__value_.__l.__size_ + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_100:
  if (!SipResponse::requiresPrack(a2))
    goto LABEL_332;
  if (!*a3
  {
    v235 = 0;
    goto LABEL_327;
  }
  v69 = v68;
  v70 = (std::__shared_weak_count *)a3[1];
  v235 = v70;
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
    v234 = v70;
    do
      v73 = __ldxr(v71);
    while (__stxr(v73 + 1, v71));
  }
  else
  {
    v234 = 0;
  }
  v233 = v68;
  if (SipResponse::requiresPrack(a2))
  {
    v113 = a1[10].__r_.__value_.__l.__data_;
    v114 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
    if (v114)
      v115 = SipUriHeader::tag(v114);
    else
      v115 = &ims::kEmptyString;
    v119 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v113 + 2040), (void **)v115);
    if (v113 + 2048 == (std::string::pointer)v119)
    {
      v120 = 0;
      v259 = 0;
      v260 = 0;
    }
    else
    {
      v121 = (char *)v119[7];
      v120 = (std::__shared_weak_count *)v119[8];
      v259 = (SipStack *)v121;
      v260 = v120;
      if (v120)
      {
        v122 = (unint64_t *)&v120->__shared_owners_;
        do
          v123 = __ldxr(v122);
        while (__stxr(v123 + 1, v122));
      }
      if (v121)
      {
        v124 = SipMessage::header<SipRSeqHeader>((uint64_t)a2);
        if (v124)
          v125 = v124[15];
        else
          v125 = 0;
        v142 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v121 + 672), v69 + 40);
        if (v121 + 680 != (char *)v142)
        {
          v143 = *((_DWORD *)v142 + 14);
          if (v143)
          {
            if (v125 <= v143)
            {
              v182 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 64))(a1);
              (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v182);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v182 + 8), (uint64_t)"ignoring duplicate response rseq=", 33);
              *(_BYTE *)(v182 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v182 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v182 + 8), (uint64_t)", cseq=", 7);
              *(_BYTE *)(v182 + 17) = 0;
              SipMessage::header<SipCSeqHeader>((uint64_t)a2);
              std::ostream::operator<<();
              *(_BYTE *)(v182 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v182 + 64))(v182, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v182 + 17) = 0;
              goto LABEL_317;
            }
            if (v125 > v143 + 1)
            {
              v144 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 64))(a1);
              (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v144);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v144 + 8), (uint64_t)"received out-of-order response (rseq=", 37);
              *(_BYTE *)(v144 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v144 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v144 + 8), (uint64_t)", expecting ", 12);
              *(_BYTE *)(v144 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v144 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v144 + 8), (uint64_t)")", 1);
              *(_BYTE *)(v144 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v144 + 64))(v144, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v144 + 17) = 0;
LABEL_317:
              if (v120)
              {
                v222 = (unint64_t *)&v120->__shared_owners_;
                do
                  v223 = __ldaxr(v222);
                while (__stlxr(v223 - 1, v222));
                if (!v223)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
              }
              goto LABEL_322;
            }
          }
        }
        RequestInDialog = SipDialog::createRequestInDialog((uint64_t)a1[10].__r_.__value_.__l.__data_, (const std::string *)"PRACK", 0);
        v146 = (const void *)SipMessageEncodingMap::headerPrototypeWithName(*((_QWORD **)RequestInDialog + 10), (uint64_t)"RAck");
        if (v146
        {
        }
        else
        {
          v150 = 0;
        }
        if ((SipRAckHeader::fromResponse(v150, a2) & 1) == 0)
        {
          v181 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 32))(a1);
          (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v181);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v181 + 8), (uint64_t)"unable to initialize PRACK from response (missing RSeq or CSeq)", 63);
          *(_BYTE *)(v181 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v181 + 64))(v181, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v181 + 17) = 0;
          if (v150)
            (*(void (**)(SipRAckHeader *))(*(_QWORD *)v150 + 8))(v150);
          goto LABEL_317;
        }
        v258 = 0uLL;
        v151 = *((_QWORD *)v121 + 82);
        v152 = (std::__shared_weak_count *)*((_QWORD *)v121 + 83);
        v252.__r_.__value_.__r.__words[0] = v151;
        v252.__r_.__value_.__l.__size_ = (std::string::size_type)v152;
        if (v152)
        {
          v153 = (unint64_t *)&v152->__shared_owners_;
          do
            v154 = __ldxr(v153);
          while (__stxr(v154 + 1, v153));
        }
        v155 = SipOfferAnswer::localAnswerPending(*(SipOfferAnswer **)(*(_QWORD *)(v151 + 152) + 16), *(std::__shared_weak_count **)(*(_QWORD *)(v151 + 152) + 24));
        if (v152)
        {
          v156 = (unint64_t *)&v152->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v152);
          }
        }
        if (v155)
        {
          v158 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 64))(a1);
          (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v158);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v158 + 8), (uint64_t)"we need to send an SDP answer", 29);
          *(_BYTE *)(v158 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v158 + 64))(v158, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v158 + 17) = 0;
          (*(void (**)(std::string *__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 128))(&v252, a1);
          v159 = *(_OWORD *)&v252.__r_.__value_.__l.__data_;
          if (v252.__r_.__value_.__l.__size_)
          {
            v160 = (unint64_t *)(v252.__r_.__value_.__l.__size_ + 8);
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v159 + 1) + 16))(*((_QWORD *)&v159 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v159 + 1));
            }
          }
          if ((_QWORD)v159)
          {
            (*(void (**)(std::string::size_type *__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0]
                                                                                        + 128))(&v255, a1);
            v163 = v255;
            v162 = v256;
            v164 = operator new(0x1D0uLL);
            v165 = v164;
            v164[1] = 0;
            v164[2] = 0;
            *v164 = &off_1E78BB3E0;
            v166 = (uint64_t)(v164 + 3);
            v252.__r_.__value_.__r.__words[0] = v163;
            v252.__r_.__value_.__l.__size_ = (std::string::size_type)v162;
            if (v162)
            {
              v167 = (unint64_t *)&v162->__shared_owners_;
              do
                v168 = __ldxr(v167);
              while (__stxr(v168 + 1, v167));
            }
            SDPModel::SDPModel((uint64_t)(v164 + 3), (uint64_t *)&v252);
            if (v162)
            {
              v169 = (unint64_t *)&v162->__shared_owners_;
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                std::__shared_weak_count::__release_weak(v162);
              }
            }
            *(_QWORD *)&v257 = v166;
            *((_QWORD *)&v257 + 1) = v165;
            std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v257, v165 + 5, v166);
            v171 = v257;
            v257 = 0uLL;
            v172 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
            v258 = v171;
            if (v172)
            {
              v173 = (unint64_t *)&v172->__shared_owners_;
              do
                v174 = __ldaxr(v173);
              while (__stlxr(v174 - 1, v173));
              if (!v174)
              {
                ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                std::__shared_weak_count::__release_weak(v172);
              }
            }
            v175 = (std::__shared_weak_count *)*((_QWORD *)&v257 + 1);
            if (*((_QWORD *)&v257 + 1))
            {
              v176 = (unint64_t *)(*((_QWORD *)&v257 + 1) + 8);
              do
                v177 = __ldaxr(v176);
              while (__stlxr(v177 - 1, v176));
              if (!v177)
              {
                ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                std::__shared_weak_count::__release_weak(v175);
              }
            }
            v178 = v256;
            if (v256)
            {
              v179 = (unint64_t *)&v256->__shared_owners_;
              do
                v180 = __ldaxr(v179);
              while (__stlxr(v180 - 1, v179));
              if (!v180)
              {
                ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                std::__shared_weak_count::__release_weak(v178);
              }
            }
            goto LABEL_274;
          }
          v192 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 56))(a1);
          (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v192);
          v191 = ImsOutStream::operator<<(v192, "no local SDP available");
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v191 + 64))(v191, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        else
        {
          v183 = v259;
          if (SipPreconditions::needToSendUpdateInFork((uint64_t)&a1[58].__r_.__value_.__l.__size_, (void **)v259 + 19))
          {
            if (a1[35].__r_.__value_.__s.__data_[18])
            {
              v184 = *((_QWORD *)v183 + 82);
              v185 = *((_QWORD *)v183 + 83);
              v252.__r_.__value_.__r.__words[0] = v184;
              v252.__r_.__value_.__l.__size_ = v185;
              if (v185)
              {
                v186 = (unint64_t *)(v185 + 8);
                do
                  v187 = __ldxr(v186);
                while (__stxr(v187 + 1, v186));
              }
              v188 = SipOfferAnswer::localSdpPending(*(SipOfferAnswer **)(*(_QWORD *)(v184 + 152) + 16), *(std::__shared_weak_count **)(*(_QWORD *)(v184 + 152) + 24));
              std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v252);
              v189 = *(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 64);
              if (!v188)
              {
                v231 = v189(a1);
                (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v231);
                v232 = (_BYTE *)ImsOutStream::operator<<(v231, "need to update preconditions, so let's send it in our PRACK");
                (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v232 + 64))(v232, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                v232[17] = 0;
                SipDialogFork::createSdpOffer((SipDialogFork *)v183, "PRACK", (unsigned __int8 *)&SipSession::kUpdateTypePreconditions, &v252);
                std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)&v258, (__int128 *)&v252);
                std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v252);
                goto LABEL_274;
              }
              v190 = v189(a1);
              (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v190);
              v191 = ImsOutStream::operator<<(v190, "need to update preconditions, but we already have an outstanding offer");
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v191 + 64))(v191, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            else
            {
              v193 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 64))(a1);
              (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v193);
              v191 = ImsOutStream::operator<<(v193, "sending preconditions in PRACK is not enabled");
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v191 + 64))(v191, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
          }
          else
          {
            v191 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 64))(a1);
            (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v191);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v191 + 8), (uint64_t)"We neither have a local SDP answer pending nor do we need to update preconditions.", 82);
            *(_BYTE *)(v191 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v191 + 64))(v191, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
        }
        *(_BYTE *)(v191 + 17) = 0;
LABEL_274:
        v194 = *(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 64);
        if ((_QWORD)v258)
        {
          v195 = v194(a1);
          (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v195);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v195 + 8), (uint64_t)"adding SDP to prack", 19);
          *(_BYTE *)(v195 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v195 + 64))(v195, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v195 + 17) = 0;
          v196 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
          v257 = v258;
          if (*((_QWORD *)&v258 + 1))
          {
            v197 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
            do
              v198 = __ldxr(v197);
            while (__stxr(v198 + 1, v197));
          }
          SipMessage::setSdp((uint64_t)RequestInDialog, (uint64_t *)&v257);
          if (v196)
          {
            v199 = (unint64_t *)&v196->__shared_owners_;
            do
              v200 = __ldaxr(v199);
            while (__stlxr(v200 - 1, v199));
            if (!v200)
            {
              ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
              std::__shared_weak_count::__release_weak(v196);
            }
          }
          SipPreconditions::addPreconditionsToOutgoingRequest((uint64_t)&a1[58].__r_.__value_.__l.__size_, (uint64_t)v259 + 152, (uint64_t)RequestInDialog, 0);
        }
        else
        {
          v201 = v194(a1);
          (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v201);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v201 + 8), (uint64_t)"PRACK doesn't need SDP", 22);
          *(_BYTE *)(v201 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v201 + 64))(v201, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v201 + 17) = 0;
        }
        v255 = 0;
        v256 = 0;
        v202 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
        if (v202)
          v203 = SipUriHeader::tag(v202);
        else
          v203 = &ims::kEmptyString;
        SipSession::sendRequest(RequestInDialog, (uint64_t)a1, (uint64_t)v203, &v255);
        if (v255)
        {
          v204 = SipMessage::body<SipSdpBody>((uint64_t)RequestInDialog);
          if (v204)
          {
            v206 = *((_QWORD *)v204 + 1);
            v205 = (std::__shared_weak_count *)*((_QWORD *)v204 + 2);
            if (v205)
            {
              v207 = (unint64_t *)&v205->__shared_owners_;
              do
                v208 = __ldxr(v207);
              while (__stxr(v208 + 1, v207));
              do
                v209 = __ldaxr(v207);
              while (__stlxr(v209 - 1, v207));
              if (!v209)
              {
                ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                std::__shared_weak_count::__release_weak(v205);
              }
            }
            if (v206)
            {
              v210 = (__int128 *)*((_QWORD *)v259 + 82);
              v211 = (__int128 *)*((_QWORD *)v259 + 83);
              v251[0] = v210;
              v251[1] = v211;
              if (v211)
              {
                v212 = (unint64_t *)v211 + 1;
                do
                  v213 = __ldxr(v212);
                while (__stxr(v213 + 1, v212));
              }
              SipOfferAnswer::updateWithOutgoingMessage((SipOfferAnswer *)v210, (uint64_t)RequestInDialog, (std::string *)(v255 + 320), (uint64_t)&v252);
              ImsResult::~ImsResult((ImsResult *)&v252);
              if (v211)
              {
                v214 = (unint64_t *)v211 + 1;
                do
                  v215 = __ldaxr(v214);
                while (__stlxr(v215 - 1, v214));
                if (!v215)
                {
                  (*(void (**)(__int128 *))(*(_QWORD *)v211 + 16))(v211);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v211);
                }
              }
            }
          }
          v251[0] = (__int128 *)(v233 + 40);
          *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v259 + 84, v233 + 40, (uint64_t)&std::piecewise_construct, v251)+ 14) = v125;
        }
        (*(void (**)(SipRequest *))(*(_QWORD *)RequestInDialog + 8))(RequestInDialog);
        v216 = v256;
        if (v256)
        {
          v217 = (unint64_t *)&v256->__shared_owners_;
          do
            v218 = __ldaxr(v217);
          while (__stlxr(v218 - 1, v217));
          if (!v218)
          {
            ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
            std::__shared_weak_count::__release_weak(v216);
          }
        }
        v219 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
        if (*((_QWORD *)&v258 + 1))
        {
          v220 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
          do
            v221 = __ldaxr(v220);
          while (__stlxr(v221 - 1, v220));
          if (!v221)
          {
            ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
            std::__shared_weak_count::__release_weak(v219);
          }
        }
        v120 = v260;
        goto LABEL_317;
      }
    }
    v126 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 56))(a1);
    (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v126);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v126 + 8), (uint64_t)"sendPrack: no fork with remote tag ", 35);
    *(_BYTE *)(v126 + 17) = 0;
    v127 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
    if (v127)
      v128 = SipUriHeader::tag(v127);
    else
      v128 = &ims::kEmptyString;
    ObfuscatedString::ObfuscatedString((uint64_t)&v252, (const std::string *)v128);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v126 + 56))(v126, &v252);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v126 + 64))(v126, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v126 + 17) = 0;
    if (v254 < 0)
      operator delete(v253);
    if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v252.__r_.__value_.__l.__data_);
    goto LABEL_317;
  }
LABEL_322:
  if (v234)
  {
    v224 = (unint64_t *)&v234->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
LABEL_327:
  v139 = v235;
  if (v235)
  {
    v226 = (unint64_t *)&v235->__shared_owners_;
    do
      v141 = __ldaxr(v226);
    while (__stlxr(v141 - 1, v226));
LABEL_330:
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
LABEL_332:
  v227 = v244;
  if (v244)
  {
    v228 = (unint64_t *)&v244->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&__p);
  return 1;
}

void sub_1BEF78F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v52 - 160);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v52 - 144);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t SipSession::handleTransactionError(std::__shared_weak_count *a1, uint64_t a2, _QWORD *a3)
{
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  __int128 *v16;
  std::string *p_p;
  const char *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  void (__cdecl *v21)(std::__shared_weak_count *__hidden);
  SipUserAgent *v22;
  uint64_t v23;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  void (__cdecl *v27)(std::__shared_weak_count *__hidden);
  SipUserAgent *v28;
  SipUriHeader *v29;
  __int128 *v30;
  uint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  SipUriHeader *v33;
  void **v34;
  void **v35;
  std::__shared_weak_count *v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  void *shared_weak_owners;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  void *v61;
  std::__shared_weak_count *v62;
  char v63;
  char v64[72];
  std::string __p;
  char *v66;
  std::__shared_weak_count *v67;
  _OWORD v68[3];

  memset(v68, 0, sizeof(v68));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v61, &a1[7].__shared_owners_);
  if (v61)
    v6 = (char *)v61 + 104;
  else
    v6 = 0;
  v66 = v6;
  v67 = v62;
  v61 = 0;
  v62 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "handleTransactionError");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v68, (uint64_t *)&v66, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = v67;
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v62;
  if (v62)
  {
    v11 = (unint64_t *)&v62->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = ((uint64_t (*)(std::__shared_weak_count *))a1->__vftable[1].__get_deleter)(a1);
  ((void (*)(std::__shared_weak_count *, uint64_t))a1->__on_zero_shared)(a1, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"SipSession::handleTransactionError", 34);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  memset(&__p, 0, sizeof(__p));
  v14 = *a3;
  v15 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(*a3 + 376, (void **)"UpdateType");
  if ((void **)(v14 + 384) == v15)
    v16 = &ims::kEmptyString;
  else
    v16 = (__int128 *)(v15 + 7);
  if (*((char *)v16 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  else
    __p = *(std::string *)v16;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (byte_1ED70C84F >= 0)
    v18 = (const char *)&SipSession::kUpdateTypeEmergencyLocationUpdate;
  else
    v18 = (const char *)SipSession::kUpdateTypeEmergencyLocationUpdate;
  if (!strcasecmp((const char *)p_p, v18))
  {
    v23 = ((uint64_t (*)(std::__shared_weak_count *))a1->__vftable[1].__get_deleter)(a1);
    ((void (*)(std::__shared_weak_count *, uint64_t))a1->__on_zero_shared)(a1, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"ignoring emergency location update transaction error", 52);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_37:
    *(_BYTE *)(v23 + 17) = 0;
    goto LABEL_38;
  }
  v19 = *a3;
  if ((void **)(v19 + 384) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(*a3 + 376, (void **)"SessionRefresh"))
  {
    v20 = a1[10].__vftable;
    if (v20 && (v21 = v20[5].~__shared_weak_count_0) != 0)
      v22 = (SipUserAgent *)*((_QWORD *)v21 + 17);
    else
      v22 = 0;
    if (*(_BYTE *)(SipUserAgent::config(v22) + 1152))
    {
      v23 = ((uint64_t (*)(std::__shared_weak_count *))a1->__vftable[1].__get_deleter)(a1);
      ((void (*)(std::__shared_weak_count *, uint64_t))a1->__on_zero_shared)(a1, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"ignoring session refresh transaction error", 42);
      *(_BYTE *)(v23 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_37;
    }
    if (*(uint64_t **)(a2 + 8) == &SipResultDomain::_domain && *(_DWORD *)(a2 + 16) == 408)
    {
      v25 = ((uint64_t (*)(std::__shared_weak_count *))a1->__vftable[1].__on_zero_shared)(a1);
      ((void (*)(std::__shared_weak_count *, uint64_t))a1->__on_zero_shared)(a1, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"timed out sending session refresh.  Terminating session.", 56);
      *(_BYTE *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v25 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v61, "SessionExpired");
      SipSession::bye(a1, (uint64_t)&v61, 0);
      ImsResult::~ImsResult((ImsResult *)v64);
      if (v63 < 0)
        operator delete(v61);
      goto LABEL_38;
    }
  }
  v26 = a1[10].__vftable;
  if (v26 && (v27 = v26[5].~__shared_weak_count_0) != 0)
    v28 = (SipUserAgent *)*((_QWORD *)v27 + 17);
  else
    v28 = 0;
  if (*(_BYTE *)(SipUserAgent::config(v28) + 952) && LOBYTE(a1[10].__vftable[48].~__shared_weak_count))
  {
    v29 = (SipUriHeader *)SipMessage::header<SipToHeader>(*(_QWORD *)(*a3 + 288));
    if (v29)
      v30 = SipUriHeader::tag(v29);
    else
      v30 = &ims::kEmptyString;
    v31 = *((unsigned __int8 *)v30 + 23);
    if ((v31 & 0x80u) != 0)
      v31 = *((_QWORD *)v30 + 1);
    if (v31)
    {
      v32 = a1[10].__vftable;
      v33 = (SipUriHeader *)SipMessage::header<SipToHeader>(*(_QWORD *)(*a3 + 288));
      v34 = (void **)(v33 ? SipUriHeader::tag(v33) : &ims::kEmptyString);
      v35 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&v32[51], v34);
      if (&v32[51].~__shared_weak_count_0 == (void (__cdecl **)(std::__shared_weak_count *__hidden))v35)
        goto LABEL_94;
      v37 = v35[7];
      v36 = (std::__shared_weak_count *)v35[8];
      if (v36)
      {
        v38 = (unint64_t *)&v36->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (!v37)
      {
LABEL_94:
        v58 = ((uint64_t (*)(std::__shared_weak_count *))a1->__vftable[1].__get_deleter)(a1);
        ((void (*)(std::__shared_weak_count *, uint64_t))a1->__on_zero_shared)(a1, v58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)"ignoring ", 9);
        *(_BYTE *)(v58 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)" in terminated fork", 19);
        *(_BYTE *)(v58 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v58 + 17) = 0;
        goto LABEL_38;
      }
    }
  }
  shared_weak_owners = (void *)a1[29].__shared_weak_owners_;
  v42 = (std::__shared_weak_count *)a1[30].__vftable;
  if (!v42)
  {
    if (!shared_weak_owners)
      goto LABEL_38;
    v61 = (void *)a1[29].__shared_weak_owners_;
    v62 = 0;
    goto LABEL_81;
  }
  v43 = (unint64_t *)&v42->__shared_owners_;
  do
    v44 = __ldxr(v43);
  while (__stxr(v44 + 1, v43));
  do
    v45 = __ldaxr(v43);
  while (__stlxr(v45 - 1, v43));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  if (shared_weak_owners)
  {
    v46 = (std::__shared_weak_count *)a1[30].__vftable;
    shared_weak_owners = (void *)a1[29].__shared_weak_owners_;
    v61 = shared_weak_owners;
    v62 = v46;
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
LABEL_81:
    v49 = (std::__shared_weak_count *)a3[1];
    v59 = *a3;
    v60 = v49;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    (*(void (**)(void *, uint64_t, uint64_t *))(*(_QWORD *)shared_weak_owners + 128))(shared_weak_owners, a2, &v59);
    v52 = v60;
    if (v60)
    {
      v53 = (unint64_t *)&v60->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = v62;
    if (v62)
    {
      v56 = (unint64_t *)&v62->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
LABEL_38:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v68);
}

void sub_1BEF7985C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (a16 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v31 - 96);
  _Unwind_Resume(a1);
}

uint64_t SipSession::handleOutgoingResponse(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  std::string::size_type v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::string::size_type v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  std::string::size_type v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  const std::string *v32;
  uint64_t v33;
  const std::string *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::string v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  std::string __p;
  std::string::size_type v52;
  std::string::size_type size;
  _OWORD v54[3];

  memset(v54, 0, sizeof(v54));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v48, a1 + 22);
  if (v48.__r_.__value_.__r.__words[0])
    v6 = v48.__r_.__value_.__r.__words[0] + 104;
  else
    v6 = 0;
  v52 = v6;
  size = v48.__r_.__value_.__l.__size_;
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "handleOutgoingResponse");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v54, (uint64_t *)&v52, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (std::__shared_weak_count *)size;
  if (size)
  {
    v8 = (unint64_t *)(size + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)v48.__r_.__value_.__l.__size_;
  if (v48.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(v48.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"SipSession::handleOutgoingResponse", 34);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  v14 = a1[89];
  v15 = (std::__shared_weak_count *)a1[90];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (v18)
    {
      if (!v14)
        return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v54);
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (!v14)
        return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v54);
    }
    v19 = a1[90];
    v14 = a1[89];
    __p.__r_.__value_.__r.__words[0] = v14;
    __p.__r_.__value_.__l.__size_ = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    if (!v14)
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v54);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)a1[89];
  }
  v22 = (std::__shared_weak_count *)a3[1];
  v49 = *a3;
  v50 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  (*(void (**)(std::string::size_type, uint64_t, uint64_t *))(*(_QWORD *)v14 + 112))(v14, a2, &v49);
  v25 = v50;
  if (v50)
  {
    v26 = (unint64_t *)&v50->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"sending ", 8);
  *(_BYTE *)(v31 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v31 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)" response to ", 13);
  *(_BYTE *)(v31 + 17) = 0;
  v32 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 288) + 112))(*(_QWORD *)(*a3 + 288));
  LoggableString::LoggableString(&__p, v32);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v31 + 40))(v31, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)" request in state ", 18);
  *(_BYTE *)(v31 + 17) = 0;
  v33 = (*(uint64_t (**)(_QWORD *))(a1[82] + 24))(a1 + 82);
  v34 = (const std::string *)(*(uint64_t (**)(_QWORD *, uint64_t))(a1[82] + 16))(a1 + 82, v33);
  LoggableString::LoggableString(&v48, v34);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v31 + 40))(v31, &v48);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v31 + 17) = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v35 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 288) + 112))(*(_QWORD *)(*a3 + 288));
  v36 = v35[23];
  if ((v36 & 0x80u) == 0)
    v37 = v35[23];
  else
    v37 = *((_QWORD *)v35 + 1);
  if (v37 == 6)
  {
    if ((v36 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v35, "INVITE", *((_QWORD *)v35 + 1)))
        return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v54);
    }
    else if (v35[23])
    {
      v38 = "INVITE";
      while (*v35 == *(unsigned __int8 *)v38)
      {
        ++v35;
        ++v38;
        if (!--v36)
          goto LABEL_57;
      }
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v54);
    }
LABEL_57:
    if ((*(_DWORD *)(a2 + 88) - 200) <= 0x63)
    {
      v39 = (std::__shared_weak_count *)a3[1];
      v46 = *a3;
      v47 = v39;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      SipSessionInterface::addAckReceiveHandlerForServerTransaction((uint64_t)a1, &v46, a2);
      v42 = v47;
      if (v47)
      {
        v43 = (unint64_t *)&v47->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v54);
}

void sub_1BEF79DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void SipSession::currentPrackHandler(SipSession *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  unsigned int v18;
  BOOL v19;
  char **v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *lpsrc;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;

  SipSession::serverInviteTransaction((SipSession *)&lpsrc, *((_QWORD *)this + 30));
  if (lpsrc
  {
    v31 = v4;
    v32 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v31 = 0;
    v32 = 0;
  }
  v7 = v30;
  if (v30)
  {
    v8 = (unint64_t *)&v30->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v31;
  if (v31)
  {
    v11 = v32;
    if (v32)
    {
      v12 = (unint64_t *)&v32->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = SipMessage::header<SipCSeqHeader>(v10[36]);
    if (v14)
      v15 = v14[15];
    else
      v15 = 0;
    v16 = (char *)*((_QWORD *)this + 80);
    if (!v16)
      goto LABEL_32;
    v17 = (char *)this + 640;
    do
    {
      v18 = *((_DWORD *)v16 + 8);
      v19 = v18 >= v15;
      if (v18 >= v15)
        v20 = (char **)v16;
      else
        v20 = (char **)(v16 + 8);
      if (v19)
        v17 = v16;
      v16 = *v20;
    }
    while (*v20);
    if (v17 != (char *)this + 640 && v15 >= *((_DWORD *)v17 + 8))
    {
      v26 = *((_QWORD *)v17 + 6);
      *a2 = *((_QWORD *)v17 + 5);
      a2[1] = v26;
      if (v26)
      {
        v27 = (unint64_t *)(v26 + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
    }
    else
    {
LABEL_32:
      *a2 = 0;
      a2[1] = 0;
    }
    if (v11)
    {
      v21 = (unint64_t *)&v11->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1BEF7A03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void SipSession::serverInviteTransaction(SipSession *this, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  void **v17;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v12 = 0;
  v13 = 0;
  SipDialog::currentServerTransactions(a2, (uint64_t)&v14, "INVITE", &v12);
  v3 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = v14;
  v7 = v15;
  while (v6 != v7)
  {
    v8 = *v6;
    *(_QWORD *)this = *v6;
    v9 = v6[1];
    *((_QWORD *)this + 1) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v8 = *(_QWORD *)this;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 144))(v8))
      goto LABEL_15;
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this);
    v6 += 2;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
LABEL_15:
  v17 = (void **)&v14;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v17);
}

void sub_1BEF7A150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

BOOL SipSession::hasOutstandingResponseSdp(SipSession *this)
{
  _BOOL8 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  SipPrackHandler *v6;
  std::__shared_weak_count *v7;

  v6 = 0;
  v7 = 0;
  SipSession::currentPrackHandler(this, &v6);
  v1 = v6 && (SipPrackHandler::hasOutstandingSdp(v6) & 1) != 0;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1BEF7A208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSession::removeClientTransaction(uint64_t **a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v13[0] = *a2;
  v13[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  SipSessionInterface::removeClientTransaction(a1, v13);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 288) + 112))(*(_QWORD *)(*a2 + 288));
  v10 = v9[23];
  if ((v10 & 0x80u) == 0)
    v11 = v9[23];
  else
    v11 = *((_QWORD *)v9 + 1);
  if (v11 != 6)
    return;
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v9, "INVITE", *((_QWORD *)v9 + 1)))
      return;
LABEL_21:
    SipSession::sendPendingInvite((SipSession *)a1);
    return;
  }
  if (!v9[23])
    goto LABEL_21;
  v12 = "INVITE";
  while (*v9 == *(unsigned __int8 *)v12)
  {
    ++v9;
    ++v12;
    if (!--v10)
      goto LABEL_21;
  }
}

void sub_1BEF7A33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipSession::removeServerTransaction(SipSessionInterface *a1, _QWORD *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  _DWORD *v21;
  unsigned int v22;
  _QWORD v24[2];
  std::string __p;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  _OWORD v30[3];

  memset(v30, 0, sizeof(v30));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v26, (_QWORD *)a1 + 22);
  if (v26)
    v4 = v26 + 104;
  else
    v4 = 0;
  v28 = v4;
  v29 = v27;
  v26 = 0;
  v27 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "removeServerTransaction");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v30, &v28, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v27;
  if (v27)
  {
    v9 = (unint64_t *)&v27->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (*(uint64_t (**)(SipSessionInterface *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(SipSessionInterface *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"SipSession::removeServerTransaction", 35);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  v12 = (std::__shared_weak_count *)a2[1];
  v24[0] = *a2;
  v24[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  SipSessionInterface::removeServerTransaction(a1, (uint64_t)v24);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 288) + 112))(*(_QWORD *)(*a2 + 288));
  v18 = v17[23];
  if ((v18 & 0x80u) == 0)
    v19 = v17[23];
  else
    v19 = *((_QWORD *)v17 + 1);
  if (v19 != 6)
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v30);
  if ((v18 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v17, "INVITE", *((_QWORD *)v17 + 1)))
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v30);
    goto LABEL_35;
  }
  if (!v17[23])
  {
LABEL_35:
    v21 = SipMessage::header<SipCSeqHeader>(*(_QWORD *)(*a2 + 288));
    if (v21)
      v22 = v21[15];
    else
      v22 = 0;
    SipSession::removePrackHandler(a1, v22);
    SipSession::sendPendingInvite(a1);
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v30);
  }
  v20 = "INVITE";
  while (*v17 == *(unsigned __int8 *)v20)
  {
    ++v17;
    ++v20;
    if (!--v18)
      goto LABEL_35;
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v30);
}

void sub_1BEF7A5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void SipSession::addServerTransaction(uint64_t **a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _DWORD *v21;
  unsigned int v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t **v25;
  unsigned int v26;
  BOOL v27;
  uint64_t *v28;
  void *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  unint64_t *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *size;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t v51;
  unint64_t *p_shared_weak_owners;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  _DWORD *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t **v62;
  unsigned int v63;
  void *v64;
  uint64_t *v65;
  uint64_t *v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 v83;
  std::string v84;
  void *__p[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  void *v89[2];
  __int128 v90;
  __int128 v91;
  _BYTE v92[144];
  uint64_t v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  void *v96;
  std::__shared_weak_count *v97;
  std::string v98;

  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v8 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 288) + 112))(*(_QWORD *)(*a2 + 288));
  v9 = v8[23];
  if ((v9 & 0x80u) == 0)
    v10 = v8[23];
  else
    v10 = *((_QWORD *)v8 + 1);
  if (v10 != 6)
    return;
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v8, "INVITE", *((_QWORD *)v8 + 1)))
      return;
LABEL_18:
    if (!*a2
    {
      *((_QWORD *)&v83 + 1) = 0;
      goto LABEL_128;
    }
    v13 = a2[1];
    *(_QWORD *)&v83 = v12;
    *((_QWORD *)&v83 + 1) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = a1[30];
    if (v16 && (v17 = v16[26]) != 0)
      v18 = *(_QWORD *)(v17 + 136);
    else
      v18 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "100rel");
    if ((void **)(v18 + 160) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v18 + 152, __p))
    {
      v20 = 1;
    }
    else
    {
      v19 = *(_QWORD *)(v83 + 288);
      std::string::basic_string[abi:ne180100]<0>(&v98, "100rel");
      v20 = !SipMessage::supportsOption(v19, (void **)&v98.__r_.__value_.__l.__data_);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v86) < 0)
    {
      operator delete(__p[0]);
      if (v20)
        goto LABEL_128;
    }
    else if (v20)
    {
LABEL_128:
      if (*((_QWORD *)&v83 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 16))(*((_QWORD *)&v83 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v83 + 1));
        }
      }
      return;
    }
    v21 = SipMessage::header<SipCSeqHeader>(*(_QWORD *)(v83 + 288));
    if (v21)
      v22 = v21[15];
    else
      v22 = 0;
    v23 = a1 + 80;
    v24 = a1[80];
    if (v24)
    {
      v25 = a1 + 80;
      do
      {
        v26 = *((_DWORD *)v24 + 8);
        v27 = v26 >= v22;
        if (v26 >= v22)
          v28 = v24;
        else
          v28 = v24 + 1;
        if (v27)
          v25 = (uint64_t **)v24;
        v24 = (uint64_t *)*v28;
      }
      while (*v28);
      if (v25 != v23 && v22 >= *((_DWORD *)v25 + 8))
      {
        v60 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
        ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v60);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"we already have a prack handler for CSeq ", 41);
        *(_BYTE *)(v60 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v60 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v60 + 17) = 0;
        goto LABEL_128;
      }
    }
    v96 = 0;
    v97 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(__p, a1 + 22);
    if (__p[0]
    {
      v96 = v29;
      v97 = (std::__shared_weak_count *)__p[1];
      v30 = __p;
    }
    else
    {
      v30 = &v96;
    }
    *v30 = 0;
    v30[1] = 0;
    v31 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v32 = (unint64_t *)((char *)__p[1] + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = v96;
    if (!v96)
    {
LABEL_123:
      v78 = v97;
      if (v97)
      {
        v79 = (unint64_t *)&v97->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      goto LABEL_128;
    }
    v94 = 0;
    v95 = 0;
    v35 = (unint64_t *)v97;
    v36 = (std::__shared_weak_count *)operator new(0x190uLL);
    v37 = v36;
    v36->__shared_owners_ = 0;
    v38 = (unint64_t *)&v36->__shared_owners_;
    v36->__shared_weak_owners_ = 0;
    v36->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CB228;
    v39 = &v36[1].__vftable;
    __p[0] = v34;
    __p[1] = v35;
    if (v35)
    {
      v40 = v35 + 1;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v83;
    if (*((_QWORD *)&v83 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    SipPrackHandler::SipPrackHandler((uint64_t)&v36[1], __p, (uint64_t *)&v98);
    size = (std::__shared_weak_count *)v98.__r_.__value_.__l.__size_;
    if (v98.__r_.__value_.__l.__size_)
    {
      v45 = (unint64_t *)(v98.__r_.__value_.__l.__size_ + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v47 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v48 = (unint64_t *)((char *)__p[1] + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v94 = v39;
    v95 = v37;
    v50 = (std::__shared_weak_count *)v37[6].__vftable;
    if (v50)
    {
      if (v50->__shared_owners_ != -1)
      {
LABEL_89:
        v58 = SipMessage::header<SipCSeqHeader>(*(_QWORD *)(v83 + 288));
        if (v58)
          v59 = v58[15];
        else
          v59 = 0;
        v61 = *v23;
        v62 = a1 + 80;
        if (*v23)
        {
          while (1)
          {
            while (1)
            {
              v62 = (uint64_t **)v61;
              v63 = *((_DWORD *)v61 + 8);
              if (v63 <= v59)
                break;
              v61 = *v62;
              v23 = v62;
              if (!*v62)
                goto LABEL_100;
            }
            if (v63 >= v59)
              break;
            v61 = v62[1];
            if (!v61)
            {
              v23 = v62 + 1;
              goto LABEL_100;
            }
          }
          v64 = v62;
        }
        else
        {
LABEL_100:
          v64 = operator new(0x38uLL);
          *((_DWORD *)v64 + 8) = v59;
          *((_QWORD *)v64 + 5) = 0;
          *((_QWORD *)v64 + 6) = 0;
          *(_QWORD *)v64 = 0;
          *((_QWORD *)v64 + 1) = 0;
          *((_QWORD *)v64 + 2) = v62;
          *v23 = (uint64_t *)v64;
          v65 = (uint64_t *)*a1[79];
          v66 = (uint64_t *)v64;
          if (v65)
          {
            a1[79] = v65;
            v66 = *v23;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[80], v66);
          a1[81] = (uint64_t *)((char *)a1[81] + 1);
        }
        v67 = v94;
        v68 = v95;
        if (v95)
        {
          v69 = (unint64_t *)&v95->__shared_owners_;
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
        }
        v71 = (std::__shared_weak_count *)*((_QWORD *)v64 + 6);
        *((_QWORD *)v64 + 5) = v67;
        *((_QWORD *)v64 + 6) = v68;
        if (v71)
        {
          v72 = (unint64_t *)&v71->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v93 = 0;
        v91 = 0u;
        memset(v92, 0, sizeof(v92));
        *(_OWORD *)v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        *(_OWORD *)__p = 0u;
        v86 = 0u;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"PrackHandler ", 13);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], &v84);
        LoggableString::LoggableString(&v98, &v84);
        ((void (*)(uint64_t **, std::string *))a1[13][4])(a1 + 13, &v98);
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v98.__r_.__value_.__l.__data_);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        v74 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
        ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v74 + 8), (uint64_t)"added PRACK handler for cseq ", 29);
        *(_BYTE *)(v74 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v74 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v74 + 64))(v74, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v74 + 17) = 0;
        __p[0] = *(void **)MEMORY[0x1E0DE4F60];
        *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
        __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
        if (SHIBYTE(v90) < 0)
          operator delete(v89[1]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1C3B8707C](v92);
        v75 = v95;
        if (v95)
        {
          v76 = (unint64_t *)&v95->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        goto LABEL_123;
      }
      do
        v51 = __ldxr(v38);
      while (__stxr(v51 + 1, v38));
      p_shared_weak_owners = (unint64_t *)&v37->__shared_weak_owners_;
      do
        v53 = __ldxr(p_shared_weak_owners);
      while (__stxr(v53 + 1, p_shared_weak_owners));
      v37[5].__shared_weak_owners_ = (uint64_t)v39;
      v37[6].__vftable = (std::__shared_weak_count_vtbl *)v37;
      std::__shared_weak_count::__release_weak(v50);
    }
    else
    {
      do
        v54 = __ldxr(v38);
      while (__stxr(v54 + 1, v38));
      v55 = (unint64_t *)&v37->__shared_weak_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
      v37[5].__shared_weak_owners_ = (uint64_t)v39;
      v37[6].__vftable = (std::__shared_weak_count_vtbl *)v37;
    }
    do
      v57 = __ldaxr(v38);
    while (__stlxr(v57 - 1, v38));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    goto LABEL_89;
  }
  if (!v8[23])
    goto LABEL_18;
  v11 = "INVITE";
  while (*v8 == *(unsigned __int8 *)v11)
  {
    ++v8;
    ++v11;
    if (!--v9)
      goto LABEL_18;
  }
}

void sub_1BEF7ADFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 89) < 0)
    operator delete(*(void **)(v23 - 112));
  if (a17 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23 - 144);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23 - 128);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void SipSession::sendQueuedResponseInTransaction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9[2];

  v4 = (std::__shared_weak_count *)a3[1];
  v9[0] = *a3;
  v9[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  SipSessionInterface::sendResponseInTransaction(a1, a2, v9, a4);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BEF7AF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipSession::sendResponseInTransaction@<X0>(_QWORD *a1@<X0>, const SipResponse *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  BOOL v29;
  uint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  const void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::string::size_type v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42[2];
  _QWORD *v43;
  std::__shared_weak_count *v44;
  std::string __p;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  _OWORD v50[3];

  memset(v50, 0, sizeof(v50));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v46, a1 + 22);
  if (v46)
    v8 = v46 + 104;
  else
    v8 = 0;
  v48 = v8;
  v49 = v47;
  v46 = 0;
  v47 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "sendResponseInTransaction");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v50, &v48, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v47;
  if (v47)
  {
    v13 = (unint64_t *)&v47->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"SipSession::sendResponseInTransaction", 37);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  if (*(_QWORD *)a3
  {
    v17 = *(std::__shared_weak_count **)(a3 + 8);
    v43 = v16;
    v44 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = SipMessage::header<SipCSeqHeader>(v16[36]);
    if (v20)
      v21 = v20[15];
    else
      v21 = 0;
    v26 = a1[80];
    if (!v26)
      goto LABEL_43;
    v27 = a1 + 80;
    do
    {
      v28 = *(_DWORD *)(v26 + 32);
      v29 = v28 >= v21;
      if (v28 >= v21)
        v30 = (uint64_t *)v26;
      else
        v30 = (uint64_t *)(v26 + 8);
      if (v29)
        v27 = (_QWORD *)v26;
      v26 = *v30;
    }
    while (*v30);
    if (v27 != a1 + 80 && v21 >= *((_DWORD *)v27 + 8))
    {
      v39 = v27[6];
      __p.__r_.__value_.__r.__words[0] = v27[5];
      __p.__r_.__value_.__l.__size_ = v39;
      if (v39)
      {
        v40 = (unint64_t *)(v39 + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
    }
    else
    {
LABEL_43:
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    }
    if (v17)
    {
      v31 = (unint64_t *)&v17->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      SipPrackHandler::queueResponse((SipPrackHandler *)__p.__r_.__value_.__l.__data_, a2);
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(_QWORD *)a4 = &off_1E78B7238;
      *(_QWORD *)(a4 + 8) = &_bambiDomain;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_25;
    }
  }
  else
  {
    v43 = 0;
    v44 = 0;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  v33 = *(const void **)a3;
  v34 = *(std::__shared_weak_count **)(a3 + 8);
  v42[0] = (uint64_t)v33;
  v42[1] = (uint64_t)v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  SipSessionInterface::sendResponseInTransaction((uint64_t)a1, (uint64_t)a2, v42, a4);
  if (v34)
  {
    v37 = (unint64_t *)&v34->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
LABEL_25:
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v50);
}

void sub_1BEF7B2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [34]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF7B3B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipSession::cancel(SipSession *this, const BambiCallTerminationReason *a2, const BambiCallTerminationReason *a3)
{
  ImsResult *v6;
  ImsResult *v7;
  ImsResult *v8;
  const ImsResult *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  void (**v16)(ImsResult *__hidden);
  unint64_t *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  BambiCallTerminationReason *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  BambiCall *v24;
  int v25;
  uint64_t v26;
  _BYTE *v27;
  ImsResult *v28;
  const ImsResult *v29;
  uint64_t v30;
  uint64_t v31;
  SipUserAgent *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  void (**v47)(ImsResult *__hidden);
  uint64_t *v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  BambiCall *v53;
  std::__shared_weak_count *v54;
  _OWORD v55[5];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  if (!*(_BYTE *)(*((_QWORD *)a2 + 30) + 1920))
  {
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v47 = &off_1E78B7238;
    v48 = &_bambiDomain;
    v49 = 1073741826;
    v7 = (ImsResult *)ImsResult::operator<<<char [25]>((uint64_t)&v47, "cannot cancel an MT call");
    ImsLogContainer::logResult(a2, v7);
    ImsResult::ImsResult(this, v7);
    goto LABEL_5;
  }
  if ((*(unsigned int (**)(const BambiCallTerminationReason *))(*(_QWORD *)a2 + 264))(a2))
  {
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v47 = &off_1E78B7238;
    v48 = &_bambiDomain;
    v49 = 1073741826;
    v6 = (ImsResult *)ImsResult::operator<<<char [38]>((uint64_t)&v47, "cancel called on a terminated session");
    ImsLogContainer::logResult(a2, v6);
    ImsResult::ImsResult(this, v6);
LABEL_5:
    v8 = (ImsResult *)&v47;
LABEL_9:
    ImsResult::~ImsResult(v8);
    return;
  }
  if (SipSession::confirmed(a2))
  {
    memset((char *)&v55[1] + 8, 0, 48);
    *(_QWORD *)&v55[0] = &off_1E78B7238;
    *((_QWORD *)&v55[0] + 1) = &_bambiDomain;
    LODWORD(v55[1]) = 1073741826;
    ImsLogContainer::logResult((uint64_t)a2, (uint64_t)v55, (uint64_t)&v47);
    v9 = (const ImsResult *)ImsResult::operator<<<char [37]>((uint64_t)&v47, "cancel called on a confirmed session");
    ImsResult::ImsResult(this, v9);
LABEL_8:
    ImsResult::~ImsResult((ImsResult *)&v47);
    v8 = (ImsResult *)v55;
    goto LABEL_9;
  }
  v10 = *((_QWORD *)a2 + 89);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 90);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!v10)
  {
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v47 = &off_1E78B7238;
    v48 = &_bambiDomain;
    v49 = 1073741826;
    v28 = (ImsResult *)ImsResult::operator<<<char [30]>((uint64_t)&v47, "cannot cancel from NULL state");
    ImsLogContainer::logResult(a2, v28);
    ImsResult::ImsResult(this, v28);
    goto LABEL_5;
  }
  SipSession::clientInviteTransaction(a2, (uint64_t *)&v47);
  v16 = v47;
  v15 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    v17 = (unint64_t *)(v48 + 1);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v16)
  {
    memset((char *)&v55[1] + 8, 0, 48);
    *(_QWORD *)&v55[0] = &off_1E78B7238;
    *((_QWORD *)&v55[0] + 1) = &_bambiDomain;
    LODWORD(v55[1]) = 1073741826;
    ImsLogContainer::logResult((uint64_t)a2, (uint64_t)v55, (uint64_t)&v47);
    v29 = (const ImsResult *)ImsResult::operator<<<char [39]>((uint64_t)&v47, "no client INVITE transaction to cancel");
    ImsResult::ImsResult(this, v29);
    goto LABEL_8;
  }
  v59 = 0;
  v57 = 0u;
  v58 = 0u;
  v56 = 0u;
  memset(v55, 0, sizeof(v55));
  BambiCallTerminationReason::BambiCallTerminationReason((BambiCallTerminationReason *)v55, a3);
  v19 = v55[4];
  if (!LODWORD(v55[4]))
    LODWORD(v55[4]) = 4;
  v20 = *((_QWORD *)a2 + 194);
  if (v20)
  {
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20 + 112);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20 + 96);
    if (*(char *)(v20 + 95) < 0)
      operator delete(*(void **)(v20 + 72));
    if (*(char *)(v20 + 55) < 0)
      operator delete(*(void **)(v20 + 32));
    if (*(char *)(v20 + 31) < 0)
      operator delete(*(void **)(v20 + 8));
    MEMORY[0x1C3B87100](v20, 0x1032C40D4AF1F8FLL);
  }
  v21 = (BambiCallTerminationReason *)operator new();
  BambiCallTerminationReason::BambiCallTerminationReason(v21, (const BambiCallTerminationReason *)v55);
  *((_QWORD *)a2 + 194) = v21;
  v53 = 0;
  v54 = 0;
  v22 = (std::__shared_weak_count *)*((_QWORD *)a2 + 97);
  if (v22)
  {
    v23 = std::__shared_weak_count::lock(v22);
    v54 = v23;
    if (v23)
    {
      v24 = (BambiCall *)*((_QWORD *)a2 + 96);
      v53 = v24;
      if (v24)
      {
        v25 = BambiCall::isWPSCall(v24) ^ 1;
        if (!v19)
          LOBYTE(v25) = 1;
        if ((v25 & 1) == 0)
        {
          v26 = (*(uint64_t (**)(const BambiCallTerminationReason *))(*(_QWORD *)a2 + 64))(a2);
          (*(void (**)(const BambiCallTerminationReason *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v26);
          v27 = (_BYTE *)ImsOutStream::operator<<(v26, "WPS call canceled, entering cleanup state");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v27[17] = 0;
          SipTypedStateMachine<SipSessionState>::transitionToState((_QWORD *)a2 + 82, 14);
          bzero(&v47, 0x250uLL);
          BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)&v47, 14, (uint64_t)v55);
          v47 = &off_1E78CA488;
          SipSession::fireCallEvent(a2, (BambiCallEvent *)&v47);
LABEL_52:
          *(_OWORD *)((char *)this + 24) = 0u;
          *(_OWORD *)((char *)this + 40) = 0u;
          *(_OWORD *)((char *)this + 56) = 0u;
          *(_QWORD *)this = &off_1E78B7238;
          *((_QWORD *)this + 1) = &_bambiDomain;
          *((_DWORD *)this + 4) = 0;
          BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&v47);
          goto LABEL_53;
        }
        v30 = *((_QWORD *)a2 + 30);
        if (v30 && (v31 = *(_QWORD *)(v30 + 208)) != 0)
          v32 = *(SipUserAgent **)(v31 + 136);
        else
          v32 = 0;
        v33 = SipUserAgent::config(v32);
        v34 = *(_QWORD *)a2;
        if (*(_DWORD *)(v33 + 600))
        {
          v35 = (*(uint64_t (**)(const BambiCallTerminationReason *))(v34 + 64))(a2);
          (*(void (**)(const BambiCallTerminationReason *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v35);
          v36 = (_BYTE *)ImsOutStream::operator<<(v35, "strict call flows are on. Waiting for INVITE response before terminating");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v36[17] = 0;
          SipTypedStateMachine<SipSessionState>::transitionToState((_QWORD *)a2 + 82, 8);
          bzero(&v47, 0x250uLL);
          BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)&v47, 14, (uint64_t)v55);
          v47 = &off_1E78CA488;
          SipSession::fireCallEvent(a2, (BambiCallEvent *)&v47);
          goto LABEL_52;
        }
        v45 = (*(uint64_t (**)(const BambiCallTerminationReason *))(v34 + 56))(a2);
        (*(void (**)(const BambiCallTerminationReason *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v45);
        v46 = (_BYTE *)ImsOutStream::operator<<(v45, "SipSession::cancel: waitForCancelResponseTimeout is 0. Terminating immediately.");
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v46[17] = 0;
      }
    }
  }
  else
  {
    v23 = 0;
  }
  bzero(&v47, 0x250uLL);
  BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)&v47, 15, (uint64_t)v55);
  v47 = &off_1E78BD2A8;
  SipSession::terminateWithEvent(a2, (BambiCallEvent *)&v47, 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = &off_1E78B7238;
  *((_QWORD *)this + 1) = &_bambiDomain;
  *((_DWORD *)this + 4) = 0;
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&v47);
  if (v23)
  {
LABEL_53:
    v37 = (unint64_t *)&v23->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (SHIBYTE(v56) < 0)
    operator delete(*((void **)&v55[4] + 1));
  if (SBYTE7(v55[3]) < 0)
    operator delete(*(void **)&v55[2]);
  if (SHIBYTE(v55[1]) < 0)
    operator delete(*((void **)&v55[0] + 1));
}

void sub_1BEF7BAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9 - 224);
  BambiCallTerminationReason::~BambiCallTerminationReason((void **)(v9 - 208));
  _Unwind_Resume(a1);
}

void SipSession::rejectWithReason(SipSession *this, std::__shared_weak_count *a2, uint64_t a3)
{
  int v6;
  std::string *v7;
  std::__shared_weak_count_vtbl *on_zero_shared;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  ImsResult *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _OWORD v25[6];
  void *__p[2];
  uint64_t v27;
  void (**v28)(ImsResult *__hidden);
  std::__shared_weak_count *v29;
  void (**v30)(ImsResult *__hidden);
  uint64_t *v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v6 = *(_DWORD *)(a3 + 60);
  v7 = (std::string *)(a3 + 32);
  on_zero_shared = a2[10].__vftable;
  if (on_zero_shared)
  {
    on_zero_shared = (std::__shared_weak_count_vtbl *)on_zero_shared[5].~__shared_weak_count_0;
    if (on_zero_shared)
      on_zero_shared = (std::__shared_weak_count_vtbl *)on_zero_shared[3].__on_zero_shared;
  }
  v27 = 0;
  *(_OWORD *)__p = 0u;
  memset(v25, 0, sizeof(v25));
  SipResponse::SipResponse((uint64_t)v25, v6, v7, (uint64_t)&on_zero_shared[7].~__shared_weak_count_0);
  ((void (*)(uint64_t *__return_ptr, std::__shared_weak_count *))a2->__vftable[3].~__shared_weak_count_0)(&v23, a2);
  SipSession::addTerminationSdpToMessage(a2, a3, (uint64_t)v25, &v23);
  v9 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if ((SipSession::confirmed((SipSession *)a2) & 1) != 0 || LOBYTE(a2[10].__vftable[48].~__shared_weak_count))
  {
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v30 = &off_1E78B7238;
    v31 = &_bambiDomain;
    v32 = 1073741826;
    v12 = (ImsResult *)ImsResult::operator<<<char [40]>((uint64_t)&v30, "reject called on confirmed or MT dialog");
    ImsLogContainer::logResult((ImsLogContainer *)a2, v12);
    ImsResult::ImsResult(this, v12);
    ImsResult::~ImsResult((ImsResult *)&v30);
  }
  else
  {
    v30 = 0;
    v31 = 0;
    SipSession::serverInviteTransaction((SipSession *)a2, (uint64_t *)&v30);
    if (v30)
    {
      v28 = v30;
      v29 = (std::__shared_weak_count *)v31;
      if (v31)
      {
        v13 = (unint64_t *)(v31 + 1);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      ((void (*)(std::__shared_weak_count *, _OWORD *, void (***)(ImsResult *__hidden)))a2->__vftable[6].~__shared_weak_count)(a2, v25, &v28);
      v15 = v29;
      if (v29)
      {
        v16 = (unint64_t *)&v29->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    else
    {
      v18 = ((uint64_t (*)(std::__shared_weak_count *))a2->__vftable[1].__get_deleter)(a2);
      ((void (*)(std::__shared_weak_count *, uint64_t))a2->__on_zero_shared)(a2, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"rejectWithResponse: no server INVITE transaction", 48);
      *(_BYTE *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v18 + 17) = 0;
      if (!a2[55].__shared_weak_owners_)
      {
        v19 = ((uint64_t (*)(std::__shared_weak_count *))a2->__vftable[1].__get_deleter)(a2);
        ((void (*)(std::__shared_weak_count *, uint64_t))a2->__on_zero_shared)(a2, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"saving response for future use.", 31);
        *(_BYTE *)(v19 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v19 + 17) = 0;
        a2[55].__shared_weak_owners_ = (*(uint64_t (**)(_OWORD *))(*(_QWORD *)&v25[0] + 32))(v25);
      }
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
      *(_QWORD *)this = &off_1E78B7238;
      *((_QWORD *)this + 1) = &_bambiDomain;
      *((_DWORD *)this + 4) = 0;
    }
    v20 = (std::__shared_weak_count *)v31;
    if (v31)
    {
      v21 = (unint64_t *)(v31 + 1);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  *(_QWORD *)&v25[0] = off_1E78E40E8;
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  SipMessage::~SipMessage((SipMessage *)v25);
}

void sub_1BEF7BED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3 - 120);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3 - 104);
  SipResponse::~SipResponse((void **)va);
  _Unwind_Resume(a1);
}

void SipSession::silentHangUp(SipSession *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const std::string *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  ImsResult *v22;
  std::string __p;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _OWORD v31[3];

  v6 = *((_QWORD *)this + 89);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  if (!v7)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
LABEL_6:
    if (v6)
      goto LABEL_7;
LABEL_27:
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741826;
    v22 = (ImsResult *)ImsResult::operator<<<char [40]>((uint64_t)&__p, "silentHangUp called while in NULL state");
    ImsLogContainer::logResult(this, v22);
    ImsResult::ImsResult((ImsResult *)a3, v22);
    ImsResult::~ImsResult((ImsResult *)&__p);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v6)
    goto LABEL_27;
LABEL_7:
  if ((SipSession::confirmed(this) & 1) == 0)
  {
    v11 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"silentHangUp called for an unconfirmed call in state: ", 54);
    *(_BYTE *)(v11 + 17) = 0;
    v12 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 82) + 24))((char *)this + 656);
    v13 = (const std::string *)(*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this + 82) + 16))((char *)this + 656, v12);
    LoggableString::LoggableString(&__p, v13);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 40))(v11, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(v31, 0, sizeof(v31));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v27, (_QWORD *)this + 22);
  if (v27)
    v14 = v27 + 104;
  else
    v14 = 0;
  v29 = v14;
  v30 = v28;
  v27 = 0;
  v28 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "silentHangUp");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v31, &v29, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = v30;
  if (v30)
  {
    v16 = (unint64_t *)&v30->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v28;
  if (v28)
  {
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"SipSession::silentHangUp", 24);
  *(_BYTE *)(v21 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v21 + 17) = 0;
  bzero(&__p, 0x250uLL);
  BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)&__p, 15, a2);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BD2A8;
  SipSession::terminateWithEvent(this, (BambiCallEvent *)&__p, 12);
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v31);
}

void sub_1BEF7C280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v14 - 96);
  _Unwind_Resume(a1);
}

void SipSession::addTerminationSdpToMessage(std::__shared_weak_count *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *__p;
  std::__shared_weak_count *v25;
  char v26;
  void *v27;
  std::__shared_weak_count *v28;
  char v29;
  uint64_t v30[2];
  uint64_t v31;
  uint64_t v32;
  std::string v33;

  memset(&v33, 0, sizeof(v33));
  SipSessionInterface::stack(a1, &v27);
  if (v27)
  {
    SipSessionInterface::stack(a1, &__p);
    if (*((char *)__p + 4159) < 0)
      std::string::__init_copy_ctor_external(&v33, *((const std::string::value_type **)__p + 517), *((_QWORD *)__p + 518));
    else
      v33 = *(std::string *)((char *)__p + 4136);
    v8 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v33, (char *)&str_23_1);
  }
  v11 = v28;
  if (v28)
  {
    v12 = (unint64_t *)&v28->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (*(_DWORD *)(a2 + 128))
  {
    if (a3 && *a4)
    {
      v31 = 0;
      v32 = 0;
      std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> const&,void>(a4, &v31);
      if (v31)
      {
        SDPModel::setDesiredPrecondition(v31, *(_DWORD *)(a2 + 128), 4, 3);
        v14 = (std::__shared_weak_count *)v32;
        v30[0] = v31;
        v30[1] = v32;
        if (v32)
        {
          v15 = (unint64_t *)(v32 + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        SipMessage::setSdp(a3, v30);
        if (v14)
        {
          v17 = (unint64_t *)&v14->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v27, "bambi.call");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v20 = ImsLogger::error(ims::_logger, (uint64_t)&v27, (uint64_t)&v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Unable to include precondition failure SDP in ", 46);
        *(_BYTE *)(v20 + 17) = 0;
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a3 + 48))(&__p, a3);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v20 + 32))(v20, &__p);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v20 + 17) = 0;
        if (v26 < 0)
          operator delete(__p);
        if (v29 < 0)
          operator delete(v27);
      }
      v21 = (std::__shared_weak_count *)v32;
      if (v32)
      {
        v22 = (unint64_t *)(v32 + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v27, "bambi.call");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v19 = ImsLogger::error(ims::_logger, (uint64_t)&v27, (uint64_t)&v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Unable to include precondition failure SDP in ", 46);
      *(_BYTE *)(v19 + 17) = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a3 + 48))(&__p, a3);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v19 + 32))(v19, &__p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v19 + 17) = 0;
      if (v26 < 0)
        operator delete(__p);
      if (v29 < 0)
        operator delete(v27);
    }
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_1BEF7C67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

uint64_t SipSession::sendPendingBye(SipSession *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  SipRequest *RequestInDialog;
  uint64_t v10;
  uint64_t v11;
  SipUserAgent *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::string __p[24];
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _OWORD v46[3];

  if (!*((_QWORD *)this + 193))
  {
    v26 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"sendPendingBye called, but we don't have a pending termination event", 68);
    *(_BYTE *)(v26 + 17) = 0;
    result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v26 + 17) = 0;
    return result;
  }
  memset(v46, 0, sizeof(v46));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v42, (_QWORD *)this + 22);
  if (v42)
    v2 = v42 + 104;
  else
    v2 = 0;
  v44 = v2;
  v45 = v43;
  v42 = 0;
  v43 = 0;
  LoggableString::LoggableString((LoggableString *)__p, "sendPendingBye");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v46, &v44, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v3 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = v43;
  if (v43)
  {
    v7 = (unint64_t *)&v43->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  RequestInDialog = SipDialog::createRequestInDialog(*((_QWORD *)this + 30), (const std::string *)&SipRequest::kMethodBye, 0);
  v10 = *((_QWORD *)this + 30);
  if (v10 && (v11 = *(_QWORD *)(v10 + 208)) != 0)
    v12 = *(SipUserAgent **)(v11 + 136);
  else
    v12 = 0;
  if (*(_BYTE *)(SipUserAgent::config(v12) + 612))
    BambiCallTerminationReason::addReasonToRequest(*((const std::string **)this + 193), RequestInDialog);
  v13 = *((_QWORD *)this + 193);
  (*(void (**)(uint64_t *__return_ptr, SipSession *))(*(_QWORD *)this + 128))(&v40, this);
  SipSession::addTerminationSdpToMessage((std::__shared_weak_count *)this, v13, (uint64_t)RequestInDialog, &v40);
  v14 = v41;
  if (v41)
  {
    v15 = (unint64_t *)&v41->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_23_1);
  SipSession::sendRequest(RequestInDialog, (uint64_t)this, (uint64_t)__p, &v42);
  v18 = v42;
  v17 = v43;
  if (v43)
  {
    v19 = (unint64_t *)&v43->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (RequestInDialog)
    (*(void (**)(SipRequest *))(*(_QWORD *)RequestInDialog + 8))(RequestInDialog);
  SipDialog::stack(*((std::__shared_weak_count **)this + 30), __p);
  if (!*(_BYTE *)(__p[0].__r_.__value_.__r.__words[0] + 2657))
  {
    size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
    if (__p[0].__r_.__value_.__l.__size_)
    {
      v29 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    goto LABEL_51;
  }
  v21 = *((_QWORD *)this + 193);
  v22 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
  if (__p[0].__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (v21)
        goto LABEL_43;
LABEL_51:
      v42 = 0;
      v43 = 0;
      v31 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
      if (v31)
      {
        v32 = std::__shared_weak_count::lock(v31);
        v43 = v32;
        if (v32)
        {
          v42 = *((_QWORD *)this + 96);
          if (v42)
          {
            v33 = *(_QWORD *)this;
            if (v18)
            {
              v34 = (*(uint64_t (**)(SipSession *))(v33 + 64))(this);
              (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v34);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)"strict call flows are on. Waiting for BYE response before terminating", 69);
              *(_BYTE *)(v34 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v34 + 17) = 0;
              SipTypedStateMachine<SipSessionState>::transitionToState((_QWORD *)this + 82, 10);
              bzero(__p, 0x250uLL);
              BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)__p, 14, *((_QWORD *)this + 193));
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78CA488;
              SipSession::fireCallEvent(this, (BambiCallEvent *)__p);
              BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)__p);
LABEL_66:
              v36 = (unint64_t *)&v32->__shared_owners_;
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
              return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v46);
            }
            v38 = (*(uint64_t (**)(SipSession *))(v33 + 56))(this);
            (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v38);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"unable to send BYE. Terminating immediately.", 44);
            *(_BYTE *)(v38 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v38 + 17) = 0;
          }
        }
      }
      else
      {
        v32 = 0;
      }
      bzero(__p, 0x250uLL);
      BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)__p, 15, *((_QWORD *)this + 193));
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BD2A8;
      v35 = *((_QWORD *)this + 193);
      if (v35)
      {
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v35 + 112);
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v35 + 96);
        if (*(char *)(v35 + 95) < 0)
          operator delete(*(void **)(v35 + 72));
        if (*(char *)(v35 + 55) < 0)
          operator delete(*(void **)(v35 + 32));
        if (*(char *)(v35 + 31) < 0)
          operator delete(*(void **)(v35 + 8));
        MEMORY[0x1C3B87100](v35, 0x1032C40D4AF1F8FLL);
      }
      *((_QWORD *)this + 193) = 0;
      SipSession::terminateWithEvent(this, (BambiCallEvent *)__p, 13);
      BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)__p);
      if (!v32)
        return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v46);
      goto LABEL_66;
    }
  }
  if (!v21)
    goto LABEL_51;
LABEL_43:
  v25 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Lazuli termination:  Waiting for BYE response before terminating", 64);
  *(_BYTE *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v25 + 17) = 0;
  SipTypedStateMachine<SipSessionState>::transitionToState((_QWORD *)this + 82, 10);
  bzero(__p, 0x250uLL);
  BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)__p, 14, *((_QWORD *)this + 193));
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78CA488;
  SipSession::fireCallEvent(this, (BambiCallEvent *)__p);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)__p);
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v46);
}

void sub_1BEF7CD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v14 - 128);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v14 - 96);
  _Unwind_Resume(a1);
}

void SipSession::bye(SipSession *this@<X0>, char **a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  ImsResult *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  BambiCallTerminationReason *v17;
  char *v18;
  int v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  std::string __p;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _OWORD v34[5];

  if ((*(unsigned int (**)(SipSession *))(*(_QWORD *)this + 264))(this))
  {
    memset((char *)&v34[1] + 8, 0, 32);
    *(_OWORD *)((char *)&v34[3] + 8) = 0u;
    *(_QWORD *)&v34[0] = &off_1E78B7238;
    *((_QWORD *)&v34[0] + 1) = &_bambiDomain;
    LODWORD(v34[1]) = 1073741826;
    v8 = (ImsResult *)ImsResult::operator<<<char [41]>((uint64_t)v34, "can't send a BYE in a terminated session");
    ImsLogContainer::logResult(this, v8);
    ImsResult::ImsResult((ImsResult *)a4, v8);
    ImsResult::~ImsResult((ImsResult *)v34);
  }
  else
  {
    memset(v34, 0, 48);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v30, (_QWORD *)this + 22);
    if (v30)
      v9 = v30 + 104;
    else
      v9 = 0;
    v32 = v9;
    v33 = v31;
    v30 = 0;
    v31 = 0;
    LoggableString::LoggableString((LoggableString *)&__p, "bye");
    SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v34, &v32, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v10 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v31;
    if (v31)
    {
      v14 = (unint64_t *)&v31->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = *((_QWORD *)this + 193);
    if (v16)
    {
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v16 + 112);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v16 + 96);
      if (*(char *)(v16 + 95) < 0)
        operator delete(*(void **)(v16 + 72));
      if (*(char *)(v16 + 55) < 0)
        operator delete(*(void **)(v16 + 32));
      if (*(char *)(v16 + 31) < 0)
        operator delete(*(void **)(v16 + 8));
      MEMORY[0x1C3B87100](v16, 0x1032C40D4AF1F8FLL);
    }
    v17 = (BambiCallTerminationReason *)operator new();
    BambiCallTerminationReason::BambiCallTerminationReason(v17, (const BambiCallTerminationReason *)a2);
    *((_QWORD *)this + 193) = v17;
    if (*(_BYTE *)(*((_QWORD *)this + 30) + 1920) || *((_BYTE *)this + 1537))
      goto LABEL_28;
    v18 = (char *)*((unsigned __int8 *)a2 + 31);
    v19 = (char)v18;
    if ((char)v18 < 0)
      v18 = a2[2];
    if (v18 == (char *)13)
    {
      v22 = a2[1];
      v21 = (char *)(a2 + 1);
      v20 = v22;
      v23 = v19 >= 0 ? v21 : v20;
      v24 = *(_QWORD *)v23;
      v25 = *(_QWORD *)(v23 + 5);
      v26 = v24 == *(_QWORD *)"NoAckReceived" && v25 == *(_QWORD *)"Received";
      v27 = v26;
    }
    else
    {
      v27 = 0;
    }
    if (v27 || (a3 & 1) != 0)
    {
LABEL_28:
      SipSession::sendPendingBye(this);
    }
    else
    {
      v28 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"deferring BYE until we receive an ACK", 37);
      *(_BYTE *)(v28 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v28 + 17) = 0;
      SipTypedStateMachine<SipSessionState>::transitionToState((_QWORD *)this + 82, 11);
    }
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
    SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v34);
  }
}

void sub_1BEF7D118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;

  MEMORY[0x1C3B87100](v20, 0x1032C40D4AF1F8FLL);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void SipSession::sendSessionRefresh(SipSession *this@<X0>, uint64_t a2@<X8>)
{
  ImsResult *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  ImsPrefs *v10;
  void **UseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey;
  void *v12;
  uint64_t v13;
  _BOOL4 v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  SipRequest *v17;
  uint64_t v18;
  std::string::size_type size;
  std::string *v20;
  const char *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t *v24;
  uint64_t *v25;
  ImsResult *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::string v32;
  void *__p[2];
  _OWORD v34[4];
  const char *v35;

  if ((*(unsigned int (**)(SipSession *))(*(_QWORD *)this + 264))(this))
  {
    memset((char *)v34 + 8, 0, 48);
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    LODWORD(v34[0]) = 1073741826;
    v4 = (ImsResult *)ImsResult::operator<<<char [53]>((uint64_t)__p, "can't send a session refresh in a terminated session");
    ImsLogContainer::logResult(this, v4);
    ImsResult::ImsResult((ImsResult *)a2, v4);
    ImsResult::~ImsResult((ImsResult *)__p);
    return;
  }
  memset(&v32, 0, sizeof(v32));
  v5 = *((_QWORD *)this + 30);
  if (v5 && (v6 = *(_QWORD *)(v5 + 208)) != 0)
    v7 = *(_QWORD *)(v6 + 136);
  else
    v7 = 0;
  v30 = 0;
  v31 = 0;
  v8 = *(std::__shared_weak_count **)(v7 + 16);
  if (v8)
  {
    v8 = std::__shared_weak_count::lock(v8);
    v9 = v8;
    v31 = v8;
    if (v8)
    {
      v8 = *(std::__shared_weak_count **)(v7 + 8);
      v30 = v8;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = (ImsPrefs *)SipStack::prefs((SipStack *)v8);
  UseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey = (void **)ImsPrefs::getUseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey(v10);
  v12 = ImsPrefs::prefWithKey(v10, UseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey);
  if (v12)
  {
    if (!(*(unsigned int (**)(void *))(*(_QWORD *)v12 + 40))(v12))
      goto LABEL_16;
  }
  else if (!*((_BYTE *)UseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey + 57))
  {
LABEL_16:
    v14 = 0;
    goto LABEL_17;
  }
  v13 = *((_QWORD *)this + 30);
  if (*(_BYTE *)(v13 + 1920))
    goto LABEL_16;
  std::string::basic_string[abi:ne180100]<0>(__p, "UPDATE");
  v14 = !SipDialog::remoteSideAllows(v13, (uint64_t)__p);
  if (SBYTE7(v34[0]) < 0)
    operator delete(__p[0]);
  if (!v9)
    goto LABEL_21;
LABEL_17:
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v14)
      goto LABEL_22;
  }
  else
  {
LABEL_21:
    if (v14)
    {
LABEL_22:
      std::string::operator=(&v32, (const std::string *)"INVITE");
      *(_BYTE *)(*((_QWORD *)this + 168) + 208) = 1;
      goto LABEL_25;
    }
  }
  std::string::operator=(&v32, (const std::string *)"UPDATE");
LABEL_25:
  v17 = SipDialog::createRequestInDialog(*((_QWORD *)this + 30), &v32, 0);
  v18 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  if (size != 6)
    goto LABEL_43;
  if ((*((_BYTE *)&v32.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v32.__r_.__value_.__l.__data_, "INVITE", v32.__r_.__value_.__l.__size_))
    {
LABEL_43:
      v22 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"sending session refresh request", 31);
      *(_BYTE *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v22 + 17) = 0;
      v30 = 0;
      v31 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_23_1);
      SipSession::sendRequest(v17, (uint64_t)this, (uint64_t)__p, &v30);
      if (SBYTE7(v34[0]) < 0)
        operator delete(__p[0]);
      if (v17)
        (*(void (**)(SipRequest *))(*(_QWORD *)v17 + 8))(v17);
      v23 = v30;
      if (v30)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_23_1);
        v35 = "SessionRefresh";
        v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v23[15].__shared_weak_owners_, (void **)"SessionRefresh", (uint64_t)&std::piecewise_construct, (__int128 **)&v35);
        std::string::operator=((std::string *)(v24 + 7), (const std::string *)__p);
        if (SBYTE7(v34[0]) < 0)
          operator delete(__p[0]);
        __p[0] = "UpdateType";
        v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v23[15].__shared_weak_owners_, (void **)"UpdateType", (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        std::string::operator=((std::string *)(v25 + 7), (const std::string *)_MergedGlobals_8);
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_QWORD *)a2 = &off_1E78B7238;
        *(_QWORD *)(a2 + 8) = &_bambiDomain;
        *(_DWORD *)(a2 + 16) = 0;
      }
      else
      {
        memset((char *)v34 + 8, 0, 48);
        __p[0] = &off_1E78B7238;
        __p[1] = &_bambiDomain;
        LODWORD(v34[0]) = 0x40000000;
        v26 = (ImsResult *)ImsResult::operator<<<char [39]>((uint64_t)__p, "unable to send session refresh request");
        ImsLogContainer::logResult(this, v26);
        ImsResult::ImsResult((ImsResult *)a2, v26);
        ImsResult::~ImsResult((ImsResult *)__p);
      }
      v27 = v31;
      if (v31)
      {
        v28 = (unint64_t *)&v31->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      goto LABEL_57;
    }
  }
  else if (*((_BYTE *)&v32.__r_.__value_.__s + 23))
  {
    v20 = &v32;
    v21 = "INVITE";
    while (v20->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v21)
    {
      v20 = (std::string *)((char *)v20 + 1);
      ++v21;
      if (!--v18)
        goto LABEL_38;
    }
    goto LABEL_43;
  }
LABEL_38:
  *(_OWORD *)__p = 0u;
  memset(v34, 0, 56);
  SipSession::addBodyToInvite((uint64_t)__p, this, v17, (unsigned __int8 *)&SipSession::kInviteTypeSessionRefresh);
  if (!(*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)__p[1] + 24))(__p[1], LODWORD(v34[0])))
  {
    ImsResult::~ImsResult((ImsResult *)__p);
    goto LABEL_43;
  }
  if (v17)
    (*(void (**)(SipRequest *))(*(_QWORD *)v17 + 8))(v17);
  ImsLogContainer::logResult(this, (ImsResult *)__p);
  ImsResult::ImsResult((ImsResult *)a2, (const ImsResult *)__p);
  ImsResult::~ImsResult((ImsResult *)__p);
LABEL_57:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1BEF7D680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

double SipSession::sendPublish@<D0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  SipRequest *RequestInDialog;
  SipMessage *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  double result;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  char v18;

  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = qword_1ED70D270;
  if (byte_1ED70D27F >= 0)
    v6 = byte_1ED70D27F;
  if (v5 != v6)
    goto LABEL_27;
  if (byte_1ED70D27F >= 0)
    v8 = &SipSession::kPublishTypeEmergencyLocation;
  else
    v8 = (uint64_t *)SipSession::kPublishTypeEmergencyLocation;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v8, *((_QWORD *)a2 + 1)))
    {
LABEL_27:
      result = 0.0;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(_QWORD *)a3 = &off_1E78B7238;
      *(_QWORD *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
      return result;
    }
  }
  else if (a2[23])
  {
    while (*a2 == *(unsigned __int8 *)v8)
    {
      ++a2;
      v8 = (uint64_t *)((char *)v8 + 1);
      if (!--v4)
        goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_16:
  RequestInDialog = SipDialog::createRequestInDialog(a1[30], (const std::string *)"PUBLISH", 1);
  if (RequestInDialog)
  {
    v10 = RequestInDialog;
    std::string::basic_string[abi:ne180100]<0>(__p, "presence");
    SipMessage::addHeader(v10, (uint64_t)"Event", (uint64_t)__p, 0);
    if (v18 < 0)
      operator delete(__p[0]);
    SipSession::addLocationToMessage((SipSession *)a1, v10);
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_23_1);
    SipSession::sendRequest(v10, (uint64_t)a1, (uint64_t)__p, &v15);
    v11 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v18 < 0)
      operator delete(__p[0]);
    (*(void (**)(SipMessage *))(*(_QWORD *)v10 + 8))(v10);
    goto LABEL_27;
  }
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 1073741829;
  return result;
}

void sub_1BEF7D938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipSession::sendUpdateWithSdpInFork(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, const std::string *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  ImsResult *v12;
  SipRequest *RequestInDialog;
  SipMessage *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::string::size_type v21;
  SipHeader *v22;
  __int128 *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _BOOL4 v27;
  _BOOL4 v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  const ImsResult *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _BOOL4 v45;
  _BOOL4 v46;
  unint64_t *v47;
  unint64_t v48;
  const ImsResult *v49;
  SipOfferAnswer *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  const std::string *v54;
  ImsStringOutStream *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  __int128 *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  const ImsResult *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _BYTE v70[72];
  SipOfferAnswer *v71;
  std::__shared_weak_count *v72;
  void *v73;
  std::__shared_weak_count *v74;
  char v75;
  void *__p;
  char v77;
  std::string v78;
  void (**v79)(SipParameterMap *__hidden);
  uint64_t v80[3];
  char v81;
  char v82;
  uint64_t v83[2];
  char *v84;
  uint64_t *v85;
  int v86;
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 264))(a1))
  {
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v84 = (char *)&off_1E78B7238;
    v85 = &_bambiDomain;
    v86 = 1073741826;
    v12 = (ImsResult *)ImsResult::operator<<<char [45]>((uint64_t)&v84, "can't send an UPDATE in a terminated session");
    ImsLogContainer::logResult((ImsLogContainer *)a1, v12);
    ImsResult::ImsResult((ImsResult *)a6, v12);
    ImsResult::~ImsResult((ImsResult *)&v84);
    return;
  }
  RequestInDialog = SipDialog::createRequestInDialog(a1[30], (const std::string *)"UPDATE", 0);
  v14 = RequestInDialog;
  v15 = *a2;
  v16 = (std::__shared_weak_count *)a2[1];
  v83[0] = v15;
  v83[1] = (uint64_t)v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  SipMessage::setSdp((uint64_t)RequestInDialog, v83);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (*(char *)(a5 + 23) < 0)
  {
    v21 = *(_QWORD *)(a5 + 8);
    if (!v21)
      goto LABEL_18;
    std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)a5, v21);
  }
  else
  {
    if (!*(_BYTE *)(a5 + 23))
      goto LABEL_18;
    v78 = *(std::string *)a5;
  }
  v79 = &off_1E78B82D8;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(v80, *(void ***)(a5 + 32), (void **)(a5 + 40));
  v82 = 1;
  v81 = *(_BYTE *)(a5 + 56);
  v22 = SipMessage::header<SipReasonHeader>(v14, 1);
  SipReasonHeader::addReason(v22, (const SipReason *)&v78);
  v79 = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v80, (_QWORD *)v80[1]);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
LABEL_18:
  if ((SipSession::confirmed((SipSession *)a1) & 1) == 0)
    SipPreconditions::addPreconditionsToOutgoingRequest((uint64_t)(a1 + 175), *(_QWORD *)a3 + 152, (uint64_t)v14, 0);
  v23 = *(__int128 **)(*(_QWORD *)a3 + 656);
  v24 = *(std::__shared_weak_count **)(*(_QWORD *)a3 + 664);
  v84 = (char *)v23;
  v85 = (uint64_t *)v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = SipOfferAnswer::remoteAnswerPending((SipOfferAnswer *)v23);
  v28 = v27;
  if (!v24)
    goto LABEL_27;
  v29 = (unint64_t *)&v24->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (v28)
      goto LABEL_28;
  }
  else
  {
LABEL_27:
    if (v27)
    {
LABEL_28:
      *(_QWORD *)(a6 + 64) = 0;
      *(_OWORD *)(a6 + 32) = 0u;
      *(_OWORD *)(a6 + 48) = 0u;
      *(_OWORD *)a6 = 0u;
      *(_OWORD *)(a6 + 16) = 0u;
      v88 = 0u;
      v89 = 0u;
      v90 = 0u;
      v84 = (char *)&off_1E78B7238;
      v85 = &_bambiDomain;
      v86 = 1073741826;
      v31 = ImsResult::operator<<<char [38]>((uint64_t)&v84, "remote answer pending in transaction ");
      v32 = *(void **)(*(_QWORD *)a3 + 656);
      v33 = *(std::__shared_weak_count **)(*(_QWORD *)a3 + 664);
      v73 = v32;
      v74 = v33;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v36 = SipOfferAnswer::transactionId((SipOfferAnswer *)v32);
      v37 = (const ImsResult *)ImsResult::operator<<<std::string>(v31, v36);
      ImsResult::ImsResult((ImsResult *)a6, v37);
      if (v33)
      {
        v38 = (unint64_t *)&v33->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      ImsResult::~ImsResult((ImsResult *)&v84);
      v40 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"can't send update in fork ", 26);
      *(_BYTE *)(v40 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)&v84, (const std::string *)(*(_QWORD *)a3 + 152));
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v40 + 56))(v40, &v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v40 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 16))(a6, v40);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_61:
      *(_BYTE *)(v40 + 17) = 0;
      if (SBYTE7(v89) < 0)
        operator delete((void *)v88);
      if (v87 < 0)
        operator delete(v84);
      return;
    }
  }
  v41 = *(_QWORD *)(*(_QWORD *)a3 + 656);
  v42 = *(std::__shared_weak_count **)(*(_QWORD *)a3 + 664);
  v84 = (char *)v41;
  v85 = (uint64_t *)v42;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = SipOfferAnswer::localAnswerPending(*(SipOfferAnswer **)(*(_QWORD *)(v41 + 152) + 16), *(std::__shared_weak_count **)(*(_QWORD *)(v41 + 152) + 24));
  v46 = v45;
  if (!v42)
    goto LABEL_45;
  v47 = (unint64_t *)&v42->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    if (v46)
      goto LABEL_46;
  }
  else
  {
LABEL_45:
    if (v45)
    {
LABEL_46:
      *(_QWORD *)(a6 + 64) = 0;
      *(_OWORD *)(a6 + 32) = 0u;
      *(_OWORD *)(a6 + 48) = 0u;
      *(_OWORD *)a6 = 0u;
      *(_OWORD *)(a6 + 16) = 0u;
      v88 = 0u;
      v89 = 0u;
      v90 = 0u;
      v84 = (char *)&off_1E78B7238;
      v85 = &_bambiDomain;
      v86 = 1073741826;
      v49 = (const ImsResult *)ImsResult::operator<<<char [37]>((uint64_t)&v84, "local answer pending in transaction ");
      v50 = *(SipOfferAnswer **)(*(_QWORD *)a3 + 656);
      v51 = *(std::__shared_weak_count **)(*(_QWORD *)a3 + 664);
      v71 = v50;
      v72 = v51;
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      v54 = (const std::string *)SipOfferAnswer::transactionId(v50);
      ObfuscatedString::ObfuscatedString((uint64_t)&v73, v54);
      v55 = (ImsStringOutStream *)*((_QWORD *)v49 + 3);
      if (!v55)
      {
        v55 = (ImsStringOutStream *)operator new();
        ImsStringOutStream::ImsStringOutStream(v55, *(_BYTE *)(*((_QWORD *)v49 + 1) + 32));
        *((_QWORD *)v49 + 3) = v55;
      }
      (*(void (**)(ImsStringOutStream *, void **))(*(_QWORD *)v55 + 56))(v55, &v73);
      ImsResult::ImsResult((ImsResult *)a6, v49);
      if (v77 < 0)
        operator delete(__p);
      if (v75 < 0)
        operator delete(v73);
      if (v51)
      {
        v56 = (unint64_t *)&v51->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      ImsResult::~ImsResult((ImsResult *)&v84);
      v40 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"can't send update in fork ", 26);
      *(_BYTE *)(v40 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)&v84, (const std::string *)(*(_QWORD *)a3 + 152));
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v40 + 56))(v40, &v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v40 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 16))(a6, v40);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_61;
    }
  }
  v73 = 0;
  v74 = 0;
  SipSession::sendRequest(v14, (uint64_t)a1, *(_QWORD *)a3 + 152, &v73);
  v58 = (char *)v73;
  if (v73)
  {
    v84 = "UpdateType";
    v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v73 + 47, (void **)"UpdateType", (uint64_t)&std::piecewise_construct, (__int128 **)&v84);
    std::string::operator=((std::string *)(v59 + 7), a4);
    v60 = *(__int128 **)(*(_QWORD *)a3 + 656);
    v61 = *(std::__shared_weak_count **)(*(_QWORD *)a3 + 664);
    v84 = (char *)v60;
    v85 = (uint64_t *)v61;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    SipOfferAnswer::updateWithOutgoingMessage((SipOfferAnswer *)v60, (uint64_t)v14, (std::string *)(v58 + 320), (uint64_t)v70);
    ImsResult::~ImsResult((ImsResult *)v70);
    if (v61)
    {
      v64 = (unint64_t *)&v61->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
  }
  if (v14)
    (*(void (**)(SipMessage *))(*(_QWORD *)v14 + 8))(v14);
  if (v73)
  {
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 56) = 0u;
    *(_QWORD *)a6 = &off_1E78B7238;
    *(_QWORD *)(a6 + 8) = &_bambiDomain;
    *(_DWORD *)(a6 + 16) = 0;
  }
  else
  {
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v84 = (char *)&off_1E78B7238;
    v85 = &_bambiDomain;
    v86 = 0x40000000;
    v66 = (const ImsResult *)ImsResult::operator<<<char [11]>((uint64_t)&v84, "send error");
    ImsResult::ImsResult((ImsResult *)a6, v66);
    ImsResult::~ImsResult((ImsResult *)&v84);
  }
  v67 = v74;
  if (v74)
  {
    v68 = (unint64_t *)&v74->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_1BEF7E154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  MEMORY[0x1C3B87100](v32, 0x10A1C4082A5C483);
  ims::AccessNetwork::~AccessNetwork(&a21);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  ImsResult::~ImsResult((ImsResult *)(v33 - 152));
  _Unwind_Resume(a1);
}

void SipReason::~SipReason(SipReason *this)
{
  *((_QWORD *)this + 3) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t ImsResult::operator<<<char [37]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF7E32C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [11]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF7E3D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipSession::sendUpdateWithLocalSdpInAllForks(uint64_t *a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  ImsResult *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  ImsResult *v26;
  const ImsResult *v27;
  char v28;
  void *v29[2];
  char v30;
  void *__p;
  char v32;
  std::string v33;
  void (**v34)(SipParameterMap *__hidden);
  uint64_t v35[3];
  char v36;
  char v37;
  _QWORD v38[2];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[6];

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 264))(a1))
  {
    memset((char *)&v46[1] + 8, 0, 48);
    *(_QWORD *)&v46[0] = &off_1E78B7238;
    *((_QWORD *)&v46[0] + 1) = &_bambiDomain;
    LODWORD(v46[1]) = 1073741826;
    v8 = (ImsResult *)ImsResult::operator<<<char [45]>((uint64_t)v46, "can't send an UPDATE in a terminated session");
    ImsLogContainer::logResult((ImsLogContainer *)a1, v8);
    ImsResult::ImsResult((ImsResult *)a4, v8);
    ImsResult::~ImsResult((ImsResult *)v46);
    return;
  }
  v43 = 0;
  v44 = 0;
  v45 = 0;
  SipDialog::allForks(a1[30], (uint64_t)&v43);
  v10 = v43;
  v9 = v44;
  if (v43 == v44)
  {
    memset((char *)&v46[1] + 8, 0, 48);
    *(_QWORD *)&v46[0] = &off_1E78B7238;
    *((_QWORD *)&v46[0] + 1) = &_bambiDomain;
    LODWORD(v46[1]) = 1073741826;
    v26 = (ImsResult *)ImsResult::operator<<<char [37]>((uint64_t)v46, "sendUpdate: dialog contains no forks");
    ImsLogContainer::logResult((ImsLogContainer *)a1, v26);
    ImsResult::ImsResult((ImsResult *)a4, v26);
    goto LABEL_49;
  }
  v28 = 0;
  do
  {
    v41 = 0;
    v42 = 0;
    SipDialogFork::createSdpOffer(*(SipDialogFork **)v10, "UPDATE", (unsigned __int8 *)a2, &v41);
    if (v41)
    {
      memset(v46, 0, 72);
      v39 = v41;
      v40 = v42;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = *(std::__shared_weak_count **)(v10 + 8);
      v38[0] = *(_QWORD *)v10;
      v38[1] = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v33 = *(std::string *)a3;
      v34 = &off_1E78B82D8;
      std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(v35, *(void ***)(a3 + 32), (void **)(a3 + 40));
      v37 = 1;
      v36 = *(_BYTE *)(a3 + 56);
      SipSession::sendUpdateWithSdpInFork(a1, &v39, (uint64_t)v38, a2, (uint64_t)&v33, (uint64_t)v46);
      v34 = &off_1E78B82D8;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v35, (_QWORD *)v35[1]);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v33.__r_.__value_.__l.__data_);
        if (!v13)
          goto LABEL_27;
      }
      else if (!v13)
      {
LABEL_27:
        v19 = v40;
        if (v40)
        {
          v20 = (unint64_t *)&v40->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v46[0] + 1) + 24))(*((_QWORD *)&v46[0] + 1), LODWORD(v46[1])) & 1) != 0)
        {
          v22 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
          (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"unable to send SDP in fork ", 27);
          *(_BYTE *)(v22 + 17) = 0;
          ObfuscatedString::ObfuscatedString((uint64_t)v29, (const std::string *)(*(_QWORD *)v10 + 152));
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 56))(v22, v29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)": ", 2);
          *(_BYTE *)(v22 + 17) = 0;
          (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)&v46[0] + 16))(v46, v22);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v22 + 17) = 0;
          if (v32 < 0)
            operator delete(__p);
          if (v30 < 0)
            operator delete(v29[0]);
        }
        else
        {
          v28 = 1;
        }
        ImsResult::~ImsResult((ImsResult *)v46);
        goto LABEL_39;
      }
      v17 = (unint64_t *)&v13->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      goto LABEL_27;
    }
    v16 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"unable to create SDP in fork ", 29);
    *(_BYTE *)(v16 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v46, (const std::string *)(*(_QWORD *)v10 + 152));
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 56))(v16, v46);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (SHIBYTE(v46[2]) < 0)
      operator delete(*((void **)&v46[1] + 1));
    if (SBYTE7(v46[1]) < 0)
      operator delete(*(void **)&v46[0]);
LABEL_39:
    v23 = v42;
    if (v42)
    {
      v24 = (unint64_t *)&v42->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v10 += 16;
  }
  while (v10 != v9);
  if ((v28 & 1) != 0)
  {
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_50;
  }
  memset((char *)&v46[1] + 8, 0, 48);
  *(_QWORD *)&v46[0] = &off_1E78B7238;
  *((_QWORD *)&v46[0] + 1) = &_bambiDomain;
  LODWORD(v46[1]) = 0x40000000;
  v27 = (const ImsResult *)ImsResult::operator<<<char [35]>((uint64_t)v46, "unable to send UPDATE on any forks");
  ImsResult::ImsResult((ImsResult *)a4, v27);
LABEL_49:
  ImsResult::~ImsResult((ImsResult *)v46);
LABEL_50:
  *(_QWORD *)&v46[0] = &v43;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
}

void sub_1BEF7E950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  uint64_t v35;

  ImsResult::~ImsResult((ImsResult *)(v35 - 176));
  *(_QWORD *)(v35 - 176) = &a35;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 176));
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [35]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF7EA9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t SipSession::exitWPSCleanup(SipSession *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 89);
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 48))(result) == 14)
      return SipTypedStateMachine<SipSessionState>::transitionToState((_QWORD *)this + 82, 13);
    result = *((_QWORD *)this + 89);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
      if ((_DWORD)result == 15)
        return SipTypedStateMachine<SipSessionState>::transitionToState((_QWORD *)this + 82, 13);
    }
  }
  return result;
}

ImsOutStream *SipSession::printSessionInfo(SipSession *this, ImsOutStream *a2)
{
  int v4;
  const char *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const std::string *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string::size_type i;
  std::string::size_type size;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::string::size_type v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  SipDialog *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v50;
  std::string v51;
  void *__p;
  char v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::string *v56;

  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if ((*((char *)this + 1399) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 1399))
      goto LABEL_9;
LABEL_5:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Bambi Call ID:   ", 19);
    *((_BYTE *)a2 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v51, (const std::string *)((char *)this + 1376));
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 56))(a2, &v51);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    if (v53 < 0)
      operator delete(__p);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    goto LABEL_9;
  }
  if (*((_QWORD *)this + 173))
    goto LABEL_5;
LABEL_9:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Established:     ", 19);
  *((_BYTE *)a2 + 17) = 0;
  v4 = SipSession::established(this);
  if (v4)
    v5 = "yes";
  else
    v5 = "no";
  if (v4)
    v6 = 3;
  else
    v6 = 2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)v5, v6);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Confirmed:       ", 19);
  *((_BYTE *)a2 + 17) = 0;
  v7 = SipSession::confirmed(this);
  if (v7)
    v8 = "yes";
  else
    v8 = "no";
  if (v7)
    v9 = 3;
  else
    v9 = 2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)v8, v9);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  State:           ", 19);
  *((_BYTE *)a2 + 17) = 0;
  v10 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 82) + 24))((char *)this + 656);
  v11 = (const std::string *)(*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this + 82) + 16))((char *)this + 656, v10);
  LoggableString::LoggableString(&v51, v11);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v51);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Preconditions:   ", 19);
  *((_BYTE *)a2 + 17) = 0;
  SipPreconditions::printInfo((SipSession *)((char *)this + 1400), a2);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v12 = *((_QWORD *)this + 30);
  memset(&v51, 0, sizeof(v51));
  v54 = 0;
  v55 = 0;
  SipDialog::currentClientTransactions(v12, (uint64_t)&v51, "INVITE", &v54);
  v13 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  size = v51.__r_.__value_.__l.__size_;
  for (i = v51.__r_.__value_.__r.__words[0]; i != size; i += 16)
  {
    v19 = *(_QWORD **)i;
    v18 = *(std::__shared_weak_count **)(i + 8);
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    if (!(*(unsigned int (**)(_QWORD *))(*v19 + 144))(v19))
      goto LABEL_41;
    if (v18)
    {
      v22 = (unint64_t *)&v18->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v18 = 0;
  v19 = 0;
LABEL_41:
  v56 = &v51;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  v50 = v18;
  if (v18)
  {
    v24 = (unint64_t *)&v18->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v19)
    goto LABEL_62;
  SipSession::serverInviteTransaction((SipSession *)&v51, *((_QWORD *)this + 30));
  v27 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
  if (v51.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(v51.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (v18)
  {
    v30 = (unint64_t *)&v18->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v32 = (std::__shared_weak_count *)v51.__r_.__value_.__l.__size_;
  if (v51.__r_.__value_.__l.__size_)
  {
    v33 = (unint64_t *)(v51.__r_.__value_.__l.__size_ + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v19 = (_QWORD *)v27;
  if ((_QWORD)v27)
  {
LABEL_62:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Current INVITE:  ", 19);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(std::string *__return_ptr, _QWORD *))(v19[12] + 24))(&v51, v19 + 12);
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v51);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
  }
  v35 = *((_QWORD *)this + 75);
  v36 = (std::__shared_weak_count *)*((_QWORD *)this + 76);
  if (!v36)
    goto LABEL_69;
  v37 = (unint64_t *)&v36->__shared_owners_;
  do
    v38 = __ldxr(v37);
  while (__stxr(v38 + 1, v37));
  do
    v39 = __ldaxr(v37);
  while (__stlxr(v39 - 1, v37));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    if (!v35)
      goto LABEL_79;
  }
  else
  {
LABEL_69:
    if (!v35)
      goto LABEL_79;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Transport:       ", 19);
  *((_BYTE *)a2 + 17) = 0;
  v40 = *((_QWORD *)this + 75);
  v41 = (std::__shared_weak_count *)*((_QWORD *)this + 76);
  v51.__r_.__value_.__r.__words[0] = v40;
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  (*(void (**)(std::string::size_type, ImsOutStream *))(*(_QWORD *)v40 + 104))(v40, a2);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (v41)
  {
    v44 = (unint64_t *)&v41->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
LABEL_79:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Session locks:   ", 19);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  SipLockable::printLocks((SipSession *)((char *)this + 104), a2);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v46 = (SipDialog *)*((_QWORD *)this + 30);
  if (v46)
    SipDialog::printDialogInfo(v46, a2);
  if (v50)
  {
    v47 = (unint64_t *)&v50->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  return a2;
}

void sub_1BEF7F180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t SipSession::nameForStateId(SipSession *this, unsigned int a2)
{
  unsigned int v2;

  if (a2 <= 0x10)
    v2 = a2;
  else
    v2 = 0;
  return (uint64_t)&_MergedGlobals_8 + 24 * v2 + 24;
}

uint64_t `non-virtual thunk to'SipSession::nameForStateId(SipSession *this, unsigned int a2)
{
  unsigned int v2;

  if (a2 <= 0x10)
    v2 = a2;
  else
    v2 = 0;
  return (uint64_t)&_MergedGlobals_8 + 24 * v2 + 24;
}

BOOL SipSession::terminated(SipSession *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BOOL8 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v1 = *((_QWORD *)this + 89);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  v15 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  if (!v1)
  {
    v9 = 0;
    if (!v2)
      return v9;
    goto LABEL_16;
  }
  v5 = *((_QWORD *)this + 89);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5) == 13;
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v2 = v15;
  if (v15)
  {
LABEL_16:
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v9;
}

void sub_1BEF7F35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipSession::handleAuthChallengeTimeout(std::__shared_weak_count *this)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  _BYTE v5[72];

  if ((((uint64_t (*)(std::__shared_weak_count *))this->__vftable[6].__get_deleter)(this) & 1) == 0)
  {
    v2 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].__on_zero_shared)(this);
    ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Terminating call due to auth challenge timeout", 46);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "InternalError");
    SipSession::hangUp(this, (uint64_t)__p, 0, (uint64_t)v5);
    ImsResult::~ImsResult((ImsResult *)v5);
    if (v4 < 0)
      operator delete(__p[0]);
  }
}

void sub_1BEF7F444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipSession::handleNewFork(uint64_t a1, SipDialogFork **a2)
{
  uint64_t v4;
  std::string *v5;
  int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  std::__shared_weak_count *v22;
  char v23;
  void *__p;
  char v25;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"handleNewFork: setting need to send update to ", 46);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 304))(a1, (uint64_t)*a2 + 152);
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" in fork ", 9);
  *(_BYTE *)(v4 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v21, (const std::string *)((char *)*a2 + 152));
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 56))(v4, &v21);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v25 < 0)
    operator delete(__p);
  if (v23 < 0)
    operator delete(v21);
  v5 = (std::string *)((char *)*a2 + 152);
  v6 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 304))(a1, v5);
  SipPreconditions::setNeedToSendUpdateInFork((__int128 *)(a1 + 1400), v5, v6);
  if (*((_QWORD *)*a2 + 109))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleNewFork: fork ", 20);
    *(_BYTE *)(v7 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v21, (const std::string *)((char *)*a2 + 152));
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 56))(v7, &v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" already has some bearer information!", 37);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v25 < 0)
      operator delete(__p);
    if (v23 < 0)
      operator delete(v21);
    SipPreconditions::handleLocalQoSEstablished((_QWORD **)(a1 + 1400), (void **)*a2 + 19);
  }
  v21 = 0;
  v22 = 0;
  v8 = *(std::__shared_weak_count **)(a1 + 776);
  if (v8)
  {
    v22 = std::__shared_weak_count::lock(v8);
    if (v22)
    {
      v9 = *(_BYTE **)(a1 + 768);
      v21 = v9;
      if (v9)
      {
        if (v9[1488] && *(_DWORD *)(a1 + 1484) != 1)
        {
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"We offered preconditions, setting up status for new fork", 56);
          *(_BYTE *)(v10 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v10 + 17) = 0;
          SipPreconditions::initializeNewFork(a1 + 1400, (std::string *)((char *)*a2 + 152));
        }
      }
    }
  }
  v19 = 0;
  v20 = 0;
  if (*(_BYTE *)(a1 + 1320))
  {
    v11 = *(_QWORD *)(a1 + 1136);
    if (!v11)
    {
LABEL_24:
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"handleNewFork: no local SDP to initialize SDP version", 53);
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v12 + 17) = 0;
      goto LABEL_25;
    }
    SDPSession::localLazuliSdp(*(SDPSession **)(v11 + 120), &v19);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 128))(&v19, a1);
  }
  if (!v19 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v19 + 40) + 24))(v19 + 40))
    goto LABEL_24;
  SipDialogFork::setSdpVersion(*a2, *(_QWORD *)(v19 + 136));
LABEL_25:
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1BEF7F844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipSession::updateBearerForPorts(uint64_t *a1, unsigned int a2, int a3, unsigned __int16 **a4, char a5)
{
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  SipPreconditions *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v23[2];
  char v24;
  void *__p;
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unsigned int v29;

  v29 = 2;
  v6 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    v11 = (SipPreconditions *)(a1 + 175);
    do
    {
      v12 = *v6;
      v27 = 0;
      v28 = 0;
      SipDialog::forkForBearerPort((SipDialog *)a1[30], v12, a3, &v29, &v27);
      v13 = *a1;
      if (!v27)
      {
        v16 = (*(uint64_t (**)(uint64_t *))(v13 + 48))(a1);
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"No fork using bearer port ", 26);
        *(_BYTE *)(v16 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v16 + 17) = 0;
        goto LABEL_19;
      }
      v14 = (*(uint64_t (**)(uint64_t *))(v13 + 64))(a1);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Updating bearer information for fork ", 37);
      *(_BYTE *)(v14 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v23, (const std::string *)(v27 + 152));
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 56))(v14, v23);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v14 + 17) = 0;
      if (v26 < 0)
        operator delete(__p);
      if (v24 < 0)
      {
        operator delete(v23[0]);
        if ((a5 & 1) != 0)
        {
LABEL_8:
          v15 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
          (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Faking QoS indication, do not store bearer information", 54);
          *(_BYTE *)(v15 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v15 + 17) = 0;
          goto LABEL_12;
        }
      }
      else if ((a5 & 1) != 0)
      {
        goto LABEL_8;
      }
      SipDialogFork::setBearer(v27, a2, (uint64_t)a4, v29);
LABEL_12:
      v17 = a1[184];
      v18 = *((_DWORD *)a1 + 372);
      if (v17 && v18 == 5)
      {
        if ((SipPreconditions::preconditionsActiveInAnyFork(v11) & 1) == 0)
          goto LABEL_19;
      }
      else if (v17 || v18 != 5)
      {
        goto LABEL_19;
      }
      SipPreconditions::handleLocalQoSEstablished((_QWORD **)v11, (void **)(v27 + 152));
LABEL_19:
      v19 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
}

void sub_1BEF7FB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipSession::handleRemoteQoSEstablished(uint64_t a1, unsigned int a2, int a3, uint64_t a4, char a5)
{
  ImsPrefs *v10;
  void **UseStrictBearerPreconditionsKey;
  void *v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  SipStack *v30;
  unint64_t *v31;
  unint64_t v32;
  SipStack *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  SipStack *v39;
  uint64_t v40;
  unint64_t *v41;
  SipStack *v42;
  std::__shared_weak_count *v43;
  char v44;
  void *__p;
  char v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  SipSessionInterface::stack((std::__shared_weak_count *)a1, &v42);
  v10 = (ImsPrefs *)SipStack::prefs(v42);
  UseStrictBearerPreconditionsKey = (void **)ImsPrefs::getUseStrictBearerPreconditionsKey(v10);
  v12 = ImsPrefs::prefWithKey(v10, UseStrictBearerPreconditionsKey);
  if (v12)
    v13 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 40))(v12);
  else
    v13 = *((_BYTE *)UseStrictBearerPreconditionsKey + 57) != 0;
  v14 = v43;
  if (!v43)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v43->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v13)
    {
LABEL_9:
      if (*(_QWORD *)a4 != *(_QWORD *)(a4 + 8))
      {
        SipSession::updateBearerForPorts((uint64_t *)a1, a2, a3, (unsigned __int16 **)a4, a5);
        return;
      }
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Bearer does not contain port information, we will use the only fork by default", 78);
      *(_BYTE *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v21 + 17) = 0;
      v42 = 0;
      v43 = 0;
      v22 = *(_QWORD **)(a1 + 240);
      if (v22[257] == 1)
      {
        v23 = v22[255];
        v24 = *(_QWORD *)(v23 + 56);
        v25 = *(std::__shared_weak_count **)(v23 + 64);
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v22 = *(_QWORD **)(a1 + 240);
        }
        if (v24)
        {
          if (v22[257] != 1)
          {
            v42 = 0;
            v43 = 0;
            if (!v25)
              goto LABEL_42;
            goto LABEL_38;
          }
          v28 = v22[255];
          v30 = *(SipStack **)(v28 + 56);
          v29 = *(std::__shared_weak_count **)(v28 + 64);
          v42 = v30;
          v43 = v29;
          if (v29)
          {
            v31 = (unint64_t *)&v29->__shared_owners_;
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
LABEL_37:
          if (!v25)
            goto LABEL_42;
LABEL_38:
          v37 = (unint64_t *)&v25->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
LABEL_42:
          v39 = v42;
          if (v42)
          {
            if ((a5 & 1) == 0)
              SipDialogFork::setBearer((uint64_t)v42, a2, a4, 2u);
            SipPreconditions::handleLocalQoSEstablished((_QWORD **)(a1 + 1400), (void **)v39 + 19);
          }
          else
          {
            v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v40);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"More than one fork exists, rejecting QoS for ambiguous bearer", 61);
            *(_BYTE *)(v40 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v40 + 17) = 0;
          }
          v18 = v43;
          if (v43)
          {
            v41 = (unint64_t *)&v43->__shared_owners_;
            do
              v20 = __ldaxr(v41);
            while (__stlxr(v20 - 1, v41));
LABEL_50:
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
            return;
          }
          return;
        }
      }
      else
      {
        v25 = 0;
      }
      v33 = (SipStack *)v22[260];
      v34 = (std::__shared_weak_count *)v22[261];
      v42 = v33;
      v43 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      goto LABEL_37;
    }
  }
  else
  {
LABEL_8:
    if (v13)
      goto LABEL_9;
  }
  v47 = 0;
  v48 = 0;
  SipDialog::bestAvailableFork(*(SipDialog **)(a1 + 240), &v47);
  if (v47)
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Using fork ", 11);
    *(_BYTE *)(v17 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v42, (const std::string *)(v47 + 152));
    (*(void (**)(uint64_t, SipStack **))(*(_QWORD *)v17 + 56))(v17, &v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" for bearer ", 12);
    *(_BYTE *)(v17 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (v46 < 0)
      operator delete(__p);
    if (v44 < 0)
      operator delete(v42);
    SipPreconditions::handleLocalQoSEstablished((_QWORD **)(a1 + 1400), (void **)(v47 + 152));
  }
  v18 = v48;
  if (v48)
  {
    v19 = (unint64_t *)&v48->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    goto LABEL_50;
  }
}

void sub_1BEF7FF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipSession::handleLocalQoSEstablished(SipSession *this)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24[2];
  char v25;
  void *__p;
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  SipDialog::allForks(*((_QWORD *)this + 30), (uint64_t)&v32);
  v2 = v32;
  for (i = v33; v2 != i; v2 += 2)
  {
    v4 = *v2;
    v5 = (std::__shared_weak_count *)v2[1];
    v30 = *v2;
    v31 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v28 = 0;
    v29 = 0;
    v8 = *(void **)(v4 + 656);
    v9 = *(std::__shared_weak_count **)(v4 + 664);
    v24[0] = v8;
    v24[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    SipOfferAnswer::activeRemoteSdp((SipOfferAnswer *)v8, &v28);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v14 = *(_QWORD *)this;
    if (v28)
    {
      v15 = (*(uint64_t (**)(SipSession *))(v14 + 64))(this);
      (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Fork ", 5);
      *(_BYTE *)(v15 + 17) = 0;
      v16 = (void **)(v30 + 152);
      ObfuscatedString::ObfuscatedString((uint64_t)v24, (const std::string *)(v30 + 152));
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 56))(v15, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" has remote SDP, setting QoS established", 40);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      if (v27 < 0)
        operator delete(__p);
      if (v25 < 0)
        operator delete(v24[0]);
      SipPreconditions::handleLocalQoSEstablished((_QWORD **)this + 175, v16);
    }
    else
    {
      v17 = (*(uint64_t (**)(SipSession *))(v14 + 48))(this);
      (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Fork ", 5);
      *(_BYTE *)(v17 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v24, (const std::string *)(v30 + 152));
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v17 + 56))(v17, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" does not contain remote SDP", 28);
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
      if (v27 < 0)
        operator delete(__p);
      if (v25 < 0)
        operator delete(v24[0]);
    }
    v18 = v29;
    if (v29)
    {
      v19 = (unint64_t *)&v29->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v31;
    if (v31)
    {
      v22 = (unint64_t *)&v31->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v24[0] = &v32;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
}

void sub_1BEF802AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a10 = (void **)&a20;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void ___ZN10SipSession33handleQualityOfServiceEstablishedEjbRKNSt3__16vectorItNS0_9allocatorItEEEEb_block_invoke(uint64_t a1, SipDialogFork **a2)
{
  _BYTE v2[72];

  SipDialogFork::sendPreconditionUpdate(*a2, 1, (uint64_t)v2);
  ImsResult::~ImsResult((ImsResult *)v2);
}

void ___ZN10SipSession33handleQualityOfServiceEstablishedEjbRKNSt3__16vectorItNS0_9allocatorItEEEEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  SipSession::sendPreconditionEvents(*(_QWORD *)(a1 + 32), (const std::string *)(*(_QWORD *)a2 + 152));
}

void SipSession::sendPreconditionEvents(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  void (**v5)(BambiCallEvent *__hidden);
  __int128 v6;
  std::__shared_weak_count *v7[2];
  __int128 v8;
  std::__shared_weak_count *v9[2];
  void *__p[2];
  __int128 v11;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1) & 1) == 0)
  {
    *(_OWORD *)__p = 0u;
    v11 = 0u;
    v8 = 0u;
    *(_OWORD *)v9 = 0u;
    BambiCallPreconditionsSatisfiedEvent::BambiCallPreconditionsSatisfiedEvent((uint64_t)&v8, a2);
    SipSession::fireCallEvent((SipSession *)a1, (BambiCallEvent *)&v8);
    if (!*(_BYTE *)(a1 + 1360) && !*(_BYTE *)(*(_QWORD *)(a1 + 240) + 1920))
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Alerting user of incoming call", 30);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      *(_BYTE *)(a1 + 1360) = 1;
      v7[1] = 0;
      v6 = 2uLL;
      v7[0] = 0;
      v5 = &off_1E78C8FA0;
      SipSession::fireCallEvent((SipSession *)a1, (BambiCallEvent *)&v5);
      v5 = &off_1E78BD300;
      if (v7[0])
        std::__shared_weak_count::__release_weak(v7[0]);
    }
    *(_QWORD *)&v8 = off_1E78C9298;
    if (SHIBYTE(v11) < 0)
      operator delete(__p[1]);
    *(_QWORD *)&v8 = &off_1E78BD300;
    if (v9[1])
      std::__shared_weak_count::__release_weak(v9[1]);
  }
}

void sub_1BEF80498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, void *a15)
{
  if (a13)
    std::__shared_weak_count::__release_weak(a13);
  BambiCallPreconditionsSatisfiedEvent::~BambiCallPreconditionsSatisfiedEvent(&a15);
  _Unwind_Resume(a1);
}

void SipSession::localSdp(SipSession *this@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  BambiCall *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (BambiCall *)*((_QWORD *)this + 96);
    if (v7)
    {
      BambiCall::localSdp(v7, a2);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1BEF80570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSession::createLocalSdpForFork(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17[2];
  uint64_t v18;
  std::__shared_weak_count *v19;

  v18 = 0;
  v19 = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 776);
  if (v5 && (v19 = std::__shared_weak_count::lock(v5)) != 0 && (v7 = *(_QWORD *)(a1 + 768), (v18 = v7) != 0))
  {
    v8 = *a2;
    v9 = (std::__shared_weak_count *)a2[1];
    v17[0] = v8;
    v17[1] = (uint64_t)v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    BambiCall::createLocalSdpForFork(v7, v17, (uint64_t)a3);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BEF8068C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipSession::handleLocalPreconditionsSatisfied(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 776);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 768);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 192);
        if (v6)
          SDPSession::enableRTCPBandwidthSpecifiers(v6);
        *(_BYTE *)(v5 + 455) = 1;
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BEF80740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipSession::handleLocalPreconditionsSatisfied(uint64_t a1)
{
  SipSession::handleLocalPreconditionsSatisfied(a1 - 624);
}

void SipSession::handlePreconditionsSatisfiedInFork(_QWORD *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  void **v6;
  std::__shared_weak_count *v7;
  SipDialogFork *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD v32[6];
  std::__shared_weak_count *v33;
  std::string v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::string v42;
  void *v43;
  char v44;
  SipDialogFork *v45;
  std::__shared_weak_count *v46;

  if (SipPreconditions::preconditionsEnabled((uint64_t)(a1 + 175), (void **)a2))
  {
    SipTimerContainer::cancelTimer((SipTimerContainer *)(a1 + 33), (std::string *)"WaitForRingingTimer");
    v4 = 0;
  }
  else
  {
    v4 = SipSession::requireQosBeforeRinging((SipSession *)a1);
  }
  v5 = a1[30];
  v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v5 + 2040, (void **)a2);
  if ((void **)(v5 + 2048) == v6)
  {
    v7 = 0;
    v45 = 0;
    v46 = 0;
LABEL_17:
    v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Preconditions satisfied for unknown fork ", 41);
    *(_BYTE *)(v12 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v42, (const std::string *)a2);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 56))(v12, &v42);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (v44 < 0)
      operator delete(v43);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
LABEL_21:
    if (!v7)
      return;
    goto LABEL_22;
  }
  v8 = (SipDialogFork *)v6[7];
  v7 = (std::__shared_weak_count *)v6[8];
  v45 = v8;
  v46 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (!v8)
    goto LABEL_17;
  v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Preconditions satisfied for session for ", 40);
  *(_BYTE *)(v11 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v42, (const std::string *)a2);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 56))(v11, &v42);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (v44 < 0)
    operator delete(v43);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  SipDialogFork::handlePreconditionsSatisfied(v8);
  if ((v4 & 1) != 0)
    goto LABEL_21;
  memset(&v42, 0, sizeof(v42));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v42 = *(std::string *)a2;
  v16 = a1[22];
  v15 = (std::__shared_weak_count *)a1[23];
  if (v15)
  {
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
  }
  SipSessionInterface::stack((std::__shared_weak_count *)a1, &v40);
  v19 = *(_QWORD *)(v40 + 136);
  LoggableString::LoggableString((LoggableString *)__p, "sendPreconditionEventsBlock");
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v35, a1 + 22);
  v20 = (std::__shared_weak_count *)v36;
  if (v35)
    v21 = v35 + 104;
  else
    v21 = 0;
  v37[0] = v21;
  v37[1] = v36;
  v35 = 0;
  v36 = 0;
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 1174405120;
  v32[2] = ___ZN10SipSession34handlePreconditionsSatisfiedInForkERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  v32[3] = &__block_descriptor_tmp_377;
  v32[4] = a1;
  v32[5] = v16;
  v33 = v15;
  if (v15)
  {
    v22 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v34, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    v34 = v42;
  BambiClient::performBlock(v19, (__int128 *)__p, v37, v32);
  if (v20)
  {
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v26 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    v27 = (unint64_t *)(v36 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v39 < 0)
    operator delete(__p[0]);
  v29 = v41;
  if (v41)
  {
    v30 = (unint64_t *)&v41->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v7 = v46;
  if (v46)
  {
LABEL_22:
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BEF80BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  std::__shared_weak_count *v33;
  uint64_t v34;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (a32 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  if (*(char *)(v34 - 105) < 0)
    operator delete(*(void **)(v34 - 128));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 - 80);
  _Unwind_Resume(a1);
}

void ___ZN10SipSession34handlePreconditionsSatisfiedInForkERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
        SipSession::sendPreconditionEvents(v3, (const std::string *)(a1 + 56));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEF80D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19SipSessionInterfaceEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BEF80DA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19SipSessionInterfaceEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void `non-virtual thunk to'SipSession::handlePreconditionsSatisfiedInFork(uint64_t a1, uint64_t a2)
{
  SipSession::handlePreconditionsSatisfiedInFork((_QWORD *)(a1 - 624), a2);
}

uint64_t SipSession::isLocalQualityOfServiceEstablished(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 1536))
    v2 = *(_BYTE *)(a1 + 1528) != 0;
  else
    v2 = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 776);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(a1 + 768);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 455))
          v2 = 1;
        else
          v2 = v2;
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return v2;
}

uint64_t `non-virtual thunk to'SipSession::isLocalQualityOfServiceEstablished(uint64_t a1)
{
  return SipSession::isLocalQualityOfServiceEstablished(a1 - 624);
}

double SipSession::fillCommonRequestHeaders@<D0>(SipSession *this@<X0>, SipRequest *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  SipUserAgent *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  SipUserAgent *v12;
  std::string::size_type size;
  SipHeader *v14;
  SipHeader *v15;
  SipHeader *v16;
  uint64_t v17;
  SipHeader *v18;
  double result;
  void (**v20)(SipUri *__hidden);
  uint64_t (**v21)(SipHost *__hidden);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  void (**v27)(SipParameterMap *__hidden);
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  void (**v47)(SipParameterMap *__hidden);
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (**v52)(SipParameterMap *__hidden);
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string __str;

  if (*((_BYTE *)this + 785))
  {
    memset(&__str, 0, sizeof(__str));
    v6 = *((_QWORD *)this + 30);
    if (v6 && (v7 = *(_QWORD *)(v6 + 208)) != 0)
      v8 = *(SipUserAgent **)(v7 + 136);
    else
      v8 = 0;
    v9 = SipUserAgent::config(v8);
    if (*(char *)(v9 + 663) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v9 + 640), *(_QWORD *)(v9 + 648));
    else
      __str = *(std::string *)(v9 + 640);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (!size)
      std::string::operator=(&__str, (const std::string *)&SipPrivacyHeader::kPrivacyId);
    v14 = SipMessage::header<SipPrivacyHeader>(a2);
    std::string::operator=((std::string *)((char *)v14 + 64), &__str);
    v56 = 257;
    v51 = 257;
    v46 = 0;
    v31 = 257;
    v25 = 0u;
    v26 = 0;
    v23 = 0;
    v24 = 0;
    v21 = &off_1E78D08F8;
    v22 = 0;
    LOWORD(v25) = 0;
    v29 = 0;
    v30 = 0;
    v27 = &off_1E78B82D8;
    v28 = &v29;
    v20 = &off_1E78BFCE8;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v45 = 0;
    v49 = 0;
    v50 = 0;
    v47 = &off_1E78B82D8;
    v48 = &v49;
    v54 = 0;
    v55 = 0;
    v52 = &off_1E78B82D8;
    v53 = &v54;
    SipUri::makeAnonymous((SipUri *)&v20);
    v15 = SipMessage::header<SipFromHeader>(a2, 1);
    SipUri::operator=((SipHeader *)((char *)v15 + 104), (uint64_t)&v20);
    SipUri::~SipUri((SipUri *)&v20);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = *((_QWORD *)this + 30);
    if (v10 && (v11 = *(_QWORD *)(v10 + 208)) != 0)
      v12 = *(SipUserAgent **)(v11 + 136);
    else
      v12 = 0;
    if (*(_BYTE *)(SipUserAgent::config(v12) + 613) || *((_BYTE *)this + 784))
    {
      v16 = SipMessage::header<SipPrivacyHeader>(a2);
      std::string::operator=((std::string *)((char *)v16 + 64), (const std::string *)"none");
    }
  }
  if (*((char *)this + 895) < 0)
  {
    if (!*((_QWORD *)this + 110))
      goto LABEL_29;
  }
  else if (!*((_BYTE *)this + 895))
  {
    goto LABEL_29;
  }
  v56 = 257;
  v51 = 257;
  v46 = 0;
  v31 = 257;
  v25 = 0u;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  v21 = &off_1E78D08F8;
  v22 = 0;
  LOWORD(v25) = 0;
  v29 = 0;
  v30 = 0;
  v27 = &off_1E78B82D8;
  v28 = &v29;
  v20 = &off_1E78BFCE8;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v45 = 0;
  v49 = 0;
  v50 = 0;
  v47 = &off_1E78B82D8;
  v48 = &v49;
  v54 = 0;
  v55 = 0;
  v52 = &off_1E78B82D8;
  v53 = &v54;
  if (SipUri::fromString((uint64_t)&v20, (std::string *)((char *)this + 872)))
  {
    v17 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)this + 16))(this, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Updating To Uri to ", 19);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v17 + 32))(v17, (char *)this + 872);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    v18 = SipMessage::header<SipToHeader>(a2, 1);
    SipUri::operator=((SipHeader *)((char *)v18 + 104), (uint64_t)&v20);
  }
  SipUri::~SipUri((SipUri *)&v20);
LABEL_29:
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void sub_1BEF812B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (*(char *)(v10 - 89) < 0)
    operator delete(*(void **)(v10 - 112));
  _Unwind_Resume(exception_object);
}

SipHeader *SipMessage::header<SipPrivacyHeader>(SipMessage *a1)
{
  SipHeader *result;

  result = SipMessage::headerWithName(a1, "Privacy", 1);
  if (result)
  return result;
}

void SipSession::handleActiveForkChanged(uint64_t a1, std::string::size_type *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string::size_type v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v19 = 0;
  v20 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 776);
  if (v4)
  {
    v20 = std::__shared_weak_count::lock(v4);
    if (v20)
    {
      v7 = *(_QWORD *)(a1 + 768);
      v19 = v7;
      if (v7)
      {
        v8 = a2[1];
        v17 = *a2;
        v18 = (std::__shared_weak_count *)v8;
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        BambiCall::handleActiveForkChanged(v7, &v17, a3);
        v11 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
    }
  }
  v14 = v20;
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BEF81424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipSession::sendAck(uint64_t a1@<X0>, SipRequest *a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, ImsResult *a5@<X8>)
{
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD v31[6];
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;

  if (*(_BYTE *)(a1 + 1320))
  {
    v37 = 0uLL;
    v38 = 0;
    SipSession::logLazuliMessageSessionSetup(a1, (uint64_t)&v37, 200);
  }
  v11 = *(_QWORD *)(a1 + 176);
  v10 = *(std::__shared_weak_count **)(a1 + 184);
  if (v10)
  {
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  LoggableString::LoggableString((LoggableString *)&v37, "sendAck");
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v33, (_QWORD *)(a1 + 176));
  v14 = v33 + 104;
  if (!v33)
    v14 = 0;
  v35 = v14;
  v36 = v34;
  v33 = 0;
  v34 = 0;
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 1174405120;
  v31[2] = ___ZN10SipSession7sendAckEP10SipRequestNSt3__110shared_ptrI26SipClientInviteTransactionEEb_block_invoke;
  v31[3] = &__block_descriptor_tmp_381;
  v31[4] = a1;
  v31[5] = v11;
  v32 = v10;
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  SipLockable::performBlock(a1 + 104, &v37, &v35, v31);
  v17 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v34;
  if (v34)
  {
    v21 = (unint64_t *)&v34->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  v23 = (std::__shared_weak_count *)a3[1];
  v29 = *a3;
  v30 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  SipSessionInterface::sendAck(a1, a2, &v29, a4, a5);
  v26 = v30;
  if (v30)
  {
    v27 = (unint64_t *)&v30->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v32)
    std::__shared_weak_count::__release_weak(v32);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

void sub_1BEF81668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, char a20)
{
  std::__shared_weak_count *v20;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

void ___ZN10SipSession7sendAckEP10SipRequestNSt3__110shared_ptrI26SipClientInviteTransactionEEb_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  SipSession *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void (**v9)(BambiCallEvent *__hidden);
  __int128 v10;
  std::__shared_weak_count *v11[2];
  std::__shared_weak_count *v13;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (SipSession *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v13 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        if (((*(uint64_t (**)(SipSession *))(*(_QWORD *)v3 + 264))(v3) & 1) != 0
          || SipSession::terminating(v3))
        {
          v6 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)v3 + 64))(v3);
          (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v6);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Session already terminated or terminating, not sending SessionAcknowledged event", 80);
          *(_BYTE *)(v6 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v6 + 17) = 0;
        }
        else
        {
          v11[1] = 0;
          v9 = &off_1E78BD300;
          v10 = 0x1EuLL;
          v11[0] = 0;
          SipSession::fireCallEvent(v3, (BambiCallEvent *)&v9);
          v9 = &off_1E78BD300;
          if (v11[0])
            std::__shared_weak_count::__release_weak(v11[0]);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEF81818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, char a15)
{
  if (a13)
    std::__shared_weak_count::__release_weak(a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void SipSession::getMostRecentRemoteFork(SipSession *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = *((_QWORD *)this + 30);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v4 + 2040, (void **)this + 198);
  if ((void **)(v4 + 2048) == v7)
  {
    *a2 = 0;
    a2[1] = 0;
    if (!v3)
      return;
    goto LABEL_11;
  }
  v8 = (char *)v7[8];
  *a2 = v7[7];
  a2[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (v3)
  {
LABEL_11:
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BEF81918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const char *SipSimpleStateMachine<SipSessionState>::nameForStateId(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v3)
    return "Unknown";
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return "Unknown";
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 72);
  if (v7)
  {
    a2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (v9)
      return (const char *)a2;
  }
  else
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (v11)
      return "Unknown";
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v7)
    return "Unknown";
  return (const char *)a2;
}

void sub_1BEF81A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSimpleStateMachine<SipSessionState>::handleStateTransition(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 72);
      if (v9)
      {
        if (*a2)
          v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
        else
          v10 = 0;
        v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 48))(*a3);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, v10, v11);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1BEF81B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipSession::desiredServices(SipSession *this)
{
  return 1;
}

uint64_t SipSimpleStateMachine<SipSessionState>::~SipSimpleStateMachine(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t i;
  void *v5;

  *(_QWORD *)a1 = &off_1E78CA3D8;
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)a1 = off_1E78CA430;
  if (*(_QWORD *)(a1 + 40))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(*(_QWORD **)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 40) = 0;
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 56);
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(*(_QWORD **)(a1 + 32));
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void SipSimpleStateMachine<SipSessionState>::~SipSimpleStateMachine(uint64_t a1)
{
  SipSimpleStateMachine<SipSessionState>::~SipSimpleStateMachine(a1);
  JUMPOUT(0x1C3B87100);
}

void SipCallWaitingInfoBody::SipCallWaitingInfoBody(SipCallWaitingInfoBody *this, char a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = off_1E78C9A68;
  SipCallWaitingInfo::SipCallWaitingInfo((SipCallWaitingInfoBody *)((char *)this + 32), a2);
}

void sub_1BEF81C64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  *(_QWORD *)v1 = off_1E78D24E0;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

BOOL SipOfferAnswerExchange::empty(SipOfferAnswerExchange *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _BOOL8 v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v1 = *((_QWORD *)this + 5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  if (v1)
  {
    v5 = 0;
  }
  else
  {
    v9 = *((_QWORD *)this + 7);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v5 = v9 == 0;
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      v5 = v9 == 0;
    }
  }
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v5;
}

void BambiCallTerminationReason::BambiCallTerminationReason(BambiCallTerminationReason *this, const BambiCallTerminationReason *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;

  *(_DWORD *)this = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  v6 = *((_QWORD *)a2 + 7);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_QWORD *)this + 7) = v6;
  v7 = (std::string *)((char *)this + 72);
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 72);
    *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  v9 = *((_QWORD *)a2 + 13);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)this + 13) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *((_QWORD *)a2 + 15);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)this + 15) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *((_DWORD *)a2 + 32);
  *(_DWORD *)((char *)this + 131) = *(_DWORD *)((char *)a2 + 131);
  *((_DWORD *)this + 32) = v15;
}

void sub_1BEF81EC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void BambiCallSessionTerminatingEvent::~BambiCallSessionTerminatingEvent(BambiCallSessionTerminatingEvent *this)
{
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent(this);
  JUMPOUT(0x1C3B87100);
}

BambiCallSessionTerminationBaseEvent *BambiCallSessionTerminatingEvent::clone(BambiCallSessionTerminatingEvent *this)
{
  BambiCallSessionTerminationBaseEvent *v2;

  v2 = (BambiCallSessionTerminationBaseEvent *)operator new();
  BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent(v2, this);
  *(_QWORD *)v2 = &off_1E78CA488;
  return v2;
}

void sub_1BEF81F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4000B006BBLL);
  _Unwind_Resume(a1);
}

char *std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(_QWORD *)result) >> 1)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
    if (v8 <= a4)
      v10 = a4;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_17:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 1;
  if (v15 >= a4)
    goto LABEL_17;
  v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_19:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *v12 = &v9[v17];
  return result;
}

void SipOfferAnswer::offer(SipOfferAnswer *this, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)this = *(_QWORD *)(a2 + 40);
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (a3)
  {
    v9 = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void **std::unique_ptr<ImsPowerAssertion>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ImsPowerAssertion::~ImsPowerAssertion(result);
    JUMPOUT(0x1C3B87100);
  }
  return result;
}

void std::__shared_ptr_emplace<SipSessionTimer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA4E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionTimer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA4E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionTimer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<SipSession,std::allocator<SipSession>,std::string const&,void>(const std::string *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x6D8uLL);
  std::__shared_ptr_emplace<SipSession>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<SipSession>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 25, (uint64_t)(v4 + 3));
}

void sub_1BEF821F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SipSession>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<SipSession>,0>(_QWORD *a1, const std::string *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78CA530;
  SipSession::SipSession((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1BEF82240(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA530;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<SipSessionConfirmedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionConfirmedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionConfirmedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

SipSessionState *SipSessionConfirmedState::SipSessionConfirmedState(SipSessionState *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  SipSessionState::SipSessionState(a1, v10);
  if (a3)
  {
    v7 = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *(_QWORD *)a1 = &off_1E78E7A70;
  *((_QWORD *)a1 + 1) = &unk_1E78E7B18;
  return a1;
}

void sub_1BEF8238C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipSessionSilentHangUpState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA5D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionSilentHangUpState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA5D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionSilentHangUpState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipSessionSentByeState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionSentByeState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionSentByeState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipSessionTerminatedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionTerminatedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionTerminatedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipSessionRttUpgradeRequestedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA6C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionRttUpgradeRequestedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA6C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionRttUpgradeRequestedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipSessionClientInviteState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionClientInviteState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionClientInviteState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

SipSessionState *SipSessionClientInviteState::SipSessionClientInviteState(SipSessionState *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  SipSessionClientUnconfirmedState::SipSessionClientUnconfirmedState(a1, a2, a3);
  if (a3)
  {
    v7 = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *(_QWORD *)a1 = &off_1E78C56D8;
  *((_QWORD *)a1 + 1) = &unk_1E78C5788;
  return a1;
}

void sub_1BEF825C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

SipSessionState *SipSessionClientUnconfirmedState::SipSessionClientUnconfirmedState(SipSessionState *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  SipSessionState::SipSessionState(a1, v10);
  if (a3)
  {
    v7 = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *(_QWORD *)a1 = &off_1E78C57B8;
  *((_QWORD *)a1 + 1) = &unk_1E78C5860;
  return a1;
}

void sub_1BEF82674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipSessionClientReceivedTryingResponseState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionClientReceivedTryingResponseState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionClientReceivedTryingResponseState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipSessionClientEarlyState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA7B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionClientEarlyState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA7B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionClientEarlyState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void SipSessionClientEarlyState::~SipSessionClientEarlyState(SipSessionClientEarlyState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSessionClientEarlyState::id(SipSessionClientEarlyState *this)
{
  return 4;
}

void `non-virtual thunk to'SipSessionClientEarlyState::~SipSessionClientEarlyState(SipSessionClientEarlyState *this)
{
  SipSessionState::~SipSessionState((SipSessionClientEarlyState *)((char *)this - 8));
}

{
  SipSessionState::~SipSessionState((SipSessionClientEarlyState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<SipSessionClientCanceledState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA8F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionClientCanceledState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA8F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionClientCanceledState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

uint64_t SipSessionClientCanceledState::SipSessionClientCanceledState(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  SipSessionState::SipSessionState((SipSessionState *)a1, v10);
  if (a3)
  {
    v7 = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *(_QWORD *)a1 = &off_1E78C5988;
  *(_QWORD *)(a1 + 8) = &unk_1E78C5A38;
  *(_BYTE *)(a1 + 224) = 0;
  return a1;
}

void sub_1BEF82874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipSessionClientWPSCanceledState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionClientWPSCanceledState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionClientWPSCanceledState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipSessionClientWPSNetworkTerminatedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionClientWPSNetworkTerminatedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA990;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionClientWPSNetworkTerminatedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipSessionServerInviteState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA9E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionServerInviteState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CA9E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionServerInviteState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

SipSessionState *SipSessionServerUnconfirmedState::SipSessionServerUnconfirmedState(SipSessionState *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  SipSessionState::SipSessionState(a1, v10);
  if (a3)
  {
    v7 = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *(_QWORD *)a1 = &off_1E78DC600;
  *((_QWORD *)a1 + 1) = &unk_1E78DC6A8;
  return a1;
}

void sub_1BEF82A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipSessionServerEarlyState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CAA30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionServerEarlyState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CAA30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionServerEarlyState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void SipSessionServerEarlyState::~SipSessionServerEarlyState(SipSessionServerEarlyState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSessionServerEarlyState::id(SipSessionServerEarlyState *this)
{
  return 5;
}

void `non-virtual thunk to'SipSessionServerEarlyState::~SipSessionServerEarlyState(SipSessionServerEarlyState *this)
{
  SipSessionState::~SipSessionState((SipSessionServerEarlyState *)((char *)this - 8));
}

{
  SipSessionState::~SipSessionState((SipSessionServerEarlyState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<SipSessionServerCanceledState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CAB70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionServerCanceledState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CAB70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionServerCanceledState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipSessionServerTerminateAfterAckState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CABC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionServerTerminateAfterAckState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CABC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSessionServerTerminateAfterAckState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

_QWORD *std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CAC10;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CAC10;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CAC10;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CAC10;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF82D5C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CAC90;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CAC90;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CAC90;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CAC90;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF82FC4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CAD10;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CAD10;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CAD10;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CAD10;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF8322C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CAD90;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CAD90;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CAD90;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CAD90;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF83494(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void *SipMessageEncodingMap::headerPrototype<SipReplacesHeader>(_QWORD *a1)
{
  void *result;

  result = (void *)SipMessageEncodingMap::headerPrototypeWithName(a1, (uint64_t)"Replaces");
  if (result)
  return result;
}

void std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> const&,void>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1D0uLL);
  std::__shared_ptr_emplace<SDPModel>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SDPModel> const&,std::allocator<SDPModel>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 5, (uint64_t)(v4 + 3));
}

void sub_1BEF835A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SDPModel>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SDPModel> const&,std::allocator<SDPModel>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78BB3E0;
  std::construct_at[abi:ne180100]<SDPModel,std::shared_ptr<SDPModel> const&,SDPModel*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1BEF835E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<SDPModel,std::shared_ptr<SDPModel> const&,SDPModel*>(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SDPModel::SDPModel(a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_1BEF83684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CAE10;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CAE10;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CAE10;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CAE10;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF8387C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

_QWORD *std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CAE90;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CAE90;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CAE90;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CAE90;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF83AE4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

_QWORD *std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CAF10;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CAF10;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CAF10;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CAF10;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF83D4C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CAF90;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CAF90;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CAF90;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CAF90;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF83FB4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

_QWORD *std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CB010;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CB010;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CB010;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CB010;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF8421C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CB090;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CB090;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CB090;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CB090;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF84484(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CB110;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CB110;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CB110;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CB110;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF846EC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CB1A8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CB1A8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CB1A8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CB1A8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF84954(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::__shared_ptr_emplace<SipPrackHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CB228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipPrackHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CB228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipPrackHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> &,void>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1D0uLL);
  std::__shared_ptr_emplace<SDPModel>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SDPModel> &,std::allocator<SDPModel>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 5, (uint64_t)(v4 + 3));
}

void sub_1BEF84A74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SDPModel>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SDPModel> &,std::allocator<SDPModel>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78BB3E0;
  std::construct_at[abi:ne180100]<SDPModel,std::shared_ptr<SDPModel> &,SDPModel*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1BEF84ABC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<SDPModel,std::shared_ptr<SDPModel> &,SDPModel*>(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SDPModel::SDPModel(a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_1BEF84B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_0()
{
  uint64_t i;

  for (i = 0; i != -384; i -= 24)
  {
    if (*((char *)&_MergedGlobals_8 + i + 407) < 0)
      operator delete(*(void **)((char *)&_MergedGlobals_8 + i + 384));
  }
}

uint64_t _GLOBAL__sub_I_SipSession_cpp()
{
  void (*v0)(void *);

  v0 = (void (*)(void *))MEMORY[0x1E0DE44D0];
  std::string::basic_string[abi:ne180100]<0>(&SipSession::kInviteTypeFakeNetworkBasedCallWaiting, "FakeNetworkBasedCallWaiting");
  __cxa_atexit(v0, &SipSession::kInviteTypeFakeNetworkBasedCallWaiting, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&SipSession::kInviteTypeAccessNetworkRefresh, "InviteTypeAccessNetworkRefresh");
  __cxa_atexit(v0, &SipSession::kInviteTypeAccessNetworkRefresh, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&SipSession::kInviteTypeSessionRefresh, "InviteTypeSessionRefresh");
  __cxa_atexit(v0, &SipSession::kInviteTypeSessionRefresh, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&SipSession::kUpdateTypePreconditions, "UpdateTypePreconditions");
  __cxa_atexit(v0, &SipSession::kUpdateTypePreconditions, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(_MergedGlobals_8, "UpdateTypeSessionRefresh");
  __cxa_atexit(v0, _MergedGlobals_8, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&SipSession::kUpdateTypeAccessNetworkRefresh, "UpdateTypeAccessNetworkRefresh");
  __cxa_atexit(v0, &SipSession::kUpdateTypeAccessNetworkRefresh, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&SipSession::kUpdateTypeEmergencyLocationUpdate, "UpdateTypeEmergencyLocationUpdate");
  __cxa_atexit(v0, &SipSession::kUpdateTypeEmergencyLocationUpdate, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&SipSession::kPublishTypeEmergencyLocation, "PublishTypeEmergencyLocation");
  __cxa_atexit(v0, &SipSession::kPublishTypeEmergencyLocation, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EA80, "Unknown");
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70EA80[3], "ClientInvite");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EAB0, "ClientReceivedTryingResponse");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EAC8, "ServerInvite");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EAE0, "ClientEarly");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EAF8, "ServerEarly");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EB10, "Confirmed");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EB28, "RttUpgradeRequested");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EB40, "ClientCanceled");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EB58, "ServerCanceled");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EB70, "SentBye");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EB88, "ServerTerminateAfterAck");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EBA0, "SilentHangUp");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EBB8, "Terminated");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EBD0, "WPSCanceled");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EBE8, "WPSNetworkTerminated");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_0, 0, &dword_1BEDF4000);
}

void sub_1BEF84ED0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  while (1)
  {
    if (*((char *)v1 - 1) < 0)
      operator delete((void *)*(v1 - 3));
    v1 -= 3;
    if (v1 == qword_1ED70EA80)
      _Unwind_Resume(exception_object);
  }
}

void XcapDocumentCommDiversion::XcapDocumentCommDiversion(XcapDocumentCommDiversion *this)
{
  __int128 *v2;
  unsigned __int8 v3;
  char *v4;

  v3 = 0;
  v4 = (char *)&v3;
  v2 = (__int128 *)(std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v3, (uint64_t)&std::piecewise_construct, &v4)+ 5);
  *(_QWORD *)this = &off_1E78CE278;
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)this + 8, (__int128 *)&XcapDocumentCommDiversion::kName, v2);
  *((_QWORD *)this + 8) = &XcapDocumentCommDiversion::kName;
  *((_QWORD *)this + 9) = v2;
  *((_BYTE *)this + 80) = 1;
  *(_QWORD *)this = &off_1E78CB398;
  *((_QWORD *)this + 1) = &unk_1E78CB430;
  XcapCDNoReplyTimer::XcapCDNoReplyTimer((XcapDocumentCommDiversion *)((char *)this + 88));
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
}

void sub_1BEF84FB4(_Unwind_Exception *a1)
{
  void **v1;

  bambi::XmlTreeItem::~XmlTreeItem(v1);
  _Unwind_Resume(a1);
}

void XcapDocumentCommDiversion::~XcapDocumentCommDiversion(XcapDocumentCommDiversion *this)
{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)this = &off_1E78CB398;
  *((_QWORD *)this + 1) = &unk_1E78CB430;
  v2 = (void **)((char *)this + 8);
  v3 = (_QWORD *)*((_QWORD *)this + 20);
  v4 = (_QWORD *)*((_QWORD *)this + 21);
  if (v3 != v4)
  {
    do
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      ++v3;
    }
    while (v3 != v4);
    v3 = (_QWORD *)*((_QWORD *)this + 20);
  }
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  bambi::XmlTreeItem::~XmlTreeItem((void **)this + 12);
  bambi::XmlTreeItem::~XmlTreeItem(v2);
}

{
  XcapDocumentCommDiversion::~XcapDocumentCommDiversion(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'XcapDocumentCommDiversion::~XcapDocumentCommDiversion(XcapDocumentCommDiversion *this)
{
  XcapDocumentCommDiversion::~XcapDocumentCommDiversion((XcapDocumentCommDiversion *)((char *)this - 8));
}

{
  XcapDocumentCommDiversion::~XcapDocumentCommDiversion((XcapDocumentCommDiversion *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

XcapCDRule *XcapDocumentCommDiversion::createChild(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  size_t size;
  std::string::size_type v6;
  uint64_t v7;
  uint64_t *v8;
  std::string *p_s1;
  uint64_t v10;
  std::string *v11;
  const char *v12;
  uint64_t v13;
  XcapCDRule *v14;
  void *v15;
  std::string *v16;
  const char *v17;
  std::string *v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  XcapCDRule **v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  XcapCDRule **v30;
  char *v31;
  char *v32;
  char *v33;
  XcapCDRule *v34;
  std::string __s1;

  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  v3 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    v6 = __s1.__r_.__value_.__l.__size_;
  v7 = qword_1ED70CC60;
  if (byte_1ED70CC6F >= 0)
    v7 = byte_1ED70CC6F;
  if (v6 == v7)
  {
    if (byte_1ED70CC6F >= 0)
      v8 = &XcapDocumentCommDiversion::kName;
    else
      v8 = (uint64_t *)XcapDocumentCommDiversion::kName;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v15 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v8, __s1.__r_.__value_.__l.__size_))
        goto LABEL_46;
      if (size != 7)
        goto LABEL_30;
LABEL_29:
      if (memcmp(v15, "ruleset", size))
        goto LABEL_30;
LABEL_46:
      v14 = (XcapCDRule *)a1;
LABEL_70:
      operator delete(v15);
      return v14;
    }
    if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      return (XcapCDRule *)a1;
    p_s1 = &__s1;
    v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v8)
    {
      p_s1 = (std::string *)((char *)p_s1 + 1);
      v8 = (uint64_t *)((char *)v8 + 1);
      if (!--v10)
      {
LABEL_23:
        v14 = (XcapCDRule *)a1;
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          return v14;
        goto LABEL_69;
      }
    }
  }
  if (v6 == 4)
    goto LABEL_40;
  if (v6 != 7)
  {
LABEL_31:
    if (v6 != 12)
      goto LABEL_38;
    if ((v4 & 0x80) == 0)
    {
      if (v4)
      {
        v16 = &__s1;
        v17 = "NoReplyTimer";
        while (v16->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v17)
        {
          v16 = (std::string *)((char *)v16 + 1);
          ++v17;
          if (!--v3)
            goto LABEL_48;
        }
LABEL_38:
        v14 = 0;
        if ((v4 & 0x80) != 0)
        {
LABEL_69:
          v15 = (void *)__s1.__r_.__value_.__r.__words[0];
          goto LABEL_70;
        }
        return v14;
      }
LABEL_48:
      v14 = (XcapCDRule *)(a1 + 11);
      if ((v4 & 0x80) != 0)
        goto LABEL_69;
      return v14;
    }
    v15 = (void *)__s1.__r_.__value_.__r.__words[0];
    if (!memcmp(__s1.__r_.__value_.__l.__data_, "NoReplyTimer", size))
      goto LABEL_48;
    goto LABEL_51;
  }
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v15 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_29;
  }
  if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
  {
    v11 = &__s1;
    v12 = "ruleset";
    v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    while (v11->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v12)
    {
      v11 = (std::string *)((char *)v11 + 1);
      ++v12;
      if (!--v13)
        goto LABEL_23;
    }
LABEL_30:
    if (v6 != 4)
      goto LABEL_31;
LABEL_40:
    if ((v4 & 0x80) != 0)
    {
      v15 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "rule", size))
      {
LABEL_51:
        v14 = 0;
        goto LABEL_70;
      }
    }
    else if (v4)
    {
      v18 = &__s1;
      v19 = "rule";
      v20 = v3;
      while (v18->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v19)
      {
        v18 = (std::string *)((char *)v18 + 1);
        ++v19;
        if (!--v20)
          goto LABEL_52;
      }
      goto LABEL_31;
    }
LABEL_52:
    v14 = (XcapCDRule *)operator new();
    XcapCDRule::XcapCDRule(v14);
    v21 = a1[22];
    v22 = (XcapCDRule **)a1[21];
    if ((unint64_t)v22 >= v21)
    {
      v24 = a1[20];
      v25 = ((uint64_t)v22 - v24) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<XcapCDRule *>::__throw_length_error[abi:ne180100]();
      v26 = v21 - v24;
      v27 = v26 >> 2;
      if (v26 >> 2 <= (unint64_t)(v25 + 1))
        v27 = v25 + 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 22), v28);
      else
        v29 = 0;
      v30 = (XcapCDRule **)&v29[8 * v25];
      v31 = &v29[8 * v28];
      *v30 = v14;
      v23 = v30 + 1;
      v33 = (char *)a1[20];
      v32 = (char *)a1[21];
      if (v32 != v33)
      {
        do
        {
          v34 = (XcapCDRule *)*((_QWORD *)v32 - 1);
          v32 -= 8;
          *--v30 = v34;
        }
        while (v32 != v33);
        v32 = (char *)a1[20];
      }
      a1[20] = v30;
      a1[21] = v23;
      a1[22] = v31;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v22 = v14;
      v23 = v22 + 1;
    }
    a1[21] = v23;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      return v14;
    goto LABEL_69;
  }
  return (XcapCDRule *)a1;
}

void sub_1BEF853E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B87100](v15, 0x10B3C405FE64821);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void XcapDocumentCommDiversion::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  size_t size;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t *v11;
  std::string *p_s1;
  uint64_t v13;
  std::string *v14;
  const char *v15;
  uint64_t v16;
  const void *v17;
  std::string *v18;
  const char *v19;
  std::string *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  std::string __s1;

  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    v9 = __s1.__r_.__value_.__l.__size_;
  v10 = qword_1ED70CC60;
  if (byte_1ED70CC6F >= 0)
    v10 = byte_1ED70CC6F;
  if (v9 == v10)
  {
    if (byte_1ED70CC6F >= 0)
      v11 = &XcapDocumentCommDiversion::kName;
    else
      v11 = (uint64_t *)XcapDocumentCommDiversion::kName;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v17 = (const void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v11, __s1.__r_.__value_.__l.__size_))
        goto LABEL_46;
      if (size != 7)
        goto LABEL_29;
      goto LABEL_28;
    }
    if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      goto LABEL_46;
    p_s1 = &__s1;
    v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v11)
    {
      p_s1 = (std::string *)((char *)p_s1 + 1);
      v11 = (uint64_t *)((char *)v11 + 1);
      if (!--v13)
        goto LABEL_46;
    }
  }
  if (v9 == 4)
    goto LABEL_37;
  if (v9 != 7)
    goto LABEL_30;
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      goto LABEL_46;
    v14 = &__s1;
    v15 = "ruleset";
    v16 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    while (v14->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v15)
    {
      v14 = (std::string *)((char *)v14 + 1);
      ++v15;
      if (!--v16)
        goto LABEL_46;
    }
    goto LABEL_29;
  }
  v17 = (const void *)__s1.__r_.__value_.__r.__words[0];
LABEL_28:
  if (!memcmp(v17, "ruleset", size))
    goto LABEL_46;
LABEL_29:
  if (v9 != 4)
    goto LABEL_30;
LABEL_37:
  if ((v7 & 0x80) != 0)
  {
    v23 = (void *)__s1.__r_.__value_.__r.__words[0];
    v24 = "rule";
LABEL_45:
    if (memcmp(v23, v24, size))
      goto LABEL_49;
    goto LABEL_46;
  }
  if (!v7)
  {
LABEL_46:
    bambi::XmlParserItem::parseChild(a1, a2, a3);
    LOBYTE(v7) = *((_BYTE *)&__s1.__r_.__value_.__s + 23);
    goto LABEL_47;
  }
  v20 = &__s1;
  v21 = "rule";
  v22 = v6;
  while (v20->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v21)
  {
    v20 = (std::string *)((char *)v20 + 1);
    ++v21;
    if (!--v22)
      goto LABEL_46;
  }
LABEL_30:
  if (v9 == 12)
  {
    if ((v7 & 0x80) == 0)
    {
      if (v7)
      {
        v18 = &__s1;
        v19 = "NoReplyTimer";
        while (v18->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v19)
        {
          v18 = (std::string *)((char *)v18 + 1);
          ++v19;
          if (!--v6)
            goto LABEL_46;
        }
        goto LABEL_47;
      }
      goto LABEL_46;
    }
    v23 = (void *)__s1.__r_.__value_.__r.__words[0];
    v24 = "NoReplyTimer";
    goto LABEL_45;
  }
LABEL_47:
  if ((v7 & 0x80) == 0)
    return;
  v23 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v23);
}

void sub_1BEF85658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t XcapDocumentCommDiversion::constructTree@<X0>(XcapDocumentCommDiversion *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char *v54;
  std::__shared_weak_count *v55;
  void *v56;
  std::__shared_weak_count *v57;
  char *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  void *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void *__p;
  std::__shared_weak_count *v67;
  char v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  _QWORD v71[8];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[144];
  uint64_t v76;
  unsigned __int8 v77;

  *a2 = 0;
  a2[1] = 0;
  v4 = (char *)this + 8;
  bambi::XmlTreeItem::makeNode((XcapDocumentCommDiversion *)((char *)this + 8), a2);
  v76 = 0;
  v74 = 0u;
  memset(v75, 0, sizeof(v75));
  v72 = 0u;
  v73 = 0u;
  memset(v71, 0, sizeof(v71));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v71);
  if (*((_BYTE *)this + 80))
    v5 = "true";
  else
    v5 = "false";
  if (*((_BYTE *)this + 80))
    v6 = 4;
  else
    v6 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v5, v6);
  v7 = a2[1];
  v69 = *a2;
  v70 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v71[1], &__p);
  (*(void (**)(char *, uint64_t *, const char *, void **))(*(_QWORD *)v4 + 48))(v4, &v69, "active", &__p);
  if (v68 < 0)
    operator delete(__p);
  v10 = v70;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (*((_DWORD *)this + 38))
  {
    __p = 0;
    v67 = 0;
    XcapCDNoReplyTimer::constructTree((XcapDocumentCommDiversion *)((char *)this + 88), (uint64_t *)&__p);
    v13 = a2[1];
    v64 = *a2;
    v65 = (std::__shared_weak_count *)v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v62 = __p;
    v63 = v67;
    if (v67)
    {
      v16 = (unint64_t *)&v67->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    (*(void (**)(char *, uint64_t *, void **))(*(_QWORD *)v4 + 56))(v4, &v64, &v62);
    v18 = v63;
    if (v63)
    {
      v19 = (unint64_t *)&v63->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v65;
    if (v65)
    {
      v22 = (unint64_t *)&v65->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v67;
    if (v67)
    {
      v25 = (unint64_t *)&v67->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  if (*((_QWORD *)this + 20) != *((_QWORD *)this + 21))
  {
    __p = 0;
    v67 = 0;
    v27 = a2[1];
    v60 = *a2;
    v61 = (std::__shared_weak_count *)v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v77 = 1;
    v58 = (char *)&v77;
    v30 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v77, (uint64_t)&std::piecewise_construct, &v58);
    (*(void (**)(void **__return_ptr, char *, uint64_t *, const char *, uint64_t **))(*(_QWORD *)v4 + 64))(&__p, v4, &v60, "ruleset", v30 + 5);
    v31 = v61;
    if (v61)
    {
      v32 = (unint64_t *)&v61->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (uint64_t *)*((_QWORD *)this + 20);
    v35 = (uint64_t *)*((_QWORD *)this + 21);
    while (v34 != v35)
    {
      v36 = *v34;
      v58 = 0;
      v59 = 0;
      (*(void (**)(char **__return_ptr))(*(_QWORD *)v36 + 96))(&v58);
      v56 = __p;
      v57 = v67;
      if (v67)
      {
        v37 = (unint64_t *)&v67->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v54 = v58;
      v55 = v59;
      if (v59)
      {
        v39 = (unint64_t *)&v59->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      (*(void (**)(char *, void **, char **))(*(_QWORD *)v4 + 56))(v4, &v56, &v54);
      v41 = v55;
      if (v55)
      {
        v42 = (unint64_t *)&v55->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = v57;
      if (v57)
      {
        v45 = (unint64_t *)&v57->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = v59;
      if (v59)
      {
        v48 = (unint64_t *)&v59->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      ++v34;
    }
    v50 = v67;
    if (v67)
    {
      v51 = (unint64_t *)&v67->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  v71[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v71 + *(_QWORD *)(v71[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v71[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v73) < 0)
    operator delete(*((void **)&v72 + 1));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v75);
}

void sub_1BEF85B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::ostringstream::~ostringstream((uint64_t)&a30);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'XcapDocumentCommDiversion::constructTree@<X0>(XcapDocumentCommDiversion *this@<X0>, uint64_t *a2@<X8>)
{
  return XcapDocumentCommDiversion::constructTree((XcapDocumentCommDiversion *)((char *)this - 8), a2);
}

uint64_t XcapDocumentCommDiversion::asString@<X0>(XcapDocumentCommDiversion *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  XcapCDRule **i;
  XcapCDRule **v8;
  void *locale;
  uint64_t v10;
  std::locale v12;
  uint64_t v13;
  unsigned __int8 v14;
  _OWORD v15[4];
  void *__p[2];
  __int128 v17;
  __int128 v18;
  _BYTE v19[144];
  uint64_t v20;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v17 = 0u;
  v18 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v15, 0, sizeof(v15));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"CDIV Document: ", 15);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", Rules: ", 9);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
  v6 = std::locale::use_facet(&v12, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v12);
  std::ostream::put();
  std::ostream::flush();
  v8 = (XcapCDRule **)*((_QWORD *)this + 20);
  for (i = (XcapCDRule **)*((_QWORD *)this + 21); v8 != i; ++v8)
  {
    XcapCDRule::asString(*v8, &v12);
    if ((v14 & 0x80u) == 0)
      locale = &v12;
    else
      locale = v12.__locale_;
    if ((v14 & 0x80u) == 0)
      v10 = v14;
    else
      v10 = v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)locale, v10);
    if ((char)v14 < 0)
      operator delete(v12.__locale_);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15 + 8, a2);
  *(_QWORD *)&v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(*(_QWORD *)&v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v15[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v17) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v19);
}

void sub_1BEF85DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::locale::~locale(&a10);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t XcapDocumentCommDiversion::findRuleById(uint64_t *a1, uint64_t *a2, unsigned __int8 **a3)
{
  uint64_t *i;
  uint64_t v6;
  std::string::size_type size;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  void *v15;
  int v16;
  std::string __p;

  if (a1 != a2)
  {
    for (i = a1; i != a2; ++i)
    {
      v6 = *i;
      if (*(char *)(*i + 87) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 64), *(_QWORD *)(v6 + 72));
      else
        __p = *(std::string *)(v6 + 64);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v8 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
      v9 = (char)v8;
      if ((char)v8 < 0)
        v8 = a3[1];
      if ((unsigned __int8 *)size == v8)
      {
        if (v9 >= 0)
          v10 = (unsigned __int8 *)a3;
        else
          v10 = *a3;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v15 = (void *)__p.__r_.__value_.__r.__words[0];
          v16 = memcmp(__p.__r_.__value_.__l.__data_, v10, __p.__r_.__value_.__l.__size_);
          operator delete(v15);
          if (!v16)
            return v6;
        }
        else
        {
          if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
            return v6;
          v11 = 0;
          do
          {
            v12 = __p.__r_.__value_.__s.__data_[v11];
            v13 = v10[v11];
          }
          while (v12 == v13 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v11++);
          if (v12 == v13)
            return v6;
        }
      }
      else if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  return 0;
}

uint64_t XcapDocumentCommDiversion::findRuleForCondition(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = *(uint64_t **)(a1 + 160);
  v3 = *(uint64_t **)(a1 + 168);
  if (v2 == v3)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v2;
    v7 = *(_QWORD *)(*v2 + 88);
    v8 = *(std::__shared_weak_count **)(*v2 + 96);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (v7 && *(unsigned __int8 *)(v7 + 64) == a2)
      v5 = v6;
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    ++v2;
  }
  while (v2 != v3);
  return v5;
}

void XcapDocumentCommDiversion::addRule(XcapDocumentCommDiversion *this, const XcapCDRule *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v3 = XcapCDRule::clone(a2);
  v4 = *((_QWORD *)this + 22);
  v5 = (uint64_t *)*((_QWORD *)this + 21);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *((_QWORD *)this + 20);
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<XcapCDRule *>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)this + 176, v11);
    else
      v12 = 0;
    v13 = (uint64_t *)&v12[8 * v8];
    v14 = &v12[8 * v11];
    *v13 = v3;
    v6 = v13 + 1;
    v16 = (char *)*((_QWORD *)this + 20);
    v15 = (char *)*((_QWORD *)this + 21);
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = (char *)*((_QWORD *)this + 20);
    }
    *((_QWORD *)this + 20) = v13;
    *((_QWORD *)this + 21) = v6;
    *((_QWORD *)this + 22) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = v3;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 21) = v6;
}

_QWORD *XcapDocumentCommDiversion::deleteRule(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;

  if (a2)
  {
    v2 = result;
    v3 = result[20];
    v4 = (_QWORD *)result[21];
    if ((_QWORD *)v3 != v4)
    {
      v5 = -v3;
      while (*(_QWORD *)v3 != a2)
      {
        v3 += 8;
        v5 -= 8;
        if ((_QWORD *)v3 == v4)
          return result;
      }
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
      v6 = -v5;
      v7 = (const void *)(8 - v5);
      v8 = v2[21] - (8 - v5);
      if (v8)
        result = memmove((void *)v6, v7, v8);
      v2[21] = v6 + v8;
    }
  }
  return result;
}

void XcapDocumentCommDiversion::getItemForPath(uint64_t a1@<X0>, std::string **a2@<X1>, std::string *a3@<X8>)
{
  std::string *v5;
  uint64_t v7;
  std::string::size_type size;
  std::string *v9;
  const char *v10;
  uint64_t RuleById;
  uint64_t v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *p_s1;
  const char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[2];
  std::string __s1;
  std::string v25;
  uint64_t v26[3];
  std::string v27;

  v5 = *a2;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3) <= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, 0);
    return;
  }
  memset(&v27, 0, sizeof(v27));
  XcapNs::stripXcapNs((uint64_t)v5, &v27);
  v7 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  else
    size = v27.__r_.__value_.__l.__size_;
  if (size != 7)
    goto LABEL_41;
  if ((*((_BYTE *)&v27.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (*((_BYTE *)&v27.__r_.__value_.__s + 23))
    {
      v9 = &v27;
      v10 = "ruleset";
      while (v9->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
      {
        v9 = (std::string *)((char *)v9 + 1);
        ++v10;
        if (!--v7)
          goto LABEL_14;
      }
      goto LABEL_41;
    }
LABEL_14:
    memset(v26, 0, sizeof(v26));
    if (ims::tokenize(*a2 + 1, v26, 0x22u) != 3)
    {
LABEL_40:
      v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      goto LABEL_41;
    }
    memset(&v25, 0, sizeof(v25));
    if (*(char *)(v26[0] + 47) < 0)
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v26[0] + 24), *(_QWORD *)(v26[0] + 32));
    else
      v25 = *(std::string *)(v26[0] + 24);
    RuleById = XcapDocumentCommDiversion::findRuleById(*(uint64_t **)(a1 + 160), *(uint64_t **)(a1 + 168), (unsigned __int8 **)&v25);
    v12 = RuleById;
    if (!RuleById)
    {
LABEL_38:
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      goto LABEL_40;
    }
    v13 = *a2;
    if ((char *)a2[1] - (char *)*a2 == 48)
    {
      bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)(RuleById + 8), 1, 0, a3);
LABEL_21:
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      goto LABEL_42;
    }
    memset(&__s1, 0, sizeof(__s1));
    XcapNs::stripXcapNs((uint64_t)&v13[2], &__s1);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v14 = __s1.__r_.__value_.__l.__size_;
    if (v14 != 10)
      goto LABEL_34;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v18 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "conditions", __s1.__r_.__value_.__l.__size_))
      {
LABEL_37:
        operator delete(v18);
        goto LABEL_38;
      }
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      v16 = "conditions";
      v17 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v16)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v16;
        if (!--v17)
          goto LABEL_45;
      }
LABEL_34:
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_38;
      v18 = (void *)__s1.__r_.__value_.__r.__words[0];
      goto LABEL_37;
    }
LABEL_45:
    v19 = *(_QWORD *)(v12 + 88);
    v20 = *(_QWORD *)(v12 + 96);
    v23[0] = v19;
    v23[1] = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)(v19 + 8), 1, 0, a3);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v23);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s1.__r_.__value_.__l.__data_);
    goto LABEL_21;
  }
  if (!memcmp(v27.__r_.__value_.__l.__data_, "ruleset", v27.__r_.__value_.__l.__size_))
    goto LABEL_14;
LABEL_41:
  std::string::basic_string[abi:ne180100]<0>(a3, 0);
LABEL_42:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_1BEF86434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  a18 = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (*(char *)(v25 - 33) < 0)
    operator delete(*(void **)(v25 - 56));
  _Unwind_Resume(a1);
}

uint64_t XcapDocumentCommDiversion::setItemForPath(uint64_t a1, std::string **a2, bambi::XmlParser *a3)
{
  std::string *v4;
  std::string *v5;
  uint64_t v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v13;
  std::string::size_type size;
  std::string *v15;
  const char *v16;
  uint64_t v17;
  bambi::XmlParserItem *v18;
  uint64_t RuleById;
  std::string *v20;
  uint64_t v21;
  bambi::XmlParserItem *v22;
  uint64_t v23;
  char v24;
  std::string::size_type v25;
  std::string *p_s1;
  const char *v27;
  void *v28;
  uint64_t v29;
  bambi::XmlParserItem *v30;
  XcapCDCondition *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v35[2];
  uint64_t v36;
  uint64_t v37;
  std::string __s1;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  std::string v44;
  uint64_t v45[3];
  std::string v46;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
    return 0;
  if ((char *)v5 - (char *)v4 != 24)
  {
    memset(&v46, 0, sizeof(v46));
    XcapNs::stripXcapNs((uint64_t)v4, &v46);
    v13 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    else
      size = v46.__r_.__value_.__l.__size_;
    if (size != 7)
      goto LABEL_65;
    if ((*((_BYTE *)&v46.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v46.__r_.__value_.__l.__data_, "ruleset", v46.__r_.__value_.__l.__size_))
        goto LABEL_65;
    }
    else if (*((_BYTE *)&v46.__r_.__value_.__s + 23))
    {
      v15 = &v46;
      v16 = "ruleset";
      while (v15->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v16)
      {
        v15 = (std::string *)((char *)v15 + 1);
        ++v16;
        if (!--v13)
          goto LABEL_28;
      }
      goto LABEL_65;
    }
LABEL_28:
    memset(v45, 0, sizeof(v45));
    if (ims::tokenize(*a2 + 1, v45, 0x22u) != 3)
    {
LABEL_64:
      *(_QWORD *)&v39 = v45;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
      goto LABEL_65;
    }
    memset(&v44, 0, sizeof(v44));
    if (*(char *)(v45[0] + 47) < 0)
      std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)(v45[0] + 24), *(_QWORD *)(v45[0] + 32));
    else
      v44 = *(std::string *)(v45[0] + 24);
    RuleById = XcapDocumentCommDiversion::findRuleById(*(uint64_t **)(a1 + 160), *(uint64_t **)(a1 + 168), (unsigned __int8 **)&v44);
    v20 = *a2;
    if ((char *)a2[1] - (char *)*a2 == 48)
    {
      bzero(&v39, 0x208uLL);
      XcapCDRule::XcapCDRule((XcapCDRule *)&v39);
      if (bambi::XmlParser::parseXml(a3, (uint64_t)&v39, v21, v22))
      {
        XcapDocumentCommDiversion::deleteRule((_QWORD *)a1, RuleById);
        XcapDocumentCommDiversion::addRule((XcapDocumentCommDiversion *)a1, (const XcapCDRule *)&v39);
        XcapCDRule::~XcapCDRule((XcapCDRule *)&v39);
LABEL_36:
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        *(_QWORD *)&v39 = v45;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
        goto LABEL_39;
      }
      XcapCDRule::~XcapCDRule((XcapCDRule *)&v39);
      goto LABEL_62;
    }
    memset(&__s1, 0, sizeof(__s1));
    XcapNs::stripXcapNs((uint64_t)&v20[2], &__s1);
    v23 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    v24 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v25 = __s1.__r_.__value_.__l.__size_;
    if (v25 != 10)
      goto LABEL_59;
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      v28 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "conditions", __s1.__r_.__value_.__l.__size_))
        goto LABEL_61;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      v27 = "conditions";
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v27)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v27;
        if (!--v23)
          goto LABEL_52;
      }
LABEL_59:
      if ((v24 & 0x80) == 0)
        goto LABEL_62;
      v28 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_61:
      operator delete(v28);
LABEL_62:
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      goto LABEL_64;
    }
LABEL_52:
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    XcapCDCondition::XcapCDCondition((XcapCDCondition *)&v39);
    if (bambi::XmlParser::parseXml(a3, (uint64_t)&v39, v29, v30))
    {
      v36 = 0;
      v37 = 0;
      _ZNSt3__115allocate_sharedB8ne180100I15XcapCDConditionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v36);
      v31 = XcapCDCondition::clone((XcapCDCondition *)&v39);
      std::shared_ptr<XcapCDCondition>::reset[abi:ne180100]<XcapCDCondition,void>(&v36, (uint64_t)v31);
      v35[0] = v36;
      v35[1] = v37;
      if (v37)
      {
        v32 = (unint64_t *)(v37 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(RuleById + 88), v35);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v35);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
      bambi::XmlTreeItem::~XmlTreeItem((void **)&v39 + 1);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      goto LABEL_36;
    }
    bambi::XmlTreeItem::~XmlTreeItem((void **)&v39 + 1);
    v24 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    goto LABEL_59;
  }
  memset(&v46, 0, sizeof(v46));
  XcapNs::stripXcapNs((uint64_t)v4, &v46);
  v7 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    v8 = v46.__r_.__value_.__l.__size_;
  if (v8 != 12)
    goto LABEL_65;
  if ((*((_BYTE *)&v46.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v46.__r_.__value_.__l.__data_, "NoReplyTimer", v46.__r_.__value_.__l.__size_))
      goto LABEL_65;
  }
  else if (*((_BYTE *)&v46.__r_.__value_.__s + 23))
  {
    v9 = &v46;
    v10 = "NoReplyTimer";
    while (v9->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
    {
      v9 = (std::string *)((char *)v9 + 1);
      ++v10;
      if (!--v7)
        goto LABEL_25;
    }
    goto LABEL_65;
  }
LABEL_25:
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  XcapCDNoReplyTimer::XcapCDNoReplyTimer((XcapCDNoReplyTimer *)&v39);
  if ((bambi::XmlParser::parseXml(a3, (uint64_t)&v39, v17, v18) & 1) != 0)
  {
    *(_DWORD *)(a1 + 152) = v43;
    bambi::XmlTreeItem::~XmlTreeItem((void **)&v39 + 1);
LABEL_39:
    v11 = 1;
    goto LABEL_66;
  }
  bambi::XmlTreeItem::~XmlTreeItem((void **)&v39 + 1);
LABEL_65:
  v11 = 0;
LABEL_66:
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1BEF868B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21)
{
  uint64_t v21;

  bambi::XmlTreeItem::~XmlTreeItem(&a21);
  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 105) < 0)
    operator delete(*(void **)(v21 - 128));
  a20 = v21 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (*(char *)(v21 - 57) < 0)
    operator delete(*(void **)(v21 - 80));
  _Unwind_Resume(a1);
}

void XcapCDRule::~XcapCDRule(XcapCDRule *this)
{
  void **v2;

  *(_QWORD *)this = off_1E78D68B0;
  *((_QWORD *)this + 1) = &unk_1E78D6928;
  v2 = (void **)((char *)this + 8);
  SipUri::~SipUri((XcapCDRule *)((char *)this + 112));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  bambi::XmlTreeItem::~XmlTreeItem(v2);
}

{
  void **v2;

  *(_QWORD *)this = off_1E78D68B0;
  *((_QWORD *)this + 1) = &unk_1E78D6928;
  v2 = (void **)((char *)this + 8);
  SipUri::~SipUri((XcapCDRule *)((char *)this + 112));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  JUMPOUT(0x1C3B87100);
}

void std::shared_ptr<XcapCDCondition>::reset[abi:ne180100]<XcapCDCondition,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E78CB4C0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEF86A68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t XcapDocumentCommDiversion::clone(XcapDocumentCommDiversion *this)
{
  uint64_t v2;
  std::string *v3;
  char **v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  uint64_t i;
  XcapCDRule **v20;
  XcapCDRule **j;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v2 = operator new();
  *(_QWORD *)(v2 + 8) = off_1E78EC640;
  *(_QWORD *)v2 = &off_1E78CE278;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  std::vector<bambi::XmlTreeNs>::__init_with_size[abi:ne180100]<bambi::XmlTreeNs*,bambi::XmlTreeNs*>((_QWORD *)(v2 + 16), *((_QWORD *)this + 2), *((_QWORD *)this + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 4));
  v3 = (std::string *)(v2 + 40);
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    *(_QWORD *)(v2 + 56) = *((_QWORD *)this + 7);
  }
  *(_OWORD *)(v2 + 64) = *((_OWORD *)this + 4);
  *(_BYTE *)(v2 + 80) = *((_BYTE *)this + 80);
  *(_QWORD *)v2 = &off_1E78CB398;
  *(_QWORD *)(v2 + 8) = &unk_1E78CB430;
  XcapCDNoReplyTimer::XcapCDNoReplyTimer((XcapCDNoReplyTimer *)(v2 + 88));
  *(_QWORD *)(v2 + 160) = 0;
  v4 = (char **)(v2 + 160);
  *(_QWORD *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 176) = 0;
  if ((XcapDocumentCommDiversion *)v2 != this)
  {
    v5 = *(_QWORD *)(v2 + 120);
    v6 = (void **)(v2 + 104);
    v7 = *(_QWORD *)(v2 + 104);
    v9 = *((_QWORD *)this + 13);
    v8 = *((_QWORD *)this + 14);
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 4);
    if (0xAAAAAAAAAAAAAAABLL * ((v5 - v7) >> 4) < v10)
    {
      if (v7)
      {
        v11 = *(_QWORD *)(v2 + 112);
        v12 = *(void **)(v2 + 104);
        if (v11 != v7)
        {
          do
          {
            v11 -= 48;
            std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v11);
          }
          while (v11 != v7);
          v12 = *v6;
        }
        *(_QWORD *)(v2 + 112) = v7;
        operator delete(v12);
        v5 = 0;
        *v6 = 0;
        *(_QWORD *)(v2 + 112) = 0;
        *(_QWORD *)(v2 + 120) = 0;
      }
      if (v10 > 0x555555555555555)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v13 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 4);
      v14 = 2 * v13;
      if (2 * v13 <= v10)
        v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 4);
      if (v13 >= 0x2AAAAAAAAAAAAAALL)
        v15 = 0x555555555555555;
      else
        v15 = v14;
      std::vector<bambi::XmlTreeNs>::__vallocate[abi:ne180100]((_QWORD *)(v2 + 104), v15);
      v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<bambi::XmlTreeNs>,bambi::XmlTreeNs*,bambi::XmlTreeNs*,bambi::XmlTreeNs*>(v2 + 120, v9, v8, *(_QWORD *)(v2 + 112));
      goto LABEL_20;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v2 + 112) - v7) >> 4) < v10)
    {
      v17 = (std::string *)(v9 + 16 * ((*(_QWORD *)(v2 + 112) - v7) >> 4));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<bambi::XmlParserNamespace *,bambi::XmlParserNamespace *,bambi::XmlParserNamespace *>(*((std::string **)this + 13), v17, *(std::string **)(v2 + 104));
      v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<bambi::XmlTreeNs>,bambi::XmlTreeNs*,bambi::XmlTreeNs*,bambi::XmlTreeNs*>(v2 + 120, (uint64_t)v17, v8, *(_QWORD *)(v2 + 112));
LABEL_20:
      *(_QWORD *)(v2 + 112) = v16;
      goto LABEL_25;
    }
    v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<bambi::XmlParserNamespace *,bambi::XmlParserNamespace *,bambi::XmlParserNamespace *>(*((std::string **)this + 13), *((std::string **)this + 14), *(std::string **)(v2 + 104));
    for (i = *(_QWORD *)(v2 + 112);
          (std::string *)i != v18;
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(i))
    {
      i -= 48;
    }
    *(_QWORD *)(v2 + 112) = v18;
  }
LABEL_25:
  std::string::operator=((std::string *)(v2 + 128), (const std::string *)((char *)this + 128));
  *(_DWORD *)(v2 + 152) = *((_DWORD *)this + 38);
  v20 = (XcapCDRule **)*((_QWORD *)this + 20);
  for (j = (XcapCDRule **)*((_QWORD *)this + 21); v20 != j; ++v20)
  {
    v22 = XcapCDRule::clone(*v20);
    v23 = v22;
    v25 = *(uint64_t **)(v2 + 168);
    v24 = *(_QWORD *)(v2 + 176);
    if ((unint64_t)v25 >= v24)
    {
      v27 = ((char *)v25 - *v4) >> 3;
      if ((unint64_t)(v27 + 1) >> 61)
        std::vector<XcapCDRule *>::__throw_length_error[abi:ne180100]();
      v28 = v24 - (_QWORD)*v4;
      v29 = v28 >> 2;
      if (v28 >> 2 <= (unint64_t)(v27 + 1))
        v29 = v27 + 1;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v2 + 176, v30);
      else
        v31 = 0;
      v32 = (uint64_t *)&v31[8 * v27];
      *v32 = v23;
      v26 = v32 + 1;
      v34 = *(char **)(v2 + 160);
      v33 = *(char **)(v2 + 168);
      if (v33 != v34)
      {
        do
        {
          v35 = *((_QWORD *)v33 - 1);
          v33 -= 8;
          *--v32 = v35;
        }
        while (v33 != v34);
        v33 = *v4;
      }
      *(_QWORD *)(v2 + 160) = v32;
      *(_QWORD *)(v2 + 168) = v26;
      *(_QWORD *)(v2 + 176) = &v31[8 * v30];
      if (v33)
        operator delete(v33);
    }
    else
    {
      *v25 = v22;
      v26 = v25 + 1;
    }
    *(_QWORD *)(v2 + 168) = v26;
  }
  return v2;
}

void sub_1BEF86E00(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  void *v6;

  *(_QWORD *)(v1 + 112) = v3;
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 168) = v6;
    operator delete(v6);
  }
  bambi::XmlTreeItem::~XmlTreeItem((void **)(v1 + 96));
  bambi::XmlTreeItem::~XmlTreeItem(v4);
  MEMORY[0x1C3B87100](v1, 0x10F3C403C81E1ECLL);
  _Unwind_Resume(a1);
}

void std::vector<XcapCDRule *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100I15XcapCDConditionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x60uLL);
  result = _ZNSt3__120__shared_ptr_emplaceI15XcapCDConditionNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1BEF86ED0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceI15XcapCDConditionNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78CB538;
  XcapCDCondition::XcapCDCondition((XcapCDCondition *)(a1 + 3));
  return a1;
}

void sub_1BEF86F18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<XcapCDCondition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CB538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<XcapCDCondition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CB538;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<XcapCDCondition>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<XcapCDCondition *,std::shared_ptr<XcapCDCondition>::__shared_ptr_default_delete<XcapCDCondition,XcapCDCondition>,std::allocator<XcapCDCondition>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_pointer<XcapCDCondition *,std::shared_ptr<XcapCDCondition>::__shared_ptr_default_delete<XcapCDCondition,XcapCDCondition>,std::allocator<XcapCDCondition>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<XcapCDCondition *,std::shared_ptr<XcapCDCondition>::__shared_ptr_default_delete<XcapCDCondition,XcapCDCondition>,std::allocator<XcapCDCondition>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t _GLOBAL__sub_I_XcapDocumentCommDiversion_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&XcapDocumentCommDiversion::kName, "communication-diversion");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &XcapDocumentCommDiversion::kName, &dword_1BEDF4000);
}

void RTCPReceiverReport::packetize(RTCPReceiverReport *this@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  std::vector<unsigned int>::pointer begin;

  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<unsigned int>::resize(a2, 6uLL);
  begin = a2->__begin_;
  *begin = bswap32(*(_DWORD *)this);
  begin[1] = *((_DWORD *)this + 2) | (*((unsigned __int8 *)this + 4) << 24);
  begin[2] = bswap32(*((_DWORD *)this + 3));
  begin[3] = bswap32(*((_DWORD *)this + 4));
  begin[4] = bswap32(*((_DWORD *)this + 5));
  begin[5] = bswap32(*((_DWORD *)this + 6));
}

void sub_1BEF870C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

ImsOutStream *RTCPReceiverReport::toStream(RTCPReceiverReport *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" SSRC: ", 7);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" Fraction lost: ", 16);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" Packets lost: ", 15);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" Max Sequence Number: ", 22);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" Jitter: ", 9);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" Last SR: ", 10);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" Delay since last SR: ", 22);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  return a2;
}

void RTCPReceiverReports::addReport(void **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = 0x6DB6DB6DB6DB6DB7 * (((char *)v7 - (_BYTE *)*a1) >> 2);
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) > 0x924924924924924)
      std::vector<RTCPReceiverReport>::__throw_length_error[abi:ne180100]();
    v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - (_QWORD)*a1) >> 2);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x492492492492492)
      v13 = 0x924924924924924;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPReceiverReport>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[28 * v10];
    v16 = &v14[28 * v13];
    v17 = *a2;
    *(_OWORD *)(v15 + 12) = *(__int128 *)((char *)a2 + 12);
    *(_OWORD *)v15 = v17;
    v9 = v15 + 28;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 28);
        *((_OWORD *)v15 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)(v15 - 28) = v20;
        v15 -= 28;
        v18 -= 28;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18)
      operator delete(v18);
  }
  else
  {
    v8 = *a2;
    *(_OWORD *)((char *)v7 + 12) = *(__int128 *)((char *)a2 + 12);
    *v7 = v8;
    v9 = (char *)v7 + 28;
  }
  a1[1] = v9;
}

void RTCPReceiverReports::packetize(RTCPReceiverReports *this@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  _OWORD *v3;
  std::vector<unsigned int> __p;
  _OWORD v6[2];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *(_OWORD **)this;
  v3 = (_OWORD *)*((_QWORD *)this + 1);
  if (*(_OWORD **)this != v3)
  {
    do
    {
      v6[0] = *v2;
      *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)v2 + 12);
      memset(&__p, 0, sizeof(__p));
      RTCPReceiverReport::packetize((RTCPReceiverReport *)v6, &__p);
      std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>((std::vector<unsigned int> *)a2, *(_QWORD *)(a2 + 8), (char *)__p.__begin_, (char *)__p.__end_, __p.__end_ - __p.__begin_);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      v2 = (_OWORD *)((char *)v2 + 28);
    }
    while (v2 != v3);
  }
}

void sub_1BEF87420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *RTCPReceiverReports::toStream(RTCPReceiverReports *this, ImsOutStream *a2)
{
  _OWORD *v3;
  _OWORD *v4;
  _OWORD v6[2];

  v3 = *(_OWORD **)this;
  v4 = (_OWORD *)*((_QWORD *)this + 1);
  if (*(_OWORD **)this != v4)
  {
    do
    {
      v6[0] = *v3;
      *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)v3 + 12);
      RTCPReceiverReport::toStream((RTCPReceiverReport *)v6, a2);
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      v3 = (_OWORD *)((char *)v3 + 28);
    }
    while (v3 != v4);
  }
  return a2;
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v5;
  unsigned int *value;
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<RTCPReceiverReport>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPReceiverReport>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(28 * a2);
}

unsigned int *std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(std::vector<unsigned int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unsigned int *v5;
  unsigned int *v7;
  std::allocator<unsigned int> *p_end_cap;
  unsigned int *v10;
  unsigned int *value;
  unint64_t v12;
  std::vector<unsigned int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  std::__split_buffer<unsigned int> __v;

  v5 = (unsigned int *)__dst;
  if (a5 < 1)
    return v5;
  v7 = (unsigned int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)begin) >> 2;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    v5 = std::vector<unsigned int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = (unsigned int *)*((_QWORD *)p_end_cap - 1);
LABEL_17:
    v24 = &v5[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24)
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    if (v21 != (char *)v7)
      memmove(v5, v7, v21 - (char *)v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  v23 = (unsigned int *)(v12 + v22);
  a1->__end_ = (std::vector<unsigned int>::pointer)(v12 + v22);
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1BEF87810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  unsigned int *begin;
  std::vector<unsigned int>::pointer v6;
  unsigned int *v7;
  std::vector<unsigned int>::pointer v8;
  unsigned int v9;
  unsigned int *end;
  std::__split_buffer<unsigned int>::pointer v11;
  int64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void SipSecurityClientHeader::~SipSecurityClientHeader(SipSecurityClientHeader *this)
{
  SipPolymorphicVectorHeader<SipSecurityMechanism>::~SipPolymorphicVectorHeader(this);
  JUMPOUT(0x1C3B87100);
}

SipHeader *SipSecurityClientHeader::clone(SipSecurityClientHeader *this)
{
  SipHeader *v2;

  v2 = (SipHeader *)operator new();
  SipPolymorphicVectorHeader<SipSecurityMechanism>::SipPolymorphicVectorHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78CB588;
  return v2;
}

void sub_1BEF87984(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40888A45CFLL);
  _Unwind_Resume(a1);
}

uint64_t std::vector<unsigned int>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void SipTransportLayer::State::~State(void **this)
{
  *this = off_1E78CB958;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78CB958;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

void SipTransportLayer::IncomingMessageList::clear(SipTransportLayer::IncomingMessageList *this)
{
  uint64_t **v2;
  void *__p[2];
  char v4;

  std::__list_imp<unsigned long long>::clear((_QWORD *)this + 4);
  v2 = *(uint64_t ***)this;
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    PowerAssertionLock::deinitialize(v2, (uint64_t)__p);
    if (v4 < 0)
      operator delete(__p[0]);
  }
}

void sub_1BEF87A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipTransportLayer::IncomingMessageList::add(SipTransportLayer::IncomingMessageList *this, IncomingSipMessage *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t **v7;
  ims::AccessNetwork *v9;
  BOOL isWifi;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p[2];
  char v19;
  _BYTE v20[72];
  uint64_t v21;
  std::__shared_weak_count *v22;
  void **v23;

  v21 = 0;
  v22 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_5;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v22 = v5;
  if (!v5)
  {
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v6 = *((_QWORD *)this + 2);
  v21 = v6;
LABEL_6:
  if (!*((_QWORD *)this + 6))
  {
    v7 = *(uint64_t ***)this;
    if (*(_QWORD *)this && v6 != 0)
    {
      v9 = (ims::AccessNetwork *)(v6 + 3136);
      isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v6 + 3136));
      v11 = *((unsigned __int8 *)a2 + 56);
      v12 = ims::AccessNetwork::isWifi(v9);
      SipTransportLayer::assertionStringForCategory((uint64_t)__p, v11, v12);
      v23 = __p;
      v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v23);
      AssertionCounter::initialize((AssertionCounter *)v13[7], 300.0, !isWifi, (uint64_t)v20);
      ImsResult::~ImsResult((ImsResult *)v20);
      if (v19 < 0)
        operator delete(__p[0]);
    }
  }
  v14 = operator new(0x18uLL);
  v14[1] = (char *)this + 32;
  v14[2] = a2;
  v15 = *((_QWORD *)this + 4);
  *v14 = v15;
  *(_QWORD *)(v15 + 8) = v14;
  *((_QWORD *)this + 4) = v14;
  ++*((_QWORD *)this + 6);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEF87BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void SipTransportLayer::assertionStringForCategory(uint64_t a1, uint64_t a2, int a3)
{
  char *v3;
  void *__p[2];
  uint64_t v5;

  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  if (a3)
    v3 = ".wifi";
  else
    v3 = ".cell";
  std::string::basic_string[abi:ne180100]<0>(__p, v3);
  std::operator+<char>();
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_1BEF87CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SipTransportLayer::isEmergency(SipTransportLayer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _BOOL8 v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 1);
  if (v5)
    v6 = *(unsigned __int8 *)(v5 + 176) != 0;
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

uint64_t SipTransportLayer::userAgent(SipTransportLayer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 1);
  if (v5)
    v6 = *(_QWORD *)(v5 + 144);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

uint64_t SipTransportLayer::messageEncoding(SipTransportLayer *this)
{
  uint64_t result;

  result = SipTransportLayer::userAgent(this);
  if (result)
    return SipTransportLayer::userAgent(this) + 288;
  return result;
}

void SipTransportLayer::dumpMessage(_QWORD *a1, SipMessage *a2, uint64_t a3, uint64_t a4, uint64_t a5, const std::string *a6, _QWORD *a7, _QWORD *a8, unsigned __int8 a9, char a10)
{
  ctu::XpcJetsamAssertion *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  _BOOL4 v37;
  unint64_t v38;
  std::string::size_type v39;
  void *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  BOOL v51;
  _BOOL4 v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58[2];
  uint64_t v59;
  void *v60[2];
  char v61;
  void *v62[2];
  uint64_t v63;
  void *v64[2];
  uint64_t v65;
  std::string v66;
  void *v67[2];
  __int128 v68;
  uint64_t v69;
  __int128 __p;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  std::string v76;
  void *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  std::string v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  void *v86;
  char v87;
  uint64_t v88;
  std::__shared_weak_count *v89;

  v88 = 0;
  v89 = 0;
  v15 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  v16 = qword_1EF57C590;
  if (!qword_1EF57C590)
  {
    ctu::XpcJetsamAssertion::create_default_global(v15);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)&qword_1EF57C590, &v80);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
    if (*((_QWORD *)&v80 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v16 = qword_1EF57C590;
  }
  v20 = (std::__shared_weak_count *)off_1EF57C598;
  *(_QWORD *)&v73 = v16;
  *((_QWORD *)&v73 + 1) = off_1EF57C598;
  if (off_1EF57C598)
  {
    v21 = (unint64_t *)((char *)off_1EF57C598 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  std::string::basic_string[abi:ne180100]<0>(&v86, "sipDump");
  ctu::XpcJetsamAssertion::createActivity();
  if (v87 < 0)
    operator delete(v86);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v25 = (std::__shared_weak_count *)a1[2];
  if (v25)
  {
    v26 = std::__shared_weak_count::lock(v25);
    v85 = v26;
    if (v26)
    {
      v27 = v26;
      v28 = a1[1];
      v84 = v28;
      if (!v28)
      {
LABEL_100:
        v53 = (unint64_t *)&v27->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        goto LABEL_104;
      }
      v29 = *(_QWORD *)(v28 + 136);
      v30 = *(_QWORD *)(v29 + 272);
      if (v30)
      {
        v31 = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
        (*(void (**)(uint64_t, uint64_t, SipMessage *, const std::string *, _QWORD *, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v30 + 24))(v30, v29, a2, a6, a7, a8, a9, v31);
      }
      memset(&v83, 0, sizeof(v83));
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v32 = ims::_logger;
      std::string::basic_string[abi:ne180100]<0>(&v80, "sip.dump");
      if (*(char *)(v28 + 4159) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v73, *(const std::string::value_type **)(v28 + 4136), *(_QWORD *)(v28 + 4144));
      }
      else
      {
        v73 = *(_OWORD *)(v28 + 4136);
        *(_QWORD *)&v74 = *(_QWORD *)(v28 + 4152);
      }
      ImsLogger::getFacilityWithStackTag(v32, (uint64_t)&v80, (uint64_t)&v73, &v83);
      if (SBYTE7(v74) < 0)
        operator delete((void *)v73);
      if (SBYTE7(v81) < 0)
        operator delete((void *)v80);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v33 = ims::_logger;
      v34 = ImsLogger::facilityWithName(ims::_logger, &v83, 0);
      v35 = v33 + 96;
      if (v34)
        v35 = v34;
      if (*(int *)(v35 + 80) < 7)
      {
LABEL_98:
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v83.__r_.__value_.__l.__data_);
        goto LABEL_100;
      }
      v82 = 0;
      v80 = 0u;
      v81 = 0u;
      ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v80, 1);
      (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)*a7 + 40))(*a7, &v80);
      if (a9)
        v36 = " <-- ";
      else
        v36 = " --> ";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v80 + 1), (uint64_t)v36, 5);
      BYTE1(v81) = 0;
      (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)*a8 + 40))(*a8, &v80);
      LOBYTE(v73) = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v80 + 1), (uint64_t)&v73, 1);
      BYTE1(v81) = 0;
      (*(void (**)(__int128 *__return_ptr, SipMessage *))(*(_QWORD *)a2 + 48))(&__p, a2);
      LoggableString::LoggableString((std::string *)&v73, (const std::string *)&__p);
      (*(void (**)(__int128 *, __int128 *))(v80 + 40))(&v80, &v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v80 + 1), (uint64_t)" (", 2);
      BYTE1(v81) = 0;
      if (SBYTE7(v74) < 0)
        operator delete((void *)v73);
      if (SBYTE7(v71) < 0)
      {
        operator delete((void *)__p);
        if (!a10)
        {
LABEL_43:
          LoggableString::LoggableString((std::string *)&v73, a6);
          (*(void (**)(__int128 *, __int128 *))(v80 + 40))(&v80, &v73);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v80 + 1), (uint64_t)")", 1);
          BYTE1(v81) = 0;
          if (SBYTE7(v74) < 0)
            operator delete((void *)v73);
          v77 = 0;
          v78 = 0;
          v79 = 0;
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v81 + 1) + 8, &v77);
          memset(&v76, 0, sizeof(v76));
          v37 = HIBYTE(v79) > 0x5Fu;
          if (v79 >= 0)
            v38 = HIBYTE(v79);
          else
            v38 = v78;
          if (v79 < 0)
            v37 = v78 > 0x5F;
          if (v37)
            v39 = v38 + 10;
          else
            v39 = 100;
          std::string::append(&v76, ((v39 - v38) >> 1) - 1, 61);
          v75 = 0;
          v73 = 0u;
          v74 = 0u;
          ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v73, 1);
          LoggableString::LoggableString((std::string *)&__p, &v76);
          (*(void (**)(__int128 *, __int128 *))(v73 + 40))(&v73, &__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v73 + 1), (uint64_t)" ", 1);
          BYTE1(v74) = 0;
          (*(void (**)(__int128 *, __int128 *))(v73 + 80))(&v73, &v80);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v73 + 1), (uint64_t)" ", 1);
          BYTE1(v74) = 0;
          LoggableString::LoggableString((std::string *)v67, &v76);
          (*(void (**)(__int128 *, void **))(v73 + 40))(&v73, v67);
          (*(void (**)(__int128 *, _QWORD *(*)(_QWORD *)))(v73 + 64))(&v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          BYTE1(v74) = 0;
          if (SBYTE7(v68) < 0)
            operator delete(v67[0]);
          if (SBYTE7(v71) < 0)
            operator delete((void *)__p);
          v72 = 0;
          __p = 0u;
          v71 = 0u;
          ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&__p, 1);
          v69 = 0;
          v68 = 0u;
          *(_OWORD *)v67 = 0u;
          ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v67, 1);
          (*(void (**)(SipMessage *, __int128 *))(*(_QWORD *)a2 + 104))(a2, &__p);
          (*(void (**)(__int128 *, _QWORD *(*)(_QWORD *)))(__p + 64))(&__p, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          BYTE1(v71) = 0;
          SipMessage::encodeHeaders(a2, (ImsOutStream *)&__p);
          SipMessage::encodeBody(a2, (ImsOutStream *)v67);
          memset(&v66, 0, sizeof(v66));
          std::string::append(&v66, v39, 61);
          v64[0] = 0;
          v64[1] = 0;
          v65 = 0;
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v71 + 1) + 8, v64);
          v62[0] = 0;
          v62[1] = 0;
          v63 = 0;
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v68 + 1) + 8, v62);
          if (v40
            && ((v41 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(_QWORD *)v40 + 112))(v40),
                 v42 = v41[23],
                 (v42 & 0x80u) == 0)
              ? (v43 = v41[23])
              : (v43 = *((_QWORD *)v41 + 1)),
                v43 == 7))
          {
            if ((v42 & 0x80) != 0)
            {
              v52 = memcmp(*(const void **)v41, "MESSAGE", *((_QWORD *)v41 + 1)) == 0;
            }
            else if (v41[23])
            {
              v44 = v42 - 1;
              v45 = "MESSAGE";
              do
              {
                v47 = *v41++;
                v46 = v47;
                v49 = *(unsigned __int8 *)v45++;
                v48 = v49;
                v51 = v44-- != 0;
                v52 = v46 == v48;
              }
              while (v46 == v48 && v51);
            }
            else
            {
              v52 = 1;
            }
          }
          else
          {
            v52 = 0;
          }
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v74 + 1) + 8, v60);
          v58[0] = 0;
          v58[1] = 0;
          v59 = 0;
          ims::dumpMessage((uint64_t *)&v83, (uint64_t *)v60, (uint64_t *)v64, (uint64_t)v62, (uint64_t)v58, (uint64_t)&v66, v52);
          if (SHIBYTE(v59) < 0)
            operator delete(v58[0]);
          if (v61 < 0)
            operator delete(v60[0]);
          if (SHIBYTE(v63) < 0)
            operator delete(v62[0]);
          if (SHIBYTE(v65) < 0)
            operator delete(v64[0]);
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v66.__r_.__value_.__l.__data_);
          v67[0] = &off_1E78D7A10;
          if ((_BYTE)v68 && v67[1])
            (*(void (**)(void *))(*(_QWORD *)v67[1] + 8))(v67[1]);
          *(_QWORD *)&__p = &off_1E78D7A10;
          if ((_BYTE)v71 && *((_QWORD *)&__p + 1))
            (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 8))(*((_QWORD *)&__p + 1));
          *(_QWORD *)&v73 = &off_1E78D7A10;
          if ((_BYTE)v74 && *((_QWORD *)&v73 + 1))
            (*(void (**)(_QWORD))(**((_QWORD **)&v73 + 1) + 8))(*((_QWORD *)&v73 + 1));
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v76.__r_.__value_.__l.__data_);
          if (SHIBYTE(v79) < 0)
            operator delete(v77);
          *(_QWORD *)&v80 = &off_1E78D7A10;
          if ((_BYTE)v81 && *((_QWORD *)&v80 + 1))
            (*(void (**)(_QWORD))(**((_QWORD **)&v80 + 1) + 8))(*((_QWORD *)&v80 + 1));
          goto LABEL_98;
        }
      }
      else if (!a10)
      {
        goto LABEL_43;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v80 + 1), (uint64_t)"secure ", 7);
      BYTE1(v81) = 0;
      goto LABEL_43;
    }
  }
LABEL_104:
  v55 = v89;
  if (v89)
  {
    v56 = (unint64_t *)&v89->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_1BEF88690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,void *a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;
  uint64_t v59;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (a36 && a35)
    (*(void (**)(uint64_t))(*(_QWORD *)a35 + 8))(a35);
  if (a42 && a41)
    (*(void (**)(void *))(*(_QWORD *)a41 + 8))(a41);
  if (a48 && a47)
    (*(void (**)(uint64_t))(*(_QWORD *)a47 + 8))(a47);
  if (a57 < 0)
    operator delete(a52);
  if (*(char *)(v57 - 225) < 0)
    operator delete(*(void **)(v57 - 248));
  *(_QWORD *)(v57 - 224) = &off_1E78D7A10;
  if (*(_BYTE *)(v57 - 208))
  {
    v59 = *(_QWORD *)(v57 - 216);
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  }
  if (*(char *)(v57 - 153) < 0)
    operator delete(*(void **)(v57 - 176));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v57 - 152);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v57 - 112);
  _Unwind_Resume(a1);
}

_QWORD *SipTransportLayer::SipTransportLayer(uint64_t a1, std::string::size_type *a2)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::string::size_type v14;
  std::string *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t ***v28;
  std::string::size_type v29;
  uint64_t v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  const char *v37;
  const char **v38;
  uint64_t v39;
  char v40;
  size_t v41;
  size_t v42;
  std::string *v43;
  std::string *p_str;
  char *v45;
  size_t v46;
  std::string *v47;
  __int128 v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *p_shared_weak_owners;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v65;
  uint64_t v66;
  std::string v67;
  std::string v68;
  std::string __str;
  _QWORD v70[4];

  v70[2] = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    __str.__r_.__value_.__r.__words[0] = v4;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v4;
  }
  SipStackLayer::SipStackLayer((_QWORD *)a1, (uint64_t *)&__str);
  size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_QWORD *)a1 = off_1E78CB9A0;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)(a1 + 32) = off_1E78CBAA8;
  *(_QWORD *)(a1 + 24) = off_1E78CBA80;
  std::string::basic_string[abi:ne180100]<0>(&__str, "sip.tport");
  v14 = *a2;
  if (*a2)
  {
    if (*(char *)(v14 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(v14 + 4136), *(_QWORD *)(v14 + 4144));
    else
      v68 = *(std::string *)(v14 + 4136);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v68, "");
  }
  ImsLogContainer::ImsLogContainer(a1 + 40, &__str, &v68);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 144) = &unk_1E78CB800;
  *(_QWORD *)a1 = &off_1E78CB638;
  *(_QWORD *)(a1 + 24) = &unk_1E78CB750;
  *(_QWORD *)(a1 + 32) = &unk_1E78CB778;
  *(_QWORD *)(a1 + 40) = &unk_1E78CB7A0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = &unk_1E78CB830;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_DWORD *)(a1 + 224) = 0;
  v15 = (std::string *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = off_1E78CB958;
  if (byte_1ED70CACF < 0)
  {
    std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)xmmword_1ED70CAB8, *((std::string::size_type *)&xmmword_1ED70CAB8 + 1));
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = xmmword_1ED70CAB8;
    *(_QWORD *)(a1 + 256) = unk_1ED70CAC8;
  }
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 296) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 304) = 0;
  *(_WORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 352) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 360) = a1 + 368;
  *(_BYTE *)(a1 + 385) = 1;
  *(_QWORD *)(a1 + 288) = &off_1E78BFCE8;
  *(_QWORD *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 616) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 624) = a1 + 632;
  *(_QWORD *)(a1 + 656) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = a1 + 672;
  *(_BYTE *)(a1 + 384) = 1;
  *(_WORD *)(a1 + 648) = 257;
  *(_WORD *)(a1 + 688) = 257;
  *(_BYTE *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 696) = &off_1E78EC610;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_QWORD *)(a1 + 752) = &off_1E78EC610;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 808));
  *(_QWORD *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_DWORD *)(a1 + 1112) = 1065353216;
  *(_QWORD *)(a1 + 1128) = &off_1E78D08F8;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_WORD *)(a1 + 1160) = 0;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_QWORD *)(a1 + 1184) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 1200) = 0;
  *(_QWORD *)(a1 + 1208) = 0;
  *(_QWORD *)(a1 + 1192) = a1 + 1200;
  *(_BYTE *)(a1 + 1217) = 1;
  *(_QWORD *)(a1 + 1120) = &off_1E78BFCE8;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_QWORD *)(a1 + 1432) = 0;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_QWORD *)(a1 + 1448) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 1464) = 0;
  *(_QWORD *)(a1 + 1472) = 0;
  *(_QWORD *)(a1 + 1456) = a1 + 1464;
  *(_QWORD *)(a1 + 1488) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 1512) = 0;
  *(_QWORD *)(a1 + 1504) = 0;
  *(_QWORD *)(a1 + 1496) = a1 + 1504;
  *(_BYTE *)(a1 + 1216) = 1;
  *(_WORD *)(a1 + 1480) = 257;
  *(_WORD *)(a1 + 1520) = 257;
  *(_BYTE *)(a1 + 1440) = 0;
  *(_QWORD *)(a1 + 1536) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 1576) = 0;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_WORD *)(a1 + 1568) = 0;
  *(_QWORD *)(a1 + 1560) = 0;
  *(_QWORD *)(a1 + 1544) = 0;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_QWORD *)(a1 + 1592) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 1616) = 0;
  *(_QWORD *)(a1 + 1608) = 0;
  *(_QWORD *)(a1 + 1600) = a1 + 1608;
  *(_BYTE *)(a1 + 1625) = 1;
  *(_QWORD *)(a1 + 1528) = &off_1E78BFCE8;
  *(_QWORD *)(a1 + 1840) = 0;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_QWORD *)(a1 + 1856) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 1880) = 0;
  *(_QWORD *)(a1 + 1872) = 0;
  *(_QWORD *)(a1 + 1864) = a1 + 1872;
  *(_BYTE *)(a1 + 1889) = 1;
  *(_QWORD *)(a1 + 1896) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 1920) = 0;
  *(_QWORD *)(a1 + 1912) = 0;
  *(_QWORD *)(a1 + 1904) = a1 + 1912;
  *(_BYTE *)(a1 + 1929) = 1;
  *(_BYTE *)(a1 + 1624) = 1;
  *(_BYTE *)(a1 + 1888) = 1;
  *(_BYTE *)(a1 + 1928) = 1;
  *(_BYTE *)(a1 + 1848) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 2016) = 0;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 992, (__int128 *)&__str);
  v16 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 1008, (__int128 *)&__str);
  v19 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 1024, (__int128 *)&__str);
  v22 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 1040, (__int128 *)&__str);
  v25 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v26 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (uint64_t ***)(a1 + 1952);
  *(_DWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 912) = a1 + 144;
  std::string::basic_string[abi:ne180100]<0>(&__str, "sip.tport");
  v29 = *a2;
  if (*(char *)(*a2 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(v29 + 4136), *(_QWORD *)(v29 + 4144));
  else
    v68 = *(std::string *)(v29 + 4136);
  std::string::operator=((std::string *)(a1 + 856), &__str);
  std::string::operator=((std::string *)(a1 + 880), &v68);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v30 = operator new();
  *(_QWORD *)(v30 + 48) = 0;
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)(v30 + 16) = 0u;
  *(_OWORD *)(v30 + 28) = 0u;
  *(_QWORD *)(a1 + 984) = v30;
  ImsNetworkReachabilityMonitor::setDelegate((const __SCNetworkReachability **)v30, (ImsNetworkReachabilityDelegate *)(a1 + 32));
  *(_BYTE *)(a1 + 1056) = 0;
  *(_DWORD *)(a1 + 1936) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  v31 = operator new(0x30uLL);
  v31[1] = 0;
  v31[2] = 0;
  *v31 = &off_1E78CBAD0;
  v31[5] = 0;
  v31[4] = 0;
  v31[3] = v31 + 4;
  *(_QWORD *)(a1 + 1952) = v31 + 3;
  v32 = *(std::__shared_weak_count **)(a1 + 1960);
  *(_QWORD *)(a1 + 1960) = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v70[0] = ".wifi";
  v70[1] = ".cell";
  memset(&__str, 0, sizeof(__str));
  std::string::basic_string[abi:ne180100]<0>(&__str, "com.apple.ipTelephony.sipIncoming");
  v65 = (_QWORD *)a1;
  v35 = 0;
  do
  {
    v36 = 0;
    v66 = v35;
    v37 = (const char *)*((_QWORD *)&off_1E78CB848 + v35);
    v38 = (const char **)v70;
    v39 = 1;
    do
    {
      v40 = v36;
      memset(&v68, 0, sizeof(v68));
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v41 = __str.__r_.__value_.__l.__size_;
      v42 = strlen(v37);
      memset(&v67, 0, sizeof(v67));
      std::string::basic_string[abi:ne180100]((uint64_t)&v67, v41 + v42);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v67;
      else
        v43 = (std::string *)v67.__r_.__value_.__r.__words[0];
      if (v41)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v43, p_str, v41);
      }
      v45 = (char *)v43 + v41;
      if (v42)
        memmove(v45, v37, v42);
      v45[v42] = 0;
      v46 = strlen(*v38);
      v47 = std::string::append(&v67, *v38, v46);
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      PowerAssertionLock::addAssertion(*v28, (__int128 *)&v68);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      v38 = (const char **)&v70[v39];
      v36 = 1;
      v39 = 2;
    }
    while ((v40 & 1) == 0);
    v35 = v66 + 1;
  }
  while (v66 != 3);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v49 = (_QWORD *)operator new();
  v50 = (std::__shared_weak_count *)v65[2];
  if (v50)
  {
    v51 = std::__shared_weak_count::lock(v50);
    if (v51)
    {
      v52 = v65[1];
      goto LABEL_90;
    }
  }
  else
  {
    v51 = 0;
  }
  v52 = 0;
LABEL_90:
  v53 = v65[244];
  v54 = (std::__shared_weak_count *)v65[245];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
    *v49 = v53;
    v49[1] = v54;
    do
      v57 = __ldxr(v55);
    while (__stxr(v57 + 1, v55));
  }
  else
  {
    *v49 = v53;
    v49[1] = 0;
  }
  v49[2] = v52;
  v49[3] = v51;
  if (v51)
  {
    p_shared_weak_owners = (unint64_t *)&v51->__shared_weak_owners_;
    do
      v59 = __ldxr(p_shared_weak_owners);
    while (__stxr(v59 + 1, p_shared_weak_owners));
  }
  v49[4] = v49 + 4;
  v49[5] = v49 + 4;
  v49[6] = 0;
  v65[243] = v49;
  if (v54)
  {
    v60 = (unint64_t *)&v54->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v51)
  {
    v62 = (unint64_t *)&v51->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  return v65;
}

void sub_1BEF89354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, SipUri *a11, uint64_t a12, uint64_t a13, SipTimerContainer *a14, SipRouteSet *a15, SipUri *a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;

  if (*(char *)(v35 - 121) < 0)
    operator delete(*(void **)(v35 - 144));
  std::deque<SipUri>::~deque[abi:ne180100]((_QWORD *)(v33 + 1968));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34);
  SipUri::~SipUri((SipUri *)(v33 + 1528));
  SipUri::~SipUri(a11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a19);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a13);
  if (*(char *)(v33 + 983) < 0)
    operator delete(*(void **)(v33 + 960));
  SipTimerContainer::~SipTimerContainer(a14);
  SipRouteSet::~SipRouteSet(a15);
  SipRouteSet::~SipRouteSet((SipRouteSet *)(v33 + 696));
  SipUri::~SipUri(a16);
  *(_QWORD *)(v33 + 232) = off_1E78CB958;
  if (*(char *)(v33 + 263) < 0)
    operator delete(*a9);
  std::__tree<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>>>::destroy(*(_QWORD **)(v33 + 208));
  std::__tree<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>>>::destroy(*(_QWORD **)(v33 + 184));
  v37 = *(std::__shared_weak_count **)(v33 + 168);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  ImsLogContainer::~ImsLogContainer(a17);
  *(_QWORD *)v33 = &off_1E78C16F0;
  v38 = *(std::__shared_weak_count **)(v33 + 16);
  if (v38)
    std::__shared_weak_count::__release_weak(v38);
  _Unwind_Resume(a1);
}

void SipTransportLayer::~SipTransportLayer(SipTransportLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFTypeRef *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;

  *(_QWORD *)this = &off_1E78CB638;
  *((_QWORD *)this + 3) = &unk_1E78CB750;
  *((_QWORD *)this + 4) = &unk_1E78CB778;
  *((_QWORD *)this + 5) = &unk_1E78CB7A0;
  *((_QWORD *)this + 18) = &unk_1E78CB800;
  *((_QWORD *)this + 19) = &unk_1E78CB830;
  SipTransportLayer::dropDeferredIncomingMessages(this);
  SipTransportLayer::closeTransports(this);
  if (*((char *)this + 983) < 0)
    v2 = *((_QWORD *)this + 121);
  else
    v2 = *((unsigned __int8 *)this + 983);
  if (v2)
  {
    v3 = NetworkInterfaceMonotorManager::_instance;
    if (!NetworkInterfaceMonotorManager::_instance)
    {
      v3 = operator new();
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_DWORD *)(v3 + 32) = 1065353216;
      NetworkInterfaceMonotorManager::_instance = v3;
    }
    NetworkInterfaceMonotorManager::releaseMonitor((_QWORD *)v3, (unsigned __int8 *)this + 960);
  }
  v4 = *((_QWORD *)this + 134);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (CFTypeRef *)*((_QWORD *)this + 123);
  if (v5)
  {
    ImsNetworkReachabilityMonitor::~ImsNetworkReachabilityMonitor(v5);
    MEMORY[0x1C3B87100]();
  }
  v6 = *((_QWORD *)this + 243);
  if (v6)
  {
    SipTransportLayer::IncomingMessageList::clear(*((SipTransportLayer::IncomingMessageList **)this + 243));
    std::__list_imp<unsigned long long>::clear((_QWORD *)(v6 + 32));
    v7 = *(std::__shared_weak_count **)(v6 + 24);
    if (v7)
      std::__shared_weak_count::__release_weak(v7);
    v8 = std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v6);
    MEMORY[0x1C3B87100](v8, 0x1020C405B906368);
  }
  v9 = *((_QWORD *)this + 133);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::deque<SipUri>::~deque[abi:ne180100]((_QWORD *)this + 246);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1952);
  SipUri::~SipUri((SipTransportLayer *)((char *)this + 1528));
  SipUri::~SipUri((SipTransportLayer *)((char *)this + 1120));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 1080);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1040);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1024);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1008);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 992);
  if (*((char *)this + 983) < 0)
    operator delete(*((void **)this + 120));
  SipTimerContainer::~SipTimerContainer((SipTransportLayer *)((char *)this + 808));
  SipRouteSet::~SipRouteSet((SipTransportLayer *)((char *)this + 752));
  SipRouteSet::~SipRouteSet((SipTransportLayer *)((char *)this + 696));
  SipUri::~SipUri((SipTransportLayer *)((char *)this + 288));
  *((_QWORD *)this + 29) = off_1E78CB958;
  if (*((char *)this + 263) < 0)
    operator delete(*((void **)this + 30));
  std::__tree<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>>>::destroy(*((_QWORD **)this + 26));
  std::__tree<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>>>::destroy(*((_QWORD **)this + 23));
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *((_QWORD *)this + 5) = off_1E78CFE68;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  *(_QWORD *)this = &off_1E78C16F0;
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

{
  SipTransportLayer::~SipTransportLayer(this);
  JUMPOUT(0x1C3B87100);
}

_QWORD *SipTransportLayer::dropDeferredIncomingMessages(SipTransportLayer *this)
{
  uint64_t v2;
  char *v3;
  _QWORD **v4;
  IncomingSipMessage *v5;
  uint64_t v6;
  uint64_t v7;
  void *v9[2];
  char v10;
  uint64_t v11;
  void *__p;
  uint64_t v13;

  v11 = 0;
  __p = 0;
  v13 = 0;
  std::list<IncomingSipMessage *>::list(&v11, *((_QWORD *)this + 243) + 32);
  v2 = v13;
  if (v13)
  {
    v3 = (char *)this + 40;
    do
    {
      v4 = (_QWORD **)__p;
      v5 = (IncomingSipMessage *)*((_QWORD *)__p + 2);
      v6 = *(_QWORD *)__p;
      *(_QWORD *)(v6 + 8) = *((_QWORD *)__p + 1);
      *v4[1] = v6;
      v13 = v2 - 1;
      operator delete(v4);
      v7 = (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 48))((char *)this + 40);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v3 + 16))((char *)this + 40, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"dropping deferred ", 18);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(void **__return_ptr))(**(_QWORD **)v5 + 48))(v9);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 32))(v7, v9);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
      if (v10 < 0)
        operator delete(v9[0]);
      IncomingSipMessage::~IncomingSipMessage(v5);
      MEMORY[0x1C3B87100]();
      v2 = v13;
    }
    while (v13);
  }
  SipTransportLayer::IncomingMessageList::clear(*((SipTransportLayer::IncomingMessageList **)this + 243));
  return std::__list_imp<unsigned long long>::clear(&v11);
}

void sub_1BEF898BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__list_imp<unsigned long long>::clear(&a15);
  _Unwind_Resume(a1);
}

void SipTransportLayer::closeTransports(SipTransportLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  SipTransactionLayer *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p[2];
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = *((_QWORD *)this + 124);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 272))(v2);
    v3 = *((_QWORD *)this + 124);
    LoggableString::LoggableString((LoggableString *)__p, "TransportLayer");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, __p);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 124);
  }
  v4 = *((_QWORD *)this + 126);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 272))(v4);
    v5 = *((_QWORD *)this + 126);
    LoggableString::LoggableString((LoggableString *)__p, "TransportLayer");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 40))(v5, __p);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 126);
  }
  v6 = *((_QWORD *)this + 128);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 272))(v6);
    v7 = *((_QWORD *)this + 128);
    LoggableString::LoggableString((LoggableString *)__p, "TransportLayer");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 40))(v7, __p);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 128);
  }
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 130);
  *((_BYTE *)this + 1056) = 0;
  SipTransportLayer::setInterface(this, 0);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    v25 = v9;
    if (v9)
    {
      v10 = v9;
      v11 = *((_QWORD *)this + 1);
      v24 = v11;
      if (v11)
      {
        v13 = *((_QWORD *)this + 5);
        v12 = (char *)this + 40;
        v14 = (*(uint64_t (**)(char *))(v13 + 64))(v12);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))(v12, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Force transactions to error out as transport layer is going away.", 65);
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v14 + 17) = 0;
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        __p[0] = &off_1E78B7238;
        __p[1] = &_bambiDomain;
        v20 = 0;
        v19 = 1073741844;
        v15 = *(SipTransactionLayer **)(v11 + 152);
        if (v15)
          SipTransactionLayer::errorOutAllTransactions(v15, (const ImsResult *)__p);
        ImsResult::~ImsResult((ImsResult *)__p);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1BEF89B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  ImsResult::~ImsResult((ImsResult *)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v15 - 48);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTransportLayer::~SipTransportLayer(SipTransportLayer *this)
{
  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 24));
}

{
  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 32));
}

{
  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 40));
}

{
  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 144));
}

{
  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 152));
}

{
  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

{
  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 32));
  JUMPOUT(0x1C3B87100);
}

{
  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 40));
  JUMPOUT(0x1C3B87100);
}

{
  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 144));
  JUMPOUT(0x1C3B87100);
}

{
  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 152));
  JUMPOUT(0x1C3B87100);
}

void SipTransportLayer::setInterface(SipTransportLayer *this, NetworkInterface *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NetworkInterface *v10;
  uint64_t v11;
  uint64_t i;

  if (*((_QWORD *)this + 133))
  {
    v4 = (char *)this + 40;
    v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 64))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))((char *)this + 40, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Updating old interface", 22);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    v6 = *((_QWORD *)this + 134);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *((_QWORD *)this + 134) = *((_QWORD *)this + 133);
  }
  else if (a2)
  {
    v7 = (char *)this + 40;
    v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 64))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))((char *)this + 40, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Initializing old interface", 26);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    v9 = *((_QWORD *)this + 134);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = (NetworkInterface *)operator new();
    NetworkInterface::NetworkInterface(v10, a2);
    *((_QWORD *)this + 134) = v10;
  }
  *((_QWORD *)this + 133) = a2;
  if (*((_QWORD *)this + 138))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((_DWORD)this + 1080, *((void ***)this + 137));
    *((_QWORD *)this + 137) = 0;
    v11 = *((_QWORD *)this + 136);
    if (v11)
    {
      for (i = 0; i != v11; ++i)
        *(_QWORD *)(*((_QWORD *)this + 135) + 8 * i) = 0;
    }
    *((_QWORD *)this + 138) = 0;
  }
}

void sub_1BEF89E24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40F64ECF8ALL);
  _Unwind_Resume(a1);
}

uint64_t SipTransportLayer::setState(SipTransportLayer *this, const SipTransportLayer::State *a2)
{
  char *v4;
  uint64_t result;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (char *)this + 232;
  result = ImsUuid::operator==((uint64_t)a2, (uint64_t)this + 232);
  if ((result & 1) == 0)
  {
    v7 = *((_QWORD *)this + 5);
    v6 = (char *)this + 40;
    v8 = (*(uint64_t (**)(char *))(v7 + 64))(v6);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"state transition [", 18);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((_QWORD *)v6 + 24) + 16))(v4, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" --> ", 5);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(const SipTransportLayer::State *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    return (uint64_t)std::string::operator=((std::string *)(v6 + 200), (const std::string *)((char *)a2 + 8));
  }
  return result;
}

uint64_t SipTransportLayer::initialize(SipTransportLayer *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (char *)this + 40;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 64))((char *)this + 40);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Initializing TransportLayer", 27);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  *((_DWORD *)this + 484) = 0;
  v4 = (*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 16))(this);
  SipUri::operator=((SipTransportLayer *)((char *)this + 1120), v4 + 24);
  return SipTransportLayer::setState(this, (const SipTransportLayer::State *)&SipTransportLayer::State::kStateIdle);
}

uint64_t SipTransportLayer::deinitialize(SipTransportLayer *this)
{
  char *v2;
  uint64_t v3;
  std::string __p;

  v2 = (char *)this + 40;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 64))((char *)this + 40);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Tearing down TransportLayer", 27);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  SipTransportLayer::dropDeferredIncomingMessages(this);
  std::string::basic_string[abi:ne180100]<0>(&__p, "deinitialization");
  SipTransportLayer::resetTransportErrors((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SipTransportLayer::cancelTransportInit(this);
  SipTransportLayer::closeTransports(this);
  return SipTransportLayer::setState(this, (const SipTransportLayer::State *)&SipTransportLayer::State::kStateUninitialized);
}

void sub_1BEF8A0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipTransportLayer::resetTransportErrors(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string __p;

  v4 = a1 + 40;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a1 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"resetting transport errors on ", 30);
  *(_BYTE *)(v5 + 17) = 0;
  LoggableString::LoggableString(&__p, a2);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 40))(v5, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_DWORD *)(a1 + 1936) = 0;
}

void sub_1BEF8A1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipTransportLayer::cancelTransportInit(SipTransportLayer *this)
{
  uint64_t v2;

  *((_QWORD *)this + 35) = 0;
  *((_DWORD *)this + 238) = 0;
  SipTimerContainer::cancelAllTimers((SipTransportLayer *)((char *)this + 808));
  v2 = NetworkInterfaceMonotorManager::_instance;
  if (!NetworkInterfaceMonotorManager::_instance)
  {
    v2 = operator new();
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_DWORD *)(v2 + 32) = 1065353216;
    NetworkInterfaceMonotorManager::_instance = v2;
  }
  NetworkInterfaceMonotorManager::stopMonitoring((_QWORD *)v2, (unsigned __int8 *)this + 960);
}

uint64_t SipTransportLayer::localClientAddress(SipTransportLayer *this, _QWORD *a2)
{
  uint64_t result;
  ImsPrefs *v5;
  void **AlwaysUseDefaultTransportKey;

  result = a2[124];
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 184))(result);
  if (a2[130])
  {
    v5 = (ImsPrefs *)(*(uint64_t (**)(_QWORD *))(*a2 + 184))(a2);
    AlwaysUseDefaultTransportKey = (void **)ImsPrefs::getAlwaysUseDefaultTransportKey(v5);
    result = (uint64_t)ImsPrefs::prefWithKey(v5, AlwaysUseDefaultTransportKey);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      if ((result & 1) == 0)
      {
LABEL_6:
        result = a2[130];
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 184))(result);
      }
    }
    else if (!*((_BYTE *)AlwaysUseDefaultTransportKey + 57))
    {
      goto LABEL_6;
    }
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  return result;
}

void SipTransportLayer::initializeTransportToProxy(uint64_t a1@<X0>, SipUri *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  const SipUri *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (***v30)(_QWORD);
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  void (***v56)(_QWORD);
  _QWORD *v57;
  void (***v58)(_QWORD);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int64_t v92;
  char *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  int64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  void *v102;
  _QWORD *v103;
  uint64_t v104;
  void *v105;
  __int128 v106;
  __int128 v107;
  uint64_t i;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  int64_t v121;
  char *v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  void *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  const SipUri *v139;
  _QWORD *v140;
  char *v141;
  std::__shared_weak_count *v142;
  void *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  const std::string *v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;
  std::string::size_type v155;
  uint64_t v156;
  void *v157;
  std::__shared_weak_count *v158;
  unint64_t *p_shared_owners;
  unint64_t v160;
  NetworkInterface *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *size;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *p_shared_weak_owners;
  unint64_t v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  std::string::size_type v181;
  std::string::size_type v182;
  std::string::size_type v183;
  std::string::size_type v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  int v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  SipUri *v203;
  unint64_t v204;
  int v205;
  char v206;
  int v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  const SipUri **v214;
  const SipUri *v215;
  const SipUri *v216;
  uint64_t j;
  const SipUri *v218;
  uint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  unsigned __int8 *v231;
  void *v232;
  void *v233;
  int v234;
  uint64_t v235;
  void **v236;
  int v237;
  int v238;
  int v239;
  int v240;
  char v241;
  BOOL v242;
  BOOL v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  std::__shared_weak_count *v256;
  uint64_t v257;
  unint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  const std::string *p_on_zero_shared_weak;
  std::__shared_weak_count *v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  int v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t v277;
  _BYTE *v278;
  char v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  _QWORD *v288;
  _QWORD *v289;
  char v290;
  uint64_t v291;
  _QWORD *(*v292)(_QWORD *);
  uint64_t v293;
  int v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  std::string::size_type v297;
  _QWORD *(*v298)(_QWORD *);
  int v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  uint64_t v306;
  int v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  std::string::size_type v313;
  std::string::size_type v314;
  unint64_t *v315;
  unint64_t v316;
  int v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  uint64_t v327;
  CFTypeRef *v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  std::__shared_weak_count *v337;
  std::string::size_type v338;
  uint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  std::__shared_weak_count *v344;
  std::string::size_type v345;
  uint64_t v346;
  void *v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  NetworkInterface *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  const ImsResult *v357;
  std::__shared_weak_count *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  void **v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  unint64_t *v367;
  unint64_t v368;
  uint64_t v369;
  std::string::size_type v370;
  std::string::size_type v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t v377;
  std::__shared_weak_count *v379;
  SipUri *v380;
  std::__shared_weak_count *k;
  _QWORD *v384;
  std::__shared_weak_count_vtbl *v385;
  uint64_t v386;
  std::string v387;
  std::string v388;
  void *__p[2];
  _BYTE v390[24];
  __int128 v391;
  __int128 v392;
  uint64_t v393;
  std::__shared_weak_count *v394;
  void *v395;
  std::__shared_weak_count *v396;
  uint64_t v397;
  std::string v398;
  uint64_t v399;
  std::__shared_weak_count *v400;
  uint64_t v401;
  std::__shared_weak_count *v402;
  _BYTE v403[24];
  _BYTE *v404;
  uint64_t v405;

  v405 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)(a1 + 1968);
  v380 = a2;
  if ((SipUri *)(a1 + 1968) == a2)
    goto LABEL_156;
  v7 = *((_QWORD *)a2 + 4);
  v8 = *((_QWORD *)a2 + 1);
  v9 = (_QWORD *)(v8 + 8 * (v7 >> 4));
  if (*((_QWORD *)a2 + 2) == v8)
  {
    v10 = 0;
    v13 = 0;
    v12 = (char *)(v8 + 8 * ((*((_QWORD *)a2 + 5) + v7) >> 4));
  }
  else
  {
    v10 = (void *)(*v9 + 408 * (*((_QWORD *)a2 + 4) & 0xFLL));
    v11 = *((_QWORD *)a2 + 5) + v7;
    v12 = (char *)(v8 + 8 * (v11 >> 4));
    v13 = *(_QWORD *)v12 + 408 * (v11 & 0xF);
  }
  if ((void *)v13 == v10)
  {
    v14 = 0;
    v384 = (_QWORD *)(a1 + 2008);
LABEL_10:
    v20 = *(_QWORD *)(a1 + 1976);
    v21 = (_QWORD *)(v20 + 8 * (*(_QWORD *)(a1 + 2000) >> 4));
    if (*(_QWORD *)(a1 + 1984) == v20)
      v22 = 0;
    else
      v22 = (void *)(*v21 + 408 * (*(_QWORD *)(a1 + 2000) & 0xFLL));
    __p[0] = v9;
    __p[1] = v10;
    std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>::operator+=[abi:ne180100]((uint64_t **)__p, v14);
    v23 = (uint64_t *)__p[0];
    v24 = __p[1];
    __p[0] = v21;
    __p[1] = v22;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>,std::__deque_iterator<SipUri,SipUri*,SipUri&,SipUri**,long,16l>>>(v9, (uint64_t)v10, v23, (uint64_t)v24, (uint64_t)__p);
    v25 = *(_QWORD *)(a1 + 2008);
    v26 = *(_QWORD *)(a1 + 2000);
    v27 = *(_QWORD *)(a1 + 1976);
    v28 = (char *)(v27 + 8 * ((v26 + v25) >> 4));
    v29 = *(_QWORD *)(a1 + 1984);
    if (v29 == v27)
      v30 = 0;
    else
      v30 = (void (***)(_QWORD))(*(_QWORD *)v28 + 408 * (((_BYTE)v26 + (_BYTE)v25) & 0xF));
    if (v30 != __p[1])
    {
      v31 = ((uint64_t)__p[1] - *(_QWORD *)__p[0]) >> 3;
      v32 = 0xFAFAFAFAFAFAFAFBLL * (((uint64_t)v30 - *(_QWORD *)v28) >> 3)
          + 2 * (v28 - (char *)__p[0])
          + 0x505050505050505 * v31;
      if (v32 >= 1)
      {
        v33 = (_QWORD *)(v27 + 8 * (v26 >> 4));
        if (v29 == v27)
          v34 = 0;
        else
          v34 = (void *)(*v33 + 408 * (*(_QWORD *)(a1 + 2000) & 0xFLL));
        if (__p[1] == v34)
          v55 = 0;
        else
          v55 = 0xFAFAFAFAFAFAFAFBLL * v31
              + 2 * ((char *)__p[0] - (char *)v33)
              + 0x505050505050505 * (((uint64_t)v34 - *v33) >> 3);
        __p[0] = (void *)(v27 + 8 * (v26 >> 4));
        __p[1] = v34;
        std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>::operator+=[abi:ne180100]((uint64_t **)__p, v55);
        v56 = (void (***)(_QWORD))__p[1];
        if (__p[1] != v30)
        {
          v57 = __p[0];
          do
          {
            (**v56)(v56);
            v56 += 51;
            if ((void (***)(_QWORD))((char *)v56 - *v57) == (void (***)(_QWORD))6528)
            {
              v58 = (void (***)(_QWORD))v57[1];
              ++v57;
              v56 = v58;
            }
          }
          while (v56 != v30);
          v25 = *(_QWORD *)(a1 + 2008);
          v29 = *(_QWORD *)(a1 + 1984);
          v27 = *(_QWORD *)(a1 + 1976);
          v26 = *(_QWORD *)(a1 + 2000);
        }
        v59 = 2 * (v29 - v27) - 1;
        if (v29 == v27)
          v59 = 0;
        *v384 = v25 - v32;
        if (v59 - (v25 - v32 + v26) >= 0x20)
        {
          do
          {
            operator delete(*(void **)(v29 - 8));
            v29 = *(_QWORD *)(a1 + 1984) - 8;
            v60 = *(_QWORD *)(a1 + 1976);
            *(_QWORD *)(a1 + 1984) = v29;
            if (v29 == v60)
              v61 = 0;
            else
              v61 = 2 * (v29 - v60) - 1;
          }
          while ((unint64_t)(v61 - (*(_QWORD *)(a1 + 2008) + *(_QWORD *)(a1 + 2000))) > 0x1F);
        }
      }
    }
    goto LABEL_156;
  }
  v14 = 0xFAFAFAFAFAFAFAFBLL * ((v13 - *(_QWORD *)v12) >> 3)
      + 2 * (v12 - (char *)v9)
      + 0x505050505050505 * (((uint64_t)v10 - *v9) >> 3);
  v15 = *(_QWORD *)(a1 + 2008);
  v384 = (_QWORD *)(a1 + 2008);
  if (v15 >= v14)
    goto LABEL_10;
  __p[0] = v9;
  __p[1] = v10;
  std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>::operator+=[abi:ne180100]((uint64_t **)__p, v15);
  v16 = (uint64_t *)__p[0];
  v17 = (const SipUri *)__p[1];
  v18 = *(_QWORD *)(a1 + 1976);
  if (*(_QWORD *)(a1 + 1984) == v18)
    v19 = 0;
  else
    v19 = (void *)(*(_QWORD *)(v18 + 8 * (*(_QWORD *)(a1 + 2000) >> 4)) + 408 * (*(_QWORD *)(a1 + 2000) & 0xFLL));
  __p[0] = (void *)(v18 + 8 * (*(_QWORD *)(a1 + 2000) >> 4));
  __p[1] = v19;
  std::__for_each_segment[abi:ne180100]<std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>,std::__deque_iterator<SipUri,SipUri*,SipUri&,SipUri**,long,16l>>>(v9, (uint64_t)v10, v16, (uint64_t)v17, (uint64_t)__p);
  v35 = *(char **)(a1 + 1984);
  v36 = *(char **)(a1 + 1976);
  v37 = v35 - v36;
  v38 = *(_QWORD *)(a1 + 2008);
  if (v35 == v36)
    v39 = 0;
  else
    v39 = 2 * (v35 - v36) - 1;
  v40 = *(_QWORD *)(a1 + 2000);
  v41 = v40 + v38;
  v42 = v39 - (v40 + v38);
  v377 = v14 - v38;
  v43 = v14 - v38 >= v42;
  v44 = v14 - v38 - v42;
  if (v44 != 0 && v43)
  {
    if (v35 == v36)
      v45 = v44 + 1;
    else
      v45 = v44;
    if ((v45 & 0xF) != 0)
      v46 = (v45 >> 4) + 1;
    else
      v46 = v45 >> 4;
    if (v46 >= v40 >> 4)
      v47 = v40 >> 4;
    else
      v47 = v46;
    if (v46 <= v40 >> 4)
    {
      for (*(_QWORD *)(a1 + 2000) = v40 - 16 * v47; v47; --v47)
      {
        v62 = *(_QWORD **)(a1 + 1976);
        v65 = *v62;
        v63 = (char *)(v62 + 1);
        v64 = v65;
        *(_QWORD *)(a1 + 1976) = v63;
        if (v35 == *(char **)(a1 + 1992))
        {
          v66 = (uint64_t)&v63[-*v6];
          if ((unint64_t)v63 <= *v6)
          {
            if (v35 == (char *)*v6)
              v74 = 1;
            else
              v74 = (uint64_t)&v35[-*v6] >> 2;
            v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(a1 + 1992, v74);
            v77 = &v75[8 * (v74 >> 2)];
            v78 = *(uint64_t **)(a1 + 1976);
            v35 = v77;
            v79 = *(_QWORD *)(a1 + 1984) - (_QWORD)v78;
            if (v79)
            {
              v35 = &v77[v79 & 0xFFFFFFFFFFFFFFF8];
              v80 = 8 * (v79 >> 3);
              v81 = &v75[8 * (v74 >> 2)];
              do
              {
                v82 = *v78++;
                *(_QWORD *)v81 = v82;
                v81 += 8;
                v80 -= 8;
              }
              while (v80);
            }
            v83 = *(void **)(a1 + 1968);
            *(_QWORD *)(a1 + 1968) = v75;
            *(_QWORD *)(a1 + 1976) = v77;
            *(_QWORD *)(a1 + 1984) = v35;
            *(_QWORD *)(a1 + 1992) = &v75[8 * v76];
            if (v83)
            {
              operator delete(v83);
              v35 = *(char **)(a1 + 1984);
            }
          }
          else
          {
            v67 = v66 >> 3;
            v68 = v66 >> 3 < -1;
            v69 = (v66 >> 3) + 2;
            if (v68)
              v70 = v69;
            else
              v70 = v67 + 1;
            v71 = &v63[-8 * (v70 >> 1)];
            v72 = v35 - v63;
            if (v35 != v63)
            {
              memmove(&v63[-8 * (v70 >> 1)], v63, v35 - v63);
              v35 = *(char **)(a1 + 1976);
            }
            v73 = &v35[-8 * (v70 >> 1)];
            v35 = &v71[v72];
            *(_QWORD *)(a1 + 1984) = &v71[v72];
            *(_QWORD *)(a1 + 1976) = v73;
          }
        }
        *(_QWORD *)v35 = v64;
        v35 = (char *)(*(_QWORD *)(a1 + 1984) + 8);
        *(_QWORD *)(a1 + 1984) = v35;
      }
    }
    else
    {
      v48 = v46 - v47;
      v49 = a1 + 1992;
      v50 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 1968);
      if (v46 - v47 <= (v50 >> 3) - (v37 >> 3))
      {
        if (v48)
        {
          while (*(_QWORD *)(a1 + 1992) != *(_QWORD *)(a1 + 1984))
          {
            __p[0] = operator new(0x1980uLL);
            std::__split_buffer<SipUri *>::push_back(v6, __p);
            --v46;
            if (!--v48)
            {
              v35 = *(char **)(a1 + 1984);
              goto LABEL_119;
            }
          }
          for (i = 0; i != v48; ++i)
          {
            __p[0] = operator new(0x1980uLL);
            std::__split_buffer<SipUri *>::push_front((uint64_t)v6, __p);
            v35 = *(char **)(a1 + 1984);
            if (&v35[-*(_QWORD *)(a1 + 1976)] == (char *)8)
              v109 = 15;
            else
              v109 = 16;
            v110 = v109 + *(_QWORD *)(a1 + 2000);
            *(_QWORD *)(a1 + 2000) = v110;
          }
          v47 = v46;
        }
        else
        {
LABEL_119:
          v110 = *(_QWORD *)(a1 + 2000);
        }
        for (*(_QWORD *)(a1 + 2000) = v110 - 16 * v47; v47; --v47)
        {
          v111 = *(_QWORD **)(a1 + 1976);
          v114 = *v111;
          v112 = (char *)(v111 + 1);
          v113 = v114;
          *(_QWORD *)(a1 + 1976) = v112;
          if (v35 == *(char **)(a1 + 1992))
          {
            v115 = (uint64_t)&v112[-*v6];
            if ((unint64_t)v112 <= *v6)
            {
              if (v35 == (char *)*v6)
                v123 = 1;
              else
                v123 = (uint64_t)&v35[-*v6] >> 2;
              v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v49, v123);
              v126 = &v124[8 * (v123 >> 2)];
              v127 = *(uint64_t **)(a1 + 1976);
              v35 = v126;
              v128 = *(_QWORD *)(a1 + 1984) - (_QWORD)v127;
              if (v128)
              {
                v35 = &v126[v128 & 0xFFFFFFFFFFFFFFF8];
                v129 = 8 * (v128 >> 3);
                v130 = &v124[8 * (v123 >> 2)];
                do
                {
                  v131 = *v127++;
                  *(_QWORD *)v130 = v131;
                  v130 += 8;
                  v129 -= 8;
                }
                while (v129);
              }
              v132 = *(void **)(a1 + 1968);
              *(_QWORD *)(a1 + 1968) = v124;
              *(_QWORD *)(a1 + 1976) = v126;
              *(_QWORD *)(a1 + 1984) = v35;
              *(_QWORD *)(a1 + 1992) = &v124[8 * v125];
              if (v132)
              {
                operator delete(v132);
                v35 = *(char **)(a1 + 1984);
              }
            }
            else
            {
              v116 = v49;
              v117 = v115 >> 3;
              v68 = v115 >> 3 < -1;
              v118 = (v115 >> 3) + 2;
              if (v68)
                v119 = v118;
              else
                v119 = v117 + 1;
              v120 = &v112[-8 * (v119 >> 1)];
              v121 = v35 - v112;
              if (v35 != v112)
              {
                memmove(&v112[-8 * (v119 >> 1)], v112, v35 - v112);
                v35 = *(char **)(a1 + 1976);
              }
              v122 = &v35[-8 * (v119 >> 1)];
              v35 = &v120[v121];
              *(_QWORD *)(a1 + 1984) = &v120[v121];
              *(_QWORD *)(a1 + 1976) = v122;
              v49 = v116;
            }
          }
          *(_QWORD *)v35 = v113;
          v35 = (char *)(*(_QWORD *)(a1 + 1984) + 8);
          *(_QWORD *)(a1 + 1984) = v35;
        }
      }
      else
      {
        v51 = v37 >> 3;
        v52 = v50 >> 2;
        if (v52 <= v48 + (v37 >> 3))
          v53 = v48 + (v37 >> 3);
        else
          v53 = v52;
        *(_QWORD *)&v390[16] = a1 + 1992;
        if (v53)
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(a1 + 1992, v53);
        else
          v54 = 0;
        v84 = 16 * v47;
        __p[0] = v54;
        __p[1] = &v54[8 * (v51 - v47)];
        *(void **)v390 = __p[1];
        *(_QWORD *)&v390[8] = &v54[8 * v53];
        do
        {
          v398.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1980uLL);
          std::__split_buffer<SipUri *>::push_back(__p, &v398);
          --v48;
        }
        while (v48);
        if (v47)
        {
          v85 = *(_QWORD **)(a1 + 1976);
          v86 = *(char **)v390;
          do
          {
            if (v86 == *(char **)&v390[8])
            {
              v87 = (char *)__p[1] - (char *)__p[0];
              if (__p[1] <= __p[0])
              {
                if (v86 == __p[0])
                  v94 = 1;
                else
                  v94 = (v86 - (char *)__p[0]) >> 2;
                v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(*(uint64_t *)&v390[16], v94);
                v97 = (uint64_t *)__p[1];
                v86 = &v95[8 * (v94 >> 2)];
                v98 = *(_QWORD *)v390 - (unint64_t)__p[1];
                if (*(void **)v390 != __p[1])
                {
                  v86 = &v95[8 * (v94 >> 2) + (v98 & 0xFFFFFFFFFFFFFFF8)];
                  v99 = 8 * (v98 >> 3);
                  v100 = &v95[8 * (v94 >> 2)];
                  do
                  {
                    v101 = *v97++;
                    *(_QWORD *)v100 = v101;
                    v100 += 8;
                    v99 -= 8;
                  }
                  while (v99);
                }
                v102 = __p[0];
                __p[0] = v95;
                __p[1] = &v95[8 * (v94 >> 2)];
                *(_QWORD *)v390 = v86;
                *(_QWORD *)&v390[8] = &v95[8 * v96];
                if (v102)
                {
                  operator delete(v102);
                  v86 = *(char **)v390;
                }
              }
              else
              {
                v88 = v87 >> 3;
                v68 = v87 >> 3 < -1;
                v89 = (v87 >> 3) + 2;
                if (v68)
                  v90 = v89;
                else
                  v90 = v88 + 1;
                v91 = (char *)__p[1] - 8 * (v90 >> 1);
                v92 = v86 - (char *)__p[1];
                if (v86 != __p[1])
                {
                  memmove((char *)__p[1] - 8 * (v90 >> 1), __p[1], v86 - (char *)__p[1]);
                  v86 = (char *)__p[1];
                }
                v93 = &v86[-8 * (v90 >> 1)];
                v86 = &v91[v92];
                __p[1] = v93;
                *(_QWORD *)v390 = &v91[v92];
              }
            }
            *(_QWORD *)v86 = *v85;
            v86 = (char *)(*(_QWORD *)v390 + 8);
            *(_QWORD *)v390 += 8;
            v85 = (_QWORD *)(*(_QWORD *)(a1 + 1976) + 8);
            *(_QWORD *)(a1 + 1976) = v85;
            --v47;
          }
          while (v47);
        }
        v103 = *(_QWORD **)(a1 + 1984);
        v104 = -7 - (_QWORD)v103;
        while (v103 != *(_QWORD **)(a1 + 1976))
        {
          --v103;
          v104 += 8;
          std::__split_buffer<SipUri *>::push_front((uint64_t)__p, v103);
        }
        v105 = *(void **)(a1 + 1968);
        v106 = *(_OWORD *)v390;
        *(_OWORD *)(a1 + 1968) = *(_OWORD *)__p;
        __p[0] = v105;
        __p[1] = v103;
        v107 = *(_OWORD *)(a1 + 1984);
        *(_OWORD *)(a1 + 1984) = v106;
        *(_OWORD *)v390 = v107;
        *(_QWORD *)(a1 + 2000) -= v84;
        if (v103 != (_QWORD *)v107)
          *(_QWORD *)v390 = v107 + (-(v107 + v104) & 0xFFFFFFFFFFFFFFF8);
        if (v105)
        {
          operator delete(v105);
          v35 = *(char **)(a1 + 1984);
        }
        else
        {
          v35 = (char *)v106;
        }
      }
    }
    v38 = *(_QWORD *)(a1 + 2008);
    v36 = *(char **)(a1 + 1976);
    v41 = *(_QWORD *)(a1 + 2000) + v38;
  }
  v133 = &v36[8 * (v41 >> 4)];
  if (v35 == v36)
    v134 = 0;
  else
    v134 = (char *)(*(_QWORD *)v133 + 408 * (v41 & 0xF));
  __p[0] = &v36[8 * (v41 >> 4)];
  __p[1] = v134;
  std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>::operator+=[abi:ne180100]((uint64_t **)__p, v377);
  v135 = (char *)__p[1];
  if (v134 != __p[1])
  {
    v136 = (char *)__p[0];
    do
    {
      if (v133 == v136)
        v137 = (uint64_t)v135;
      else
        v137 = *(_QWORD *)v133 + 6528;
      if (v134 == (char *)v137)
      {
        v137 = (uint64_t)v134;
        v140 = v384;
      }
      else
      {
        v138 = 0;
        do
        {
          SipUri::SipUri((SipUri *)&v134[v138], v17);
          v17 = (const SipUri *)((char *)v17 + 408);
          if ((const SipUri *)((char *)v17 - *v16) == (const SipUri *)6528)
          {
            v139 = (const SipUri *)v16[1];
            ++v16;
            v17 = v139;
          }
          v138 += 408;
        }
        while (&v134[v138] != (char *)v137);
        v140 = v384;
        v38 = *v384;
      }
      v38 -= 0x505050505050505 * ((v137 - (uint64_t)v134) >> 3);
      *v140 = v38;
      if (v133 == v136)
        break;
      v141 = (char *)*((_QWORD *)v133 + 1);
      v133 += 8;
      v134 = v141;
    }
    while (v141 != v135);
  }
LABEL_156:
  SipTransportLayer::localClientAddress((SipTransportLayer *)__p, (_QWORD *)a1);
  v143 = __p[0];
  v142 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_160;
  v144 = (unint64_t *)((char *)__p[1] + 8);
  do
    v145 = __ldaxr(v144);
  while (__stlxr(v145 - 1, v144));
  if (v145)
  {
LABEL_160:
    if (v143)
      goto LABEL_161;
LABEL_164:
    v148 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, v148);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v148 + 8), (uint64_t)"no existing usable transport", 28);
    *(_BYTE *)(v148 + 17) = 0;
    v149 = (_BYTE *)(v148 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v148 + 64))(v148, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_189:
    *v149 = 0;
    goto LABEL_190;
  }
  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
  std::__shared_weak_count::__release_weak(v142);
  if (!v143)
    goto LABEL_164;
LABEL_161:
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)v390 = 0;
  v146 = *(_QWORD *)(a1 + 1064);
  if (v146)
  {
    v147 = (const std::string *)(v146 + 32);
LABEL_169:
    std::string::operator=((std::string *)__p, v147);
    goto LABEL_170;
  }
  v150 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v151 = *(unsigned __int8 *)(v150 + 23);
  if ((v151 & 0x80u) != 0)
    v151 = *(_QWORD *)(v150 + 8);
  if (v151)
  {
    v147 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    goto LABEL_169;
  }
LABEL_170:
  v152 = (void *)v390[7];
  if (v390[7] < 0)
    v152 = __p[1];
  if (!v152)
  {
    v165 = 0;
    if ((v390[7] & 0x80) == 0)
      goto LABEL_229;
LABEL_187:
    operator delete(__p[0]);
    if (v165)
      goto LABEL_230;
    goto LABEL_188;
  }
  v153 = *(std::__shared_weak_count **)(a1 + 16);
  if (v153)
  {
    v154 = std::__shared_weak_count::lock(v153);
    v398.__r_.__value_.__l.__size_ = (std::string::size_type)v154;
    if (v154)
    {
      v155 = *(_QWORD *)(a1 + 8);
      v398.__r_.__value_.__r.__words[0] = v155;
      if (v155)
      {
        v156 = *(_QWORD *)(v155 + 136);
        v157 = *(void **)(v156 + 768);
        v158 = *(std::__shared_weak_count **)(v156 + 776);
        v395 = v157;
        v396 = v158;
        if (v158)
        {
          p_shared_owners = (unint64_t *)&v158->__shared_owners_;
          do
            v160 = __ldxr(p_shared_owners);
          while (__stxr(v160 + 1, p_shared_owners));
        }
        v161 = (NetworkInterface *)(*(uint64_t (**)(void *, void **))(*(_QWORD *)v157 + 64))(v157, __p);
        SipTransportLayer::setInterface((SipTransportLayer *)a1, v161);
        if (v158)
        {
          v162 = (unint64_t *)&v158->__shared_owners_;
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
            std::__shared_weak_count::__release_weak(v158);
          }
        }
        size = (std::__shared_weak_count *)v398.__r_.__value_.__l.__size_;
        if (!v398.__r_.__value_.__l.__size_)
          goto LABEL_228;
      }
      else
      {
        size = v154;
      }
      v197 = (unint64_t *)&size->__shared_owners_;
      do
        v198 = __ldaxr(v197);
      while (__stlxr(v198 - 1, v197));
      if (!v198)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
LABEL_228:
  v165 = *(_QWORD *)(a1 + 1064) != 0;
  if ((v390[7] & 0x80) != 0)
    goto LABEL_187;
LABEL_229:
  if (!v165)
  {
LABEL_188:
    v166 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, v166);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v166 + 8), (uint64_t)"no existing network interface", 29);
    *(_BYTE *)(v166 + 17) = 0;
    v149 = (_BYTE *)(v166 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v166 + 64))(v166, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_189;
  }
LABEL_230:
  v199 = *(_QWORD *)(a1 + 1064);
  SipTransportLayer::localClientAddress((SipTransportLayer *)__p, (_QWORD *)a1);
  v200 = *(_QWORD *)(v199 + 8);
  v201 = *(_QWORD *)(v199 + 16);
  if (v200 == v201)
  {
    v206 = 0;
    v204 = a3;
    v203 = v380;
  }
  else
  {
    v202 = v200 + 16;
    v204 = a3;
    v203 = v380;
    do
    {
      v205 = (*(uint64_t (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(v202 - 16) + 104))(*(_QWORD *)(v202 - 16), __p, 0);
      v206 = v205;
      if (v202 == v201)
        v207 = 1;
      else
        v207 = v205;
      v202 += 16;
    }
    while (v207 != 1);
  }
  v208 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_242;
  v209 = (unint64_t *)((char *)__p[1] + 8);
  do
    v210 = __ldaxr(v209);
  while (__stlxr(v210 - 1, v209));
  if (v210)
  {
LABEL_242:
    if ((v206 & 1) != 0)
      goto LABEL_243;
LABEL_309:
    v251 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, v251);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v251 + 8), (uint64_t)"interface ", 10);
    *(_BYTE *)(v251 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v251 + 32))(v251, *(_QWORD *)(a1 + 1064) + 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v251 + 8), (uint64_t)" no longer contains address ", 28);
    *(_BYTE *)(v251 + 17) = 0;
    SipTransportLayer::localClientAddress((SipTransportLayer *)&v398, (_QWORD *)a1);
    IpAddress::asString((IpAddress *)v398.__r_.__value_.__l.__data_, 0, __p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v251 + 32))(v251, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v251 + 64))(v251, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v251 + 17) = 0;
    if ((v390[7] & 0x80000000) != 0)
      operator delete(__p[0]);
    v252 = (std::__shared_weak_count *)v398.__r_.__value_.__l.__size_;
    if (v398.__r_.__value_.__l.__size_)
    {
      v253 = (unint64_t *)(v398.__r_.__value_.__l.__size_ + 8);
      do
        v254 = __ldaxr(v253);
      while (__stlxr(v254 - 1, v253));
      if (!v254)
      {
        ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
        std::__shared_weak_count::__release_weak(v252);
      }
    }
    goto LABEL_190;
  }
  ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
  std::__shared_weak_count::__release_weak(v208);
  if ((v206 & 1) == 0)
    goto LABEL_309;
LABEL_243:
  v211 = *((_QWORD *)v203 + 5);
  if (v211 > v204)
  {
    v212 = *((_QWORD *)v203 + 1);
    if (*((_QWORD *)v203 + 2) != v212)
    {
      v213 = *((_QWORD *)v203 + 4);
      v214 = (const SipUri **)(v212 + 8 * (v213 >> 4));
      v215 = *v214;
      v216 = (const SipUri *)((char *)*v214 + 408 * (v213 & 0xF));
      for (j = *(_QWORD *)(v212 + (((v213 + v211) >> 1) & 0x7FFFFFFFFFFFFFF8))
              + 408 * (((_DWORD)v213 + (_DWORD)v211) & 0xF); v216 != (const SipUri *)j; --v204)
      {
        if (!v204)
        {
          if ((SipUri::equals((SipUri *)(a1 + 288), v216, 1) & 1) != 0)
          {
            v285 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a1 + 40);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, v285);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v285 + 8), (uint64_t)"found existing proxy at same offset: ", 37);
            *(_BYTE *)(v285 + 17) = 0;
            (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)v216 + 40))(v216, v285);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v285 + 64))(v285, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v285 + 17) = 0;
            goto LABEL_353;
          }
          v215 = *v214;
        }
        v216 = (const SipUri *)((char *)v216 + 408);
        if (v216 - v215 == 6528)
        {
          v218 = v214[1];
          ++v214;
          v215 = v218;
          v216 = v218;
        }
      }
    }
  }
  v219 = *(_QWORD *)(a1 + 1976);
  if (*(_QWORD *)(a1 + 1984) != v219)
  {
    v220 = *(_QWORD *)(a1 + 2000);
    v221 = (_QWORD *)(v219 + 8 * (v220 >> 4));
    v222 = *v221 + 408 * (v220 & 0xF);
    v223 = *(_QWORD *)(v219 + (((*(_QWORD *)(a1 + 2008) + v220) >> 1) & 0x7FFFFFFFFFFFFFF8))
         + 408 * ((*(_DWORD *)(a1 + 2008) + (_DWORD)v220) & 0xF);
    if (v222 != v223)
    {
      while (1)
      {
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)v390 = 0;
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v222 + 48))(&v398, v222);
        v224 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v398.__r_.__value_.__l.__data_ + 128))(v398.__r_.__value_.__r.__words[0]);
        if (*(char *)(v224 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v224, *(_QWORD *)(v224 + 8));
        }
        else
        {
          v225 = *(_OWORD *)v224;
          *(_QWORD *)v390 = *(_QWORD *)(v224 + 16);
          *(_OWORD *)__p = v225;
        }
        v226 = (std::__shared_weak_count *)v398.__r_.__value_.__l.__size_;
        if (v398.__r_.__value_.__l.__size_)
        {
          v227 = (unint64_t *)(v398.__r_.__value_.__l.__size_ + 8);
          do
            v228 = __ldaxr(v227);
          while (__stlxr(v228 - 1, v227));
          if (!v228)
          {
            ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
            std::__shared_weak_count::__release_weak(v226);
          }
        }
        v229 = (void *)v390[7];
        if (v390[7] < 0)
          v229 = __p[1];
        if (v229)
          break;
        v243 = 0;
        if ((v390[7] & 0x80) != 0)
          goto LABEL_302;
LABEL_303:
        if (v243)
          goto LABEL_190;
        v222 += 408;
        if (v222 - *v221 == 6528)
        {
          v250 = v221[1];
          ++v221;
          v222 = v250;
        }
        if (v222 == v223)
          goto LABEL_353;
      }
      SipTransportLayer::localClientAddress((SipTransportLayer *)&v398, (_QWORD *)a1);
      if (v398.__r_.__value_.__r.__words[0])
      {
        SipTransportLayer::localClientAddress((SipTransportLayer *)&v395, (_QWORD *)a1);
        v230 = (*(uint64_t (**)(void *))(*(_QWORD *)v395 + 128))(v395);
        if (v390[7] >= 0)
          v232 = (void *)v390[7];
        else
          v232 = __p[1];
        v233 = (void *)*(unsigned __int8 *)(v230 + 23);
        v234 = (char)v233;
        if ((char)v233 < 0)
          v233 = *(void **)(v230 + 8);
        if (v232 == v233)
        {
          if (v234 >= 0)
            v231 = (unsigned __int8 *)v230;
          else
            v231 = *(unsigned __int8 **)v230;
          if ((v390[7] & 0x80) != 0)
          {
            v242 = memcmp(__p[0], v231, (size_t)__p[1]) == 0;
          }
          else if (v390[7])
          {
            v235 = v390[7] - 1;
            v236 = __p;
            do
            {
              v238 = *(unsigned __int8 *)v236;
              v236 = (void **)((char *)v236 + 1);
              v237 = v238;
              v240 = *v231++;
              v239 = v240;
              v43 = v235-- != 0;
              v241 = v43;
              v242 = v237 == v239;
            }
            while (v237 == v239 && (v241 & 1) != 0);
          }
          else
          {
            v242 = 1;
          }
        }
        else
        {
          v242 = 0;
        }
        v244 = v396;
        if (v396)
        {
          v245 = (unint64_t *)&v396->__shared_owners_;
          do
            v246 = __ldaxr(v245);
          while (__stlxr(v246 - 1, v245));
          if (!v246)
          {
            ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v244->__on_zero_shared)(v244, v231);
            std::__shared_weak_count::__release_weak(v244);
          }
        }
        v243 = !v242;
      }
      else
      {
        v243 = 0;
      }
      v247 = (std::__shared_weak_count *)v398.__r_.__value_.__l.__size_;
      if (v398.__r_.__value_.__l.__size_)
      {
        v248 = (unint64_t *)(v398.__r_.__value_.__l.__size_ + 8);
        do
          v249 = __ldaxr(v248);
        while (__stlxr(v249 - 1, v248));
        if (!v249)
        {
          ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
          std::__shared_weak_count::__release_weak(v247);
        }
      }
      if ((v390[7] & 0x80) == 0)
        goto LABEL_303;
LABEL_302:
      operator delete(__p[0]);
      goto LABEL_303;
    }
  }
LABEL_353:
  v286 = *(_QWORD *)(a1 + 1976);
  if (*(_QWORD *)(a1 + 1984) == v286)
    goto LABEL_190;
  v287 = *(_QWORD *)(a1 + 2000);
  v288 = (_QWORD *)(v286 + 8 * (v287 >> 4));
  v289 = (_QWORD *)(*v288 + 408 * (v287 & 0xF));
  v386 = *(_QWORD *)(v286 + (((*(_QWORD *)(a1 + 2008) + v287) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 408 * ((*(_DWORD *)(a1 + 2008) + (_DWORD)v287) & 0xF);
  if (v289 == (_QWORD *)v386)
    goto LABEL_190;
  v290 = 0;
  v291 = a1 + 40;
  v380 = (SipUri *)(a1 + 288);
  v292 = std::endl[abi:ne180100]<char,std::char_traits<char>>;
  while (1)
  {
    v293 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v291 + 64))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v291 + 16))(a1 + 40, v293);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v293 + 8), (uint64_t)"trying to match proxy ", 22);
    *(_BYTE *)(v293 + 17) = 0;
    (*(void (**)(_QWORD *, uint64_t))(*v289 + 40))(v289, v293);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v293 + 64))(v293, v292);
    *(_BYTE *)(v293 + 17) = 0;
    if (v289[6])
      break;
    SipHost::resolve((SipHost *)(v289 + 1), 1, (uint64_t)__p);
    v294 = (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)__p[1] + 24))(__p[1], *(unsigned int *)v390);
    ImsResult::~ImsResult((ImsResult *)__p);
    if (!v294)
      break;
    v295 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v291 + 64))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v291 + 16))(a1 + 40, v295);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v295 + 8), (uint64_t)"unable to resolve proxy ", 24);
    *(_BYTE *)(v295 + 17) = 0;
    (*(void (**)(_QWORD *, uint64_t))(*v289 + 40))(v289, v295);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v295 + 64))(v295, v292);
    *(_BYTE *)(v295 + 17) = 0;
LABEL_384:
    v289 += 51;
    if ((_QWORD *)((char *)v289 - *v288) == (_QWORD *)6528)
    {
      v311 = (_QWORD *)v288[1];
      ++v288;
      v289 = v311;
    }
    if (v289 == (_QWORD *)v386)
      goto LABEL_421;
  }
  __p[0] = 0;
  __p[1] = 0;
  v296 = *(std::__shared_weak_count **)(a1 + 16);
  if (v296)
  {
    __p[1] = std::__shared_weak_count::lock(v296);
    if (__p[1])
      __p[0] = *(void **)(a1 + 8);
  }
  (*(void (**)(std::string *__return_ptr, _QWORD *))v289[1])(&v398, v289 + 1);
  v297 = v398.__r_.__value_.__r.__words[0];
  (**(void (***)(void **__return_ptr, uint64_t))(a1 + 296))(&v395, a1 + 296);
  v298 = v292;
  v299 = (*(uint64_t (**)(std::string::size_type, void **, uint64_t))(*(_QWORD *)v297 + 104))(v297, &v395, 1);
  v300 = v396;
  if (v396)
  {
    v301 = (unint64_t *)&v396->__shared_owners_;
    do
      v302 = __ldaxr(v301);
    while (__stlxr(v302 - 1, v301));
    if (!v302)
    {
      ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
      std::__shared_weak_count::__release_weak(v300);
    }
  }
  v303 = (std::__shared_weak_count *)v398.__r_.__value_.__l.__size_;
  if (!v398.__r_.__value_.__l.__size_)
    goto LABEL_371;
  v304 = (unint64_t *)(v398.__r_.__value_.__l.__size_ + 8);
  do
    v305 = __ldaxr(v304);
  while (__stlxr(v305 - 1, v304));
  if (!v305)
  {
    ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
    std::__shared_weak_count::__release_weak(v303);
    if (v299)
      goto LABEL_372;
  }
  else
  {
LABEL_371:
    if (v299)
    {
LABEL_372:
      SipUri::operator=(v380, (uint64_t)v289);
      v292 = v298;
      v306 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v291 + 64))(a1 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v291 + 16))(a1 + 40, v306);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v306 + 8), (uint64_t)"found proxy to use (addresses equal): ", 38);
      *(_BYTE *)(v306 + 17) = 0;
      (*(void (**)(_QWORD *, uint64_t))(*v289 + 40))(v289, v306);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v306 + 64))(v306, v298);
LABEL_376:
      v307 = 0;
      *(_BYTE *)(v306 + 17) = 0;
      goto LABEL_377;
    }
  }
  v292 = v298;
  if (SipTransportLayer::usingNullTransport((std::__shared_weak_count **)a1))
  {
    SipUri::operator=(v380, (uint64_t)v289);
    v306 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v291 + 64))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v291 + 16))(a1 + 40, v306);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v306 + 8), (uint64_t)"found proxy to use (using null transport): ", 43);
    *(_BYTE *)(v306 + 17) = 0;
    (*(void (**)(_QWORD *, uint64_t))(*v289 + 40))(v289, v306);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v306 + 64))(v306, v298);
    goto LABEL_376;
  }
  if (!__p[0])
  {
    v307 = 1;
    goto LABEL_378;
  }
  v312 = *((_QWORD *)__p[0] + 17);
  v313 = *(_QWORD *)(v312 + 768);
  v314 = *(_QWORD *)(v312 + 776);
  v398.__r_.__value_.__r.__words[0] = v313;
  v398.__r_.__value_.__l.__size_ = v314;
  if (v314)
  {
    v315 = (unint64_t *)(v314 + 8);
    do
      v316 = __ldxr(v315);
    while (__stxr(v316 + 1, v315));
  }
  SipTransportLayer::localClientAddress((SipTransportLayer *)&v395, (_QWORD *)a1);
  (*(void (**)(std::string *__return_ptr, _QWORD *))(*v289 + 48))(&v388, v289);
  v317 = (*(uint64_t (**)(std::string::size_type, void **, std::string *))(*(_QWORD *)v313 + 96))(v313, &v395, &v388);
  v318 = (std::__shared_weak_count *)v388.__r_.__value_.__l.__size_;
  if (v388.__r_.__value_.__l.__size_)
  {
    v319 = (unint64_t *)(v388.__r_.__value_.__l.__size_ + 8);
    do
      v320 = __ldaxr(v319);
    while (__stlxr(v320 - 1, v319));
    if (!v320)
    {
      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
      std::__shared_weak_count::__release_weak(v318);
    }
  }
  v321 = v396;
  if (v396)
  {
    v322 = (unint64_t *)&v396->__shared_owners_;
    do
      v323 = __ldaxr(v322);
    while (__stlxr(v323 - 1, v322));
    if (!v323)
    {
      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
      std::__shared_weak_count::__release_weak(v321);
    }
  }
  v324 = (std::__shared_weak_count *)v398.__r_.__value_.__l.__size_;
  if (v398.__r_.__value_.__l.__size_)
  {
    v325 = (unint64_t *)(v398.__r_.__value_.__l.__size_ + 8);
    do
      v326 = __ldaxr(v325);
    while (__stlxr(v326 - 1, v325));
    if (!v326)
    {
      ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
      std::__shared_weak_count::__release_weak(v324);
    }
  }
  if (!v317)
  {
    v307 = 1;
    v292 = v298;
    goto LABEL_378;
  }
  SipUri::operator=(v380, (uint64_t)v289);
  v292 = v298;
  v327 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v291 + 64))(a1 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v291 + 16))(a1 + 40, v327);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v327 + 8), (uint64_t)"found proxy to use (reachable): ", 32);
  *(_BYTE *)(v327 + 17) = 0;
  (*(void (**)(_QWORD *, uint64_t))(*v289 + 40))(v289, v327);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v327 + 64))(v327, v298);
  *(_BYTE *)(v327 + 17) = 0;
  v328 = *(CFTypeRef **)(a1 + 984);
  SipTransportLayer::localClientAddress((SipTransportLayer *)&v398, (_QWORD *)a1);
  SipHost::ipAddress((SipHost *)(a1 + 296), &v395);
  ImsNetworkReachabilityMonitor::startMonitoring(v328, &v398, &v395);
  v329 = v396;
  if (v396)
  {
    v330 = (unint64_t *)&v396->__shared_owners_;
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 - 1, v330));
    if (!v331)
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
  }
  v332 = (std::__shared_weak_count *)v398.__r_.__value_.__l.__size_;
  if (v398.__r_.__value_.__l.__size_)
  {
    v333 = (unint64_t *)(v398.__r_.__value_.__l.__size_ + 8);
    do
      v334 = __ldaxr(v333);
    while (__stlxr(v334 - 1, v333));
    if (!v334)
    {
      ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
      std::__shared_weak_count::__release_weak(v332);
    }
  }
  v307 = 0;
LABEL_377:
  v290 = 1;
LABEL_378:
  v308 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v309 = (unint64_t *)((char *)__p[1] + 8);
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  if (v307)
    goto LABEL_384;
LABEL_421:
  if ((v290 & 1) != 0)
  {
    v335 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, v335);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v335 + 8), (uint64_t)"transport is already initialized", 32);
    *(_BYTE *)(v335 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v335 + 64))(v335, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v335 + 17) = 0;
    *(_OWORD *)&v390[8] = 0u;
    v391 = 0u;
    v392 = 0u;
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    *(_DWORD *)v390 = 0;
    SipTransportLayer::notifyDelegate((SipTransportLayer *)a5, (const ImsResult *)a1, (SipTransportInitDelegate *)__p, a4);
    ImsResult::~ImsResult((ImsResult *)__p);
    return;
  }
LABEL_190:
  v167 = a1 + 40;
  v168 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a1 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, v168);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v168 + 8), (uint64_t)"Desired proxies cannot be reached by the existing transport.  Transport will be initialized.", 92);
  *(_BYTE *)(v168 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v168 + 64))(v168, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v168 + 17) = 0;
  SipTransportLayer::closeTransports((SipTransportLayer *)a1);
  SipTransportLayer::cancelTransportInit((SipTransportLayer *)a1);
  v169 = *(_QWORD *)(a1 + 160);
  v170 = *(std::__shared_weak_count **)(a1 + 168);
  if (v170)
  {
    p_shared_weak_owners = (unint64_t *)&v170->__shared_weak_owners_;
    do
      v172 = __ldxr(p_shared_weak_owners);
    while (__stxr(v172 + 1, p_shared_weak_owners));
    do
      v173 = __ldxr(p_shared_weak_owners);
    while (__stxr(v173 + 1, p_shared_weak_owners));
  }
  if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + 568))
  {
    if (v170)
    {
      v174 = (unint64_t *)&v170->__shared_weak_owners_;
      do
        v175 = __ldxr(v174);
      while (__stxr(v175 + 1, v174));
    }
    v404 = 0;
    v176 = operator new(0x20uLL);
    *v176 = &off_1E78CBB20;
    v176[1] = a1;
    v176[2] = v169;
    v176[3] = v170;
    v404 = v176;
    v177 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    SipTimerContainer::startTimer((_QWORD *)(a1 + 808), (uint64_t)"TransportInitTimeout", (uint64_t)v403, 1000 * *(_DWORD *)(v177 + 568), 0);
    v178 = v404;
    if (v404 == v403)
    {
      v179 = 4;
      v178 = v403;
LABEL_202:
      (*(void (**)(void))(*v178 + 8 * v179))();
    }
    else if (v404)
    {
      v179 = 5;
      goto LABEL_202;
    }
  }
  *(_QWORD *)(a1 + 280) = a4;
  *(_DWORD *)(a1 + 952) = 0;
  memset(&v388, 0, sizeof(v388));
  v180 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*(char *)(v180 + 23) < 0)
    std::string::__init_copy_ctor_external(&v388, *(const std::string::value_type **)v180, *(_QWORD *)(v180 + 8));
  else
    v388 = *(std::string *)v180;
  v181 = HIBYTE(v388.__r_.__value_.__r.__words[2]);
  LOBYTE(v182) = *((_BYTE *)&v388.__r_.__value_.__s + 23);
  v183 = v388.__r_.__value_.__l.__size_;
  if ((v388.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v184 = HIBYTE(v388.__r_.__value_.__r.__words[2]);
  else
    v184 = v388.__r_.__value_.__l.__size_;
  if (v184)
    goto LABEL_446;
  v379 = v170;
  v185 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 64))(a1 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 16))(a1 + 40, v185);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v185 + 8), (uint64_t)"no local interface specified.  I'll pick one.", 45);
  *(_BYTE *)(v185 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v185 + 64))(v185, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v185 + 17) = 0;
  memset(&v398, 0, sizeof(v398));
  v395 = 0;
  v396 = 0;
  v397 = 0;
  v393 = 0;
  v394 = 0;
  v186 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v186)
    goto LABEL_424;
  v394 = std::__shared_weak_count::lock(v186);
  if (!v394)
    goto LABEL_424;
  v187 = *(_QWORD *)(a1 + 8);
  v393 = v187;
  if (!v187)
    goto LABEL_424;
  v188 = *(_QWORD *)(v187 + 136);
  v189 = *(_QWORD *)(v188 + 768);
  v190 = *(std::__shared_weak_count **)(v188 + 776);
  v401 = v189;
  v402 = v190;
  if (v190)
  {
    v191 = (unint64_t *)&v190->__shared_owners_;
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v189 + 56))(__p, v189, &v395);
  v193 = (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)__p[1] + 24))(__p[1], *(unsigned int *)v390);
  ImsResult::~ImsResult((ImsResult *)__p);
  if (v190)
  {
    v194 = (unint64_t *)&v190->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  if (v193)
  {
    v196 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 56))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 16))(a1 + 40, v196);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v196 + 8), (uint64_t)"No network interfaces available", 31);
    *(_BYTE *)(v196 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v196 + 64))(v196, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v196 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v387, "");
    goto LABEL_434;
  }
  v256 = (std::__shared_weak_count *)v395;
  v255 = v396;
  for (k = v396; ; v255 = k)
  {
    if (v256 == v255)
      goto LABEL_424;
    v257 = *(_QWORD *)(a1 + 1976);
    if (*(_QWORD *)(a1 + 1984) != v257)
    {
      v258 = *(_QWORD *)(a1 + 2000);
      v259 = (_QWORD *)(v257 + 8 * (v258 >> 4));
      v260 = *v259 + 408 * (v258 & 0xF);
      v261 = *(_QWORD *)(v257 + (((*(_QWORD *)(a1 + 2008) + v258) >> 1) & 0x7FFFFFFFFFFFFFF8))
           + 408 * ((*(_DWORD *)(a1 + 2008) + (_DWORD)v258) & 0xF);
      if (v260 != v261)
        break;
    }
LABEL_351:
    v256 = (std::__shared_weak_count *)((char *)v256 + 8);
  }
  v385 = v256->__vftable;
  p_on_zero_shared_weak = (const std::string *)&v256->__on_zero_shared_weak;
  while (2)
  {
    __p[0] = 0;
    __p[1] = 0;
    v263 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v263)
      goto LABEL_339;
    __p[1] = std::__shared_weak_count::lock(v263);
    if (!__p[1])
      goto LABEL_339;
    v264 = *(_QWORD **)(a1 + 8);
    __p[0] = v264;
    if (!v264)
      goto LABEL_339;
    v265 = v264[17];
    v266 = *(_QWORD *)(v265 + 768);
    v267 = *(std::__shared_weak_count **)(v265 + 776);
    v401 = v266;
    v402 = v267;
    if (v267)
    {
      v268 = (unint64_t *)&v267->__shared_owners_;
      do
        v269 = __ldxr(v268);
      while (__stxr(v269 + 1, v268));
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v260 + 48))(&v399, v260);
    v270 = (*(uint64_t (**)(uint64_t, std::__shared_weak_count_vtbl *, uint64_t *))(*(_QWORD *)v266 + 88))(v266, v385, &v399);
    v271 = v400;
    if (v400)
    {
      v272 = (unint64_t *)&v400->__shared_owners_;
      do
        v273 = __ldaxr(v272);
      while (__stlxr(v273 - 1, v272));
      if (!v273)
      {
        ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
        std::__shared_weak_count::__release_weak(v271);
      }
    }
    v274 = v402;
    if (!v402)
      goto LABEL_336;
    v275 = (unint64_t *)&v402->__shared_owners_;
    do
      v276 = __ldaxr(v275);
    while (__stlxr(v276 - 1, v275));
    if (!v276)
    {
      ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
      std::__shared_weak_count::__release_weak(v274);
      if (!v270)
        goto LABEL_339;
LABEL_337:
      v277 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 64))(a1 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 16))(a1 + 40, v277);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v277 + 8), (uint64_t)"proxy ", 6);
      *(_BYTE *)(v277 + 17) = 0;
      v278 = (_BYTE *)(v277 + 17);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v260 + 40))(v260, v277);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v277 + 8), (uint64_t)" is reachable via interface ", 28);
      *(_BYTE *)(v277 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v277 + 32))(v277, p_on_zero_shared_weak);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v277 + 64))(v277, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v279 = 1;
      v380 = (SipUri *)v260;
    }
    else
    {
LABEL_336:
      if (v270)
        goto LABEL_337;
LABEL_339:
      v280 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 64))(a1 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 16))(a1 + 40, v280);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v280 + 8), (uint64_t)"can't reach ", 12);
      *(_BYTE *)(v280 + 17) = 0;
      v278 = (_BYTE *)(v280 + 17);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v260 + 40))(v260, v280);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v280 + 8), (uint64_t)" via interface ", 15);
      *(_BYTE *)(v280 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v280 + 32))(v280, p_on_zero_shared_weak);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v280 + 64))(v280, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v279 = 0;
    }
    *v278 = 0;
    v281 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v282 = (unint64_t *)((char *)__p[1] + 8);
      do
        v283 = __ldaxr(v282);
      while (__stlxr(v283 - 1, v282));
      if (!v283)
      {
        ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
        std::__shared_weak_count::__release_weak(v281);
      }
    }
    if ((v279 & 1) == 0)
    {
      v260 += 408;
      if (v260 - *v259 == 6528)
      {
        v284 = v259[1];
        ++v259;
        v260 = v284;
      }
      if (v260 == v261)
        goto LABEL_351;
      continue;
    }
    break;
  }
  if (!v380)
    goto LABEL_351;
  std::string::operator=(&v398, p_on_zero_shared_weak);
  SipUri::operator=((SipUri *)(a1 + 288), (uint64_t)v380);
LABEL_424:
  v336 = (std::__shared_weak_count *)v395;
  v337 = v396;
  while (v336 != v337)
  {
    if (v336->__vftable)
      (*((void (**)(std::__shared_weak_count_vtbl *))v336->~__shared_weak_count + 1))(v336->__vftable);
    v336 = (std::__shared_weak_count *)((char *)v336 + 8);
  }
  v338 = HIBYTE(v398.__r_.__value_.__r.__words[2]);
  if ((v398.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v338 = v398.__r_.__value_.__l.__size_;
  v170 = v379;
  if (!v338)
  {
    v339 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 56))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 16))(a1 + 40, v339);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v339 + 8), (uint64_t)"can't find a suitable local address for proxies in list", 55);
    *(_BYTE *)(v339 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v339 + 64))(v339, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v339 + 17) = 0;
  }
  v387 = v398;
  memset(&v398, 0, sizeof(v398));
LABEL_434:
  v340 = v394;
  if (v394)
  {
    v341 = (unint64_t *)&v394->__shared_owners_;
    do
      v342 = __ldaxr(v341);
    while (__stlxr(v342 - 1, v341));
    if (!v342)
    {
      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
      std::__shared_weak_count::__release_weak(v340);
    }
  }
  if (v395)
  {
    v396 = (std::__shared_weak_count *)v395;
    operator delete(v395);
  }
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v398.__r_.__value_.__l.__data_);
  if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v388.__r_.__value_.__l.__data_);
  v388 = v387;
  v181 = HIBYTE(v387.__r_.__value_.__r.__words[2]);
  v183 = v387.__r_.__value_.__l.__size_;
  v182 = HIBYTE(v387.__r_.__value_.__r.__words[2]);
LABEL_446:
  if ((v182 & 0x80u) != 0)
    v181 = v183;
  if (v181)
  {
    v343 = *(std::__shared_weak_count **)(a1 + 16);
    if (v343)
    {
      v344 = std::__shared_weak_count::lock(v343);
      v398.__r_.__value_.__l.__size_ = (std::string::size_type)v344;
      if (v344)
      {
        v345 = *(_QWORD *)(a1 + 8);
        v398.__r_.__value_.__r.__words[0] = v345;
        if (!v345)
        {
          v358 = v344;
          goto LABEL_487;
        }
        SipTransportLayer::setState((SipTransportLayer *)a1, (const SipTransportLayer::State *)&unk_1ED70EC30);
        v346 = *(_QWORD *)(v345 + 136);
        v347 = *(void **)(v346 + 768);
        v348 = *(std::__shared_weak_count **)(v346 + 776);
        __p[0] = v347;
        __p[1] = v348;
        if (v348)
        {
          v349 = (unint64_t *)&v348->__shared_owners_;
          do
            v350 = __ldxr(v349);
          while (__stxr(v350 + 1, v349));
        }
        v351 = (NetworkInterface *)(*(uint64_t (**)(void *, std::string *))(*(_QWORD *)v347 + 64))(v347, &v388);
        SipTransportLayer::setInterface((SipTransportLayer *)a1, v351);
        if (v348)
        {
          v352 = (unint64_t *)&v348->__shared_owners_;
          do
            v353 = __ldaxr(v352);
          while (__stlxr(v353 - 1, v352));
          if (!v353)
          {
            ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
            std::__shared_weak_count::__release_weak(v348);
          }
        }
        v395 = 0;
        v396 = 0;
        if (*(_QWORD *)(a1 + 1064))
        {
          SipTransportLayer::resolveLocalAddressFromProxies((SipTransportLayer *)__p, a1, 1);
          std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v395, (uint64_t *)__p);
          v354 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v355 = (unint64_t *)((char *)__p[1] + 8);
            do
              v356 = __ldaxr(v355);
            while (__stlxr(v356 - 1, v355));
            if (!v356)
            {
              ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
              std::__shared_weak_count::__release_weak(v354);
            }
          }
        }
        else
        {
          v359 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 64))(a1 + 40);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 16))(a1 + 40, v359);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v359 + 8), (uint64_t)"waiting for ", 12);
          *(_BYTE *)(v359 + 17) = 0;
          LoggableString::LoggableString((std::string *)__p, &v388);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v359 + 40))(v359, __p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v359 + 8), (uint64_t)" to come up", 11);
          *(_BYTE *)(v359 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v359 + 64))(v359, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v359 + 17) = 0;
          if ((v390[7] & 0x80000000) != 0)
            operator delete(__p[0]);
        }
        if (v395)
        {
          v360 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 64))(a1 + 40);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 16))(a1 + 40, v360);
          LoggableString::LoggableString((std::string *)__p, &v388);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v360 + 40))(v360, __p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v360 + 8), (uint64_t)" is already up", 14);
          *(_BYTE *)(v360 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v360 + 64))(v360, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v360 + 17) = 0;
          if ((v390[7] & 0x80000000) != 0)
            operator delete(__p[0]);
          SipHost::SipHost((uint64_t)__p, (uint64_t)&v395);
          SipUri::makeSipUri(a1 + 1120);
          SipHost::operator=(a1 + 1128, (uint64_t)__p);
          *(_BYTE *)(a1 + 1440) = 0;
          SipHost::~SipHost(__p);
          SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress((SipTransportLayer *)a1);
        }
        else
        {
          v361 = NetworkInterfaceMonotorManager::_instance;
          if (!NetworkInterfaceMonotorManager::_instance)
          {
            v361 = operator new();
            *(_OWORD *)v361 = 0u;
            *(_OWORD *)(v361 + 16) = 0u;
            *(_DWORD *)(v361 + 32) = 1065353216;
            NetworkInterfaceMonotorManager::_instance = v361;
          }
          if (*(char *)(a1 + 983) < 0)
            v362 = *(_QWORD *)(a1 + 968);
          else
            v362 = *(unsigned __int8 *)(a1 + 983);
          v363 = (void **)(a1 + 960);
          if (!v362)
          {
            v369 = *(_QWORD *)(v398.__r_.__value_.__r.__words[0] + 136);
            v370 = *(_QWORD *)(v369 + 768);
            v371 = *(_QWORD *)(v369 + 776);
            v387.__r_.__value_.__r.__words[0] = v370;
            v387.__r_.__value_.__l.__size_ = v371;
            if (v371)
            {
              v372 = (unint64_t *)(v371 + 8);
              do
                v373 = __ldxr(v372);
              while (__stxr(v373 + 1, v372));
            }
            NetworkInterfaceMonotorManager::createMonitor(v361, a1 + 24, (uint64_t *)&v387, (uint64_t)__p);
            if (*(char *)(a1 + 983) < 0)
              operator delete(*v363);
            *(_OWORD *)v363 = *(_OWORD *)__p;
            *(_QWORD *)(a1 + 976) = *(_QWORD *)v390;
            v390[7] = 0;
            LOBYTE(__p[0]) = 0;
            v374 = (std::__shared_weak_count *)v387.__r_.__value_.__l.__size_;
            if (v387.__r_.__value_.__l.__size_)
            {
              v375 = (unint64_t *)(v387.__r_.__value_.__l.__size_ + 8);
              do
                v376 = __ldaxr(v375);
              while (__stlxr(v376 - 1, v375));
              if (!v376)
              {
                ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                std::__shared_weak_count::__release_weak(v374);
              }
            }
          }
          NetworkInterfaceMonotorManager::startMonitoring((_QWORD *)v361, (unsigned __int8 *)v363, &v388, 3);
        }
        v364 = v396;
        if (v396)
        {
          v365 = (unint64_t *)&v396->__shared_owners_;
          do
            v366 = __ldaxr(v365);
          while (__stlxr(v366 - 1, v365));
          if (!v366)
          {
            ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
            std::__shared_weak_count::__release_weak(v364);
          }
        }
        v358 = (std::__shared_weak_count *)v398.__r_.__value_.__l.__size_;
        if (v398.__r_.__value_.__l.__size_)
        {
LABEL_487:
          v367 = (unint64_t *)&v358->__shared_owners_;
          do
            v368 = __ldaxr(v367);
          while (__stlxr(v368 - 1, v367));
          if (!v368)
          {
            ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
            std::__shared_weak_count::__release_weak(v358);
          }
        }
      }
    }
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_QWORD *)a5 = &off_1E78B7238;
    *(_QWORD *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 0;
  }
  else
  {
    *(_OWORD *)&v390[8] = 0u;
    v391 = 0u;
    v392 = 0u;
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    *(_DWORD *)v390 = 0x40000000;
    v357 = (const ImsResult *)ImsResult::operator<<<char [39]>((uint64_t)__p, "no usable network interfaces available");
    ImsResult::ImsResult((ImsResult *)a5, v357);
    ImsResult::~ImsResult((ImsResult *)__p);
  }
  if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v388.__r_.__value_.__l.__data_);
  if (v170)
  {
    std::__shared_weak_count::__release_weak(v170);
    std::__shared_weak_count::__release_weak(v170);
  }
}

void sub_1BEF8C858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void *__p,uint64_t a39)
{
  uint64_t v39;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  if (*(char *)(v39 - 161) < 0)
    operator delete(*(void **)(v39 - 184));
  if (a24 < 0)
    operator delete(a19);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t SipTransportLayer::usingNullTransport(std::__shared_weak_count **this)
{
  uint64_t shared_weak_owners;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v13;

  v13 = std::__shared_weak_count::lock(this[2]);
  shared_weak_owners = this[1][5].__shared_weak_owners_;
  v3 = *(_QWORD *)(shared_weak_owners + 768);
  v4 = *(std::__shared_weak_count **)(shared_weak_owners + 776);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 136))(v3);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v7;
}

void sub_1BEF8CCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipTransportLayer::notifyDelegate(SipTransportLayer *this, const ImsResult *a2, SipTransportInitDelegate *a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v10;
  uint64_t v11;

  v7 = (char *)a2 + 40;
  v6 = *((_QWORD *)a2 + 5);
  if (a4)
  {
    v10 = (*(uint64_t (**)(char *))(v6 + 64))((char *)a2 + 40);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)a2 + 5) + 16))(v7, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"notifying delegate of transport initialization with result ", 59);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(SipTransportInitDelegate *, uint64_t))(*(_QWORD *)a3 + 16))(a3, v10);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, char *, SipTransportInitDelegate *))(*(_QWORD *)a4 + 16))(a4, (char *)a2 + 288, a3);
  }
  else
  {
    v11 = (*(uint64_t (**)(char *))(v6 + 48))((char *)a2 + 40);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))(v7, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"no delegate to notify of transport initialization", 49);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
  }
  ImsResult::ImsResult(this, a3);
}

void SipTransportLayer::initializeTransportGroup(SipTransportLayer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned __int8 **v54;
  unsigned __int8 *i;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  float v59;
  float v60;
  _BOOL8 v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  IpAddress **v72;
  IpAddress **v73;
  uint64_t v74;
  char v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  int v87;
  int v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t (*v92)(char *);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  IpAddress **v120;
  uint64_t *v121;
  int v122[2];
  unint64_t v123;
  IpAddress **v124;
  _BYTE v125[72];
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void *__p;
  std::__shared_weak_count *v133;
  uint64_t v134;
  std::string v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void (**v138)(ImsResult *__hidden);
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  IpAddress *v149;
  std::__shared_weak_count *v150;
  __int128 v151;
  uint64_t v152;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    return;
  v3 = std::__shared_weak_count::lock(v2);
  v148 = v3;
  if (!v3)
    return;
  v4 = *((_QWORD *)this + 1);
  v147 = v4;
  if (!v4)
  {
    v7 = v3;
    goto LABEL_137;
  }
  SipTransportLayer::setState(this, (const SipTransportLayer::State *)&unk_1ED70EC70);
  v140 = 0;
  v141 = 0;
  v145 = 0;
  v146 = 0;
  v143 = 0;
  v144 = 0;
  v138 = &off_1E78B7238;
  v139 = &_bambiDomain;
  v142 = 0;
  v136 = 0;
  v137 = 0;
  if (*(_BYTE *)((*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 16))(this) + 441)
    && !*((_WORD *)this + 164))
  {
    v5 = (*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 16))(this);
    SipHop::setHostPort((SipTransportLayer *)((char *)this + 288), *(_WORD *)(v5 + 434));
  }
  memset(&v135, 0, sizeof(v135));
  v6 = *((_QWORD *)this + 133);
  if (v6)
  {
    if (*(char *)(v6 + 55) < 0)
      std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)(v6 + 32), *(_QWORD *)(v6 + 40));
    else
      v135 = *(std::string *)(v6 + 32);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v135, "");
  }
  if (*(_BYTE *)(v4 + 2657))
  {
    v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 64))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 5) + 16))((char *)this + 40, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"setting local SIP port to be ephemeral", 38);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v9 = 0;
    *(_BYTE *)(v8 + 17) = 0;
  }
  else
  {
    if (!*(_WORD *)((*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 16))(this) + 432))
      goto LABEL_18;
    v10 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 64))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 5) + 16))((char *)this + 40, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"defaulting local SIP port to ", 29);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(SipTransportLayer *))(*(_QWORD *)this + 16))(this);
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    v9 = *(_WORD *)((*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 16))(this) + 432);
  }
  SipHop::setHostPort((SipTransportLayer *)((char *)this + 1120), v9);
LABEL_18:
  v11 = *(_QWORD *)(v4 + 136);
  v12 = *(_QWORD *)(v11 + 768);
  v13 = *(_QWORD *)(v11 + 776);
  *(_QWORD *)&v151 = v12;
  *((_QWORD *)&v151 + 1) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (!v16 || (v17 = *((_QWORD *)this + 20), (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v130 = v17;
  v131 = v18;
  v149 = 0;
  v150 = 0;
  SipHost::ipAddress((SipTransportLayer *)((char *)this + 1128), &v128);
  (**((void (***)(uint64_t *__return_ptr, char *))this + 37))(&v126, (char *)this + 296);
  v19 = (*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 16))(this);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, std::string *, _QWORD))(*(_QWORD *)v12 + 128))(&__p, v12, &v136, &v130, &v128, &v126, &v135, *(unsigned __int8 *)(v19 + 441));
  ImsResult::operator=((uint64_t)&v138, (uint64_t)&__p);
  ImsResult::~ImsResult((ImsResult *)&__p);
  v20 = v127;
  if (v127)
  {
    p_shared_owners = (unint64_t *)&v127->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v129;
  if (v129)
  {
    v24 = (unint64_t *)&v129->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v131;
  if (v131)
  {
    v27 = (unint64_t *)&v131->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v150;
  if (v150)
  {
    v30 = (unint64_t *)&v150->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  SipUri::operator=((SipTransportLayer *)((char *)this + 1528), (uint64_t)this + 1120);
  v35 = (*(uint64_t (**)(uint64_t *, _QWORD))(*v139 + 24))(v139, v140);
  if (v136)
    v36 = v35;
  else
    v36 = 1;
  v38 = (char *)this + 40;
  v37 = *((_QWORD *)this + 5);
  if ((v36 & 1) == 0)
  {
    v50 = (*(uint64_t (**)(char *))(v37 + 64))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v38 + 16))((char *)this + 40, v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v50 + 8), (uint64_t)"initialized transport ", 22);
    *(_BYTE *)(v50 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v136 + 104))(v136, v50);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v50 + 17) = 0;
    SipTransportLayer::setState(this, (const SipTransportLayer::State *)&SipTransportLayer::State::kStateIdle);
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)this + 124, &v136);
    *((_BYTE *)this + 2017) = 0;
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)this + 130, &v136);
    v51 = *((_QWORD *)this + 130);
    LoggableString::LoggableString((LoggableString *)&__p, "TransportLayer");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v51 + 32))(v51, &__p);
    if (SHIBYTE(v134) < 0)
      operator delete(__p);
    SipTransportLayer::notifyDelegate((SipTransportLayer *)v125, this, (SipTransportInitDelegate *)&v138, *((_QWORD *)this + 35));
    ImsResult::~ImsResult((ImsResult *)v125);
    SipTransportLayer::cancelTransportInit(this);
    goto LABEL_129;
  }
  v39 = (*(uint64_t (**)(char *))(v37 + 56))((char *)this + 40);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v38 + 16))((char *)this + 40, v39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"unable to initialize transport: ", 32);
  *(_BYTE *)(v39 + 17) = 0;
  ((void (*)(void (***)(ImsResult *__hidden), uint64_t))v138[2])(&v138, v39);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v39 + 17) = 0;
  (*(void (**)(SipTransportLayer *, void (***)(ImsResult *__hidden)))(*(_QWORD *)this + 64))(this, &v138);
  if (!v142 || *(_DWORD *)(v142 + 16) != 65 || *(uint64_t **)(v142 + 8) != &_posixDomain || !*(_BYTE *)(v147 + 2657))
    goto LABEL_128;
  v40 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 56))((char *)this + 40);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v38 + 16))((char *)this + 40, v40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"Proxy ", 6);
  *(_BYTE *)(v40 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 36) + 40))((char *)this + 288, v40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)" is unreachable via local interface address ", 44);
  *(_BYTE *)(v40 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 140) + 40))((char *)this + 1120, v40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)".  Trying the next one", 22);
  *(_BYTE *)(v40 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v40 + 17) = 0;
  if (!*((_QWORD *)this + 133) || !SipUri::isValidUri((SipTransportLayer *)((char *)this + 288)))
  {
    v52 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 56))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v38 + 16))((char *)this + 40, v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"Invalid state ", 14);
    *(_BYTE *)(v52 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v52 + 17) = 0;
    v53 = *(_QWORD **)(v52 + 8);
    LOBYTE(__p) = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&__p, 1);
    *(_BYTE *)(v52 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 36) + 40))((char *)this + 288, v52);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v52 + 17) = 0;
    goto LABEL_128;
  }
  SipHost::ipAddress((SipTransportLayer *)((char *)this + 1128), &__p);
  v41 = (*(uint64_t (**)(void *))(*(_QWORD *)__p + 88))(__p);
  v42 = v133;
  if (v133)
  {
    v43 = (unint64_t *)&v133->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v41)
  {
    SipHost::ipAddress((SipTransportLayer *)((char *)this + 1128), &v149);
    IpAddress::asString(v149, 0, &v151);
    v45 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)this + 1104, (uint64_t)&v151);
    v46 = v45;
    v47 = *((_QWORD *)this + 136);
    v121 = (uint64_t *)((char *)this + 1080);
    if (v47)
    {
      v48 = (uint8x8_t)vcnt_s8((int8x8_t)v47);
      v48.i16[0] = vaddlv_u8(v48);
      v123 = v48.u32[0];
      if (v48.u32[0] > 1uLL)
      {
        v49 = v45;
        if (v45 >= v47)
          v49 = v45 % v47;
      }
      else
      {
        v49 = (v47 - 1) & v45;
      }
      v54 = *(unsigned __int8 ***)(*((_QWORD *)this + 135) + 8 * v49);
      if (v54)
      {
        for (i = *v54; i; i = *(unsigned __int8 **)i)
        {
          v56 = *((_QWORD *)i + 1);
          if (v56 == v46)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)this + 1112, i + 16, (unsigned __int8 *)&v151) & 1) != 0)goto LABEL_107;
          }
          else
          {
            if (v123 > 1)
            {
              if (v56 >= v47)
                v56 %= v47;
            }
            else
            {
              v56 &= v47 - 1;
            }
            if (v56 != v49)
              break;
          }
        }
      }
    }
    else
    {
      v49 = 0;
    }
    v134 = 1;
    v57 = operator new(0x28uLL);
    v58 = (_QWORD *)((char *)this + 1096);
    v133 = (std::__shared_weak_count *)((char *)this + 1096);
    *v57 = 0;
    v57[1] = v46;
    *((_OWORD *)v57 + 1) = v151;
    v57[4] = v152;
    v151 = 0uLL;
    v152 = 0;
    v59 = (float)(unint64_t)(*((_QWORD *)this + 138) + 1);
    v60 = *((float *)this + 278);
    if (!v47 || (float)(v60 * (float)v47) < v59)
    {
      v61 = 1;
      if (v47 >= 3)
        v61 = (v47 & (v47 - 1)) != 0;
      v62 = v61 | (2 * v47);
      v63 = vcvtps_u32_f32(v59 / v60);
      if (v62 <= v63)
        v64 = v63;
      else
        v64 = v62;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>((uint64_t)v121, v64);
      v47 = *((_QWORD *)this + 136);
      if ((v47 & (v47 - 1)) != 0)
      {
        if (v46 >= v47)
          v49 = v46 % v47;
        else
          v49 = v46;
      }
      else
      {
        v49 = (v47 - 1) & v46;
      }
    }
    v65 = *v121;
    v66 = *(_QWORD **)(*v121 + 8 * v49);
    if (v66)
    {
      *v57 = *v66;
      v67 = (_QWORD *)((char *)this + 1104);
    }
    else
    {
      *v57 = *v58;
      *v58 = v57;
      *(_QWORD *)(v65 + 8 * v49) = v58;
      v67 = (_QWORD *)((char *)this + 1104);
      if (!*v57)
        goto LABEL_106;
      v68 = *(_QWORD *)(*v57 + 8);
      if ((v47 & (v47 - 1)) != 0)
      {
        if (v68 >= v47)
          v68 %= v47;
      }
      else
      {
        v68 &= v47 - 1;
      }
      v66 = (_QWORD *)(*v121 + 8 * v68);
    }
    *v66 = v57;
LABEL_106:
    ++*v67;
LABEL_107:
    if (SHIBYTE(v152) < 0)
      operator delete((void *)v151);
    v69 = v150;
    if (v150)
    {
      v70 = (unint64_t *)&v150->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
  }
  v151 = 0uLL;
  v152 = 0;
  if (!NetworkInterface::allAddresses(*((unint64_t **)this + 133), (unint64_t *)&v151, 3, 1))
  {
    v79 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 56))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v38 + 16))((char *)this + 40, v79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"Unable to get addresses on current interface", 44);
    *(_BYTE *)(v79 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_126;
  }
  v72 = (IpAddress **)*((_QWORD *)&v151 + 1);
  v73 = (IpAddress **)v151;
  if ((_QWORD)v151 == *((_QWORD *)&v151 + 1))
  {
    v79 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 56))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v38 + 16))((char *)this + 40, v79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"No addresses on ", 16);
    *(_BYTE *)(v79 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 133) + 16))(*((_QWORD *)this + 133), v79);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_126;
  }
  if (*((_QWORD *)&v151 + 1) - (_QWORD)v151 == 16)
  {
    v74 = *(_QWORD *)v151;
    SipHost::ipAddress((SipTransportLayer *)((char *)this + 1128), &__p);
    v75 = (*(uint64_t (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v74 + 104))(v74, &__p, 0);
    v76 = v133;
    if (v133)
    {
      v77 = (unint64_t *)&v133->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if ((v75 & 1) != 0)
    {
      v79 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 56))((char *)this + 40);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v38 + 16))((char *)this + 40, v79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"No other addresses on ", 22);
      *(_BYTE *)(v79 + 17) = 0;
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 133) + 16))(*((_QWORD *)this + 133), v79);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_126:
      *(_BYTE *)(v79 + 17) = 0;
      goto LABEL_127;
    }
    v72 = (IpAddress **)*((_QWORD *)&v151 + 1);
    v73 = (IpAddress **)v151;
  }
  if (v73 == v72)
    goto LABEL_127;
  v120 = v72;
  while (1)
  {
    IpAddress::asString(*v73, 0, &__p);
    v85 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 135, (unsigned __int8 *)&__p);
    if (SHIBYTE(v134) < 0)
      operator delete(__p);
    if (v85)
    {
      v86 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 64))((char *)this + 40);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v38 + 16))((char *)this + 40, v86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v86 + 8), (uint64_t)"Skipping failed address ", 24);
      *(_BYTE *)(v86 + 17) = 0;
      (*(void (**)(IpAddress *, uint64_t))(*(_QWORD *)*v73 + 40))(*v73, v86);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v86 + 64))(v86, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_149;
    }
    SipHost::ipAddress((SipTransportLayer *)((char *)this + 296), &__p);
    v87 = (*(uint64_t (**)(void *))(*(_QWORD *)__p + 136))(__p);
    v88 = (*(uint64_t (**)(IpAddress *))(*(_QWORD *)*v73 + 136))(*v73);
    v89 = v133;
    if (v133)
    {
      v90 = (unint64_t *)&v133->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v92 = *(uint64_t (**)(char *))(*(_QWORD *)v38 + 64);
    if (v87 == v88)
      break;
    v93 = v92((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v38 + 16))((char *)this + 40, v93);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v93 + 8), (uint64_t)"Need to find suitable proxy for new interface address type ", 59);
    *(_BYTE *)(v93 + 17) = 0;
    v94 = (*(uint64_t (**)(IpAddress *))(*(_QWORD *)*v73 + 128))(*v73);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 32))(v93, v94);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v93 + 64))(v93, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v124 = v73;
    *(_BYTE *)(v93 + 17) = 0;
    v95 = *((_QWORD *)this + 247);
    if (*((_QWORD *)this + 248) != v95)
    {
      v96 = *((_QWORD *)this + 250);
      v97 = (_QWORD *)(v95 + 8 * (v96 >> 4));
      v98 = *v97 + 408 * (v96 & 0xF);
      v99 = *(_QWORD *)(v95 + (((*((_QWORD *)this + 251) + v96) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 408 * ((*((_DWORD *)this + 502) + (_DWORD)v96) & 0xF);
      *(_QWORD *)v122 = v99;
      while (v98 != v99)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v98 + 48))(&__p, v98);
        v100 = (*(uint64_t (**)(void *))(*(_QWORD *)__p + 136))(__p);
        v101 = (*(uint64_t (**)(IpAddress *))(*(_QWORD *)*v124 + 136))(*v124);
        v102 = v133;
        if (v133)
        {
          v103 = (unint64_t *)&v133->__shared_owners_;
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
        }
        if (v100 == v101)
        {
          v112 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 64))((char *)this + 40);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v38 + 16))((char *)this + 40, v112);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v112 + 8), (uint64_t)"Found ", 6);
          *(_BYTE *)(v112 + 17) = 0;
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v98 + 48))(&__p, v98);
          v113 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p + 40))(__p, v112);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v113 + 8), (uint64_t)" for interface ", 15);
          *(_BYTE *)(v113 + 17) = 0;
          v114 = (_BYTE *)(*(uint64_t (**)(IpAddress *, uint64_t))(*(_QWORD *)*v124 + 40))(*v124, v113);
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v114 + 64))(v114, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v114[17] = 0;
          v115 = v133;
          if (v133)
          {
            v116 = (unint64_t *)&v133->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
          SipUri::operator=((SipTransportLayer *)((char *)this + 288), v98);
          SipHost::SipHost((uint64_t)&__p, (uint64_t)v124);
          SipUri::makeSipUri((uint64_t)this + 1120);
          SipHost::operator=((uint64_t)this + 1128, (uint64_t)&__p);
          goto LABEL_183;
        }
        v98 += 408;
        if (v98 - *v97 == 6528)
        {
          v105 = v97[1];
          ++v97;
          v98 = v105;
        }
        v99 = *(_QWORD *)v122;
      }
    }
    SipHost::ipAddress((SipTransportLayer *)((char *)this + 296), &__p);
    v73 = v124;
    v106 = (*(uint64_t (**)(void *))(*(_QWORD *)__p + 136))(__p);
    v107 = (*(uint64_t (**)(IpAddress *))(*(_QWORD *)*v124 + 136))(*v124);
    v108 = v133;
    if (v133)
    {
      v109 = (unint64_t *)&v133->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    if (v106 == v107)
      goto LABEL_150;
    v111 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 64))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v38 + 16))((char *)this + 40, v111);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v111 + 8), (uint64_t)"Unable to find proxy for interface address ", 43);
    *(_BYTE *)(v111 + 17) = 0;
    v86 = (*(uint64_t (**)(IpAddress *, uint64_t))(*(_QWORD *)*v124 + 40))(*v124, v111);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v86 + 64))(v86, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_149:
    *(_BYTE *)(v86 + 17) = 0;
LABEL_150:
    v73 += 2;
    if (v73 == v120)
      goto LABEL_127;
  }
  v118 = v92((char *)this + 40);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v38 + 16))((char *)this + 40, v118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v118 + 8), (uint64_t)"Using next interface address ", 29);
  *(_BYTE *)(v118 + 17) = 0;
  v119 = (_BYTE *)(*(uint64_t (**)(IpAddress *, uint64_t))(*(_QWORD *)*v73 + 40))(*v73, v118);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v119 + 64))(v119, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v119[17] = 0;
  SipHost::SipHost((uint64_t)&__p, (uint64_t)v73);
  SipUri::makeSipUri((uint64_t)this + 1120);
  SipHost::operator=((uint64_t)this + 1128, (uint64_t)&__p);
LABEL_183:
  *((_BYTE *)this + 1440) = 0;
  SipHost::~SipHost(&__p);
LABEL_127:
  __p = &v151;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_128:
  SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(this);
LABEL_129:
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  v80 = v137;
  if (v137)
  {
    v81 = (unint64_t *)&v137->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v138);
  v7 = v148;
  if (v148)
  {
LABEL_137:
    v83 = (unint64_t *)&v7->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BEF8E060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  SipHost::~SipHost(&a30);
  a30 = (void *)(v47 - 112);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (a47 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v47 - 232);
  ImsResult::~ImsResult((ImsResult *)(v47 - 216));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v47 - 144);
  _Unwind_Resume(a1);
}

void SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(SipTransportLayer *this)
{
  char *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef *v19;
  unsigned __int8 started;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  SipTransportInitDelegate *v28;
  void (**v29)(ImsResult *__hidden);
  uint64_t *v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[72];
  uint64_t v36;
  std::__shared_weak_count *v37;
  _BYTE v38[72];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _BYTE v44[24];
  _BYTE *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  SipTransportLayer::setState(this, (const SipTransportLayer::State *)&unk_1ED70EC50);
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  SipHost::resolve((SipTransportLayer *)((char *)this + 296), 1, (uint64_t)&v39);
  v2 = (char *)this + 288;
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v39 + 1) + 24))(*((_QWORD *)&v39 + 1), v40))
  {
    v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 56))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 5) + 16))((char *)this + 40, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"unable to resolve proxy ", 24);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 40))((char *)this + 288, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(__int128 *, uint64_t))(v39 + 16))(&v39, v3);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    SipTransportLayer::notifyDelegate((SipTransportLayer *)v38, this, (SipTransportInitDelegate *)&v39, *((_QWORD *)this + 35));
    ImsResult::~ImsResult((ImsResult *)v38);
    SipTransportLayer::cancelTransportInit(this);
    goto LABEL_31;
  }
  v4 = *((_DWORD *)this + 238);
  if ((400 << v4) >= 0xEA60)
    v5 = 60000;
  else
    v5 = 400 << v4;
  *((_DWORD *)this + 238) = v4 + 1;
  v7 = *((_QWORD *)this + 20);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v45 = 0;
  v12 = operator new(0x20uLL);
  *v12 = &off_1E78CBBA0;
  v12[1] = this;
  v12[2] = v7;
  v12[3] = v6;
  v45 = v12;
  SipTimerContainer::startTimer((_QWORD *)this + 101, (uint64_t)&qword_1ED70EC18, (uint64_t)v44, v5, 1);
  v13 = v45;
  if (v45 == v44)
  {
    v14 = 4;
    v13 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_16;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_16:
  v16 = (char *)this + 40;
  v15 = *((_QWORD *)this + 5);
  if (*((_BYTE *)this + 1056))
  {
    v17 = (*(uint64_t (**)(char *))(v15 + 64))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v16 + 16))(v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"proxy is already reachable.  Not monitoring reachability, just throttling next attempt", 86);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    goto LABEL_29;
  }
  v18 = (*(uint64_t (**)(char *))(v15 + 32))((char *)this + 40);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v16 + 16))((char *)this + 40, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"will attempt transport initialization in ", 41);
  *(_BYTE *)(v18 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v18 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"ms", 2);
  *(_BYTE *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v18 + 17) = 0;
  v19 = (CFTypeRef *)*((_QWORD *)this + 123);
  SipHost::ipAddress((SipTransportLayer *)((char *)this + 1128), &v29);
  SipHost::ipAddress((SipTransportLayer *)((char *)this + 296), &v36);
  started = ImsNetworkReachabilityMonitor::startMonitoring(v19, &v29, &v36);
  v21 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)v30;
  if (!v30)
    goto LABEL_27;
  v25 = (unint64_t *)(v30 + 1);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_27:
    if ((started & 1) != 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if ((started & 1) == 0)
  {
LABEL_28:
    v27 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 56))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v16 + 16))((char *)this + 40, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"waitUntilProxyIsReachable: unable to monitor reachability to ", 61);
    *(_BYTE *)(v27 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 40))((char *)this + 288, v27);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v27 + 17) = 0;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v29 = &off_1E78B7238;
    v30 = &_bambiDomain;
    v31 = 0x40000000;
    v28 = (SipTransportInitDelegate *)ImsResult::operator<<<char [31]>((uint64_t)&v29, "unable to monitor reachability");
    SipTransportLayer::notifyDelegate((SipTransportLayer *)v35, this, v28, *((_QWORD *)this + 35));
    ImsResult::~ImsResult((ImsResult *)v35);
    ImsResult::~ImsResult((ImsResult *)&v29);
    SipTransportLayer::cancelTransportInit(this);
  }
LABEL_29:
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_31:
  ImsResult::~ImsResult((ImsResult *)&v39);
}

void sub_1BEF8E6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  ImsResult::~ImsResult((ImsResult *)(v3 - 176));
  _Unwind_Resume(a1);
}

void SipTransportLayer::handleTimer(SipTransportLayer *this, unsigned __int8 *a2)
{
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  const void *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  SipTransportInitDelegate *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void (**v21)(ImsResult *__hidden);
  uint64_t *v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[72];

  v3 = a2[23];
  v4 = *((_QWORD *)a2 + 1);
  if ((v3 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = qword_1ED70EC20;
  if (byte_1ED70EC2F >= 0)
    v6 = byte_1ED70EC2F;
  if (v5 != v6)
    goto LABEL_16;
  if (byte_1ED70EC2F >= 0)
    v7 = &qword_1ED70EC18;
  else
    v7 = (uint64_t *)qword_1ED70EC18;
  if ((v3 & 0x80) != 0)
  {
    v12 = *(const void **)a2;
    if (memcmp(*(const void **)a2, v7, v4))
    {
      if (v4 != 20)
      {
        if (v4 != 21)
          return;
        goto LABEL_36;
      }
      goto LABEL_43;
    }
LABEL_34:
    SipTransportLayer::initializeTransportGroup(this);
    return;
  }
  if (!a2[23])
    goto LABEL_34;
  v8 = a2;
  v9 = a2[23];
  while (*v8 == *(unsigned __int8 *)v7)
  {
    ++v8;
    v7 = (uint64_t *)((char *)v7 + 1);
    if (!--v9)
      goto LABEL_34;
  }
LABEL_16:
  if (v5 != 20)
  {
    if (v5 != 21)
      return;
    if ((v3 & 0x80) == 0)
    {
      if (a2[23])
      {
        v10 = "SystemWakeWaitTimeout";
        while (*a2 == *(unsigned __int8 *)v10)
        {
          ++a2;
          ++v10;
          if (!--v3)
            goto LABEL_37;
        }
        return;
      }
LABEL_37:
      v21 = 0;
      v22 = 0;
      v13 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (v13)
      {
        v14 = std::__shared_weak_count::lock(v13);
        v22 = (uint64_t *)v14;
        if (v14)
        {
          v15 = *((_QWORD *)this + 1);
          v21 = (void (**)(ImsResult *__hidden))v15;
          if (v15)
          {
            if (!*(_BYTE *)(*(_QWORD *)(v15 + 136) + 784))
            {
LABEL_47:
              p_shared_owners = (unint64_t *)&v14->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
              return;
            }
          }
        }
      }
      else
      {
        v14 = 0;
      }
      v17 = *((_QWORD *)this + 5);
      *((_BYTE *)this + 2016) = 1;
      v18 = (*(uint64_t (**)(char *))(v17 + 64))((char *)this + 40);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 5) + 16))((char *)this + 40, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"timed out waiting for system wake event. Processing deferred incoming messages.", 79);
      *(_BYTE *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v18 + 17) = 0;
      SipTransportLayer::processDeferredIncomingMessages(this);
      if (!v14)
        return;
      goto LABEL_47;
    }
    v12 = *(const void **)a2;
LABEL_36:
    if (memcmp(v12, "SystemWakeWaitTimeout", v4))
      return;
    goto LABEL_37;
  }
  if ((v3 & 0x80) != 0)
  {
    v12 = *(const void **)a2;
LABEL_43:
    if (memcmp(v12, "TransportInitTimeout", v4))
      return;
    goto LABEL_44;
  }
  if (!a2[23])
  {
LABEL_44:
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v21 = &off_1E78B7238;
    v22 = &_bambiDomain;
    v23 = 0x40000000;
    v16 = (SipTransportInitDelegate *)ImsResult::operator<<<char [25]>((uint64_t)&v21, "transport init timed out");
    SipTransportLayer::notifyDelegate((SipTransportLayer *)v27, this, v16, *((_QWORD *)this + 35));
    ImsResult::~ImsResult((ImsResult *)v27);
    ImsResult::~ImsResult((ImsResult *)&v21);
    SipTransportLayer::cancelTransportInit(this);
    return;
  }
  v11 = "TransportInitTimeout";
  while (*a2 == *(unsigned __int8 *)v11)
  {
    ++a2;
    ++v11;
    if (!--v3)
      goto LABEL_44;
  }
}

void sub_1BEF8EA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *SipTransportLayer::processDeferredIncomingMessages(SipTransportLayer *this)
{
  uint64_t v2;
  char *v3;
  _QWORD **v4;
  IncomingSipMessage *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *v42;
  std::__shared_weak_count *v43;
  char v44;
  uint64_t v45;
  void *__p;
  uint64_t v47;

  if (*((_QWORD *)this + 34))
  {
    v45 = 0;
    __p = 0;
    v47 = 0;
    std::list<IncomingSipMessage *>::list(&v45, *((_QWORD *)this + 243) + 32);
    v2 = v47;
    if (v47)
    {
      v3 = (char *)this + 40;
      while (1)
      {
        v4 = (_QWORD **)__p;
        v5 = (IncomingSipMessage *)*((_QWORD *)__p + 2);
        v6 = *(_QWORD *)__p;
        *(_QWORD *)(v6 + 8) = *((_QWORD *)__p + 1);
        *v4[1] = v6;
        v47 = v2 - 1;
        operator delete(v4);
        v7 = (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 32))((char *)this + 40);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v3 + 16))((char *)this + 40, v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"processing deferred ", 20);
        *(_BYTE *)(v7 + 17) = 0;
        (*(void (**)(void **__return_ptr))(**(_QWORD **)v5 + 48))(&v42);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 32))(v7, &v42);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v7 + 17) = 0;
        if (v44 < 0)
          operator delete(v42);
        v8 = *((_QWORD *)this + 34);
        v9 = *(_QWORD *)v5;
        v10 = (std::__shared_weak_count *)*((_QWORD *)v5 + 2);
        v42 = (void *)*((_QWORD *)v5 + 1);
        v43 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        v13 = *((_QWORD *)v5 + 5);
        if (!v13)
        {
          v22 = (std::__shared_weak_count *)*((_QWORD *)v5 + 4);
          v40 = *((_QWORD *)v5 + 3);
          v41 = v22;
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          goto LABEL_32;
        }
        v14 = *(std::__shared_weak_count **)(v13 + 296);
        if (!v14)
          break;
        v15 = *(_QWORD *)(v13 + 288);
        p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
        do
          v17 = __ldxr(p_shared_weak_owners);
        while (__stxr(v17 + 1, p_shared_weak_owners));
        v18 = std::__shared_weak_count::lock(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v18 || !v15)
          goto LABEL_24;
        v19 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
        v40 = *((_QWORD *)v5 + 5);
        v41 = v19;
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
LABEL_28:
        v28 = (unint64_t *)&v18->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
LABEL_32:
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t *))(*(_QWORD *)v8 + 24))(v8, v9, &v42, &v40);
        v30 = v41;
        if (v41)
        {
          v31 = (unint64_t *)&v41->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = v43;
        if (v43)
        {
          v34 = (unint64_t *)&v43->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        IncomingSipMessage::~IncomingSipMessage(v5);
        MEMORY[0x1C3B87100](v36);
        v2 = v47;
        if (!v47)
          goto LABEL_43;
      }
      v18 = 0;
LABEL_24:
      v25 = (std::__shared_weak_count *)*((_QWORD *)v5 + 4);
      v40 = *((_QWORD *)v5 + 3);
      v41 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      if (!v18)
        goto LABEL_32;
      goto LABEL_28;
    }
LABEL_43:
    SipTransportLayer::IncomingMessageList::clear(*((SipTransportLayer::IncomingMessageList **)this + 243));
    return std::__list_imp<unsigned long long>::clear(&v45);
  }
  else
  {
    v38 = (char *)this + 40;
    v39 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 48))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v38 + 16))((char *)this + 40, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"no delegate. Dropping deferred incoming messages", 48);
    *(_BYTE *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v39 + 17) = 0;
    return SipTransportLayer::dropDeferredIncomingMessages(this);
  }
}

void sub_1BEF8EDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  std::__list_imp<unsigned long long>::clear(&a17);
  _Unwind_Resume(a1);
}

void SipTransportLayer::resolveLocalAddressFromProxies(SipTransportLayer *this, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  const std::string *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  const std::string *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  void (**v41)(ImsResult *__hidden);
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  SipTransportInitDelegate *v46;
  uint64_t v47;
  SipHost *v49;
  SipUri *v50;
  uint64_t v52;
  _BYTE v53[72];
  _BYTE v54[72];
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *__p[2];
  char v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  std::string v61[3];
  void (**v62)(ImsResult *__hidden);
  uint64_t *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  void (**v68)(ImsResult *__hidden);
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v3 = a3;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v70 = 0;
  v71 = 0;
  v75 = 0;
  v76 = 0;
  v73 = 0;
  v74 = 0;
  v68 = &off_1E78B7238;
  v69 = &_bambiDomain;
  v72 = 0;
  v5 = *(_QWORD *)(a2 + 1976);
  if (*(_QWORD *)(a2 + 1984) == v5
    || (v6 = *(_QWORD *)(a2 + 2000),
        v7 = (_QWORD *)(v5 + 8 * (v6 >> 4)),
        v8 = (_QWORD *)(*v7 + 408 * (v6 & 0xF)),
        v52 = *(_QWORD *)(v5 + (((*(_QWORD *)(a2 + 2008) + v6) >> 1) & 0x7FFFFFFFFFFFFFF8))
            + 408 * ((*(_DWORD *)(a2 + 2008) + (_DWORD)v6) & 0xF),
        v8 == (_QWORD *)v52))
  {
    v10 = 0;
LABEL_59:
    NetworkInterface::firstAddress(*(NetworkInterface **)(a2 + 1064), 3, 1, &v62);
    v41 = v62;
    v42 = (std::__shared_weak_count *)v63;
    if (!v63)
      goto LABEL_63;
    v43 = (unint64_t *)(v63 + 1);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      if (!v41)
        goto LABEL_65;
    }
    else
    {
LABEL_63:
      if (!v41)
        goto LABEL_65;
    }
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 40) + 56))(a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 40) + 16))(a2 + 40, v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v45 + 8), (uint64_t)"local address cannot reach any proxies", 38);
    *(_BYTE *)(v45 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v45 + 17) = 0;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v62 = &off_1E78B7238;
    v63 = &_bambiDomain;
    LODWORD(v64) = 1073741842;
    v46 = (SipTransportInitDelegate *)ImsResult::operator<<<char [31]>((uint64_t)&v62, "network configuration mismatch");
    SipTransportLayer::notifyDelegate((SipTransportLayer *)v54, (const ImsResult *)a2, v46, *(_QWORD *)(a2 + 280));
    ImsResult::~ImsResult((ImsResult *)v54);
    ImsResult::~ImsResult((ImsResult *)&v62);
    SipTransportLayer::cancelTransportInit((SipTransportLayer *)a2);
    goto LABEL_65;
  }
  v9 = 0;
  v10 = 0;
  v11 = a2 + 40;
  v49 = (SipHost *)(a2 + 296);
  v50 = (SipUri *)(a2 + 288);
  while (1)
  {
    v67 = 0uLL;
    v62 = &off_1E78B7238;
    v12 = &_bambiDomain;
    v63 = &_bambiDomain;
    v64 = 0;
    v66 = 0uLL;
    v65 = 0uLL;
    if (v8[6])
    {
      v13 = 0;
    }
    else
    {
      SipHost::resolve((SipHost *)(v8 + 1), 1, (uint64_t)v61);
      ImsResult::operator=((uint64_t)&v62, (uint64_t)v61);
      ImsResult::~ImsResult((ImsResult *)v61);
      v12 = v63;
      v13 = v64;
    }
    if (!(*(unsigned int (**)(uint64_t *, uint64_t))(*v12 + 24))(v12, v13))
      break;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(a2 + 40, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"unable to resolve proxy ", 24);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(_QWORD *, uint64_t))(*v8 + 40))(v8, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v14 + 17) = 0;
    ((void (*)(ImsResult *, ImsOutStream *))v62[2])((ImsResult *)&v62, (ImsOutStream *)v14);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (!v9 || ((*(uint64_t (**)(uint64_t *, _QWORD))(*v69 + 24))(v69, v70) & 1) == 0)
      ImsResult::operator=((uint64_t)&v68, (uint64_t)&v62);
    ++v9;
    ImsResult::~ImsResult((ImsResult *)&v62);
LABEL_53:
    v8 += 51;
    if ((_QWORD *)((char *)v8 - *v7) == (_QWORD *)6528)
    {
      v40 = (_QWORD *)v7[1];
      ++v7;
      v8 = v40;
    }
    if (v8 == (_QWORD *)v52)
      goto LABEL_56;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD *))(*v8 + 48))(v61, v8);
  v15 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v61[0].__r_.__value_.__l.__data_ + 136))(v61[0].__r_.__value_.__r.__words[0]);
  size = (std::__shared_weak_count *)v61[0].__r_.__value_.__l.__size_;
  if (v61[0].__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(v61[0].__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v19 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 64))(a2 + 40);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 16))(a2 + 40, v19);
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a2 + 1064) + 16))(*(_QWORD *)(a2 + 1064), v19);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v19[17] = 0;
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 64))(a2 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(a2 + 40, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"looking for a local ", 20);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v8 + 48))(&v59, v8);
  v21 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 128))(v59);
  LoggableString::LoggableString(v61, v21);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 40))(v20, v61);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" address on ", 12);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a2 + 1064) + 24))(__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v20 + 40))(v20, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" to contact ", 12);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v8 + 48))(&v55, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 40))(v55, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" whose addressTypeMask=", 23);
  *(_BYTE *)(v20 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v20 + 17) = 0;
  v22 = v56;
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v58 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v61[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61[0].__r_.__value_.__l.__data_);
  v25 = v60;
  if (v60)
  {
    v26 = (unint64_t *)&v60->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v59 = 0;
  v60 = 0;
  NetworkInterface::firstAddress(*(NetworkInterface **)(a2 + 1064), v15, (int **)&_MergedGlobals_9, &v59);
  v28 = v59;
  if (v59)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v59 + 32))(v61, v59);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this, (__int128 *)v61);
    v29 = (std::__shared_weak_count *)v61[0].__r_.__value_.__l.__size_;
    if (v61[0].__r_.__value_.__l.__size_)
    {
      v30 = (unint64_t *)(v61[0].__r_.__value_.__l.__size_ + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    SipUri::operator=(v50, (uint64_t)v8);
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 64))(a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(a2 + 40, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"found ", 6);
    *(_BYTE *)(v32 + 17) = 0;
    SipHost::ipAddress(v49, &v55);
    v33 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 128))(v55);
    LoggableString::LoggableString(v61, v33);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v32 + 40))(v32, v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)" address ", 9);
    *(_BYTE *)(v32 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)this + 40))(*(_QWORD *)this, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)" on ", 4);
    *(_BYTE *)(v32 + 17) = 0;
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(a2 + 1064) + 24))(__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v32 + 40))(v32, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v32 + 17) = 0;
    if (v58 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v61[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61[0].__r_.__value_.__l.__data_);
    v34 = v56;
    if (v56)
    {
      v35 = (unint64_t *)&v56->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  else
  {
    ++v9;
  }
  v37 = v60;
  if (v60)
  {
    v38 = (unint64_t *)&v60->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v62);
  v10 = 1;
  if (!v28)
    goto LABEL_53;
LABEL_56:
  v3 = a3;
  if (!*(_QWORD *)this)
    goto LABEL_59;
LABEL_65:
  if (v3 && (v10 & 1) == 0)
  {
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 40) + 56))(a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 40) + 16))(a2 + 40, v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"unable to find resolvable proxy", 31);
    *(_BYTE *)(v47 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v47 + 17) = 0;
    SipTransportLayer::notifyDelegate((SipTransportLayer *)v53, (const ImsResult *)a2, (SipTransportInitDelegate *)&v68, *(_QWORD *)(a2 + 280));
    ImsResult::~ImsResult((ImsResult *)v53);
    SipTransportLayer::cancelTransportInit((SipTransportLayer *)a2);
  }
  ImsResult::~ImsResult((ImsResult *)&v68);
}

void sub_1BEF8F740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  ImsResult::~ImsResult((ImsResult *)(v47 - 160));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

void SipTransportLayer::reachabilityChanged(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    if (ImsUuid::operator==(a1 + 232, (uint64_t)&unk_1ED70EC50))
    {
      *(_BYTE *)(a1 + 1056) = 1;
      if (SipUri::isValidUri((SipUri *)(a1 + 288)) && !*(_QWORD *)(a1 + 992) && *(_DWORD *)(a1 + 952) >= 2u)
      {
        SipTimerContainer::cancelAllTimers((SipTimerContainer *)(a1 + 808));
        SipTransportLayer::initializeTransportGroup((SipTransportLayer *)a1);
      }
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 40);
      v5 = a1 + 40;
      v7 = (*(uint64_t (**)(uint64_t))(v6 + 64))(v5);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"not waiting for reachability", 28);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
    }
  }
  else
  {
    v3 = (_BYTE *)(a1 + 40);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a1 + 40);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"proxy is no longer reachable", 28);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    v3[1016] = 0;
  }
}

void `non-virtual thunk to'SipTransportLayer::reachabilityChanged(uint64_t a1, uint64_t a2)
{
  SipTransportLayer::reachabilityChanged(a1 - 32, a2);
}

void SipTransportLayer::networkInterfaceChanged(SipTransportLayer *this, uint64_t a2, NetworkInterface **a3)
{
  NetworkInterface *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _QWORD v37[9];

  v5 = *a3;
  if (*a3)
  {
    v7 = *((unsigned __int8 *)this + 263);
    if ((v7 & 0x80u) == 0)
      v8 = *((unsigned __int8 *)this + 263);
    else
      v8 = *((_QWORD *)this + 31);
    v9 = qword_1ED70EC40;
    if (byte_1ED70EC4F >= 0)
      v9 = byte_1ED70EC4F;
    if (v8 == v9)
    {
      v10 = (const void **)((char *)this + 240);
      if (byte_1ED70EC4F >= 0)
        v11 = &qword_1ED70EC38;
      else
        v11 = (uint64_t *)qword_1ED70EC38;
      if ((v7 & 0x80) == 0)
      {
        if (*((_BYTE *)this + 263))
        {
          while (*(unsigned __int8 *)v10 == *(unsigned __int8 *)v11)
          {
            v10 = (const void **)((char *)v10 + 1);
            v11 = (uint64_t *)((char *)v11 + 1);
            if (!--v7)
              goto LABEL_21;
          }
          goto LABEL_19;
        }
        goto LABEL_21;
      }
      if (!memcmp(*v10, v11, *((_QWORD *)this + 31)))
      {
LABEL_21:
        *a3 = 0;
        SipTransportLayer::setInterface(this, v5);
        v18 = *((_QWORD *)this + 33);
        if (v18)
        {
          (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v18 + 56))(v37, v18, *((_QWORD *)this + 133));
          ImsResult::~ImsResult((ImsResult *)v37);
        }
        v19 = (char *)this + 40;
        v20 = (_BYTE *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 64))((char *)this + 40);
        (*(void (**)(char *, _BYTE *))(*((_QWORD *)this + 5) + 16))((char *)this + 40, v20);
        (*(void (**)(NetworkInterface *, _BYTE *))(*(_QWORD *)v5 + 16))(v5, v20);
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v20[17] = 0;
        v35 = 0;
        v36 = 0;
        SipTransportLayer::resolveLocalAddressFromProxies((SipTransportLayer *)&v35, (uint64_t)this, 0);
        if (v35)
        {
          v21 = (*(uint64_t (**)(char *))(*(_QWORD *)v19 + 64))((char *)this + 40);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v19 + 16))((char *)this + 40, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"interface ", 10);
          *(_BYTE *)(v21 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(v21, a2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)" is up", 6);
          *(_BYTE *)(v21 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v21 + 17) = 0;
          v22 = (*(uint64_t (**)(char *))(*(_QWORD *)v19 + 64))((char *)this + 40);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v19 + 16))((char *)this + 40, v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"local IP address is ", 20);
          *(_BYTE *)(v22 + 17) = 0;
          v23 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 40))(v35, v22);
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v23[17] = 0;
          SipHost::SipHost((uint64_t)&v33, (uint64_t)&v35);
          SipUri::makeSipUri((uint64_t)this + 1120);
          SipHost::operator=((uint64_t)this + 1128, (uint64_t)&v33);
          *((_BYTE *)this + 1440) = 0;
          SipHost::~SipHost(&v33);
          v24 = NetworkInterfaceMonotorManager::_instance;
          if (!NetworkInterfaceMonotorManager::_instance)
          {
            v24 = operator new();
            *(_OWORD *)v24 = 0u;
            *(_OWORD *)(v24 + 16) = 0u;
            *(_DWORD *)(v24 + 32) = 1065353216;
            NetworkInterfaceMonotorManager::_instance = v24;
          }
          NetworkInterfaceMonotorManager::releaseMonitor((_QWORD *)v24, (unsigned __int8 *)this + 960);
          if (*((char *)this + 983) < 0)
          {
            **((_BYTE **)this + 120) = 0;
            *((_QWORD *)this + 121) = 0;
          }
          else
          {
            *((_BYTE *)this + 960) = 0;
            *((_BYTE *)this + 983) = 0;
          }
          SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(this);
        }
        else
        {
          SipUri::operator=((SipTransportLayer *)((char *)this + 288), *(_QWORD *)(*((_QWORD *)this + 247) + ((*((_QWORD *)this + 250) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 408 * (*((_QWORD *)this + 250) & 0xFLL));
          v25 = (*(uint64_t (**)(char *))(*(_QWORD *)v19 + 64))((char *)this + 40);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v19 + 16))((char *)this + 40, v25);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 32))(v25, a2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" is up, but it doesn't have an ", 31);
          *(_BYTE *)(v25 + 17) = 0;
          SipHost::ipAddress((SipTransportLayer *)((char *)this + 296), &v33);
          v26 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 128))(v33);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 32))(v25, v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" address.", 9);
          *(_BYTE *)(v25 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v25 + 17) = 0;
          v27 = v34;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v29 = __ldaxr(p_shared_owners);
            while (__stlxr(v29 - 1, p_shared_owners));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
        }
        v30 = v36;
        if (v36)
        {
          v31 = (unint64_t *)&v36->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        return;
      }
    }
LABEL_19:
    v16 = *((_QWORD *)this + 5);
    v15 = (char *)this + 40;
    v17 = (*(uint64_t (**)(char *))(v16 + 64))(v15);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v15 + 16))(v15, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"not waiting for interface", 25);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    return;
  }
  v12 = (_QWORD *)((char *)this + 40);
  v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 64))((char *)this + 40);
  (*(void (**)(_QWORD *, uint64_t))(*v12 + 16))(v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"interface ", 10);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" is not up", 10);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  v14 = v12[28];
  if (v14)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 72))(v14, a2);
}

void sub_1BEF8FEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTransportLayer::networkInterfaceChanged(uint64_t a1, uint64_t a2, NetworkInterface **a3)
{
  SipTransportLayer::networkInterfaceChanged((SipTransportLayer *)(a1 - 24), a2, a3);
}

uint64_t SipTransportLayer::maxUdpMessageSize(SipTransportLayer *this)
{
  uint64_t result;
  uint64_t v3;

  if (*(_DWORD *)((*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 256))(this) + 496))
    return *(unsigned int *)((*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 256))(this) + 496);
  v3 = *((_QWORD *)this + 133);
  if (!v3)
    return 1300;
  result = *(unsigned int *)(v3 + 56);
  if (result > 0x5DB)
    return 1300;
  if (result >= 0xC9)
    return (result - 200);
  return result;
}

void SipTransportLayer::fillContactHost(SipTransportLayer *this@<X0>, SipUri *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const ImsResult *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  const ImsResult *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  _BYTE v21[56];
  __int128 v22;

  v5 = *((_QWORD *)this + 130);
  if (v5)
  {
    v19 = 0;
    v20 = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 192))(&v19);
    if (v19)
    {
      SipUri::operator=(a2, (uint64_t)this + 1120);
      memset(v21, 0, sizeof(v21));
      SipHost::SipHost((uint64_t)v21, (uint64_t)this + 1128);
      SipHost::setAddress((uint64_t)v21, &v19);
      (*(void (**)(SipUri *, _BYTE *))(*(_QWORD *)a2 + 32))(a2, v21);
      v7 = (*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 256))(this);
      SipHop::setSupportsCompression((uint64_t **)a2, *(unsigned __int8 *)(v7 + 437));
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(_QWORD *)a3 = &off_1E78B7238;
      *(_QWORD *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
      SipHost::~SipHost((void **)v21);
    }
    else
    {
      v13 = *((_QWORD *)this + 5);
      v12 = (char *)this + 40;
      v14 = (*(uint64_t (**)(char *))(v13 + 48))(v12);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))(v12, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"fillContactHost: no local address", 33);
      *(_BYTE *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v14 + 17) = 0;
      memset(&v21[24], 0, 32);
      v22 = 0u;
      *(_QWORD *)v21 = &off_1E78B7238;
      *(_QWORD *)&v21[8] = &_bambiDomain;
      *(_DWORD *)&v21[16] = 1073741826;
      v15 = (const ImsResult *)ImsResult::operator<<<char [17]>((uint64_t)v21, "no local address");
      ImsResult::ImsResult((ImsResult *)a3, v15);
      ImsResult::~ImsResult((ImsResult *)v21);
    }
    v16 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v9 = *((_QWORD *)this + 5);
    v8 = (char *)this + 40;
    v10 = (*(uint64_t (**)(char *, SipUri *))(v9 + 48))(v8, a2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v8 + 16))(v8, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"fillContactHost: no active transport", 36);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    memset(&v21[24], 0, 32);
    v22 = 0u;
    *(_QWORD *)v21 = &off_1E78B7238;
    *(_QWORD *)&v21[8] = &_bambiDomain;
    *(_DWORD *)&v21[16] = 1073741826;
    v11 = (const ImsResult *)ImsResult::operator<<<char [20]>((uint64_t)v21, "no active transport");
    ImsResult::ImsResult((ImsResult *)a3, v11);
    ImsResult::~ImsResult((ImsResult *)v21);
  }
}

void sub_1BEF90234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipTransportLayer::sendMessage(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, ImsResult *a5@<X8>)
{
  int v7;
  ImsResult *v8;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  ImsResult *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  void (**v34)(ImsResult *__hidden);
  uint64_t *v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v7 = *(_DWORD *)(a1 + 224);
  if (v7 < 0)
  {
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v34 = &off_1E78B7238;
    v35 = &_bambiDomain;
    v36 = 0x40000000;
    v8 = (ImsResult *)ImsResult::operator<<<char [38]>((uint64_t)&v34, "sendMessage: failing send for testing");
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 40), v8);
    ImsResult::ImsResult(a5, v8);
    goto LABEL_5;
  }
  if (v7)
  {
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v34 = &off_1E78B7238;
    v35 = &_posixDomain;
    v36 = v7;
    ImsLogContainer::logResult(a1 + 40, (uint64_t)&v34, (uint64_t)a5);
LABEL_5:
    ImsResult::~ImsResult((ImsResult *)&v34);
    return;
  }
  if (a3)
  {
    v13 = *a3;
    v12 = (std::__shared_weak_count *)a3[1];
    v32 = *a3;
    v33 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    if (v13)
    {
      v16 = a1 + 40;
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a1 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(a1 + 40, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"upper layer requested transport ", 32);
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 104))(v13, v17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
      goto LABEL_23;
    }
  }
  else
  {
    v12 = 0;
  }
  v18 = *(_QWORD *)(a1 + 1040);
  if (!v18)
  {
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v34 = &off_1E78B7238;
    v35 = &_bambiDomain;
    v36 = 1073741827;
    v29 = (ImsResult *)ImsResult::operator<<<char [33]>((uint64_t)&v34, "sendMessage: no active transport");
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 40), v29);
    ImsResult::ImsResult(a5, v29);
    ImsResult::~ImsResult((ImsResult *)&v34);
    if (!v12)
      return;
    goto LABEL_35;
  }
  v19 = *(std::__shared_weak_count **)(a1 + 1048);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v32 = v18;
  v33 = v19;
  if (v12)
  {
    v22 = (unint64_t *)&v12->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_23:
  SipTransportLayer::logMessageMetrics((_QWORD *)a1, a2, 0, (uint64_t)&ims::kEmptyString);
  if (a4)
  {
    if (v33)
    {
      v24 = (unint64_t *)&v33->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = (std::__shared_weak_count *)a4[1];
    *a4 = v32;
    a4[1] = v33;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  (*(void (**)(uint64_t, const void *, uint64_t *))(*(_QWORD *)v32 + 56))(v32, a2, a3);
  v12 = v33;
  if (v33)
  {
LABEL_35:
    v30 = (unint64_t *)&v12->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BEF905A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  ImsResult::~ImsResult((ImsResult *)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipTransportLayer::logMessageMetrics(_QWORD *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 isWifi;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD v59[2];
  _QWORD v60[2];
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;

  v63 = 0;
  v64 = 0;
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
  {
    v9 = 0;
    goto LABEL_40;
  }
  v9 = std::__shared_weak_count::lock(v5);
  v64 = v9;
  if (!v9 || (v10 = a1[1], (v63 = v10) == 0) || (v11 = *(_QWORD *)(v10 + 136)) == 0)
  {
LABEL_40:
    v36 = a1[5];
    v35 = a1 + 5;
    v37 = (*(uint64_t (**)(_QWORD *))(v36 + 64))(v35);
    (*(void (**)(_QWORD *, uint64_t))(*v35 + 16))(v35, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"logMessageMetrics() no stack or no bambi client", 47);
    *(_BYTE *)(v37 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v37 + 17) = 0;
    if (!v9)
      return;
    goto LABEL_41;
  }
  v61 = 0;
  v62 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v11 + 104))(&v61);
  v12 = v61;
  if (!v61)
  {
    v41 = a1[5];
    v40 = a1 + 5;
    v42 = (*(uint64_t (**)(_QWORD *))(v41 + 64))(v40);
    (*(void (**)(_QWORD *, uint64_t))(*v40 + 16))(v40, v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"logMessageMetrics() no metrics logger", 37);
    *(_BYTE *)(v42 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v42 + 17) = 0;
    goto LABEL_81;
  }
  if (a2)
  {
    if (!v13)
    {
      if (v43)
      {
        v59[0] = v10;
        v59[1] = v9;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v45 = __ldxr(p_shared_owners);
        while (__stxr(v45 + 1, p_shared_owners));
        IMSMetricsManager::logSipResponse(v12, v59, (uint64_t)v43, a3, a4);
        do
          v46 = __ldaxr(p_shared_owners);
        while (__stlxr(v46 - 1, p_shared_owners));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      goto LABEL_81;
    }
    v14 = v13;
    v60[0] = v10;
    v60[1] = v9;
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    IMSMetricsManager::logSipRequest(v12, v60, (uint64_t)v13, a3, a4);
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    v18 = (char *)SipMessage::header<SipConversationIdHeader>((uint64_t)a2);
    v19 = (__int128 *)(v18 + 64);
    if (!v18)
      v19 = &ims::kEmptyString;
    v20 = *((unsigned __int8 *)v19 + 23);
    v21 = *((_QWORD *)v19 + 1);
    if ((v20 & 0x80u) == 0)
      v21 = v20;
    if (!v21)
    {
      v22 = (char *)SipMessage::header<SipContributionIdHeader>((uint64_t)a2);
      v23 = (__int128 *)(v22 + 64);
      if (!v22)
        v23 = &ims::kEmptyString;
      v24 = *((unsigned __int8 *)v23 + 23);
      v25 = *((_QWORD *)v23 + 1);
      if ((v24 & 0x80u) == 0)
        v25 = v24;
      if (!v25)
      {
        v26 = (char *)SipMessage::header<SipInReplyToContributionIdHeader>((uint64_t)a2);
        v27 = (__int128 *)(v26 + 64);
        if (!v26)
          v27 = &ims::kEmptyString;
        v28 = *((unsigned __int8 *)v27 + 23);
        v29 = *((_QWORD *)v27 + 1);
        if ((v28 & 0x80u) == 0)
          v29 = v28;
        if (!v29)
          goto LABEL_81;
      }
    }
    isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v63 + 3136));
    v31 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(_QWORD *)v14 + 112))(v14);
    v32 = v31[23];
    if ((v32 & 0x80u) == 0)
      v33 = v31[23];
    else
      v33 = *((_QWORD *)v31 + 1);
    if (v33 == 6)
    {
      if ((v32 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v31, "INVITE", *((_QWORD *)v31 + 1)))
          goto LABEL_55;
      }
      else if (v31[23])
      {
        v34 = "INVITE";
        while (*v31 == *(unsigned __int8 *)v34)
        {
          ++v31;
          ++v34;
          if (!--v32)
            goto LABEL_65;
        }
        goto LABEL_55;
      }
LABEL_65:
      v51 = 1;
      goto LABEL_80;
    }
LABEL_55:
    v47 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(_QWORD *)v14 + 112))(v14);
    v48 = v47[23];
    if ((v48 & 0x80u) == 0)
      v49 = v47[23];
    else
      v49 = *((_QWORD *)v47 + 1);
    if (v49 == 3)
    {
      if ((v48 & 0x80) == 0)
      {
        if (v47[23])
        {
          v50 = &SipRequest::kMethodBye;
          while (*v47 == *(unsigned __int8 *)v50)
          {
            ++v47;
            v50 = (__int128 *)((char *)v50 + 1);
            if (!--v48)
              goto LABEL_77;
          }
          goto LABEL_67;
        }
LABEL_77:
        v51 = 2;
        goto LABEL_80;
      }
      if (!memcmp(*(const void **)v47, &SipRequest::kMethodBye, *((_QWORD *)v47 + 1)))
        goto LABEL_77;
    }
LABEL_67:
    v52 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(_QWORD *)v14 + 112))(v14);
    v53 = v52[23];
    if ((v53 & 0x80u) == 0)
      v54 = v52[23];
    else
      v54 = *((_QWORD *)v52 + 1);
    if (v54 != 5)
      goto LABEL_81;
    if ((v53 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v52, "REFER", *((_QWORD *)v52 + 1)))
        goto LABEL_81;
    }
    else if (v52[23])
    {
      v55 = "REFER";
      while (*v52 == *(unsigned __int8 *)v55)
      {
        ++v52;
        ++v55;
        if (!--v53)
          goto LABEL_79;
      }
      goto LABEL_81;
    }
LABEL_79:
    v51 = 3;
LABEL_80:
    powerlog::PowerLogger::logLazuliSipRequest(*(_QWORD *)(v61 + 136), a3, isWifi, v51, 0);
  }
LABEL_81:
  v56 = v62;
  if (v62)
  {
    v57 = (unint64_t *)&v62->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v9 = v64;
  if (v64)
  {
LABEL_41:
    v38 = (unint64_t *)&v9->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEF90ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void SipTransportLayer::setServiceRouteFromMessage(SipTransportLayer *this, const SipMessage *a2)
{
  SipTransportLayer *v3;
  SipRouteSet *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 *v13;
  const void *v14;
  unint64_t v15;
  size_t v16;
  void *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  SipRouteSet *v29;
  unsigned __int8 *v30;
  const void *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  SipTransportLayer *v36;
  SipRouteSet *v37;

  v3 = this;
  v4 = (SipTransportLayer *)((char *)this + 696);
  SipRouteSet::clear((_QWORD *)this + 87);
  v6 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  if (v5 == v6)
  {
    v7 = 0;
  }
  else
  {
    v36 = v3;
    v37 = v4;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = *(unsigned __int8 **)(v6 + 8 * v11);
      if ((char)v13[31] < 0)
      {
        v14 = (const void *)*((_QWORD *)v13 + 1);
        v15 = *((_QWORD *)v13 + 2);
      }
      else
      {
        v14 = v13 + 8;
        v15 = v13[31];
      }
      if (v15 >= 0xD)
        v16 = 13;
      else
        v16 = v15;
      if (!memcmp(v14, "Service-Route", v16) && v15 == 13)
      {
        v19 = v18;
        if (v10 >= v9)
        {
          v20 = (v10 - v7) >> 3;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61)
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          if ((v9 - v7) >> 2 > v21)
            v21 = (v9 - v7) >> 2;
          if ((unint64_t)(v9 - v7) >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
          {
            if (v22 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v23 = (char *)operator new(8 * v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[8 * v20];
          *(_QWORD *)v24 = v19;
          v8 = v24 + 8;
          while (v10 != v7)
          {
            v25 = *((_QWORD *)v10 - 1);
            v10 -= 8;
            *((_QWORD *)v24 - 1) = v25;
            v24 -= 8;
          }
          v9 = &v23[8 * v22];
          if (v7)
            operator delete(v7);
          v7 = v24;
        }
        else
        {
          *(_QWORD *)v10 = v18;
          v8 = v10 + 8;
        }
        v6 = *((_QWORD *)a2 + 1);
        v5 = *((_QWORD *)a2 + 2);
        v10 = v8;
      }
      v11 = ++v12;
    }
    while (v12 < (unint64_t)((v5 - v6) >> 3));
    if (v7 == v10 || v8 == v7)
    {
      v3 = v36;
      v4 = v37;
    }
    else
    {
      v26 = 0;
      if ((unint64_t)((v8 - v7) >> 3) <= 1)
        v27 = 1;
      else
        v27 = (v8 - v7) >> 3;
      v4 = v37;
      do
        SipRouteSet::addHops(v37, (const SipRouteSet *)(*(_QWORD *)&v7[8 * v26++] + 64), 0, 0, 0);
      while (v27 != v26);
      v3 = v36;
    }
  }
  if (*((_QWORD *)v3 + 88) != *((_QWORD *)v3 + 89))
  {
    v28 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v3 + 5) + 64))((uint64_t)v3 + 40);
    (*(void (**)(uint64_t, uint64_t))(*((_QWORD *)v3 + 5) + 16))((uint64_t)v3 + 40, v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"service route: ", 15);
    *(_BYTE *)(v28 + 17) = 0;
    SipRouteSet::toStream(v4, (ImsOutStream *)v28);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v28 + 17) = 0;
  }
  v29 = (SipTransportLayer *)((char *)v3 + 752);
  SipRouteSet::clear((_QWORD *)v3 + 94);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)a2 + 4, "Path");
  if (v30)
  {
    v31 = (const void *)*((_QWORD *)v30 + 5);
    if (v31)
    {
      if (v32)
        SipRouteSet::addHops((SipTransportLayer *)((char *)v3 + 752), (const SipRouteSet *)(v32 + 64), 0, 0, 0);
    }
  }
  if (*((_QWORD *)v3 + 95) != *((_QWORD *)v3 + 96))
  {
    v34 = *((_QWORD *)v3 + 5);
    v33 = (char *)v3 + 40;
    v35 = (*(uint64_t (**)(char *))(v34 + 64))(v33);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v33 + 16))(v33, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"registration path: ", 19);
    *(_BYTE *)(v35 + 17) = 0;
    SipRouteSet::toStream(v29, (ImsOutStream *)v35);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v35 + 17) = 0;
  }
  if (v7)
    operator delete(v7);
}

void sub_1BEF90E90(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void SipTransportLayer::printTransportInfo(SipTransportLayer *this, ImsOutStream *a2)
{
  std::string v4;
  std::string __p;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Transport:", 10);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    State:             ", 23);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(char *, ImsOutStream *))(*((_QWORD *)this + 29) + 16))((char *)this + 232, a2);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (*((_QWORD *)this + 124))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Default transport: ", 23);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(_QWORD, ImsOutStream *, uint64_t))(**((_QWORD **)this + 124) + 264))(*((_QWORD *)this + 124), a2, 1);
  }
  if (*((_QWORD *)this + 126))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Secure transport:  ", 23);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(_QWORD, ImsOutStream *, uint64_t))(**((_QWORD **)this + 126) + 264))(*((_QWORD *)this + 126), a2, 1);
  }
  if (*((_QWORD *)this + 88) != *((_QWORD *)this + 89))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Service route:     ", 23);
    *((_BYTE *)a2 + 17) = 0;
    SipRouteSet::toStream((SipTransportLayer *)((char *)this + 696), a2);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
  if (*((char *)this + 415) < 0)
  {
    if (!*((_QWORD *)this + 50))
      return;
  }
  else if (!*((_BYTE *)this + 415))
  {
    return;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Proxy:             ", 23);
  *((_BYTE *)a2 + 17) = 0;
  SipUri::asString((uint64_t)this + 288, 2, &v4);
  LoggableString::LoggableString(&__p, &v4);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1BEF910D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **SipTransportLayer::dropInfoForMethod(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  void *__p[2];
  char v12;

  v4 = 200;
  if (a3)
    v4 = 176;
  v5 = a1 + v4;
  v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + v4, (void **)a2);
  if ((void **)(v5 + 8) == v6)
  {
    v7 = *(unsigned __int8 *)(a2 + 23);
    v8 = (char)v7;
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a2 + 8);
    if (v7 != 1 || (v8 >= 0 ? (v9 = (_BYTE *)a2) : (v9 = *(_BYTE **)a2), *v9 != 42))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "*");
      v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v5, __p);
      if (v12 < 0)
        operator delete(__p[0]);
    }
  }
  if (v6 == (void **)(v5 + 8))
    return 0;
  else
    return v6 + 7;
}

uint64_t SipTransportLayer::shouldDropMessage(SipTransportLayer *this, const SipMessage *a2, int a3)
{
  char *v6;
  _DWORD *v7;
  _DWORD *v8;
  char *v9;
  __int128 *v10;
  void **v11;
  void **v12;
  char *v13;
  char *v14;
  unsigned int v15;
  void **v16;
  void **v17;
  char *v18;
  unsigned int v19;
  BOOL v20;
  char **v21;
  int v22;
  BOOL v23;
  void **v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void **v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  uint64_t v40;

  if (a3)
  {
    if (*((_QWORD *)this + 24))
    {
      v6 = "incoming";
      goto LABEL_6;
    }
    return 0;
  }
  if (!*((_QWORD *)this + 27))
    return 0;
  v6 = "outgoing";
LABEL_6:
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  if (v7)
  {
    v8 = v7;
    v9 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)v7);
    v10 = v9 ? (__int128 *)(v9 + 64) : &ims::kEmptyString;
    v11 = SipTransportLayer::dropInfoForMethod((uint64_t)this, (uint64_t)v10, a3);
    if (v11)
    {
      v14 = (char *)v11[5];
      v12 = v11 + 5;
      v13 = v14;
      if (v14)
      {
        v15 = v8[22];
        v16 = v12;
        v17 = v12;
        v18 = v13;
        do
        {
          v19 = *((_DWORD *)v18 + 7);
          v20 = v19 >= v15;
          if (v19 >= v15)
            v21 = (char **)v18;
          else
            v21 = (char **)(v18 + 8);
          if (v20)
            v17 = (void **)v18;
          v18 = *v21;
        }
        while (*v21);
        if (v17 != v12 && v15 >= *((_DWORD *)v17 + 7))
          goto LABEL_29;
        do
        {
          v22 = *((_DWORD *)v13 + 7);
          v23 = v22 == -1;
          if (v22 == -1)
            v24 = (void **)v13;
          else
            v24 = (void **)(v13 + 8);
          if (v23)
            v16 = (void **)v13;
          v13 = (char *)*v24;
        }
        while (*v24);
        if (v16 != v12)
        {
LABEL_29:
          v26 = *((_QWORD *)this + 5);
          v25 = (char *)this + 40;
          v27 = (*(uint64_t (**)(char *))(v26 + 64))(v25);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v25 + 16))(v25, v27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"DROPPING ", 9);
          *(_BYTE *)(v27 + 17) = 0;
          v28 = (_BYTE *)(v27 + 17);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v27 + 32))(v27, __p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)" ", 1);
          *(_BYTE *)(v27 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v27 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)" response", 9);
          *(_BYTE *)(v27 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_34:
          *v28 = 0;
          v37 = 1;
          goto LABEL_36;
        }
      }
    }
  }
  if (v29)
  {
    v30 = v29;
    v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v29 + 112))(v29);
    v32 = SipTransportLayer::dropInfoForMethod((uint64_t)this, v31, a3);
    if (v32)
    {
      if (*((_BYTE *)v32 + 24))
      {
        v34 = *((_QWORD *)this + 5);
        v33 = (char *)this + 40;
        v35 = (*(uint64_t (**)(char *))(v34 + 64))(v33);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v33 + 16))(v33, v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"DROPPING ", 9);
        *(_BYTE *)(v35 + 17) = 0;
        v28 = (_BYTE *)(v35 + 17);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v35 + 32))(v35, __p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" ", 1);
        *(_BYTE *)(v35 + 17) = 0;
        v36 = (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 112))(v30);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 32))(v35, v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" request", 8);
        *(_BYTE *)(v35 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_34;
      }
    }
  }
  v37 = 0;
LABEL_36:
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  return v37;
}

void sub_1BEF914E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipTransportLayer::processMessageFromTransport(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, _QWORD *a6, _QWORD *a7, std::string::size_type *a8)
{
  _BOOL4 v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  ImsPrefs *v20;
  void **DropTrafficOnUnknownTransportsKey;
  void *v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type size;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  ImsPrefs *v49;
  void **AcceptMsgFromNonProxyKey;
  void *v51;
  uint64_t v52;
  std::string::size_type v53;
  const std::string::value_type *v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  char v57;
  std::string::size_type v58;
  uint64_t v59;
  uint64_t **v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t **v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _BOOL4 isWifi;
  BOOL v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  std::string::size_type v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::string::size_type v114;
  std::__shared_weak_count *v115;
  std::string::size_type v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  SipTransportLayer::IncomingMessageList *v131;
  uint64_t v132;
  IncomingSipMessage *v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::string::size_type v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t *p_shared_weak_owners;
  unint64_t v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  __int16 v157;
  char v160;
  int v162;
  _QWORD *v163;
  uint64_t v165;
  _BOOL4 v166;
  _QWORD v168[2];
  _QWORD v169[2];
  uint64_t v170;
  std::__shared_weak_count *v171;
  void *__p[2];
  char v173;
  uint64_t **v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  std::string v178;
  std::string v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  std::string::size_type v182;
  std::__shared_weak_count *v183;
  uint64_t **v184;
  std::__shared_weak_count *v185;
  std::string v186;
  _BYTE v187[24];
  _BYTE *v188;
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 2017))
    v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a7 + 208))(*a7) == 5060;
  else
    v11 = 0;
  v12 = (const void *)*a7;
  v13 = (std::__shared_weak_count *)a7[1];
  v180 = *a7;
  v181 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (v12)
  {
    if (*(const void **)(a1 + 1040) == v12)
    {
      v19 = 1;
      if (v13)
        goto LABEL_23;
      goto LABEL_27;
    }
    {
      if (!v13)
      {
        v26 = 0;
        v19 = 1;
        goto LABEL_30;
      }
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      v19 = 1;
      goto LABEL_23;
    }
  }
  v20 = (ImsPrefs *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  DropTrafficOnUnknownTransportsKey = (void **)ImsPrefs::getDropTrafficOnUnknownTransportsKey(v20);
  v22 = ImsPrefs::prefWithKey(v20, DropTrafficOnUnknownTransportsKey);
  if (v22)
    v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 40))(v22);
  else
    v23 = *((_BYTE *)DropTrafficOnUnknownTransportsKey + 57) != 0;
  v19 = v23 ^ 1;
  if (v13)
  {
LABEL_23:
    v24 = (unint64_t *)&v13->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_27:
  if (((v11 | v19) & 1) != 0)
  {
    v26 = 0;
  }
  else
  {
    v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a7 + 208))(*a7) == 5060;
    v26 = v19;
  }
LABEL_30:
  memset(&v179, 0, sizeof(v179));
  std::string::basic_string[abi:ne180100]<0>(&v179, " ");
  v27 = *(_QWORD *)(a1 + 1976);
  v165 = (uint64_t)a2;
  v163 = a7;
  v166 = v11;
  v162 = v26;
  if (*(_QWORD *)(a1 + 1984) == v27)
  {
    v46 = 1;
  }
  else
  {
    v28 = v19;
    v29 = *(_QWORD *)(a1 + 2000);
    v30 = (_QWORD *)(v27 + 8 * (v29 >> 4));
    v31 = *v30 + 408 * (v29 & 0xF);
    v32 = *(_QWORD *)(v27 + (((*(_QWORD *)(a1 + 2008) + v29) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 408 * ((*(_DWORD *)(a1 + 2008) + (_DWORD)v29) & 0xF);
    if (v31 == v32)
    {
      v46 = 1;
    }
    else
    {
      do
      {
        (*(void (**)(uint64_t ***__return_ptr, uint64_t))(*(_QWORD *)v31 + 48))(&v184, v31);
        IpAddress::asString((IpAddress *)v184, 3, &v178);
        v33 = std::string::append(&v178, " ", 1uLL);
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v186.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v186;
        else
          v35 = (std::string *)v186.__r_.__value_.__r.__words[0];
        if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v186.__r_.__value_.__r.__words[2]);
        else
          size = v186.__r_.__value_.__l.__size_;
        std::string::append(&v179, (const std::string::value_type *)v35, size);
        if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v186.__r_.__value_.__l.__data_);
        if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v178.__r_.__value_.__l.__data_);
        v37 = v185;
        if (v185)
        {
          v38 = (unint64_t *)&v185->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v40 = *a6;
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v31 + 48))(&v186, v31);
        v41 = (*(uint64_t (**)(uint64_t, std::string *, _QWORD))(*(_QWORD *)v40 + 104))(v40, &v186, 0);
        v42 = (std::__shared_weak_count *)v186.__r_.__value_.__l.__size_;
        if (v186.__r_.__value_.__l.__size_)
        {
          v43 = (unint64_t *)(v186.__r_.__value_.__l.__size_ + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        if ((v41 & 1) != 0)
          break;
        v31 += 408;
        if (v31 - *v30 == 6528)
        {
          v45 = v30[1];
          ++v30;
          v31 = v45;
        }
      }
      while (v31 != v32);
      v46 = v41 ^ 1;
    }
    v11 = v166;
    v19 = v28;
  }
  v176 = 0;
  v177 = 0;
  v47 = *(std::__shared_weak_count **)(a1 + 16);
  if (v47 && (v177 = std::__shared_weak_count::lock(v47)) != 0)
  {
    v48 = *(_QWORD *)(a1 + 8);
    v176 = v48;
    if (!v46)
      goto LABEL_77;
  }
  else
  {
    v48 = 0;
    if (!v46)
      goto LABEL_77;
  }
  if (!v48)
  {
LABEL_68:
    v46 = 1;
    goto LABEL_77;
  }
  v49 = (ImsPrefs *)SipStack::prefs((SipStack *)v48);
  AcceptMsgFromNonProxyKey = (void **)ImsPrefs::getAcceptMsgFromNonProxyKey(v49);
  v51 = ImsPrefs::prefWithKey(v49, AcceptMsgFromNonProxyKey);
  if (v51)
  {
    if (!(*(unsigned int (**)(void *))(*(_QWORD *)v51 + 40))(v51))
      goto LABEL_68;
  }
  else if (!*((_BYTE *)AcceptMsgFromNonProxyKey + 57))
  {
    goto LABEL_68;
  }
  v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 48))(a1 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, v52);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"stack ", 6);
  *(_BYTE *)(v52 + 17) = 0;
  if (*(char *)(v48 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(v48 + 4136), *(_QWORD *)(v48 + 4144));
  else
    v186 = *(std::string *)(v48 + 4136);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v52 + 32))(v52, &v186);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)": will still accept ", 20);
  *(_BYTE *)(v52 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v52 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)" bytes from ", 12);
  *(_BYTE *)(v52 + 17) = 0;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 40))(*a6, v52);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)", which is not from myProxies at [", 34);
  *(_BYTE *)(v52 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v52 + 32))(v52, &v179);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v52 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v52 + 17) = 0;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  v46 = 0;
LABEL_77:
  memset(&v178, 0, sizeof(v178));
  if (((v11 | v19 ^ 1) & 1) != 0)
  {
    if (v11)
      v53 = 23;
    else
      v53 = 25;
    if (v11)
      v54 = "DroppedOnDefaultSipPort";
    else
      v54 = "DroppedOnInvalidTransport";
    std::string::__assign_external(&v178, v54, v53);
    goto LABEL_104;
  }
  if (!v46)
    goto LABEL_104;
  strcpy((char *)&v178, "DroppedMsgFromNonProxy");
  *((_BYTE *)&v178.__r_.__value_.__s + 23) = 22;
  *(_OWORD *)&v186.__r_.__value_.__l.__data_ = 0uLL;
  v55 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v55)
  {
    v56 = 0;
    goto LABEL_99;
  }
  v56 = std::__shared_weak_count::lock(v55);
  v186.__r_.__value_.__l.__size_ = (std::string::size_type)v56;
  if (!v56)
    goto LABEL_99;
  v57 = v46;
  v58 = *(_QWORD *)(a1 + 8);
  v186.__r_.__value_.__r.__words[0] = v58;
  if (!v58 || (v59 = *(_QWORD *)(v58 + 136)) == 0)
  {
    LOBYTE(v46) = v57;
LABEL_99:
    v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, v64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)"logSipRequestFromNonProxyDropped() no stack or no bambi client", 62);
    *(_BYTE *)(v64 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v64 + 17) = 0;
    if (!v56)
      goto LABEL_104;
    goto LABEL_100;
  }
  v184 = 0;
  v185 = 0;
  (*(void (**)(uint64_t ***__return_ptr))(*(_QWORD *)v59 + 104))(&v184);
  v60 = v184;
  if (v184)
  {
    v182 = v58;
    v183 = v56;
    v61 = (unint64_t *)&v56->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    IMSMetricsManager::logSipRequestFromNonProxyDropped((uint64_t)v60, (uint64_t *)&v182);
    do
      v63 = __ldaxr(v61);
    while (__stlxr(v63 - 1, v61));
    LOBYTE(v46) = v57;
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  else
  {
    v150 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, v150);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v150 + 8), (uint64_t)"logSipRequestFromNonProxyDropped() no metrics logger", 52);
    *(_BYTE *)(v150 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v150 + 64))(v150, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v150 + 17) = 0;
    LOBYTE(v46) = v57;
  }
  v151 = v185;
  if (v185)
  {
    v152 = (unint64_t *)&v185->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v56 = (std::__shared_weak_count *)v186.__r_.__value_.__l.__size_;
  if (v186.__r_.__value_.__l.__size_)
  {
LABEL_100:
    v65 = (unint64_t *)&v56->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
LABEL_104:
  SipTransportLayer::logMessageMetrics((_QWORD *)a1, a2, 1, (uint64_t)&v178);
  std::chrono::steady_clock::now();
  v67 = *(_QWORD *)(a1 + 272);
  if (v67)
  {
    v68 = (*(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)v67 + 16))(v67, a2);
    v69 = v19;
  }
  else
  {
    v69 = v19;
    v68 = 0;
  }
  v160 = v46;
  std::chrono::steady_clock::now();
  v70 = a1 + 40;
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a1 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, v71);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v71 + 8), (uint64_t)"Time taken to determine IncomingMessageCategory ", 48);
  *(_BYTE *)(v71 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v71 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v71 + 64))(v71, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v71 + 17) = 0;
  v184 = 0;
  v185 = 0;
  v72 = *(uint64_t ***)(a1 + 1952);
  v73 = *(std::__shared_weak_count **)(a1 + 1960);
  v174 = v72;
  v175 = v73;
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v48 + 3136));
  v77 = isWifi;
  SipTransportLayer::assertionStringForCategory((uint64_t)__p, v68, isWifi);
  v184 = 0;
  v185 = 0;
  if (v73)
  {
    v78 = (unint64_t *)&v73->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
    v80 = v185;
    v184 = v72;
    v185 = v73;
    v81 = v165;
    v82 = v163;
    if (v80)
    {
      v83 = (unint64_t *)&v80->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
  }
  else
  {
    v184 = v72;
    v185 = 0;
    v81 = v165;
    v82 = v163;
  }
  if (v174)
  {
    v186.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    v85 = std::__tree<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v174, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v186);
    AssertionCounter::initialize((AssertionCounter *)v85[7], 300.0, !v77, (uint64_t)&v186);
    ImsResult::~ImsResult((ImsResult *)&v186);
  }
  if (v173 < 0)
    operator delete(__p[0]);
  v86 = v175;
  if (v175)
  {
    v87 = (unint64_t *)&v175->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = *(_QWORD *)(a1 + 1024);
  if (v89)
  {
    v90 = (_QWORD *)(a1 + 1024);
    if (*v82 == *(_QWORD *)(a1 + 1008))
    {
      v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 64))(a1 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(a1 + 40, v92);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v92 + 8), (uint64_t)"received a message over new SAs.  Removing old SAs ", 51);
      *(_BYTE *)(v92 + 17) = 0;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v90 + 104))(*v90, v92);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v92 + 64))(v92, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v92 + 17) = 0;
      v93 = *v90;
      LoggableString::LoggableString((LoggableString *)&v186, "TransportLayer");
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v93 + 40))(v93, &v186);
      if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v186.__r_.__value_.__l.__data_);
      *(_OWORD *)&v186.__r_.__value_.__l.__data_ = 0uLL;
      std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 1024, (__int128 *)&v186);
      v94 = (std::__shared_weak_count *)v186.__r_.__value_.__l.__size_;
      if (v186.__r_.__value_.__l.__size_)
      {
        v95 = (unint64_t *)(v186.__r_.__value_.__l.__size_ + 8);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
    }
    else if (*v82 == v89)
    {
      v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 64))(a1 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(a1 + 40, v91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v91 + 8), (uint64_t)"received message over old SAs ", 30);
      *(_BYTE *)(v91 + 17) = 0;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v90 + 104))(*v90, v91);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v91 + 64))(v91, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v91 + 17) = 0;
    }
  }
  if (v166)
  {
    v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 48))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(a1 + 40, v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v97 + 8), (uint64_t)"dropping ", 9);
    *(_BYTE *)(v97 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v97 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v97 + 8), (uint64_t)" bytes on DefaultSipPort of ", 28);
    *(_BYTE *)(v97 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v82 + 104))(*v82, v97);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v97 + 64))(v97, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_147;
  }
  if ((v69 & 1) == 0)
  {
    v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 48))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(a1 + 40, v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v97 + 8), (uint64_t)"dropping ", 9);
    *(_BYTE *)(v97 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v97 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v97 + 8), (uint64_t)" bytes on inactive transport ", 29);
    *(_BYTE *)(v97 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v82 + 104))(*v82, v97);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v97 + 64))(v97, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_147:
    *(_BYTE *)(v97 + 17) = 0;
    if (!v81)
      goto LABEL_149;
    goto LABEL_148;
  }
  if (v162)
  {
    v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 48))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(a1 + 40, v98);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v98 + 8), (uint64_t)"skipped dropping ", 17);
    *(_BYTE *)(v98 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v98 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v98 + 8), (uint64_t)" bytes on inactive transport ", 29);
    *(_BYTE *)(v98 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v82 + 104))(*v82, v98);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v98 + 64))(v98, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v98 + 17) = 0;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v81 + 80))(&v186, v81, a6);
  v99 = (*(uint64_t (**)(std::string::size_type, _QWORD))(*(_QWORD *)v186.__r_.__value_.__l.__size_ + 24))(v186.__r_.__value_.__l.__size_, LODWORD(v186.__r_.__value_.__r.__words[2]));
  ImsResult::~ImsResult((ImsResult *)&v186);
  if (v99)
  {
    v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 48))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(a1 + 40, v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), (uint64_t)"incoming message has invalid Via header.  Dropping.", 51);
    *(_BYTE *)(v100 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v100 + 64))(v100, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v100 + 17) = 0;
LABEL_148:
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
    goto LABEL_149;
  }
  v104 = v176;
  v105 = v160 ^ 1;
  if (!v176)
    v105 = 1;
  if ((v105 & 1) == 0)
  {
    v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 48))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, v106);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v106 + 8), (uint64_t)"stack ", 6);
    *(_BYTE *)(v106 + 17) = 0;
    if (*(char *)(v104 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(v104 + 4136), *(_QWORD *)(v104 + 4144));
    else
      v186 = *(std::string *)(v104 + 4136);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v106 + 32))(v106, &v186);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v106 + 8), (uint64_t)": dropping ", 11);
    *(_BYTE *)(v106 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v106 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v106 + 8), (uint64_t)" bytes from ", 12);
    *(_BYTE *)(v106 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 40))(*a6, v106);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v106 + 8), (uint64_t)", which is not from myProxies at [", 34);
    *(_BYTE *)(v106 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v106 + 32))(v106, &v179);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v106 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v106 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v106 + 64))(v106, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v106 + 17) = 0;
    if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v186.__r_.__value_.__l.__data_);
    goto LABEL_148;
  }
  v107 = *a8;
  if (*a8)
    v108 = &SipTransport::kTransportTCP;
  else
    v108 = &SipTransport::kTransportUDP;
  v182 = 0;
  v183 = 0;
  if (!v107)
  {
LABEL_176:
    (*(void (**)(std::string::size_type *__return_ptr))(*(_QWORD *)*v163 + 192))(&v182);
    if (!v107)
      goto LABEL_182;
    goto LABEL_177;
  }
  v109 = *(_QWORD *)(v107 + 272);
  if (!v109)
  {
    v170 = 0;
    v171 = 0;
    goto LABEL_176;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v109 + 136))(&v170);
  if (!v170)
    goto LABEL_176;
  v110 = *(_QWORD *)(*a8 + 272);
  if (v110)
  {
    (*(void (**)(std::string::size_type *__return_ptr))(*(_QWORD *)v110 + 136))(&v182);
  }
  else
  {
    v182 = 0;
    v183 = 0;
  }
LABEL_177:
  v111 = v171;
  if (v171)
  {
    v112 = (unint64_t *)&v171->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
LABEL_182:
  if (v182)
  {
    HIBYTE(v157) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v163 + 216))(*v163);
    LOBYTE(v157) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, std::string::size_type *, _QWORD *, __int16))(*(_QWORD *)a1 + 40))(a1, v165, a3, a4, a5, v108, &v182, a6, v157);
  }
  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + 582)
    && !*(_BYTE *)(a1 + 2016)
    && v176
    && *(_BYTE *)(*(_QWORD *)(v176 + 136) + 784))
  {
    v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 32))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(a1 + 40, v128);
    v129 = ImsOutStream::operator<<(v128, "deferring delivery of incoming ");
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v165 + 48))(&v186, v165);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v129 + 32))(v129, &v186);
    v130 = (_BYTE *)ImsOutStream::operator<<(v129, " until system wake");
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v130 + 64))(v130, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v130[17] = 0;
    if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v186.__r_.__value_.__l.__data_);
    v131 = *(SipTransportLayer::IncomingMessageList **)(a1 + 1944);
    v132 = operator new();
    v133 = (IncomingSipMessage *)v132;
    v134 = v163[1];
    v169[0] = *v163;
    v169[1] = v134;
    if (v134)
    {
      v135 = (unint64_t *)(v134 + 8);
      do
        v136 = __ldxr(v135);
      while (__stxr(v136 + 1, v135));
    }
    v137 = a8[1];
    v168[0] = *a8;
    v168[1] = v137;
    if (v137)
    {
      v138 = (unint64_t *)(v137 + 8);
      do
        v139 = __ldxr(v138);
      while (__stxr(v139 + 1, v138));
    }
    IncomingSipMessage::IncomingSipMessage(v132, v165, (uint64_t)a6, v169, v168, v68);
    SipTransportLayer::IncomingMessageList::add(v131, v133);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v168);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v169);
    v140 = *(_QWORD *)(a1 + 160);
    v115 = *(std::__shared_weak_count **)(a1 + 168);
    if (v115)
    {
      p_shared_weak_owners = (unint64_t *)&v115->__shared_weak_owners_;
      do
        v142 = __ldxr(p_shared_weak_owners);
      while (__stxr(v142 + 1, p_shared_weak_owners));
      do
        v143 = __ldxr(p_shared_weak_owners);
      while (__stxr(v143 + 1, p_shared_weak_owners));
    }
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + 584)
      && !std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 816), "SystemWakeWaitTimeout"))
    {
      if (v115)
      {
        v144 = (unint64_t *)&v115->__shared_weak_owners_;
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
      }
      v188 = 0;
      v146 = operator new(0x20uLL);
      *v146 = &off_1E78CBC38;
      v146[1] = a1;
      v146[2] = v140;
      v146[3] = v115;
      v188 = v146;
      v147 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      SipTimerContainer::startTimer((_QWORD *)(a1 + 808), (uint64_t)"SystemWakeWaitTimeout", (uint64_t)v187, *(_DWORD *)(v147 + 584), 0);
      v148 = v188;
      if (v188 == v187)
      {
        v149 = 4;
        v148 = v187;
      }
      else
      {
        if (!v188)
          goto LABEL_245;
        v149 = 5;
      }
      (*(void (**)(void))(*v148 + 8 * v149))();
    }
LABEL_245:
    if (v115)
    {
      std::__shared_weak_count::__release_weak(v115);
      goto LABEL_247;
    }
    goto LABEL_248;
  }
  v114 = *a8;
  if (*a8)
  {
    v115 = (std::__shared_weak_count *)a8[1];
    v116 = *a8;
    if (!v115)
    {
      v116 = *a8;
      goto LABEL_192;
    }
LABEL_190:
    v117 = (unint64_t *)&v115->__shared_owners_;
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
    goto LABEL_192;
  }
  v116 = *v163;
  v115 = (std::__shared_weak_count *)v163[1];
  if (v115)
    goto LABEL_190;
LABEL_192:
  if (*(_QWORD *)(a1 + 272)
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v165, 1) & 1) == 0)
  {
    v119 = *(_QWORD *)(a1 + 272);
    v186.__r_.__value_.__r.__words[0] = v116;
    v186.__r_.__value_.__l.__size_ = (std::string::size_type)v115;
    if (v115)
    {
      v120 = (unint64_t *)&v115->__shared_owners_;
      do
        v121 = __ldxr(v120);
      while (__stxr(v121 + 1, v120));
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD *, std::string *))(*(_QWORD *)v119 + 24))(v119, v165, a6, &v186);
    v122 = (std::__shared_weak_count *)v186.__r_.__value_.__l.__size_;
    if (v186.__r_.__value_.__l.__size_)
    {
      v123 = (unint64_t *)(v186.__r_.__value_.__l.__size_ + 8);
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
  }
  if (v114)
  {
    if (!v115)
      goto LABEL_248;
    v125 = (unint64_t *)&v115->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
  }
  else
  {
    if (!v115)
      goto LABEL_248;
    v127 = (unint64_t *)&v115->__shared_owners_;
    do
      v126 = __ldaxr(v127);
    while (__stlxr(v126 - 1, v127));
  }
  if (!v126)
  {
    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
LABEL_247:
    std::__shared_weak_count::__release_weak(v115);
  }
LABEL_248:
  (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
  v154 = v183;
  if (v183)
  {
    v155 = (unint64_t *)&v183->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
LABEL_149:
  PowerAssertionTerminationLock::~PowerAssertionTerminationLock(&v184);
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v178.__r_.__value_.__l.__data_);
  v101 = v177;
  if (v177)
  {
    v102 = (unint64_t *)&v177->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v179.__r_.__value_.__l.__data_);
}

void sub_1BEF92A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  std::__shared_weak_count *v50;
  uint64_t v51;

  if (v50)
  {
    std::__shared_weak_count::__release_weak(v50);
    std::__shared_weak_count::__release_weak(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v51 - 240);
  PowerAssertionTerminationLock::~PowerAssertionTerminationLock((uint64_t ***)(v51 - 224));
  if (a43 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  if (a49 < 0)
    operator delete(a44);
  _Unwind_Resume(a1);
}

void SipTransportLayer::createIPSecTransport(SipTransportLayer *this@<X0>, ImsResult *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  std::__shared_weak_count *v7;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  ims::result *v12;
  std::string *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string::size_type v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  SipStack *v39;
  ImsPrefs *v40;
  void *VirtualInterfaceMtuKey;
  void *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  ImsPrefs *v46;
  void *MaxUdpMessageSizeKey;
  void *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  char v63[8];
  std::__shared_weak_count *v64;
  std::string v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[5];
  _OWORD v70[5];
  SipStack *v71;
  std::__shared_weak_count *v72;

  v71 = 0;
  v72 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v7 || (v72 = std::__shared_weak_count::lock(v7)) == 0 || (v71 = (SipStack *)*((_QWORD *)this + 1)) == 0)
  {
    if (!a2)
    {
LABEL_15:
      *a4 = 0;
      a4[1] = 0;
      goto LABEL_16;
    }
    memset((char *)&v70[1] + 8, 0, 48);
    *(_QWORD *)&v70[0] = &off_1E78B7238;
    *((_QWORD *)&v70[0] + 1) = &_bambiDomain;
    LODWORD(v70[1]) = 1073741826;
    v14 = ImsResult::operator<<<char [14]>((uint64_t)v70, "stack is null");
    ImsResult::operator=((uint64_t)a2, v14);
LABEL_14:
    ImsResult::~ImsResult((ImsResult *)v70);
    goto LABEL_15;
  }
  SipTransportLayer::localClientAddress((SipTransportLayer *)v70, this);
  v9 = v70[0];
  if (!*((_QWORD *)&v70[0] + 1))
    goto LABEL_8;
  v10 = (unint64_t *)(*((_QWORD *)&v70[0] + 1) + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_8:
    if ((_QWORD)v9)
      goto LABEL_9;
    goto LABEL_52;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
  if (!(_QWORD)v9)
  {
LABEL_52:
    if (!a2)
      goto LABEL_15;
    memset((char *)&v70[1] + 8, 0, 48);
    *(_QWORD *)&v70[0] = &off_1E78B7238;
    *((_QWORD *)&v70[0] + 1) = &_bambiDomain;
    LODWORD(v70[1]) = 1073741826;
    v44 = ImsResult::operator<<<char [55]>((uint64_t)v70, "creating secure transport requires an active transport");
    ImsResult::operator=((uint64_t)a2, v44);
    goto LABEL_14;
  }
LABEL_9:
  memset(v70, 0, 72);
  SipHost::resolve((SipTransportLayer *)((char *)this + 296), 1, (uint64_t)v70);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v70[0] + 1) + 24))(*((_QWORD *)&v70[0] + 1), LODWORD(v70[1])))
  {
    if (a2)
    {
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
      v65.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v65.__r_.__value_.__r.__words[2]) = 1073741826;
      v12 = (ims::result *)ImsResult::operator<<<char [20]>((uint64_t)&v65, "can't resolve proxy");
      ims::result::resultWithCause(v12, (const ImsResult *)v70, (uint64_t)v69);
      ImsResult::operator=((uint64_t)a2, (uint64_t)v69);
      ImsResult::~ImsResult((ImsResult *)v69);
      v13 = &v65;
LABEL_56:
      ImsResult::~ImsResult((ImsResult *)v13);
      goto LABEL_57;
    }
    goto LABEL_57;
  }
  v18 = *((_QWORD *)this + 33);
  if (v18 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, 1) & 1) != 0)
  {
    *a4 = 0;
    a4[1] = 0;
    v20 = *((_QWORD *)this + 20);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    v65.__r_.__value_.__r.__words[0] = v20;
    if (!v19
      || (v21 = std::__shared_weak_count::lock(v19), (v65.__r_.__value_.__l.__size_ = (std::string::size_type)v21) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    v22 = v21;
    v23 = (std::__shared_weak_count *)operator new(0x208uLL);
    v23->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    v23->__shared_weak_owners_ = 0;
    v23->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CBCB8;
    v25 = v23 + 1;
    *(_QWORD *)&v69[0] = v20;
    *((_QWORD *)&v69[0] + 1) = v22;
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = 0uLL;
    SipIPSecTransportGroup::SipIPSecTransportGroup((uint64_t)&v23[1], v69);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v69[0] + 1);
    if (*((_QWORD *)&v69[0] + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v69[0] + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    *a4 = (uint64_t)v25;
    a4[1] = (uint64_t)v23;
    shared_weak_owners = (std::__shared_weak_count *)v23[8].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1)
      {
LABEL_44:
        if (v65.__r_.__value_.__l.__size_)
        {
          v37 = (unint64_t *)(v65.__r_.__value_.__l.__size_ + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            (*(void (**)(std::string::size_type))(*(_QWORD *)v65.__r_.__value_.__l.__size_ + 16))(v65.__r_.__value_.__l.__size_);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v65.__r_.__value_.__l.__size_);
          }
        }
        v39 = v71;
        v40 = (ImsPrefs *)SipStack::prefs(v71);
        VirtualInterfaceMtuKey = ImsPrefs::getVirtualInterfaceMtuKey(v40);
        v42 = ImsPrefs::prefWithKey(v40, (void **)VirtualInterfaceMtuKey);
        if (v42)
          v43 = (*(uint64_t (**)(void *))(*(_QWORD *)v42 + 56))(v42);
        else
          v43 = *((_DWORD *)VirtualInterfaceMtuKey + 15);
        v46 = (ImsPrefs *)SipStack::prefs(v39);
        MaxUdpMessageSizeKey = ImsPrefs::getMaxUdpMessageSizeKey(v46);
        v48 = ImsPrefs::prefWithKey(v46, (void **)MaxUdpMessageSizeKey);
        if (v48)
          v49 = (*(uint64_t (**)(void *))(*(_QWORD *)v48 + 56))(v48);
        else
          v49 = *((_DWORD *)MaxUdpMessageSizeKey + 15);
        memset(v69, 0, 72);
        v50 = *a4;
        SipTransportLayer::localClientAddress((SipTransportLayer *)v63, this);
        v51 = *((_QWORD *)this + 133);
        if (v51)
        {
          if (*(char *)(v51 + 55) < 0)
            std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)(v51 + 32), *(_QWORD *)(v51 + 40));
          else
            v65 = *(std::string *)(v51 + 32);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v65, "");
        }
        v52 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
        v61 = *((_QWORD *)this + 126);
        v62 = v52;
        if (v52)
        {
          v53 = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        SipIPSecTransportGroup::initialize(v50, (uint64_t)v63, (SipTransportLayer *)((char *)this + 288), &v65, &v61, v43, v49, a3, (uint64_t)v69);
        v55 = v62;
        if (v62)
        {
          v56 = (unint64_t *)&v62->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        v58 = v64;
        if (v64)
        {
          v59 = (unint64_t *)&v64->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v69[0] + 1) + 24))(*((_QWORD *)&v69[0] + 1), LODWORD(v69[1])))
        {
          std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](a4);
        }
        if (a2)
          ImsResult::operator=((uint64_t)a2, (uint64_t)v69);
        ImsResult::~ImsResult((ImsResult *)v69);
        goto LABEL_58;
      }
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
      do
        v32 = __ldxr(p_shared_weak_owners);
      while (__stxr(v32 + 1, p_shared_weak_owners));
      v23[8].__shared_owners_ = (uint64_t)v25;
      v23[8].__shared_weak_owners_ = (uint64_t)v23;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
      v34 = (unint64_t *)&v23->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      v23[8].__shared_owners_ = (uint64_t)v25;
      v23[8].__shared_weak_owners_ = (uint64_t)v23;
    }
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    goto LABEL_44;
  }
  if (a2)
  {
    memset((char *)&v69[1] + 8, 0, 48);
    *(_QWORD *)&v69[0] = &off_1E78B7238;
    *((_QWORD *)&v69[0] + 1) = &_bambiDomain;
    LODWORD(v69[1]) = 1073741833;
    v45 = ImsResult::operator<<<char [31]>((uint64_t)v69, "IPSec support is not available");
    ImsResult::operator=((uint64_t)a2, v45);
    v13 = (std::string *)v69;
    goto LABEL_56;
  }
LABEL_57:
  *a4 = 0;
  a4[1] = 0;
LABEL_58:
  ImsResult::~ImsResult((ImsResult *)v70);
LABEL_16:
  v15 = v72;
  if (v72)
  {
    v16 = (unint64_t *)&v72->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BEF93324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v26);
  ImsResult::~ImsResult((ImsResult *)(v27 - 176));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 96);
  _Unwind_Resume(a1);
}

void SipTransportLayer::setIPSecTransport(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  ImsPrefs *v35;
  void **AlwaysUseDefaultTransportKey;
  void *v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t (*v41)(uint64_t *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  void *__p[2];
  char v51;

  v2 = *a2;
  v3 = a1[126];
  if (*a2 == v3)
    return;
  v6 = a1 + 126;
  v7 = a1 + 128;
  v8 = a1[128];
  if (v8)
  {
    LoggableString::LoggableString((LoggableString *)__p, "TransportLayer");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 40))(v8, __p);
    if (v51 < 0)
      operator delete(__p[0]);
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v7, (__int128 *)__p);
    v9 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v10 = (unint64_t *)((char *)__p[1] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v3 = *v6;
    v2 = *a2;
  }
  if (v3)
  {
    if (v2)
    {
      std::shared_ptr<IpAddress>::operator=[abi:ne180100](v7, v6);
      v12 = (*(uint64_t (**)(uint64_t *))(a1[5] + 64))(a1 + 5);
      (*(void (**)(uint64_t *, uint64_t))(a1[5] + 16))(a1 + 5, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"keeping old SAs around for a bit: ", 34);
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[128] + 104))(a1[128], v12);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v12 + 17) = 0;
    }
    else
    {
      LoggableString::LoggableString((LoggableString *)__p, "TransportLayer");
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, __p);
      if (v51 < 0)
        operator delete(__p[0]);
    }
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v6, (__int128 *)__p);
    v13 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v14 = (unint64_t *)((char *)__p[1] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v2 = *a2;
  }
  if (v2)
  {
    v16 = (std::__shared_weak_count *)a1[131];
    v48 = a1[130];
    v49 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      v2 = *a2;
    }
    LoggableString::LoggableString((LoggableString *)__p, "TransportLayer");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 32))(v2, __p);
    if (v51 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(*a2 + 480) = a1 + 19;
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](v6, a2);
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](a1 + 130, v6);
    v19 = a1 + 5;
    v20 = (*(uint64_t (**)(uint64_t *))(a1[5] + 32))(a1 + 5);
    (*(void (**)(uint64_t *, uint64_t))(a1[5] + 16))(a1 + 5, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"set active transport to ", 24);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 104))(*a2, v20);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
    if (!v48)
      goto LABEL_47;
    v21 = (*(uint64_t (**)(uint64_t *))(*v19 + 64))(a1 + 5);
    (*(void (**)(uint64_t *, uint64_t))(*v19 + 16))(a1 + 5, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"old transport using port ", 25);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 208))(v48);
    std::ostream::operator<<();
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    v22 = (std::__shared_weak_count *)a1[2];
    if (v22)
      v23 = std::__shared_weak_count::lock(v22);
    else
      v23 = 0;
    if (v48 != a1[124])
    {
LABEL_42:
      if (v23)
      {
        v31 = (unint64_t *)&v23->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
LABEL_47:
      if (v49)
      {
        v33 = (unint64_t *)&v49->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      return;
    }
    v35 = (ImsPrefs *)(*(uint64_t (**)(uint64_t *))(*a1 + 184))(a1);
    AlwaysUseDefaultTransportKey = (void **)ImsPrefs::getAlwaysUseDefaultTransportKey(v35);
    v37 = ImsPrefs::prefWithKey(v35, AlwaysUseDefaultTransportKey);
    if (v37)
    {
      if (((*(uint64_t (**)(void *))(*(_QWORD *)v37 + 40))(v37) & 1) != 0)
        goto LABEL_42;
    }
    else if (*((_BYTE *)AlwaysUseDefaultTransportKey + 57))
    {
      goto LABEL_42;
    }
    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 208))(v48);
    v39 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
    v40 = a1 + 124;
    v41 = *(uint64_t (**)(uint64_t *))(*v19 + 64);
    if (v38 == *(__int16 *)(v39 + 432))
    {
      v42 = v41(a1 + 5);
      (*(void (**)(uint64_t *, uint64_t))(*v19 + 16))(a1 + 5, v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"will drop msg arriving on DefaultSipPort of ", 44);
      *(_BYTE *)(v42 + 17) = 0;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v40 + 104))(*v40, v42);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v42 + 17) = 0;
      *((_BYTE *)a1 + 2017) = 1;
    }
    else
    {
      v43 = v41(a1 + 5);
      (*(void (**)(_QWORD *, uint64_t))(*v19 + 16))(v19, v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)"removing old default transport ", 31);
      *(_BYTE *)(v43 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 104))(v48, v43);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v43 + 17) = 0;
      (*(void (**)(_QWORD))(*(_QWORD *)*v40 + 272))(*v40);
      v44 = *v40;
      LoggableString::LoggableString((LoggableString *)__p, "TransportLayer");
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v44 + 40))(v44, __p);
      if (v51 < 0)
        operator delete(__p[0]);
      __p[0] = 0;
      __p[1] = 0;
      std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v40, (__int128 *)__p);
      v45 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v46 = (unint64_t *)((char *)__p[1] + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
    }
    goto LABEL_42;
  }
  __p[0] = 0;
  __p[1] = 0;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v6, (__int128 *)__p);
  v24 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v25 = (unint64_t *)((char *)__p[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](a1 + 130, a1 + 124);
  if (*((_BYTE *)a1 + 2017))
  {
    v27 = (*(uint64_t (**)(uint64_t *))(a1[5] + 64))(a1 + 5);
    (*(void (**)(uint64_t *, uint64_t))(a1[5] + 16))(a1 + 5, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"will no longer drop msg arriving on DefaultSipPort of ", 54);
    *(_BYTE *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[124] + 104))(a1[124], v27);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v27 + 17) = 0;
    *((_BYTE *)a1 + 2017) = 0;
  }
  v29 = a1[5];
  v28 = a1 + 5;
  v30 = (*(uint64_t (**)(_QWORD *))(v29 + 32))(v28);
  (*(void (**)(_QWORD *, uint64_t))(*v28 + 16))(v28, v30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"set active transport to default transport", 41);
  *(_BYTE *)(v30 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v30 + 17) = 0;
}

void sub_1BEF93B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void SipTransportLayer::handleTransportError(SipTransportLayer *this, const ImsResult *a2)
{
  uint64_t v4;
  const ImsResult *v5;
  const ImsResult *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::string __p;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v4 = (*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 16))(this);
  v5 = a2;
  do
  {
    v6 = v5;
    v5 = (const ImsResult *)*((_QWORD *)v5 + 4);
  }
  while (v5);
  if (ImsResultSet::containsResult((ImsResultSet *)(v4 + 536), *((_DWORD *)v6 + 4)))
  {
    ++*((_DWORD *)this + 484);
    v7 = *(_DWORD *)((*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 16))(this) + 532);
    if (v7)
    {
      if (*((_DWORD *)this + 484) <= v7)
      {
        v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 48))((char *)this + 40);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 5) + 16))((char *)this + 40, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"handling transport error ", 25);
        *(_BYTE *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" of ", 4);
        *(_BYTE *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": ", 2);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v8);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
        if (*((_DWORD *)this + 484) == v7)
        {
          v9 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 56))((char *)this + 40);
          (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 5) + 16))((char *)this + 40, v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"too many transport errors", 25);
          *(_BYTE *)(v9 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v9 + 17) = 0;
          v10 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
          if (v10)
          {
            v11 = std::__shared_weak_count::lock(v10);
            v23 = v11;
            if (v11)
            {
              v12 = v11;
              v13 = *((_QWORD *)this + 1);
              v22 = v13;
              if (v13)
              {
                v14 = *(_QWORD *)(v13 + 136);
                if (*(char *)(v13 + 4159) < 0)
                  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v13 + 4136), *(_QWORD *)(v13 + 4144));
                else
                  __p = *(std::string *)(v13 + 4136);
                v18 = *(_QWORD *)(v14 + 248);
                if (v18)
                  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v18 + 48))(v18, &__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              p_shared_owners = (unint64_t *)&v12->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v16 = *((_QWORD *)this + 5);
    v15 = (char *)this + 40;
    v17 = (*(uint64_t (**)(char *))(v16 + 64))(v15);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v15 + 16))(v15, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"not a fatal transport error: ", 29);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
  }
}

void sub_1BEF93EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void SipTransportLayer::logPrefix(SipTransportLayer *this, ImsOutStream *a2)
{
  void *__p[2];
  char v4;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 240))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BEF93F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipTransportLayer::logPrefix(SipTransportLayer *this, ImsOutStream *a2)
{
  SipTransportLayer::logPrefix((SipTransportLayer *)((char *)this - 40), a2);
}

void SipTransportLayer::loggableName(SipTransportLayer *this@<X0>, LoggableString *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_7;
  }
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (v6 = *((_QWORD *)this + 1)) == 0 || !*(_BYTE *)(v6 + 176))
  {
LABEL_7:
    LoggableString::LoggableString(a2, "TransportLayer");
    if (!v5)
      return;
    goto LABEL_8;
  }
  LoggableString::LoggableString(a2, "TransportLayer(EMERGENCY)");
LABEL_8:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BEF94034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTransportLayer::loggableName(SipTransportLayer *this@<X0>, LoggableString *a2@<X8>)
{
  SipTransportLayer::loggableName((SipTransportLayer *)((char *)this - 144), a2);
}

void SipTransportLayer::ipsecTransportExpired(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  if ((SipTransportLayer::usingNullTransport((std::__shared_weak_count **)a1) & 1) == 0)
  {
    if (!*a2)
      return;
    if (*a2 != *(_QWORD *)(a1 + 1008))
    {
      v19 = *(_QWORD *)(a1 + 40);
      v18 = a1 + 40;
      v20 = (*(uint64_t (**)(uint64_t))(v19 + 64))(v18);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"unknown secure transport ", 25);
      *(_BYTE *)(v20 + 17) = 0;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 104))(*a2, v20);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v20 + 17) = 0;
      return;
    }
  }
  v24 = 0;
  v25 = 0;
  SipTransportLayer::setIPSecTransport((uint64_t *)a1, &v24);
  v4 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    v23 = v8;
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 144);
        v11 = *(_QWORD *)(v10 + 248);
        v12 = *(std::__shared_weak_count **)(v10 + 256);
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 168))(v11, 16, 0, 0);
        if (v12)
        {
          v15 = (unint64_t *)&v12->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v17 = v23;
        if (!v23)
          return;
      }
      else
      {
        v17 = v8;
      }
      v21 = (unint64_t *)&v17->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1BEF94228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTransportLayer::ipsecTransportExpired(uint64_t a1, _QWORD *a2)
{
  SipTransportLayer::ipsecTransportExpired(a1 - 152, a2);
}

void SipTransportLayer::removeConnections(SipTransportLayer *this, int a2, int a3, int a4)
{
  SipTransportGroup *v8;
  SipTransportGroup *v9;
  SipTransportGroup *v10;

  v8 = (SipTransportGroup *)*((_QWORD *)this + 124);
  if (v8)
    SipTransportGroup::removeConnections(v8, a2, a3, a4);
  v9 = (SipTransportGroup *)*((_QWORD *)this + 126);
  if (v9)
    SipTransportGroup::removeConnections(v9, a2, a3, a4);
  v10 = (SipTransportGroup *)*((_QWORD *)this + 128);
  if (v10)
    SipTransportGroup::removeConnections(v10, a2, a3, a4);
}

uint64_t SipTransportLayer::updateServiceClass(SipTransportLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 124);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 288))(v2);
  v3 = *((_QWORD *)this + 126);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 288))(v3);
  result = *((_QWORD *)this + 128);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 288))(result);
  return result;
}

uint64_t SipTransportLayer::updateCrlfKeepAliveInterval(SipTransportLayer *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  *(_DWORD *)((*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 16))(this) + 452) = a2;
  *(_DWORD *)((*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 16))(this) + 448) = a3;
  *(_DWORD *)((*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 16))(this) + 444) = a3;
  v6 = *((_QWORD *)this + 124);
  if (v6)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 296))(v6, a2, a3);
  v7 = *((_QWORD *)this + 126);
  if (v7)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 296))(v7, a2, a3);
  result = *((_QWORD *)this + 128);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 296))(result, a2, a3);
  return result;
}

uint64_t SipTransportLayer::updateCrlfKeepAliveNetwork(SipTransportLayer *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *((_QWORD *)this + 124);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 304))(v4, a2);
  v5 = *((_QWORD *)this + 126);
  if (v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 304))(v5, a2);
  result = *((_QWORD *)this + 128);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 304))(result, a2);
  return result;
}

uint64_t SipTransportLayer::config(SipTransportLayer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    return 1584;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 1584;
  v4 = v3;
  v5 = *((_QWORD *)this + 1) + 1584;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    return 1584;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 1584;
  v4 = v3;
  v5 = *((_QWORD *)this + 1) + 1584;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

void SipTransportLayer::setDropMaskFromString(uint64_t a1, std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  __int128 v12;
  size_t v13;
  std::string *v14;
  _BYTE *v15;
  std::string::size_type v16;
  std::string::size_type size;
  char v19;
  std::string *v20;
  unsigned int v21;
  _QWORD *v22;
  std::string::size_type *v23;
  std::string::size_type *v24;
  void **v25;
  char v26;
  _QWORD *v27;
  std::string::size_type v28;
  std::string::size_type *v29;
  _QWORD *v30;
  std::string::size_type v31;
  char *v32;
  std::string *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  std::string v40;
  std::string __str;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  std::string v46;

  v42 = 0;
  v43 = 0;
  v44 = 0;
  ims::tokenize(a2, &v42, 0x2Cu);
  v6 = v42;
  v5 = v43;
  if (v42 != v43)
  {
    v7 = "outgoing ";
    v8 = a1 + 40;
    if (a3)
      v7 = "incoming ";
    v38 = (uint64_t)v7;
    if (a3)
      v9 = 176;
    else
      v9 = 200;
    if (a3)
      v10 = a1 + 176;
    else
      v10 = a1 + 200;
    v11 = (void **)(v10 + 8);
    while (1)
    {
      memset(&__str, 0, sizeof(__str));
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
      }
      else
      {
        v12 = *(_OWORD *)v6;
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v12;
      }
      memset(&v40, 0, sizeof(v40));
      v39 = 0;
      v13 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(__str.__r_.__value_.__r.__words[2])
          : __str.__r_.__value_.__l.__size_;
      if (!v13)
        break;
      v14 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      v15 = memchr(v14, 58, v13);
      v16 = v15 - (_BYTE *)v14;
      if (!v15 || v16 == -1)
        break;
      std::string::basic_string(&v46, &__str, 0, v16, (std::allocator<char> *)&v45);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      v40 = v46;
      memset(&v46, 0, sizeof(v46));
      std::string::basic_string(&v46, &__str, v16 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v45);
      size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      v19 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v20 = &v46;
      }
      else
      {
        size = v46.__r_.__value_.__l.__size_;
        v20 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if (size == 1 && v20->__r_.__value_.__s.__data_[0] == 42)
      {
        v21 = -1;
      }
      else
      {
        v21 = strtoul((const char *)v20, 0, 10);
        v19 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      v39 = v21;
      if (v19 < 0)
      {
        operator delete(v46.__r_.__value_.__l.__data_);
        if (v21)
          goto LABEL_40;
      }
      else if (v21)
      {
        goto LABEL_40;
      }
LABEL_70:
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v6 += 24;
      if (v6 == v5)
        goto LABEL_75;
    }
    std::string::operator=(&v40, &__str);
LABEL_40:
    v22 = *v11;
    v23 = (std::string::size_type *)(v10 + 8);
    v24 = (std::string::size_type *)(v10 + 8);
    if (!*v11)
      goto LABEL_60;
    v25 = (void **)(v10 + 8);
    do
    {
      v26 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22 + 4, (void **)&v40.__r_.__value_.__l.__data_);
      if (v26 >= 0)
        v27 = v22;
      else
        v27 = v22 + 1;
      if (v26 >= 0)
        v25 = (void **)v22;
      v22 = (_QWORD *)*v27;
    }
    while (*v27);
    if (v25 != v11
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v40, v25 + 4) & 0x80) == 0)
    {
      v28 = (std::string::size_type)(v25 + 7);
      goto LABEL_67;
    }
    v29 = (std::string::size_type *)*v11;
    v23 = (std::string::size_type *)(v10 + 8);
    v24 = (std::string::size_type *)(v10 + 8);
    if (!*v11)
      goto LABEL_60;
    v23 = (std::string::size_type *)(v10 + 8);
    while (1)
    {
      while (1)
      {
        v24 = v29;
        v30 = v29 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v40, (void **)v29 + 4) & 0x80) == 0)
          break;
        v29 = (std::string::size_type *)*v24;
        v23 = v24;
        if (!*v24)
          goto LABEL_60;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v30, (void **)&v40.__r_.__value_.__l.__data_) & 0x80) == 0)break;
      v23 = v24 + 1;
      v29 = (std::string::size_type *)v24[1];
      if (!v29)
        goto LABEL_60;
    }
    v31 = *v23;
    if (!*v23)
    {
LABEL_60:
      v46.__r_.__value_.__r.__words[2] = 0;
      v32 = (char *)operator new(0x70uLL);
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      v46.__r_.__value_.__l.__size_ = v10 + 8;
      v33 = (std::string *)(v32 + 32);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v33, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
        *((_QWORD *)v32 + 6) = *((_QWORD *)&v40.__r_.__value_.__l + 2);
      }
      *(_OWORD *)(v32 + 88) = 0u;
      *((_QWORD *)v32 + 13) = 0;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 56) = 0u;
      *((_QWORD *)v32 + 11) = v32 + 96;
      v46.__r_.__value_.__s.__data_[16] = 1;
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = v24;
      *v23 = (std::string::size_type)v32;
      v34 = **(_QWORD **)(a1 + v9);
      if (v34)
      {
        *(_QWORD *)(a1 + v9) = v34;
        v32 = (char *)*v23;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v10 + 8), (uint64_t *)v32);
      ++*(_QWORD *)(v10 + 16);
      v31 = v46.__r_.__value_.__r.__words[0];
      v46.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v46);
    }
    v28 = v31 + 56;
    std::string::operator=((std::string *)v28, &v40);
LABEL_67:
    v35 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64);
    if (v39)
    {
      v36 = v35(a1 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(a1 + 40, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"will drop ", 10);
      *(_BYTE *)(v36 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), v38, 9);
      *(_BYTE *)(v36 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v36 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)" responses to ", 14);
      *(_BYTE *)(v36 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v36 + 32))(v36, &v40);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v36 + 17) = 0;
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(v28 + 32), &v39, &v39);
    }
    else
    {
      v37 = v35(a1 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(a1 + 40, v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"will drop ", 10);
      *(_BYTE *)(v37 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), v38, 9);
      *(_BYTE *)(v37 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v37 + 32))(v37, &v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)" requests", 9);
      *(_BYTE *)(v37 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v37 + 17) = 0;
      *(_BYTE *)(v28 + 24) = 1;
    }
    goto LABEL_70;
  }
LABEL_75:
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
}

void sub_1BEF94A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  a18 = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

void SipTransportLayer::networkManager(std::__shared_weak_count **this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t shared_weak_owners;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v4 = std::__shared_weak_count::lock(this[2]);
  v5 = v4;
  shared_weak_owners = this[1][5].__shared_weak_owners_;
  v7 = *(_QWORD *)(shared_weak_owners + 768);
  v8 = *(_QWORD *)(shared_weak_owners + 776);
  *a2 = v7;
  a2[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t SipTransportLayer::prefs(SipTransportLayer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    v2 = std::__shared_weak_count::lock(v2);
    v3 = v2;
    if (v2)
      v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  }
  else
  {
    v3 = 0;
  }
  v4 = SipStack::prefs((SipStack *)v2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v4;
}

void sub_1BEF94C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *SipTransportLayer::handleSystemWake(SipTransportLayer *this)
{
  uint64_t v2;

  if (*((_QWORD *)this + 124)
    && *(_DWORD *)((*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 16))(this) + 460))
  {
    v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 64))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 5) + 16))((char *)this + 40, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"SipTransportLayer::handleSystemWake()", 37);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 124) + 240))(*((_QWORD *)this + 124));
  }
  SipTimerContainer::cancelTimer((SipTransportLayer *)((char *)this + 808), (std::string *)"SystemWakeWaitTimeout");
  *((_BYTE *)this + 2016) = 0;
  return SipTransportLayer::processDeferredIncomingMessages(this);
}

uint64_t SipTransportLayer::handleKeepAliveWake(uint64_t this)
{
  uint64_t v1;
  _QWORD **v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(this + 992))
  {
    v1 = this;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
    if (*(_DWORD *)(this + 460))
    {
      v3 = *(_QWORD *)(v1 + 40);
      v2 = (_QWORD **)(v1 + 40);
      v4 = (*(uint64_t (**)(_QWORD **))(v3 + 64))(v2);
      ((void (*)(_QWORD **, uint64_t))(*v2)[2])(v2, v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"SipTransportLayer::handleKeepAliveWake()", 40);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      return (*(uint64_t (**)(_QWORD *))(*v2[119] + 312))(v2[119]);
    }
  }
  return this;
}

void SipTransportLayer::terminateRegistration(SipTransportLayer *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (SipTransportLayer::userAgent(a1))
  {
    v4 = SipTransportLayer::userAgent(a1);
    v5 = *(_QWORD *)(v4 + 248);
    v6 = *(std::__shared_weak_count **)(v4 + 256);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 168))(v5, a2, 0, 0);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BEF94E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *SipTransportLayer::addUAHeaders(SipTransportLayer *this, SipMessage *a2)
{
  std::string *result;
  SipUserAgent *v5;

  result = (std::string *)SipTransportLayer::userAgent(this);
  if (result)
  {
    v5 = (SipUserAgent *)SipTransportLayer::userAgent(this);
    return SipUserAgent::addUAHeaders(v5, a2);
  }
  return result;
}

uint64_t SipTransportLayer::currentAccessNetwork(SipTransportLayer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = *((_QWORD *)this + 1);
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 + 3136;
}

uint64_t SipTransportLayer::accessNetworks(SipTransportLayer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    return 3136;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 3136;
  v4 = v3;
  v5 = *((_QWORD *)this + 1) + 3136;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

uint64_t SipTransportLayer::countryOfOrigination(SipTransportLayer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    return 4088;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 4088;
  v4 = v3;
  v5 = *((_QWORD *)this + 1) + 4088;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

uint64_t SipTransportLayer::routableLocalAddress(SipTransportLayer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    return 4112;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 4112;
  v4 = v3;
  v5 = *((_QWORD *)this + 1) + 4112;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

uint64_t SipTransportLayer::lastRegistrationTime(SipTransportLayer *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = SipTransportLayer::userAgent(this);
  v2 = *(_QWORD *)(v1 + 248);
  v3 = *(std::__shared_weak_count **)(v1 + 256);
  if (!v3)
    return *(_QWORD *)(v2 + 496);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  v6 = *(_QWORD *)(v2 + 496);
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

uint64_t SipTransportLayer::uaConfig(SipTransportLayer *this)
{
  SipUserAgent *v1;

  v1 = (SipUserAgent *)SipTransportLayer::userAgent(this);
  return SipUserAgent::config(v1);
}

void SipTransportLayer::preferredSeviceClass(SipTransportLayer *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  SipStack *v7;
  ImsPrefs *v8;
  void **AddQosOptionsToSocketsKey;
  void *v10;
  ims::AccessNetwork *v11;
  _BOOL4 isWifi;
  uint64_t v13;
  ImsPrefs *v14;
  void **IgnoreWifiHotspotKey;
  void *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v4 || (v5 = std::__shared_weak_count::lock(v4)) == 0)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return;
  }
  v6 = v5;
  v7 = (SipStack *)*((_QWORD *)this + 1);
  if (!v7)
    goto LABEL_6;
  v8 = (ImsPrefs *)SipStack::prefs(v7);
  AddQosOptionsToSocketsKey = (void **)ImsPrefs::getAddQosOptionsToSocketsKey(v8);
  v10 = ImsPrefs::prefWithKey(v8, AddQosOptionsToSocketsKey);
  if (v10)
  {
    if (!(*(unsigned int (**)(void *))(*(_QWORD *)v10 + 40))(v10))
    {
LABEL_6:
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      goto LABEL_18;
    }
  }
  else if (!*((_BYTE *)AddQosOptionsToSocketsKey + 57))
  {
    goto LABEL_6;
  }
  v11 = (ims::AccessNetwork *)(*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 80))(this);
  isWifi = ims::AccessNetwork::isWifi(v11);
  v13 = *(_QWORD *)this;
  if (!isWifi)
  {
    v17 = (*(uint64_t (**)(SipTransportLayer *))(v13 + 256))(this) + 612;
    goto LABEL_17;
  }
  if (!*(_BYTE *)((*(uint64_t (**)(SipTransportLayer *))(v13 + 80))(this) + 48))
    goto LABEL_16;
  v14 = (ImsPrefs *)SipStack::prefs(v7);
  IgnoreWifiHotspotKey = (void **)ImsPrefs::getIgnoreWifiHotspotKey(v14);
  v16 = ImsPrefs::prefWithKey(v14, IgnoreWifiHotspotKey);
  if (!v16)
  {
    if (!*((_BYTE *)IgnoreWifiHotspotKey + 57))
      goto LABEL_13;
LABEL_16:
    v17 = (*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 256))(this) + 600;
    goto LABEL_17;
  }
  if (((*(uint64_t (**)(void *))(*(_QWORD *)v16 + 40))(v16) & 1) != 0)
    goto LABEL_16;
LABEL_13:
  v17 = (*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)this + 256))(this) + 588;
LABEL_17:
  *(_QWORD *)a2 = *(_QWORD *)v17;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v17 + 8);
LABEL_18:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1BEF95294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipTransportLayer::serviceRoute(SipTransportLayer *this)
{
  return (uint64_t)this + 696;
}

uint64_t SipTransportLayer::registrationPath(SipTransportLayer *this)
{
  return (uint64_t)this + 752;
}

uint64_t SipTransportLayer::proxy(SipTransportLayer *this)
{
  return (uint64_t)this + 288;
}

uint64_t SipTransportLayer::securityDelegate(SipTransportLayer *this)
{
  return *((_QWORD *)this + 33);
}

uint64_t SipTransportLayer::localInterface(SipTransportLayer *this)
{
  return *((_QWORD *)this + 133);
}

uint64_t SipTransportLayer::State::State(uint64_t a1, const std::string *a2)
{
  *(_QWORD *)a1 = off_1E78CB958;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  return a1;
}

void sub_1BEF95318(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *SipTransportLayer::State::loggableName@<X0>(SipTransportLayer::State *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 8));
}

uint64_t IncomingSipMessage::IncomingSipMessage(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, char a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;

  *(_QWORD *)(a1 + 8) = 0;
  v8 = a1 + 8;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *a4;
  v9 = a4[1];
  *(_QWORD *)(a1 + 32) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 40) = *a5;
  v12 = a5[1];
  *(_QWORD *)(a1 + 48) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_BYTE *)(a1 + 56) = a6;
  *(_QWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a3 + 32))(&v19);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v8, &v19);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a1;
}

void sub_1BEF954B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void PowerAssertionTerminationLock::~PowerAssertionTerminationLock(uint64_t ***this)
{
  uint64_t **v2;
  void *__p[2];
  char v4;

  v2 = *this;
  if (*this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    PowerAssertionLock::deinitialize(v2, (uint64_t)__p);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

_QWORD *std::list<IncomingSipMessage *>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1BEF955C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned long long>::clear(v1);
  _Unwind_Resume(a1);
}

void IncomingSipMessage::~IncomingSipMessage(IncomingSipMessage *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void std::__tree<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipTransportLayer::DropMessageInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipTransportLayer::DropMessageInfo>,0>(uint64_t a1)
{
  std::__tree<unsigned int>::destroy(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__shared_ptr_emplace<PowerAssertionLock>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CBAD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PowerAssertionLock>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CBAD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<PowerAssertionLock>::__on_zero_shared(uint64_t a1)
{
  PowerAssertionLock::~PowerAssertionLock((PowerAssertionLock **)(a1 + 24));
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t **std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>::operator+=[abi:ne180100](uint64_t **result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t *v8;

  if (a2)
  {
    v2 = *result;
    v3 = a2 - 0x505050505050505 * (((uint64_t)result[1] - **result) >> 3);
    if (v3 < 1)
    {
      v7 = 15 - v3;
      v8 = &v2[-(v7 >> 4)];
      *result = v8;
      v5 = *v8;
      v6 = ~(_DWORD)v7 & 0xF;
    }
    else
    {
      v4 = (uint64_t *)((char *)v2 + (((unint64_t)v3 >> 1) & 0x7FFFFFFFFFFFFFF8));
      *result = v4;
      v5 = *v4;
      v6 = v3 & 0xF;
    }
    result[1] = (uint64_t *)(v5 + 408 * v6);
  }
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>,std::__deque_iterator<SipUri,SipUri*,SipUri&,SipUri**,long,16l>>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  SipUri *v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(_QWORD **)a5;
  v8 = *(SipUri **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    v11 = *a1 + 6528;
    v14 = 0;
    v15 = 0uLL;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipUri const*,std::__deque_iterator<SipUri,SipUri*,SipUri&,SipUri**,long,16l>,0>((SipUri *)&v14, a2, v11, v7, v8);
    v8 = (SipUri *)*((_QWORD *)&v15 + 1);
    v7 = (_QWORD *)v15;
    *(_QWORD *)a5 = v15;
    for (*(_QWORD *)(a5 + 8) = v8; v10 != a3; *(_QWORD *)(a5 + 8) = v8)
    {
      v12 = *v10++;
      v14 = 0;
      v15 = 0uLL;
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipUri const*,std::__deque_iterator<SipUri,SipUri*,SipUri&,SipUri**,long,16l>,0>((SipUri *)&v14, v12, v12 + 6528, v7, v8);
      v8 = (SipUri *)*((_QWORD *)&v15 + 1);
      v7 = (_QWORD *)v15;
      *(_QWORD *)a5 = v15;
    }
    a2 = *a3;
  }
  v14 = 0;
  v15 = 0uLL;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipUri const*,std::__deque_iterator<SipUri,SipUri*,SipUri&,SipUri**,long,16l>,0>((SipUri *)&v14, a2, a4, v7, v8);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

SipUri *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipUri const*,std::__deque_iterator<SipUri,SipUri*,SipUri&,SipUri**,long,16l>,0>(SipUri *result, uint64_t a2, uint64_t a3, _QWORD *a4, SipUri *this)
{
  _QWORD *v6;
  uint64_t v7;
  SipUri *v8;
  uint64_t v9;
  SipUri *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  SipUri *v14;
  SipUri *v15;

  v6 = a4;
  v7 = a2;
  v8 = result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = (SipUri *)*a4;
    while (1)
    {
      v11 = 0xFAFAFAFAFAFAFAFBLL * ((v10 - this + 6528) >> 3);
      if ((uint64_t)(0xFAFAFAFAFAFAFAFBLL * ((v9 - v7) >> 3)) < v11)
        v11 = 0xFAFAFAFAFAFAFAFBLL * ((v9 - v7) >> 3);
      if (v11)
      {
        v12 = v7 + 408 * v11;
        v13 = 408 * v11;
        do
        {
          result = SipUri::operator=(this, v7);
          v7 += 408;
          this = (SipUri *)((char *)this + 408);
          v13 -= 408;
        }
        while (v13);
        v7 = v12;
      }
      if (v7 == v9)
        break;
      v14 = (SipUri *)v6[1];
      ++v6;
      v10 = v14;
      this = v14;
    }
    if ((SipUri *)(*v6 + 6528) == this)
    {
      v15 = (SipUri *)v6[1];
      ++v6;
      this = v15;
    }
  }
  *(_QWORD *)v8 = v9;
  *((_QWORD *)v8 + 1) = v6;
  *((_QWORD *)v8 + 2) = this;
  return result;
}

_QWORD *std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CBB20;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CBB20;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CBB20;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CBB20;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 208))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF95BEC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CBBA0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CBBA0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CBBA0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CBBA0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 208))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF95E54(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipTransportLayer::DropMessageInfo>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

_QWORD *std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CBC38;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CBC38;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CBC38;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CBC38;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 208))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF96100(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::__shared_ptr_emplace<SipIPSecTransportGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CBCB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipIPSecTransportGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CBCB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipIPSecTransportGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t __cxx_global_var_init_182()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_1BEDF4000);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_SipTransportLayer_cpp()
{
  _QWORD *v0;
  std::string __p;

  _MergedGlobals_9 = 0;
  qword_1ED70EC08 = 0;
  qword_1ED70EC10 = 0;
  v0 = operator new(8uLL);
  _MergedGlobals_9 = (uint64_t)v0;
  *v0 = 0x800000001;
  qword_1ED70EC08 = (uint64_t)(v0 + 1);
  qword_1ED70EC10 = (uint64_t)(v0 + 1);
  __cxa_atexit((void (*)(void *))std::vector<unsigned int>::~vector[abi:ne180100], &_MergedGlobals_9, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Uninitialized");
  SipTransportLayer::State::State((uint64_t)&SipTransportLayer::State::kStateUninitialized, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTransportLayer::State::~State, &SipTransportLayer::State::kStateUninitialized, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Idle");
  SipTransportLayer::State::State((uint64_t)&SipTransportLayer::State::kStateIdle, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTransportLayer::State::~State, &SipTransportLayer::State::kStateIdle, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WaitingForInterface");
  SipTransportLayer::State::State((uint64_t)&unk_1ED70EC30, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTransportLayer::State::~State, &unk_1ED70EC30, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WaitingForReachability");
  SipTransportLayer::State::State((uint64_t)&unk_1ED70EC50, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTransportLayer::State::~State, &unk_1ED70EC50, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "InitializingTransport");
  SipTransportLayer::State::State((uint64_t)&unk_1ED70EC70, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTransportLayer::State::~State, &unk_1ED70EC70, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70EC18, "WaitForReachabilityTimer");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &qword_1ED70EC18, &dword_1BEDF4000);
}

void sub_1BEF96410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BambiCallOptions::initializeFromPrefs(BambiCallOptions *this, const ImsPrefs *a2)
{
  void **SessionExpiresSecondsKey;
  void *v5;
  ImsPrefs *v6;
  void **MinSessionExpiresSecondsKey;
  void *v8;
  ImsPrefs *v9;
  void **SessionExpiresCushionKey;
  void *v11;
  ImsPrefs *v12;
  void **SendOfferWithInviteKey;
  void *v14;
  unint64_t v15;
  void **StrictTS24930PreconditionHeadersKey;
  void *v17;
  unint64_t v18;
  void **EchoRemotePreconditionStrengthKey;
  void *v20;
  unint64_t v21;
  void **InitialRemotePreconditionStrengthKey;
  ImsPrefs *v23;
  void **OnlyUpdatePreconditionsIfConfPresentKey;
  void *v25;
  unint64_t v26;
  void **PreconditionUpdateDelayTimerMillisecondsKey;
  void *v28;
  ImsPrefs *v29;
  void **PreconditionAllowMTUpdateKey;
  void *v31;
  unint64_t v32;
  void **SendPreconditionsInConfirmedSessionsKey;
  void *v34;
  unint64_t v35;
  void **SendPreconditionsInPrackKey;
  void *v37;
  unint64_t v38;
  void **RequirePreconditionsWhenSdpPresentKey;
  void *v40;
  unint64_t v41;
  void **IgnoreNonCompliantSupportedHeadersKey;
  void *v43;
  unint64_t v44;
  void **RequirePreconditionsWhenMandatoryKey;
  void *v46;
  unint64_t v47;
  const ImsPrefsKeyEnum *PreconditionsKey;
  ImsPrefs *v49;
  void **SetSessionTimerRefresherInInitialRequestKey;
  void *v51;
  unint64_t v52;
  void **SendReInviteInInactiveSessionsKey;
  void *v54;
  char v55;
  std::string __p;
  void *v57;
  uint64_t v58;
  uint64_t v59;

  SessionExpiresSecondsKey = (void **)ImsPrefs::getSessionExpiresSecondsKey(this);
  v5 = ImsPrefs::prefWithKey(a2, SessionExpiresSecondsKey);
  if (v5)
    v6 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v5 + 56))(v5);
  else
    v6 = (ImsPrefs *)*((unsigned int *)SessionExpiresSecondsKey + 15);
  *((_DWORD *)this + 8) = (_DWORD)v6;
  MinSessionExpiresSecondsKey = (void **)ImsPrefs::getMinSessionExpiresSecondsKey(v6);
  v8 = ImsPrefs::prefWithKey(a2, MinSessionExpiresSecondsKey);
  if (v8)
    v9 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v8 + 56))(v8);
  else
    v9 = (ImsPrefs *)*((unsigned int *)MinSessionExpiresSecondsKey + 15);
  *((_DWORD *)this + 9) = (_DWORD)v9;
  SessionExpiresCushionKey = (void **)ImsPrefs::getSessionExpiresCushionKey(v9);
  v11 = ImsPrefs::prefWithKey(a2, SessionExpiresCushionKey);
  if (v11)
    v12 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v11 + 56))(v11);
  else
    v12 = (ImsPrefs *)*((unsigned int *)SessionExpiresCushionKey + 15);
  *((_DWORD *)this + 11) = (_DWORD)v12;
  SendOfferWithInviteKey = (void **)ImsPrefs::getSendOfferWithInviteKey(v12);
  v14 = ImsPrefs::prefWithKey(a2, SendOfferWithInviteKey);
  if (v14)
    v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 40))(v14);
  else
    v15 = *((_BYTE *)SendOfferWithInviteKey + 57) != 0;
  *((_BYTE *)this + 50) = v15;
  StrictTS24930PreconditionHeadersKey = (void **)ImsPrefs::getStrictTS24930PreconditionHeadersKey((ImsPrefs *)v15);
  v17 = ImsPrefs::prefWithKey(a2, StrictTS24930PreconditionHeadersKey);
  if (v17)
    v18 = (*(uint64_t (**)(void *))(*(_QWORD *)v17 + 40))(v17);
  else
    v18 = *((_BYTE *)StrictTS24930PreconditionHeadersKey + 57) != 0;
  *((_BYTE *)this + 60) = v18;
  EchoRemotePreconditionStrengthKey = (void **)ImsPrefs::getEchoRemotePreconditionStrengthKey((ImsPrefs *)v18);
  v20 = ImsPrefs::prefWithKey(a2, EchoRemotePreconditionStrengthKey);
  if (v20)
    v21 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 40))(v20);
  else
    v21 = *((_BYTE *)EchoRemotePreconditionStrengthKey + 57) != 0;
  *((_BYTE *)this + 61) = v21;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  InitialRemotePreconditionStrengthKey = (void **)ImsPrefs::getInitialRemotePreconditionStrengthKey((ImsPrefs *)v21);
  v23 = (ImsPrefs *)ImsPrefs::stringValue(a2, InitialRemotePreconditionStrengthKey);
  OnlyUpdatePreconditionsIfConfPresentKey = (void **)ImsPrefs::getOnlyUpdatePreconditionsIfConfPresentKey(v23);
  v25 = ImsPrefs::prefWithKey(a2, OnlyUpdatePreconditionsIfConfPresentKey);
  if (v25)
    v26 = (*(uint64_t (**)(void *))(*(_QWORD *)v25 + 40))(v25);
  else
    v26 = *((_BYTE *)OnlyUpdatePreconditionsIfConfPresentKey + 57) != 0;
  *((_BYTE *)this + 62) = v26;
  PreconditionUpdateDelayTimerMillisecondsKey = (void **)ImsPrefs::getPreconditionUpdateDelayTimerMillisecondsKey((ImsPrefs *)v26);
  v28 = ImsPrefs::prefWithKey(a2, PreconditionUpdateDelayTimerMillisecondsKey);
  if (v28)
    v29 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v28 + 56))(v28);
  else
    v29 = (ImsPrefs *)*((unsigned int *)PreconditionUpdateDelayTimerMillisecondsKey + 15);
  *((_DWORD *)this + 16) = (_DWORD)v29;
  PreconditionAllowMTUpdateKey = (void **)ImsPrefs::getPreconditionAllowMTUpdateKey(v29);
  v31 = ImsPrefs::prefWithKey(a2, PreconditionAllowMTUpdateKey);
  if (v31)
    v32 = (*(uint64_t (**)(void *))(*(_QWORD *)v31 + 40))(v31);
  else
    v32 = *((_BYTE *)PreconditionAllowMTUpdateKey + 57) != 0;
  *((_BYTE *)this + 72) = v32;
  SendPreconditionsInConfirmedSessionsKey = (void **)ImsPrefs::getSendPreconditionsInConfirmedSessionsKey((ImsPrefs *)v32);
  v34 = ImsPrefs::prefWithKey(a2, SendPreconditionsInConfirmedSessionsKey);
  if (v34)
    v35 = (*(uint64_t (**)(void *))(*(_QWORD *)v34 + 40))(v34);
  else
    v35 = *((_BYTE *)SendPreconditionsInConfirmedSessionsKey + 57) != 0;
  *((_BYTE *)this + 73) = v35;
  SendPreconditionsInPrackKey = (void **)ImsPrefs::getSendPreconditionsInPrackKey((ImsPrefs *)v35);
  v37 = ImsPrefs::prefWithKey(a2, SendPreconditionsInPrackKey);
  if (v37)
    v38 = (*(uint64_t (**)(void *))(*(_QWORD *)v37 + 40))(v37);
  else
    v38 = *((_BYTE *)SendPreconditionsInPrackKey + 57) != 0;
  *((_BYTE *)this + 74) = v38;
  RequirePreconditionsWhenSdpPresentKey = (void **)ImsPrefs::getRequirePreconditionsWhenSdpPresentKey((ImsPrefs *)v38);
  v40 = ImsPrefs::prefWithKey(a2, RequirePreconditionsWhenSdpPresentKey);
  if (v40)
    v41 = (*(uint64_t (**)(void *))(*(_QWORD *)v40 + 40))(v40);
  else
    v41 = *((_BYTE *)RequirePreconditionsWhenSdpPresentKey + 57) != 0;
  *((_BYTE *)this + 63) = v41;
  IgnoreNonCompliantSupportedHeadersKey = (void **)ImsPrefs::getIgnoreNonCompliantSupportedHeadersKey((ImsPrefs *)v41);
  v43 = ImsPrefs::prefWithKey(a2, IgnoreNonCompliantSupportedHeadersKey);
  if (v43)
    v44 = (*(uint64_t (**)(void *))(*(_QWORD *)v43 + 40))(v43);
  else
    v44 = *((_BYTE *)IgnoreNonCompliantSupportedHeadersKey + 57) != 0;
  *((_BYTE *)this + 75) = v44;
  RequirePreconditionsWhenMandatoryKey = (void **)ImsPrefs::getRequirePreconditionsWhenMandatoryKey((ImsPrefs *)v44);
  v46 = ImsPrefs::prefWithKey(a2, RequirePreconditionsWhenMandatoryKey);
  if (v46)
    v47 = (*(uint64_t (**)(void *))(*(_QWORD *)v46 + 40))(v46);
  else
    v47 = *((_BYTE *)RequirePreconditionsWhenMandatoryKey + 57) != 0;
  *((_BYTE *)this + 76) = v47;
  PreconditionsKey = (const ImsPrefsKeyEnum *)ImsPrefs::getPreconditionsKey((ImsPrefs *)v47);
  ImsPrefs::stringValue(a2, PreconditionsKey, &__p);
  v49 = (ImsPrefs *)SipPreconditions::supportLevelFromString((uint64_t)&__p);
  *((_DWORD *)this + 13) = (_DWORD)v49;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SetSessionTimerRefresherInInitialRequestKey = (void **)ImsPrefs::getSetSessionTimerRefresherInInitialRequestKey(v49);
  v51 = ImsPrefs::prefWithKey(a2, SetSessionTimerRefresherInInitialRequestKey);
  if (v51)
    v52 = (*(uint64_t (**)(void *))(*(_QWORD *)v51 + 40))(v51);
  else
    v52 = *((_BYTE *)SetSessionTimerRefresherInInitialRequestKey + 57) != 0;
  *((_BYTE *)this + 49) = v52;
  SendReInviteInInactiveSessionsKey = (void **)ImsPrefs::getSendReInviteInInactiveSessionsKey((ImsPrefs *)v52);
  v54 = ImsPrefs::prefWithKey(a2, SendReInviteInInactiveSessionsKey);
  if (v54)
    v55 = (*(uint64_t (**)(void *))(*(_QWORD *)v54 + 40))(v54);
  else
    v55 = *((_BYTE *)SendReInviteInInactiveSessionsKey + 57) != 0;
  *((_BYTE *)this + 84) = v55;
  if (SHIBYTE(v59) < 0)
    operator delete(v57);
}

void sub_1BEF96850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t BambiCall::BambiCall(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  time_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::string v31;
  std::string __p;

  v10 = a2[1];
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + *(_QWORD *)(v10 - 48)) = a2[2];
  *(_QWORD *)(a1 + 24) = 0;
  v11 = a1 + 24;
  *(_BYTE *)(a1 + 12) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
  v12 = *a3;
  if (*(char *)(*a3 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v12 + 4136), *(_QWORD *)(v12 + 4144));
  else
    v31 = *(std::string *)(v12 + 4136);
  ImsLogContainer::ImsLogContainer(v11 + 48, &__p, &v31);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v13 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v13 - 48)) = a2[3];
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 72) = &off_1E78CBDD8;
  *(_QWORD *)(a1 + 200) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 208));
  *(_DWORD *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 454) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0x40A7700000000000;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 650) = 0u;
  *(_QWORD *)(a1 + 704) = 90;
  *(_WORD *)(a1 + 712) = 1;
  *(_BYTE *)(a1 + 714) = 1;
  *(_QWORD *)(a1 + 716) = 0x200000001;
  *(_WORD *)(a1 + 724) = 256;
  *(_BYTE *)(a1 + 726) = 1;
  *(_QWORD *)(a1 + 727) = 0;
  *(_WORD *)(a1 + 735) = 256;
  *(_DWORD *)(a1 + 737) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 748) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_BYTE *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 840) = 0x40A7700000000000;
  *(_BYTE *)(a1 + 984) = 0;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1048) = &off_1E78D08F8;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_WORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_QWORD *)(a1 + 1104) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_QWORD *)(a1 + 1112) = a1 + 1120;
  *(_BYTE *)(a1 + 1137) = 1;
  *(_QWORD *)(a1 + 1040) = &off_1E78BFCE8;
  *(_QWORD *)(a1 + 1352) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_QWORD *)(a1 + 1368) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_QWORD *)(a1 + 1376) = a1 + 1384;
  *(_BYTE *)(a1 + 1401) = 1;
  *(_QWORD *)(a1 + 1408) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_QWORD *)(a1 + 1416) = a1 + 1424;
  *(_BYTE *)(a1 + 1441) = 1;
  *(_BYTE *)(a1 + 1136) = 1;
  *(_BYTE *)(a1 + 1400) = 1;
  *(_BYTE *)(a1 + 1440) = 1;
  *(_BYTE *)(a1 + 1360) = 0;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_BYTE *)(a1 + 1560) = 0;
  *(_BYTE *)(a1 + 1544) = 0;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_QWORD *)(a1 + 1624) = 0;
  *(_BYTE *)(a1 + 1632) = 0;
  *(_BYTE *)(a1 + 1616) = 0;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_QWORD *)(a1 + 1480) = 0;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1700) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_BYTE *)(a1 + 1744) = 0;
  *(_QWORD *)(a1 + 1736) = 0;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_DWORD *)(a1 + 1748) = 0x10000;
  *(_DWORD *)(a1 + 1799) = 0;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_BYTE *)(a1 + 1812) = 0;
  *(_QWORD *)(a1 + 1804) = 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 384, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v15 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 192, (__int128 *)&__p);
  v17 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *a3;
  v21 = a3[1];
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 16);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(std::__shared_weak_count **)(a1 + 360);
  *(_QWORD *)(a1 + 352) = v20;
  *(_QWORD *)(a1 + 360) = v21;
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)(a1 + 368), *a4, a4[1]);
  *(_QWORD *)(a1 + 312) = a1 + *(_QWORD *)(*(_QWORD *)a1 - 48);
  v25 = *a3;
  if (*(char *)(*a3 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v25 + 4136), *(_QWORD *)(v25 + 4144));
  else
    __p = *(std::string *)(v25 + 4136);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a1 + 80));
  std::string::operator=((std::string *)(a1 + 280), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  v26 = time(0);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = v26;
  *(_DWORD *)(a1 + 440) = 1;
  *(_BYTE *)(a1 + 453) = 0;
  *(_WORD *)(a1 + 455) = 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 1472, (__int128 *)&__p);
  v27 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_DWORD *)(a1 + 444) = 1;
  *(_BYTE *)(a1 + 452) = 0;
  *(_QWORD *)(a1 + 512) = a5;
  *(_WORD *)(a1 + 1488) = 0;
  *(_BYTE *)(a1 + 457) = 0;
  return a1;
}

void sub_1BEF96DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, SipTimerContainer *a14, void **a15, uint64_t *a16, uint64_t a17, _Unwind_Exception *exception_object, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  void **v32;
  SipUri *v33;
  uint64_t v34;
  void **v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  void *v40;
  void *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;

  v40 = *(void **)(v31 + 1776);
  if (v40)
  {
    *(_QWORD *)(v31 + 1784) = v40;
    operator delete(v40);
  }
  v41 = *v32;
  if (*v32)
  {
    *(_QWORD *)(v31 + 1760) = v41;
    operator delete(v41);
  }
  if (*(char *)(v31 + 1687) < 0)
    operator delete(*(void **)(v31 + 1664));
  if (*(char *)(v31 + 1663) < 0)
    operator delete(*v35);
  ims::AccessNetwork::~AccessNetwork((void **)(v31 + 1568));
  ims::AccessNetwork::~AccessNetwork(v36);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v38);
  if (*(char *)(v31 + 1471) < 0)
    operator delete(*a10);
  SipUri::~SipUri(v33);
  if (*(char *)(v31 + 1039) < 0)
    operator delete(*a11);
  BambiCallOptions::~BambiCallOptions(v39);
  ims::LocationInfo::~LocationInfo(a12);
  if (*(char *)(v31 + 511) < 0)
    operator delete(*(void **)(v31 + 488));
  if (*(char *)(v31 + 487) < 0)
    operator delete(*(void **)(v31 + 464));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v37);
  v42 = *(std::__shared_weak_count **)(v31 + 360);
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  SipTimerContainer::~SipTimerContainer(a14);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34);
  v43 = *(std::__shared_weak_count **)(v31 + 184);
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  ImsLogContainer::~ImsLogContainer(a15);
  SipLockable::~SipLockable((SipLockable *)v31, a16);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::BambiCall(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  time_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string v26;
  std::string __p;

  *(_QWORD *)a1 = &off_1E78CC030;
  *(_BYTE *)(a1 + 12) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
  v8 = *a2;
  if (*(char *)(*a2 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(v8 + 4136), *(_QWORD *)(v8 + 4144));
  else
    v26 = *(std::string *)(v8 + 4136);
  ImsLogContainer::ImsLogContainer(a1 + 72, &__p, &v26);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)a1 = &off_1E78CBD40;
  *(_QWORD *)(a1 + 72) = &off_1E78CBDD8;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 208));
  *(_DWORD *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 454) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0x40A7700000000000;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 650) = 0u;
  *(_QWORD *)(a1 + 704) = 90;
  *(_WORD *)(a1 + 712) = 1;
  *(_BYTE *)(a1 + 714) = 1;
  *(_QWORD *)(a1 + 716) = 0x200000001;
  *(_WORD *)(a1 + 724) = 256;
  *(_BYTE *)(a1 + 726) = 1;
  *(_QWORD *)(a1 + 727) = 0;
  *(_WORD *)(a1 + 735) = 256;
  *(_DWORD *)(a1 + 737) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 748) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_BYTE *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 840) = 0x40A7700000000000;
  *(_BYTE *)(a1 + 984) = 0;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1048) = &off_1E78D08F8;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_WORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_QWORD *)(a1 + 1104) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_QWORD *)(a1 + 1112) = a1 + 1120;
  *(_BYTE *)(a1 + 1137) = 1;
  *(_QWORD *)(a1 + 1040) = &off_1E78BFCE8;
  *(_QWORD *)(a1 + 1352) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_QWORD *)(a1 + 1368) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_QWORD *)(a1 + 1376) = a1 + 1384;
  *(_BYTE *)(a1 + 1401) = 1;
  *(_QWORD *)(a1 + 1408) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_QWORD *)(a1 + 1416) = a1 + 1424;
  *(_BYTE *)(a1 + 1441) = 1;
  *(_BYTE *)(a1 + 1136) = 1;
  *(_BYTE *)(a1 + 1400) = 1;
  *(_BYTE *)(a1 + 1440) = 1;
  *(_BYTE *)(a1 + 1360) = 0;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_BYTE *)(a1 + 1560) = 0;
  *(_BYTE *)(a1 + 1544) = 0;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_QWORD *)(a1 + 1624) = 0;
  *(_BYTE *)(a1 + 1632) = 0;
  *(_BYTE *)(a1 + 1616) = 0;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_QWORD *)(a1 + 1480) = 0;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1700) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_BYTE *)(a1 + 1744) = 0;
  *(_QWORD *)(a1 + 1736) = 0;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_DWORD *)(a1 + 1748) = 0x10000;
  *(_DWORD *)(a1 + 1799) = 0;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_BYTE *)(a1 + 1812) = 0;
  *(_QWORD *)(a1 + 1804) = 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 384, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 192, (__int128 *)&__p);
  v12 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v13 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *a2;
  v16 = a2[1];
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 16);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(std::__shared_weak_count **)(a1 + 360);
  *(_QWORD *)(a1 + 352) = v15;
  *(_QWORD *)(a1 + 360) = v16;
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)(a1 + 368), *a3, a3[1]);
  *(_QWORD *)(a1 + 312) = a1 + *(_QWORD *)(*(_QWORD *)a1 - 48);
  v20 = *a2;
  if (*(char *)(*a2 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v20 + 4136), *(_QWORD *)(v20 + 4144));
  else
    __p = *(std::string *)(v20 + 4136);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a1 + 80));
  std::string::operator=((std::string *)(a1 + 280), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  v21 = time(0);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = v21;
  *(_DWORD *)(a1 + 440) = 1;
  *(_BYTE *)(a1 + 453) = 0;
  *(_WORD *)(a1 + 455) = 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 1472, (__int128 *)&__p);
  v22 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *(_DWORD *)(a1 + 444) = 1;
  *(_BYTE *)(a1 + 452) = 0;
  *(_QWORD *)(a1 + 512) = a4;
  *(_WORD *)(a1 + 1488) = 0;
  *(_BYTE *)(a1 + 457) = 0;
  return a1;
}

void sub_1BEF97490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t a11, SipTimerContainer *a12, uint64_t a13, void **a14, uint64_t a15, _Unwind_Exception *exception_object, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void **v30;
  void **v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  void **v36;
  SipUri *v37;
  void *v38;
  void *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;

  v38 = *(void **)(v29 + 1776);
  if (v38)
  {
    *(_QWORD *)(v29 + 1784) = v38;
    operator delete(v38);
  }
  v39 = *v30;
  if (*v30)
  {
    *(_QWORD *)(v29 + 1760) = v39;
    operator delete(v39);
  }
  if (*(char *)(v29 + 1687) < 0)
    operator delete(*(void **)(v29 + 1664));
  if (*(char *)(v29 + 1663) < 0)
    operator delete(*v31);
  ims::AccessNetwork::~AccessNetwork((void **)(v29 + 1568));
  ims::AccessNetwork::~AccessNetwork(v32);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34);
  if (*(char *)(v29 + 1471) < 0)
    operator delete(*v35);
  SipUri::~SipUri(v37);
  if (*(char *)(v29 + 1039) < 0)
    operator delete(*a9);
  BambiCallOptions::~BambiCallOptions(v36);
  ims::LocationInfo::~LocationInfo(a10);
  if (*(char *)(v29 + 511) < 0)
    operator delete(*(void **)(v29 + 488));
  if (*(char *)(v29 + 487) < 0)
    operator delete(*(void **)(v29 + 464));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v33);
  v40 = *(std::__shared_weak_count **)(v29 + 360);
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  SipTimerContainer::~SipTimerContainer(a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a13);
  v41 = *(std::__shared_weak_count **)(v29 + 184);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  ImsLogContainer::~ImsLogContainer(a14);
  SipLockable::~SipLockable((SipLockable *)v29, (uint64_t *)off_1E78CBE30);
  _Unwind_Resume(a1);
}

void BambiCall::~BambiCall(BambiCall *this, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 48)) = a2[3];
  *((_QWORD *)this + 9) = &off_1E78CBDD8;
  v5 = (char *)this + 72;
  v6 = ImsLogContainer::debugStream((BambiCall *)((char *)this + 72));
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"~BambiCall()", 12);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = *((_QWORD *)this + 48);
  if (v7)
  {
    v8 = *(std::__shared_weak_count **)(v7 + 776);
    *(_OWORD *)(v7 + 768) = 0u;
    if (v8)
      std::__shared_weak_count::__release_weak(v8);
  }
  v9 = *((_QWORD *)this + 64);
  if (v9)
  {
    if (*(char *)(v9 + 4671) < 0)
      operator delete(*(void **)(v9 + 4648));
    SipUri::~SipUri((SipUri *)(v9 + 4240));
    SipStackConfig::~SipStackConfig((void **)(v9 + 1752));
    SipRegistrationConfig::~SipRegistrationConfig((void **)(v9 + 80));
    if (*(char *)(v9 + 71) < 0)
      operator delete(*(void **)(v9 + 48));
    if (*(char *)(v9 + 47) < 0)
      operator delete(*(void **)(v9 + 24));
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    MEMORY[0x1C3B87100](v9, 0x10B2C400D6AAD2CLL);
  }
  v10 = (void *)*((_QWORD *)this + 222);
  if (v10)
  {
    *((_QWORD *)this + 223) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 219);
  if (v11)
  {
    *((_QWORD *)this + 220) = v11;
    operator delete(v11);
  }
  if (*((char *)this + 1687) < 0)
    operator delete(*((void **)this + 208));
  if (*((char *)this + 1663) < 0)
    operator delete(*((void **)this + 205));
  if (*((char *)this + 1615) < 0)
    operator delete(*((void **)this + 199));
  if (*((char *)this + 1591) < 0)
    operator delete(*((void **)this + 196));
  if (*((char *)this + 1543) < 0)
    operator delete(*((void **)this + 190));
  if (*((char *)this + 1519) < 0)
    operator delete(*((void **)this + 187));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1472);
  if (*((char *)this + 1471) < 0)
    operator delete(*((void **)this + 181));
  SipUri::~SipUri((BambiCall *)((char *)this + 1040));
  if (*((char *)this + 1039) < 0)
    operator delete(*((void **)this + 127));
  BambiCallOptions::~BambiCallOptions((void **)this + 83);
  if (*((char *)this + 663) < 0)
    operator delete(*((void **)this + 80));
  if (*((char *)this + 639) < 0)
    operator delete(*((void **)this + 77));
  if (*((char *)this + 615) < 0)
    operator delete(*((void **)this + 74));
  if (*((char *)this + 591) < 0)
    operator delete(*((void **)this + 71));
  if (*((char *)this + 511) < 0)
    operator delete(*((void **)this + 61));
  if (*((char *)this + 487) < 0)
    operator delete(*((void **)this + 58));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 384);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 368);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  SipTimerContainer::~SipTimerContainer((BambiCall *)((char *)this + 208));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  *((_QWORD *)this + 9) = off_1E78CFE68;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  SipLockable::~SipLockable(this, a2 + 1);
}

void BambiCall::~BambiCall(BambiCall *this)
{
}

{
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'BambiCall::~BambiCall(BambiCall *this)
{
}

{
  JUMPOUT(0x1C3B87100);
}

BOOL BambiCall::setMediaDirection(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL8 result;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ImsPrefs *v13;
  void **AllowHoldMusicKey;
  void *v15;
  int v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::string v19;
  std::string v20;
  unsigned int v21;
  std::string v22;
  std::string __p;
  unsigned int v24;

  result = 0;
  if (!a2 || !a3)
    return result;
  v24 = *(_DWORD *)(a2 + 44);
  if (a3 == 2)
  {
    a3 = 3;
LABEL_10:
    *(_DWORD *)(a2 + 44) = a3;
    if ((*(_DWORD *)(a1 + 440) & 0xFFFFFFFE) != 2)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (a3 != 3)
    goto LABEL_10;
  *(_DWORD *)(a2 + 44) = 2;
  if ((*(_DWORD *)(a1 + 440) & 0xFFFFFFFE) == 2)
  {
LABEL_11:
    a3 = 4;
    *(_DWORD *)(a2 + 44) = 4;
    goto LABEL_12;
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v8 = *(std::__shared_weak_count **)(a1 + 360);
  if (v8)
  {
    v8 = std::__shared_weak_count::lock(v8);
    v9 = v8;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    if (v8)
    {
      v8 = *(std::__shared_weak_count **)(a1 + 352);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    }
  }
  else
  {
    v9 = 0;
  }
  v13 = (ImsPrefs *)SipStack::prefs((SipStack *)v8);
  AllowHoldMusicKey = (void **)ImsPrefs::getAllowHoldMusicKey(v13);
  v15 = ImsPrefs::prefWithKey(v13, AllowHoldMusicKey);
  if (v15)
  {
    v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 40))(v15);
    if (!v9)
      goto LABEL_34;
  }
  else
  {
    v16 = *((_BYTE *)AllowHoldMusicKey + 57) != 0;
    if (!v9)
      goto LABEL_34;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_34:
  if (!v16)
    goto LABEL_11;
  a3 = *(_DWORD *)(a2 + 44);
LABEL_12:
  *(_DWORD *)(a1 + 444) = a3;
  if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "SetMediaDirection");
    BambiCall::activateMediaSessionIfAppropriate(a1, a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v11 = *(_QWORD *)(a1 + 72);
  v10 = a1 + 72;
  v12 = (*(uint64_t (**)(uint64_t))(v11 + 64))(v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Stream ", 7);
  *(_BYTE *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" direction set to ", 18);
  *(_BYTE *)(v12 + 17) = 0;
  v21 = *(_DWORD *)(a2 + 44);
  ims::toString<MediaDirection>(&v21, &v22);
  LoggableString::LoggableString(&__p, &v22);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 40))(v12, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" (was ", 6);
  *(_BYTE *)(v12 + 17) = 0;
  ims::toString<MediaDirection>(&v24, &v19);
  LoggableString::LoggableString(&v20, &v19);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 40))(v12, &v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)")", 1);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v24 != *(_DWORD *)(a2 + 44);
}

void sub_1BEF97C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BambiCall::activateMediaSessionIfAppropriate(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  SipDialogFork *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  unsigned int *v46;
  int v47;
  uint64_t i;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  ImsPrefs *v60;
  void **UseRTPDetectionAutoStartKey;
  void *v62;
  _BYTE *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  signed int v68;
  _BOOL4 v69;
  std::__shared_weak_count *v70;
  ImsPrefs *v71;
  void **v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  void *v86;
  int v87;
  std::__shared_weak_count *v88;
  int v89;
  ImsPrefs *v90;
  void **EnforceEarlyMediaDirectionKey;
  void *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  BOOL shouldContinueUpdatingSession;
  uint64_t v98;
  uint64_t (*v99)(uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  std::string::size_type v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  unint64_t *v109;
  unint64_t v110;
  ImsPrefs *v111;
  void **EnforceEarlyMediaInactiveDirectionKey;
  void *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  std::string v120;
  unsigned int v121;
  uint64_t v122[2];
  std::string v123;
  std::string __p;
  SipDialogFork *v125;
  std::__shared_weak_count *v126;
  std::string v127;

  if (!a2)
  {
    v28 = a1 + 72;
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 56))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"activateMediaSession (", 22);
    *(_BYTE *)(v29 + 17) = 0;
    LoggableString::LoggableString(&v127, a3);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v29 + 40))(v29, &v127);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"): no media stream", 18);
    *(_BYTE *)(v29 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_32;
  }
  v5 = *(_QWORD *)(a1 + 384);
  if (!v5)
    goto LABEL_31;
  v8 = *(_QWORD *)(v5 + 240);
  v7 = *(std::__shared_weak_count **)(v5 + 248);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
        goto LABEL_9;
LABEL_31:
      v31 = *(_QWORD *)(a1 + 72);
      v30 = a1 + 72;
      v29 = (*(uint64_t (**)(uint64_t))(v31 + 56))(v30);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"activateMediaSession (", 22);
      *(_BYTE *)(v29 + 17) = 0;
      LoggableString::LoggableString(&v127, a3);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v29 + 40))(v29, &v127);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"): no SIP session", 17);
      *(_BYTE *)(v29 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_32;
    }
  }
  if (!v8)
    goto LABEL_31;
LABEL_9:
  if (*(_BYTE *)(a1 + 453))
  {
    v12 = *(_QWORD *)(a1 + 384);
    v13 = *(_QWORD *)(v12 + 240);
    v14 = *(std::__shared_weak_count **)(v12 + 248);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = *(SipDialogFork **)(v13 + 2064);
    v18 = *(std::__shared_weak_count **)(v13 + 2072);
    v125 = v17;
    v126 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    if (v14)
    {
      v21 = (unint64_t *)&v14->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v125)
    {
      if (*(_BYTE *)(a1 + 456))
      {
        if ((SipSession::confirmed(*(SipSession **)(a1 + 384)) & 1) != 0)
          goto LABEL_24;
        if (!*(_BYTE *)(a1 + 1488))
        {
          v50 = *(_QWORD *)(a1 + 72);
          v49 = a1 + 72;
          v51 = (*(uint64_t (**)(uint64_t))(v50 + 64))(v49);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v51);
          v52 = ImsOutStream::operator<<(v51, "activateMediaSession (");
          LoggableString::LoggableString(&v127, a3);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v52 + 40))(v52, &v127);
          v45 = (_BYTE *)ImsOutStream::operator<<(v52, "): waiting for session to be confirmed");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_52;
        }
        if ((SipDialogFork::preconditionsSatisfied(v125) & 1) == 0)
        {
          v54 = *(_QWORD *)(a1 + 72);
          v53 = a1 + 72;
          v55 = (*(uint64_t (**)(uint64_t))(v54 + 64))(v53);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v55);
          v56 = ImsOutStream::operator<<(v55, "activateMediaSession (");
          LoggableString::LoggableString(&v127, a3);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v56 + 40))(v56, &v127);
          v57 = ImsOutStream::operator<<(v56, "): fork ");
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v57 + 32))(v57, (char *)v125 + 152);
          v45 = (_BYTE *)ImsOutStream::operator<<(v57, " preconditions have not been met yet, can’t activate the session");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_52;
        }
        if (*(_DWORD *)(*(_QWORD *)(a1 + 384) + 1364) == 1)
        {
          v42 = *(_QWORD *)(a1 + 72);
          v41 = a1 + 72;
          v43 = (*(uint64_t (**)(uint64_t))(v42 + 64))(v41);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v43);
          v44 = ImsOutStream::operator<<(v43, "activateMediaSession (");
          LoggableString::LoggableString(&v127, a3);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v44 + 40))(v44, &v127);
          v45 = (_BYTE *)ImsOutStream::operator<<(v44, "): no early media, waiting for session to be confirmed");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_52:
          v45[17] = 0;
          goto LABEL_69;
        }
        *(_OWORD *)&v127.__r_.__value_.__l.__data_ = 0uLL;
        v59 = *(std::__shared_weak_count **)(a1 + 360);
        if (v59)
        {
          v59 = std::__shared_weak_count::lock(v59);
          v127.__r_.__value_.__l.__size_ = (std::string::size_type)v59;
          if (v59)
          {
            v59 = *(std::__shared_weak_count **)(a1 + 352);
            v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
        }
        v60 = (ImsPrefs *)SipStack::prefs((SipStack *)v59);
        UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v60);
        v62 = ImsPrefs::prefWithKey(v60, UseRTPDetectionAutoStartKey);
        if (v62)
        {
          if (!(*(unsigned int (**)(void *))(*(_QWORD *)v62 + 40))(v62))
          {
LABEL_61:
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v127);
            goto LABEL_24;
          }
        }
        else if (!*((_BYTE *)UseRTPDetectionAutoStartKey + 57))
        {
          goto LABEL_61;
        }
        v87 = *(unsigned __int8 *)(a1 + 454);
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v127);
        if (!v87)
        {
          *(_OWORD *)&v127.__r_.__value_.__l.__data_ = 0uLL;
          v88 = *(std::__shared_weak_count **)(a1 + 360);
          if (v88)
          {
            v127.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v88);
            if (v127.__r_.__value_.__l.__size_)
            {
              v88 = *(std::__shared_weak_count **)(a1 + 352);
              v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
            }
            else
            {
              v88 = (std::__shared_weak_count *)v127.__r_.__value_.__r.__words[0];
            }
          }
          v111 = (ImsPrefs *)SipStack::prefs((SipStack *)v88);
          EnforceEarlyMediaInactiveDirectionKey = (void **)ImsPrefs::getEnforceEarlyMediaInactiveDirectionKey(v111);
          v113 = ImsPrefs::prefWithKey(v111, EnforceEarlyMediaInactiveDirectionKey);
          if (v113)
          {
            if (!(*(unsigned int (**)(void *))(*(_QWORD *)v113 + 40))(v113))
            {
LABEL_154:
              std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v127);
LABEL_157:
              v116 = *(_QWORD *)(a1 + 72);
              v115 = a1 + 72;
              v117 = (*(uint64_t (**)(uint64_t))(v116 + 64))(v115);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v115 + 16))(v115, v117);
              v118 = ImsOutStream::operator<<(v117, "activateMediaSession (");
              LoggableString::LoggableString(&v127, a3);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v118 + 40))(v118, &v127);
              v45 = (_BYTE *)ImsOutStream::operator<<(v118, "): RTP auto detection running");
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_52;
            }
          }
          else if (!*((_BYTE *)EnforceEarlyMediaInactiveDirectionKey + 57))
          {
            goto LABEL_154;
          }
          v114 = *(_DWORD *)(a1 + 448);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v127);
          if (v114 != 4)
            goto LABEL_157;
        }
LABEL_24:
        if ((*(_DWORD *)(a1 + 440) & 0xFFFFFFFE) == 2)
        {
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v23);
          v24 = ImsOutStream::operator<<(v23, "activateMediaSession (");
          LoggableString::LoggableString(&v127, a3);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v24 + 40))(v24, &v127);
          v25 = ImsOutStream::operator<<(v24, "): call is ");
          v26 = *(_DWORD *)(a1 + 440);
          if (v26 == 3)
          {
            v123.__r_.__value_.__r.__words[2] = 0x400000000000000;
            v27 = "held";
          }
          else if (v26 == 2)
          {
            v123.__r_.__value_.__r.__words[2] = 0x700000000000000;
            v27 = "holding";
          }
          else if (v26)
          {
            v123.__r_.__value_.__r.__words[2] = 0x700000000000000;
            v27 = "resumed";
          }
          else
          {
            v123.__r_.__value_.__r.__words[2] = 0x800000000000000;
            v27 = "resuming";
          }
          *(_OWORD *)&v123.__r_.__value_.__l.__data_ = *(_OWORD *)v27;
          LoggableString::LoggableString(&__p, &v123);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v25 + 40))(v25, &__p);
          v63 = (_BYTE *)ImsOutStream::operator<<(v25, ", can't activate the session");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v63[17] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v123.__r_.__value_.__l.__data_);
          goto LABEL_69;
        }
        v46 = (unsigned int *)(a1 + 444);
        if ((*(_DWORD *)(a1 + 444) - 1) < 2)
        {
LABEL_45:
          v122[0] = 0;
          v122[1] = 0;
          BambiCall::localSdp((BambiCall *)a1, v122);
          if (v122[0])
          {
            v47 = *(_DWORD *)(a2 + 48);
            for (i = *(_QWORD *)(v122[0] + 416); i != *(_QWORD *)(v122[0] + 424); i += 200)
            {
              if (*(_DWORD *)(i + 12) == v47)
                goto LABEL_79;
            }
            if (v47 != 2)
            {
              v79 = *(_QWORD *)(a1 + 72);
              v78 = a1 + 72;
              v80 = (*(uint64_t (**)(uint64_t))(v79 + 64))(v78);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 16))(v78, v80);
              v81 = (_BYTE *)ImsOutStream::operator<<(v80, "activateMediaSession: local SDP does not contain a media stream for type ");
              (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v81 + 32))(v81, &v127);
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_137:
              v81[17] = 0;
              if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_140:
                v32 = 0;
LABEL_150:
                std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v122);
                goto LABEL_73;
              }
              v86 = (void *)v127.__r_.__value_.__r.__words[0];
LABEL_139:
              operator delete(v86);
              goto LABEL_140;
            }
          }
LABEL_79:
          v68 = *v46;
          v121 = *v46;
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&a3->__r_.__value_.__l.__data_, "PreconditionsSatisfied"))
          {
            if (*(_DWORD *)(*(_QWORD *)(a1 + 384) + 1364) != 2)
            {
              v83 = *(_QWORD *)(a1 + 72);
              v82 = a1 + 72;
              v84 = (*(uint64_t (**)(uint64_t))(v83 + 64))(v82);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 16))(v82, v84);
              v85 = (_BYTE *)ImsOutStream::operator<<(v84, "activateMediaSession: preconditions are satisfied, but early media is not enforced, won't activate the session with direction ");
              ims::toString<MediaDirection>(v46, &__p);
              LoggableString::LoggableString(&v127, &__p);
              (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v85 + 40))(v85, &v127);
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v85 + 64))(v85, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v85[17] = 0;
              if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v127.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_140;
              v86 = (void *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_139;
            }
            v69 = 0;
            goto LABEL_128;
          }
          *(_OWORD *)&v127.__r_.__value_.__l.__data_ = 0uLL;
          v70 = *(std::__shared_weak_count **)(a1 + 360);
          if (v70)
          {
            v127.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v70);
            if (v127.__r_.__value_.__l.__size_)
            {
              v70 = *(std::__shared_weak_count **)(a1 + 352);
              v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
            }
            else
            {
              v70 = (std::__shared_weak_count *)v127.__r_.__value_.__r.__words[0];
            }
          }
          v90 = (ImsPrefs *)SipStack::prefs((SipStack *)v70);
          EnforceEarlyMediaDirectionKey = (void **)ImsPrefs::getEnforceEarlyMediaDirectionKey(v90);
          v92 = ImsPrefs::prefWithKey(v90, EnforceEarlyMediaDirectionKey);
          if (v92)
          {
            if (!(*(unsigned int (**)(void *))(*(_QWORD *)v92 + 40))(v92))
              goto LABEL_126;
          }
          else if (!*((_BYTE *)EnforceEarlyMediaDirectionKey + 57))
          {
            goto LABEL_126;
          }
          if (*(_BYTE *)(a1 + 1488))
          {
            v93 = SipSession::confirmed(*(SipSession **)(a1 + 384));
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v127);
            if ((v93 & 1) == 0 && *(_DWORD *)(a1 + 448) > v68)
            {
              v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v94);
              v95 = ImsOutStream::operator<<(v94, "Changing early media direction from ");
              ims::toString<MediaDirection>(&v121, &__p);
              LoggableString::LoggableString(&v127, &__p);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v95 + 40))(v95, &v127);
              v96 = (_BYTE *)ImsOutStream::operator<<(v95, " to ");
              ims::toString<MediaDirection>((unsigned int *)(a1 + 448), &v120);
              LoggableString::LoggableString(&v123, &v120);
              (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v96 + 40))(v96, &v123);
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v96 + 64))(v96, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v96[17] = 0;
              if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v123.__r_.__value_.__l.__data_);
              if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v120.__r_.__value_.__l.__data_);
              if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v127.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v121 = *(_DWORD *)(a1 + 448);
              v69 = v121 != 4;
              goto LABEL_128;
            }
LABEL_127:
            v69 = 1;
LABEL_128:
            shouldContinueUpdatingSession = BambiCall::shouldContinueUpdatingSession((SipSession **)a1);
            v98 = a1 + 72;
            v99 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64);
            if (shouldContinueUpdatingSession)
            {
              v100 = v99(a1 + 72);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 16))(a1 + 72, v100);
              v101 = ImsOutStream::operator<<(v100, "activating ");
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v101 + 32))(v101, &v127);
              v102 = ImsOutStream::operator<<(v101, " media session (");
              LoggableString::LoggableString(&__p, a3);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v102 + 40))(v102, &__p);
              v103 = (_BYTE *)ImsOutStream::operator<<(v102, ")");
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v103 + 64))(v103, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v103[17] = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v127.__r_.__value_.__l.__data_);
              *(_OWORD *)&v127.__r_.__value_.__l.__data_ = 0uLL;
              SipSession::getMostRecentRemoteFork(*(SipSession **)(a1 + 384), &v127);
              if (v127.__r_.__value_.__r.__words[0])
              {
                if (SipSession::confirmed(*(SipSession **)(a1 + 384)))
                {
                  v104 = v127.__r_.__value_.__r.__words[0];
                }
                else
                {
                  v104 = v127.__r_.__value_.__r.__words[0];
                  if ((*(_DWORD *)(a1 + 448) & 0xFFFFFFFB) != 0
                    && (*(_DWORD *)(v127.__r_.__value_.__r.__words[0] + 848) & 0xFFFFFFFB) != 0)
                  {
                    *(_BYTE *)(v127.__r_.__value_.__r.__words[0] + 852) = 1;
                    *(_BYTE *)(*(_QWORD *)(a1 + 384) + 1368) = 1;
                  }
                }
                if (!std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)(v104 + 152), (unsigned __int8 *)(a1 + 1016)))
                {
                  v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 64))(a1 + 72);
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 16))(a1 + 72, v107);
                  v108 = (_BYTE *)ImsOutStream::operator<<(v107, "Media settings mismatch: maybe we should update media settings");
                  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v108 + 64))(v108, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  v108[17] = 0;
                  v119 = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
                  if (v127.__r_.__value_.__l.__size_)
                  {
                    v109 = (unint64_t *)(v127.__r_.__value_.__l.__size_ + 8);
                    do
                      v110 = __ldxr(v109);
                    while (__stxr(v110 + 1, v109));
                  }
                  BambiCall::applyMediaSettingsUsingForkIfRequired((BambiCall *)a1, (BambiCallMediaStream *)a2, (uint64_t)&v119, 1);
                  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v119);
                }
              }
              std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v127);
              RTPManager::activateSessionWithId(*(_QWORD *)(a1 + 368), *(uint64_t **)(a2 + 32), v121, v69);
              v32 = 1;
              goto LABEL_150;
            }
            v105 = v99(a1 + 72);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 16))(v98, v105);
            v106 = ImsOutStream::operator<<(v105, "Skipped activating media session (");
            LoggableString::LoggableString(&v127, a3);
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v106 + 40))(v106, &v127);
            v81 = (_BYTE *)ImsOutStream::operator<<(v106, ")");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            goto LABEL_137;
          }
LABEL_126:
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v127);
          goto LABEL_127;
        }
        *(_OWORD *)&v127.__r_.__value_.__l.__data_ = 0uLL;
        v58 = *(std::__shared_weak_count **)(a1 + 360);
        if (v58)
        {
          v127.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v58);
          if (v127.__r_.__value_.__l.__size_)
          {
            v58 = *(std::__shared_weak_count **)(a1 + 352);
            v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
          }
          else
          {
            v58 = (std::__shared_weak_count *)v127.__r_.__value_.__r.__words[0];
          }
        }
        v71 = (ImsPrefs *)SipStack::prefs((SipStack *)v58);
        v72 = (void **)ImsPrefs::getEnforceEarlyMediaInactiveDirectionKey(v71);
        v73 = ImsPrefs::prefWithKey(v71, v72);
        if (v73)
        {
          if (!(*(unsigned int (**)(void *))(*(_QWORD *)v73 + 40))(v73))
            goto LABEL_92;
        }
        else if (!*((_BYTE *)v72 + 57))
        {
          goto LABEL_92;
        }
        if (*(_BYTE *)(a1 + 1488) && (SipSession::confirmed(*(SipSession **)(a1 + 384)) & 1) == 0)
        {
          v89 = *(_DWORD *)(a1 + 448);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v127);
          if (v89 != 4)
            goto LABEL_45;
LABEL_93:
          v75 = *(_QWORD *)(a1 + 72);
          v74 = a1 + 72;
          v76 = (*(uint64_t (**)(uint64_t))(v75 + 64))(v74);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 16))(v74, v76);
          v77 = (_BYTE *)ImsOutStream::operator<<(v76, "activateMediaSession: session is not expecting remote RTP packets, won't activate the session with direction ");
          ims::toString<MediaDirection>(v46, &__p);
          LoggableString::LoggableString(&v127, &__p);
          (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v77 + 40))(v77, &v127);
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v77 + 64))(v77, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v77[17] = 0;
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v127.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_72;
          v64 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_71;
        }
LABEL_92:
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v127);
        goto LABEL_93;
      }
      v40 = *(_QWORD *)(a1 + 72);
      v39 = a1 + 72;
      v38 = (*(uint64_t (**)(uint64_t))(v40 + 64))(v39);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"activateMediaSession (", 22);
      *(_BYTE *)(v38 + 17) = 0;
      LoggableString::LoggableString(&v127, a3);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v38 + 40))(v38, &v127);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"): no valid remote IP address", 29);
      *(_BYTE *)(v38 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      v37 = *(_QWORD *)(a1 + 72);
      v36 = a1 + 72;
      v38 = (*(uint64_t (**)(uint64_t))(v37 + 64))(v36);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"activateMediaSession (", 22);
      *(_BYTE *)(v38 + 17) = 0;
      LoggableString::LoggableString(&v127, a3);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v38 + 40))(v38, &v127);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"): no active fork", 17);
      *(_BYTE *)(v38 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(_BYTE *)(v38 + 17) = 0;
LABEL_69:
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_72:
      v32 = 0;
LABEL_73:
      v65 = v126;
      if (v126)
      {
        v66 = (unint64_t *)&v126->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      return v32;
    }
    v64 = (void *)v127.__r_.__value_.__r.__words[0];
LABEL_71:
    operator delete(v64);
    goto LABEL_72;
  }
  v35 = *(_QWORD *)(a1 + 72);
  v34 = a1 + 72;
  v29 = (*(uint64_t (**)(uint64_t))(v35 + 64))(v34);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"activateMediaSession (", 22);
  *(_BYTE *)(v29 + 17) = 0;
  LoggableString::LoggableString(&v127, a3);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v29 + 40))(v29, &v127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"): waiting for media session to be configured", 45);
  *(_BYTE *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_32:
  *(_BYTE *)(v29 + 17) = 0;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1BEF98D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 49) < 0)
    operator delete(*(void **)(v32 - 72));
  if (a32 < 0)
    operator delete(a27);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v32 - 88);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::checkForPause(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  void *__p[2];
  char v21;
  unsigned int v22;
  void *v23[2];
  char v24;
  int v25;

  v4 = a2;
  v25 = a3;
  if (!a2)
    goto LABEL_24;
  v8 = a1 + 72;
  v9 = *(_DWORD *)(a1 + 440);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Checking for pause (local= ", 27);
  *(_BYTE *)(v10 + 17) = 0;
  v22 = *(_DWORD *)(v4 + 44);
  ims::toString<MediaDirection>(&v22, v23);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)", remote= ", 10);
  *(_BYTE *)(v10 + 17) = 0;
  ims::toString<MediaDirection>((unsigned int *)&v25, __p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)")", 1);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v21 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  v11 = v9 & 0xFFFFFFFE;
  v12 = *(_DWORD *)(v4 + 44);
  if (v12 == 3)
  {
    v12 = 2;
  }
  else if (v12 == 2)
  {
    v12 = 3;
  }
  if (v11 == 2)
    v13 = a4;
  else
    v13 = 0;
  v14 = v12 >= a3 || a3 == 1;
  if (!v14 || v13)
  {
    v15 = BambiCall::setMediaDirection(a1, v4, a3, 0);
    if (BambiCall::shouldContinueUpdatingSession((SipSession **)a1))
    {
      if (v11 == 2)
        v16 = 4;
      else
        v16 = *(_DWORD *)(v4 + 44);
      RTPManager::deactivateSessionWithId(*(_QWORD *)(a1 + 368), *(_QWORD *)(v4 + 32), v16);
      if (!v15)
      {
        v18 = 0;
        goto LABEL_29;
      }
    }
    else
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Skipped deactivating media session (", 36);
      *(_BYTE *)(v17 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v17 + 17) = 0;
      LODWORD(v4) = 1;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)")", 1);
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
      if (!v15)
        goto LABEL_24;
    }
    v18 = 256;
LABEL_29:
    LODWORD(v4) = 1;
    return v18 | v4;
  }
  LODWORD(v4) = 0;
LABEL_24:
  v18 = 0;
  return v18 | v4;
}

void sub_1BEF991D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL BambiCall::shouldContinueUpdatingSession(SipSession **this)
{
  SipSession *v2;
  ImsPrefs *v3;
  void **SelectLatestForkWithActiveEarlyMediaKey;
  void *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BOOL8 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  ImsPrefs *v14;
  void **SelectForkWithActiveEarlyMediaKey;
  void *v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  SipStack *v23;
  std::__shared_weak_count *v24;

  if ((SipSession::confirmed(this[48]) & 1) != 0)
    return 1;
  v2 = this[48];
  if (!*((_BYTE *)v2 + 1368))
    return 1;
  SipSessionInterface::stack((std::__shared_weak_count *)v2, &v23);
  v3 = (ImsPrefs *)SipStack::prefs(v23);
  SelectLatestForkWithActiveEarlyMediaKey = (void **)ImsPrefs::getSelectLatestForkWithActiveEarlyMediaKey(v3);
  v5 = ImsPrefs::prefWithKey(v3, SelectLatestForkWithActiveEarlyMediaKey);
  if (v5)
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 40))(v5);
  else
    v6 = *((_BYTE *)SelectLatestForkWithActiveEarlyMediaKey + 57) != 0;
  v7 = v24;
  if (!v24)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v6)
      goto LABEL_11;
  }
  else
  {
LABEL_10:
    if (v6)
    {
LABEL_11:
      v23 = 0;
      v24 = 0;
      SipSession::getMostRecentRemoteFork(this[48], &v23);
      v10 = v23 && (*((_DWORD *)v23 + 212) & 0xFFFFFFFB) != 0;
      v11 = v24;
      if (v24)
      {
        v12 = (unint64_t *)&v24->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        goto LABEL_35;
      }
      return v10;
    }
  }
  SipSessionInterface::stack((std::__shared_weak_count *)this[48], &v23);
  v14 = (ImsPrefs *)SipStack::prefs(v23);
  SelectForkWithActiveEarlyMediaKey = (void **)ImsPrefs::getSelectForkWithActiveEarlyMediaKey(v14);
  v16 = ImsPrefs::prefWithKey(v14, SelectForkWithActiveEarlyMediaKey);
  if (v16)
    v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v16 + 40))(v16);
  else
    v17 = *((_BYTE *)SelectForkWithActiveEarlyMediaKey + 57) != 0;
  v18 = v24;
  if (v24)
  {
    v19 = (unint64_t *)&v24->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (v17)
        goto LABEL_28;
      return 1;
    }
  }
  if (!v17)
    return 1;
LABEL_28:
  v23 = 0;
  v24 = 0;
  SipSession::getMostRecentRemoteFork(this[48], &v23);
  v10 = v23 && *((_BYTE *)v23 + 852);
  v11 = v24;
  if (v24)
  {
    v21 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v21);
    while (__stlxr(v13 - 1, v21));
LABEL_35:
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_1BEF99428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCall::handleSdpOfferInFork(uint64_t a1@<X0>, SDPModel **a2@<X1>, SipDialogFork **a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  SDPModel *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  ImsPrefs *v16;
  void **UseRestrictiveDirectionWhenCreatingAnswerKey;
  void *v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int hasStream;
  SipDialogFork *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  _BOOL4 v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t j;
  int v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  int v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  int v74;
  int v75;
  int v76;
  unint64_t *v77;
  unint64_t v78;
  ImsResult *v79;
  int v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  int v87;
  uint64_t v88;
  SDPModel *v89;
  uint64_t i;
  SDPModel *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  ImsResult *v103;
  int v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  SDPModel *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _BOOL4 v123;
  int v124;
  void (**v125)(ImsResult *__hidden);
  uint64_t *v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  SDPModel *v133;
  std::__shared_weak_count *v134;
  void (**v135)(ImsResult *__hidden);
  uint64_t *v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  SDPModel *v141[2];
  uint64_t v142[2];
  _QWORD v143[3];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  void (**v147)(ImsResult *__hidden);
  uint64_t *v148;
  int v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  _BYTE v155[32];
  __int128 v156;

  v144 = 0u;
  v145 = 0u;
  v146 = 0u;
  v143[1] = &_bambiDomain;
  v143[2] = 0;
  v8 = (std::__shared_weak_count *)a2[1];
  v142[0] = (uint64_t)*a2;
  v142[1] = (uint64_t)v8;
  v143[0] = &off_1E78B7238;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  BambiCall::checkRemoteSdpForValidAddress(a1, v142);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *a2;
  v147 = 0;
  v148 = 0;
  v14 = *(std::__shared_weak_count **)(a1 + 360);
  if (v14)
  {
    v14 = std::__shared_weak_count::lock(v14);
    v15 = v14;
    v148 = (uint64_t *)v14;
    if (v14)
    {
      v14 = *(std::__shared_weak_count **)(a1 + 352);
      v147 = (void (**)(ImsResult *__hidden))v14;
    }
  }
  else
  {
    v15 = 0;
  }
  v16 = (ImsPrefs *)SipStack::prefs((SipStack *)v14);
  UseRestrictiveDirectionWhenCreatingAnswerKey = (void **)ImsPrefs::getUseRestrictiveDirectionWhenCreatingAnswerKey(v16);
  v18 = ImsPrefs::prefWithKey(v16, UseRestrictiveDirectionWhenCreatingAnswerKey);
  if (v18)
    v19 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 40))(v18);
  else
    v19 = *((_BYTE *)UseRestrictiveDirectionWhenCreatingAnswerKey + 57) != 0;
  v124 = SDPModel::preferredDirection(v13, 2, v19);
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v22 = *(_QWORD *)(a1 + 192);
  if (!v22)
  {
    if (*(_BYTE *)(a1 + 1488))
      goto LABEL_140;
LABEL_142:
    v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v88 + 8), (uint64_t)"handleSdpOffer: initializing MT media session", 45);
    *(_BYTE *)(v88 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v88 + 64))(v88, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v88 + 17) = 0;
    v89 = *a2;
    for (i = *((_QWORD *)*a2 + 52); ; i += 200)
    {
      if (i == *((_QWORD *)*a2 + 53))
        goto LABEL_147;
      if (*(_DWORD *)(i + 12) == 3)
        break;
    }
    *(_BYTE *)(a1 + 1744) = 1;
LABEL_147:
    v91 = a2[1];
    v141[0] = v89;
    v141[1] = v91;
    if (v91)
    {
      v92 = (unint64_t *)((char *)v91 + 8);
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
    }
    BambiCall::initializeMediaForMTSession((BambiCall *)a1, v141, (uint64_t)&v147);
    ImsResult::operator=((uint64_t)v143, (uint64_t)&v147);
    ImsResult::~ImsResult((ImsResult *)&v147);
    if (v91)
    {
      v94 = (unint64_t *)((char *)v91 + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        (*(void (**)(SDPModel *))(*(_QWORD *)v91 + 16))(v91);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v91);
      }
    }
    v96 = *(std::__shared_weak_count **)(a1 + 360);
    if (!v96)
      goto LABEL_179;
    v97 = std::__shared_weak_count::lock(v96);
    v126 = (uint64_t *)v97;
    if (!v97)
      goto LABEL_179;
    v98 = v97;
    v99 = *(_QWORD *)(a1 + 352);
    v125 = (void (**)(ImsResult *__hidden))v99;
    if (v99 && *(_BYTE *)(v99 + 1024))
    {
      v100 = *(_QWORD *)(a1 + 192);
      v138 = 0u;
      v139 = 0u;
      v140 = 0u;
      v135 = &off_1E78B7238;
      v136 = &_bambiDomain;
      v137 = 0;
      v101 = *(_QWORD **)(v100 + 1904);
      v102 = (_QWORD *)(v100 + 1912);
      if (v101 != (_QWORD *)(v100 + 1912))
      {
        while (1)
        {
          BambiCall::checkForPause(a1, v101[5], v124, 0);
          v150 = 0u;
          v151 = 0u;
          v152 = 0u;
          v147 = &off_1E78B7238;
          v148 = &_bambiDomain;
          v149 = 0;
          ImsResult::operator=((uint64_t)&v135, (uint64_t)&v147);
          ImsResult::~ImsResult((ImsResult *)&v147);
          v150 = 0u;
          v151 = 0u;
          v152 = 0u;
          v147 = &off_1E78B7238;
          v148 = &_bambiDomain;
          v149 = 0;
          if (v136 != &_bambiDomain)
            break;
          v104 = v137;
          ImsResult::~ImsResult(v103);
          if (!v104)
          {
            v105 = (_QWORD *)v101[1];
            if (v105)
            {
              do
              {
                v106 = v105;
                v105 = (_QWORD *)*v105;
              }
              while (v105);
            }
            else
            {
              do
              {
                v106 = (_QWORD *)v101[2];
                v54 = *v106 == (_QWORD)v101;
                v101 = v106;
              }
              while (!v54);
            }
            v101 = v106;
            if (v106 != v102)
              continue;
          }
          goto LABEL_172;
        }
        ImsResult::~ImsResult(v103);
      }
LABEL_172:
      ImsResult::~ImsResult((ImsResult *)&v135);
    }
    v113 = (unint64_t *)&v98->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
    goto LABEL_179;
  }
  hasStream = SDPSession::hasStream(*(SDPSession **)(a1 + 192));
  if (!*(_BYTE *)(a1 + 1488) && (hasStream & 1) == 0)
    goto LABEL_142;
  if (!hasStream)
  {
LABEL_140:
    v84 = *(_QWORD *)(a1 + 72);
    v83 = a1 + 72;
    v85 = (*(uint64_t (**)(uint64_t))(v84 + 48))(v83);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v83 + 16))(v83, v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v85 + 8), (uint64_t)"Received a new offer/answer, but we don't have any media streams to handle it!", 78);
    *(_BYTE *)(v85 + 17) = 0;
    v86 = (_BYTE *)(v85 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v85 + 64))(v85, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v87 = 491;
LABEL_141:
    *v86 = 0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &SipResultDomain::_domain;
    *(_DWORD *)(a4 + 16) = v87;
    goto LABEL_188;
  }
  v24 = *a3;
  if (!*a3)
  {
    v108 = *(_QWORD *)(a1 + 72);
    v107 = a1 + 72;
    v109 = (*(uint64_t (**)(uint64_t))(v108 + 56))(v107);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v107 + 16))(v107, v109);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)"handleSdpOffer: fork is null", 28);
    *(_BYTE *)(v109 + 17) = 0;
    v86 = (_BYTE *)(v109 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v109 + 64))(v109, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v87 = 481;
    goto LABEL_141;
  }
  v25 = (std::__shared_weak_count *)a2[1];
  v133 = *a2;
  v134 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v24 = *a3;
  }
  v131 = 0;
  v132 = 0;
  v28 = SipDialogFork::incrementSdpVersion(v24);
  v29 = SDPSession::handleOfferAnswer(v22, &v133, (uint64_t)&v131, v28);
  v30 = v132;
  if (v132)
  {
    v31 = (unint64_t *)&v132->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v134;
  if (v134)
  {
    v34 = (unint64_t *)&v134->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (!v29)
  {
    v111 = *(_QWORD *)(a1 + 72);
    v110 = a1 + 72;
    v112 = (*(uint64_t (**)(uint64_t))(v111 + 56))(v110);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, v112);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v112 + 8), (uint64_t)"handleSdpOffer: couldn't create answer for offer", 48);
    *(_BYTE *)(v112 + 17) = 0;
    v86 = (_BYTE *)(v112 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v112 + 64))(v112, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v87 = 488;
    goto LABEL_141;
  }
  v36 = *(_QWORD *)(a1 + 192);
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v125 = &off_1E78B7238;
  v126 = &_bambiDomain;
  v127 = 0;
  v37 = *(_QWORD **)(v36 + 1904);
  v122 = (_QWORD *)(v36 + 1912);
  if (v37 == (_QWORD *)(v36 + 1912))
    goto LABEL_178;
  v123 = v29 == 2;
  v121 = a1 + 72;
  while (1)
  {
    v38 = v37[5];
    v39 = BambiCall::checkForPause(a1, v38, v124, 0);
    if (*(_BYTE *)(a1 + 456))
      v40 = v124;
    else
      v40 = 4;
    v41 = BambiCall::setMediaDirection(a1, v38, v40, 0);
    v42 = (unsigned __int16)v39 > 0xFFu || v41;
    BambiCall::localSdp((BambiCall *)a1, (uint64_t *)v155);
    v43 = *(_DWORD *)(v38 + 48);
    v44 = *(_QWORD *)(*(_QWORD *)v155 + 416);
    if (*(_DWORD *)(v44 + 12) != v43)
    {
      v45 = v44 + 200;
      do
      {
        v46 = *(_DWORD *)(v45 + 12);
        v45 += 200;
      }
      while (v46 != v43);
      v44 = v45 - 200;
    }
    for (j = *(_QWORD *)(v44 + 144); *(_DWORD *)(j + 136) != 4; j = *(_QWORD *)(j + 8))
      ;
    v48 = *(_DWORD *)(j + 56) - 1;
    if (v48 > 2)
      v49 = 0;
    else
      v49 = dword_1BF2A278C[v48];
    v50 = *(std::__shared_weak_count **)&v155[8];
    if (*(_QWORD *)&v155[8])
    {
      v51 = (unint64_t *)(*(_QWORD *)&v155[8] + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if ((v39 & v42) == 1)
    {
      v53 = *(_DWORD *)(v38 + 44);
      v54 = v53 == 4 || v53 == 2;
      if (v54 && *(_DWORD *)(v38 + 48) == 4 && *(_QWORD *)(a1 + 400))
      {
        *(_BYTE *)(a1 + 1812) = 1;
        v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(v121);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v121 + 16))(v121, v55);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)"RTT remote hold detected!!", 26);
        *(_BYTE *)(v55 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v55 + 17) = 0;
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 400) + 248))(*(_QWORD *)(a1 + 400), 0);
      }
    }
    if (v42)
    {
      v56 = *(_DWORD *)(v38 + 44);
      if (v56 != 2 && v56 != 4 && *(_BYTE *)(a1 + 1812))
      {
        v57 = *(_DWORD *)(v38 + 48);
        v58 = *(_QWORD *)(a1 + 400);
        if (v57 != 4)
          goto LABEL_81;
        if (v58)
        {
          *(_BYTE *)(a1 + 1812) = 0;
          v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(v121);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v121 + 16))(v121, v59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v59 + 8), (uint64_t)"RTT remote resume detected!!", 28);
          *(_BYTE *)(v59 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v59 + 64))(v59, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v59 + 17) = 0;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 400) + 248))(*(_QWORD *)(a1 + 400), 1);
        }
      }
    }
    v57 = *(_DWORD *)(v38 + 48);
    v58 = *(_QWORD *)(a1 + 400);
LABEL_81:
    *(_DWORD *)(v38 + 52) = v49;
    if (v58)
    {
      v156 = 0u;
      memset(v155, 0, sizeof(v155));
      v60 = v57 - 1;
      if (v60 > 3)
        v61 = 0;
      else
        v61 = dword_1BF2A27A0[v60];
      v62 = *(_DWORD *)(a1 + 440);
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v153, (_QWORD *)(a1 + 176));
      BambiCallHoldResumeIndicationEvent::BambiCallHoldResumeIndicationEvent((uint64_t)v155, (v62 & 0xFFFFFFFE) == 2, v49, v61, &v153);
      v63 = v154;
      if (v154)
      {
        v64 = (unint64_t *)&v154->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 400) + 16))(*(_QWORD *)(a1 + 400), v155);
      *(_QWORD *)v155 = &off_1E78BD300;
      if (*(_QWORD *)&v155[24])
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v155[24]);
      v57 = *(_DWORD *)(v38 + 48);
    }
    v66 = *(_BYTE **)(a1 + 192);
    if (v57 == 2)
    {
      if (v66[584])
      {
        v67 = v66 + 152;
        goto LABEL_101;
      }
    }
    else if (v57 == 6 && v66[1856])
    {
      v67 = v66 + 1496;
      goto LABEL_101;
    }
    if (!v66[1328])
      goto LABEL_102;
    v67 = v66 + 1032;
LABEL_101:
    *(_WORD *)(v38 + 56) = *((_WORD *)v67 + 13);
LABEL_102:
    v68 = *(std::__shared_weak_count **)(a1 + 360);
    if (v68)
    {
      v69 = std::__shared_weak_count::lock(v68);
      if (v69)
      {
        v70 = *(_QWORD *)(a1 + 368);
        if (*(_DWORD *)(v70 + 340) == 2)
        {
          v71 = *(_QWORD *)(a1 + 352);
          if (v71)
          {
            if (*(char *)(v71 + 4159) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v155, *(const std::string::value_type **)(v71 + 4136), *(_QWORD *)(v71 + 4144));
            }
            else
            {
              v72 = v71 + 4136;
              *(_OWORD *)v155 = *(_OWORD *)v72;
              *(_QWORD *)&v155[16] = *(_QWORD *)(v72 + 16);
            }
            v73 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v70 + 312, (void **)v155);
            if ((void **)(v70 + 320) == v73)
              v74 = 0;
            else
              v74 = *((_DWORD *)v73 + 14);
            if ((v155[23] & 0x80000000) != 0)
              operator delete(*(void **)v155);
            v75 = v123;
            if (v123)
              v76 = 1;
            else
              v76 = v42;
            if (v74 == 2)
              v75 = v76;
            v123 = v75;
          }
        }
      }
    }
    else
    {
      v69 = 0;
    }
    if (v123)
      BambiCall::updateMediaSettings((BambiCall *)a1, (BambiCallMediaStream *)v38);
    std::string::basic_string[abi:ne180100]<0>(v155, "HandleSdpOffer");
    BambiCall::activateMediaSessionIfAppropriate(a1, v38, (std::string *)v155);
    if ((v155[23] & 0x80000000) != 0)
      operator delete(*(void **)v155);
    v150 = 0u;
    v151 = 0u;
    v152 = 0u;
    v147 = &off_1E78B7238;
    v148 = &_bambiDomain;
    v149 = 0;
    if (v69)
    {
      v77 = (unint64_t *)&v69->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    ImsResult::operator=((uint64_t)&v125, (uint64_t)&v147);
    ImsResult::~ImsResult((ImsResult *)&v147);
    v150 = 0u;
    v151 = 0u;
    v152 = 0u;
    v147 = &off_1E78B7238;
    v148 = &_bambiDomain;
    v149 = 0;
    if (v126 != &_bambiDomain)
      break;
    v80 = v127;
    ImsResult::~ImsResult(v79);
    if (!v80)
    {
      v81 = (_QWORD *)v37[1];
      if (v81)
      {
        do
        {
          v82 = v81;
          v81 = (_QWORD *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          v82 = (_QWORD *)v37[2];
          v54 = *v82 == (_QWORD)v37;
          v37 = v82;
        }
        while (!v54);
      }
      v37 = v82;
      if (v82 != v122)
        continue;
    }
    goto LABEL_178;
  }
  ImsResult::~ImsResult(v79);
LABEL_178:
  ImsResult::operator=((uint64_t)v143, (uint64_t)&v125);
  ImsResult::~ImsResult((ImsResult *)&v125);
LABEL_179:
  v115 = *a2;
  v116 = (std::__shared_weak_count *)a2[1];
  if (v116)
  {
    v117 = (unint64_t *)&v116->__shared_owners_;
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
  }
  BambiCall::handleRttInSDP((BambiCall *)a1, *((_QWORD *)v115 + 52), *((_QWORD *)v115 + 53));
  if (v116)
  {
    v119 = (unint64_t *)&v116->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  ImsResult::ImsResult(a4, (uint64_t)v143);
LABEL_188:
  ImsResult::~ImsResult((ImsResult *)v143);
}

void sub_1BEF9A098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v44;

  p_shared_owners = (unint64_t *)&v41->__shared_owners_;
  do
    v44 = __ldaxr(p_shared_owners);
  while (__stlxr(v44 - 1, p_shared_owners));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  ImsResult::~ImsResult((ImsResult *)&a15);
  ImsResult::~ImsResult((ImsResult *)&a41);
  _Unwind_Resume(a1);
}

void BambiCall::checkRemoteSdpForValidAddress(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11[2];
  char v12;
  void *__p[2];
  char v14;

  *(_BYTE *)(a1 + 456) = 0;
  v4 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "0.0.0.0");
  v5 = SDPModel::validateRemoteAddress(v4, (const void **)__p);
  v6 = v5;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if ((v6 & 1) != 0)
    {
LABEL_12:
      *(_BYTE *)(a1 + 456) = 1;
      return;
    }
  }
  else if ((v5 & 1) != 0)
  {
    goto LABEL_12;
  }
  v7 = *a2;
  v9 = *(_QWORD *)(*a2 + 416);
  v8 = *(_QWORD *)(v7 + 424);
  while (v9 != v8)
  {
    if (*(_DWORD *)(v9 + 12) == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v11, "0.0.0.0");
      v10 = SDPMedia::validateRemoteAddress(v9, (const void **)v11);
      if (v12 < 0)
        operator delete(v11[0]);
      if (!v10)
        return;
      goto LABEL_12;
    }
    v9 += 200;
  }
}

void BambiCall::initializeMediaForMTSession(BambiCall *this@<X0>, SDPModel **a2@<X1>, uint64_t a3@<X8>)
{
  SDPSession *v6;
  SDPModel *v7;
  uint64_t i;
  SDPModel *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  SDPModel *v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v6 = (SDPSession *)*((_QWORD *)this + 24);
  if (v6 && SDPSession::hasStream(v6))
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
    return;
  }
  v7 = *a2;
  if (*a2)
  {
    for (i = *((_QWORD *)v7 + 52); i != *((_QWORD *)v7 + 53); i += 200)
    {
      if (*(_DWORD *)(i + 12) == 4)
      {
        if (!*((_BYTE *)this + 745))
        {
          BambiCall::textSessionDetected(this);
          v7 = *a2;
        }
        *((_WORD *)this + 372) = 256;
        break;
      }
    }
  }
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v9 = a2[1];
  v19[0] = v7;
  v19[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)((char *)v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  BambiCall::initializeMediaForSession((uint64_t)this, v19, (uint64_t)&v20);
  if (v9)
  {
    v12 = (unint64_t *)((char *)v9 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      (*(void (**)(SDPModel *))(*(_QWORD *)v9 + 16))(v9);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
    }
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v20 + 1) + 24))(*((_QWORD *)&v20 + 1), v21))
  {
    v15 = *((_QWORD *)this + 9);
    v14 = (char *)this + 72;
    v16 = (*(uint64_t (**)(char *))(v15 + 56))(v14);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"unable to create media session for incoming call: ", 50);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(__int128 *, uint64_t))(v20 + 16))(&v20, v16);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    v17 = &SipResultDomain::_domain;
    if (*((uint64_t **)&v20 + 1) == &SipResultDomain::_domain)
    {
      ImsResult::ImsResult(a3, (uint64_t)&v20);
      goto LABEL_25;
    }
    v18 = 500;
  }
  else
  {
    v18 = 0;
    v17 = &_bambiDomain;
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = v17;
  *(_DWORD *)(a3 + 16) = v18;
LABEL_25:
  ImsResult::~ImsResult((ImsResult *)&v20);
}

void sub_1BEF9A4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCall::handleRttInSDP(BambiCall *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  ImsPrefs *v7;
  void **RTTNegotiationTimerSecondsKey;
  void *v9;
  int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  ImsPrefs *v22;
  void **v23;
  void *v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  while (a2 != a3)
  {
    if (*(_DWORD *)(a2 + 12) == 4)
      goto LABEL_6;
    a2 += 200;
  }
  a2 = 0;
LABEL_6:
  if (*((_BYTE *)this + 745))
  {
    v4 = *((_QWORD *)this + 24);
    if (!*(_BYTE *)(v4 + 1328)
      || ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 1032) + 24))(v4 + 1032, a2) & 1) == 0)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
      if (v5)
      {
        v5 = std::__shared_weak_count::lock(v5);
        v6 = v5;
        if (v5)
          v5 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
      }
      else
      {
        v6 = 0;
      }
      v7 = (ImsPrefs *)SipStack::prefs((SipStack *)v5);
      RTTNegotiationTimerSecondsKey = (void **)ImsPrefs::getRTTNegotiationTimerSecondsKey(v7);
      v9 = ImsPrefs::prefWithKey(v7, RTTNegotiationTimerSecondsKey);
      if (v9)
      {
        v10 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 56))(v9);
        if (!v6)
          goto LABEL_24;
      }
      else
      {
        v10 = *((_DWORD *)RTTNegotiationTimerSecondsKey + 15);
        if (!v6)
          goto LABEL_24;
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (v10)
        {
LABEL_25:
          v14 = *((_QWORD *)this + 22);
          v13 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
          if (v13)
          {
            p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
            do
              v16 = __ldxr(p_shared_weak_owners);
            while (__stxr(v16 + 1, p_shared_weak_owners));
            do
              v17 = __ldxr(p_shared_weak_owners);
            while (__stxr(v17 + 1, p_shared_weak_owners));
            do
              v18 = __ldxr(p_shared_weak_owners);
            while (__stxr(v18 + 1, p_shared_weak_owners));
          }
          v19 = operator new(0x20uLL);
          *v19 = &off_1E78CC088;
          v19[1] = this;
          v19[2] = v14;
          v19[3] = v13;
          v31 = v19;
          v20 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
          if (v20)
          {
            v20 = std::__shared_weak_count::lock(v20);
            v21 = v20;
            if (v20)
              v20 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
          }
          else
          {
            v21 = 0;
          }
          v22 = (ImsPrefs *)SipStack::prefs((SipStack *)v20);
          v23 = (void **)ImsPrefs::getRTTNegotiationTimerSecondsKey(v22);
          v24 = ImsPrefs::prefWithKey(v22, v23);
          if (v24)
            v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v24 + 56))(v24);
          else
            v25 = *((_DWORD *)v23 + 15);
          SipTimerContainer::startTimer((_QWORD *)this + 26, (uint64_t)"RTTNegotiatedTimer", (uint64_t)v30, 1000 * v25, 0);
          if (v21)
          {
            v26 = (unint64_t *)&v21->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          v28 = v31;
          if (v31 == v30)
          {
            v29 = 4;
            v28 = v30;
          }
          else
          {
            if (!v31)
              goto LABEL_49;
            v29 = 5;
          }
          (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_49:
          if (v13)
          {
            std::__shared_weak_count::__release_weak(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
          return;
        }
LABEL_34:
        BambiCall::textSessionDeactivated(this);
        return;
      }
LABEL_24:
      if (v10)
        goto LABEL_25;
      goto LABEL_34;
    }
  }
  else if (a2 && !*((_BYTE *)this + 744) && *(_QWORD *)(a2 + 16))
  {
    BambiCall::textSessionDetected(this);
  }
}

void sub_1BEF9A810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::__shared_weak_count *v15;

  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::handleSdpAnswerInFork(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  ImsPrefs *v42;
  void **UseRestrictiveDirectionWhenCreatingAnswerKey;
  void *v44;
  int v45;
  int v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  std::__shared_weak_count *v50;
  _QWORD *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  ImsPrefs *v59;
  void **v60;
  void *v61;
  int v62;
  int v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t j;
  unsigned int v90;
  int v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  ImsResult *v95;
  int v96;
  _QWORD *v97;
  _QWORD *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *p_shared_weak_owners;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t i;
  unsigned int v122;
  int v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  int v127;
  _QWORD *v128;
  _QWORD *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  int v134;
  _BOOL4 v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  void **v141;
  int v142;
  int v143;
  int v144;
  unint64_t *v145;
  unint64_t v146;
  int v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  _BYTE *v161;
  _QWORD *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  _QWORD *v168;
  const std::string *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _BOOL4 v173;
  _QWORD *v174;
  std::__shared_weak_count *v175;
  _QWORD *v176;
  BambiCallMediaStream *v177;
  uint64_t v178[2];
  uint64_t v179;
  std::__shared_weak_count *v180;
  SDPModel *v181;
  std::__shared_weak_count *v182;
  _QWORD v183[2];
  void (**v184)(ImsResult *__hidden);
  uint64_t *v185;
  int v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  void (**v190)(ImsResult *__hidden);
  uint64_t *v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(_QWORD *);
  void *v199;
  uint64_t v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  std::string v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  std::__shared_weak_count *v210;

  v8 = *(_QWORD *)(a1 + 192);
  v9 = *(std::__shared_weak_count **)(a1 + 376);
  v183[0] = *(_QWORD *)(a1 + 368);
  v183[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = SDPSession::streamsValidForManager(v8, (uint64_t)v183);
  v13 = v12;
  if (!v9)
    goto LABEL_8;
  v14 = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_8:
    if ((v12 & 1) != 0)
      goto LABEL_9;
LABEL_228:
    v157 = *(_QWORD *)(a1 + 72);
    v156 = a1 + 72;
    v158 = (*(uint64_t (**)(uint64_t))(v157 + 56))(v156);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v156 + 16))(v156, v158);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v158 + 8), (uint64_t)"recieved SDP, but one or more media streams are invalid", 55);
    *(_BYTE *)(v158 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v158 + 64))(v158, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v158 + 17) = 0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    v159 = 1073741826;
LABEL_232:
    *(_DWORD *)(a4 + 16) = v159;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if ((v13 & 1) == 0)
    goto LABEL_228;
LABEL_9:
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3) & 1) == 0)
  {
    v151 = *(_QWORD *)(a1 + 72);
    v150 = a1 + 72;
    v152 = (*(uint64_t (**)(uint64_t))(v151 + 56))(v150);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v150 + 16))(v150, v152);
    v153 = *(_QWORD **)(v152 + 8);
    v154 = "received invalid SDP answer:";
    v155 = 28;
LABEL_231:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)v154, v155);
    *(_BYTE *)(v152 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v152 + 64))(v152, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v152 + 17) = 0;
    v161 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v150 + 56))(v150);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v150 + 16))(v150, v161);
    (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*a3 + 16))(*a3, v161);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v161 + 64))(v161, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v161[17] = 0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &SipResultDomain::_domain;
    v159 = 488;
    goto LABEL_232;
  }
  v16 = *(_QWORD *)(a1 + 192);
  v17 = (std::__shared_weak_count *)a2[1];
  v181 = (SDPModel *)*a2;
  v182 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (std::__shared_weak_count *)a3[1];
  v179 = *a3;
  v180 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = SDPSession::handleOfferAnswer(v16, &v181, (uint64_t)&v179, *(_QWORD *)(*a2 + 144));
  v24 = v180;
  if (v180)
  {
    v25 = (unint64_t *)&v180->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v182;
  if (v182)
  {
    v28 = (unint64_t *)&v182->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (v23)
        goto LABEL_26;
      goto LABEL_230;
    }
  }
  if (!v23)
  {
LABEL_230:
    v160 = *(_QWORD *)(a1 + 72);
    v150 = a1 + 72;
    v152 = (*(uint64_t (**)(uint64_t))(v160 + 56))(v150);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v150 + 16))(v150, v152);
    v153 = *(_QWORD **)(v152 + 8);
    v154 = "received rejection answer: ";
    v155 = 27;
    goto LABEL_231;
  }
LABEL_26:
  v173 = v23 == 2;
  v30 = (std::__shared_weak_count *)a3[1];
  v178[0] = *a3;
  v178[1] = (uint64_t)v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  BambiCall::checkRemoteSdpForValidAddress(a1, v178);
  v176 = a3;
  if (v30)
  {
    v33 = (unint64_t *)&v30->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v172 = a2;
  v35 = *(_QWORD *)(a1 + 192);
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)a4 = &off_1E78B7238;
  *(_QWORD *)(a4 + 8) = &_bambiDomain;
  *(_QWORD *)(a4 + 16) = 0;
  v36 = *(_QWORD **)(v35 + 1904);
  v174 = (_QWORD *)(v35 + 1912);
  if (v36 != (_QWORD *)(v35 + 1912))
  {
    v169 = (const std::string *)(a1 + 464);
    v170 = a1 + 72;
    v168 = (_QWORD *)(a1 + 176);
    v171 = a4;
    while (1)
    {
      v37 = v36[5];
      if (!v37)
      {
        v187 = 0u;
        v188 = 0u;
        v189 = 0u;
        v184 = &off_1E78B7238;
        v185 = &_bambiDomain;
        v186 = 1073741825;
        goto LABEL_217;
      }
      v38 = (_QWORD *)*v176;
      v177 = (BambiCallMediaStream *)v36[5];
      v39 = *(_DWORD *)(v37 + 48);
      v40 = *(std::__shared_weak_count **)(a1 + 360);
      if (v40)
      {
        v40 = std::__shared_weak_count::lock(v40);
        v41 = v40;
        if (v40)
          v40 = *(std::__shared_weak_count **)(a1 + 352);
      }
      else
      {
        v41 = 0;
      }
      v42 = (ImsPrefs *)SipStack::prefs((SipStack *)v40);
      UseRestrictiveDirectionWhenCreatingAnswerKey = (void **)ImsPrefs::getUseRestrictiveDirectionWhenCreatingAnswerKey(v42);
      v44 = ImsPrefs::prefWithKey(v42, UseRestrictiveDirectionWhenCreatingAnswerKey);
      if (v44)
        v45 = (*(uint64_t (**)(void *))(*(_QWORD *)v44 + 40))(v44);
      else
        v45 = *((_BYTE *)UseRestrictiveDirectionWhenCreatingAnswerKey + 57) != 0;
      v46 = SDPModel::preferredDirection(v38, v39, v45);
      if (v41)
      {
        v47 = (unint64_t *)&v41->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v49 = *((_DWORD *)v177 + 12);
      v51 = (_QWORD *)*v172;
      v50 = (std::__shared_weak_count *)v172[1];
      if (v50)
      {
        v52 = (unint64_t *)&v50->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      v54 = (std::__shared_weak_count *)v176[1];
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      v175 = v50;
      if (*(_BYTE *)(a1 + 453))
      {
        *(_OWORD *)&v205.__r_.__value_.__l.__data_ = 0uLL;
        v57 = *(std::__shared_weak_count **)(a1 + 360);
        if (v57)
        {
          v57 = std::__shared_weak_count::lock(v57);
          v58 = v57;
          v205.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
          if (v57)
          {
            v57 = *(std::__shared_weak_count **)(a1 + 352);
            v205.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
          }
        }
        else
        {
          v58 = 0;
        }
        v59 = (ImsPrefs *)SipStack::prefs((SipStack *)v57);
        v60 = (void **)ImsPrefs::getUseRestrictiveDirectionWhenCreatingAnswerKey(v59);
        v61 = ImsPrefs::prefWithKey(v59, v60);
        if (v61)
          v62 = (*(uint64_t (**)(void *))(*(_QWORD *)v61 + 40))(v61);
        else
          v62 = *((_BYTE *)v60 + 57) != 0;
        v63 = SDPModel::preferredDirection(v51, v49, v62);
        if (v58)
        {
          v64 = (unint64_t *)&v58->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v66 = *(_DWORD *)(a1 + 440);
        if (v63 < 3)
        {
          if (!v66)
          {
            *(_DWORD *)(a1 + 440) = 1;
            *(_BYTE *)(a1 + 1802) = 0;
            v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(v170);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v170 + 16))(v170, v100);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), (uint64_t)"resumed call ", 13);
            *(_BYTE *)(v100 + 17) = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)&v205, v169);
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v100 + 56))(v100, &v205);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v100 + 64))(v100, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v100 + 17) = 0;
            if (SBYTE7(v207) < 0)
              operator delete((void *)v206);
            if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v205.__r_.__value_.__l.__data_);
            v101 = *(_QWORD *)(a1 + 176);
            v69 = *(std::__shared_weak_count **)(a1 + 184);
            if (v69)
            {
              p_shared_weak_owners = (unint64_t *)&v69->__shared_weak_owners_;
              do
                v103 = __ldxr(p_shared_weak_owners);
              while (__stxr(v103 + 1, p_shared_weak_owners));
            }
            v104 = BambiCall::bambiClient((BambiCall *)a1);
            LoggableString::LoggableString((LoggableString *)&v205, "localResumeCompletedBlock");
            std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v209, v168);
            v105 = v210;
            v203 = v209;
            v204 = v210;
            v209 = 0;
            v210 = 0;
            v196 = MEMORY[0x1E0C809B0];
            v197 = 1174405120;
            v198 = ___ZN9BambiCall20localResumeCompletedEv_block_invoke;
            v199 = &__block_descriptor_tmp_29_1;
            v200 = a1;
            v201 = v101;
            v202 = v69;
            if (v69)
            {
              v106 = (unint64_t *)&v69->__shared_weak_owners_;
              do
                v107 = __ldxr(v106);
              while (__stxr(v107 + 1, v106));
            }
            BambiClient::performBlock(v104, (__int128 *)&v205, &v203, &v196);
            if (v105)
            {
              v108 = (unint64_t *)&v105->__shared_owners_;
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 - 1, v108));
              if (!v109)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
            v110 = v210;
            if (v210)
            {
              v111 = (unint64_t *)&v210->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v205.__r_.__value_.__l.__data_);
            v113 = *(_QWORD *)(a1 + 192);
            v193 = 0u;
            v194 = 0u;
            v195 = 0u;
            v190 = &off_1E78B7238;
            v191 = &_bambiDomain;
            v192 = 0;
            v114 = *(_QWORD **)(v113 + 1904);
            v115 = (_QWORD *)(v113 + 1912);
            if (v114 != (_QWORD *)(v113 + 1912))
            {
              while (1)
              {
                v116 = v114[5];
                BambiCall::localSdp((BambiCall *)a1, &v209);
                v117 = *(_DWORD *)(v116 + 48);
                v118 = *(_QWORD *)(v209 + 416);
                if (*(_DWORD *)(v118 + 12) != v117)
                {
                  v119 = v118 + 200;
                  do
                  {
                    v120 = *(_DWORD *)(v119 + 12);
                    v119 += 200;
                  }
                  while (v120 != v117);
                  v118 = v119 - 200;
                }
                for (i = *(_QWORD *)(v118 + 144); *(_DWORD *)(i + 136) != 4; i = *(_QWORD *)(i + 8))
                  ;
                v122 = *(_DWORD *)(i + 56) - 1;
                if (v122 > 2)
                  v123 = 0;
                else
                  v123 = dword_1BF2A278C[v122];
                *(_DWORD *)(v116 + 52) = v123;
                v124 = v210;
                if (v210)
                {
                  v125 = (unint64_t *)&v210->__shared_owners_;
                  do
                    v126 = __ldaxr(v125);
                  while (__stlxr(v126 - 1, v125));
                  if (!v126)
                  {
                    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                    std::__shared_weak_count::__release_weak(v124);
                  }
                }
                v206 = 0u;
                v207 = 0u;
                v208 = 0u;
                v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
                v205.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
                LODWORD(v205.__r_.__value_.__r.__words[2]) = 0;
                ImsResult::operator=((uint64_t)&v190, (uint64_t)&v205);
                ImsResult::~ImsResult((ImsResult *)&v205);
                v206 = 0u;
                v207 = 0u;
                v208 = 0u;
                v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
                v205.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
                LODWORD(v205.__r_.__value_.__r.__words[2]) = 0;
                if (v191 != &_bambiDomain)
                  break;
                v127 = v192;
                ImsResult::~ImsResult(v95);
                if (!v127)
                {
                  v128 = (_QWORD *)v114[1];
                  if (v128)
                  {
                    do
                    {
                      v129 = v128;
                      v128 = (_QWORD *)*v128;
                    }
                    while (v128);
                  }
                  else
                  {
                    do
                    {
                      v129 = (_QWORD *)v114[2];
                      v140 = *v129 == (_QWORD)v114;
                      v114 = v129;
                    }
                    while (!v140);
                  }
                  v114 = v129;
                  if (v129 != v115)
                    continue;
                }
                goto LABEL_168;
              }
LABEL_167:
              ImsResult::~ImsResult(v95);
            }
LABEL_168:
            ImsResult::~ImsResult((ImsResult *)&v190);
            if (v202)
              std::__shared_weak_count::__release_weak(v202);
            if (v69)
              std::__shared_weak_count::__release_weak(v69);
            v99 = 1;
            goto LABEL_173;
          }
        }
        else if (v66 == 2)
        {
          *(_DWORD *)(a1 + 440) = 3;
          v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(v170);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v170 + 16))(v170, v67);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v67 + 8), (uint64_t)"held call ", 10);
          *(_BYTE *)(v67 + 17) = 0;
          ObfuscatedString::ObfuscatedString((uint64_t)&v205, v169);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v67 + 56))(v67, &v205);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v67 + 8), (uint64_t)" to ", 4);
          *(_BYTE *)(v67 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 1040) + 40))(a1 + 1040, v67);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v67 + 17) = 0;
          if (SBYTE7(v207) < 0)
            operator delete((void *)v206);
          if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v205.__r_.__value_.__l.__data_);
          v68 = *(_QWORD *)(a1 + 176);
          v69 = *(std::__shared_weak_count **)(a1 + 184);
          if (v69)
          {
            v70 = (unint64_t *)&v69->__shared_weak_owners_;
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          v72 = BambiCall::bambiClient((BambiCall *)a1);
          LoggableString::LoggableString((LoggableString *)&v205, "localHoldCompletedBlock");
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v209, v168);
          v73 = v210;
          v203 = v209;
          v204 = v210;
          v209 = 0;
          v210 = 0;
          v196 = MEMORY[0x1E0C809B0];
          v197 = 1174405120;
          v198 = ___ZN9BambiCall18localHoldCompletedEv_block_invoke;
          v199 = &__block_descriptor_tmp_16;
          v200 = a1;
          v201 = v68;
          v202 = v69;
          if (v69)
          {
            v74 = (unint64_t *)&v69->__shared_weak_owners_;
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
          }
          BambiClient::performBlock(v72, (__int128 *)&v205, &v203, &v196);
          if (v73)
          {
            v76 = (unint64_t *)&v73->__shared_owners_;
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v78 = v210;
          if (v210)
          {
            v79 = (unint64_t *)&v210->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v205.__r_.__value_.__l.__data_);
          v81 = *(_QWORD *)(a1 + 192);
          v193 = 0u;
          v194 = 0u;
          v195 = 0u;
          v190 = &off_1E78B7238;
          v191 = &_bambiDomain;
          v192 = 0;
          v82 = *(_QWORD **)(v81 + 1904);
          v83 = (_QWORD *)(v81 + 1912);
          if (v82 != (_QWORD *)(v81 + 1912))
          {
            while (1)
            {
              v84 = v82[5];
              BambiCall::localSdp((BambiCall *)a1, &v209);
              v85 = *(_DWORD *)(v84 + 48);
              v86 = *(_QWORD *)(v209 + 416);
              if (*(_DWORD *)(v86 + 12) != v85)
              {
                v87 = v86 + 200;
                do
                {
                  v88 = *(_DWORD *)(v87 + 12);
                  v87 += 200;
                }
                while (v88 != v85);
                v86 = v87 - 200;
              }
              for (j = *(_QWORD *)(v86 + 144); *(_DWORD *)(j + 136) != 4; j = *(_QWORD *)(j + 8))
                ;
              v90 = *(_DWORD *)(j + 56) - 1;
              if (v90 > 2)
                v91 = 0;
              else
                v91 = dword_1BF2A278C[v90];
              *(_DWORD *)(v84 + 52) = v91;
              v92 = v210;
              if (v210)
              {
                v93 = (unint64_t *)&v210->__shared_owners_;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v206 = 0u;
              v207 = 0u;
              v208 = 0u;
              v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
              v205.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
              LODWORD(v205.__r_.__value_.__r.__words[2]) = 0;
              ImsResult::operator=((uint64_t)&v190, (uint64_t)&v205);
              ImsResult::~ImsResult((ImsResult *)&v205);
              v206 = 0u;
              v207 = 0u;
              v208 = 0u;
              v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
              v205.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
              LODWORD(v205.__r_.__value_.__r.__words[2]) = 0;
              if (v191 != &_bambiDomain)
                goto LABEL_167;
              v96 = v192;
              ImsResult::~ImsResult(v95);
              if (!v96)
              {
                v97 = (_QWORD *)v82[1];
                if (v97)
                {
                  do
                  {
                    v98 = v97;
                    v97 = (_QWORD *)*v97;
                  }
                  while (v97);
                }
                else
                {
                  do
                  {
                    v98 = (_QWORD *)v82[2];
                    v140 = *v98 == (_QWORD)v82;
                    v82 = v98;
                  }
                  while (!v140);
                }
                v82 = v98;
                if (v98 != v83)
                  continue;
              }
              goto LABEL_168;
            }
          }
          goto LABEL_168;
        }
      }
      v99 = 0;
LABEL_173:
      BambiCall::checkForPause(a1, (uint64_t)v177, v46, v99);
      if (v54)
      {
        v130 = (unint64_t *)&v54->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (v175)
      {
        v132 = (unint64_t *)&v175->__shared_owners_;
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
      if (*(_BYTE *)(a1 + 456))
        v134 = v46;
      else
        v134 = 4;
      v135 = BambiCall::setMediaDirection(a1, (uint64_t)v177, v134, 0);
      v136 = *(std::__shared_weak_count **)(a1 + 360);
      if (v136)
      {
        v137 = std::__shared_weak_count::lock(v136);
        if (v137)
        {
          v138 = *(_QWORD *)(a1 + 352);
          v139 = *(_QWORD *)(a1 + 368);
          v140 = *(_DWORD *)(v139 + 340) != 2 || v138 == 0;
          if (!v140)
          {
            if (*(char *)(v138 + 4159) < 0)
              std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)(v138 + 4136), *(_QWORD *)(v138 + 4144));
            else
              v205 = *(std::string *)(v138 + 4136);
            v141 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v139 + 312, (void **)&v205.__r_.__value_.__l.__data_);
            if ((void **)(v139 + 320) == v141)
              v142 = 0;
            else
              v142 = *((_DWORD *)v141 + 14);
            if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v205.__r_.__value_.__l.__data_);
            v143 = v173;
            v144 = v173 || v135;
            if (v142 == 2)
              v143 = v144;
            v173 = v143;
          }
        }
      }
      else
      {
        v137 = 0;
      }
      if (v173)
        BambiCall::updateMediaSettings((BambiCall *)a1, v177);
      std::string::basic_string[abi:ne180100]<0>(&v205, "HandleSdpAnswer");
      BambiCall::activateMediaSessionIfAppropriate(a1, (uint64_t)v177, &v205);
      if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v205.__r_.__value_.__l.__data_);
      v187 = 0u;
      v188 = 0u;
      v189 = 0u;
      v184 = &off_1E78B7238;
      v185 = &_bambiDomain;
      v186 = 0;
      if (v137)
      {
        v145 = (unint64_t *)&v137->__shared_owners_;
        do
          v146 = __ldaxr(v145);
        while (__stlxr(v146 - 1, v145));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      a4 = v171;
LABEL_217:
      ImsResult::operator=(a4, (uint64_t)&v184);
      ImsResult::~ImsResult((ImsResult *)&v184);
      v206 = 0u;
      v207 = 0u;
      v208 = 0u;
      v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
      v205.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v205.__r_.__value_.__r.__words[2]) = 0;
      if (*(uint64_t **)(a4 + 8) != &_bambiDomain)
      {
        ImsResult::~ImsResult((ImsResult *)&v205);
        break;
      }
      v147 = *(_DWORD *)(a4 + 16);
      ImsResult::~ImsResult((ImsResult *)&v205);
      if (!v147)
      {
        v148 = (_QWORD *)v36[1];
        if (v148)
        {
          do
          {
            v149 = v148;
            v148 = (_QWORD *)*v148;
          }
          while (v148);
        }
        else
        {
          do
          {
            v149 = (_QWORD *)v36[2];
            v140 = *v149 == (_QWORD)v36;
            v36 = v149;
          }
          while (!v140);
        }
        v36 = v149;
        if (v149 != v174)
          continue;
      }
      break;
    }
  }
  v162 = (_QWORD *)*v176;
  v163 = (std::__shared_weak_count *)v176[1];
  if (v163)
  {
    v164 = (unint64_t *)&v163->__shared_owners_;
    do
      v165 = __ldxr(v164);
    while (__stxr(v165 + 1, v164));
  }
  BambiCall::handleRttInSDP((BambiCall *)a1, v162[52], v162[53]);
  if (v163)
  {
    v166 = (unint64_t *)&v163->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
}

void sub_1BEF9B8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ImsResult *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56)
{
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v59;

  p_shared_owners = (unint64_t *)&v56->__shared_owners_;
  do
    v59 = __ldaxr(p_shared_owners);
  while (__stlxr(v59 - 1, p_shared_owners));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  ImsResult::~ImsResult(a14);
  _Unwind_Resume(a1);
}

void BambiCall::textSessionDetected(BambiCall *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void (**v13)(BambiCallEvent *__hidden);
  __int128 v14;
  std::__shared_weak_count *v15[2];

  if (*((_BYTE *)this + 1488) || *((_BYTE *)this + 1489))
  {
    if (!*((_BYTE *)this + 1800))
    {
      *((_WORD *)this + 900) = 1;
      if (*((_QWORD *)this + 50))
      {
        v14 = 0u;
        *(_OWORD *)v15 = 0u;
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v11, (_QWORD *)this + 22);
        v13 = &off_1E78BD300;
        *((_QWORD *)&v14 + 1) = 0;
        v15[0] = 0;
        LODWORD(v14) = 29;
        v2 = v11;
        v3 = v12;
        if (v12)
        {
          p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
          do
            v5 = __ldxr(p_shared_weak_owners);
          while (__stxr(v5 + 1, p_shared_weak_owners));
          *((_QWORD *)&v14 + 1) = v2;
          v15[0] = v3;
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        else
        {
          *((_QWORD *)&v14 + 1) = v11;
        }
        (*(void (**)(_QWORD, void (***)(BambiCallEvent *__hidden)))(**((_QWORD **)this + 50) + 16))(*((_QWORD *)this + 50), &v13);
        v13 = &off_1E78BD300;
        if (v15[0])
          std::__shared_weak_count::__release_weak(v15[0]);
      }
    }
  }
  else
  {
    v9 = *((_QWORD *)this + 9);
    v8 = (char *)this + 72;
    *((_BYTE *)this + 1801) = 1;
    v10 = (*(uint64_t (**)(char *))(v9 + 64))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v8 + 16))(v8, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Text session detected, but call is still hidden. Delaying notification", 70);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
  }
}

void sub_1BEF9BC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(exception_object);
}

void BambiCall::textSessionDeactivated(BambiCall *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  void (**v10)(BambiCallEvent *__hidden);
  __int128 v11;
  std::__shared_weak_count *v12[2];

  *((_BYTE *)this + 1800) = 0;
  *((_BYTE *)this + 745) = 0;
  v11 = 0u;
  *(_OWORD *)v12 = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v8, (_QWORD *)this + 22);
  v10 = &off_1E78BD300;
  *((_QWORD *)&v11 + 1) = 0;
  v12[0] = 0;
  LODWORD(v11) = 31;
  v2 = v8;
  v3 = v9;
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    *((_QWORD *)&v11 + 1) = v2;
    v12[0] = v3;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    *((_QWORD *)&v11 + 1) = v8;
  }
  (*(void (**)(_QWORD, void (***)(BambiCallEvent *__hidden)))(**((_QWORD **)this + 50) + 16))(*((_QWORD *)this + 50), &v10);
  v10 = &off_1E78BD300;
  if (v12[0])
    std::__shared_weak_count::__release_weak(v12[0]);
}

void sub_1BEF9BD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(exception_object);
}

void BambiCall::sendHoldResumeIndication(BambiCall *this, int a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  void (**v22)(ImsResult *__hidden);
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  uint64_t *v29;
  int v30;
  char v31;
  __int128 __p;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = (char *)this + 72;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"BambiCall::sendHoldResumeIndication called for ", 47);
  *(_BYTE *)(v5 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v28, (const std::string *)(v4 + 392));
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 56))(v5, &v28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" with isHeld = ", 15);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (SBYTE7(v33) < 0)
    operator delete((void *)__p);
  if (v31 < 0)
    operator delete(v28);
  v6 = *((_QWORD *)this + 24);
  if (v6)
  {
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v22 = &off_1E78B7238;
    v23 = &_bambiDomain;
    v24 = 0;
    v7 = *(_QWORD **)(v6 + 1904);
    v8 = (_QWORD *)(v6 + 1912);
    if (v7 != (_QWORD *)(v6 + 1912))
    {
      while (1)
      {
        v9 = v7[5];
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        v10 = *(_DWORD *)(v9 + 48) - 1;
        if (v10 > 3)
          v11 = 0;
        else
          v11 = dword_1BF2A27A0[v10];
        v12 = *(_DWORD *)(v9 + 52);
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v35, (_QWORD *)this + 22);
        BambiCallHoldResumeIndicationEvent::BambiCallHoldResumeIndicationEvent((uint64_t)&v37, a2, v12, v11, &v35);
        v13 = v36;
        if (v36)
        {
          p_shared_owners = (unint64_t *)&v36->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v16 = *((_QWORD *)this + 50);
        if (v16)
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v16 + 16))(v16, &v37);
        __p = 0u;
        v33 = 0u;
        v34 = 0u;
        v28 = &off_1E78B7238;
        v29 = &_bambiDomain;
        v30 = 0;
        *(_QWORD *)&v37 = &off_1E78BD300;
        if (*((_QWORD *)&v38 + 1))
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v38 + 1));
        ImsResult::operator=((uint64_t)&v22, (uint64_t)&v28);
        ImsResult::~ImsResult((ImsResult *)&v28);
        __p = 0u;
        v33 = 0u;
        v34 = 0u;
        v28 = &off_1E78B7238;
        v29 = &_bambiDomain;
        v30 = 0;
        if (v23 != &_bambiDomain)
          break;
        v17 = v24;
        ImsResult::~ImsResult((ImsResult *)&v28);
        if (!v17)
        {
          v18 = (_QWORD *)v7[1];
          if (v18)
          {
            do
            {
              v19 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (_QWORD *)v7[2];
              v20 = *v19 == (_QWORD)v7;
              v7 = v19;
            }
            while (!v20);
          }
          v7 = v19;
          if (v19 != v8)
            continue;
        }
        goto LABEL_30;
      }
      ImsResult::~ImsResult((ImsResult *)&v28);
    }
LABEL_30:
    ImsResult::~ImsResult((ImsResult *)&v22);
  }
  else
  {
    v21 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 64))(v4);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"BambiCall::sendHoldResumeIndication _sdpSession no longer valid", 63);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
  }
}

void sub_1BEF9C0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  std::__shared_weak_count *v20;

  *(_QWORD *)(v18 - 144) = &off_1E78BD300;
  v20 = *(std::__shared_weak_count **)(v18 - 120);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::bambiClient(BambiCall *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 44);
  if (v5)
    v6 = *(_QWORD *)(v5 + 136);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void ___ZN9BambiCall18localHoldCompletedEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void (**v27)(BambiCallEvent *__hidden);
  __int128 v28;
  std::__shared_weak_count *v29[2];
  uint64_t v30;
  std::__shared_weak_count *v31;
  void (**v32)(BambiCallEvent *__hidden);
  __int128 v33;
  std::__shared_weak_count *v34[2];
  uint64_t v35;
  std::__shared_weak_count *v36;

  v2 = a1[4];
  v35 = 0;
  v36 = 0;
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v36 = std::__shared_weak_count::lock(v3);
    if (v36)
    {
      v35 = a1[5];
      if (v35)
      {
        v4 = *(std::__shared_weak_count **)(v2 + 360);
        if (v4)
        {
          v5 = std::__shared_weak_count::lock(v4);
          *(_QWORD *)&v33 = v5;
          if (v5)
          {
            v6 = v5;
            v7 = *(_QWORD *)(v2 + 352);
            v32 = (void (**)(BambiCallEvent *__hidden))v7;
            if (v7)
              (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 2888) + 136))(*(_QWORD *)(v7 + 2888));
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
        }
        if (*(_QWORD *)(v2 + 400))
        {
          v33 = 0u;
          *(_OWORD *)v34 = 0u;
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v30, (_QWORD *)(v2 + 176));
          v32 = &off_1E78BD300;
          *((_QWORD *)&v33 + 1) = 0;
          v34[0] = 0;
          LODWORD(v33) = 12;
          v10 = v30;
          v11 = v31;
          if (v31)
          {
            p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
            do
              v13 = __ldxr(p_shared_weak_owners);
            while (__stxr(v13 + 1, p_shared_weak_owners));
            *((_QWORD *)&v33 + 1) = v10;
            v34[0] = v11;
            v14 = (unint64_t *)&v11->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          else
          {
            *((_QWORD *)&v33 + 1) = v30;
          }
          (*(void (**)(_QWORD, void (***)(BambiCallEvent *__hidden)))(**(_QWORD **)(v2 + 400)
                                                                                          + 16))(*(_QWORD *)(v2 + 400), &v32);
          *(_OWORD *)v29 = 0u;
          v28 = 0u;
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v25, (_QWORD *)(v2 + 176));
          v27 = &off_1E78BD300;
          *((_QWORD *)&v28 + 1) = 0;
          v29[0] = 0;
          LODWORD(v28) = 13;
          v16 = v25;
          v17 = v26;
          if (v26)
          {
            v18 = (unint64_t *)&v26->__shared_weak_owners_;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
            *((_QWORD *)&v28 + 1) = v16;
            v29[0] = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          else
          {
            *((_QWORD *)&v28 + 1) = v25;
          }
          (*(void (**)(_QWORD, void (***)(BambiCallEvent *__hidden)))(**(_QWORD **)(v2 + 400)
                                                                                          + 16))(*(_QWORD *)(v2 + 400), &v27);
          BambiCall::sendHoldResumeIndication((BambiCall *)v2, 1);
          v27 = &off_1E78BD300;
          if (v29[0])
            std::__shared_weak_count::__release_weak(v29[0]);
          v32 = &off_1E78BD300;
          if (v34[0])
            std::__shared_weak_count::__release_weak(v34[0]);
        }
      }
    }
  }
  v22 = v36;
  if (v36)
  {
    v23 = (unint64_t *)&v36->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1BEF9C3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  uint64_t v21;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v21 - 48);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN9BambiCall20localResumeCompletedEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void (**v27)(BambiCallEvent *__hidden);
  __int128 v28;
  std::__shared_weak_count *v29[2];
  uint64_t v30;
  std::__shared_weak_count *v31;
  void (**v32)(BambiCallEvent *__hidden);
  __int128 v33;
  std::__shared_weak_count *v34[2];
  uint64_t v35;
  std::__shared_weak_count *v36;

  v2 = a1[4];
  v35 = 0;
  v36 = 0;
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v36 = std::__shared_weak_count::lock(v3);
    if (v36)
    {
      v35 = a1[5];
      if (v35)
      {
        v4 = *(std::__shared_weak_count **)(v2 + 360);
        if (v4)
        {
          v5 = std::__shared_weak_count::lock(v4);
          *(_QWORD *)&v33 = v5;
          if (v5)
          {
            v6 = v5;
            v7 = *(_QWORD *)(v2 + 352);
            v32 = (void (**)(BambiCallEvent *__hidden))v7;
            if (v7)
              (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 2888) + 144))(*(_QWORD *)(v7 + 2888));
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
        }
        if (*(_QWORD *)(v2 + 400))
        {
          v33 = 0u;
          *(_OWORD *)v34 = 0u;
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v30, (_QWORD *)(v2 + 176));
          v32 = &off_1E78BD300;
          *((_QWORD *)&v33 + 1) = 0;
          v34[0] = 0;
          LODWORD(v33) = 10;
          v10 = v30;
          v11 = v31;
          if (v31)
          {
            p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
            do
              v13 = __ldxr(p_shared_weak_owners);
            while (__stxr(v13 + 1, p_shared_weak_owners));
            *((_QWORD *)&v33 + 1) = v10;
            v34[0] = v11;
            v14 = (unint64_t *)&v11->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          else
          {
            *((_QWORD *)&v33 + 1) = v30;
          }
          (*(void (**)(_QWORD, void (***)(BambiCallEvent *__hidden)))(**(_QWORD **)(v2 + 400)
                                                                                          + 16))(*(_QWORD *)(v2 + 400), &v32);
          *(_OWORD *)v29 = 0u;
          v28 = 0u;
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v25, (_QWORD *)(v2 + 176));
          v27 = &off_1E78BD300;
          *((_QWORD *)&v28 + 1) = 0;
          v29[0] = 0;
          LODWORD(v28) = 11;
          v16 = v25;
          v17 = v26;
          if (v26)
          {
            v18 = (unint64_t *)&v26->__shared_weak_owners_;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
            *((_QWORD *)&v28 + 1) = v16;
            v29[0] = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          else
          {
            *((_QWORD *)&v28 + 1) = v25;
          }
          (*(void (**)(_QWORD, void (***)(BambiCallEvent *__hidden)))(**(_QWORD **)(v2 + 400)
                                                                                          + 16))(*(_QWORD *)(v2 + 400), &v27);
          BambiCall::sendHoldResumeIndication((BambiCall *)v2, 0);
          v27 = &off_1E78BD300;
          if (v29[0])
            std::__shared_weak_count::__release_weak(v29[0]);
          v32 = &off_1E78BD300;
          if (v34[0])
            std::__shared_weak_count::__release_weak(v34[0]);
        }
      }
    }
  }
  v22 = v36;
  if (v36)
  {
    v23 = (unint64_t *)&v36->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1BEF9C6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  uint64_t v21;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v21 - 48);
  _Unwind_Resume(a1);
}

void BambiCall::initializeMobileOriginated(BambiCall *this@<X0>, const SipUri *a2@<X1>, const BambiCallOptions *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v7;
  uint64_t v9;
  uint64_t v10;
  SipDialogManager *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  const ImsResult *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  void (**v34)(ImsResult *__hidden);
  uint64_t *v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  v42 = 0;
  v43 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (!v7
    || (v43 = std::__shared_weak_count::lock(v7)) == 0
    || (v9 = *((_QWORD *)this + 44), v41 = 0, v42 = v9, v40 = 0, !v9))
  {
    v40 = 0;
    v41 = 0;
LABEL_23:
    v23 = *((_QWORD *)this + 9);
    v22 = (char *)this + 72;
    v24 = (*(uint64_t (**)(char *))(v23 + 56))(v22);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v22 + 16))(v22, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"unable to create SipSession for call to ", 40);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v24);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v34 = &off_1E78B7238;
    v35 = &_bambiDomain;
    v36 = 0x40000000;
    v25 = (const ImsResult *)ImsResult::operator<<<char [28]>((uint64_t)&v34, "unable to create SipSession");
    ImsResult::ImsResult((ImsResult *)a4, v25);
    ImsResult::~ImsResult((ImsResult *)&v34);
    goto LABEL_24;
  }
  v10 = *(_QWORD *)(v9 + 144);
  v11 = *(SipDialogManager **)(v10 + 176);
  v12 = *(std::__shared_weak_count **)(v10 + 184);
  v34 = (void (**)(ImsResult *__hidden))v11;
  v35 = (uint64_t *)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  SipDialogManager::initializeSession(v11, a2, a3, (uint64_t)&v40);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (!v40)
    goto LABEL_23;
  v32 = v40;
  v33 = v41;
  if (v41)
  {
    v17 = (unint64_t *)&v41->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  BambiCall::attachSipSession((uint64_t)this, &v32);
  v19 = v33;
  if (v33)
  {
    v20 = (unint64_t *)&v33->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *((_BYTE *)this + 1488) = 1;
  *((_BYTE *)this + 452) = 1;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)a4 = &off_1E78B7238;
  *(_QWORD *)(a4 + 8) = &_bambiDomain;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_24:
  v26 = v41;
  if (v41)
  {
    v27 = (unint64_t *)&v41->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v43;
  if (v43)
  {
    v30 = (unint64_t *)&v43->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1BEF9C9D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 80);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 64);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::attachSipSession(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  const std::string *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string::size_type v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::string::size_type v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  void **v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::string __p;
  __int128 v50;
  __int128 v51;
  _OWORD v52[3];

  if (*a2)
  {
    v3 = result;
    memset(v52, 0, sizeof(v52));
    v4 = (_QWORD *)(result + 176);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v50, (_QWORD *)(result + 176));
    v51 = v50;
    v50 = 0uLL;
    LoggableString::LoggableString((LoggableString *)&__p, "attachSipSession");
    SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v52, (uint64_t *)&v51, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (*(_QWORD *)(v3 + 384))
      BambiCall::detachSipSession((BambiCall *)v3);
    v11 = *(const std::string **)(*a2 + 240);
    v12 = *(std::__shared_weak_count **)(*a2 + 248);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    std::string::operator=((std::string *)(v3 + 464), v11 + 64);
    if (v12)
    {
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v3 + 384), a2);
    LoggableString::LoggableString((LoggableString *)&__p, "Session");
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v3 + 32))(v3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v17 = *(_QWORD *)(v3 + 384);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v47, v4);
    v18 = v47;
    v19 = v48;
    if (v48)
    {
      p_shared_weak_owners = (unint64_t *)&v48->__shared_weak_owners_;
      do
        v21 = __ldxr(p_shared_weak_owners);
      while (__stxr(v21 + 1, p_shared_weak_owners));
    }
    *(_QWORD *)(v17 + 768) = v18;
    v22 = *(std::__shared_weak_count **)(v17 + 776);
    *(_QWORD *)(v17 + 776) = v19;
    if (v22)
    {
      std::__shared_weak_count::__release_weak(v22);
      v19 = v48;
    }
    if (v19)
    {
      v23 = (unint64_t *)&v19->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v25 = *(_QWORD *)(*a2 + 240);
    v26 = *(std::__shared_weak_count **)(*a2 + 248);
    __p.__r_.__value_.__r.__words[0] = v25;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = *(_QWORD *)(v25 + 632);
    v30 = v25 + 224;
    if (v29)
      v31 = v29;
    else
      v31 = v30;
    SipUri::operator=((SipUri *)(v3 + 1040), v31);
    if (v26)
    {
      v32 = (unint64_t *)&v26->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v34 = *(_QWORD *)(*a2 + 240);
    v35 = *(std::__shared_weak_count **)(*a2 + 248);
    __p.__r_.__value_.__r.__words[0] = v34;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    std::string::operator=((std::string *)(v3 + 1448), (const std::string *)(v34 + 640));
    if (v35)
    {
      v38 = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v40 = *a2;
    *(_WORD *)(v3 + 664) = *(_WORD *)(v40 + 784);
    std::string::operator=((std::string *)(v3 + 672), (const std::string *)(v40 + 792));
    v41 = *(_OWORD *)(v40 + 816);
    v42 = *(_OWORD *)(v40 + 832);
    v43 = *(_OWORD *)(v40 + 848);
    *(_QWORD *)(v3 + 741) = *(_QWORD *)(v40 + 861);
    *(_OWORD *)(v3 + 712) = v42;
    *(_OWORD *)(v3 + 728) = v43;
    *(_OWORD *)(v3 + 696) = v41;
    std::string::operator=((std::string *)(v3 + 752), (const std::string *)(v40 + 872));
    std::string::operator=((std::string *)(v3 + 776), (const std::string *)(v40 + 896));
    *(_BYTE *)(v3 + 800) = *(_BYTE *)(v40 + 920);
    v44 = *(_OWORD *)(v40 + 928);
    v45 = *(_OWORD *)(v40 + 960);
    *(_OWORD *)(v3 + 824) = *(_OWORD *)(v40 + 944);
    *(_OWORD *)(v3 + 840) = v45;
    *(_OWORD *)(v3 + 808) = v44;
    std::string::operator=((std::string *)(v3 + 856), (const std::string *)(v40 + 976));
    std::string::operator=((std::string *)(v3 + 880), (const std::string *)(v40 + 1000));
    std::string::operator=((std::string *)(v3 + 904), (const std::string *)(v40 + 1024));
    std::string::operator=((std::string *)(v3 + 928), (const std::string *)(v40 + 1048));
    std::string::operator=((std::string *)(v3 + 952), (const std::string *)(v40 + 1072));
    *(_BYTE *)(v3 + 976) = *(_BYTE *)(v40 + 1096);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v3 + 984), (const std::string *)(v40 + 1104));
    ims::makeAwdCallId(v3 + 464, &__p);
    v46 = (void **)(v3 + 488);
    if (*(char *)(v3 + 511) < 0)
      operator delete(*v46);
    *(_OWORD *)v46 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v3 + 504) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v52);
  }
  return result;
}

void sub_1BEF9CE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void BambiCall::initializeMediaForSession(uint64_t a1@<X0>, SDPModel **a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  ImsPrefs *v8;
  void **OriginUsernameKey;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string::size_type size;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t PreferredMedia;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  const std::string *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  unint64_t *p_shared_weak_owners;
  unint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  int v89;
  _QWORD *v90;
  _QWORD *v91;
  BOOL v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  SDPModel *v107;
  std::__shared_weak_count *v108;
  void *v109;
  std::__shared_weak_count *v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  _BYTE __str[32];
  __int128 v116;
  uint64_t v117;
  std::string v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  void *__p;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _BYTE v131[112];
  uint64_t v132;
  uint64_t v133;
  void (**v134)(SipParameterMap *__hidden);
  _QWORD *v135;
  _QWORD v136[5];
  _QWORD v137[4];
  std::string v138;
  void *v139;
  std::__shared_weak_count *v140;
  char v141;
  uint64_t v142;
  std::__shared_weak_count *v143;

  *(_OWORD *)&v118.__r_.__value_.__l.__data_ = 0uLL;
  v6 = *(std::__shared_weak_count **)(a1 + 360);
  if (v6)
  {
    v6 = std::__shared_weak_count::lock(v6);
    v7 = v6;
    v118.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    if (v6)
    {
      v6 = *(std::__shared_weak_count **)(a1 + 352);
      v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    }
  }
  else
  {
    v7 = 0;
  }
  memset(&v138, 0, sizeof(v138));
  v8 = (ImsPrefs *)SipStack::prefs((SipStack *)v6);
  OriginUsernameKey = (void **)ImsPrefs::getOriginUsernameKey(v8);
  ImsPrefs::stringValue(v8, OriginUsernameKey);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  size = HIBYTE(v138.__r_.__value_.__r.__words[2]);
  if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v138.__r_.__value_.__l.__size_;
  if (!size)
  {
    v137[2] = 257;
    v136[2] = 257;
    v133 = 0;
    v124 = 0u;
    v120 = 0uLL;
    *(_QWORD *)&v121 = 0;
    v119 = 0uLL;
    v118.__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E78D08F8;
    v118.__r_.__value_.__r.__words[2] = 0;
    v123 = 0;
    *(_QWORD *)&v124 = 0;
    *((_QWORD *)&v121 + 1) = &off_1E78B82D8;
    __p = &v123;
    v118.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BFCE8;
    v125 = 0u;
    v126 = 0u;
    v127 = 0u;
    v128 = 0u;
    v129 = 0u;
    v130 = 0u;
    memset(v131, 0, sizeof(v131));
    v132 = 0;
    v136[0] = 0;
    v136[1] = 0;
    v134 = &off_1E78B82D8;
    v135 = v136;
    v137[1] = 0;
    v137[0] = 0;
    v136[3] = &off_1E78B82D8;
    v136[4] = v137;
    WORD4(v124) = 257;
    if (*(_BYTE *)(a1 + 665))
    {
      SipUri::makeAnonymous((SipUri *)&v118);
    }
    else
    {
      v13 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 360));
      *(_QWORD *)__str = *(_QWORD *)(a1 + 352);
      *(_QWORD *)&__str[8] = v13;
      v14 = SipUserAgent::publicUri(*(SipUserAgent **)(*(_QWORD *)__str + 144));
      SipUri::operator=((SipUri *)&v118, v14);
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__str, (char *)&str_33_3);
    std::string::operator=((std::string *)v131, (const std::string *)__str);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    SipUri::asString((uint64_t)&v118, 2, __str);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
    v138 = *(std::string *)__str;
    SipUri::~SipUri((SipUri *)&v118);
  }
  std::string::basic_string[abi:ne180100]<0>(__str, " ");
  std::string::basic_string[abi:ne180100]<0>(&v139, (char *)&str_33_3);
  ims::substituteVar(&v138, (uint64_t)__str, (uint64_t)&v139, &v118);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  v138 = v118;
  *((_BYTE *)&v118.__r_.__value_.__s + 23) = 0;
  v118.__r_.__value_.__s.__data_[0] = 0;
  if (v141 < 0)
    operator delete(v139);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v117 = 0;
  v116 = 0u;
  memset(__str, 0, sizeof(__str));
  *(_OWORD *)&v118.__r_.__value_.__l.__data_ = 0uLL;
  v17 = *(std::__shared_weak_count **)(a1 + 360);
  if (v17)
  {
    v17 = std::__shared_weak_count::lock(v17);
    v18 = v17;
    v118.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
    if (v17)
    {
      v17 = *(std::__shared_weak_count **)(a1 + 352);
      v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    }
  }
  else
  {
    v18 = 0;
  }
  SipStack::mediaAddress((SipStack *)v17, (uint64_t)__str);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v113 = 0;
  v114 = 0;
  SipHost::address((SipHost *)__str, &v113);
  v21 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 360));
  v118.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 352);
  v118.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
  PreferredMedia = SipUserAgent::getPreferredMedia(*(_QWORD *)(v118.__r_.__value_.__r.__words[0] + 144), a1 + 776);
  v23 = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (HIDWORD(PreferredMedia) == 3)
  {
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 32))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Requested to create outgoing video call - behavior is undefined", 63);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    *(_OWORD *)&v118.__r_.__value_.__l.__data_ = 0uLL;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 192, (__int128 *)&v118);
    v26 = (std::__shared_weak_count *)v118.__r_.__value_.__l.__size_;
    if (!v118.__r_.__value_.__l.__size_)
      goto LABEL_81;
    v27 = (unint64_t *)(v118.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    goto LABEL_79;
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v111, (_QWORD *)(a1 + 176));
  v29 = *(unsigned __int8 *)(a1 + 745);
  v109 = 0;
  v110 = 0;
  v30 = *(std::__shared_weak_count **)(a1 + 360);
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    v110 = v31;
    if (v31)
    {
      v32 = *(void **)(a1 + 352);
      v109 = v32;
      goto LABEL_53;
    }
  }
  else
  {
    v31 = 0;
  }
  v32 = 0;
LABEL_53:
  v33 = operator new(0x7D8uLL);
  v34 = v33;
  v33[1] = 0;
  v33[2] = 0;
  v35 = 2 * v29;
  *v33 = &off_1E78CC2D0;
  v36 = v33 + 3;
  *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v111;
  v111 = 0uLL;
  v139 = v32;
  v140 = v31;
  v109 = 0;
  v110 = 0;
  v37 = *(std::__shared_weak_count **)(a1 + 376);
  v142 = *(_QWORD *)(a1 + 368);
  v143 = v37;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  SDPSession::SDPSession((uint64_t)(v33 + 3), &v118, (__int128 *)&v138, &v113, v35, (uint64_t)&v139, &v142);
  if (v37)
  {
    v40 = (unint64_t *)&v37->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v42 = v140;
  if (v140)
  {
    v43 = (unint64_t *)&v140->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)v118.__r_.__value_.__l.__size_;
  if (v118.__r_.__value_.__l.__size_)
  {
    v46 = (unint64_t *)(v118.__r_.__value_.__l.__size_ + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  *(_QWORD *)&v112 = v36;
  *((_QWORD *)&v112 + 1) = v34;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 192, &v112);
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
  if (*((_QWORD *)&v111 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
    do
      v28 = __ldaxr(v51);
    while (__stlxr(v28 - 1, v51));
LABEL_79:
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
LABEL_81:
  v52 = *(const std::string **)(a1 + 192);
  if (!v52)
  {
    v66 = *(_QWORD *)(a1 + 72);
    v65 = a1 + 72;
    v67 = (*(uint64_t (**)(uint64_t))(v66 + 56))(v65);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 16))(v65, v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v67 + 8), (uint64_t)"Unable to create SDP session", 28);
    *(_BYTE *)(v67 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v67 + 17) = 0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &SipResultDomain::_domain;
    *(_DWORD *)(a3 + 16) = 500;
    goto LABEL_163;
  }
  if (!*a2)
  {
    SDPSession::initializeOffer(v52);
LABEL_102:
    v68 = *(_QWORD *)(a1 + 192);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_QWORD *)(a3 + 16) = 0;
    v69 = *(_QWORD **)(v68 + 1904);
    v70 = (_QWORD *)(v68 + 1912);
    if (v69 == (_QWORD *)(v68 + 1912))
      goto LABEL_163;
    v71 = a1 + 72;
    while (1)
    {
      v72 = v69[5];
      v73 = *(std::__shared_weak_count **)(v72 + 24);
      if (v73)
      {
        v74 = *(_QWORD *)(v72 + 16);
        p_shared_weak_owners = (unint64_t *)&v73->__shared_weak_owners_;
        do
          v76 = __ldxr(p_shared_weak_owners);
        while (__stxr(v76 + 1, p_shared_weak_owners));
        v77 = std::__shared_weak_count::lock(v73);
        if (!v77)
          v74 = 0;
        std::__shared_weak_count::__release_weak(v73);
      }
      else
      {
        v77 = 0;
        v74 = 0;
      }
      v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 64))(a1 + 72);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v71 + 16))(a1 + 72, v78);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)"creating media session for ", 27);
      *(_BYTE *)(v78 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 32))(v78, &v139);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)" stream on ", 11);
      *(_BYTE *)(v78 + 17) = 0;
      if (v141 < 0)
        operator delete(v139);
      if (v74)
        std::ostream::operator<<();
      else
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)"Unknown Call", 12);
      *(_BYTE *)(v78 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v78 + 17) = 0;
      v79 = BambiCall::bambiClient((BambiCall *)a1);
      v80 = *(_DWORD *)(a1 + 444);
      v81 = *(std::__shared_weak_count **)(a1 + 200);
      v139 = *(void **)(a1 + 192);
      v140 = v81;
      if (v81)
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      BambiClient::createMediaSessionForStream(v79, v72, (uint64_t)&v113, v80, (uint64_t *)&v139, (uint64_t)&v118);
      v84 = v140;
      if (!v140)
        goto LABEL_123;
      v85 = (unint64_t *)&v140->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
        if (!v77)
          goto LABEL_129;
      }
      else
      {
LABEL_123:
        if (!v77)
          goto LABEL_129;
      }
      v87 = (unint64_t *)&v77->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
LABEL_129:
      ImsResult::operator=(a3, (uint64_t)&v118);
      ImsResult::~ImsResult((ImsResult *)&v118);
      v119 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
      v118.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v118.__r_.__value_.__r.__words[2]) = 0;
      if (*(uint64_t **)(a3 + 8) != &_bambiDomain)
      {
        ImsResult::~ImsResult((ImsResult *)&v118);
        goto LABEL_163;
      }
      v89 = *(_DWORD *)(a3 + 16);
      ImsResult::~ImsResult((ImsResult *)&v118);
      if (!v89)
      {
        v90 = (_QWORD *)v69[1];
        if (v90)
        {
          do
          {
            v91 = v90;
            v90 = (_QWORD *)*v90;
          }
          while (v90);
        }
        else
        {
          do
          {
            v91 = (_QWORD *)v69[2];
            v92 = *v91 == (_QWORD)v69;
            v69 = v91;
          }
          while (!v92);
        }
        v69 = v91;
        if (v91 != v70)
          continue;
      }
      goto LABEL_163;
    }
  }
  v53 = (std::__shared_weak_count *)a2[1];
  v107 = *a2;
  v108 = v53;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v105 = 0;
  v106 = 0;
  v56 = SDPSession::handleOfferAnswer((uint64_t)v52, &v107, (uint64_t)&v105, 0);
  v57 = v106;
  if (v106)
  {
    v58 = (unint64_t *)&v106->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v108;
  if (v108)
  {
    v61 = (unint64_t *)&v108->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (v56 == 2)
    goto LABEL_102;
  v142 = 0;
  v143 = 0;
  v63 = *(std::__shared_weak_count **)(a1 + 360);
  if (v63 && (v143 = std::__shared_weak_count::lock(v63)) != 0)
  {
    v64 = *(_QWORD *)(a1 + 352);
    v142 = v64;
  }
  else
  {
    v64 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v139, "CodecNotSupported");
  SipStack::callTerminationReason(v64, (uint64_t)&v139, (BambiCallTerminationReason *)&v118);
  SipResultDomain::makeResult((SipResultDomain *)&v118, a3);
  v93 = (std::__shared_weak_count *)v126;
  if ((_QWORD)v126)
  {
    v94 = (unint64_t *)(v126 + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = (std::__shared_weak_count *)v125;
  if ((_QWORD)v125)
  {
    v97 = (unint64_t *)(v125 + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (SBYTE7(v124) < 0)
    operator delete(__p);
  if (SHIBYTE(v120) < 0)
    operator delete(*((void **)&v119 + 1));
  if (SBYTE7(v119) < 0)
    operator delete((void *)v118.__r_.__value_.__l.__size_);
  if (v141 < 0)
    operator delete(v139);
  v99 = v143;
  if (v143)
  {
    v100 = (unint64_t *)&v143->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
LABEL_163:
  v102 = v114;
  if (v114)
  {
    v103 = (unint64_t *)&v114->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  SipHost::~SipHost((void **)__str);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
}

void sub_1BEF9DAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;

  BambiCallTerminationReason::~BambiCallTerminationReason(&a32);
  if (*(char *)(v32 - 113) < 0)
    operator delete(*(void **)(v32 - 136));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v32 - 112);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  SipHost::~SipHost(&__p);
  if (*(char *)(v32 - 137) < 0)
    operator delete(*(void **)(v32 - 160));
  _Unwind_Resume(a1);
}

void BambiCall::initializeMobileTerminated(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = a2[1];
  v20 = *a2;
  v21 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  BambiCall::attachSipSession(a1, &v20);
  v6 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_BYTE *)(a1 + 1488) = 0;
  v19 = 0;
  v9 = *(std::__shared_weak_count **)(a1 + 360);
  if (v9 && (v19 = std::__shared_weak_count::lock(v9)) != 0)
    v10 = *(_QWORD *)(a1 + 352);
  else
    v10 = 0;
  v11 = a1 + 1568;
  std::string::operator=((std::string *)(a1 + 1568), (const std::string *)(v10 + 3136));
  std::string::operator=((std::string *)(a1 + 1592), (const std::string *)(v10 + 3160));
  v12 = *(_OWORD *)(v10 + 3184);
  *(_BYTE *)(a1 + 1632) = *(_BYTE *)(v10 + 3200);
  *(_OWORD *)(a1 + 1616) = v12;
  std::string::operator=((std::string *)(a1 + 1496), (const std::string *)(a1 + 1568));
  std::string::operator=((std::string *)(a1 + 1520), (const std::string *)(a1 + 1592));
  *(_OWORD *)(a1 + 1544) = *(_OWORD *)(a1 + 1616);
  *(_BYTE *)(a1 + 1560) = *(_BYTE *)(a1 + 1632);
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (*(char *)(a1 + 1591) < 0)
  {
    if (!*(_QWORD *)(a1 + 1576))
      return;
  }
  else if (!*(_BYTE *)(a1 + 1591))
  {
    return;
  }
  if (*(char *)(a1 + 1615) < 0)
  {
    if (!*(_QWORD *)(a1 + 1600))
      return;
  }
  else if (!*(_BYTE *)(a1 + 1615))
  {
    return;
  }
  v16 = *(_QWORD *)(a1 + 72);
  v15 = a1 + 72;
  v17 = (*(uint64_t (**)(uint64_t))(v16 + 64))(v15);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"starting MT call on access network ", 35);
  *(_BYTE *)(v17 + 17) = 0;
  v18 = (_BYTE *)ims::operator<<(v17, v11);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v18[17] = 0;
}

void sub_1BEF9DF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ims::AccessNetwork::operator=(uint64_t a1, uint64_t a2)
{
  char v4;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  v4 = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = v4;
  return a1;
}

void BambiCall::setInputFrequencyLevel(BambiCall *this, const __CFData *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v2 = *((_QWORD *)this + 50);
  if (v2)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v7, (_QWORD *)this + 22);
    (*(void (**)(uint64_t, uint64_t *, const __CFData *))(*(_QWORD *)v2 + 200))(v2, &v7, a2);
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BEF9DFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCall::setOutputFrequencyLevel(BambiCall *this, const __CFData *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v2 = *((_QWORD *)this + 50);
  if (v2)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v7, (_QWORD *)this + 22);
    (*(void (**)(uint64_t, uint64_t *, const __CFData *))(*(_QWORD *)v2 + 208))(v2, &v7, a2);
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BEF9E098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCall::fakeNetworkBasedCallWaiting(BambiCall *this)
{
  const BambiCallOptions *v2;
  _BYTE v3[72];
  _BYTE v4[72];
  _OWORD v5[25];
  uint64_t v6;
  _OWORD v7[22];

  v2 = (const BambiCallOptions *)(*((_QWORD *)this + 48) + 784);
  memset(v7, 0, sizeof(v7));
  BambiCallOptions::BambiCallOptions((BambiCallOptions *)v7, v2);
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  SipUri::SipUri((SipUri *)v5, (BambiCall *)((char *)this + 1040));
  BambiCall::initializeMobileOriginated(this, (const SipUri *)v5, (const BambiCallOptions *)v7, (uint64_t)v4);
  ImsResult::~ImsResult((ImsResult *)v4);
  SipSession::sendInvite(*((_QWORD *)this + 48), (std::string *)&SipSession::kInviteTypeFakeNetworkBasedCallWaiting, (ImsResult *)v3);
  ImsResult::~ImsResult((ImsResult *)v3);
  SipUri::~SipUri((SipUri *)v5);
  BambiCallOptions::~BambiCallOptions((void **)v7);
}

void sub_1BEF9E1A0(_Unwind_Exception *a1)
{
  BambiCallOptions::~BambiCallOptions((void **)&STACK[0x230]);
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipMinSEHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "Min-SE");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

uint64_t BambiCall::processCallEvent(BambiCall *this, BambiCallEvent *a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unsigned int v20;
  _BYTE *v21;
  _DWORD *v22;
  _BOOL4 v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  _BOOL4 v29;
  uint64_t v30;
  _BYTE *v31;
  int v32;
  const std::string **v33;
  const std::string **v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  SipStack *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  ImsPrefs *v73;
  void **EmergencyAnonymousAutomaticRedialKey;
  void *v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BambiClient *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _QWORD *v90;
  _QWORD *v91;
  BOOL v92;
  SipStack *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  SipStack *v97;
  ImsPrefs *v98;
  void **NoFallbackVoiceServiceKey;
  void *v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  SipStack *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  char v125;
  int v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  _DWORD *v137;
  unsigned int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t v159;
  const BambiCallOptions *v160;
  std::string *v161;
  void **v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count *v165;
  ImsPrefs *v166;
  void **EnableRingbackAudioForTextCallsKey;
  void *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _DWORD *v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  ImsPrefs *v180;
  void **StopLocalRingbackToneOn181Key;
  void *v182;
  int v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t (*v186)(char *);
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  _BYTE *v199;
  uint64_t v200;
  _BYTE *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  BOOL v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  BOOL v216;
  uint64_t *v217;
  dispatch_time_t v218;
  NSObject *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  const SipUri *v225;
  uint64_t v226;
  const BambiCallOptions *v227;
  std::string *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  int v243;
  _BYTE *lpsrc;
  _QWORD block[6];
  std::__shared_weak_count *v246;
  _QWORD v247[6];
  std::__shared_weak_count *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  __int128 v251;
  _OWORD v252[3];
  uint64_t v253;
  std::__shared_weak_count *v254;
  SipStack *v255;
  std::__shared_weak_count *v256;
  void *__p[2];
  void *v258[8];
  __int128 v259;
  void *v260[2];
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  __int128 v280;
  _OWORD v281[21];
  void *v282[2];
  char v283;
  _BYTE v284[24];
  _BYTE *v285;
  uint64_t v286;

  v286 = *MEMORY[0x1E0C80C00];
  memset(v252, 0, sizeof(v252));
  v4 = (_QWORD *)((char *)this + 176);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v280, (_QWORD *)this + 22);
  v251 = v280;
  v280 = 0uLL;
  LoggableString::LoggableString((LoggableString *)__p, "processCallEvent");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v252, (uint64_t *)&v251, (const std::string *)__p);
  if (SHIBYTE(v258[0]) < 0)
    operator delete(__p[0]);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v251 + 1);
  if (*((_QWORD *)&v251 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v251 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
  if (*((_QWORD *)&v280 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (char *)this + 72;
  v12 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"processing call event ", 22);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(BambiCallEvent *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v12);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v249, v4);
  v13 = v249;
  v14 = v250;
  if (v250)
  {
    p_shared_weak_owners = (unint64_t *)&v250->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 2) = v13;
  *((_QWORD *)a2 + 3) = v14;
  if (v17)
  {
    std::__shared_weak_count::__release_weak(v17);
    v14 = v250;
  }
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v20 = *((_DWORD *)a2 + 2) & 0xFFFFFFFE;
  if (v20 == 14)
  {
    if (v21)
    {
      v22 = v21;
      v23 = v21[147] != 0;
      if (v21[145])
        goto LABEL_26;
      v40 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
      if (!v40)
        goto LABEL_26;
      v41 = std::__shared_weak_count::lock(v40);
      if (!v41)
        goto LABEL_26;
      v42 = v41;
      v43 = *((_QWORD *)this + 44);
      if (v43)
      {
        v44 = v22[10];
        switch(v44)
        {
          case 29:
            v45 = *(unsigned __int8 *)(v43 + 1122);
            goto LABEL_108;
          case 24:
            v67 = 241;
            if (!*((_BYTE *)this + 1488))
              v67 = 242;
            v45 = *(unsigned __int8 *)(v43 + v67);
            goto LABEL_108;
          case 23:
            v45 = *(unsigned __int8 *)(v43 + 240);
LABEL_108:
            v47 = v45 != 0;
            goto LABEL_109;
        }
      }
      v47 = 0;
LABEL_109:
      v68 = (unint64_t *)&v41->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (v69)
      {
        if (v47)
          goto LABEL_115;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v42);
        if (v47)
LABEL_115:
          *((_BYTE *)v22 + 144) = 1;
      }
LABEL_26:
      v255 = 0;
      v256 = 0;
      v24 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
      lpsrc = v22;
      if (!v24 || (v256 = std::__shared_weak_count::lock(v24)) == 0)
      {
        v25 = 0;
        goto LABEL_42;
      }
      v25 = *((_QWORD *)this + 44);
      v255 = (SipStack *)v25;
      v26 = *((_QWORD *)v22 + 6);
      if (v26 && v25)
      {
        v27 = *(_DWORD *)(v26 + 88);
        std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
        v28 = SipResponseCodeMap::containsResponseCodeForMethod(v25 + 1232, __p, v27, 0);
        if (SHIBYTE(v258[0]) < 0)
          operator delete(__p[0]);
        if (!v28)
        {
          v46 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v46);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"disallowing redial because response code not in silentRedialAllowedResponses", 76);
          *(_BYTE *)(v46 + 17) = 0;
          v31 = (_BYTE *)(v46 + 17);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_61;
        }
        if (lpsrc[146]
          && !*((_QWORD *)this + 64)
          && ims::AccessNetwork::isNR((ims::AccessNetwork *)(v25 + 3136))
          && !*(_BYTE *)(v25 + 3200))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
          v29 = SipResponseCodeMap::containsResponseCodeForMethod(v25 + 1264, __p, v27, 0);
          if (SHIBYTE(v258[0]) < 0)
            operator delete(__p[0]);
          if (v29)
          {
            v30 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v30);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"disallowing redial because of RedialNRSANonEmBlockedResponses", 61);
            *(_BYTE *)(v30 + 17) = 0;
            v31 = (_BYTE *)(v30 + 17);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_61:
            *v31 = 0;
            lpsrc[146] = 0;
          }
        }
      }
LABEL_42:
      v32 = *((_DWORD *)lpsrc + 2);
      if (v32 != 15)
      {
        v243 = 0;
        goto LABEL_130;
      }
      if (!v33)
      {
        v243 = 0;
        goto LABEL_137;
      }
      v34 = v33;
      if (v33[6])
      {
        *(_QWORD *)&v261 = 0;
        v259 = 0u;
        *(_OWORD *)v260 = 0u;
        memset(v258, 0, sizeof(v258));
        *(_OWORD *)__p = 0u;
        SipResponse::SipResponse((SipResponse *)__p, v33[6]);
        if (v25)
        {
          v35 = *(_QWORD *)(v25 + 144);
          v37 = *(void **)(v35 + 248);
          v36 = *(std::__shared_weak_count **)(v35 + 256);
          v282[0] = v37;
          v282[1] = v36;
          if (v36)
          {
            v38 = (unint64_t *)&v36->__shared_owners_;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
          if (*((char *)v34 + 87) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v280, (const std::string::value_type *)v34[8], (std::string::size_type)v34[9]);
          }
          else
          {
            v280 = *((_OWORD *)v34 + 4);
            *(_QWORD *)&v281[0] = v34[10];
          }
          v48 = SipRegistrationClient::disableIfInWrongCountry((uint64_t)v37, (uint64_t)__p, (const std::string *)&v280);
          if (SBYTE7(v281[0]) < 0)
            operator delete((void *)v280);
          if (v36)
          {
            v49 = (unint64_t *)&v36->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          if (v48)
          {
            lpsrc[144] = 0;
            SipTransportLayer::removeConnections(*((SipTransportLayer **)v255 + 20), 0, 1, 1);
          }
        }
        __p[0] = off_1E78E40E8;
        if (SBYTE7(v261) < 0)
          operator delete(v260[0]);
        SipMessage::~SipMessage((SipMessage *)__p);
      }
      v51 = *((_DWORD *)v34 + 10);
      v52 = v51 == 17;
      if (v51 != 17 && !*((_BYTE *)v34 + 144) || !*((_BYTE *)this + 1488) && !*((_BYTE *)this + 1489))
      {
        v243 = 0;
        v52 = v23;
LABEL_129:
        v32 = *((_DWORD *)lpsrc + 2);
        v23 = v52;
LABEL_130:
        if (v32 == 14)
        {
          v76 = (unsigned int *)lpsrc;
          if (BambiCall::isWPSCall(this))
          {
            v77 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v77);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v77 + 8), (uint64_t)"Ending WPS call", 15);
            *(_BYTE *)(v77 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v77 + 64))(v77, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v77 + 17) = 0;
            if (lpsrc[144])
            {
              v78 = *((_QWORD *)this + 48);
              if (v78)
              {
                v79 = *(_QWORD *)(v78 + 712);
                if (v79)
                {
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v79 + 48))(v79) == 14)
                  {
                    v80 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
                    (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v80);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v80 + 8), (uint64_t)"WPS Call requiring CSFB ended in cleanup state - defer sending event until timer expires", 88);
                    *(_BYTE *)(v80 + 17) = 0;
                    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v80 + 64))(v80, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(_BYTE *)(v80 + 17) = 0;
                  }
                }
              }
LABEL_200:
              v120 = v256;
              if (v256)
              {
                v121 = (unint64_t *)&v256->__shared_owners_;
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
              }
              goto LABEL_205;
            }
            v118 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v118);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v118 + 8), (uint64_t)"WPS call ended normally, not performing CSFB", 44);
            *(_BYTE *)(v118 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v118 + 64))(v118, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v118 + 17) = 0;
            SipSession::exitWPSCleanup(*((SipSession **)this + 48));
          }
LABEL_138:
          if (*((_BYTE *)this + 1488) || *((_BYTE *)this + 1489))
          {
            v81 = *((_QWORD *)this + 50);
            if (v81)
              (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v81 + 16))(v81, v76);
            v82 = (BambiClient *)BambiCall::bambiClient(this);
            BambiClient::handleCallTerminationEvent(v82, (BambiCallSessionTerminationBaseEvent *)v76);
            goto LABEL_143;
          }
          if ((int)v76[10] < 10)
          {
            v174 = (_QWORD *)*((_QWORD *)this + 50);
            if (!v174)
            {
LABEL_143:
              std::string::basic_string[abi:ne180100]<0>(v282, "processSessionTerminationCallEvent");
              v83 = *((_QWORD *)this + 24);
              if (v83)
              {
                memset(v281, 0, 56);
                *(_QWORD *)&v280 = &off_1E78B7238;
                *((_QWORD *)&v280 + 1) = &_bambiDomain;
                v84 = *(_QWORD **)(v83 + 1904);
                v85 = (_QWORD *)(v83 + 1912);
                if (v84 != (_QWORD *)(v83 + 1912))
                {
                  while (1)
                  {
                    v86 = (unint64_t *)v84[5];
                    if (v86 && v86[4])
                    {
                      v87 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
                      (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v87);
                      (*(void (**)(uint64_t, void **))(*(_QWORD *)v87 + 32))(v87, v282);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v87 + 8), (uint64_t)": terminating media session ", 28);
                      *(_BYTE *)(v87 + 17) = 0;
                      std::ostream::operator<<();
                      *(_BYTE *)(v87 + 17) = 0;
                      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v87 + 64))(v87, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      *(_BYTE *)(v87 + 17) = 0;
                      RTPManager::terminateSessionWithId(*((RTPManager **)this + 46), v86[4]);
                      v88 = BambiCall::bambiClient(this);
                      BambiClient::setMediaSessionIdForStream(v88, (BambiCallMediaStream *)v86, 0);
                    }
                    memset(&v258[1], 0, 48);
                    __p[0] = &off_1E78B7238;
                    __p[1] = &_bambiDomain;
                    LODWORD(v258[0]) = 0;
                    ImsResult::operator=((uint64_t)&v280, (uint64_t)__p);
                    ImsResult::~ImsResult((ImsResult *)__p);
                    memset(&v258[1], 0, 48);
                    __p[0] = &off_1E78B7238;
                    __p[1] = &_bambiDomain;
                    LODWORD(v258[0]) = 0;
                    v76 = (unsigned int *)lpsrc;
                    if (*((uint64_t **)&v280 + 1) != &_bambiDomain)
                      break;
                    v89 = v281[0];
                    ImsResult::~ImsResult((ImsResult *)__p);
                    if (!v89)
                    {
                      v90 = (_QWORD *)v84[1];
                      if (v90)
                      {
                        do
                        {
                          v91 = v90;
                          v90 = (_QWORD *)*v90;
                        }
                        while (v90);
                      }
                      else
                      {
                        do
                        {
                          v91 = (_QWORD *)v84[2];
                          v92 = *v91 == (_QWORD)v84;
                          v84 = v91;
                        }
                        while (!v92);
                      }
                      v84 = v91;
                      if (v91 != v85)
                        continue;
                    }
                    goto LABEL_165;
                  }
                  ImsResult::~ImsResult((ImsResult *)__p);
                }
LABEL_165:
                ImsResult::~ImsResult((ImsResult *)&v280);
              }
              if (v283 < 0)
                operator delete(v282[0]);
              v97 = v255;
              if (v255)
              {
                v98 = (ImsPrefs *)SipStack::prefs(v255);
                NoFallbackVoiceServiceKey = (void **)ImsPrefs::getNoFallbackVoiceServiceKey(v98);
                v100 = ImsPrefs::prefWithKey(v98, NoFallbackVoiceServiceKey);
                if (v100)
                  v101 = (*(uint64_t (**)(void *))(*(_QWORD *)v100 + 40))(v100);
                else
                  v101 = *((_BYTE *)NoFallbackVoiceServiceKey + 57) != 0;
                if ((v23 & v101) == 1)
                {
                  v102 = *((_QWORD *)v97 + 18);
                  v103 = *(_QWORD **)(v102 + 248);
                  v104 = *(std::__shared_weak_count **)(v102 + 256);
                  __p[0] = v103;
                  __p[1] = v104;
                  if (v104)
                  {
                    v105 = (unint64_t *)&v104->__shared_owners_;
                    do
                      v106 = __ldxr(v105);
                    while (__stxr(v106 + 1, v105));
                  }
                  SipRegistrationClient::dropRegistrationWhenCallsEnd(v103, 0x15u, 1);
                  if (v104)
                  {
                    v107 = (unint64_t *)&v104->__shared_owners_;
                    do
                      v108 = __ldaxr(v107);
                    while (__stlxr(v108 - 1, v107));
                    if (!v108)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                  }
                }
                else if (*((_BYTE *)v76 + 147))
                {
                  v109 = *((_QWORD *)v97 + 18);
                  v110 = *(void **)(v109 + 248);
                  v111 = *(std::__shared_weak_count **)(v109 + 256);
                  __p[0] = v110;
                  __p[1] = v111;
                  if (v111)
                  {
                    v112 = (unint64_t *)&v111->__shared_owners_;
                    do
                      v113 = __ldxr(v112);
                    while (__stxr(v113 + 1, v112));
                  }
                  (*(void (**)(void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v110 + 168))(v110, 18, 0, 0);
                  if (v111)
                  {
                    v114 = (unint64_t *)&v111->__shared_owners_;
                    do
                      v115 = __ldaxr(v114);
                    while (__stlxr(v115 - 1, v114));
                    if (!v115)
                    {
                      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                      std::__shared_weak_count::__release_weak(v111);
                    }
                  }
                  v116 = v255;
                  SipTransportLayer::removeConnections(*((SipTransportLayer **)v255 + 20), 0, 1, 1);
                  v117 = BambiCall::bambiClient(this);
                  if (*((char *)v116 + 4159) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v116 + 517), *((_QWORD *)v116 + 518));
                  }
                  else
                  {
                    *(_OWORD *)__p = *(_OWORD *)((char *)v116 + 4136);
                    v258[0] = *((void **)v116 + 519);
                  }
                  v119 = *(_QWORD *)(v117 + 248);
                  if (v119)
                    (*(void (**)(uint64_t, void **))(*(_QWORD *)v119 + 96))(v119, __p);
                  if (SHIBYTE(v258[0]) < 0)
                    operator delete(__p[0]);
                }
                else if (v243)
                {
                  SipStack::handleFallbackRequested(v97);
                }
              }
              goto LABEL_200;
            }
            v175 = 2;
          }
          else
          {
            v93 = v255;
            if (v255)
            {
              v94 = BambiCall::bambiClient(this);
              v95 = reasonStrings;
              if ((int)v76[10] <= 37)
                v96 = v76[10];
              else
                v96 = 10;
              if (*((char *)v93 + 4159) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v93 + 517), *((_QWORD *)v93 + 518));
              }
              else
              {
                *(_OWORD *)__p = *(_OWORD *)((char *)v93 + 4136);
                v258[0] = *((void **)v93 + 519);
              }
              v233 = *(_QWORD *)(v94 + 248);
              if (v233)
                (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v233 + 112))(v233, v95 + 24 * v96, __p);
              if (SHIBYTE(v258[0]) < 0)
                operator delete(__p[0]);
            }
            v174 = (_QWORD *)*((_QWORD *)this + 50);
            if (!v174)
              goto LABEL_143;
            v175 = 35;
          }
          (*(void (**)(void))(*v174 + 8 * v175))();
          goto LABEL_143;
        }
LABEL_137:
        v76 = (unsigned int *)lpsrc;
        goto LABEL_138;
      }
      v53 = BambiCall::bambiClient(this);
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v253, v4);
      v54 = BambiClient::callCountExcludingCall(v53, &v253);
      v55 = v254;
      if (v254)
      {
        v56 = (unint64_t *)&v254->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      if (v54)
      {
        v58 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)"not terminating registration due to ", 36);
        *(_BYTE *)(v58 + 17) = 0;
        v59 = *((_DWORD *)v34 + 10);
        if (v59 > 37)
          v59 = 10;
        LoggableString::LoggableString((std::string *)__p, (const std::string *)(reasonStrings + 24 * v59));
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v58 + 40))(v58, __p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)" since we have another ongoing call", 35);
        *(_BYTE *)(v58 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_89:
        *(_BYTE *)(v58 + 17) = 0;
        if (SHIBYTE(v258[0]) < 0)
          operator delete(__p[0]);
        v243 = 0;
        goto LABEL_129;
      }
      v60 = v255;
      if (!v255)
        goto LABEL_124;
      if (!*(_BYTE *)(SipUserAgent::config(*((SipUserAgent **)v255 + 18)) + 456))
      {
        v70 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v70);
        v71 = ImsOutStream::operator<<(v70, "not terminating registration due to ");
        v72 = *((_DWORD *)v34 + 10);
        if (v72 > 37)
          v72 = 10;
        LoggableString::LoggableString((std::string *)__p, (const std::string *)(reasonStrings + 24 * v72));
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v71 + 40))(v71, __p);
        v58 = ImsOutStream::operator<<(v71, " since this is a secondary device");
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_89;
      }
      if (v51 == 17 && ims::AccessNetwork::isNR((ims::AccessNetwork *)((char *)v60 + 3136)))
      {
        v61 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v61);
        v62 = ImsOutStream::operator<<(v61, "triggering registration termination for EPSFB due to ");
        v63 = *((_DWORD *)v34 + 10);
        if (v63 > 37)
          v63 = 10;
LABEL_126:
        LoggableString::LoggableString((std::string *)__p, (const std::string *)(reasonStrings + 24 * v63));
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v62 + 40))(v62, __p);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v62 + 17) = 0;
        if (SHIBYTE(v258[0]) < 0)
          operator delete(__p[0]);
        v52 = 0;
        v243 = 1;
        goto LABEL_129;
      }
      if (*((_BYTE *)v60 + 1120))
      {
        v64 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v64);
        v65 = ImsOutStream::operator<<(v64, "not terminating registration due to ");
        v66 = *((_DWORD *)v34 + 10);
        if (v66 > 37)
          v66 = 10;
        LoggableString::LoggableString((std::string *)__p, (const std::string *)(reasonStrings + 24 * v66));
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v65 + 40))(v65, __p);
        v58 = ImsOutStream::operator<<(v65, " since CSFB is disabled");
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_89;
      }
      if (!*(_BYTE *)(SipUserAgent::config(*((SipUserAgent **)v60 + 18)) + 1120))
      {
        v234 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v234);
        v235 = ImsOutStream::operator<<(v234, "not terminating registration due to ");
        v236 = *((_DWORD *)v34 + 10);
        if (v236 > 37)
          v236 = 10;
        LoggableString::LoggableString((std::string *)__p, (const std::string *)(reasonStrings + 24 * v236));
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v235 + 40))(v235, __p);
        v58 = ImsOutStream::operator<<(v235, " since our prefs say not to");
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_89;
      }
      if (*((_QWORD *)this + 64))
      {
        v73 = (ImsPrefs *)SipStack::prefs(v60);
        EmergencyAnonymousAutomaticRedialKey = (void **)ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v73);
        v75 = ImsPrefs::prefWithKey(v73, EmergencyAnonymousAutomaticRedialKey);
        if (v75)
        {
          if (!(*(unsigned int (**)(void *))(*(_QWORD *)v75 + 40))(v75))
            goto LABEL_123;
LABEL_418:
          v240 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v240);
          v241 = ImsOutStream::operator<<(v240, "not terminating registration due to ");
          v242 = *((_DWORD *)v34 + 10);
          if (v242 > 37)
            v242 = 10;
          LoggableString::LoggableString((std::string *)__p, (const std::string *)(reasonStrings + 24 * v242));
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v241 + 40))(v241, __p);
          v58 = ImsOutStream::operator<<(v241, " since automatic emergency redial is enabled");
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_89;
        }
        if (*((_BYTE *)EmergencyAnonymousAutomaticRedialKey + 57))
          goto LABEL_418;
      }
LABEL_123:
      if (!*((_BYTE *)v60 + 3684))
      {
        v237 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v237);
        v238 = ImsOutStream::operator<<(v237, "not terminating registration due to ");
        v239 = *((_DWORD *)v34 + 10);
        if (v239 > 37)
          v239 = 10;
        LoggableString::LoggableString((std::string *)__p, (const std::string *)(reasonStrings + 24 * v239));
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v238 + 40))(v238, __p);
        v58 = ImsOutStream::operator<<(v238, " since no legacy RAT types are available");
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_89;
      }
LABEL_124:
      v62 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v62 + 8), (uint64_t)"triggering registration termination due to ", 43);
      *(_BYTE *)(v62 + 17) = 0;
      v63 = *((_DWORD *)v34 + 10);
      if (v63 > 37)
        v63 = 10;
      goto LABEL_126;
    }
  }
LABEL_205:
  if (!*((_BYTE *)this + 1488) && !*((_BYTE *)this + 1489))
  {
    v140 = *((_DWORD *)a2 + 2);
    if (v140 != 2 && v140 != 23)
    {
      v141 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v141);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v141 + 8), (uint64_t)"suppressing call event ", 23);
      *(_BYTE *)(v141 + 17) = 0;
      (*(void (**)(BambiCallEvent *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v141);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v141 + 8), (uint64_t)" for hidden call ", 17);
      *(_BYTE *)(v141 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)__p, (const std::string *)((char *)this + 464));
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v141 + 56))(v141, __p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v141 + 64))(v141, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v141 + 17) = 0;
      if (SHIBYTE(v258[3]) < 0)
        operator delete(v258[1]);
      if (SHIBYTE(v258[0]) < 0)
        operator delete(__p[0]);
      v142 = *((_QWORD *)this + 50);
      if (v142)
        (*(void (**)(uint64_t, BambiCallEvent *))(*(_QWORD *)v142 + 288))(v142, a2);
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v252);
    }
  }
  v253 = 0;
  v254 = 0;
  v123 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v123 && (v254 = std::__shared_weak_count::lock(v123)) != 0)
  {
    v124 = *((_QWORD *)this + 44);
    v253 = v124;
    if (v124)
    {
      SipStack::handleCallEvent((SipStack *)v124, a2);
      v125 = 0;
      goto LABEL_213;
    }
  }
  else
  {
    v124 = 0;
  }
  v125 = 1;
LABEL_213:
  v126 = *((_DWORD *)a2 + 2);
  if (v126 <= 21)
  {
    switch(v126)
    {
      case 2:
        *((_BYTE *)this + 1489) = 1;
        __p[0] = 0;
        __p[1] = 0;
        gettimeofday((timeval *)__p, 0);
        *((_QWORD *)this + 213) = 1000 * (uint64_t)__p[0] + SLODWORD(__p[1]) / 1000 + 2208988800000;
        v128 = *((_QWORD *)this + 22);
        v127 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
        if (v127)
        {
          v129 = (unint64_t *)&v127->__shared_weak_owners_;
          do
            v130 = __ldxr(v129);
          while (__stxr(v130 + 1, v129));
          do
            v131 = __ldxr(v129);
          while (__stxr(v131 + 1, v129));
        }
        if ((v125 & 1) != 0 || !*(_DWORD *)(v124 + 2652))
        {
          v163 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v163);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v163 + 8), (uint64_t)"no auto-ring timer set", 22);
          *(_BYTE *)(v163 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v163 + 64))(v163, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v163 + 17) = 0;
        }
        else
        {
          if (v127)
          {
            v132 = (unint64_t *)&v127->__shared_weak_owners_;
            do
              v133 = __ldxr(v132);
            while (__stxr(v133 + 1, v132));
          }
          v285 = 0;
          v134 = operator new(0x20uLL);
          *v134 = &off_1E78CC108;
          v134[1] = this;
          v134[2] = v128;
          v134[3] = v127;
          v285 = v134;
          SipTimerContainer::startTimer((_QWORD *)this + 26, (uint64_t)"AutoRingTimer", (uint64_t)v284, *(_DWORD *)(v124 + 2652), 0);
          v135 = v285;
          if (v285 == v284)
          {
            v136 = 4;
            v135 = v284;
          }
          else
          {
            if (!v285)
              goto LABEL_374;
            v136 = 5;
          }
          (*(void (**)(void))(*v135 + 8 * v136))();
        }
LABEL_374:
        if (*((_BYTE *)this + 1801))
        {
          v218 = dispatch_time(0, 500);
          v219 = sImsDispatchQueue;
          if (!sImsDispatchQueue)
          {
            v219 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
            sImsDispatchQueue = (uint64_t)v219;
          }
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 1174405120;
          block[2] = ___ZN9BambiCall16processCallEventEP14BambiCallEvent_block_invoke_64;
          block[3] = &__block_descriptor_tmp_65;
          block[4] = this;
          block[5] = v128;
          v246 = v127;
          if (v127)
          {
            v220 = (unint64_t *)&v127->__shared_weak_owners_;
            do
              v221 = __ldxr(v220);
            while (__stxr(v221 + 1, v220));
          }
          dispatch_after(v218, v219, block);
          if (v246)
            std::__shared_weak_count::__release_weak(v246);
        }
        if (v127)
        {
          std::__shared_weak_count::__release_weak(v127);
          goto LABEL_384;
        }
        goto LABEL_385;
      case 3:
        if (*(_DWORD *)(*((_QWORD *)this + 48) + 1364) == 2)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "ProvisionalResponse");
          BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, (std::string *)__p);
          goto LABEL_291;
        }
        goto LABEL_385;
      case 4:
        if (!*((_QWORD *)this + 211))
        {
          __p[0] = 0;
          __p[1] = 0;
          gettimeofday((timeval *)__p, 0);
          *((_QWORD *)this + 211) = 1000 * (uint64_t)__p[0] + SLODWORD(__p[1]) / 1000 + 2208988800000;
        }
        if (!*((_QWORD *)this + 212))
        {
          __p[0] = 0;
          __p[1] = 0;
          gettimeofday((timeval *)__p, 0);
          *((_QWORD *)this + 212) = 1000 * (uint64_t)__p[0] + SLODWORD(__p[1]) / 1000 + 2208988800000;
        }
        __p[0] = 0;
        __p[1] = 0;
        v143 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
        if (v143)
        {
          __p[1] = std::__shared_weak_count::lock(v143);
          if (__p[1])
          {
            v143 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
            __p[0] = v143;
          }
          else
          {
            v143 = (std::__shared_weak_count *)__p[0];
          }
        }
        v166 = (ImsPrefs *)SipStack::prefs((SipStack *)v143);
        EnableRingbackAudioForTextCallsKey = (void **)ImsPrefs::getEnableRingbackAudioForTextCallsKey(v166);
        v168 = ImsPrefs::prefWithKey(v166, EnableRingbackAudioForTextCallsKey);
        if (v168)
        {
          if (((*(uint64_t (**)(void *))(*(_QWORD *)v168 + 40))(v168) & 1) == 0)
            goto LABEL_299;
        }
        else if (!*((_BYTE *)EnableRingbackAudioForTextCallsKey + 57))
        {
LABEL_299:
          if (*((_BYTE *)this + 744))
          {
            v127 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v169 = (unint64_t *)((char *)__p[1] + 8);
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                goto LABEL_384;
              }
            }
            goto LABEL_385;
          }
          v197 = *((unsigned __int8 *)this + 745);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)__p);
          if (v197)
            goto LABEL_385;
          goto LABEL_340;
        }
        v171 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v172 = (unint64_t *)((char *)__p[1] + 8);
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
LABEL_340:
        if (*(_DWORD *)(*((_QWORD *)this + 48) + 1364) == 2)
        {
          if (*((_DWORD *)this + 112) != 4)
          {
            v198 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v198);
            v199 = (_BYTE *)ImsOutStream::operator<<(v198, "early media is enforced. Activating session for network ringback tone.");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v199 + 64))(v199, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v199[17] = 0;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "Ringing");
          BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, (std::string *)__p);
          if (SHIBYTE(v258[0]) < 0)
            operator delete(__p[0]);
          if (*((_DWORD *)this + 112) != 4)
            goto LABEL_385;
          v200 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v200);
          v201 = (_BYTE *)ImsOutStream::operator<<(v200, "early media is enforced. Activating session and starting local ringback tone.");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v201 + 64))(v201, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v201[17] = 0;
          v202 = *((_QWORD *)this + 24);
          v203 = *(_QWORD *)(v202 + 1912);
          if (!v203)
            goto LABEL_385;
          v204 = v202 + 1912;
          v205 = v202 + 1912;
          do
          {
            v206 = *(_DWORD *)(v203 + 32);
            v207 = v206 < 2;
            if (v206 >= 2)
              v208 = (uint64_t *)v203;
            else
              v208 = (uint64_t *)(v203 + 8);
            if (!v207)
              v205 = v203;
            v203 = *v208;
          }
          while (*v208);
          if (v205 == v204)
            goto LABEL_385;
          if (*(int *)(v205 + 32) > 2)
            goto LABEL_385;
          v209 = *(_QWORD *)(v205 + 40);
          if (!v209)
            goto LABEL_385;
        }
        else
        {
          v210 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v210);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v210 + 8), (uint64_t)"early media is not enforced. Starting local ringback tone.", 58);
          *(_BYTE *)(v210 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v210 + 64))(v210, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v210 + 17) = 0;
          v211 = *((_QWORD *)this + 24);
          v212 = *(_QWORD *)(v211 + 1912);
          if (!v212)
            goto LABEL_385;
          v213 = v211 + 1912;
          v214 = v211 + 1912;
          do
          {
            v215 = *(_DWORD *)(v212 + 32);
            v216 = v215 < 2;
            if (v215 >= 2)
              v217 = (uint64_t *)v212;
            else
              v217 = (uint64_t *)(v212 + 8);
            if (!v216)
              v214 = v212;
            v212 = *v217;
          }
          while (*v217);
          if (v214 == v213)
            goto LABEL_385;
          if (*(int *)(v214 + 32) > 2)
            goto LABEL_385;
          v209 = *(_QWORD *)(v214 + 40);
          if (!v209)
            goto LABEL_385;
        }
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 46) + 40))(*((_QWORD *)this + 46), *(_QWORD *)(v209 + 32));
LABEL_385:
        if (v20 != 14 && *((_QWORD *)this + 50))
        {
          v222 = *((_QWORD *)this + 48);
          if (v222 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v222 + 264))(v222))
          {
            (*(void (**)(_QWORD, BambiCallEvent *))(**((_QWORD **)this + 50) + 16))(*((_QWORD *)this + 50), a2);
          }
          else
          {
            v223 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v223);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v223 + 8), (uint64_t)"call ended while processing ", 28);
            *(_BYTE *)(v223 + 17) = 0;
            (*(void (**)(void **__return_ptr, BambiCallEvent *))(*(_QWORD *)a2 + 24))(__p, a2);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v223 + 40))(v223, __p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v223 + 8), (uint64_t)" event", 6);
            *(_BYTE *)(v223 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v223 + 64))(v223, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v223 + 17) = 0;
            if (SHIBYTE(v258[0]) < 0)
              operator delete(__p[0]);
          }
        }
        goto LABEL_397;
      case 7:
        if (*(_DWORD *)(*((_QWORD *)this + 48) + 1364) == 2)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "CallIsBeingForwarded");
          BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, (std::string *)__p);
          goto LABEL_291;
        }
        __p[0] = 0;
        __p[1] = 0;
        v164 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
        if (v164)
        {
          v164 = std::__shared_weak_count::lock(v164);
          v165 = v164;
          __p[1] = v164;
          if (v164)
          {
            v164 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
            __p[0] = v164;
          }
        }
        else
        {
          v165 = 0;
        }
        v180 = (ImsPrefs *)SipStack::prefs((SipStack *)v164);
        StopLocalRingbackToneOn181Key = (void **)ImsPrefs::getStopLocalRingbackToneOn181Key(v180);
        v182 = ImsPrefs::prefWithKey(v180, StopLocalRingbackToneOn181Key);
        if (v182)
          v183 = (*(uint64_t (**)(void *))(*(_QWORD *)v182 + 40))(v182);
        else
          v183 = *((_BYTE *)StopLocalRingbackToneOn181Key + 57) != 0;
        if (v165)
        {
          v184 = (unint64_t *)&v165->__shared_owners_;
          do
            v185 = __ldaxr(v184);
          while (__stlxr(v185 - 1, v184));
          if (!v185)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
        }
        v186 = *(uint64_t (**)(char *))(*(_QWORD *)v11 + 64);
        if (v183)
        {
          v187 = v186((char *)this + 72);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v187);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v187 + 8), (uint64_t)"Received a 181, stopping local ringback tone", 44);
          *(_BYTE *)(v187 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v187 + 64))(v187, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v187 + 17) = 0;
          v188 = *((_QWORD *)this + 24);
          v189 = *(_QWORD *)(v188 + 1912);
          if (v189)
          {
            v190 = v188 + 1912;
            v191 = v188 + 1912;
            do
            {
              v192 = *(_DWORD *)(v189 + 32);
              v193 = v192 < 2;
              if (v192 >= 2)
                v194 = (uint64_t *)v189;
              else
                v194 = (uint64_t *)(v189 + 8);
              if (!v193)
                v191 = v189;
              v189 = *v194;
            }
            while (*v194);
            if (v191 != v190 && *(int *)(v191 + 32) <= 2)
            {
              v195 = *(_QWORD *)(v191 + 40);
              if (v195)
                (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 46) + 48))(*((_QWORD *)this + 46), *(_QWORD *)(v195 + 32));
            }
          }
        }
        else
        {
          v196 = v186((char *)this + 72);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v196);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v196 + 8), (uint64_t)"Received a 181, not stopping local ringback tone", 48);
          *(_BYTE *)(v196 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v196 + 64))(v196, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v196 + 17) = 0;
        }
        goto LABEL_385;
      case 8:
        if (!*((_QWORD *)this + 211))
        {
          __p[0] = 0;
          __p[1] = 0;
          gettimeofday((timeval *)__p, 0);
          *((_QWORD *)this + 211) = 1000 * (uint64_t)__p[0] + SLODWORD(__p[1]) / 1000 + 2208988800000;
        }
        if (*(_DWORD *)(*((_QWORD *)this + 48) + 1364) == 2)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "SessionProgress");
          BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, (std::string *)__p);
          goto LABEL_291;
        }
        goto LABEL_385;
      case 9:
        v144 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v144);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v144 + 8), (uint64_t)"confirmed session with ", 23);
        *(_BYTE *)(v144 + 17) = 0;
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 130) + 40))((char *)this + 1040, v144);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v144 + 64))(v144, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v144 + 17) = 0;
        if ((v125 & 1) == 0)
        {
          SipUserAgent::transportLayer(*(SipUserAgent **)(v124 + 144), &v280);
          v145 = v280;
          std::string::basic_string[abi:ne180100]<0>(__p, "successful call");
          SipTransportLayer::resetTransportErrors(v145, (const std::string *)__p);
          if (SHIBYTE(v258[0]) < 0)
            operator delete(__p[0]);
          v146 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
          if (*((_QWORD *)&v280 + 1))
          {
            v147 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
            do
              v148 = __ldaxr(v147);
            while (__stlxr(v148 - 1, v147));
            if (!v148)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }
        }
        *((_QWORD *)this + 53) = time(0);
        __p[0] = 0;
        __p[1] = 0;
        gettimeofday((timeval *)__p, 0);
        *((_QWORD *)this + 217) = 1000 * (uint64_t)__p[0] + SLODWORD(__p[1]) / 1000 + 2208988800000;
        v149 = *((_QWORD *)this + 24);
        if (v149)
          SDPSession::enableRTCPBandwidthSpecifiers(v149);
        if (!v253 || !*(_BYTE *)(v253 + 2649))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "SessionConfirmed");
          BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, (std::string *)__p);
          goto LABEL_291;
        }
        v150 = *((_QWORD *)this + 22);
        v127 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
        if (v127)
        {
          v151 = (unint64_t *)&v127->__shared_weak_owners_;
          do
            v152 = __ldxr(v151);
          while (__stxr(v152 + 1, v151));
        }
        v153 = BambiCall::bambiClient(this);
        LoggableString::LoggableString((LoggableString *)__p, "activateMediaSession");
        v247[0] = MEMORY[0x1E0C809B0];
        v247[1] = 1174405120;
        v247[2] = ___ZN9BambiCall16processCallEventEP14BambiCallEvent_block_invoke;
        v247[3] = &__block_descriptor_tmp_61_1;
        v247[4] = this;
        v247[5] = v150;
        v248 = v127;
        if (v127)
        {
          v154 = (unint64_t *)&v127->__shared_weak_owners_;
          do
            v155 = __ldxr(v154);
          while (__stxr(v155 + 1, v154));
        }
        (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v153 + 208))(v153, __p, v247);
        if (SHIBYTE(v258[0]) < 0)
          operator delete(__p[0]);
        if (v248)
          std::__shared_weak_count::__release_weak(v248);
        if (v127)
LABEL_384:
          std::__shared_weak_count::__release_weak(v127);
        goto LABEL_385;
      default:
        goto LABEL_385;
    }
  }
  switch(v126)
  {
    case 22:
      if (*((_QWORD *)this + 48))
      {
        if (v156)
        {
          v157 = SipMessage::header<SipMinSEHeader>((uint64_t)v156 + 40);
          v158 = *(_QWORD *)v11;
          if (!v157)
          {
            v139 = (*(uint64_t (**)(char *))(v158 + 56))((char *)this + 72);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v139);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v139 + 8), (uint64_t)"no Min-SE header in Interval Too Small response", 47);
            *(_BYTE *)(v139 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v139 + 64))(v139, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            goto LABEL_371;
          }
          v159 = (*(uint64_t (**)(char *))(v158 + 64))((char *)this + 72);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v159);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v159 + 8), (uint64_t)"received 422 response for initial invite.  Starting over in new dialog with Min-SE = ", 85);
          *(_BYTE *)(v159 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v159 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v159 + 64))(v159, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v159 + 17) = 0;
          memset(v281, 0, sizeof(v281));
          v160 = (const BambiCallOptions *)(*((_QWORD *)this + 48) + 784);
          v280 = 0u;
          BambiCallOptions::BambiCallOptions((BambiCallOptions *)&v280, v160);
          v279 = 0;
          v277 = 0u;
          v278 = 0u;
          v275 = 0u;
          v276 = 0u;
          v273 = 0u;
          v274 = 0u;
          v271 = 0u;
          v272 = 0u;
          v269 = 0u;
          v270 = 0u;
          v267 = 0u;
          v268 = 0u;
          v265 = 0u;
          v266 = 0u;
          v263 = 0u;
          v264 = 0u;
          v261 = 0u;
          v262 = 0u;
          v259 = 0u;
          *(_OWORD *)v260 = 0u;
          memset(v258, 0, sizeof(v258));
          *(_OWORD *)__p = 0u;
          SipUri::SipUri((SipUri *)__p, (BambiCall *)((char *)this + 1040));
          DWORD1(v281[1]) = v157[26];
          BambiCall::initializeMobileOriginated(this, (const SipUri *)__p, (const BambiCallOptions *)&v280, (uint64_t)v282);
          ImsResult::~ImsResult((ImsResult *)v282);
          if (BYTE2(v281[2]))
            v161 = (std::string *)"InitialInvite";
          else
            v161 = (std::string *)"EmptyInvite";
          SipSession::sendInvite(*((_QWORD *)this + 48), v161, (ImsResult *)&v255);
          ImsResult::~ImsResult((ImsResult *)&v255);
          *((_BYTE *)this + 452) = 0;
          SipUri::~SipUri((SipUri *)__p);
          v162 = (void **)&v280;
          goto LABEL_396;
        }
      }
      break;
    case 23:
      std::string::basic_string[abi:ne180100]<0>(__p, "PreconditionsSatisfied");
      BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, (std::string *)__p);
LABEL_291:
      if (SHIBYTE(v258[0]) < 0)
        operator delete(__p[0]);
      goto LABEL_385;
    case 32:
      if (*((_QWORD *)this + 48))
      {
        if (v137)
        {
          v138 = *((_DWORD *)this + 451) + 1;
          *((_DWORD *)this + 451) = v138;
          if (v138 >= 4)
          {
            v139 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 56))((char *)this + 72);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v139);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v139 + 8), (uint64_t)"too many subsequent redirection requests.", 41);
            *(_BYTE *)(v139 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v139 + 64))(v139, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_371:
            *(_BYTE *)(v139 + 17) = 0;
            break;
          }
          v176 = v137;
          v177 = time(0);
          v178 = v176[112];
          v179 = *(_QWORD *)v11;
          if (v178 && v178 < v177)
          {
            v139 = (*(uint64_t (**)(char *))(v179 + 56))((char *)this + 72);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v139);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v139 + 8), (uint64_t)"received session moved response to initial invite with expired contact.", 71);
            *(_BYTE *)(v139 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v139 + 64))(v139, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            goto LABEL_371;
          }
          v224 = (*(uint64_t (**)(char *))(v179 + 64))((char *)this + 72);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v224);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v224 + 8), (uint64_t)"received session moved response for initial invite.  Redialing to new URI ", 74);
          *(_BYTE *)(v224 + 17) = 0;
          v226 = *((_QWORD *)v176 + 5);
          v225 = (const SipUri *)(v176 + 10);
          (*(void (**)(const SipUri *, uint64_t))(v226 + 40))(v225, v224);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v224 + 64))(v224, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v224 + 17) = 0;
          v274 = 0u;
          v275 = 0u;
          v272 = 0u;
          v273 = 0u;
          v270 = 0u;
          v271 = 0u;
          v268 = 0u;
          v269 = 0u;
          v266 = 0u;
          v267 = 0u;
          v264 = 0u;
          v265 = 0u;
          v262 = 0u;
          v263 = 0u;
          *(_OWORD *)v260 = 0u;
          v261 = 0u;
          v259 = 0u;
          v227 = (const BambiCallOptions *)(*((_QWORD *)this + 48) + 784);
          *(_OWORD *)__p = 0u;
          memset(v258, 0, sizeof(v258));
          BambiCallOptions::BambiCallOptions((BambiCallOptions *)__p, v227);
          BambiCall::initializeMobileOriginated(this, v225, (const BambiCallOptions *)__p, (uint64_t)&v280);
          ImsResult::~ImsResult((ImsResult *)&v280);
          if (BYTE2(v258[4]))
            v228 = (std::string *)"InitialInvite";
          else
            v228 = (std::string *)"EmptyInvite";
          SipSession::sendInvite(*((_QWORD *)this + 48), v228, (ImsResult *)v282);
          ImsResult::~ImsResult((ImsResult *)v282);
          *((_BYTE *)this + 452) = 0;
          v162 = __p;
LABEL_396:
          BambiCallOptions::~BambiCallOptions(v162);
        }
      }
      break;
    default:
      goto LABEL_385;
  }
LABEL_397:
  v229 = v254;
  if (v254)
  {
    v230 = (unint64_t *)&v254->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v252);
}

void sub_1BEFA06B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::activateAllMediaSessionIfAppropriate(uint64_t a1, std::string *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v7;
  int v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  void (**v15)(ImsResult *__hidden);
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void (**v21)(ImsResult *__hidden);
  uint64_t *v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v2 = *(_QWORD *)(a1 + 192);
  if (!v2)
    return 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v15 = &off_1E78B7238;
  v16 = &_bambiDomain;
  v17 = 0;
  v3 = *(_QWORD **)(v2 + 1904);
  v4 = (_QWORD *)(v2 + 1912);
  if (v3 != (_QWORD *)(v2 + 1912))
  {
    while (1)
    {
      v7 = BambiCall::activateMediaSessionIfAppropriate(a1, v3[5], a2);
      v26 = 0uLL;
      *((_QWORD *)&v25 + 1) = 0;
      v21 = &off_1E78B7238;
      v22 = &_bambiDomain;
      v8 = v7 ? 0 : 0x40000000;
      v23 = v8;
      *(_QWORD *)&v25 = 0;
      v24 = 0uLL;
      ImsResult::operator=((uint64_t)&v15, (uint64_t)&v21);
      ImsResult::~ImsResult((ImsResult *)&v21);
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v21 = &off_1E78B7238;
      v22 = &_bambiDomain;
      v23 = 0;
      if (v16 != &_bambiDomain)
        break;
      v9 = v17;
      ImsResult::~ImsResult((ImsResult *)&v21);
      if (!v9)
      {
        v10 = (_QWORD *)v3[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v3[2];
            v12 = *v11 == (_QWORD)v3;
            v3 = v11;
          }
          while (!v12);
        }
        v3 = v11;
        if (v11 != v4)
          continue;
      }
      goto LABEL_17;
    }
    ImsResult::~ImsResult((ImsResult *)&v21);
  }
LABEL_17:
  v13 = (*(unsigned int (**)(uint64_t *, _QWORD))(*v16 + 24))(v16, v17) ^ 1;
  ImsResult::~ImsResult((ImsResult *)&v15);
  return v13;
}

void sub_1BEFA0B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN9BambiCall16processCallEventEP14BambiCallEvent_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string __p;
  std::__shared_weak_count *v10;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v10 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "DeferredSessionConfirmed");
        BambiCall::activateAllMediaSessionIfAppropriate(v3, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEFA0BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ___ZN9BambiCall16processCallEventEP14BambiCallEvent_block_invoke_64(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  BambiCall *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (BambiCall *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        BambiCall::textSessionDetected(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEFA0CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCall::internalStart(BambiCall *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  SipDialog *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  ims::result *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[2];
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  SDPModel *v23[9];
  timeval v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v24.tv_sec = 0;
  *(_QWORD *)&v24.tv_usec = 0;
  gettimeofday(&v24, 0);
  *((_QWORD *)this + 213) = 1000 * v24.tv_sec + v24.tv_usec / 1000 + 2208988800000;
  *((_QWORD *)this + 211) = 0;
  v29 = 0;
  v30 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v4)
  {
    v30 = std::__shared_weak_count::lock(v4);
    if (v30)
    {
      v5 = *((_QWORD *)this + 44);
      v29 = v5;
      v6 = *((_QWORD *)this + 48);
      if (v6)
      {
        if (v5)
        {
          ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(*(_QWORD *)(v5 + 144) + 592), 24, (std::string *)&v24);
          std::string::operator=((std::string *)(v6 + 1376), (const std::string *)&v24);
          if (SBYTE7(v25) < 0)
            operator delete((void *)v24.tv_sec);
          v7 = *((_QWORD *)this + 48);
          v8 = *(SipDialog **)(v7 + 240);
          v9 = *(std::__shared_weak_count **)(v7 + 248);
          v24.tv_sec = (__darwin_time_t)v8;
          *(_QWORD *)&v24.tv_usec = v9;
          if (v9)
          {
            p_shared_owners = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldxr(p_shared_owners);
            while (__stxr(v11 + 1, p_shared_owners));
          }
          SipDialog::updateLocalUri(v8);
          if (v9)
          {
            v12 = (unint64_t *)&v9->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }
      }
    }
  }
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = (timeval)0;
  v25 = 0u;
  v23[0] = 0;
  v23[1] = 0;
  BambiCall::initializeMediaForSession((uint64_t)this, v23, (uint64_t)&v24);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)&v24.tv_usec + 24))(*(_QWORD *)&v24.tv_usec, v25))
  {
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v18[0] = &off_1E78B7238;
    v18[1] = &_bambiDomain;
    v19 = 1073741826;
    v14 = (ims::result *)ImsResult::operator<<<char [26]>((uint64_t)v18, "No media session for call");
    ims::result::resultWithCause(v14, (const ImsResult *)&v24, (uint64_t)v23);
    ImsLogContainer::logResult((uint64_t)this + 72, (uint64_t)v23, a2);
    ImsResult::~ImsResult((ImsResult *)v23);
    ImsResult::~ImsResult((ImsResult *)v18);
  }
  else
  {
    ImsResult::ImsResult(a2, (uint64_t)&v24);
  }
  ImsResult::~ImsResult((ImsResult *)&v24);
  v15 = v30;
  if (v30)
  {
    v16 = (unint64_t *)&v30->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BEFA0F00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 128);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [26]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEFA0FFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void BambiCall::detachSipSession(BambiCall *this)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *__p[2];
  char v11;

  if (*((_QWORD *)this + 48))
  {
    v2 = (char *)this + 384;
    v3 = (_QWORD *)((char *)this + 72);
    v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
    (*(void (**)(_QWORD *, uint64_t))(*v3 + 16))(v3, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"detaching SipSession", 20);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    v5 = v3[39];
    v6 = *(std::__shared_weak_count **)(v5 + 776);
    *(_OWORD *)(v5 + 768) = 0u;
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v2, (__int128 *)__p);
    v7 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v8 = (unint64_t *)((char *)__p[1] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    LoggableString::LoggableString((LoggableString *)__p, "Session");
    (*(void (**)(BambiCall *, void **))(*(_QWORD *)this + 40))(this, __p);
    if (v11 < 0)
      operator delete(__p[0]);
  }
}

void sub_1BEFA114C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BambiCall::shouldFakeLocalQOS(BambiCall *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *i;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28[2];
  char v29;
  void *__p;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v35 = 0;
  v36 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (!v2)
    goto LABEL_24;
  v36 = std::__shared_weak_count::lock(v2);
  if (!v36)
    goto LABEL_24;
  v3 = *((_QWORD *)this + 44);
  v35 = v3;
  if (!v3)
    goto LABEL_24;
  if (!ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v3 + 3136)) || !*(_BYTE *)(BambiCall::bambiClient(this) + 234))
  {
    if (!*(_BYTE *)(v3 + 2612))
    {
      v32 = 0;
      v33 = 0;
      v34 = 0;
      for (i = *(__int128 **)(BambiCall::bambiClient(this) + 368); i; i = *(__int128 **)i)
        std::vector<std::shared_ptr<IpAddress> const,std::allocator<std::shared_ptr<IpAddress> const>>::push_back[abi:ne180100](&v32, i + 1);
      v9 = v32;
      v10 = v33;
      while (1)
      {
        if (v9 == v10)
        {
          v19 = *((_QWORD *)this + 9);
          v18 = (char *)this + 72;
          v20 = (*(uint64_t (**)(char *))(v19 + 64))(v18);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v18 + 16))(v18, v20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"no existing calls with QoS established", 38);
          *(_BYTE *)(v20 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v20 + 17) = 0;
          v28[0] = &v32;
          std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
          goto LABEL_24;
        }
        v11 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
        if (!v11 || (v12 = *((_QWORD *)this + 22), (v13 = std::__shared_weak_count::lock(v11)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v14 = v13;
        v15 = *(_QWORD *)v9;
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v14);
        }
        if (v15 != v12 && *(_QWORD *)(*(_QWORD *)v9 + 384) && *(_BYTE *)(*(_QWORD *)v9 + 455))
          break;
        v9 += 16;
      }
      v26 = *((_QWORD *)this + 9);
      v25 = (char *)this + 72;
      v27 = (*(uint64_t (**)(char *))(v26 + 64))(v25);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v25 + 16))(v25, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"QoS already established for call ", 33);
      *(_BYTE *)(v27 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v28, (const std::string *)(*(_QWORD *)v9 + 464));
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v27 + 56))(v27, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)". Faking QoS indication.", 24);
      *(_BYTE *)(v27 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v27 + 17) = 0;
      if (v31 < 0)
        operator delete(__p);
      if (v29 < 0)
        operator delete(v28[0]);
      v28[0] = &v32;
      std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
      goto LABEL_7;
    }
LABEL_24:
    v7 = 0;
    goto LABEL_25;
  }
  v5 = *((_QWORD *)this + 9);
  v4 = (char *)this + 72;
  v6 = (*(uint64_t (**)(char *))(v5 + 64))(v4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"faking QoS indication for WiFi call", 35);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
LABEL_7:
  v7 = 1;
LABEL_25:
  v21 = v36;
  if (v36)
  {
    v22 = (unint64_t *)&v36->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v7;
}

void sub_1BEFA1470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  a10 = (void **)&a16;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v16 - 64);
  _Unwind_Resume(a1);
}

double BambiCall::ring@<D0>(BambiCall *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count **v4;
  double result;

  SipTimerContainer::cancelTimer((BambiCall *)((char *)this + 208), (std::string *)"AutoRingTimer");
  v4 = (std::__shared_weak_count **)*((_QWORD *)this + 48);
  if (v4)
  {
    SipSession::sendRingingNotification(v4, a2);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 1073741826;
  }
  return result;
}

void BambiCall::answer(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  std::string::operator=((std::string *)(a1 + 952), a2);
  v16 = 0;
  v17 = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 360);
  if (v5 && (v17 = std::__shared_weak_count::lock(v5)) != 0 && (v6 = *(_QWORD *)(a1 + 352), (v16 = v6) != 0))
  {
    v7 = *(_QWORD *)(v6 + 2888);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v14, (_QWORD *)(a1 + 176));
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 128))(v7, &v14);
    v8 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0x40000000;
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BEFA1658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::answerFromHandler@<X0>(BambiCall *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  SipSessionTimer **v11;
  std::string __p;
  __int128 v14;
  __int128 v15;
  _OWORD v16[3];

  memset(v16, 0, sizeof(v16));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v14, (_QWORD *)this + 22);
  v15 = v14;
  v14 = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "answerFromHandler");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v16, (uint64_t *)&v15, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"BambiCall::answerFromHandler", 28);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  v11 = (SipSessionTimer **)*((_QWORD *)this + 48);
  if (v11)
  {
    SipSession::acceptInvitation(v11, (ImsResult *)a2);
  }
  else
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 1073741826;
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v16);
}

void sub_1BEFA181C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void BambiCall::endWithReason(BambiCall *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[8];
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;

  BambiCall::terminationReason((uint64_t)a1, a2, (BambiCallTerminationReason *)v11);
  BambiCall::endWithReason(a1, (const BambiCallTerminationReason *)v11, a3);
  v5 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v18;
  if (v18)
  {
    v9 = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v17 < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
}

void sub_1BEFA1940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BambiCallTerminationReason::~BambiCallTerminationReason((void **)va);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::endWithReason@<X0>(BambiCall *this@<X0>, const BambiCallTerminationReason *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  ImsLogContainer *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  BOOL v19;
  ImsResult *v20;
  RTPManager *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  SipStack *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::string __p;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[3];

  memset(v35, 0, sizeof(v35));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v33, (_QWORD *)this + 22);
  v34 = v33;
  v33 = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "endWithReason");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v35, (uint64_t *)&v34, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (BambiCall *)((char *)this + 72);
  v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"BambiCall::endWithReason", 24);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  if (*((_QWORD *)this + 48))
  {
    SipTimerContainer::cancelTimer((BambiCall *)((char *)this + 208), (std::string *)"MediaTimeoutDeferTimer");
    v14 = *((unsigned __int8 *)a2 + 31);
    v15 = (char)v14;
    if ((v14 & 0x80u) != 0)
      v14 = *((_QWORD *)a2 + 2);
    if (v14 == 5
      && (v15 >= 0 ? (v16 = (char *)a2 + 8) : (v16 = (char *)*((_QWORD *)a2 + 1)),
          (v17 = *(_DWORD *)v16, v18 = v16[4], v17 == *(_DWORD *)"SRVCC")
        ? (v19 = v18 == str_7_13[4])
        : (v19 = 0),
          v19))
    {
      *(_QWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      BambiCall::silentHangUp((uint64_t)this, *((_DWORD *)a2 + 16), (ImsResult *)a3);
      v22 = (RTPManager *)*((_QWORD *)this + 46);
      if (v22)
        RTPManager::srvccHandoverCompleted(v22);
      v23 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
      if (v23)
      {
        v24 = std::__shared_weak_count::lock(v23);
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
        if (v24)
        {
          v25 = v24;
          v26 = (SipStack *)*((_QWORD *)this + 44);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
          if (v26)
            SipStack::handleSRVCCRequested(v26);
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
    }
    else
    {
      SipSession::hangUp(*((uint64_t **)this + 48), (uint64_t)a2, 0, a3);
    }
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741826;
    v20 = (ImsResult *)ImsResult::operator<<<char [15]>((uint64_t)&__p, "no SIP session");
    ImsLogContainer::logResult(v12, v20);
    ImsResult::ImsResult((ImsResult *)a3, v20);
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v35);
}

void sub_1BEFA1C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  ImsResult *v24;
  uint64_t v25;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  ImsResult::~ImsResult(v24);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v25 - 96);
  _Unwind_Resume(a1);
}

void BambiCall::terminationReason(uint64_t a1@<X0>, uint64_t a2@<X1>, BambiCallTerminationReason *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  int *v13;
  unint64_t *v14;
  unint64_t v15;

  v5 = *(std::__shared_weak_count **)(a1 + 360);
  if (!v5)
    goto LABEL_11;
  v5 = std::__shared_weak_count::lock(v5);
  if (!v5)
    goto LABEL_11;
  v7 = v5;
  v8 = *(_QWORD *)(a1 + 352);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
      goto LABEL_7;
LABEL_11:
    v13 = BambiCallTerminationReasons::defaultReason((BambiCallTerminationReasons *)v5);
    BambiCallTerminationReason::BambiCallTerminationReason(a3, (const BambiCallTerminationReason *)v13);
    return;
  }
  if (!v8)
    goto LABEL_11;
LABEL_7:
  v11 = *(std::__shared_weak_count **)(a1 + 360);
  if (v11)
  {
    v11 = std::__shared_weak_count::lock(v11);
    v12 = v11;
    if (v11)
      v11 = *(std::__shared_weak_count **)(a1 + 352);
  }
  else
  {
    v12 = 0;
  }
  SipStack::callTerminationReason((uint64_t)v11, a2, a3);
  if (v12)
  {
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BEFA1DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCall::silentHangUp(uint64_t a1@<X0>, int a2@<W1>, ImsResult *a3@<X8>)
{
  SipSession *v5;
  ImsResult *v6;
  _QWORD v7[2];
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v5 = *(SipSession **)(a1 + 384);
  if (v5)
  {
    SipSession::silentHangUp(v5, a2, (uint64_t)a3);
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    v7[0] = &off_1E78B7238;
    v7[1] = &_bambiDomain;
    v8 = 1073741826;
    v6 = (ImsResult *)ImsResult::operator<<<char [15]>((uint64_t)v7, "no SIP session");
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 72), v6);
    ImsResult::ImsResult(a3, v6);
    ImsResult::~ImsResult((ImsResult *)v7);
  }
}

void sub_1BEFA1E88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void BambiCall::suspendWithMediaError(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  ImsPrefs *v15;
  void **EmergencyMediaTimeoutDeferalTimerSecondsKey;
  void *v17;
  int v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((*(char *)(a1 + 1687) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 1687))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (!*(_QWORD *)(a1 + 1672))
  {
LABEL_3:
    v6 = a1 + 72;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 48))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(a1 + 72, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Continuing SIP session despite media timeout ", 45);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v7 + 32))(v7, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    std::string::operator=((std::string *)(a1 + 1664), a2);
  }
LABEL_4:
  v9 = *(_QWORD *)(a1 + 176);
  v8 = *(std::__shared_weak_count **)(a1 + 184);
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }
  v13 = *(std::__shared_weak_count **)(a1 + 360);
  if (v13)
  {
    v13 = std::__shared_weak_count::lock(v13);
    v14 = v13;
    if (v13)
      v13 = *(std::__shared_weak_count **)(a1 + 352);
  }
  else
  {
    v14 = 0;
  }
  v15 = (ImsPrefs *)SipStack::prefs((SipStack *)v13);
  EmergencyMediaTimeoutDeferalTimerSecondsKey = (void **)ImsPrefs::getEmergencyMediaTimeoutDeferalTimerSecondsKey(v15);
  v17 = ImsPrefs::prefWithKey(v15, EmergencyMediaTimeoutDeferalTimerSecondsKey);
  if (v17)
  {
    v18 = (*(uint64_t (**)(void *))(*(_QWORD *)v17 + 56))(v17);
    if (!v14)
      goto LABEL_21;
  }
  else
  {
    v18 = *((_DWORD *)EmergencyMediaTimeoutDeferalTimerSecondsKey + 15);
    if (!v14)
      goto LABEL_21;
  }
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v18)
      goto LABEL_32;
    goto LABEL_22;
  }
LABEL_21:
  if (!v18)
    goto LABEL_32;
LABEL_22:
  if (v8)
  {
    v21 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = operator new(0x20uLL);
  *v23 = &off_1E78CC188;
  v23[1] = a1;
  v23[2] = v9;
  v23[3] = v8;
  v27 = v23;
  SipTimerContainer::startTimer((_QWORD *)(a1 + 208), (uint64_t)"MediaTimeoutDeferTimer", (uint64_t)v26, 1000 * v18, 0);
  v24 = v27;
  if (v27 == v26)
  {
    v25 = 4;
    v24 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_32;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_32:
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  if (v8)
  {
    std::__shared_weak_count::__release_weak(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1BEFA2144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::__shared_weak_count *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::deferredEndWithReason(BambiCall *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[7];
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];
  void *__p[2];
  char v24;
  _QWORD v25[5];
  std::string v26;

  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x4002000000;
  v25[3] = __Block_byref_object_copy__2;
  v25[4] = __Block_byref_object_dispose__2;
  memset(&v26, 0, sizeof(v26));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v26 = *(std::string *)a2;
  v6 = *((_QWORD *)this + 22);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = BambiCall::bambiClient(this);
  LoggableString::LoggableString((LoggableString *)__p, "deferredHangup");
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v20, (_QWORD *)this + 22);
  v10 = (std::__shared_weak_count *)v21;
  v22[0] = v20;
  v22[1] = v21;
  v20 = 0;
  v21 = 0;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = ___ZN9BambiCall21deferredEndWithReasonERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  v18[3] = &unk_1E78CBF10;
  v18[5] = this;
  v18[6] = v6;
  v19 = v5;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v18[4] = v25;
  BambiClient::performBlock(v9, (__int128 *)__p, v22, v18);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = (std::__shared_weak_count *)v21;
  if (v21)
  {
    v16 = (unint64_t *)(v21 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v24 < 0)
    operator delete(__p[0]);
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Block_object_dispose(v25, 8);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_1BEFA23E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::__shared_weak_count *v38;

  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a27 < 0)
    operator delete(__p);
  if (v38)
    std::__shared_weak_count::__release_weak(v38);
  _Block_object_dispose(&a28, 8);
  if (a38 < 0)
    operator delete(a33);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void ___ZN9BambiCall21deferredEndWithReasonERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  BambiCall *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[72];
  std::__shared_weak_count *v10;

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    v3 = (BambiCall *)a1[5];
    v4 = std::__shared_weak_count::lock(v2);
    v10 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[6])
      {
        BambiCall::endWithReason(v3, *(_QWORD *)(a1[4] + 8) + 40, (uint64_t)v8);
        ImsResult::~ImsResult((ImsResult *)v8);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEFA252C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c33_ZTSNSt3__18weak_ptrI9BambiCallEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_48c33_ZTSNSt3__18weak_ptrI9BambiCallEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

BOOL BambiCall::senderIsPrivate(BambiCall *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v1 = *((_QWORD *)this + 48);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 240);
  v3 = *(std::__shared_weak_count **)(v1 + 248);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (!v2)
  {
    v11 = 0;
    goto LABEL_16;
  }
  v6 = *((_QWORD *)this + 48);
  v7 = *(_QWORD *)(v6 + 240);
  v8 = *(std::__shared_weak_count **)(v6 + 248);
  if (!v8)
  {
    v11 = *(_BYTE *)(v7 + 1864) != 0;
    if (!v3)
      return v11;
    goto LABEL_17;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  v11 = *(unsigned __int8 *)(v7 + 1864) != 0;
  do
    v12 = __ldaxr(v9);
  while (__stlxr(v12 - 1, v9));
  if (v12)
  {
LABEL_16:
    if (!v3)
      return v11;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!v3)
    return v11;
LABEL_17:
  v13 = (unint64_t *)&v3->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v11;
}

ImsOutStream *BambiCall::printCallInfo(BambiCall *this, ImsOutStream *a2, int a3)
{
  uint64_t v6;
  int v7;
  const char *v8;
  tm *v9;
  tm *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  void (**v23)(ImsResult *__hidden);
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  std::string v29;
  std::string __p;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v6 = *((_QWORD *)this + 48);
  if (v6)
    (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)v6 + 248))(v6, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Local Hold State: ", 20);
  *((_BYTE *)a2 + 17) = 0;
  v7 = *((_DWORD *)this + 110);
  if (v7 == 3)
  {
    v29.__r_.__value_.__r.__words[2] = 0x400000000000000;
    v8 = "held";
  }
  else if (v7 == 2)
  {
    v29.__r_.__value_.__r.__words[2] = 0x700000000000000;
    v8 = "holding";
  }
  else if (v7)
  {
    v29.__r_.__value_.__r.__words[2] = 0x700000000000000;
    v8 = "resumed";
  }
  else
  {
    v29.__r_.__value_.__r.__words[2] = 0x800000000000000;
    v8 = "resuming";
  }
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
  LoggableString::LoggableString(&__p, &v29);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  media direction:    ", 22);
  *((_BYTE *)a2 + 17) = 0;
  ims::toString<MediaDirection>((unsigned int *)this + 111, &v29);
  LoggableString::LoggableString(&__p, &v29);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Created:        ", 18);
  *((_BYTE *)a2 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 52), (uint64_t)a2, v9);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (*((_QWORD *)this + 53))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Confirmed:      ", 18);
    *((_BYTE *)a2 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 53), (uint64_t)a2, v10);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
  v11 = *((_QWORD *)this + 24);
  if (v11)
  {
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v23 = &off_1E78B7238;
    v24 = &_bambiDomain;
    v25 = 0;
    v12 = *(_QWORD **)(v11 + 1904);
    v13 = (_QWORD *)(v11 + 1912);
    if (v12 != (_QWORD *)(v11 + 1912))
    {
      while (1)
      {
        v14 = v12[5];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Media Session:  ", 18);
        *((_BYTE *)a2 + 17) = 0;
        std::ostream::operator<<();
        *((_BYTE *)a2 + 17) = 0;
        (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *((_BYTE *)a2 + 17) = 0;
        if (a3 && *(_QWORD *)(v14 + 32))
        {
          *(_OWORD *)&v29.__r_.__value_.__l.__data_ = 0uLL;
          BambiCall::localSdp(this, (uint64_t *)&v29);
          if (v29.__r_.__value_.__r.__words[0])
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  SDP:", 6);
            *((_BYTE *)a2 + 17) = 0;
            (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *((_BYTE *)a2 + 17) = 0;
            (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *((_BYTE *)a2 + 17) = 0;
            (*(void (**)(std::string::size_type, ImsOutStream *))(*(_QWORD *)v29.__r_.__value_.__l.__data_
                                                                           + 16))(v29.__r_.__value_.__r.__words[0], a2);
            (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *((_BYTE *)a2 + 17) = 0;
          }
          size = (std::__shared_weak_count *)v29.__r_.__value_.__l.__size_;
          if (v29.__r_.__value_.__l.__size_)
          {
            v16 = (unint64_t *)(v29.__r_.__value_.__l.__size_ + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
        ImsResult::operator=((uint64_t)&v23, (uint64_t)&__p);
        ImsResult::~ImsResult((ImsResult *)&__p);
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
        if (v24 != &_bambiDomain)
          break;
        v18 = v25;
        ImsResult::~ImsResult((ImsResult *)&__p);
        if (!v18)
        {
          v19 = (_QWORD *)v12[1];
          if (v19)
          {
            do
            {
              v20 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = (_QWORD *)v12[2];
              v21 = *v20 == (_QWORD)v12;
              v12 = v20;
            }
            while (!v21);
          }
          v12 = v20;
          if (v20 != v13)
            continue;
        }
        goto LABEL_41;
      }
      ImsResult::~ImsResult((ImsResult *)&__p);
    }
LABEL_41:
    ImsResult::~ImsResult((ImsResult *)&v23);
  }
  return a2;
}

void sub_1BEFA2AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BambiCall::checkForActivate(BambiCall *this, unsigned int a2, int a3)
{
  SDPSession *v5;
  SipSession *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t result;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  const char *v35;
  uint64_t v36;
  char *v37;
  _BYTE *v38;
  void *v39[2];
  uint64_t v40;
  void *__p;
  char v42;

  v5 = (SDPSession *)*((_QWORD *)this + 24);
  if (!v5 || (SDPSession::hasStream(v5) & 1) == 0)
  {
    if (!a3)
      return 0;
    v15 = *((_QWORD *)this + 9);
    v14 = (char *)this + 72;
    v16 = (*(uint64_t (**)(char *))(v15 + 56))(v14);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"checkForActivate: no media session for call ", 44);
    *(_BYTE *)(v16 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v39, (const std::string *)(v14 + 392));
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 56))(v16, v39);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_15:
    *(_BYTE *)(v16 + 17) = 0;
    goto LABEL_16;
  }
  v7 = (SipSession *)*((_QWORD *)this + 48);
  if (!v7)
  {
    if (!a3)
      return 0;
    v18 = *((_QWORD *)this + 9);
    v17 = (char *)this + 72;
    v16 = (*(uint64_t (**)(char *))(v18 + 56))(v17);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v17 + 16))(v17, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"checkForActivate: no SIP session for call ", 42);
    *(_BYTE *)(v16 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v39, (const std::string *)(v17 + 392));
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 56))(v16, v39);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_15;
  }
  if ((SipSession::confirmed(v7) & 1) == 0)
  {
    if (a3)
    {
      v20 = *((_QWORD *)this + 9);
      v19 = (char *)this + 72;
      v10 = (*(uint64_t (**)(char *))(v20 + 64))(v19);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v19 + 16))(v19, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"checkForActivate: session ", 26);
      *(_BYTE *)(v10 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v39, (const std::string *)(v19 + 392));
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 56))(v10, v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" is not confirmed, so call can't be made ", 41);
      *(_BYTE *)(v10 + 17) = 0;
      if (a2)
        v11 = "active";
      else
        v11 = "inactive";
      v12 = *(_QWORD **)(v10 + 8);
      if (a2)
        v13 = 6;
      else
        v13 = 8;
      goto LABEL_29;
    }
    return 0;
  }
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 48) + 264))(*((_QWORD *)this + 48)))
  {
    if (a3)
    {
      v9 = *((_QWORD *)this + 9);
      v8 = (char *)this + 72;
      v10 = (*(uint64_t (**)(char *))(v9 + 64))(v8);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v8 + 16))(v8, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"checkForActivate: session ", 26);
      *(_BYTE *)(v10 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v39, (const std::string *)(v8 + 392));
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 56))(v10, v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" is terminated, so call can't be made ", 38);
      *(_BYTE *)(v10 + 17) = 0;
      if (a2)
        v11 = "active";
      else
        v11 = "inactive";
      v12 = *(_QWORD **)(v10 + 8);
      if (a2)
        v13 = 6;
      else
        v13 = 8;
LABEL_29:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v11, v13);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v10 + 17) = 0;
LABEL_16:
      if (v42 < 0)
        operator delete(__p);
LABEL_18:
      if (SHIBYTE(v40) < 0)
        operator delete(v39[0]);
      return 0;
    }
    return 0;
  }
  if (SipSession::terminating(*((SipSession **)this + 48)))
  {
    if (a3)
    {
      v22 = *((_QWORD *)this + 9);
      v21 = (char *)this + 72;
      v23 = (*(uint64_t (**)(char *))(v22 + 64))(v21);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v21 + 16))(v21, v23);
      v24 = ImsOutStream::operator<<(v23, "checkForActivate: session ");
      ObfuscatedString::ObfuscatedString((uint64_t)v39, (const std::string *)(v21 + 392));
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v24 + 56))(v24, v39);
      v25 = ImsOutStream::operator<<(v24, " is terminating, so call can't be made ");
      if (a2)
        v26 = "active";
      else
        v26 = "inactive";
      v27 = (_BYTE *)ImsOutStream::operator<<(v25, v26);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v27[17] = 0;
      ims::AccessNetwork::~AccessNetwork(v39);
    }
    return 0;
  }
  result = ((*((_DWORD *)this + 110) & 0xFFFFFFFE) != 2) ^ a2;
  if (((((*((_DWORD *)this + 110) & 0xFFFFFFFE) != 2) ^ a2) & 1) == 0 && a3)
  {
    v30 = *((_QWORD *)this + 9);
    v29 = (_DWORD *)((char *)this + 72);
    v31 = (*(uint64_t (**)(_DWORD *))(v30 + 64))(v29);
    (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v29 + 16))(v29, v31);
    v32 = ImsOutStream::operator<<(v31, "checkForActivate: already ");
    v33 = v32;
    v34 = v29[92];
    if (v34 == 3)
    {
      v40 = 0x400000000000000;
      v35 = "held";
    }
    else if (v34 == 2)
    {
      v40 = 0x700000000000000;
      v35 = "holding";
    }
    else if (v34)
    {
      v40 = 0x700000000000000;
      v35 = "resumed";
    }
    else
    {
      v40 = 0x800000000000000;
      v35 = "resuming";
    }
    *(_OWORD *)v39 = *(_OWORD *)v35;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v32 + 32))(v32, v39);
    v36 = ImsOutStream::operator<<(v33, ", so call can't be made ");
    if (a2)
      v37 = "active";
    else
      v37 = "inactive";
    v38 = (_BYTE *)ImsOutStream::operator<<(v36, v37);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v38[17] = 0;
    goto LABEL_18;
  }
  return result;
}

void sub_1BEFA3068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BambiCall::performLocalHold(BambiCall *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  if (BambiCall::checkForActivate(this, 0, 1))
  {
    v13 = 0;
    v14 = 0;
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    if (v2)
    {
      v14 = std::__shared_weak_count::lock(v2);
      if (v14)
      {
        v3 = *((_QWORD *)this + 44);
        v13 = v3;
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 2888);
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v11, (_QWORD *)this + 22);
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 104))(v4, &v11);
          v5 = v12;
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
        }
      }
    }
    v8 = v14;
    if (v14)
    {
      v9 = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1BEFA3190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void BambiCall::performLocalResume(BambiCall *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  if (BambiCall::checkForActivate(this, 1u, 1))
  {
    v13 = 0;
    v14 = 0;
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    if (v2)
    {
      v14 = std::__shared_weak_count::lock(v2);
      if (v14)
      {
        v3 = *((_QWORD *)this + 44);
        v13 = v3;
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 2888);
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v11, (_QWORD *)this + 22);
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 112))(v4, &v11);
          v5 = v12;
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
        }
      }
    }
    v8 = v14;
    if (v14)
    {
      v9 = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1BEFA32A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void BambiCall::performLocalHoldFromHandler(BambiCall *this)
{
  SipSession *v2;
  SipSession *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  ImsResult *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  void (**v32)(ImsResult *__hidden);
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[6];
  std::__shared_weak_count *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  _BYTE v43[72];
  __int128 v44;
  unsigned int v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v2 = (SipSession *)*((_QWORD *)this + 48);
  if (!v2
    || !SipSession::confirmed(v2)
    || (v3 = (SipSession *)*((_QWORD *)this + 48)) != 0
    && (SipSession::terminating(v3)
     || (v4 = *((_QWORD *)this + 48)) != 0
     && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 264))(v4) & 1) != 0)
    || (SDPSession::hasStream(*((SDPSession **)this + 24)) & 1) != 0)
  {
    v5 = BambiCall::checkForActivate(this, 0, 1);
    if ((v5 & 1) != 0)
    {
      v6 = *((_QWORD *)this + 24);
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v32 = &off_1E78B7238;
      v33 = &_bambiDomain;
      v34 = 0;
      v7 = *(_QWORD **)(v6 + 1904);
      v8 = (_QWORD *)(v6 + 1912);
      if (v7 != (_QWORD *)(v6 + 1912))
      {
        while (1)
        {
          v9 = *((_QWORD *)this + 46);
          v10 = *(_QWORD *)(v7[5] + 32);
          v11 = capabilities::radio::mav20Plus((capabilities::radio *)v5) ? 2 : 4;
          RTPManager::deactivateSessionWithId(v9, v10, v11);
          v47 = 0u;
          v48 = 0u;
          v49 = 0u;
          *(_QWORD *)&v44 = &off_1E78B7238;
          *((_QWORD *)&v44 + 1) = &_bambiDomain;
          v45 = 0;
          ImsResult::operator=((uint64_t)&v32, (uint64_t)&v44);
          ImsResult::~ImsResult((ImsResult *)&v44);
          v47 = 0u;
          v48 = 0u;
          v49 = 0u;
          *(_QWORD *)&v44 = &off_1E78B7238;
          *((_QWORD *)&v44 + 1) = &_bambiDomain;
          v45 = 0;
          if (v33 != &_bambiDomain)
            break;
          v13 = v34;
          ImsResult::~ImsResult(v12);
          if (!v13)
          {
            v14 = (_QWORD *)v7[1];
            if (v14)
            {
              do
              {
                v15 = v14;
                v14 = (_QWORD *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                v15 = (_QWORD *)v7[2];
                v16 = *v15 == (_QWORD)v7;
                v7 = v15;
              }
              while (!v16);
            }
            v7 = v15;
            if (v15 != v8)
              continue;
          }
          goto LABEL_45;
        }
        ImsResult::~ImsResult(v12);
      }
LABEL_45:
      ImsResult::~ImsResult((ImsResult *)&v32);
      if (*((_QWORD *)this + 48) && *((_DWORD *)this + 110) == 1 && !*(_BYTE *)(BambiCall::bambiClient(this) + 232))
      {
        SipSession::sendInvite(*((_QWORD *)this + 48), (std::string *)"HoldInvite", (ImsResult *)&v44);
        v30 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v44 + 1) + 24))(*((_QWORD *)&v44 + 1), v45);
        ImsResult::~ImsResult((ImsResult *)&v44);
        if ((v30 & 1) == 0)
        {
          *((_DWORD *)this + 110) = 2;
          *((_QWORD *)this + 54) = time(0);
        }
      }
    }
    else
    {
      v18 = *((_QWORD *)this + 22);
      v17 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
      if (v17)
      {
        p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
        do
          v20 = __ldxr(p_shared_weak_owners);
        while (__stxr(v20 + 1, p_shared_weak_owners));
      }
      v21 = BambiCall::bambiClient(this);
      LoggableString::LoggableString((LoggableString *)&v44, "localHoldNoOpBlock");
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v40, (_QWORD *)this + 22);
      v22 = (std::__shared_weak_count *)v41;
      v42[0] = v40;
      v42[1] = v41;
      v40 = 0;
      v41 = 0;
      v38[0] = MEMORY[0x1E0C809B0];
      v38[1] = 1174405120;
      v38[2] = ___ZN9BambiCall27performLocalHoldFromHandlerEv_block_invoke;
      v38[3] = &__block_descriptor_tmp_101;
      v38[4] = this;
      v38[5] = v18;
      v39 = v17;
      if (v17)
      {
        v23 = (unint64_t *)&v17->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      BambiClient::performBlock(v21, &v44, v42, v38);
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v27 = (std::__shared_weak_count *)v41;
      if (v41)
      {
        v28 = (unint64_t *)(v41 + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v46 < 0)
        operator delete((void *)v44);
      if (v39)
        std::__shared_weak_count::__release_weak(v39);
      if (v17)
        std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    v31 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 56))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"performLocalHold: we're confirmed but don't have a media session. Killing call object.", 86);
    *(_BYTE *)(v31 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v31 + 17) = 0;
    BambiCall::silentHangUp((uint64_t)this, 18, (ImsResult *)v43);
    ImsResult::~ImsResult((ImsResult *)v43);
  }
}

void sub_1BEFA36A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;

  ImsResult::~ImsResult((ImsResult *)(v28 - 160));
  _Unwind_Resume(a1);
}

void ___ZN9BambiCall27performLocalHoldFromHandlerEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v14 = v4;
  if (!v4)
    return;
  if (!a1[5])
  {
    v11 = v4;
LABEL_15:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  v5 = *(std::__shared_weak_count **)(v3 + 360);
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(v3 + 352);
      if (v8)
        (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 2888) + 136))(*(_QWORD *)(v8 + 2888));
      v9 = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v11 = v14;
  if (v14)
    goto LABEL_15;
}

void sub_1BEFA3828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void BambiCall::performLocalResumeFromHandler(BambiCall *this)
{
  SipSession *v2;
  SipSession *v3;
  uint64_t v4;
  char v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 __p;
  unsigned int v21;
  char v22;
  _QWORD v23[6];
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[2];
  _BYTE v28[72];

  v2 = (SipSession *)*((_QWORD *)this + 48);
  if (!v2
    || !SipSession::confirmed(v2)
    || (v3 = (SipSession *)*((_QWORD *)this + 48)) != 0
    && (SipSession::terminating(v3)
     || (v4 = *((_QWORD *)this + 48)) != 0
     && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 264))(v4) & 1) != 0)
    || (SDPSession::hasStream(*((SDPSession **)this + 24)) & 1) != 0)
  {
    if ((BambiCall::checkForActivate(this, 1u, 1) & 1) != 0)
    {
      if (*((_QWORD *)this + 48) && *((_DWORD *)this + 110) == 3 && !*(_BYTE *)(BambiCall::bambiClient(this) + 232))
      {
        SipSession::sendInvite(*((_QWORD *)this + 48), (std::string *)"ResumeInvite", (ImsResult *)&__p);
        v5 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&__p + 1) + 24))(*((_QWORD *)&__p + 1), v21);
        ImsResult::~ImsResult((ImsResult *)&__p);
        if ((v5 & 1) == 0)
        {
          *((_DWORD *)this + 110) = 0;
          *((_QWORD *)this + 54) = 0;
        }
      }
    }
    else
    {
      v7 = *((_QWORD *)this + 22);
      v6 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
      if (v6)
      {
        p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
      }
      v10 = BambiCall::bambiClient(this);
      LoggableString::LoggableString((LoggableString *)&__p, "localResumeNoOpBlock");
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v25, (_QWORD *)this + 22);
      v11 = (std::__shared_weak_count *)v26;
      v27[0] = v25;
      v27[1] = v26;
      v25 = 0;
      v26 = 0;
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 1174405120;
      v23[2] = ___ZN9BambiCall29performLocalResumeFromHandlerEv_block_invoke;
      v23[3] = &__block_descriptor_tmp_104_0;
      v23[4] = this;
      v23[5] = v7;
      v24 = v6;
      if (v6)
      {
        v12 = (unint64_t *)&v6->__shared_weak_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      BambiClient::performBlock(v10, &__p, v27, v23);
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v16 = (std::__shared_weak_count *)v26;
      if (v26)
      {
        v17 = (unint64_t *)(v26 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (v22 < 0)
        operator delete((void *)__p);
      if (v24)
        std::__shared_weak_count::__release_weak(v24);
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v19 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 56))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"performLocalResume: we're confirmed but don't have a media session. Killing call object.", 88);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    BambiCall::silentHangUp((uint64_t)this, 18, (ImsResult *)v28);
    ImsResult::~ImsResult((ImsResult *)v28);
  }
}

void sub_1BEFA3AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,char a29)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  _Unwind_Resume(a1);
}

void ___ZN9BambiCall29performLocalResumeFromHandlerEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v14 = v4;
  if (!v4)
    return;
  if (!a1[5])
  {
    v11 = v4;
LABEL_15:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  v5 = *(std::__shared_weak_count **)(v3 + 360);
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(v3 + 352);
      if (v8)
        (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 2888) + 144))(*(_QWORD *)(v8 + 2888));
      v9 = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v11 = v14;
  if (v14)
    goto LABEL_15;
}

void sub_1BEFA3C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void BambiCall::localHoldFailed(BambiCall *this)
{
  char v2;
  char v3;
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::string::size_type v13;
  unint64_t *v14;
  unint64_t v15;
  std::string::size_type v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::string::size_type v22;
  std::__shared_weak_count *v23;
  std::string::size_type v24;
  std::__shared_weak_count *v25;
  std::string __p;
  std::__shared_weak_count *v27[2];

  *((_DWORD *)this + 110) = 1;
  *((_BYTE *)this + 1802) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "SessionHoldFailed");
  v2 = BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, &__p);
  v3 = v2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v3 & 1) == 0)
      return;
  }
  else if ((v2 & 1) == 0)
  {
    return;
  }
  if (*((_QWORD *)this + 50))
  {
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)v27 = 0u;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v24, (_QWORD *)this + 22);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BD300;
    __p.__r_.__value_.__r.__words[2] = 0;
    v27[0] = 0;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 16;
    v4 = v24;
    v5 = v25;
    if (v25)
    {
      p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
      __p.__r_.__value_.__r.__words[2] = v4;
      v27[0] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      __p.__r_.__value_.__r.__words[2] = v24;
    }
    (*(void (**)(_QWORD, std::string *))(**((_QWORD **)this + 50) + 16))(*((_QWORD *)this + 50), &__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BD300;
    if (v27[0])
      std::__shared_weak_count::__release_weak(v27[0]);
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v10)
  {
    v11 = std::__shared_weak_count::lock(v10);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    if (v11)
    {
      v12 = v11;
      v13 = *((_QWORD *)this + 44);
      __p.__r_.__value_.__r.__words[0] = v13;
      if (v13)
        (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 2888) + 144))(*(_QWORD *)(v13 + 2888));
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  if (*((_QWORD *)this + 50))
  {
    BambiCall::sendHoldResumeIndication(this, 0);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)v27 = 0u;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v22, (_QWORD *)this + 22);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BD300;
    __p.__r_.__value_.__r.__words[2] = 0;
    v27[0] = 0;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 11;
    v16 = v22;
    v17 = v23;
    if (v23)
    {
      v18 = (unint64_t *)&v23->__shared_weak_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      __p.__r_.__value_.__r.__words[2] = v16;
      v27[0] = v17;
      v20 = (unint64_t *)&v17->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      __p.__r_.__value_.__r.__words[2] = v22;
    }
    (*(void (**)(_QWORD, std::string *))(**((_QWORD **)this + 50) + 16))(*((_QWORD *)this + 50), &__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BD300;
    if (v27[0])
      std::__shared_weak_count::__release_weak(v27[0]);
  }
}

void sub_1BEFA3EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, std::__shared_weak_count *a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void BambiCall::localResumeFailed(BambiCall *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void (**v24)(BambiCallEvent *__hidden);
  __int128 v25;
  std::__shared_weak_count *v26[2];

  if (*((_QWORD *)this + 50))
  {
    v25 = 0u;
    *(_OWORD *)v26 = 0u;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v22, (_QWORD *)this + 22);
    v24 = &off_1E78BD300;
    *((_QWORD *)&v25 + 1) = 0;
    v26[0] = 0;
    LODWORD(v25) = 17;
    v2 = v22;
    v3 = v23;
    if (v23)
    {
      p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      *((_QWORD *)&v25 + 1) = v2;
      v26[0] = v3;
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    else
    {
      *((_QWORD *)&v25 + 1) = v22;
    }
    (*(void (**)(_QWORD, void (***)(BambiCallEvent *__hidden)))(**((_QWORD **)this + 50) + 16))(*((_QWORD *)this + 50), &v24);
    v24 = &off_1E78BD300;
    if (v26[0])
      std::__shared_weak_count::__release_weak(v26[0]);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    *(_QWORD *)&v25 = v9;
    if (v9)
    {
      v10 = v9;
      v11 = *((_QWORD *)this + 44);
      v24 = (void (**)(BambiCallEvent *__hidden))v11;
      if (v11)
        (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 2888) + 136))(*(_QWORD *)(v11 + 2888));
      v12 = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (*((_QWORD *)this + 50))
  {
    BambiCall::sendHoldResumeIndication(this, 1);
    v25 = 0u;
    *(_OWORD *)v26 = 0u;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v20, (_QWORD *)this + 22);
    v24 = &off_1E78BD300;
    *((_QWORD *)&v25 + 1) = 0;
    v26[0] = 0;
    LODWORD(v25) = 13;
    v14 = v20;
    v15 = v21;
    if (v21)
    {
      v16 = (unint64_t *)&v21->__shared_weak_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      *((_QWORD *)&v25 + 1) = v14;
      v26[0] = v15;
      v18 = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    else
    {
      *((_QWORD *)&v25 + 1) = v20;
    }
    (*(void (**)(_QWORD, void (***)(BambiCallEvent *__hidden)))(**((_QWORD **)this + 50) + 16))(*((_QWORD *)this + 50), &v24);
    v24 = &off_1E78BD300;
    if (v26[0])
      std::__shared_weak_count::__release_weak(v26[0]);
  }
  *((_DWORD *)this + 110) = 3;
}

void sub_1BEFA4104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void BambiCall::prepareCall(BambiCall *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  BambiEmergencyCallHandler *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  BambiEmergencyCallHandler *v20;
  std::__shared_weak_count *v21;
  _BYTE v22[72];
  uint64_t v23;
  std::__shared_weak_count *v24;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (!v2)
    return;
  v3 = std::__shared_weak_count::lock(v2);
  v24 = v3;
  if (!v3)
    return;
  v4 = v3;
  v5 = *((_QWORD *)this + 44);
  v23 = v5;
  if (!v5)
  {
LABEL_21:
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    return;
  }
  if (!*((_QWORD *)this + 64))
  {
    *((_BYTE *)this + 457) = 1;
    (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 2888) + 152))(*(_QWORD *)(v5 + 2888));
    goto LABEL_21;
  }
  v6 = *(BambiEmergencyCallHandler **)(v5 + 4216);
  v7 = *(std::__shared_weak_count **)(v5 + 4224);
  v20 = v6;
  v21 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v18, (_QWORD *)this + 22);
  BambiEmergencyCallHandler::prepareCall(v6, &v18, (uint64_t)v22);
  ImsResult::~ImsResult((ImsResult *)v22);
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v4 = v24;
  if (v24)
    goto LABEL_21;
}

void sub_1BEFA4290(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

double BambiCall::refer@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X3>, SipEventPackage **a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  double result;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  if (!*(_QWORD *)(a1 + 384))
    goto LABEL_26;
  v8 = *(_QWORD *)(*(_QWORD *)a2 + 384);
  if (!v8)
    goto LABEL_26;
  v14 = *(_QWORD *)(v8 + 240);
  v13 = *(std::__shared_weak_count **)(v8 + 248);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (v14)
        goto LABEL_9;
LABEL_26:
      result = 0.0;
      *(_OWORD *)(a6 + 24) = 0u;
      *(_OWORD *)(a6 + 40) = 0u;
      *(_OWORD *)(a6 + 56) = 0u;
      *(_QWORD *)a6 = &off_1E78B7238;
      *(_QWORD *)(a6 + 8) = &_bambiDomain;
      *(_DWORD *)(a6 + 16) = 1073741826;
      return result;
    }
  }
  if (!v14)
    goto LABEL_26;
LABEL_9:
  v18 = *(uint64_t **)(a1 + 384);
  v19 = *(_QWORD *)(*(_QWORD *)a2 + 384);
  v21 = *(_QWORD *)(v19 + 240);
  v20 = *(std::__shared_weak_count **)(v19 + 248);
  v36 = v21;
  v37 = v20;
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = a4[1];
  v34 = *a4;
  v35 = (std::__shared_weak_count *)v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  SipSession::refer(v18, &v36, a3, &v34, a5, (ImsResult *)a6);
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v37;
  if (v37)
  {
    v32 = (unint64_t *)&v37->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return result;
}

void sub_1BEFA4480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::isWPSCall(BambiCall *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::string::size_type v5;
  ImsPrefs *v6;
  void **IgnoreWPSCallsOverNRKey;
  void *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _BOOL4 isTelUri;
  char *v16;
  uint64_t v17;
  std::string *p_p;
  int v19;
  char v20;
  int64_t size;
  char *v22;
  std::string *v23;
  char *v24;
  std::string __p;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v3;
    if (v3)
    {
      v4 = v3;
      v5 = *((_QWORD *)this + 44);
      __p.__r_.__value_.__r.__words[0] = v5;
      if (v5)
      {
        v6 = (ImsPrefs *)SipStack::prefs((SipStack *)v5);
        IgnoreWPSCallsOverNRKey = (void **)ImsPrefs::getIgnoreWPSCallsOverNRKey(v6);
        v8 = ImsPrefs::prefWithKey(v6, IgnoreWPSCallsOverNRKey);
        if (v8)
        {
          if (!(*(unsigned int (**)(void *))(*(_QWORD *)v8 + 40))(v8))
            goto LABEL_16;
LABEL_8:
          v9 = *((_QWORD *)this + 48);
          if (v9 && *(_BYTE *)(v9 + 1726) || ims::AccessNetwork::isNR((ims::AccessNetwork *)(v5 + 3136)))
          {
            p_shared_owners = (unint64_t *)&v4->__shared_owners_;
            do
              v11 = __ldaxr(p_shared_owners);
            while (__stlxr(v11 - 1, p_shared_owners));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
              std::__shared_weak_count::__release_weak(v4);
            }
            return 0;
          }
          goto LABEL_16;
        }
        if (*((_BYTE *)IgnoreWPSCallsOverNRKey + 57))
          goto LABEL_8;
      }
LABEL_16:
      v13 = (unint64_t *)&v4->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  memset(&__p, 0, sizeof(__p));
  isTelUri = SipUri::isTelUri((BambiCall *)((char *)this + 1040));
  v16 = (char *)this + 1216;
  v17 = 1168;
  if (isTelUri)
    v17 = 1216;
  else
    v16 = (char *)this + 1168;
  if (v16[23] < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)((char *)this + v17), *((_QWORD *)v16 + 1));
  else
    __p = *(std::string *)v16;
  p_p = &__p;
  v19 = isPhoneNumber((unsigned __int8 *)&__p);
  v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (v19)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (size >= 4)
    {
      v22 = (char *)p_p + size;
      v23 = p_p;
      do
      {
        v24 = (char *)memchr(v23, 42, size - 3);
        if (!v24)
          break;
        if (*(_DWORD *)v24 == 842478122)
        {
          if (v24 == v22 || v24 - (char *)p_p == -1)
            break;
          v12 = 1;
          if ((v20 & 0x80) == 0)
            return v12;
          goto LABEL_41;
        }
        v23 = (std::string *)(v24 + 1);
        size = v22 - (char *)v23;
      }
      while (v22 - (char *)v23 >= 4);
    }
  }
  v12 = 0;
  if (v20 < 0)
LABEL_41:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1BEFA46B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCall::notifyMergedCallInitialized(BambiCall *this)
{
  __int128 v2;
  __int128 v3;
  std::__shared_weak_count *v4[2];
  _OWORD v5[2];
  uint64_t v6;
  void **v7;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  v3 = 0u;
  *(_OWORD *)v4 = 0u;
  v2 = 0uLL;
  BambiCallConferenceEvent::BambiCallConferenceEvent((uint64_t)&v3, 5, &v2);
  (*(void (**)(BambiCall *, __int128 *))(*(_QWORD *)this + 56))(this, &v3);
  *(_QWORD *)&v3 = off_1E78C9130;
  v7 = (void **)v5 + 1;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v7);
  *(_QWORD *)&v3 = &off_1E78BD300;
  if (v4[1])
    std::__shared_weak_count::__release_weak(v4[1]);
}

void sub_1BEFA475C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  BambiCallConferenceEvent::~BambiCallConferenceEvent((BambiCallConferenceEvent *)va);
  _Unwind_Resume(a1);
}

void BambiCall::setMediaSessionCreated(BambiCall *this)
{
  SipSession *v2;
  _BOOL4 v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void (**v23)(ImsResult *__hidden);
  unint64_t *v24;
  unint64_t v25;
  std::string *v26;
  SDPSession *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t *v30;
  uint64_t v31;
  ImsResult *v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t *v41;
  uint64_t v42;
  ImsResult *v43;
  int v44;
  _QWORD *v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  void (**v48)(ImsResult *__hidden);
  char *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  ImsResult *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  void (**v60)(ImsResult *__hidden);
  uint64_t *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  void (**v71)(ImsResult *__hidden);
  uint64_t *v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  void (**v82)(ImsResult *__hidden);
  std::__shared_weak_count *v83;
  int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;

  *((_BYTE *)this + 452) = 0;
  v2 = (SipSession *)*((_QWORD *)this + 48);
  if (!v2)
  {
    v5 = *((_QWORD *)this + 9);
    v4 = (char *)this + 72;
    v6 = (*(uint64_t (**)(char *))(v5 + 56))(v4);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v6);
    v7 = *(_QWORD **)(v6 + 8);
    v8 = "BambiCall::setMediaSessionCreated, No SIP session";
    v9 = 49;
LABEL_23:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    return;
  }
  if ((SipSession::confirmed(v2) & 1) != 0)
    goto LABEL_22;
  SipSession::clientInviteTransaction(*((SipSession **)this + 48), (uint64_t *)&v82);
  if (v82)
    v3 = 0;
  else
    v3 = *((_BYTE *)this + 1488) != 0;
  v10 = v83;
  if (!v83)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v83->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
LABEL_11:
    if (v3)
      goto LABEL_12;
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!v3)
  {
LABEL_22:
    v21 = *((_QWORD *)this + 9);
    v20 = (char *)this + 72;
    v6 = (*(uint64_t (**)(char *))(v21 + 64))(v20);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v20 + 16))(v20, v6);
    v7 = *(_QWORD **)(v6 + 8);
    v8 = "BambiCall::setMediaSessionCreated() is being ignored";
    v9 = 52;
    goto LABEL_23;
  }
LABEL_12:
  v81 = 0;
  v80 = 0u;
  v79 = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v77, (_QWORD *)this + 22);
  *(_QWORD *)&v79 = &off_1E78BD300;
  v80 = 0uLL;
  DWORD2(v79) = 24;
  v13 = v77;
  v14 = v78;
  if (v78)
  {
    p_shared_weak_owners = (unint64_t *)&v78->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
    *(_QWORD *)&v80 = v13;
    *((_QWORD *)&v80 + 1) = v14;
    if (!v17 || (std::__shared_weak_count::__release_weak(v17), (v14 = v78) != 0))
    {
      v18 = (unint64_t *)&v14->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    v80 = v77;
  }
  (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)this + 50) + 16))(*((_QWORD *)this + 50), &v79);
  BambiCall::localSdp(this, (uint64_t *)&v82);
  v23 = v82;
  v22 = v83;
  if (v83)
  {
    v24 = (unint64_t *)&v83->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (!v23)
  {
    v37 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 56))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"BambiCall::setMediaSessionCreated, No SDP for call", 50);
    *(_BYTE *)(v37 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v37 + 17) = 0;
    v38 = *((_QWORD *)this + 24);
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v71 = &off_1E78B7238;
    v72 = &_bambiDomain;
    v73 = 0;
    v39 = *(_QWORD **)(v38 + 1904);
    v40 = (_QWORD *)(v38 + 1912);
    if (v39 != (_QWORD *)(v38 + 1912))
    {
      while (1)
      {
        v41 = (unint64_t *)v39[5];
        RTPManager::terminateSessionWithId(*((RTPManager **)this + 46), v41[4]);
        v42 = BambiCall::bambiClient(this);
        BambiClient::setMediaSessionIdForStream(v42, (BambiCallMediaStream *)v41, 0);
        v85 = 0u;
        v86 = 0u;
        v87 = 0u;
        v82 = &off_1E78B7238;
        v83 = (std::__shared_weak_count *)&_bambiDomain;
        v84 = 0;
        ImsResult::operator=((uint64_t)&v71, (uint64_t)&v82);
        ImsResult::~ImsResult((ImsResult *)&v82);
        v85 = 0u;
        v86 = 0u;
        v87 = 0u;
        v82 = &off_1E78B7238;
        v83 = (std::__shared_weak_count *)&_bambiDomain;
        v84 = 0;
        if (v72 != &_bambiDomain)
          break;
        v44 = v73;
        ImsResult::~ImsResult(v43);
        if (!v44)
        {
          v45 = (_QWORD *)v39[1];
          if (v45)
          {
            do
            {
              v46 = v45;
              v45 = (_QWORD *)*v45;
            }
            while (v45);
          }
          else
          {
            do
            {
              v46 = (_QWORD *)v39[2];
              v36 = *v46 == (_QWORD)v39;
              v39 = v46;
            }
            while (!v36);
          }
          v39 = v46;
          if (v46 != v40)
            continue;
        }
        goto LABEL_73;
      }
      ImsResult::~ImsResult(v43);
    }
LABEL_73:
    v55 = (ImsResult *)&v71;
    goto LABEL_80;
  }
  v70 = 0;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  if (*((_BYTE *)this + 714))
    v26 = (std::string *)"InitialInvite";
  else
    v26 = (std::string *)"EmptyInvite";
  SipSession::sendInvite(*((_QWORD *)this + 48), v26, (ImsResult *)&v66);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v66 + 1) + 24))(*((_QWORD *)&v66 + 1), v67) & 1) != 0)
  {
    v27 = (SDPSession *)*((_QWORD *)this + 24);
    if (SDPSession::hasStream(v27))
    {
      v63 = 0u;
      v64 = 0u;
      v65 = 0u;
      v60 = &off_1E78B7238;
      v61 = &_bambiDomain;
      v62 = 0;
      v28 = (_QWORD *)*((_QWORD *)v27 + 238);
      v29 = (_QWORD *)((char *)v27 + 1912);
      if (v28 != (_QWORD *)((char *)v27 + 1912))
      {
        while (1)
        {
          v30 = (unint64_t *)v28[5];
          RTPManager::terminateSessionWithId(*((RTPManager **)this + 46), v30[4]);
          v31 = BambiCall::bambiClient(this);
          BambiClient::setMediaSessionIdForStream(v31, (BambiCallMediaStream *)v30, 0);
          v85 = 0u;
          v86 = 0u;
          v87 = 0u;
          v82 = &off_1E78B7238;
          v83 = (std::__shared_weak_count *)&_bambiDomain;
          v84 = 0;
          ImsResult::operator=((uint64_t)&v60, (uint64_t)&v82);
          ImsResult::~ImsResult((ImsResult *)&v82);
          v85 = 0u;
          v86 = 0u;
          v87 = 0u;
          v82 = &off_1E78B7238;
          v83 = (std::__shared_weak_count *)&_bambiDomain;
          v84 = 0;
          if (v61 != &_bambiDomain)
            break;
          v33 = v62;
          ImsResult::~ImsResult(v32);
          if (!v33)
          {
            v34 = (_QWORD *)v28[1];
            if (v34)
            {
              do
              {
                v35 = v34;
                v34 = (_QWORD *)*v34;
              }
              while (v34);
            }
            else
            {
              do
              {
                v35 = (_QWORD *)v28[2];
                v36 = *v35 == (_QWORD)v28;
                v28 = v35;
              }
              while (!v36);
            }
            v28 = v35;
            if (v35 != v29)
              continue;
          }
          goto LABEL_78;
        }
        ImsResult::~ImsResult(v32);
      }
LABEL_78:
      ImsResult::~ImsResult((ImsResult *)&v60);
    }
    goto LABEL_79;
  }
  v82 = 0;
  v83 = 0;
  v47 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v47 && (v83 = std::__shared_weak_count::lock(v47)) != 0)
  {
    v48 = (void (**)(ImsResult *__hidden))*((_QWORD *)this + 44);
    v82 = v48;
  }
  else
  {
    v48 = 0;
  }
  v49 = (char *)this + 1568;
  std::string::operator=((std::string *)((char *)this + 1568), (const std::string *)(v48 + 392));
  std::string::operator=((std::string *)((char *)this + 1592), (const std::string *)(v48 + 395));
  v50 = *((_OWORD *)v48 + 199);
  *((_BYTE *)this + 1632) = *((_BYTE *)v48 + 3200);
  *((_OWORD *)this + 101) = v50;
  std::string::operator=((std::string *)((char *)this + 1496), (const std::string *)((char *)this + 1568));
  std::string::operator=((std::string *)((char *)this + 1520), (const std::string *)((char *)this + 1592));
  *(_OWORD *)((char *)this + 1544) = *((_OWORD *)this + 101);
  *((_BYTE *)this + 1560) = *((_BYTE *)this + 1632);
  v51 = v83;
  if (v83)
  {
    v52 = (unint64_t *)&v83->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if ((*((char *)this + 1591) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 1591))
      goto LABEL_79;
LABEL_70:
    if (*((char *)this + 1615) < 0)
      v54 = *((_QWORD *)this + 200);
    else
      v54 = *((unsigned __int8 *)this + 1615);
    if (v54)
    {
      v57 = *((_QWORD *)this + 9);
      v56 = (char *)this + 72;
      v58 = (*(uint64_t (**)(char *))(v57 + 64))(v56);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v56 + 16))(v56, v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)"starting MO call on access network ", 35);
      *(_BYTE *)(v58 + 17) = 0;
      v59 = (_BYTE *)ims::operator<<(v58, (uint64_t)v49);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v59 + 64))(v59, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v59[17] = 0;
    }
    goto LABEL_79;
  }
  if (*((_QWORD *)this + 197))
    goto LABEL_70;
LABEL_79:
  v55 = (ImsResult *)&v66;
LABEL_80:
  ImsResult::~ImsResult(v55);
  *(_QWORD *)&v79 = &off_1E78BD300;
  if (*((_QWORD *)&v80 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v80 + 1));
}

void sub_1BEFA4E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v31;

  *(_QWORD *)(v29 - 192) = v28;
  v31 = *(std::__shared_weak_count **)(v29 - 168);
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  _Unwind_Resume(exception_object);
}

void BambiCall::localSdp(BambiCall *this@<X0>, uint64_t *a2@<X8>)
{
  SDPSession *v4;

  v4 = (SDPSession *)*((_QWORD *)this + 24);
  if ((SDPSession::hasStream(v4) & 1) != 0)
  {
    SDPSession::localSdp(v4, (*((_DWORD *)this + 110) & 0xFFFFFFFE) == 2, a2);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void BambiCall::setMediaSessionConfigured(BambiCall *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  std::string __p;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void (**v13)(BambiCallEvent *__hidden);
  __int128 v14;
  std::__shared_weak_count *v15[2];

  if (*((_QWORD *)this + 48))
  {
    v14 = 0u;
    *(_OWORD *)v15 = 0u;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v11, (_QWORD *)this + 22);
    v13 = &off_1E78BD300;
    *((_QWORD *)&v14 + 1) = 0;
    v15[0] = 0;
    LODWORD(v14) = 27;
    v2 = v11;
    v3 = v12;
    if (v12)
    {
      p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      *((_QWORD *)&v14 + 1) = v2;
      v15[0] = v3;
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    else
    {
      *((_QWORD *)&v14 + 1) = v11;
    }
    (*(void (**)(_QWORD, void (***)(BambiCallEvent *__hidden)))(**((_QWORD **)this + 50) + 16))(*((_QWORD *)this + 50), &v13);
    *((_BYTE *)this + 453) = 1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "MediaConfigured");
    BambiCall::activateAllMediaSessionIfAppropriate((uint64_t)this, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v13 = &off_1E78BD300;
    if (v15[0])
      std::__shared_weak_count::__release_weak(v15[0]);
  }
  else
  {
    v8 = (char *)this + 72;
    v9 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 56))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v8 + 16))(v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"BambiCall::setMediaSessionConfigured, No SIP session", 52);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
  }
}

void sub_1BEFA5068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  _Unwind_Resume(exception_object);
}

void BambiCall::handleMediaSessionActivated(BambiCall *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  void (**v10)(BambiCallEvent *__hidden);
  __int128 v11;
  std::__shared_weak_count *v12[2];

  v11 = 0u;
  *(_OWORD *)v12 = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v8, (_QWORD *)this + 22);
  v10 = &off_1E78BD300;
  *((_QWORD *)&v11 + 1) = 0;
  v12[0] = 0;
  LODWORD(v11) = 25;
  v2 = v8;
  v3 = v9;
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    *((_QWORD *)&v11 + 1) = v2;
    v12[0] = v3;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    *((_QWORD *)&v11 + 1) = v8;
  }
  (*(void (**)(_QWORD, void (***)(BambiCallEvent *__hidden)))(**((_QWORD **)this + 50) + 16))(*((_QWORD *)this + 50), &v10);
  *((_BYTE *)this + 1802) = 0;
  v10 = &off_1E78BD300;
  if (v12[0])
    std::__shared_weak_count::__release_weak(v12[0]);
}

void sub_1BEFA5178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(exception_object);
}

void BambiCall::handleMediaSessionDeactivated(BambiCall *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  void (**v10)(BambiCallEvent *__hidden);
  __int128 v11;
  std::__shared_weak_count *v12[2];

  v11 = 0u;
  *(_OWORD *)v12 = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v8, (_QWORD *)this + 22);
  v10 = &off_1E78BD300;
  *((_QWORD *)&v11 + 1) = 0;
  v12[0] = 0;
  LODWORD(v11) = 26;
  v2 = v8;
  v3 = v9;
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    *((_QWORD *)&v11 + 1) = v2;
    v12[0] = v3;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    *((_QWORD *)&v11 + 1) = v8;
  }
  (*(void (**)(_QWORD, void (***)(BambiCallEvent *__hidden)))(**((_QWORD **)this + 50) + 16))(*((_QWORD *)this + 50), &v10);
  v10 = &off_1E78BD300;
  if (v12[0])
    std::__shared_weak_count::__release_weak(v12[0]);
}

void sub_1BEFA5268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(exception_object);
}

uint64_t BambiCall::applyMediaSettingsUsingForkIfRequired(BambiCall *a1, BambiCallMediaStream *a2, uint64_t a3, int a4)
{
  SipOfferAnswer *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  SipOfferAnswer *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _BOOL4 v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  SDPModel *v45;
  std::__shared_weak_count *v46;
  SDPModel *v47;
  SDPModel *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  SDPModel *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  SDPModel *v92;
  std::__shared_weak_count *v93;
  SDPModel *v94;
  std::__shared_weak_count *v95;
  SipOfferAnswer *v96;
  std::__shared_weak_count *v97;
  SipOfferAnswer *v98;
  std::__shared_weak_count *v99;
  SDPModel *v100;
  std::__shared_weak_count *v101;
  SDPModel *v102;
  std::__shared_weak_count *v103;

  v8 = *(SipOfferAnswer **)(*(_QWORD *)a3 + 656);
  v9 = *(std::__shared_weak_count **)(*(_QWORD *)a3 + 664);
  v98 = v8;
  v99 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  SipOfferAnswer::local(v8, &v100);
  v12 = (std::__shared_weak_count *)*((_QWORD *)v100 + 1);
  v102 = *(SDPModel **)v100;
  v103 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v101;
  if (v101)
  {
    v16 = (unint64_t *)&v101->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v99)
  {
    v18 = &v99->__shared_owners_;
    do
      v19 = __ldaxr((unint64_t *)v18);
    while (__stlxr(v19 - 1, (unint64_t *)v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v20 = *(SipOfferAnswer **)(*(_QWORD *)a3 + 656);
  v21 = *(std::__shared_weak_count **)(*(_QWORD *)a3 + 664);
  v96 = v20;
  v97 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  SipOfferAnswer::remote(v20, &v98);
  v24 = (std::__shared_weak_count *)*((_QWORD *)v98 + 1);
  v100 = *(SDPModel **)v98;
  v101 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = v99;
  if (v99)
  {
    v28 = &v99->__shared_owners_;
    do
      v29 = __ldaxr((unint64_t *)v28);
    while (__stlxr(v29 - 1, (unint64_t *)v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v97)
  {
    v30 = &v97->__shared_owners_;
    do
      v31 = __ldaxr((unint64_t *)v30);
    while (__stlxr(v31 - 1, (unint64_t *)v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v32 = *(_QWORD *)(*(_QWORD *)a3 + 656);
  v33 = *(std::__shared_weak_count **)(*(_QWORD *)a3 + 664);
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = *(_QWORD *)(v32 + 152);
  v37 = *(_QWORD *)(v36 + 16);
  v38 = *(std::__shared_weak_count **)(v36 + 24);
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    v41 = *(_QWORD *)(v37 + 40) == *(_QWORD *)(v37 + 24);
    do
      v42 = __ldaxr(v39);
    while (__stlxr(v42 - 1, v39));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  else
  {
    v41 = *(_QWORD *)(v37 + 40) == *(_QWORD *)(v37 + 24);
  }
  if (v33)
  {
    v43 = (unint64_t *)&v33->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v45 = v100;
  v46 = v101;
  v47 = v102;
  if (v41)
    v48 = v100;
  else
    v48 = v102;
  if (v41)
    v49 = v101;
  else
    v49 = v103;
  v98 = v48;
  v99 = v49;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  if (v41)
  {
    v46 = 0;
    v52 = 0;
    v96 = 0;
    v97 = 0;
  }
  else
  {
    v96 = v45;
    v97 = v46;
    if (v46)
    {
      v53 = (unint64_t *)&v46->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v52 = v45;
  }
  if (!*((_QWORD *)a2 + 4))
  {
    v72 = *((_QWORD *)a1 + 9);
    v71 = (_QWORD *)((char *)a1 + 72);
    v73 = (*(uint64_t (**)(_QWORD *))(v72 + 48))(v71);
    (*(void (**)(_QWORD *, uint64_t))(*v71 + 16))(v71, v73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v73 + 8), (uint64_t)"applyMediaSettingsUsingForkIfRequired: media session not valid", 62);
    *(_BYTE *)(v73 + 17) = 0;
    v74 = (_BYTE *)(v73 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v73 + 64))(v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_91:
    v70 = 0;
    *v74 = 0;
    goto LABEL_92;
  }
  if (!v47)
  {
    v76 = *((_QWORD *)a1 + 9);
    v75 = (_QWORD *)((char *)a1 + 72);
    v77 = (*(uint64_t (**)(_QWORD *))(v76 + 56))(v75);
    (*(void (**)(_QWORD *, uint64_t))(*v75 + 16))(v75, v77);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v77 + 8), (uint64_t)"applyMediaSettingsUsingForkIfRequired: no local SDP", 51);
    *(_BYTE *)(v77 + 17) = 0;
    v74 = (_BYTE *)(v77 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v77 + 64))(v77, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_91;
  }
  v56 = (_QWORD *)((char *)a1 + 72);
  v55 = *((_QWORD *)a1 + 9);
  if (!v45)
  {
    v78 = (*(uint64_t (**)(_QWORD *))(v55 + 56))((_QWORD *)a1 + 9);
    (*(void (**)(_QWORD *, uint64_t))(*v56 + 16))(v56, v78);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)"applyMediaSettingsUsingForkIfRequired: no remote SDP", 52);
    *(_BYTE *)(v78 + 17) = 0;
    v74 = (_BYTE *)(v78 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_91;
  }
  v57 = (*(uint64_t (**)(_QWORD *))(v55 + 64))((_QWORD *)a1 + 9);
  (*(void (**)(_QWORD *, uint64_t))(*v56 + 16))((_QWORD *)a1 + 9, v57);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v57 + 8), (uint64_t)"applyMediaSettingsUsingForkIfRequired: updating sdp for session", 63);
  *(_BYTE *)(v57 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v57 + 17) = 0;
  v58 = *((_QWORD *)a1 + 24);
  v94 = v48;
  v95 = v49;
  if (v49)
  {
    v59 = (unint64_t *)&v49->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v92 = v52;
  v93 = v46;
  if (v46)
  {
    v61 = (unint64_t *)&v46->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  if (SDPSession::handleOfferAnswer(v58, &v94, (uint64_t)&v92, *((_QWORD *)v47 + 18)) == 2)
    v63 = 1;
  else
    v63 = a4;
  v64 = v93;
  if (v93)
  {
    v65 = (unint64_t *)&v93->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v95;
  if (v95)
  {
    v68 = (unint64_t *)&v95->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      if (!v63)
        goto LABEL_87;
      goto LABEL_86;
    }
  }
  if (v63)
LABEL_86:
    BambiCall::updateMediaSettings(a1, a2);
LABEL_87:
  v70 = 1;
LABEL_92:
  v79 = v97;
  if (v97)
  {
    v80 = &v97->__shared_owners_;
    do
      v81 = __ldaxr((unint64_t *)v80);
    while (__stlxr(v81 - 1, (unint64_t *)v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v99;
  if (v99)
  {
    v83 = &v99->__shared_owners_;
    do
      v84 = __ldaxr((unint64_t *)v83);
    while (__stlxr(v84 - 1, (unint64_t *)v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v101;
  if (v101)
  {
    v86 = (unint64_t *)&v101->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v103;
  if (v103)
  {
    v89 = (unint64_t *)&v103->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  return v70;
}

void sub_1BEFA58E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void SipOfferAnswer::local(SipOfferAnswer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = *((_QWORD *)this + 19);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 16);
  *a2 = v8;
  a2[1] = v7;
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void SipOfferAnswer::remote(SipOfferAnswer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = *((_QWORD *)this + 19);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 32);
  *a2 = v8;
  a2[1] = v7;
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void BambiCall::updateMediaSettings(BambiCall *this, BambiCallMediaStream *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  if (a2 && *((_BYTE *)this + 456))
  {
    if (BambiCall::shouldContinueUpdatingSession((SipSession **)this))
    {
      v20 = 0;
      v21 = 0;
      SipSession::getMostRecentRemoteFork(*((SipSession **)this + 48), &v20);
      if (v20)
        std::string::operator=((std::string *)((char *)this + 1016), (const std::string *)(v20 + 152));
      v4 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v7 = *((_QWORD *)this + 46);
      v8 = *((_QWORD *)a2 + 4);
      v9 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
      v18 = *((_QWORD *)this + 24);
      v19 = v9;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      RTPManager::updateSdpForSession(v7, v8, &v18, *((_DWORD *)this + 111));
      v12 = v19;
      if (v19)
      {
        v13 = (unint64_t *)&v19->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      v16 = *((_QWORD *)this + 9);
      v15 = (char *)this + 72;
      v17 = (*(uint64_t (**)(char *))(v16 + 64))(v15);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v15 + 16))(v15, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Skipped updating sdp for media session (", 40);
      *(_BYTE *)(v17 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v17 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)")", 1);
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
    }
  }
}

void sub_1BEFA5C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void BambiCall::handleActiveForkChanged(uint64_t a1, std::string::size_type *a2, int a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BambiCallMediaStream *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::string __p;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void (**v31)(ImsResult *__hidden);
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void (**v37)(ImsResult *__hidden);
  __int128 v38;
  std::__shared_weak_count *v39[2];
  __int128 v40;
  __int128 v41;

  v4 = *(_QWORD *)(a1 + 192);
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v31 = &off_1E78B7238;
  v32 = &_bambiDomain;
  v33 = 0;
  v5 = *(_QWORD **)(v4 + 1904);
  v6 = (_QWORD *)(v4 + 1912);
  if (v5 != (_QWORD *)(v4 + 1912))
  {
    while (1)
    {
      v9 = (BambiCallMediaStream *)v5[5];
      v10 = (std::__shared_weak_count *)a2[1];
      __p.__r_.__value_.__r.__words[0] = *a2;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = BambiCall::applyMediaSettingsUsingForkIfRequired((BambiCall *)a1, v9, (uint64_t)&__p, a3);
      v41 = 0uLL;
      *((_QWORD *)&v40 + 1) = 0;
      v37 = &off_1E78B7238;
      *(_QWORD *)&v38 = &_bambiDomain;
      if (v13)
        v14 = 0;
      else
        v14 = 0x40000000;
      DWORD2(v38) = v14;
      v39[1] = 0;
      *(_QWORD *)&v40 = 0;
      v39[0] = 0;
      if (v10)
      {
        v15 = (unint64_t *)&v10->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ImsResult::operator=((uint64_t)&v31, (uint64_t)&v37);
      ImsResult::~ImsResult((ImsResult *)&v37);
      *(_OWORD *)v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v37 = &off_1E78B7238;
      *(_QWORD *)&v38 = &_bambiDomain;
      DWORD2(v38) = 0;
      if (v32 != &_bambiDomain)
        break;
      v17 = v33;
      ImsResult::~ImsResult((ImsResult *)&v37);
      if (!v17)
      {
        v18 = (_QWORD *)v5[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v5[2];
            v20 = *v19 == (_QWORD)v5;
            v5 = v19;
          }
          while (!v20);
        }
        v5 = v19;
        if (v19 != v6)
          continue;
      }
      goto LABEL_23;
    }
    ImsResult::~ImsResult((ImsResult *)&v37);
  }
LABEL_23:
  if (((*(uint64_t (**)(uint64_t *, _QWORD))(*v32 + 24))(v32, v33) & 1) == 0)
  {
    *(_OWORD *)v39 = 0u;
    v38 = 0u;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v29, (_QWORD *)(a1 + 176));
    v37 = &off_1E78BD300;
    *((_QWORD *)&v38 + 1) = 0;
    v39[0] = 0;
    LODWORD(v38) = 28;
    v21 = v29;
    v22 = v30;
    if (v30)
    {
      p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
      do
        v24 = __ldxr(p_shared_weak_owners);
      while (__stxr(v24 + 1, p_shared_weak_owners));
      *((_QWORD *)&v38 + 1) = v21;
      v39[0] = v22;
      v25 = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      *((_QWORD *)&v38 + 1) = v29;
    }
    (*(void (**)(_QWORD, void (***)(ImsResult *__hidden)))(**(_QWORD **)(a1 + 400) + 16))(*(_QWORD *)(a1 + 400), &v37);
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"handleActiveForkChanged", 23);
    *(_BYTE *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v27 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "ActiveForkChanged");
    BambiCall::activateAllMediaSessionIfAppropriate(a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v37 = &off_1E78BD300;
    if (v39[0])
      std::__shared_weak_count::__release_weak(v39[0]);
  }
  ImsResult::~ImsResult((ImsResult *)&v31);
}

void sub_1BEFA5F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a14 < 0)
    operator delete(__p);
  if (a29)
    std::__shared_weak_count::__release_weak(a29);
  ImsResult::~ImsResult((ImsResult *)&a17);
  _Unwind_Resume(a1);
}

void BambiCall::terminationLocksReleased(BambiCall *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  void (**v9)(ImsResult *__hidden);
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void (*v20)(ImsResult *__hidden);
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BambiCallMediaStream *v30;
  BambiClient *v31;
  ImsResult *v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  BOOL v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  void (**v43)(ImsResult *__hidden);
  uint64_t *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void (**v57)(ImsResult *__hidden);
  std::__shared_weak_count *v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  v2 = (_QWORD *)((char *)this + 72);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"BambiCall::terminationLocksReleased()", 37);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  v4 = v2[41];
  if (v4)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v55, (_QWORD *)this + 22);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 192))(v4, &v55);
    v5 = v56;
    if (v56)
    {
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v57 = 0;
  v58 = 0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v8)
  {
    v58 = std::__shared_weak_count::lock(v8);
    if (v58)
    {
      v9 = (void (**)(ImsResult *__hidden))*((_QWORD *)this + 44);
      v57 = v9;
      if (v9)
      {
        if (*((_QWORD *)this + 64))
        {
          v10 = (uint64_t)v9[527];
          v11 = (std::__shared_weak_count *)v9[528];
          v53 = v10;
          v54 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
          }
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v51, (_QWORD *)this + 22);
          BambiEmergencyCallHandler::handleCallInvalidated(v10, &v51);
          v14 = v52;
          if (v52)
          {
            v15 = (unint64_t *)&v52->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          v17 = v54;
          if (v54)
          {
            v18 = (unint64_t *)&v54->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          v9 = v57;
        }
        v20 = v9[361];
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v49, (_QWORD *)this + 22);
        (*(void (**)(void (*)(ImsResult *__hidden), uint64_t *))(*(_QWORD *)v20 + 168))(v20, &v49);
        v21 = v50;
        if (v50)
        {
          v22 = (unint64_t *)&v50->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
    }
  }
  v24 = v58;
  if (v58)
  {
    v25 = (unint64_t *)&v58->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *((_QWORD *)this + 24);
  if (v27)
  {
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v43 = &off_1E78B7238;
    v44 = &_bambiDomain;
    v45 = 0;
    v28 = *(_QWORD **)(v27 + 1904);
    v29 = (_QWORD *)(v27 + 1912);
    if (v28 != (_QWORD *)(v27 + 1912))
    {
      while (1)
      {
        v30 = (BambiCallMediaStream *)v28[5];
        v31 = (BambiClient *)BambiCall::bambiClient(this);
        BambiClient::invalidateStream(v31, v30);
        v60 = 0u;
        v61 = 0u;
        v62 = 0u;
        v57 = &off_1E78B7238;
        v58 = (std::__shared_weak_count *)&_bambiDomain;
        v59 = 0;
        ImsResult::operator=((uint64_t)&v43, (uint64_t)&v57);
        ImsResult::~ImsResult((ImsResult *)&v57);
        v60 = 0u;
        v61 = 0u;
        v62 = 0u;
        v57 = &off_1E78B7238;
        v58 = (std::__shared_weak_count *)&_bambiDomain;
        v59 = 0;
        if (v44 != &_bambiDomain)
          break;
        v33 = v45;
        ImsResult::~ImsResult(v32);
        if (!v33)
        {
          v34 = (_QWORD *)v28[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v28[2];
              v36 = *v35 == (_QWORD)v28;
              v28 = v35;
            }
            while (!v36);
          }
          v28 = v35;
          if (v35 != v29)
            continue;
        }
        goto LABEL_47;
      }
      ImsResult::~ImsResult(v32);
    }
LABEL_47:
    ImsResult::~ImsResult((ImsResult *)&v43);
  }
  v37 = (_QWORD *)BambiCall::bambiClient(this);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v41, (_QWORD *)this + 22);
  BambiClient::invalidateCall(v37, &v41);
  v38 = v42;
  if (v42)
  {
    v39 = (unint64_t *)&v42->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1BEFA6378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v14 - 136);
  _Unwind_Resume(a1);
}

void BambiCall::loggableName(BambiCall *this@<X0>, std::string *a2@<X8>)
{
  std::string v4;
  void *__p;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v7, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v7 + 1), (uint64_t)"BambiCall ", 10);
  BYTE1(v8) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v4, (const std::string *)((char *)this + 464));
  (*(void (**)(__int128 *, std::string *))(v7 + 56))(&v7, &v4);
  if (v6 < 0)
    operator delete(__p);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v8 + 1) + 8, &v4);
  LoggableString::LoggableString(a2, &v4);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  *(_QWORD *)&v7 = &off_1E78D7A10;
  if ((_BYTE)v8)
  {
    if (*((_QWORD *)&v7 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v7 + 1) + 8))(*((_QWORD *)&v7 + 1));
  }
}

void sub_1BEFA64E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20)
  {
    if (a19)
      (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::logPrefix(BambiCall *this, ImsOutStream *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v14 = v5;
    if (v5)
    {
      v6 = *((_QWORD *)this + 44);
      v13 = v6;
      if (v6)
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v6 + 104))(v11);
        (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" [", 2);
        *((_BYTE *)a2 + 17) = 0;
        (*(void (**)(void **__return_ptr, BambiCall *))(*(_QWORD *)this + 24))(__p, this);
        (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"]: ", 3);
        *((_BYTE *)a2 + 17) = 0;
        if (v10 < 0)
          operator delete(__p[0]);
        if (v12 < 0)
          operator delete(v11[0]);
LABEL_12:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  (*(void (**)(void **__return_ptr, BambiCall *))(*(_QWORD *)this + 24))(v11, this);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (v12 < 0)
    operator delete(v11[0]);
  if (v5)
    goto LABEL_12;
}

void sub_1BEFA66CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'BambiCall::logPrefix(BambiCall *this, ImsOutStream *a2)
{
  BambiCall::logPrefix((BambiCall *)((char *)this - 72), a2);
}

uint64_t BambiCall::handleInitializationFailure(BambiCall *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  SipSession *v9;
  std::string __p;
  __int128 v12;
  __int128 v13;
  _OWORD v14[3];

  memset(v14, 0, sizeof(v14));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v12, (_QWORD *)this + 22);
  v13 = v12;
  v12 = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "handleInitializationFailure");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v14, (uint64_t *)&v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 56))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"BambiCall::handleInitializationFailure", 38);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v9 = (SipSession *)*((_QWORD *)this + 48);
  if (v9)
  {
    SipSession::handleInitializationFailure(v9);
    BambiCall::detachSipSession(this);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v14);
}

void sub_1BEFA6890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void BambiCall::createLocalSdpForFork(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = *(_QWORD *)(a1 + 192);
  v5 = *(_DWORD *)(a1 + 440) & 0xFFFFFFFE;
  v6 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  SDPSession::createLocalSdpForFork(v4, v5 == 2, &v12, a3);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEFA696C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCall::setDirectionForSdpBasedOnHoldState(_QWORD *a1, _QWORD **a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  SipSession *v7;
  uint64_t v8;
  unsigned int *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string v12;
  std::string __p;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v14 = 0;
  v15 = 0;
  v4 = (std::__shared_weak_count *)a1[45];
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v15 = v5;
    if (v5)
    {
      v6 = a1[44];
      v14 = v6;
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_6:
  if (*a2 && (!v6 || *(_BYTE *)(v6 + 1024)))
  {
    v7 = (SipSession *)a1[48];
    if (!v7 || (SipSession::confirmed(v7) & 1) == 0)
    {
      v8 = (*(uint64_t (**)(_QWORD *))(a1[9] + 64))(a1 + 9);
      (*(void (**)(_QWORD *, uint64_t))(a1[9] + 16))(a1 + 9, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"setting direction of outgoing SDP to ", 37);
      *(_BYTE *)(v8 + 17) = 0;
      v9 = (unsigned int *)a1 + 111;
      ims::toString<MediaDirection>(v9, &v12);
      LoggableString::LoggableString(&__p, &v12);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 40))(v8, &__p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
      SDPModel::setDirectionForSessionAndMedia(*a2, *v9);
    }
  }
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEFA6AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void BambiCall::interface(BambiCall *this@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _BOOL4 v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v31 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (!v4)
    goto LABEL_23;
  v31 = std::__shared_weak_count::lock(v4);
  if (!v31)
    goto LABEL_23;
  v5 = *((_QWORD *)this + 44);
  v30 = v5;
  if (!v5)
    goto LABEL_23;
  v6 = *(_QWORD *)(v5 + 160);
  v7 = *(std::__shared_weak_count **)(v5 + 168);
  v29 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (v6)
  {
    v10 = *(_QWORD *)(v5 + 160);
    v11 = *(std::__shared_weak_count **)(v5 + 168);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 144))(v10) == 0;
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v7 = v29;
    if (!v29)
      goto LABEL_22;
  }
  else
  {
    v14 = 1;
    if (!v7)
      goto LABEL_22;
  }
  v17 = (unint64_t *)&v7->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v14)
      goto LABEL_23;
    goto LABEL_31;
  }
LABEL_22:
  if (v14)
  {
LABEL_23:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_24;
  }
LABEL_31:
  v21 = *(_QWORD *)(v30 + 160);
  v22 = *(std::__shared_weak_count **)(v30 + 168);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 144))(v21);
  if (*(char *)(v25 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v25 + 32), *(_QWORD *)(v25 + 40));
  }
  else
  {
    v26 = *(_OWORD *)(v25 + 32);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 + 48);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
  }
  if (v22)
  {
    v27 = (unint64_t *)&v22->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_24:
  if (v31)
  {
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1BEFA6D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void BambiCall::address(BambiCall *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _OWORD v11[3];
  uint64_t v12;

  v9 = 0;
  v10 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v2)
  {
    v2 = std::__shared_weak_count::lock(v2);
    v3 = v2;
    v10 = v2;
    if (v2)
    {
      v2 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
      v9 = v2;
    }
  }
  else
  {
    v3 = 0;
  }
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  SipStack::mediaAddress((SipStack *)v2, (uint64_t)v11);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v9 = 0;
  v10 = 0;
  SipHost::address((SipHost *)v11, &v9);
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared_weak)(v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  SipHost::~SipHost((void **)v11);
}

void sub_1BEFA6E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  SipHost::~SipHost(&a11);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::setQualityOfServiceRevoked(BambiCall *this, unsigned int a2)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  ImsPrefs *v11;
  void **v12;
  void *v13;
  int v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  unsigned int v30;
  BOOL v31;
  char **v32;
  uint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  uint64_t *v50;
  uint64_t v51;
  ImsPrefs *v52;
  void **v53;
  void *v54;
  int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _BYTE v68[72];
  void *__p;
  std::__shared_weak_count *v70;
  char v71;
  _BYTE v72[72];
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;

  v75 = 0;
  v76 = 0;
  v77 = 0;
  v73 = 0;
  v74 = 0;
  v3 = *((_QWORD *)this + 48);
  if (!v3)
    goto LABEL_43;
  v6 = *(_QWORD *)(v3 + 240);
  v5 = *(std::__shared_weak_count **)(v3 + 248);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_8;
LABEL_43:
      v36 = *((_QWORD *)this + 9);
      v35 = (char *)this + 72;
      v37 = (*(uint64_t (**)(char *))(v36 + 56))(v35);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v35 + 16))(v35, v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"setQualityOfServiceRevoked: no SIP session", 42);
      *(_BYTE *)(v37 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v38 = 0;
      *(_BYTE *)(v37 + 17) = 0;
      goto LABEL_91;
    }
  }
  if (!v6)
    goto LABEL_43;
LABEL_8:
  v10 = *((_QWORD *)this + 48);
  if (*(_DWORD *)(v10 + 1496) == a2)
  {
    *(_DWORD *)(v10 + 1496) = -1;
    *(_BYTE *)(v10 + 1528) = 0;
    *(_QWORD *)(v10 + 1512) = *(_QWORD *)(v10 + 1504);
    SipSessionInterface::stack((std::__shared_weak_count *)v10, &__p);
    v11 = (ImsPrefs *)SipStack::prefs((SipStack *)__p);
    v12 = (void **)ImsPrefs::getEndCallOnAudioBearerRevokedKey(v11);
    v13 = ImsPrefs::prefWithKey(v11, v12);
    if (v13)
      v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 40))(v13);
    else
      v14 = *((_BYTE *)v12 + 57) != 0;
    v39 = v70;
    if (!v70)
      goto LABEL_49;
    v40 = &v70->__shared_owners_;
    do
      v41 = __ldaxr((unint64_t *)v40);
    while (__stlxr(v41 - 1, (unint64_t *)v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if (v14)
      {
LABEL_50:
        v42 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 32))((char *)this + 72);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"Local QoS bearer revoked. Ending call!", 38);
        *(_BYTE *)(v42 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v42 + 17) = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "BearerRevoked");
        BambiCall::endWithReason(this, (uint64_t)&__p, (uint64_t)v72);
        ImsResult::~ImsResult((ImsResult *)v72);
        if (v71 < 0)
          operator delete(__p);
      }
    }
    else
    {
LABEL_49:
      if (v14)
        goto LABEL_50;
    }
LABEL_90:
    v38 = 1;
    goto LABEL_91;
  }
  v15 = *(void **)(v10 + 240);
  v16 = *(std::__shared_weak_count **)(v10 + 248);
  __p = v15;
  v70 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  SipDialog::allForks((uint64_t)v15, (uint64_t)&v75);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v21 = v75;
  v22 = v76;
  while (v21 != v22)
  {
    __p = 0;
    v70 = 0;
    v23 = *(_QWORD **)v21;
    v24 = *(std::__shared_weak_count **)(v21 + 8);
    __p = *(void **)v21;
    v70 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    if (v23)
    {
      v27 = (char *)v23[108];
      if (v27)
      {
        v28 = (char *)(v23 + 108);
        v29 = (char *)(v23 + 108);
        do
        {
          v30 = *((_DWORD *)v27 + 8);
          v31 = v30 >= a2;
          if (v30 >= a2)
            v32 = (char **)v27;
          else
            v32 = (char **)(v27 + 8);
          if (v31)
            v29 = v27;
          v27 = *v32;
        }
        while (*v32);
        if (v29 != v28 && *((_DWORD *)v29 + 8) <= a2)
        {
          std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v73, (uint64_t *)&__p);
          v43 = v70;
          if (v70)
          {
            v44 = &v70->__shared_owners_;
            do
              v45 = __ldaxr((unint64_t *)v44);
            while (__stlxr(v45 - 1, (unint64_t *)v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          break;
        }
      }
    }
    if (v70)
    {
      v33 = &v70->__shared_owners_;
      do
        v34 = __ldaxr((unint64_t *)v33);
      while (__stlxr(v34 - 1, (unint64_t *)v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v21 += 16;
  }
  if (v73)
  {
    v46 = *(_QWORD *)(v73 + 864);
    if (v46)
    {
      v47 = v73 + 864;
      do
      {
        v48 = *(_DWORD *)(v46 + 32);
        v49 = v48 >= a2;
        if (v48 >= a2)
          v50 = (uint64_t *)v46;
        else
          v50 = (uint64_t *)(v46 + 8);
        if (v49)
          v47 = v46;
        v46 = *v50;
      }
      while (*v50);
      if (v47 != v73 + 864 && *(_DWORD *)(v47 + 32) <= a2)
      {
        v51 = *(unsigned int *)(v47 + 44);
        if ((_DWORD)v51)
        {
          if ((_DWORD)v51 != 2)
            goto LABEL_85;
          SipSessionInterface::stack(*((std::__shared_weak_count **)this + 48), &__p);
          v52 = (ImsPrefs *)SipStack::prefs((SipStack *)__p);
          v53 = (void **)ImsPrefs::getEndCallOnAudioBearerRevokedKey(v52);
          v54 = ImsPrefs::prefWithKey(v52, v53);
          if (v54)
            v55 = (*(uint64_t (**)(void *))(*(_QWORD *)v54 + 40))(v54);
          else
            v55 = *((_BYTE *)v53 + 57) != 0;
          v59 = v70;
          if (v70)
          {
            v60 = &v70->__shared_owners_;
            do
              v61 = __ldaxr((unint64_t *)v60);
            while (__stlxr(v61 - 1, (unint64_t *)v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          if (v55)
          {
            v62 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 48))((char *)this + 72);
            (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v62);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v62 + 8), (uint64_t)"Audio bearer revoked.  Ending call!", 35);
            *(_BYTE *)(v62 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v62 + 17) = 0;
            std::string::basic_string[abi:ne180100]<0>(&__p, "BearerRevoked");
            BambiCall::endWithReason(this, (uint64_t)&__p, (uint64_t)v68);
            ImsResult::~ImsResult((ImsResult *)v68);
            if (v71 < 0)
              operator delete(__p);
          }
          else
          {
LABEL_85:
            v63 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 32))((char *)this + 72);
            (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v63);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v63 + 8), (uint64_t)"Bearer revoked for media type ", 30);
            *(_BYTE *)(v63 + 17) = 0;
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v63 + 32))(v63, &__p);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v63 + 17) = 0;
            if (v71 < 0)
              operator delete(__p);
            if ((_DWORD)v51 == 4)
              BambiCall::setTextMediaSessionMode((uint64_t)this, 0);
          }
        }
      }
    }
    v78 = a2;
    std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::__erase_unique<unsigned int>(v73 + 856, &v78);
    goto LABEL_90;
  }
  v57 = *((_QWORD *)this + 9);
  v56 = (char *)this + 72;
  v58 = (*(uint64_t (**)(char *))(v57 + 48))(v56);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v56 + 16))(v56, v58);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)"Call does not own a fork using bearer ", 38);
  *(_BYTE *)(v58 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v58 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v38 = 0;
  *(_BYTE *)(v58 + 17) = 0;
LABEL_91:
  v64 = v74;
  if (v74)
  {
    v65 = (unint64_t *)&v74->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  __p = &v75;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v38;
}

void sub_1BEFA756C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 96);
  __p = (void *)(v24 - 80);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::setQualityOfServiceEstablished(uint64_t a1, unsigned int a2, int a3, uint64_t *a4)
{
  char v4;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  SipDialogFork *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  BOOL v32;
  uint64_t *v33;
  char v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  SipSession *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  ims *v48;
  void *p_p;
  std::__shared_weak_count *v50;
  char v51;
  void *__p;
  char *v53;
  uint64_t v54;

  __p = 0;
  v53 = 0;
  v54 = 0;
  v9 = *(_QWORD *)(a1 + 384);
  if (!v9)
    goto LABEL_46;
  v11 = *(_QWORD *)(v9 + 240);
  v10 = *(std::__shared_weak_count **)(v9 + 248);
  if (!v10)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_7:
    if (v11)
      goto LABEL_8;
LABEL_46:
    p_p = &__p;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    goto LABEL_47;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!v11)
    goto LABEL_46;
LABEL_8:
  v15 = *(_QWORD *)(a1 + 384);
  v16 = *(void **)(v15 + 240);
  v17 = *(std::__shared_weak_count **)(v15 + 248);
  p_p = v16;
  v50 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  SipDialog::allForks((uint64_t)v16, (uint64_t)&__p);
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v23 = (char *)__p;
  v22 = v53;
  if (__p == v53)
    goto LABEL_46;
  v24 = a1 + 72;
  while (1)
  {
    v25 = *(SipDialogFork **)v23;
    v26 = (std::__shared_weak_count *)*((_QWORD *)v23 + 1);
    p_p = *(void **)v23;
    v50 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    if (!v25)
      goto LABEL_35;
    v29 = *((_QWORD *)v25 + 108);
    if (!v29)
      goto LABEL_35;
    v30 = (_QWORD *)((char *)v25 + 864);
    do
    {
      v31 = *(_DWORD *)(v29 + 32);
      v32 = v31 >= a2;
      if (v31 >= a2)
        v33 = (uint64_t *)v29;
      else
        v33 = (uint64_t *)(v29 + 8);
      if (v32)
        v30 = (_QWORD *)v29;
      v29 = *v33;
    }
    while (*v33);
    if (v30 != (_QWORD *)((char *)v25 + 864)
      && *((_DWORD *)v30 + 8) <= a2
      && SipDialogFork::getBearerPortCount(v25, a2)
      && a4[1] == *a4)
    {
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 48))(a1 + 72);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(a1 + 72, v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"An existing bearer has been updated without ports.  Revoking bearer.", 68);
      *(_BYTE *)(v37 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v37 + 17) = 0;
      v4 = BambiCall::setQualityOfServiceRevoked((BambiCall *)a1, a2);
      v34 = 0;
      if (!v26)
        goto LABEL_40;
    }
    else
    {
LABEL_35:
      v34 = 1;
      if (!v26)
        goto LABEL_40;
    }
    v35 = (unint64_t *)&v26->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
LABEL_40:
    if ((v34 & 1) == 0)
      break;
    v23 += 16;
    if (v23 == v22)
      goto LABEL_46;
  }
  p_p = &__p;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  if ((v4 & 1) != 0)
    return 0;
LABEL_47:
  v38 = *(SipSession **)(a1 + 384);
  if (v38 && (SipSession::confirmed(v38) & 1) != 0
    || *(_BYTE *)(a1 + 452)
    || (v43 = *(_QWORD *)(a1 + 384)) == 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 264))(v43) & 1) != 0
    || !*(_QWORD *)(a1 + 384))
  {
    v40 = *(_QWORD *)(a1 + 72);
    v39 = a1 + 72;
    v41 = (*(uint64_t (**)(uint64_t))(v40 + 64))(v39);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"it's not time for QoS", 21);
    *(_BYTE *)(v41 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    result = 0;
    *(_BYTE *)(v41 + 17) = 0;
  }
  else
  {
    v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"Local QoS established for bearer ", 33);
    *(_BYTE *)(v44 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v44 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)" on ", 4);
    *(_BYTE *)(v44 + 17) = 0;
    if (a3)
      v45 = "local";
    else
      v45 = "remote";
    if (a3)
      v46 = 5;
    else
      v46 = 6;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)v45, v46);
    *(_BYTE *)(v44 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)" ports: ", 8);
    *(_BYTE *)(v44 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&p_p, ", ");
    ims::join<std::__wrap_iter<unsigned short const*>>(*a4, a4[1], (uint64_t)&p_p, &__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v44 + 32))(v44, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v44 + 17) = 0;
    if (SHIBYTE(v54) < 0)
      operator delete(__p);
    if (v51 < 0)
      operator delete(p_p);
    v47 = *(_QWORD *)(a1 + 384);
    if (v47)
    {
      SipSession::handleQualityOfServiceEstablished(v47, a2, a3, (uint64_t)a4, a2 == -1);
      *(_QWORD *)(a1 + 1728) = ims::getCurrentNTPTimestampInMilliseconds(v48);
    }
    return 1;
  }
  return result;
}

void sub_1BEFA7A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BambiCall::setTextMediaSessionMode(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  SipSession *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _BYTE v34[72];
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[72];
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  _OWORD v40[3];
  uint64_t v41;

  if (a2 != 2 * *(unsigned __int8 *)(a1 + 745))
  {
    v4 = a1 + 72;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
    v6 = a2 == 2 ? "setTextMediaSessionMode to RTT for call " : "setTextMediaSessionMode to OFF for call ";
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)v6, 40);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, v4 + 392);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    *(_BYTE *)(v4 + 673) = a2 == 2;
    *(_BYTE *)(v4 + 672) = 0;
    SDPSession::setTextMediaSessionMode(*(_QWORD *)(v4 + 120), a2);
    v7 = *(_QWORD *)(v4 + 120);
    v8 = *(_QWORD *)(v7 + 1912);
    if (!v8)
      goto LABEL_19;
    v9 = v7 + 1912;
    v10 = v7 + 1912;
    do
    {
      v11 = *(_DWORD *)(v8 + 32);
      v12 = v11 < 4;
      if (v11 >= 4)
        v13 = (uint64_t *)v8;
      else
        v13 = (uint64_t *)(v8 + 8);
      if (!v12)
        v10 = v8;
      v8 = *v13;
    }
    while (*v13);
    if (v10 != v9 && *(int *)(v10 + 32) <= 4 && (v14 = *(_QWORD *)(v10 + 40)) != 0)
    {
      if (*(_QWORD *)(v14 + 32))
      {
        if (*(_BYTE *)(a1 + 745))
        {
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Found existing text media session ID ", 37);
          *(_BYTE *)(v15 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v15 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v15 + 17) = 0;
        }
      }
      else
      {
        v41 = 0;
        memset(v40, 0, sizeof(v40));
        v38 = 0;
        v39 = 0;
        v19 = *(std::__shared_weak_count **)(a1 + 360);
        if (v19)
        {
          v19 = std::__shared_weak_count::lock(v19);
          v20 = v19;
          v39 = v19;
          if (v19)
          {
            v19 = *(std::__shared_weak_count **)(a1 + 352);
            v38 = v19;
          }
        }
        else
        {
          v20 = 0;
        }
        SipStack::mediaAddress((SipStack *)v19, (uint64_t)v40);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        SipHost::address((SipHost *)v40, &v38);
        v23 = BambiCall::bambiClient((BambiCall *)a1);
        v24 = *(_DWORD *)(a1 + 444);
        v25 = *(std::__shared_weak_count **)(a1 + 200);
        v35 = *(_QWORD *)(a1 + 192);
        v36 = v25;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        BambiClient::createMediaSessionForStream(v23, v14, (uint64_t)&v38, v24, &v35, (uint64_t)v37);
        ImsResult::~ImsResult((ImsResult *)v37);
        v28 = v36;
        if (v36)
        {
          v29 = (unint64_t *)&v36->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v31 = v39;
        if (v39)
        {
          v32 = (unint64_t *)&v39->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        SipHost::~SipHost((void **)v40);
      }
    }
    else
    {
LABEL_19:
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"No text stream available", 24);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v16 + 17) = 0;
    }
    v17 = *(SipSession **)(a1 + 384);
    if (v17)
    {
      if (!SipSession::terminating(v17))
      {
        v18 = *(std::__shared_weak_count **)(a1 + 384);
        if (v18)
        {
          if ((((uint64_t (*)(std::__shared_weak_count *))v18->__vftable[6].__get_deleter)(v18) & 1) != 0)
            return;
          v18 = *(std::__shared_weak_count **)(a1 + 384);
        }
        SipSession::upgradeToRtt(v18, 1, (uint64_t)v34);
        ImsResult::~ImsResult((ImsResult *)v34);
      }
    }
  }
}

void sub_1BEFA7E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v10 - 144);
  SipHost::~SipHost((void **)(v10 - 128));
  _Unwind_Resume(a1);
}

void BambiCall::remoteDisplayNumber(BambiCall *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  _BOOL4 isTelUri;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string __p;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, (char *)&str_33_3);
  if (SipUri::isValidUri((BambiCall *)((char *)this + 1040)))
  {
    if (BambiCall::senderIsPrivate(this))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        *(_QWORD *)(a2 + 8) = 0;
        v4 = *(_BYTE **)a2;
      }
      else
      {
        *(_BYTE *)(a2 + 23) = 0;
        v4 = (_BYTE *)a2;
      }
      *v4 = 0;
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      isTelUri = SipUri::isTelUri((BambiCall *)((char *)this + 1040));
      v6 = (char *)this + 1216;
      v7 = 1168;
      if (isTelUri)
        v7 = 1216;
      else
        v6 = (char *)this + 1168;
      if (v6[23] < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)((char *)this + v7), *((_QWORD *)v6 + 1));
      else
        __p = *(std::string *)v6;
      if (isPhoneNumber((unsigned __int8 *)&__p))
        std::string::operator=((std::string *)a2, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
    if (v9)
    {
      v10 = v9;
      v11 = *((_QWORD *)this + 44);
      __p.__r_.__value_.__r.__words[0] = v11;
      if (v11)
        SipStack::massageIncomingDisplayNumber(v11, a2);
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1BEFA8008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void BambiCall::remoteDisplayName(BambiCall *this@<X0>, std::string *a2@<X8>)
{
  if (BambiCall::senderIsPrivate(this))
  {
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_33_3);
  }
  else if (*((char *)this + 1471) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 181), *((_QWORD *)this + 182));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1448);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 183);
  }
}

void BambiCall::remoteDisplayCountryCode(BambiCall *this@<X0>, std::string *a2@<X8>)
{
  SipUri *v4;

  if (BambiCall::senderIsPrivate(this) || (v4 = (BambiCall *)((char *)this + 1040), !SipUri::isValidUri(v4)))
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_33_3);
  else
    SipUri::countryCodeFromPhoneContext(v4, a2);
}

void BambiCall::sendEmergencyLocationUpdate(uint64_t a1@<X0>, const ims::LocationInfo *a2@<X1>, ImsResult *a3@<X8>)
{
  const ImsResult *v5;
  std::string v6[2];
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  _QWORD v15[2];
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (*(_QWORD *)(a1 + 384))
  {
    ims::LocationInfo::LocationInfo((ims::LocationInfo *)v6, a2);
    BambiCall::setEmergencyLocationInfo(a1, v6);
    if (v14 < 0)
      operator delete(__p);
    if (v12 < 0)
      operator delete(v11);
    if (v10 < 0)
      operator delete(v9);
    if (v8 < 0)
      operator delete(v7);
    SipSession::sendUpdate(*(uint64_t **)(a1 + 384), (uint64_t)&SipSession::kUpdateTypeEmergencyLocationUpdate, (uint64_t)a3);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v15[0] = &off_1E78B7238;
    v15[1] = &_bambiDomain;
    v16 = 1073741827;
    v5 = (const ImsResult *)ImsResult::operator<<<char [15]>((uint64_t)v15, "No SIP session");
    ImsResult::ImsResult(a3, v5);
    ImsResult::~ImsResult((ImsResult *)v15);
  }
}

void sub_1BEFA8218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ims::LocationInfo::~LocationInfo((void **)va);
  _Unwind_Resume(a1);
}

void BambiCall::sendEmergencyLocationPublish(uint64_t a1@<X0>, const ims::LocationInfo *a2@<X1>, ImsResult *a3@<X8>)
{
  const ImsResult *v5;
  std::string v6[2];
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  _QWORD v15[2];
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (*(_QWORD *)(a1 + 384))
  {
    ims::LocationInfo::LocationInfo((ims::LocationInfo *)v6, a2);
    BambiCall::setEmergencyLocationInfo(a1, v6);
    if (v14 < 0)
      operator delete(__p);
    if (v12 < 0)
      operator delete(v11);
    if (v10 < 0)
      operator delete(v9);
    if (v8 < 0)
      operator delete(v7);
    SipSession::sendPublish(*(uint64_t **)(a1 + 384), (unsigned __int8 *)&SipSession::kPublishTypeEmergencyLocation, (uint64_t)a3);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v15[0] = &off_1E78B7238;
    v15[1] = &_bambiDomain;
    v16 = 1073741827;
    v5 = (const ImsResult *)ImsResult::operator<<<char [15]>((uint64_t)v15, "No SIP session");
    ImsResult::ImsResult(a3, v5);
    ImsResult::~ImsResult((ImsResult *)v15);
  }
}

void sub_1BEFA8338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ims::LocationInfo::~LocationInfo((void **)va);
  _Unwind_Resume(a1);
}

void BambiCall::sendReinvite(ImsResult *a1, uint64_t a2, std::string *a3)
{
  const ImsResult *v4;
  _QWORD v5[2];
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a2)
  {
    SipSession::sendInvite(a2, a3, a1);
  }
  else
  {
    v7 = 0u;
    v8 = 0u;
    v9 = 0u;
    v5[0] = &off_1E78B7238;
    v5[1] = &_bambiDomain;
    v6 = 1073741827;
    v4 = (const ImsResult *)ImsResult::operator<<<char [15]>((uint64_t)v5, "No SIP session");
    ImsResult::ImsResult(a1, v4);
    ImsResult::~ImsResult((ImsResult *)v5);
  }
}

void sub_1BEFA83F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void BambiCall::handleSRVCCFailure(RTPManager **this@<X0>, int a2@<W1>, ImsResult *a3@<X8>)
{
  SipSession *v6;
  char *v7;
  uint64_t *v8;
  const ImsResult *v9;
  std::string v10;
  void (**v11)(SipParameterMap *__hidden);
  uint64_t v12[3];
  char v13;
  char v14;
  void *__p[2];
  char v16;
  void *v17[2];
  _OWORD v18[4];

  if (this[48])
  {
    RTPManager::srvccHandoverFailed(this[46]);
    v6 = this[48];
    if (v6 && SipSession::confirmed(v6))
    {
      BambiCall::sendReinvite(a3, (uint64_t)this[48], (std::string *)"SRVCCFailureInvite");
    }
    else
    {
      *(_OWORD *)v17 = 0u;
      memset(v18, 0, 48);
      if (a2)
        v7 = "handover cancelled";
      else
        v7 = "failure to transition to CS domain";
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      SipReason::SipReason((unsigned __int8 *)v17, &SipReason::kProtocolSip, 487, (uint64_t)__p);
      if (v16 < 0)
        operator delete(__p[0]);
      v8 = (uint64_t *)this[48];
      if (SBYTE7(v18[0]) < 0)
      {
        std::string::__init_copy_ctor_external(&v10, (const std::string::value_type *)v17[0], (std::string::size_type)v17[1]);
      }
      else
      {
        *(_OWORD *)&v10.__r_.__value_.__l.__data_ = *(_OWORD *)v17;
        v10.__r_.__value_.__r.__words[2] = *(_QWORD *)&v18[0];
      }
      v11 = &off_1E78B82D8;
      std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(v12, *(void ***)&v18[1], (void **)&v18[1] + 1);
      v14 = 1;
      v13 = BYTE8(v18[2]);
      SipSession::sendUpdateWithLocalSdpInAllForks(v8, (std::string *)"UpdateTypeSRVCCFailure", (uint64_t)&v10, (uint64_t)a3);
      v11 = &off_1E78B82D8;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v12, (_QWORD *)v12[1]);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
      *((_QWORD *)&v18[0] + 1) = &off_1E78B82D8;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18[1], *((_QWORD **)&v18[1] + 1));
      if (SBYTE7(v18[0]) < 0)
        operator delete(v17[0]);
    }
  }
  else
  {
    memset((char *)v18 + 8, 0, 48);
    v17[0] = &off_1E78B7238;
    v17[1] = &_bambiDomain;
    LODWORD(v18[0]) = 1073741826;
    v9 = (const ImsResult *)ImsResult::operator<<<char [15]>((uint64_t)v17, "No SIP session");
    ImsResult::ImsResult(a3, v9);
    ImsResult::~ImsResult((ImsResult *)v17);
  }
}

void sub_1BEFA85FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  SipReason::~SipReason((SipReason *)&a27);
  _Unwind_Resume(a1);
}

void SipReason::SipReason(std::string *this, const SipReason *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B82D8;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)&this[1].__r_.__value_.__l.__size_, *((void ***)a2 + 4), (void **)a2 + 5);
  this[2].__r_.__value_.__s.__data_[9] = 1;
  this[2].__r_.__value_.__s.__data_[8] = *((_BYTE *)a2 + 56);
}

void sub_1BEFA86E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void BambiCall::handleAccessNetworkChange(BambiCall *this@<X0>, const ims::AccessNetwork *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  _BOOL4 isWifi;
  SipSession *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  BOOL v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  const ImsResult *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  const ImsResult *v23;
  SipSession *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  const ImsResult *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  const ImsResult *v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::string v47[2];
  _OWORD v48[4];
  void *__p[2];
  char v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  void (**v53)(ImsResult *__hidden);
  uint64_t *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  if ((a3 & 1) == 0)
  {
    isWifi = ims::AccessNetwork::isWifi((BambiCall *)((char *)this + 1568));
    if (isWifi == ims::AccessNetwork::isWifi(a2))
    {
      v18 = *((_QWORD *)this + 9);
      v17 = (char *)this + 72;
      v19 = (*(uint64_t (**)(char *))(v18 + 64))(v17);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v17 + 16))(v17, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"handleAccessNetworkChange: access network hasn't changed", 56);
      *(_BYTE *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v19 + 17) = 0;
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(_QWORD *)a4 = &off_1E78B7238;
      *(_QWORD *)(a4 + 8) = &_bambiDomain;
      *(_DWORD *)(a4 + 16) = 0;
      return;
    }
  }
  v8 = (SipSession *)*((_QWORD *)this + 48);
  if (!v8)
  {
    v14 = *((_QWORD *)this + 9);
    v13 = (char *)this + 72;
    v15 = (*(uint64_t (**)(char *))(v14 + 48))(v13);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v13 + 16))(v13, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"handleAccessNetworkChange: no SIP session", 41);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v53 = &off_1E78B7238;
    v54 = &_bambiDomain;
    LODWORD(v55) = 1073741826;
    v16 = (const ImsResult *)ImsResult::operator<<<char [15]>((uint64_t)&v53, "No SIP session");
    ImsResult::ImsResult((ImsResult *)a4, v16);
LABEL_14:
    ImsResult::~ImsResult((ImsResult *)&v53);
    return;
  }
  if ((SipSession::confirmed(v8) & 1) == 0)
  {
    v21 = *((_QWORD *)this + 9);
    v20 = (char *)this + 72;
    v22 = (*(uint64_t (**)(char *))(v21 + 64))(v20);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v20 + 16))(v20, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"handleAccessNetworkChange: call is not confirmed", 48);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v53 = &off_1E78B7238;
    v54 = &_bambiDomain;
    LODWORD(v55) = 1073741826;
    v23 = (const ImsResult *)ImsResult::operator<<<char [14]>((uint64_t)&v53, "Not confirmed");
    ImsResult::ImsResult((ImsResult *)a4, v23);
    goto LABEL_14;
  }
  v51 = 0;
  v52 = 0;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (!v9)
  {
    v10 = 0;
    goto LABEL_17;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v52 = v10;
  if (!v10)
  {
LABEL_17:
    v11 = 0;
    v12 = 1;
    goto LABEL_18;
  }
  v11 = *((_QWORD *)this + 44);
  v51 = v11;
  v12 = v11 == 0;
  if ((*((_DWORD *)this + 110) & 0xFFFFFFFE) != 2 || !v11)
  {
LABEL_18:
    v24 = (SipSession *)*((_QWORD *)this + 48);
    if (v24)
    {
      if (SipSession::terminating(v24)
        || (v25 = *((_QWORD *)this + 48)) != 0
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 264))(v25))
      {
        v27 = *((_QWORD *)this + 9);
        v26 = (char *)this + 72;
        v28 = (*(uint64_t (**)(char *))(v27 + 64))(v26);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v26 + 16))(v26, v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"handleAccessNetworkChange: call is terminating", 46);
        *(_BYTE *)(v28 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v28 + 17) = 0;
        v56 = 0u;
        v57 = 0u;
        v58 = 0u;
        v53 = &off_1E78B7238;
        v54 = &_bambiDomain;
        LODWORD(v55) = 1073741826;
        v29 = (const ImsResult *)ImsResult::operator<<<char [11]>((uint64_t)&v53, "Terminated");
        ImsResult::ImsResult((ImsResult *)a4, v29);
        goto LABEL_48;
      }
    }
    if (*((_QWORD *)this + 64))
    {
      v31 = *((_QWORD *)this + 9);
      v30 = (char *)this + 72;
      v32 = (*(uint64_t (**)(char *))(v31 + 64))(v30);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v30 + 16))(v30, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"handleAccessNetworkChange: not refreshing access network for emergency call", 75);
      *(_BYTE *)(v32 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v32 + 17) = 0;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v53 = &off_1E78B7238;
      v54 = &_bambiDomain;
      LODWORD(v55) = 1073741826;
      v33 = operator new();
      ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v33, algn_1ED704220[24]);
      *(_QWORD *)&v56 = v33;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"Emergency", 9);
      *(_BYTE *)(v33 + 17) = 0;
      ImsResult::ImsResult((ImsResult *)a4, (const ImsResult *)&v53);
      goto LABEL_48;
    }
    v55 = 0;
    v56 = 0uLL;
    v58 = 0uLL;
    v57 = 0uLL;
    v53 = &off_1E78B7238;
    v54 = &_bambiDomain;
    if (v12)
      goto LABEL_47;
    v34 = *(unsigned __int8 *)(v11 + 1191);
    if ((v34 & 0x80u) == 0)
      v35 = *(unsigned __int8 *)(v11 + 1191);
    else
      v35 = *(_QWORD *)(v11 + 1176);
    if (v35 == 6)
    {
      if ((v34 & 0x80) == 0)
      {
        if (*(_BYTE *)(v11 + 1191))
        {
          v36 = 0;
          while (*(unsigned __int8 *)(v11 + v36 + 1168) == SipRequest::kMethodInvite[v36])
          {
            if (v34 == ++v36)
              goto LABEL_38;
          }
          if (!v11)
            goto LABEL_47;
          goto LABEL_40;
        }
LABEL_38:
        BambiCall::sendReinvite((ImsResult *)__p, *((_QWORD *)this + 48), &SipSession::kInviteTypeAccessNetworkRefresh);
        ImsResult::operator=((uint64_t)&v53, (uint64_t)__p);
        ImsResult::~ImsResult((ImsResult *)__p);
LABEL_44:
        if (((*(uint64_t (**)(uint64_t *, _QWORD))(*v54 + 24))(v54, v55) & 1) == 0)
          ims::AccessNetwork::operator=((uint64_t)this + 1568, (uint64_t)a2);
        ImsResult::ImsResult(a4, (uint64_t)&v53);
LABEL_48:
        ImsResult::~ImsResult((ImsResult *)&v53);
        if (!v10)
          return;
        goto LABEL_49;
      }
      if (!memcmp(*(const void **)(v11 + 1168), "INVITE", *(_QWORD *)(v11 + 1176)))
        goto LABEL_38;
    }
LABEL_40:
    if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)(v11 + 1168), "UPDATE"))
    {
      memset(v48, 0, sizeof(v48));
      std::string::basic_string[abi:ne180100]<0>(__p, "Access Network Refresh");
      SipReason::SipReason((unsigned __int8 *)v48, &SipReason::kProtocolSip, 200, (uint64_t)__p);
      if (v50 < 0)
        operator delete(__p[0]);
      v41 = (uint64_t *)*((_QWORD *)this + 48);
      SipReason::SipReason(v47, (const SipReason *)v48);
      SipSession::sendUpdateWithLocalSdpInAllForks(v41, &SipSession::kUpdateTypeAccessNetworkRefresh, (uint64_t)v47, (uint64_t)__p);
      ImsResult::operator=((uint64_t)&v53, (uint64_t)__p);
      ImsResult::~ImsResult((ImsResult *)__p);
      SipReason::~SipReason((SipReason *)v47);
      SipReason::~SipReason((SipReason *)v48);
      goto LABEL_44;
    }
LABEL_47:
    v43 = *((_QWORD *)this + 9);
    v42 = (char *)this + 72;
    v44 = (*(uint64_t (**)(char *))(v43 + 64))(v42);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v42 + 16))(v42, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"not sending access network refresh: no refresh method configured", 64);
    *(_BYTE *)(v44 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v44 + 17) = 0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_48;
  }
  if (*(_BYTE *)(v11 + 1192))
  {
    v12 = 0;
    goto LABEL_18;
  }
  v38 = *((_QWORD *)this + 9);
  v37 = (char *)this + 72;
  v39 = (*(uint64_t (**)(char *))(v38 + 64))(v37);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v37 + 16))(v37, v39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"handleAccessNetworkChange: call is not active", 45);
  *(_BYTE *)(v39 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v39 + 17) = 0;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v53 = &off_1E78B7238;
  v54 = &_bambiDomain;
  LODWORD(v55) = 1073741826;
  v40 = (const ImsResult *)ImsResult::operator<<<char [11]>((uint64_t)&v53, "Not active");
  ImsResult::ImsResult((ImsResult *)a4, v40);
  ImsResult::~ImsResult((ImsResult *)&v53);
LABEL_49:
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v46 = __ldaxr(p_shared_owners);
  while (__stlxr(v46 - 1, p_shared_owners));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1BEFA8E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  ImsResult::~ImsResult((ImsResult *)&__p);
  ImsResult::~ImsResult((ImsResult *)(v30 - 152));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 168);
  _Unwind_Resume(a1);
}

double BambiCall::prepareInvite@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void BambiCall::terminateMediaSession(RTPManager **this)
{
  uint64_t v2;
  RTPManager *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  void (**v12)(ImsResult *__hidden);
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void (**v18)(ImsResult *__hidden);
  uint64_t *v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v2 = BambiCall::bambiClient((BambiCall *)this);
  if (v2)
  {
    v3 = this[24];
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v12 = &off_1E78B7238;
    v13 = &_bambiDomain;
    v14 = 0;
    v4 = (_QWORD *)*((_QWORD *)v3 + 238);
    v5 = (_QWORD *)((char *)v3 + 1912);
    if (v4 != (_QWORD *)((char *)v3 + 1912))
    {
      v6 = v2;
      while (1)
      {
        v7 = (unint64_t *)v4[5];
        RTPManager::terminateSessionWithId(this[46], v7[4]);
        BambiClient::setMediaSessionIdForStream(v6, (BambiCallMediaStream *)v7, 0);
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v18 = &off_1E78B7238;
        v19 = &_bambiDomain;
        v20 = 0;
        ImsResult::operator=((uint64_t)&v12, (uint64_t)&v18);
        ImsResult::~ImsResult((ImsResult *)&v18);
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v18 = &off_1E78B7238;
        v19 = &_bambiDomain;
        v20 = 0;
        if (v13 != &_bambiDomain)
          break;
        v8 = v14;
        ImsResult::~ImsResult((ImsResult *)&v18);
        if (!v8)
        {
          v9 = (_QWORD *)v4[1];
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (_QWORD *)v4[2];
              v11 = *v10 == (_QWORD)v4;
              v4 = v10;
            }
            while (!v11);
          }
          v4 = v10;
          if (v10 != v5)
            continue;
        }
        goto LABEL_14;
      }
      ImsResult::~ImsResult((ImsResult *)&v18);
    }
LABEL_14:
    ImsResult::~ImsResult((ImsResult *)&v12);
  }
}

void sub_1BEFA90C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  ImsResult::~ImsResult((ImsResult *)&a18);
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

void BambiCall::handleTimer(std::__shared_weak_count **this, unsigned __int8 *a2)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  ImsResult *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string __p;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _BYTE v21[72];
  _BYTE v22[72];

  v2 = a2[23];
  v3 = *((_QWORD *)a2 + 1);
  if ((v2 & 0x80u) == 0)
    v4 = a2[23];
  else
    v4 = *((_QWORD *)a2 + 1);
  switch(v4)
  {
    case 13:
      if ((v2 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "AutoRingTimer", v3))
          return;
LABEL_30:
        BambiCall::ring((BambiCall *)this, (uint64_t)v22);
        v10 = (ImsResult *)v22;
        goto LABEL_42;
      }
      if (!a2[23])
        goto LABEL_30;
      v6 = "AutoRingTimer";
      while (*a2 == *(unsigned __int8 *)v6)
      {
        ++a2;
        ++v6;
        if (!--v2)
          goto LABEL_30;
      }
      return;
    case 16:
      if ((v2 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "EPSWatchdogTimer", v3))
          return;
      }
      else if (a2[23])
      {
        v7 = "EPSWatchdogTimer";
        do
        {
          if (*a2 != *(unsigned __int8 *)v7)
            return;
          ++a2;
          ++v7;
          --v2;
        }
        while (v2);
      }
      v19 = 0;
      v20 = 0;
      v11 = this[45];
      if (v11)
      {
        v12 = std::__shared_weak_count::lock(v11);
        v20 = v12;
        if (v12)
        {
          v13 = this[44];
          v19 = v13;
          goto LABEL_46;
        }
      }
      else
      {
        v12 = 0;
      }
      v13 = 0;
LABEL_46:
      if (!ims::AccessNetwork::isLTE((ims::AccessNetwork *)&v13[130].__shared_weak_owners_))
      {
        v15 = this[50];
        if (v15)
        {
          if (SHIBYTE(v13[173].__vftable) < 0)
            std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v13[172].__shared_owners_, v13[172].__shared_weak_owners_);
          else
            __p = *(std::string *)((char *)v13 + 4136);
          ((void (*)(std::__shared_weak_count *, std::string *))v15->__vftable[6].__on_zero_shared)(v15, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      return;
    case 18:
      if ((v2 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "RTTNegotiatedTimer", v3))
          return;
      }
      else if (a2[23])
      {
        v8 = "RTTNegotiatedTimer";
        do
        {
          if (*a2 != *(unsigned __int8 *)v8)
            return;
          ++a2;
          ++v8;
          --v2;
        }
        while (v2);
      }
      if (*((_BYTE *)this + 745))
      {
        v14 = this[24];
        if (!LOBYTE(v14[55].__shared_owners_)
          || (((uint64_t (*)(std::__shared_weak_count *))v14[43].__get_deleter)(&v14[43]) & 1) == 0)
        {
          BambiCall::textSessionDeactivated((BambiCall *)this);
        }
      }
      return;
    case 22:
      if ((v2 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "MediaTimeoutDeferTimer", v3))
          return;
      }
      else if (a2[23])
      {
        v9 = "MediaTimeoutDeferTimer";
        do
        {
          if (*a2 != *(unsigned __int8 *)v9)
            return;
          ++a2;
          ++v9;
          --v2;
        }
        while (v2);
      }
      BambiCall::endWithReason((BambiCall *)this, (uint64_t)(this + 208), (uint64_t)v21);
      v10 = (ImsResult *)v21;
LABEL_42:
      ImsResult::~ImsResult(v10);
      return;
    default:
      return;
  }
}

void sub_1BEFA93AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void BambiCall::sipSessionState(BambiCall *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *((_QWORD *)this + 48);
  if (v3)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 656) + 24))(v3 + 656);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 656) + 16))(v3 + 656, v4);
    if (*(char *)(v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
    }
    else
    {
      v6 = *(_OWORD *)v5;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "UnknownState");
  }
}

void BambiCall::handleAudioStreamTokens(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  dispatch_time_t v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  const void *v15;
  _QWORD block[6];
  std::__shared_weak_count *v17;
  _QWORD v18[2];

  if (*(_BYTE *)(a1 + 1488) || *(_BYTE *)(a1 + 1489))
  {
    v4 = *(_QWORD *)(a1 + 400);
    if (v4)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 224))(v4, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v5 = a1 + 72;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(a1 + 72, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Audio stream tokens detected, but call is still hidden. Delaying notification", 77);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    v8 = *(_QWORD *)(a1 + 176);
    v7 = *(std::__shared_weak_count **)(a1 + 184);
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
    }
    v11 = dispatch_time(0, 500);
    v12 = sImsDispatchQueue;
    if (!sImsDispatchQueue)
    {
      v12 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v12;
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN9BambiCall23handleAudioStreamTokensEN3ims7CFArrayE_block_invoke;
    block[3] = &__block_descriptor_tmp_196;
    block[4] = a1;
    block[5] = v8;
    v17 = v7;
    if (v7)
    {
      v13 = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = *(const void **)(a2 + 8);
    v18[1] = v15;
    if (v15)
      CFRetain(v15);
    v18[0] = &off_1E78EAC08;
    dispatch_after(v11, v12, block);
    ims::CFType::~CFType((ims::CFType *)v18);
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
    if (v7)
      std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1BEFA9648(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
  {
    std::__shared_weak_count::__release_weak(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9BambiCall23handleAudioStreamTokensEN3ims7CFArrayE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  const void *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = (const void *)a1[8];
        v9[0] = off_1E78EAB00;
        v9[1] = v6;
        if (v6)
          CFRetain(v6);
        v9[0] = &off_1E78EAC08;
        BambiCall::handleAudioStreamTokens(v3, v9);
        ims::CFType::~CFType((ims::CFType *)v9);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEFA9724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE56c18_ZTSN3ims7CFArrayE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  CFTypeRef result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (CFTypeRef)a2[8];
  a1[7] = off_1E78EAB00;
  a1[8] = result;
  if (result)
    result = CFRetain(result);
  a1[7] = &off_1E78EAC08;
  return result;
}

void sub_1BEFA97A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE56c18_ZTSN3ims7CFArrayE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  ims::CFType::~CFType((ims::CFType *)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void BambiCall::handleTextStreamToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  dispatch_time_t v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  _QWORD block[6];
  std::__shared_weak_count *v17;
  _QWORD v18[2];

  if ((*(_BYTE *)(a1 + 1488) || *(_BYTE *)(a1 + 1489)) && !*(_BYTE *)(a1 + 1801))
  {
    v15 = *(_QWORD *)(a1 + 400);
    if (v15)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 232))(v15, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v4 = a1 + 72;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(a1 + 72, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Text stream token detected, but call is still hidden. Delaying notification", 75);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    v7 = *(_QWORD *)(a1 + 176);
    v6 = *(std::__shared_weak_count **)(a1 + 184);
    if (v6)
    {
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
    }
    v10 = dispatch_time(0, 500);
    v11 = sImsDispatchQueue;
    if (!sImsDispatchQueue)
    {
      v11 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v11;
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN9BambiCall21handleTextStreamTokenEN3ims8CFNumberE_block_invoke;
    block[3] = &__block_descriptor_tmp_199;
    block[4] = a1;
    block[5] = v7;
    v17 = v6;
    if (v6)
    {
      v12 = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = *(const void **)(a2 + 8);
    v18[1] = v14;
    if (v14)
      CFRetain(v14);
    v18[0] = &off_1E78EABB0;
    dispatch_after(v10, v11, block);
    ims::CFType::~CFType((ims::CFType *)v18);
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1BEFA99D4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
  {
    std::__shared_weak_count::__release_weak(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9BambiCall21handleTextStreamTokenEN3ims8CFNumberE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  const void *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = (const void *)a1[8];
        v9[0] = off_1E78EAB00;
        v9[1] = v6;
        if (v6)
          CFRetain(v6);
        v9[0] = &off_1E78EABB0;
        BambiCall::handleTextStreamToken(v3, v9);
        ims::CFType::~CFType((ims::CFType *)v9);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEFA9AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE56c19_ZTSN3ims8CFNumberE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  CFTypeRef result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (CFTypeRef)a2[8];
  a1[7] = off_1E78EAB00;
  a1[8] = result;
  if (result)
    result = CFRetain(result);
  a1[7] = &off_1E78EABB0;
  return result;
}

void sub_1BEFA9B34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE56c19_ZTSN3ims8CFNumberE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  ims::CFType::~CFType((ims::CFType *)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void BambiCall::setRelayMode(BambiCall *this, int a2)
{
  char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  RTPManager *v17;

  v4 = (char *)this + 72;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"setRelayMode to ", 16);
  *(_BYTE *)(v5 + 17) = 0;
  if (a2)
    v6 = "Enable";
  else
    v6 = "Disable";
  if (a2)
    v7 = 6;
  else
    v7 = 7;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)v6, v7);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  v4[674] = a2;
  v8 = *((_QWORD *)v4 + 15);
  v9 = *(_QWORD *)(v8 + 1912);
  if (!v9)
    goto LABEL_20;
  v10 = v8 + 1912;
  v11 = v8 + 1912;
  do
  {
    v12 = *(_DWORD *)(v9 + 32);
    v13 = v12 < 2;
    if (v12 >= 2)
      v14 = (uint64_t *)v9;
    else
      v14 = (uint64_t *)(v9 + 8);
    if (!v13)
      v11 = v9;
    v9 = *v14;
  }
  while (*v14);
  if (v11 != v10 && *(int *)(v11 + 32) <= 2 && (v15 = *(_QWORD *)(v11 + 40)) != 0)
  {
    RTPManager::setRelayMode(*((RTPManager **)this + 46), *(_QWORD *)(v15 + 32), a2);
    if (!a2)
      return;
  }
  else
  {
LABEL_20:
    v16 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 56))(v4);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"No audio stream for relay", 25);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (!a2)
      return;
  }
  v17 = (RTPManager *)*((_QWORD *)this + 46);
  if (v17)
    RTPManager::handleAudioReadyEvent(v17);
}

void BambiCall::setScreeningMode(BambiCall *this, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  RTPManager *v17;

  v4 = (_QWORD *)((char *)this + 72);
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"setScreeningMode to ", 20);
  *(_BYTE *)(v5 + 17) = 0;
  if ((_DWORD)a2)
    v6 = "Enable";
  else
    v6 = "Disable";
  if ((_DWORD)a2)
    v7 = 6;
  else
    v7 = 7;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)v6, v7);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  v8 = v4[15];
  v9 = *(_QWORD *)(v8 + 1912);
  if (!v9)
    goto LABEL_20;
  v10 = v8 + 1912;
  v11 = v8 + 1912;
  do
  {
    v12 = *(_DWORD *)(v9 + 32);
    v13 = v12 < 2;
    if (v12 >= 2)
      v14 = (uint64_t *)v9;
    else
      v14 = (uint64_t *)(v9 + 8);
    if (!v13)
      v11 = v9;
    v9 = *v14;
  }
  while (*v14);
  if (v11 != v10 && *(int *)(v11 + 32) <= 2 && (v15 = *(_QWORD *)(v11 + 40)) != 0)
  {
    RTPManager::setScreeningMode(*((RTPManager **)this + 46), *(_QWORD *)(v15 + 32), a2);
    if (!(_DWORD)a2)
      return;
  }
  else
  {
LABEL_20:
    v16 = (*(uint64_t (**)(_QWORD *))(*v4 + 56))(v4);
    (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"No audio stream for screening", 29);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (!(_DWORD)a2)
      return;
  }
  v17 = (RTPManager *)*((_QWORD *)this + 46);
  if (v17)
    RTPManager::handleAudioReadyEvent(v17);
}

void BambiCall::handleEmptyInvite(BambiCall *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  void (**v20)(ImsResult *__hidden);
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void (**v26)(ImsResult *__hidden);
  uint64_t *v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  std::__shared_weak_count *v33;
  char v34;

  v1 = *((_QWORD *)this + 24);
  if (v1)
  {
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v20 = &off_1E78B7238;
    v21 = &_bambiDomain;
    v22 = 0;
    v2 = *(_QWORD **)(v1 + 1904);
    v3 = (_QWORD *)(v1 + 1912);
    if (v2 != (_QWORD *)(v1 + 1912))
    {
      v5 = (char *)this + 72;
      while (1)
      {
        v6 = v2[5];
        if (*(_WORD *)(v6 + 56))
        {
          if ((*((_DWORD *)this + 110) & 0xFFFFFFFE) == 2)
          {
            BambiCall::setMediaDirection((uint64_t)this, v2[5], 1, 1);
          }
          else
          {
            BambiCall::setMediaDirection((uint64_t)this, v2[5], 1, 0);
            v8 = *((_QWORD *)this + 46);
            v9 = *(_QWORD *)(v6 + 32);
            v10 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
            v32 = (void *)*((_QWORD *)this + 24);
            v33 = v10;
            if (v10)
            {
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                v12 = __ldxr(p_shared_owners);
              while (__stxr(v12 + 1, p_shared_owners));
            }
            RTPManager::updateSdpForSession(v8, v9, (uint64_t *)&v32, *((_DWORD *)this + 111));
            v13 = v33;
            if (v33)
            {
              v14 = (unint64_t *)&v33->__shared_owners_;
              do
                v15 = __ldaxr(v14);
              while (__stlxr(v15 - 1, v14));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
            RTPManager::activateSessionWithId(*((_QWORD *)this + 46), *(uint64_t **)(v6 + 32), *((_DWORD *)this + 111), 1);
          }
        }
        else
        {
          v7 = (*(uint64_t (**)(char *))(*(_QWORD *)v5 + 64))(v5);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))(v5, v7);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleEmptyInvite: Ignoring disabled media type ", 48);
          *(_BYTE *)(v7 + 17) = 0;
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 32))(v7, &v32);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v7 + 17) = 0;
          if (v34 < 0)
            operator delete(v32);
        }
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v26 = &off_1E78B7238;
        v27 = &_bambiDomain;
        v28 = 0;
        ImsResult::operator=((uint64_t)&v20, (uint64_t)&v26);
        ImsResult::~ImsResult((ImsResult *)&v26);
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v26 = &off_1E78B7238;
        v27 = &_bambiDomain;
        v28 = 0;
        if (v21 != &_bambiDomain)
          break;
        v16 = v22;
        ImsResult::~ImsResult((ImsResult *)&v26);
        if (!v16)
        {
          v17 = (_QWORD *)v2[1];
          if (v17)
          {
            do
            {
              v18 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (_QWORD *)v2[2];
              v19 = *v18 == (_QWORD)v2;
              v2 = v18;
            }
            while (!v19);
          }
          v2 = v18;
          if (v18 != v3)
            continue;
        }
        goto LABEL_28;
      }
      ImsResult::~ImsResult((ImsResult *)&v26);
    }
LABEL_28:
    ImsResult::~ImsResult((ImsResult *)&v20);
  }
}

void sub_1BEFAA144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v20 = *(std::__shared_weak_count **)(v18 - 104);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

void BambiCall::spamInfo(BambiCall *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::string *v3;
  __int128 *v4;
  __int128 v5;

  v2 = *((_QWORD *)this + 48);
  if (v2)
  {
    *(_QWORD *)a2 = *(_QWORD *)(v2 + 1616);
    v3 = (std::string *)(a2 + 8);
    if (*(char *)(v2 + 1647) < 0)
    {
      std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(v2 + 1624), *(_QWORD *)(v2 + 1632));
    }
    else
    {
      v4 = (__int128 *)(v2 + 1624);
      v5 = *v4;
      v3->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
      *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v5;
    }
  }
  else
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

void BambiCall::remoteCompanyName(BambiCall *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;

  v2 = *((_QWORD *)this + 48);
  if (v2)
  {
    if (*(char *)(v2 + 1695) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 1672), *(_QWORD *)(v2 + 1680));
    }
    else
    {
      v3 = (__int128 *)(v2 + 1672);
      v4 = *v3;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_33_3);
  }
}

void BambiCall::remoteImageUrl(BambiCall *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;

  v2 = *((_QWORD *)this + 48);
  if (v2)
  {
    if (*(char *)(v2 + 1671) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 1648), *(_QWORD *)(v2 + 1656));
    }
    else
    {
      v3 = (__int128 *)(v2 + 1648);
      v4 = *v3;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_33_3);
  }
}

void BambiCall::startEPSWatchdogTimer(BambiCall *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  SipStack *v5;
  ImsPrefs *v6;
  void **EPSFallbackTimerSecondsKey;
  void *v8;
  int v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = (SipStack *)*((_QWORD *)this + 44);
      if (!v5)
      {
LABEL_22:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (ImsPrefs *)SipStack::prefs(v5);
      EPSFallbackTimerSecondsKey = (void **)ImsPrefs::getEPSFallbackTimerSecondsKey(v6);
      v8 = ImsPrefs::prefWithKey(v6, EPSFallbackTimerSecondsKey);
      if (v8)
        v9 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 56))(v8);
      else
        v9 = *((_DWORD *)EPSFallbackTimerSecondsKey + 15);
      v11 = *((_QWORD *)this + 22);
      v10 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
      if (v10)
      {
        p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 27, "EPSWatchdogTimer"))
      {
        if (v10)
        {
          v15 = (unint64_t *)&v10->__shared_weak_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v17 = operator new(0x20uLL);
        *v17 = &off_1E78CC208;
        v17[1] = this;
        v17[2] = v11;
        v17[3] = v10;
        v23 = v17;
        SipTimerContainer::startTimer((_QWORD *)this + 26, (uint64_t)"EPSWatchdogTimer", (uint64_t)v22, 1000 * v9, 0);
        v18 = v23;
        if (v23 == v22)
        {
          v19 = 4;
          v18 = v22;
        }
        else
        {
          if (!v23)
            goto LABEL_20;
          v19 = 5;
        }
        (*(void (**)(void))(*v18 + 8 * v19))();
      }
LABEL_20:
      if (v10)
      {
        std::__shared_weak_count::__release_weak(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      goto LABEL_22;
    }
  }
}

void sub_1BEFAA468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::__shared_weak_count *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::isConferenceCall(BambiCall *this)
{
  return 0;
}

BOOL BambiCall::isParticipant(BambiCall *this)
{
  return *((_QWORD *)this + 184) != 0;
}

uint64_t BambiCall::isUnlistedEmergency(BambiCall *this)
{
  return 0;
}

_QWORD *std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CC088;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CC088;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CC088;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CC088;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEFAA6E4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0,std::allocator<BambiCall::handleRttInSDP(std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::__shared_ptr_emplace<SDPSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CC2D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SDPSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CC2D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<SDPSession>::__on_zero_shared(uint64_t a1)
{
  SDPSession::~SDPSession((SDPSession *)(a1 + 24));
}

_QWORD *std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CC108;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CC108;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CC108;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CC108;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEFAA998(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiCall::processCallEvent(BambiCallEvent *)::$_0,std::allocator<BambiCall::processCallEvent(BambiCallEvent *)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CC188;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CC188;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CC188;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CC188;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEFAAC00(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiCall::suspendWithMediaError(std::string const&)::$_0,std::allocator<BambiCall::suspendWithMediaError(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

_QWORD *std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CC208;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CC208;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CC208;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CC208;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEFAAE68(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<BambiCall::startEPSWatchdogTimer(void)::$_0,std::allocator<BambiCall::startEPSWatchdogTimer(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void LazuliMessageEncodingMap::LazuliMessageEncodingMap(LazuliMessageEncodingMap *this)
{
  const std::string *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  const std::string *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const std::string *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char v62;
  __int128 v63;
  __int128 v64;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v2 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v61, "");
  LazuliMessageIdHeader::create(v2, (std::string **)&v63);
  v64 = v63;
  v63 = 0uLL;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, (uint64_t *)&v64);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v62 < 0)
    operator delete((void *)v61);
  v9 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v61, "");
  LazuliSuccessReportHeader::create(v9, (std::string **)&v63);
  v60 = v63;
  v63 = 0uLL;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, (uint64_t *)&v60);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v62 < 0)
    operator delete((void *)v61);
  v16 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v61, "");
  LazuliFailureReportHeader::create(v16, (std::string **)&v63);
  v59 = v63;
  v63 = 0uLL;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, (uint64_t *)&v59);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v62 < 0)
    operator delete((void *)v61);
  LazuliByteRangeHeader::create((std::__shared_weak_count **)&v61);
  v58 = v61;
  v61 = 0uLL;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, (uint64_t *)&v58);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = std::string::basic_string[abi:ne180100]<0>(&v61, "");
  LazuliContentTypeHeader::create((uint64_t)v29, (std::__shared_weak_count **)&v63);
  v57 = v63;
  v63 = 0uLL;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, (uint64_t *)&v57);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v62 < 0)
    operator delete((void *)v61);
  LazuliStatusHeader::create(0, (std::__shared_weak_count **)&v61);
  v56 = v61;
  v61 = 0uLL;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, (uint64_t *)&v56);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  LazuliToPathHeader::create((std::__shared_weak_count **)&v61);
  v55 = v61;
  v61 = 0uLL;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, (uint64_t *)&v55);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  LazuliFromPathHeader::create((std::__shared_weak_count **)&v61);
  v54 = v61;
  v61 = 0uLL;
  LazuliMessageEncodingMap::addHeaderPrototype((uint64_t)this, (uint64_t *)&v54);
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_1BEFAB43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v11 - 96);
  *(_QWORD *)(v11 - 96) = v10;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 96));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v9);
  _Unwind_Resume(a1);
}

void LazuliMessageEncodingMap::addHeaderPrototype(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  std::string __p;
  std::string *p_p;

  memset(&__p, 0, sizeof(__p));
  v4 = *a2;
  if (*(char *)(*a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 24), *(_QWORD *)(v4 + 32));
  else
    __p = *(std::string *)(v4 + 24);
  ims::lowerCase((char *)&__p);
  ims::chomp(&__p, "\r\n\t ", 3);
  p_p = &__p;
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)v5 + 5, a2);
  std::vector<std::shared_ptr<LazuliHeader>>::push_back[abi:ne180100]((char **)(a1 + 40), (__int128 *)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEFAB628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void LazuliMessageEncodingMap::createHeader(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  std::__shared_weak_count *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p[2];
  char v17;
  void *v18;
  std::__shared_weak_count *v19;
  char v20;
  void *v21;
  std::__shared_weak_count *v22;
  std::string __str;

  memset(&__str, 0, sizeof(__str));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __str = *(std::string *)a2;
  ims::lowerCase((char *)&__str);
  ims::chomp(&__str, "\r\n\t ", 3);
  v21 = 0;
  v22 = 0;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(a1, (unsigned __int8 *)&__str);
  if (v8)
  {
    (*(void (**)(void **__return_ptr))(**((_QWORD **)v8 + 5) + 72))(&v18);
    v10 = v18;
    v9 = v19;
    v21 = v18;
    v22 = v19;
    v11 = *(_QWORD *)(a3 + 8);
    if (*(char *)(a3 + 23) >= 0)
      v11 = *(unsigned __int8 *)(a3 + 23);
    if (v11 && ((*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v18 + 56))(v18, a3) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v18, "laz.decode");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v13 = ImsLogger::error(ims::_logger, (uint64_t)&v18, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Unable to decode header: ", 25);
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, a3);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      if (v17 < 0)
        operator delete(__p[0]);
      if (v20 < 0)
        operator delete(v18);
      *a4 = 0;
      a4[1] = 0;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      *a4 = v10;
      a4[1] = v9;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "laz.decode");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::error(ims::_logger, (uint64_t)&v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"header not found: ", 18);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (v17 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v18);
    *a4 = 0;
    a4[1] = 0;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BEFAB91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

SipHeader *SipAuthorizationHeader::SipAuthorizationHeader(SipHeader *a1, const SipHeader *a2)
{
  _QWORD *v4;
  uint64_t v5;

  SipHeader::SipHeader(a1, a2);
  *v4 = &off_1E78CC338;
  v5 = *((_QWORD *)a2 + 8);
  if (v5)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  *((_QWORD *)a1 + 8) = v5;
  return a1;
}

{
  uint64_t v3;

  SipHeader::SipHeader(a1, a2);
  *(_QWORD *)v3 = &off_1E78CC338;
  std::string::operator=((std::string *)(v3 + 8), &SipHeader::kHeaderAuthorization);
  *((_QWORD *)a1 + 8) = 0;
  return a1;
}

void sub_1BEFAB9D8(_Unwind_Exception *a1)
{
  void **v1;

  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

void sub_1BEFABA2C(_Unwind_Exception *a1)
{
  void **v1;

  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

void SipAuthorizationHeader::~SipAuthorizationHeader(SipAuthorizationHeader *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78CC338;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78CC338;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

BOOL SipAuthorizationHeader::encodeValue(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
    (*(void (**)(_QWORD))(*(_QWORD *)v1 + 72))(*(_QWORD *)(a1 + 64));
  return v1 != 0;
}

BOOL SipAuthorizationHeader::setValueFromString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = SipAuthScheme::createFromString(a2);
  if (v3)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  *(_QWORD *)(a1 + 64) = v3;
  return v3 != 0;
}

SipHeader *SipAuthorizationHeader::clone(SipAuthorizationHeader *this)
{
  SipHeader *v2;

  v2 = (SipHeader *)operator new();
  SipAuthorizationHeader::SipAuthorizationHeader(v2, this);
  return v2;
}

void sub_1BEFABB90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40ADE1DEA6);
  _Unwind_Resume(a1);
}

uint64_t ImsBlock::ImsBlock(uint64_t a1, __int128 *a2, void *aBlock)
{
  __int128 v5;

  *(_QWORD *)a1 = &off_1E78CC3E8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)(a1 + 32) = _Block_copy(aBlock);
  return a1;
}

void sub_1BEFABC28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ImsBlock::~ImsBlock(ImsBlock *this)
{
  *(_QWORD *)this = &off_1E78CC3E8;
  _Block_release(*((const void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  ImsBlock::~ImsBlock(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t ImsCapturableBlock<std::shared_ptr<SipLockable>>::ImsCapturableBlock(uint64_t a1, __int128 *a2, uint64_t *a3, void *aBlock)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v6 = (_QWORD *)ImsBlock::ImsBlock(a1, a2, aBlock);
  *v6 = &off_1E78CC4C0;
  v7 = *a3;
  v8 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6[5] = v7;
  v6[6] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void ImsDestructableBlock::~ImsDestructableBlock(ImsDestructableBlock *this)
{
  *(_QWORD *)this = &off_1E78CC420;
  if (*((_BYTE *)this + 56))
    (*(void (**)(void))(*((_QWORD *)this + 8) + 16))();
  _Block_release(*((const void **)this + 8));
  *(_QWORD *)this = &off_1E78CC4C0;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  ImsBlock::~ImsBlock(this);
}

{
  ImsDestructableBlock::~ImsDestructableBlock(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t ImsDestructableBlock::perform(ImsDestructableBlock *this)
{
  *((_BYTE *)this + 56) = 0;
  return (*(uint64_t (**)(void))(*((_QWORD *)this + 4) + 16))();
}

void ImsBlockQueue::~ImsBlockQueue(ImsBlockQueue *this)
{
  *(_QWORD *)this = &off_1E78CC4A0;
  ImsBlockQueue::flush(this);
  std::__list_imp<unsigned long long>::clear((_QWORD *)this + 9);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

{
  ImsBlockQueue::~ImsBlockQueue(this);
  JUMPOUT(0x1C3B87100);
}

_QWORD *ImsBlockQueue::flush(ImsBlockQueue *this)
{
  uint64_t *i;
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13[2];
  char v14;

  v10 = (uint64_t)&v10;
  v11 = &v10;
  v12 = 0;
  v8[0] = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 8), (pthread_mutex_t **)v8, (uint64_t)v13);
  ImsResult::~ImsResult((ImsResult *)v13);
  if (&v10 != (uint64_t *)((char *)this + 72))
    std::list<ImsBlock *>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<ImsBlock *,void *>,std::__list_const_iterator<ImsBlock *,void *>>(&v10, *((_QWORD *)this + 10), (uint64_t)this + 72);
  std::__list_imp<unsigned long long>::clear((_QWORD *)this + 9);
  ImsLock::~ImsLock((pthread_mutex_t **)v8);
  for (i = v11; i != &v10; i = (uint64_t *)i[1])
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "util");
    std::string::basic_string[abi:ne180100]<0>(v8, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"flushing unexecuted block ", 26);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)i[2] + 24))(__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (v7 < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(v8[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    v4 = i[2];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  cleanOldPrefs();
  return std::__list_imp<unsigned long long>::clear(&v10);
}

void sub_1BEFAC010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  ImsLock::~ImsLock((pthread_mutex_t **)&__p);
  std::__list_imp<unsigned long long>::clear(&a21);
  _Unwind_Resume(a1);
}

void cleanOldPrefs(void)
{
  uint64_t v0;
  IMSClientManager *v1;
  IMSClientManager *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  SipStack **v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  __int128 v18;
  int64x2_t v19;
  char *v20;
  SipStack **v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  __int128 v25;
  std::string v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *__p[2];
  char *v30;
  void **v31;
  int64x2_t v32;
  char *v33;
  void **v34;

  std::string::basic_string[abi:ne180100]<0>(&v31, "audit");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v0 = ImsLogger::spam(ims::_logger, (uint64_t)&v31, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v0 + 8), (uint64_t)"Cleaning up old prefs", 21);
  *(_BYTE *)(v0 + 17) = 0;
  v1 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v0 + 64))(v0, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v0 + 17) = 0;
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  if (v32.i8[15] < 0)
    operator delete(v31);
  v27 = 0;
  v28 = 0;
  v2 = IMSClientManager::instance(v1);
  IPTelephonyManager::getInstance(&v27, v2);
  if (v27)
  {
    v3 = *(_QWORD *)(v27 + 168);
    if (v3)
    {
      __p[0] = 0;
      __p[1] = 0;
      v30 = 0;
      BambiClient::sipStacks((BambiClient *)v3, (uint64_t)__p);
      v4 = *(_OWORD *)(v3 + 168);
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v4;
      if (*((_QWORD *)&v4 + 1))
      {
        v5 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      v7 = __p[1];
      if (__p[1] >= v30)
      {
        v25 = v4;
        v9 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        if ((unint64_t)(v9 + 1) >> 60)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        v10 = (v30 - (char *)__p[0]) >> 3;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((unint64_t)(v30 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF0)
          v11 = 0xFFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        v34 = (void **)&v30;
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)&v30, v11);
        v14 = &v12[16 * v9];
        *(_OWORD *)v14 = v25;
        v16 = __p[0];
        v15 = __p[1];
        if (__p[1] == __p[0])
        {
          v19 = vdupq_n_s64((unint64_t)__p[1]);
          v17 = &v12[16 * v9];
        }
        else
        {
          v17 = &v12[16 * v9];
          do
          {
            v18 = *((_OWORD *)v15 - 1);
            v15 -= 2;
            *((_OWORD *)v17 - 1) = v18;
            v17 -= 16;
            *v15 = 0;
            v15[1] = 0;
          }
          while (v15 != v16);
          v19 = *(int64x2_t *)__p;
        }
        v8 = (SipStack **)(v14 + 16);
        __p[0] = v17;
        __p[1] = v14 + 16;
        v32 = v19;
        v20 = v30;
        v30 = &v12[16 * v13];
        v33 = v20;
        v31 = (void **)v19.i64[0];
        std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        *(_QWORD *)__p[1] = v4;
        v7[1] = *((_QWORD *)&v4 + 1);
        v8 = (SipStack **)(v7 + 2);
      }
      __p[1] = v8;
      v21 = (SipStack **)__p[0];
      v32 = 0uLL;
      v31 = (void **)&v32;
      while (v21 != v8)
      {
        SipStack::carrierIdentifier(*v21, &v26);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v31, (void **)&v26.__r_.__value_.__l.__data_, (uint64_t)&v26);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        v21 += 2;
      }
      BambiPrefsManager::sanitize((void **)&v31);
      std::__tree<std::string>::destroy((uint64_t)&v31, (char *)v32.i64[0]);
      v31 = __p;
      std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v31);
    }
  }
  v22 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1BEFAC32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **p_p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::__tree<std::string>::destroy(v25 - 56, *(char **)(v25 - 48));
  p_p = &__p;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void ImsBlockQueue::addBlock(uint64_t a1, __int128 *a2, uint64_t a3, void *a4, const void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  void *__p[2];
  char v29;
  pthread_mutex_t *v30;
  void *v31;
  std::__shared_weak_count *v32;
  char v33;

  v30 = 0;
  ImsLock::set((pthread_mutex_t *)(a1 + 8), &v30, (uint64_t)&v31);
  ImsResult::~ImsResult((ImsResult *)&v31);
  std::string::basic_string[abi:ne180100]<0>(&v31, "util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)&v31, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"queuing destructable block ", 27);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v10 + 40))(v10, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" (", 2);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" block(s) already on queue)", 27);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v29 < 0)
    operator delete(__p[0]);
  if (v33 < 0)
    operator delete(v31);
  v11 = operator new();
  v12 = v11;
  v13 = *(void **)a3;
  v14 = *(std::__shared_weak_count **)(a3 + 8);
  v26[5] = *(_QWORD *)a3;
  v27 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v31 = v13;
    v32 = v14;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  else
  {
    v31 = v13;
    v32 = 0;
  }
  ImsCapturableBlock<std::shared_ptr<SipLockable>>::ImsCapturableBlock(v11, a2, (uint64_t *)&v31, a4);
  v18 = v32;
  if (v32)
  {
    v19 = (unint64_t *)&v32->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_QWORD *)v12 = &off_1E78CC420;
  *(_BYTE *)(v12 + 56) = 1;
  *(_QWORD *)(v12 + 64) = _Block_copy(a5);
  v21 = operator new(0x18uLL);
  v21[1] = a1 + 72;
  v21[2] = v12;
  v22 = *(_QWORD *)(a1 + 72);
  *v21 = v22;
  *(_QWORD *)(v22 + 8) = v21;
  *(_QWORD *)(a1 + 72) = v21;
  ++*(_QWORD *)(a1 + 88);
  if (v27)
  {
    v23 = &v27->__shared_owners_;
    do
      v24 = __ldaxr((unint64_t *)v23);
    while (__stlxr(v24 - 1, (unint64_t *)v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v25 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    v25 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v25;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 0x40000000;
  v26[2] = ___ZN13ImsBlockQueue8addBlockERK14LoggableStringNSt3__110shared_ptrI11SipLockableEEU13block_pointerFvvES8__block_invoke;
  v26[3] = &__block_descriptor_tmp_17;
  v26[4] = a1;
  dispatch_async(v25, v26);
  ImsLock::~ImsLock(&v30);
}

void sub_1BEFAC69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,pthread_mutex_t *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  ImsLock::~ImsLock(&a22);
  _Unwind_Resume(a1);
}

void ___ZN13ImsBlockQueue8addBlockERK14LoggableStringNSt3__110shared_ptrI11SipLockableEEU13block_pointerFvvES8__block_invoke(uint64_t a1)
{
  ImsBlockQueue::executeBlocks(*(ImsBlockQueue **)(a1 + 32));
}

void ImsBlockQueue::executeBlocks(ImsBlockQueue *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;

  v2 = (pthread_mutex_t *)((char *)this + 8);
  v13[0] = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 8), (pthread_mutex_t **)v13, (uint64_t)v15);
  ImsResult::~ImsResult((ImsResult *)v15);
  v3 = *((_QWORD *)this + 11);
  ImsLock::~ImsLock((pthread_mutex_t **)v13);
  if (v3)
  {
    while (1)
    {
      v13[0] = 0;
      ImsLock::set(v2, (pthread_mutex_t **)v13, (uint64_t)v15);
      ImsResult::~ImsResult((ImsResult *)v15);
      v4 = *((_QWORD *)this + 11);
      if (!v4)
        break;
      v5 = (uint64_t *)*((_QWORD *)this + 10);
      v6 = v5[2];
      v7 = *v5;
      *(_QWORD *)(v7 + 8) = v5[1];
      *(_QWORD *)v5[1] = v7;
      *((_QWORD *)this + 11) = v4 - 1;
      operator delete(v5);
      ImsLock::~ImsLock((pthread_mutex_t **)v13);
      if (v6)
      {
        std::string::basic_string[abi:ne180100]<0>(v15, "util");
        std::string::basic_string[abi:ne180100]<0>(v13, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v8 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"performing block ", 17);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v6 + 24))(__p, v6);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 40))(v8, __p);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
        if (v12 < 0)
          operator delete(__p[0]);
        if (v14 < 0)
          operator delete(v13[0]);
        if (v16 < 0)
          operator delete(v15[0]);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      if (!--v3)
        goto LABEL_14;
    }
    ImsLock::~ImsLock((pthread_mutex_t **)v13);
  }
LABEL_14:
  v13[0] = 0;
  ImsLock::set(v2, (pthread_mutex_t **)v13, (uint64_t)v15);
  ImsResult::~ImsResult((ImsResult *)v15);
  v9 = *((_QWORD *)this + 11);
  ImsLock::~ImsLock((pthread_mutex_t **)v13);
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "util");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"leaving ", 8);
    *(_BYTE *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" new blocks for later", 21);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v14 < 0)
      operator delete(v13[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
  else
  {
    cleanOldPrefs();
  }
}

void sub_1BEFACA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsBlock::loggableName(ImsBlock *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

uint64_t ImsBlock::perform(ImsBlock *this)
{
  return (*(uint64_t (**)(void))(*((_QWORD *)this + 4) + 16))();
}

void ImsCapturableBlock<std::shared_ptr<SipLockable>>::~ImsCapturableBlock(ImsBlock *a1)
{
  *(_QWORD *)a1 = &off_1E78CC4C0;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 40);
  ImsBlock::~ImsBlock(a1);
}

{
  *(_QWORD *)a1 = &off_1E78CC4C0;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 40);
  ImsBlock::~ImsBlock(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t ImsCapturableBlock<std::shared_ptr<SipLockable>>::perform(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t *std::list<ImsBlock *>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<ImsBlock *,void *>,std::__list_const_iterator<ImsBlock *,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;

  for (i = (uint64_t *)a1[1]; a2 != a3 && i != a1; i = (uint64_t *)i[1])
  {
    i[2] = *(_QWORD *)(a2 + 16);
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (i == a1)
    return std::list<ImsBlock *>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<ImsBlock *,void *>,std::__list_const_iterator<ImsBlock *,void *>>((uint64_t)a1, a1, a2, a3);
  else
    return std::list<std::pair<unsigned long long,long>>::erase((uint64_t)a1, i, a1);
}

uint64_t *std::list<ImsBlock *>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<ImsBlock *,void *>,std::__list_const_iterator<ImsBlock *,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = operator new(0x18uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = *(_QWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = v8;
      do
      {
        v8 = operator new(0x18uLL);
        *v8 = v12;
        v8[1] = 0;
        v8[2] = *(_QWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1BEFACC6C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1BEFACC8C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::string *SipClientInviteTransactionState::SipClientInviteTransactionState(std::string *a1, std::string::size_type *a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string::size_type v10;
  std::__shared_weak_count *v11;

  v3 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  SipTransactionState::SipTransactionState(a1, &v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78CC528;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E78CC5A8;
  return a1;
}

void sub_1BEFACD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipClientInviteTransactionState::sendAckForResponse(SipClientInviteTransactionState *this, const SipResponse *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  SipClientInviteTransaction *v8;
  SipClientInviteTransaction *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  size_t v16;
  size_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _BYTE v22[72];
  SipClientInviteTransaction *v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v26 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = (_QWORD *)*((_QWORD *)this + 26);
      v25 = v7;
      if (!v7)
        goto LABEL_15;
      if (v8)
      {
        v9 = v8;
        v23 = v8;
        v24 = v6;
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v12 = (char *)v8 + 168;
        v13 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v8 + 21) + 64))((uint64_t)v8 + 168);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))((uint64_t)v9 + 168, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"sending ACK from transaction", 28);
        *(_BYTE *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v13 + 17) = 0;
        SipClientInviteTransaction::sendAckForResponse(v9, a2, (uint64_t)v22);
        ImsResult::~ImsResult((ImsResult *)v22);
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v14 = (*(uint64_t (**)(_QWORD *))(v7[21] + 56))(v7 + 21);
        (*(void (**)(_QWORD *, uint64_t))(v7[21] + 16))(v7 + 21, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"How did a ", 10);
        *(_BYTE *)(v14 + 17) = 0;
        v15 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v16 = strlen(v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)v15, v16);
        *(_BYTE *)(v14 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" end up in a ", 13);
        *(_BYTE *)(v14 + 17) = 0;
        v17 = strlen((const char *)((unint64_t)"NSt3__110shared_ptrI14SipTransactionEE" & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (unint64_t)"NSt3__110shared_ptrI14SipTransactionEE" & 0x7FFFFFFFFFFFFFFFLL, v17);
        *(_BYTE *)(v14 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"?", 1);
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v6 = 0;
        *(_BYTE *)(v14 + 17) = 0;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v7 + 32))(v7, 4);
      if (v6)
      {
        v18 = (unint64_t *)&v6->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v6 = v26;
      if (v26)
      {
LABEL_15:
        v20 = (unint64_t *)&v6->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

void sub_1BEFACFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v11 - 64);
  _Unwind_Resume(a1);
}

uint64_t SipClientInviteCallingTransactionState::SipClientInviteCallingTransactionState(uint64_t a1, std::string::size_type *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::string::size_type v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (std::string::size_type)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SipClientInviteTransactionState::SipClientInviteTransactionState((std::string *)a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)a1 = &off_1E78CC5D8;
  *(_QWORD *)(a1 + 8) = &unk_1E78CC660;
  *(_DWORD *)(a1 + 224) = 1;
  return a1;
}

void sub_1BEFAD094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipClientInviteCallingTransactionState::enterState(SipClientInviteCallingTransactionState *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  SipTransaction *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _BYTE v25[24];
  _BYTE *v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 56) = 1;
  v3 = *((_QWORD *)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v8 = operator new(0x20uLL);
  *v8 = &off_1E78CC928;
  v8[1] = this;
  v8[2] = v3;
  v8[3] = v2;
  v28 = v8;
  SipTimerContainer::startSipTimer((_QWORD *)this + 3, (uint64_t)&SipTimers::kTimerB, (uint64_t)v27, 0);
  v9 = v28;
  if (v28 == v27)
  {
    v10 = 4;
    v9 = v27;
    goto LABEL_10;
  }
  if (v28)
  {
    v10 = 5;
LABEL_10:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v11)
    goto LABEL_28;
  v12 = std::__shared_weak_count::lock(v11);
  if (!v12)
    goto LABEL_28;
  v13 = v12;
  v14 = (SipTransaction *)*((_QWORD *)this + 26);
  if (v14)
  {
    if (SipTransaction::retryEnabled(v14))
    {
      if (v2)
      {
        v15 = (unint64_t *)&v2->__shared_weak_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = operator new(0x20uLL);
      *v17 = &off_1E78CC928;
      v17[1] = this;
      v17[2] = v3;
      v17[3] = v2;
      v26 = v17;
      SipTimerContainer::startSipTimer((_QWORD *)this + 3, (uint64_t)&SipTimers::kTimerA, (uint64_t)v25, *((_DWORD *)this + 56));
      v18 = v26;
      if (v26 == v25)
      {
        v19 = 4;
        v18 = v25;
        goto LABEL_23;
      }
      if (v26)
      {
        v19 = 5;
LABEL_23:
        (*(void (**)(void))(*v18 + 8 * v19))();
      }
    }
    else
    {
      v21 = *((_QWORD *)v14 + 21);
      v20 = (_QWORD *)((char *)v14 + 168);
      v22 = (*(uint64_t (**)(_QWORD *))(v21 + 64))(v20);
      (*(void (**)(_QWORD *, uint64_t))(*v20 + 16))(v20, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"retry is not enabled.  Not setting Timer A.", 43);
      *(_BYTE *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v22 + 17) = 0;
    }
  }
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_28:
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BEFAD30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::__shared_weak_count *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(a1);
}

void SipClientInviteCallingTransactionState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  SipTransaction *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD v22[11];
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v22[10] = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(SipTransaction **)(a1 + 208);
      v22[9] = v7;
      if (v7)
      {
        if (!operator==(a2, (uint64_t)&SipTimers::kTimerA))
        {
          if (operator==(a2, (uint64_t)&SipTimers::kTimerB))
            SipTransaction::handleTimeout(v7);
          goto LABEL_24;
        }
        if (SipTransaction::retryEnabled(v7))
        {
          (*(void (**)(_QWORD *__return_ptr, SipTransaction *))(*(_QWORD *)v7 + 128))(v22, v7);
          ImsResult::~ImsResult((ImsResult *)v22);
          v9 = *(_QWORD *)(a1 + 192);
          v8 = *(std::__shared_weak_count **)(a1 + 200);
          if (v8)
          {
            p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
            do
              v11 = __ldxr(p_shared_weak_owners);
            while (__stxr(v11 + 1, p_shared_weak_owners));
            do
              v12 = __ldxr(p_shared_weak_owners);
            while (__stxr(v12 + 1, p_shared_weak_owners));
            *(_DWORD *)(a1 + 224) *= 2;
            do
              v13 = __ldxr(p_shared_weak_owners);
            while (__stxr(v13 + 1, p_shared_weak_owners));
          }
          else
          {
            *(_DWORD *)(a1 + 224) *= 2;
          }
          v24 = 0;
          v17 = operator new(0x20uLL);
          *v17 = &off_1E78CC9A8;
          v17[1] = a1;
          v17[2] = v9;
          v17[3] = v8;
          v24 = v17;
          SipTimerContainer::startSipTimer((_QWORD *)(a1 + 24), (uint64_t)&SipTimers::kTimerA, (uint64_t)v23, *(_DWORD *)(a1 + 224));
          v18 = v24;
          if (v24 == v23)
          {
            v19 = 4;
            v18 = v23;
          }
          else
          {
            if (!v24)
              goto LABEL_22;
            v19 = 5;
          }
          (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_22:
          if (v8)
          {
            std::__shared_weak_count::__release_weak(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
          goto LABEL_24;
        }
        v15 = *((_QWORD *)v7 + 21);
        v14 = (_QWORD *)((char *)v7 + 168);
        v16 = (*(uint64_t (**)(_QWORD *))(v15 + 64))(v14);
        (*(void (**)(_QWORD *, uint64_t))(*v14 + 16))(v14, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"retry is no longer enabled. Not resending INVITE or resetting Timer A.", 70);
        *(_BYTE *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v16 + 17) = 0;
      }
LABEL_24:
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BEFAD604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::__shared_weak_count *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;

  v22 = *(_QWORD **)(v20 - 48);
  if (v22 == v19)
  {
    v23 = 4;
    v22 = (_QWORD *)(v20 - 72);
  }
  else
  {
    if (!v22)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_6:
  if (v18)
  {
    std::__shared_weak_count::__release_weak(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL SipClientInviteCallingTransactionState::handleResponse(SipClientInviteCallingTransactionState *this, const SipResponse *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _BOOL8 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *((_QWORD *)this + 26);
  v8 = v7 != 0;
  if (v7)
  {
    v9 = *((_DWORD *)a2 + 22);
    if (v9 / 0x64 == 1)
    {
      v10 = 3;
      goto LABEL_11;
    }
    if (v9 / 0x64 == 2)
    {
      v10 = 5;
LABEL_11:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, v10);
      goto LABEL_12;
    }
    if (v9 >= 0x12C)
    {
      SipClientInviteTransactionState::sendAckForResponse(this, a2);
      v10 = 4;
      goto LABEL_11;
    }
  }
LABEL_12:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v8;
}

void sub_1BEFAD770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipClientInviteCallingTransactionState::handleConnectionError(SipClientInviteCallingTransactionState *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    *((_DWORD *)this + 56) = 1;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  else
  {
    *((_DWORD *)this + 56) = 1;
  }
  v8 = operator new(0x20uLL);
  *v8 = &off_1E78CCA28;
  v8[1] = this;
  v8[2] = v3;
  v8[3] = v2;
  v12 = v8;
  SipTimerContainer::startSipTimer((_QWORD *)this + 3, (uint64_t)&SipTimers::kTimerA, (uint64_t)v11, *((_DWORD *)this + 56));
  v9 = v12;
  if (v12 == v11)
  {
    v10 = 4;
    v9 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_14;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_14:
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BEFAD8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  if (v13)
  {
    std::__shared_weak_count::__release_weak(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

std::string *SipClientInviteProceedingTransactionState::SipClientInviteProceedingTransactionState(std::string *a1, std::string::size_type *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::string::size_type v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (std::string::size_type)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SipClientInviteTransactionState::SipClientInviteTransactionState(a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78CC690;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E78CC718;
  return a1;
}

void sub_1BEFAD9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL SipClientInviteProceedingTransactionState::handleResponse(SipClientInviteProceedingTransactionState *this, const SipResponse *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  _BOOL8 v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (_QWORD *)*((_QWORD *)this + 26);
  v8 = v7 != 0;
  if (v7)
  {
    v9 = *((_DWORD *)a2 + 22);
    if (v9 / 0x64 != 1)
    {
      if (v9 / 0x64 == 2)
      {
        v10 = 5;
      }
      else
      {
        if (v9 < 0x12C)
        {
          v12 = v7[21];
          v11 = v7 + 21;
          v13 = (*(uint64_t (**)(_QWORD *))(v12 + 56))(v11);
          (*(void (**)(_QWORD *, uint64_t))(*v11 + 16))(v11, v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"What the heck is this?", 22);
          *(_BYTE *)(v13 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v13 + 17) = 0;
          v14 = (*(uint64_t (**)(_QWORD *))(*v11 + 56))(v11);
          (*(void (**)(_QWORD *, uint64_t))(*v11 + 16))(v11, v14);
          (*(void (**)(const SipResponse *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v14);
          goto LABEL_12;
        }
        SipClientInviteTransactionState::sendAckForResponse(this, a2);
        v10 = 4;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v7 + 32))(v7, v10);
    }
  }
LABEL_12:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v8;
}

void sub_1BEFADB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *SipClientInviteCompletedTransactionState::SipClientInviteCompletedTransactionState(std::string *a1, std::string::size_type *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::string::size_type v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (std::string::size_type)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SipClientInviteTransactionState::SipClientInviteTransactionState(a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78CC748;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E78CC7D0;
  return a1;
}

void sub_1BEFADBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipClientInviteCompletedTransactionState::enterState(SipClientInviteCompletedTransactionState *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  std::string __p;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  _BYTE *v38;
  _BYTE v39[24];
  _BYTE *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v36 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v2)
    goto LABEL_34;
  v36 = std::__shared_weak_count::lock(v2);
  if (!v36)
    goto LABEL_34;
  v3 = *((_QWORD *)this + 26);
  v35 = v3;
  if (!v3)
    goto LABEL_34;
  v5 = *((_QWORD *)this + 24);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = *(std::__shared_weak_count **)(v3 + 88);
  if (!v9)
  {
    v33 = 0;
    v34 = 0;
    goto LABEL_17;
  }
  v10 = *(_QWORD *)(v3 + 80);
  v11 = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  v33 = 0;
  v34 = std::__shared_weak_count::lock(v9);
  if (v34)
  {
    v33 = v10;
    std::__shared_weak_count::__release_weak(v9);
    if (v10 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10))
    {
      if (byte_1ED70CEC0[23] < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)byte_1ED70CEC0, *(std::string::size_type *)&byte_1ED70CEC0[8]);
      else
        __p = *(std::string *)byte_1ED70CEC0;
      if (v4)
      {
        v24 = (unint64_t *)&v4->__shared_weak_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v40 = 0;
      v26 = operator new(0x20uLL);
      *v26 = &off_1E78CCAA8;
      v26[1] = this;
      v26[2] = v5;
      v26[3] = v4;
      v40 = v26;
      SipTimerContainer::startTimer((_QWORD *)this + 3, (uint64_t)&__p, (uint64_t)v39, 0, 0);
      v30 = v40;
      if (v40 == v39)
      {
        v31 = 4;
        v30 = v39;
      }
      else
      {
        if (!v40)
          goto LABEL_49;
        v31 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v30 + 8 * v31))(v30, v27, v28, v29);
LABEL_49:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_27;
    }
LABEL_17:
    if (!v4)
      goto LABEL_22;
    goto LABEL_20;
  }
  std::__shared_weak_count::__release_weak(v9);
  if (!v4)
    goto LABEL_22;
LABEL_20:
  v13 = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
LABEL_22:
  v15 = operator new(0x20uLL);
  *v15 = &off_1E78CCAA8;
  v15[1] = this;
  v15[2] = v5;
  v15[3] = v4;
  v38 = v15;
  SipTimerContainer::startSipTimer((_QWORD *)this + 3, (uint64_t)&SipTimers::kTimerD, (uint64_t)v37, 0);
  v16 = v38;
  if (v38 == v37)
  {
    v17 = 4;
    v16 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_27;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_27:
  v18 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_34:
  v21 = v36;
  if (v36)
  {
    v22 = (unint64_t *)&v36->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BEFADF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::__shared_weak_count *v26;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void SipClientInviteCompletedTransactionState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (operator==(a2, (uint64_t)&SipTimers::kTimerD))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 216);
    if (v3)
    {
      v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        v5 = v4;
        v6 = *(_QWORD *)(a1 + 208);
        if (v6)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, 7);
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void sub_1BEFAE088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipClientInviteCompletedTransactionState::handleResponse(SipClientInviteCompletedTransactionState *this, const SipResponse *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (*((_DWORD *)a2 + 22) < 0x12Cu)
  {
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    if (v3)
    {
      v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        v5 = v4;
        v6 = *((_QWORD *)this + 26);
        if (v6)
        {
          v8 = *(_QWORD *)(v6 + 168);
          v7 = v6 + 168;
          v9 = (*(uint64_t (**)(uint64_t))(v8 + 64))(v7);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"ignoring non-error response", 27);
          *(_BYTE *)(v9 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v9 + 17) = 0;
        }
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
  else
  {
    SipClientInviteTransactionState::sendAckForResponse(this, a2);
  }
  return 0;
}

void sub_1BEFAE194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *SipClientInviteTerminationPendingTransactionState::SipClientInviteTerminationPendingTransactionState(std::string *a1, std::string::size_type *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::string::size_type v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (std::string::size_type)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SipClientInviteTransactionState::SipClientInviteTransactionState(a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78CC800;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E78CC880;
  return a1;
}

void sub_1BEFAE240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipClientInviteTerminationPendingTransactionState::handleResponse(std::__shared_weak_count **this, const SipResponse *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (*((_DWORD *)a2 + 22) >= 0x12Cu)
  {
    SipClientInviteTransactionState::sendAckForResponse((SipClientInviteTransactionState *)this, a2);
    return 0;
  }
  if ((unsigned __int16)*((_DWORD *)a2 + 22) - 200 >= 0x64)
  {
    v4 = this[27];
    if (v4)
    {
      v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        v6 = v5;
        v7 = this[26];
        if (v7)
        {
          v9 = v7[7].__vftable;
          v8 = v7 + 7;
          v10 = ((uint64_t (*)(std::__shared_weak_count *))v9[1].__get_deleter)(v8);
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"ignoring ", 9);
          *(_BYTE *)(v10 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v10 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" response", 9);
          *(_BYTE *)(v10 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v10 + 17) = 0;
        }
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    return 0;
  }
  return 1;
}

void sub_1BEFAE394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipClientInviteCallingTransactionState::~SipClientInviteCallingTransactionState(SipClientInviteCallingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipClientInviteCallingTransactionState::id(SipClientInviteCallingTransactionState *this)
{
  return 2;
}

void `non-virtual thunk to'SipClientInviteCallingTransactionState::~SipClientInviteCallingTransactionState(SipClientInviteCallingTransactionState *this)
{
  SipTransactionState::~SipTransactionState((SipClientInviteCallingTransactionState *)((char *)this - 8));
}

{
  SipTransactionState::~SipTransactionState((SipClientInviteCallingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipClientInviteProceedingTransactionState::~SipClientInviteProceedingTransactionState(SipClientInviteProceedingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipClientInviteProceedingTransactionState::id(SipClientInviteProceedingTransactionState *this)
{
  return 3;
}

void `non-virtual thunk to'SipClientInviteProceedingTransactionState::~SipClientInviteProceedingTransactionState(SipClientInviteProceedingTransactionState *this)
{
  SipTransactionState::~SipTransactionState((SipClientInviteProceedingTransactionState *)((char *)this - 8));
}

{
  SipTransactionState::~SipTransactionState((SipClientInviteProceedingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipClientInviteCompletedTransactionState::~SipClientInviteCompletedTransactionState(SipClientInviteCompletedTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipClientInviteCompletedTransactionState::id(SipClientInviteCompletedTransactionState *this)
{
  return 4;
}

void `non-virtual thunk to'SipClientInviteCompletedTransactionState::~SipClientInviteCompletedTransactionState(SipClientInviteCompletedTransactionState *this)
{
  SipTransactionState::~SipTransactionState((SipClientInviteCompletedTransactionState *)((char *)this - 8));
}

{
  SipTransactionState::~SipTransactionState((SipClientInviteCompletedTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipClientInviteTerminationPendingTransactionState::~SipClientInviteTerminationPendingTransactionState(SipClientInviteTerminationPendingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipClientInviteTerminationPendingTransactionState::id(SipClientInviteTerminationPendingTransactionState *this)
{
  return 5;
}

void `non-virtual thunk to'SipClientInviteTerminationPendingTransactionState::~SipClientInviteTerminationPendingTransactionState(SipClientInviteTerminationPendingTransactionState *this)
{
  SipTransactionState::~SipTransactionState((SipClientInviteTerminationPendingTransactionState *)((char *)this - 8));
}

{
  SipTransactionState::~SipTransactionState((SipClientInviteTerminationPendingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipClientInviteTransactionState::~SipClientInviteTransactionState(SipClientInviteTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipTransactionState::id(SipTransactionState *this)
{
  return 0;
}

void `non-virtual thunk to'SipClientInviteTransactionState::~SipClientInviteTransactionState(SipClientInviteTransactionState *this)
{
  SipTransactionState::~SipTransactionState((SipClientInviteTransactionState *)((char *)this - 8));
}

{
  SipTransactionState::~SipTransactionState((SipClientInviteTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CC928;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CC928;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CC928;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CC928;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEFAE770(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCallingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CC9A8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CC9A8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CC9A8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CC9A8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEFAE9D8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

_QWORD *std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CCA28;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CCA28;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CCA28;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CCA28;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEFAEC40(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientInviteCallingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CCAA8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CCAA8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CCAA8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CCAA8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEFAEEA8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void XcapUri::XcapUri(XcapUri *this, const XcapDocumentSelector *a2, const XcapNodeSelector *a3)
{
  *(_QWORD *)this = XcapDocumentSelector::clone(a2);
  *((_QWORD *)this + 1) = XcapNodeSelector::clone(a3);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  XcapUri::constructUri(this);
}

void sub_1BEFAEF88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*(void **)(v1 + 40));
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t XcapUri::constructUri(XcapUri *this)
{
  XcapDocumentSelector *v2;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v5;
  _QWORD *v6;
  std::string *v7;
  uint64_t v8;
  void **v9;
  std::string __p;
  _OWORD v12[4];
  void *v13[2];
  __int128 v14;
  __int128 v15;
  _BYTE v16[144];
  uint64_t v17;

  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)v13 = 0u;
  memset(v12, 0, sizeof(v12));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/", 1);
  v2 = *(XcapDocumentSelector **)this;
  if (*(char *)(*(_QWORD *)this + 47) < 0)
  {
    if (!*((_QWORD *)v2 + 4))
      goto LABEL_23;
  }
  else if (!*(_BYTE *)(*(_QWORD *)this + 47))
  {
    goto LABEL_23;
  }
  XcapDocumentSelector::asString(v2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (*v5 || v5[1])
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/", 1);
    XcapNodeSelector::fetchPath(*((XcapNodeSelector **)this + 1), &__p);
    v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(__p.__r_.__value_.__r.__words[2])
       : __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_23:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12 + 8, &__p);
  v9 = (void **)((char *)this + 16);
  if (*((char *)this + 39) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 4) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  XcapNodeSelector::fetchQuery(*((XcapNodeSelector **)this + 1), &__p);
  std::string::operator=((std::string *)((char *)this + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(*(_QWORD *)&v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v12[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v14) < 0)
    operator delete(v13[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v16);
}

void sub_1BEFAF1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void XcapUri::~XcapUri(XcapUri *this)
{
  uint64_t v2;
  XcapNodeSelector *v3;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if (*(char *)(v2 + 47) < 0)
      operator delete(*(void **)(v2 + 24));
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B87100](v2, 0x1012C403467C318);
  }
  v3 = (XcapNodeSelector *)*((_QWORD *)this + 1);
  if (v3)
  {
    XcapNodeSelector::~XcapNodeSelector(v3);
    MEMORY[0x1C3B87100]();
  }
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

ImsOutStream *XcapUri::log(XcapDocumentSelector **this, ImsOutStream *a2)
{
  void *__p[2];
  char v6;

  if (*this)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Domain Selector: ", 17);
    *((_BYTE *)a2 + 17) = 0;
    XcapDocumentSelector::asString(*this, __p);
    (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 32))(a2, __p);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    if (v6 < 0)
      operator delete(__p[0]);
    if (this[1])
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Node Selector: ", 15);
      *((_BYTE *)a2 + 17) = 0;
      XcapNodeSelector::asString(this[1], __p);
      (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 32))(a2, __p);
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      if (v6 < 0)
        operator delete(__p[0]);
    }
  }
  return a2;
}

void sub_1BEFAF39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipIdString::SipIdString(SipIdString *this)
{
  char *v1;
  std::string __p;

  *(_QWORD *)this = off_1E78CCB28;
  v1 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  ObfuscatedString::ObfuscatedString((uint64_t)v1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEFAF420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipIdString::set(uint64_t a1, const std::string *a2)
{
  void **v3;
  void **v4;
  int v5;
  void *__p[2];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  ObfuscatedString::ObfuscatedString((uint64_t)__p, a2);
  v3 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v3);
  *(_OWORD *)v3 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 24) = v7;
  HIBYTE(v7) = 0;
  LOBYTE(__p[0]) = 0;
  v4 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*v4);
    v5 = SHIBYTE(v7);
    *(_OWORD *)v4 = v8;
    *(_QWORD *)(a1 + 48) = v9;
    HIBYTE(v9) = 0;
    LOBYTE(v8) = 0;
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v4 = v8;
    *(_QWORD *)(a1 + 48) = v9;
  }
}

_QWORD *SipCallId::generate(SipCallId *this)
{
  ImsRandomStringGenerator *v2;
  void **v3;
  void **v4;
  int v5;
  std::string v7;
  void *__p[2];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  v2 = (ImsRandomStringGenerator *)ImsRandomNumberGenerator<unsigned char>::ImsRandomNumberGenerator(v12, 0, 63);
  ImsRandomStringGenerator::randomString(v2, 24, &v7);
  ObfuscatedString::ObfuscatedString((uint64_t)__p, &v7);
  v3 = (void **)((char *)this + 8);
  if (*((char *)this + 31) < 0)
    operator delete(*v3);
  *(_OWORD *)v3 = *(_OWORD *)__p;
  *((_QWORD *)this + 3) = v9;
  HIBYTE(v9) = 0;
  LOBYTE(__p[0]) = 0;
  v4 = (void **)((char *)this + 32);
  if (*((char *)this + 55) < 0)
  {
    operator delete(*v4);
    v5 = SHIBYTE(v9);
    *(_OWORD *)v4 = v10;
    *((_QWORD *)this + 6) = v11;
    HIBYTE(v11) = 0;
    LOBYTE(v10) = 0;
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v4 = v10;
    *((_QWORD *)this + 6) = v11;
    HIBYTE(v11) = 0;
    LOBYTE(v10) = 0;
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator(v12);
}

