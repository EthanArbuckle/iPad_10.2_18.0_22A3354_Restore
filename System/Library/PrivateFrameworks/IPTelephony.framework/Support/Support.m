void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c27_ZTSN3ims15NetworkServicesE(uint64_t a1)
{
  ims::NetworkServices::~NetworkServices((void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

ims::NetworkServices *__copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c27_ZTSN3ims15NetworkServicesE(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  return ims::NetworkServices::NetworkServices((ims::NetworkServices *)(a1 + 56), (const ims::NetworkServices *)(a2 + 56));
}

void sub_1BEDF60E8(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void ___ZN3ims6Client21updateNetworkServicesERKNS_15NetworkServicesE_block_invoke(IMSClientManager *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::updateNetworkServices(v5, (uint64_t)a1 + 32, (uint64_t)a1 + 56, 0);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BEDF618C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *`non-virtual thunk to'IPSecurityManager::logPrefix(IPSecurityManager *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"IPSecurityManager: ", 19);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

BOOL ImsLogger::isRedacting(ImsLogger *this)
{
  uint64_t has_internal_content;

  if (*((_BYTE *)this + 484))
    return 0;
  has_internal_content = os_variant_has_internal_content();
  return (has_internal_content & 1) == 0 && !ims::isCarrierInstall((ims *)has_internal_content);
}

void SipStack::logPrefix(SipStack *this, ImsOutStream *a2)
{
  void *__p[2];
  char v4;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 104))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BEDF6340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipStack::loggableName(SipStack *this@<X0>, std::string *a2@<X8>)
{
  _OWORD *v3;
  char *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string __p;

  v3 = (_OWORD *)((char *)this + 4136);
  v4 = (char *)this + 4159;
  if (*((_BYTE *)this + 176))
  {
    if (*v4 < 0)
    {
      std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)this + 517), *((_QWORD *)this + 518));
    }
    else
    {
      *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *v3;
      v9.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 519);
    }
    v5 = std::string::insert(&v9, 0, "SipStack(EMERGENCY) ", 0x14uLL);
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    LoggableString::LoggableString(a2, &__p);
  }
  else
  {
    if (*v4 < 0)
    {
      std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)this + 517), *((_QWORD *)this + 518));
    }
    else
    {
      *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *v3;
      v9.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 519);
    }
    v7 = std::string::insert(&v9, 0, "SipStack ", 9uLL);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    LoggableString::LoggableString(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1BEDF648C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

BOOL ims::AccessNetwork::isWifi(ims::AccessNetwork *this)
{
  ims::AccessNetwork *v1;
  uint64_t v2;
  char *v3;
  ims::AccessNetwork *v4;
  char *v5;

  v1 = this;
  if (*((char *)this + 23) < 0)
  {
    v1 = *(ims::AccessNetwork **)this;
    v2 = *((_QWORD *)this + 1);
  }
  else
  {
    v2 = *((unsigned __int8 *)this + 23);
  }
  v3 = (char *)v1 + v2;
  if (v2 >= 8)
  {
    v4 = v1;
    do
    {
      v5 = (char *)memchr(v4, 73, v2 - 7);
      if (!v5)
        break;
      if (*(_QWORD *)v5 == 0x3230382D45454549)
        return v5 != v3 && v5 - (char *)v1 != -1;
      v4 = (ims::AccessNetwork *)(v5 + 1);
      v2 = v3 - (char *)v4;
    }
    while (v3 - (char *)v4 > 7);
  }
  v5 = v3;
  return v5 != v3 && v5 - (char *)v1 != -1;
}

BOOL ims::AccessNetwork::isLTE(ims::AccessNetwork *this)
{
  uint64_t v1;
  size_t v2;
  uint64_t v3;
  const char *v4;
  ims::AccessNetwork *v5;
  uint64_t v6;
  _BOOL8 v7;
  const void *v8;
  uint64_t v10;
  const char *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  BOOL v18;

  v1 = *((unsigned __int8 *)this + 23);
  v2 = *((_QWORD *)this + 1);
  if ((v1 & 0x80u) == 0)
    v3 = *((unsigned __int8 *)this + 23);
  else
    v3 = *((_QWORD *)this + 1);
  if (v3 != 16)
    return 0;
  if ((v1 & 0x80) != 0)
  {
    v8 = *(const void **)this;
    if (memcmp(*(const void **)this, "3GPP-E-UTRAN-FDD", v2))
      return memcmp(v8, "3GPP-E-UTRAN-TDD", v2) == 0;
    return 1;
  }
  if (!*((_BYTE *)this + 23))
    return 1;
  v4 = "3GPP-E-UTRAN-FDD";
  v5 = this;
  v6 = *((unsigned __int8 *)this + 23);
  while (*(unsigned __int8 *)v5 == *(unsigned __int8 *)v4)
  {
    v5 = (ims::AccessNetwork *)((char *)v5 + 1);
    ++v4;
    if (!--v6)
      return 1;
  }
  v10 = v1 - 1;
  v11 = "3GPP-E-UTRAN-TDD";
  do
  {
    v13 = *(unsigned __int8 *)this;
    this = (ims::AccessNetwork *)((char *)this + 1);
    v12 = v13;
    v15 = *(unsigned __int8 *)v11++;
    v14 = v15;
    v17 = v10-- != 0;
    v18 = v12 == v14;
    v7 = v12 == v14;
  }
  while (v18 && v17);
  return v7;
}

BOOL ims::AccessNetwork::isNR(ims::AccessNetwork *this)
{
  uint64_t v1;
  size_t v2;
  uint64_t v3;
  const char *v4;
  ims::AccessNetwork *v5;
  uint64_t v6;
  const char *v7;
  ims::AccessNetwork *v8;
  uint64_t v9;
  _BOOL8 v10;
  const void *v11;
  const char *v12;
  uint64_t v14;
  const char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  const char *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;

  v1 = *((unsigned __int8 *)this + 23);
  v2 = *((_QWORD *)this + 1);
  if ((v1 & 0x80u) == 0)
    v3 = *((unsigned __int8 *)this + 23);
  else
    v3 = *((_QWORD *)this + 1);
  if (v3 != 13)
  {
    if (v3 != 11)
      return 0;
    if ((v1 & 0x80) == 0)
    {
      if (*((_BYTE *)this + 23))
      {
        v4 = "3GPP-NR-FDD";
        v5 = this;
        v6 = *((unsigned __int8 *)this + 23);
        while (*(unsigned __int8 *)v5 == *(unsigned __int8 *)v4)
        {
          v5 = (ims::AccessNetwork *)((char *)v5 + 1);
          ++v4;
          if (!--v6)
            return 1;
        }
        v14 = v1 - 1;
        v15 = "3GPP-NR-TDD";
        do
        {
          v17 = *(unsigned __int8 *)this;
          this = (ims::AccessNetwork *)((char *)this + 1);
          v16 = v17;
          v19 = *(unsigned __int8 *)v15++;
          v18 = v19;
          v20 = v14-- != 0;
          v21 = v20;
          v22 = v16 == v18;
          v10 = v16 == v18;
        }
        while (v22 && (v21 & 1) != 0);
        return v10;
      }
      return 1;
    }
    v11 = *(const void **)this;
    if (!memcmp(*(const void **)this, "3GPP-NR-FDD", v2))
      return 1;
    v12 = "3GPP-NR-TDD";
    return memcmp(v11, v12, v2) == 0;
  }
  if ((v1 & 0x80) != 0)
  {
    v11 = *(const void **)this;
    if (!memcmp(*(const void **)this, "3GPP-NR-U-FDD", v2))
      return 1;
    v12 = "3GPP-NR-U-TDD";
    return memcmp(v11, v12, v2) == 0;
  }
  if (!*((_BYTE *)this + 23))
    return 1;
  v7 = "3GPP-NR-U-FDD";
  v8 = this;
  v9 = *((unsigned __int8 *)this + 23);
  while (*(unsigned __int8 *)v8 == *(unsigned __int8 *)v7)
  {
    v8 = (ims::AccessNetwork *)((char *)v8 + 1);
    ++v7;
    if (!--v9)
      return 1;
  }
  v23 = v1 - 1;
  v24 = "3GPP-NR-U-TDD";
  do
  {
    v26 = *(unsigned __int8 *)this;
    this = (ims::AccessNetwork *)((char *)this + 1);
    v25 = v26;
    v28 = *(unsigned __int8 *)v24++;
    v27 = v28;
    v20 = v23-- != 0;
    v29 = v20;
    v22 = v25 == v27;
    v10 = v25 == v27;
  }
  while (v22 && (v29 & 1) != 0);
  return v10;
}

BOOL ims::AccessNetwork::networkTypeChanged(ims::AccessNetwork *this, const ims::AccessNetwork *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;

  v2 = *((unsigned __int8 *)this + 23);
  if (*((char *)this + 23) < 0)
  {
    if (!*((_QWORD *)this + 1))
      return 0;
  }
  else if (!*((_BYTE *)this + 23))
  {
    return 0;
  }
  if (*((char *)this + 47) < 0)
  {
    if (*((_QWORD *)this + 4))
      goto LABEL_9;
    return 0;
  }
  if (!*((_BYTE *)this + 47))
    return 0;
LABEL_9:
  v3 = *((unsigned __int8 *)a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a2 + 1);
  if (!v3)
    return 0;
  v5 = *((unsigned __int8 *)a2 + 47);
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a2 + 4);
  if (!v5)
    return 0;
  if ((v2 & 0x80u) == 0)
    v6 = *((unsigned __int8 *)this + 23);
  else
    v6 = *((_QWORD *)this + 1);
  if (v6 != v3)
    return 1;
  if (v4 < 0)
    a2 = *(const ims::AccessNetwork **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)this, a2, *((_QWORD *)this + 1)) != 0;
  if (*((_BYTE *)this + 23))
  {
    v7 = v2 - 1;
    do
    {
      v9 = *(unsigned __int8 *)this;
      this = (ims::AccessNetwork *)((char *)this + 1);
      v8 = v9;
      v10 = *(unsigned __int8 *)a2;
      a2 = (const ims::AccessNetwork *)((char *)a2 + 1);
      v11 = v8 == v10;
      v2 = v8 != v10;
      v11 = !v11 || v7-- == 0;
    }
    while (!v11);
  }
  return v2;
}

uint64_t ImsStringOutStream::isDefaultPublic(ImsStringOutStream *this)
{
  return *((unsigned __int8 *)this + 32);
}

uint64_t ImsLogContainer::debugStream(ImsLogContainer *this)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  if (*((char *)this + 55) < 0)
  {
    if (*((_QWORD *)this + 5))
    {
LABEL_3:
      v2 = *((_QWORD *)this + 11);
      if (!v2)
      {
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v2 = ImsLogger::debug(ims::_logger, (uint64_t)this + 8, (uint64_t)this + 32);
        *((_QWORD *)this + 11) = v2;
      }
      return v2;
    }
  }
  else if (*((_BYTE *)this + 55))
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_22);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)this + 8, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BEDF69A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ImsOutStream::isRedacting(ImsOutStream *this)
{
  if (((*(uint64_t (**)(ImsOutStream *))(*(_QWORD *)this + 24))(this) & 1) != 0)
    return 0;
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  return ImsLogger::isRedacting((ImsLogger *)ims::_logger);
}

uint64_t ImsLogStream::isDefaultPublic(ImsLogStream *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 3) + 152);
}

void ImsResult::~ImsResult(ImsResult *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E78B7238;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
}

{
  ImsResult::~ImsResult(this);
  JUMPOUT(0x1C3B87100);
}

_BYTE *ImsLogger::output(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6, uint64_t a7)
{
  _BYTE *v7;
  pthread_mutex_t *v13;
  _BYTE *v14;
  int v15;
  uint64_t i;
  _DWORD *v17;
  pthread_mutex_t *v19;
  _BYTE v20[72];

  v7 = a5;
  if (a5 < a6)
  {
    v13 = (pthread_mutex_t *)(a1 + 376);
    v14 = a5;
    do
    {
      v15 = *v14;
      if (v15 == 10)
      {
        v19 = 0;
        ImsLock::set(v13, &v19, (uint64_t)v20);
        ImsResult::~ImsResult((ImsResult *)v20);
        *v14 = 0;
        for (i = *(_QWORD *)(a7 + 8); i != a7; i = *(_QWORD *)(i + 8))
        {
          v17 = *(_DWORD **)(i + 16);
          if (v17[4] >= (int)a3)
            (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v17 + 40))(v17, a2, a3, a4, v7);
        }
        v7 = v14 + 1;
        ImsLock::~ImsLock(&v19);
      }
      else if (v15 == 13)
      {
        *v14 = 0;
      }
      ++v14;
    }
    while (v14 != a6);
  }
  return v7;
}

void sub_1BEDF6B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
  ImsLock::~ImsLock(&a9);
  _Unwind_Resume(a1);
}

void SipStack::updateAccessNetworkInfo(SipStack *this, std::string *a2, char a3)
{
  std::string *v6;
  uint64_t v7;
  _BYTE *v8;
  ims::AccessNetwork *v9;
  uint64_t v10;
  _BYTE *v11;
  std::string::size_type size;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 isLTE;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::string::size_type v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  ImsPrefs *v30;
  void **v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _BYTE *v36;
  ImsPrefs *v37;
  void **ReRegisterOnMobikeHandoverKey;
  void *v39;
  _BOOL4 isWifi;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(SipStack *);
  uint64_t v53;
  uint64_t v54;
  SipTransportLayer *v55;
  _BOOL8 isCampedOnWifi;
  std::string __p;
  std::string v58;
  std::string v59[2];
  __int128 v60;
  uint64_t v61;
  std::string v62[2];
  __int128 v63;
  void *v64[2];
  __int128 v65;
  void *v66[2];
  __int128 v67;
  __int128 v68;
  void *v69[2];
  void *v70[2];
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v73 = 0;
  v71 = 0u;
  v72 = 0u;
  *(_OWORD *)v69 = 0u;
  *(_OWORD *)v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  *(_OWORD *)v66 = 0u;
  v63 = 0u;
  *(_OWORD *)v64 = 0u;
  v6 = (std::string *)((char *)this + 3136);
  memset(v62, 0, sizeof(v62));
  ims::AccessNetworks::AccessNetworks(v62, (__int128 *)this + 196);
  v61 = 0;
  v60 = 0u;
  memset(v59, 0, sizeof(v59));
  if (SHIBYTE(v62[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v59, v62[0].__r_.__value_.__l.__data_, v62[0].__r_.__value_.__l.__size_);
  else
    v59[0] = v62[0];
  if (SHIBYTE(v62[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v59[1], v62[1].__r_.__value_.__l.__data_, v62[1].__r_.__value_.__l.__size_);
  else
    v59[1] = v62[1];
  v60 = v63;
  LOBYTE(v61) = v64[0];
  ims::AccessNetwork::set(v6, a2, a2 + 1);
  v7 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"updating access network info to ", 32);
  *(_BYTE *)(v7 + 17) = 0;
  v8 = (_BYTE *)ims::operator<<(v7, (uint64_t)v6);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v8[17] = 0;
  v9 = (ims::AccessNetwork *)&a2[3];
  ims::AccessNetwork::set((std::string *)((char *)this + 3208), a2 + 3, a2 + 4);
  if (*((char *)this + 3231) < 0)
  {
    if (!*((_QWORD *)this + 402))
      goto LABEL_16;
  }
  else if (!*((_BYTE *)this + 3231))
  {
    goto LABEL_16;
  }
  if (*((char *)this + 3255) < 0)
  {
    if (!*((_QWORD *)this + 405))
      goto LABEL_16;
    goto LABEL_15;
  }
  if (*((_BYTE *)this + 3255))
  {
LABEL_15:
    v10 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"updating camped access network info to ", 39);
    *(_BYTE *)(v10 + 17) = 0;
    v11 = (_BYTE *)ims::operator<<(v10, (uint64_t)this + 3208);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v11[17] = 0;
  }
LABEL_16:
  *((_BYTE *)this + 3184) = a2[2].__r_.__value_.__s.__data_[0];
  *((_BYTE *)this + 3256) = a2[5].__r_.__value_.__s.__data_[0];
  *((_BYTE *)this + 3200) = a2[2].__r_.__value_.__s.__data_[16];
  *((_BYTE *)this + 3272) = a2[5].__r_.__value_.__s.__data_[16];
  if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)a2))
  {
    size = HIBYTE(a2[6].__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0)
      size = a2[6].__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_25;
    v13 = HIBYTE(a2[7].__r_.__value_.__r.__words[2]);
    if ((v13 & 0x80u) != 0)
      v13 = a2[7].__r_.__value_.__l.__size_;
    if (v13)
    {
      ims::AccessNetwork::set((std::string *)((char *)this + 3280), a2 + 6, a2 + 7);
      v14 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"updating last access network info to ", 37);
      *(_BYTE *)(v14 + 17) = 0;
      v15 = ims::operator<<(v14, (uint64_t)this + 3280);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v16 = (_BYTE *)(v15 + 17);
    }
    else
    {
LABEL_25:
      *((_QWORD *)this + 417) = 0;
      v18 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"no last access network. Clearing timestamp.", 43);
      *(_BYTE *)(v18 + 17) = 0;
      v16 = (_BYTE *)(v18 + 17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    ims::AccessNetwork::clear((uint64_t)this + 3280);
    v17 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"not on WiFi. Clearing last access network info.", 47);
    *(_BYTE *)(v17 + 17) = 0;
    v16 = (_BYTE *)(v17 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *v16 = 0;
  if (((_BYTE)v60 != 0) != (a2[2].__r_.__value_.__s.__data_[0] != 0))
  {
    v19 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"updating DSCP service classes.", 30);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    SipTransportLayer::updateServiceClass(*((SipTransportLayer **)this + 20));
  }
  isLTE = ims::AccessNetwork::isLTE((ims::AccessNetwork *)v6);
  BambiAccessBarring::accessNetworkChanged((BambiAccessBarring *)((char *)this + 2904), isLTE);
  if (*((_DWORD *)this + 50) == 2)
  {
    if (!ims::AccessNetwork::networkTypeChanged((ims::AccessNetwork *)v6, (const ims::AccessNetwork *)v59))
      goto LABEL_54;
    v21 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"access network changed from ", 28);
    *(_BYTE *)(v21 + 17) = 0;
    LoggableString::LoggableString(&v58, v59);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v21 + 40))(v21, &v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)" to ", 4);
    *(_BYTE *)(v21 + 17) = 0;
    LoggableString::LoggableString(&__p, v6);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v21 + 40))(v21, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v22 = *((_QWORD *)this + 18);
    v24 = *(_QWORD *)(v22 + 248);
    v23 = *(std::__shared_weak_count **)(v22 + 256);
    v58.__r_.__value_.__r.__words[0] = v24;
    v58.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
    }
    v27 = *(_QWORD *)(v24 + 3632);
    if (v27)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 464))(v27);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v24 + 3632) + 496))(*(_QWORD *)(v24 + 3632), 4);
    }
    if (v23)
    {
      v28 = (unint64_t *)&v23->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (!ims::AccessNetwork::isIMS((ims::AccessNetwork *)v6) || !ims::AccessNetwork::isIMS((ims::AccessNetwork *)v59))
    {
      SipTransportLayer::removeConnections(*((SipTransportLayer **)this + 20), 1, 0, 1);
      goto LABEL_54;
    }
    v30 = (ImsPrefs *)SipStack::prefs(this);
    v31 = (void **)ImsPrefs::getResetSocketWhenNetworkChangeKey(v30);
    v32 = ImsPrefs::prefWithKey(v30, v31);
    if (v32)
    {
      if (((*(uint64_t (**)(void *))(*(_QWORD *)v32 + 40))(v32) & 1) == 0)
      {
LABEL_48:
        if (ims::AccessNetwork::isNR((ims::AccessNetwork *)v6) && ims::AccessNetwork::isLTE((ims::AccessNetwork *)v59)
          || ims::AccessNetwork::isLTE((ims::AccessNetwork *)v6) && ims::AccessNetwork::isNR((ims::AccessNetwork *)v59))
        {
          v33 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
          (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v33);
          v34 = ImsOutStream::operator<<(v33, "new: removing ununsed connection, not resetting connection, and not resetOnDelete");
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v35 = 0;
          v36 = (_BYTE *)(v34 + 17);
          goto LABEL_72;
        }
        v50 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v50);
        v51 = ImsOutStream::operator<<(v50, "same as original: removing ununsed connection, resetting connection, and resetOnDelete");
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v36 = (_BYTE *)(v51 + 17);
LABEL_71:
        v35 = 1;
LABEL_72:
        *v36 = 0;
        SipTransportLayer::removeConnections(*((SipTransportLayer **)this + 20), 1, v35, v35);
        v52 = *(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64);
        if ((a3 & 1) != 0)
        {
          v53 = v52(this);
          (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v53 + 8), (uint64_t)"need to reregister. defer refreshing call access network information", 68);
          *(_BYTE *)(v53 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v53 + 17) = 0;
        }
        else
        {
          v54 = v52(this);
          (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v54);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"no need to reregister. refreshing call access network information now", 69);
          *(_BYTE *)(v54 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v54 + 17) = 0;
          SipStack::refreshAccessNetwork(this);
        }
LABEL_54:
        v37 = (ImsPrefs *)SipStack::prefs(this);
        ReRegisterOnMobikeHandoverKey = (void **)ImsPrefs::getReRegisterOnMobikeHandoverKey(v37);
        v39 = ImsPrefs::prefWithKey(v37, ReRegisterOnMobikeHandoverKey);
        if (v39)
        {
          if (!(*(unsigned int (**)(void *))(*(_QWORD *)v39 + 40))(v39))
            goto LABEL_80;
        }
        else if (!*((_BYTE *)ReRegisterOnMobikeHandoverKey + 57))
        {
LABEL_80:
          v55 = (SipTransportLayer *)*((_QWORD *)this + 20);
          isCampedOnWifi = SipStack::isCampedOnWifi(this);
          SipTransportLayer::updateCrlfKeepAliveNetwork(v55, isCampedOnWifi);
          goto LABEL_81;
        }
        if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)v62)
          && ims::AccessNetwork::isWifi((ims::AccessNetwork *)a2))
        {
          isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)&v64[1]);
          if (isWifi != ims::AccessNetwork::isWifi(v9))
          {
            v41 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
            (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v41);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"triggering re-registration due to MOBIKE handover", 49);
            *(_BYTE *)(v41 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v41 + 17) = 0;
            v42 = *((_QWORD *)this + 18);
            v43 = *(_QWORD *)(v42 + 248);
            v44 = *(std::__shared_weak_count **)(v42 + 256);
            if (v44)
            {
              v45 = (unint64_t *)&v44->__shared_owners_;
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
              v47 = *(_DWORD *)(v43 + 1104);
              do
                v48 = __ldaxr(v45);
              while (__stlxr(v48 - 1, v45));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            else
            {
              v47 = *(_DWORD *)(v43 + 1104);
            }
            std::string::basic_string[abi:ne180100]<0>(&v58, "");
            std::string::basic_string[abi:ne180100]<0>(&__p, "xx.xx.xx.xx");
            SipStack::updateRegisteredServices((uint64_t)this, v47, 1, (std::string *)"MobikeHandover", (uint64_t)&v58, (uint64_t)&__p, 1);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v58.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_80;
      }
    }
    else if (!*((_BYTE *)v31 + 57))
    {
      goto LABEL_48;
    }
    v49 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"original: removing ununsed connection, resetting connection, and resetOnDelete", 78);
    *(_BYTE *)(v49 + 17) = 0;
    v36 = (_BYTE *)(v49 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_71;
  }
LABEL_81:
  if (SHIBYTE(v59[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v71) < 0)
    operator delete(v70[1]);
  if (SHIBYTE(v70[0]) < 0)
    operator delete(v69[0]);
  if (SBYTE7(v67) < 0)
    operator delete(v66[0]);
  if (SHIBYTE(v65) < 0)
    operator delete(v64[1]);
  if (SHIBYTE(v62[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v62[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62[0].__r_.__value_.__l.__data_);
}

void sub_1BEDF761C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  ims::AccessNetwork::~AccessNetwork(&a21);
  ims::AccessNetworks::~AccessNetworks(&a34);
  _Unwind_Resume(a1);
}

SipStack *SipStack::copyStackConfigs(SipStack *this, const ims::StackConfig *a2, ims::StackConfig *a3)
{
  SipStack *v4;

  if (a2)
  {
    v4 = this;
    ims::NetworkConfig::operator=((uint64_t)a2 + 24, (uint64_t)this + 24);
    std::string::operator=((std::string *)((char *)a2 + 616), (const std::string *)((char *)v4 + 616));
    std::string::operator=((std::string *)((char *)a2 + 640), (const std::string *)((char *)v4 + 640));
    std::string::operator=((std::string *)((char *)a2 + 664), (const std::string *)((char *)v4 + 664));
    this = (SipStack *)std::string::operator=((std::string *)((char *)a2 + 688), (const std::string *)((char *)v4 + 688));
    *((_WORD *)a2 + 356) = *((_WORD *)v4 + 356);
    *((_DWORD *)a2 + 181) = *((_DWORD *)v4 + 181);
    *((_BYTE *)a2 + 728) = *((_BYTE *)v4 + 728);
  }
  return this;
}

void ImsLock::~ImsLock(pthread_mutex_t **this)
{
  _BYTE v1[72];

  ImsLock::set(0, this, (uint64_t)v1);
  ImsResult::~ImsResult((ImsResult *)v1);
}

uint64_t ImsLock::set@<X0>(pthread_mutex_t *a1@<X1>, pthread_mutex_t **a2@<X0>, uint64_t a3@<X8>)
{
  pthread_mutex_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t *v10;
  _QWORD v11[2];
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = *a2;
  if (v6)
  {
    v7 = pthread_mutex_unlock(v6);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    if (v7)
      v8 = &_posixDomain;
    else
      v8 = &_bambiDomain;
    v11[0] = &off_1E78B7238;
    v11[1] = v8;
    v12 = v7;
    ImsResult::~ImsResult((ImsResult *)v11);
  }
  *a2 = a1;
  if (a1)
  {
    result = pthread_mutex_lock(a1);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    if ((_DWORD)result)
      v10 = &_posixDomain;
    else
      v10 = &_bambiDomain;
  }
  else
  {
    result = 0;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    v10 = &_bambiDomain;
  }
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = v10;
  *(_DWORD *)(a3 + 16) = result;
  return result;
}

uint64_t ims::operator<<(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  std::string *p_p;
  tm *v8;
  std::string::size_type v9;
  size_t v10;
  const char *v11;
  uint64_t v12;
  std::string __p;
  uint64_t v15;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"[type: ", 7);
    *(_BYTE *)(a1 + 17) = 0;
    LoggableString::LoggableString(&__p, (const std::string *)a2);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 40))(a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v6 = *(unsigned __int8 *)(a2 + 47);
    if ((v6 & 0x80u) != 0)
      v6 = *(_QWORD *)(a2 + 32);
    if (v6)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)", info: ", 8);
      *(_BYTE *)(a1 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2 + 24);
    }
    if (*(_QWORD *)(a2 + 56))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)", timestamp: ", 13);
      *(_BYTE *)(a1 + 17) = 0;
      v15 = *(_QWORD *)(a2 + 56);
      memset(&__p, 0, sizeof(__p));
      p_p = &__p;
      ims::ctime((ims *)&v15, v8, &__p);
      v9 = __p.__r_.__value_.__r.__words[0];
      *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 24) = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)v9;
      v10 = strlen((const char *)p_p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)p_p, v10);
      *(_BYTE *)(a1 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v4 = *(_QWORD **)(a1 + 8);
    v11 = "]";
    v12 = 1;
  }
  else
  {
    v11 = "[none]";
    v12 = 6;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v11, v12);
  *(_BYTE *)(a1 + 17) = 0;
  return a1;
}

{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)"{\"", 2);
  *(_BYTE *)(a1 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)"\", \"", 4);
  *(_BYTE *)(a1 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)"\"}", 2);
  *(_BYTE *)(a1 + 17) = 0;
  return a1;
}

void sub_1BEDF79BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string::size_type ims::nextToken(std::string *__str, std::string::size_type __pos, std::string *this, char *a4)
{
  char *v4;
  std::string::size_type v6;
  std::string *v7;
  int v8;
  std::string::size_type size;
  char *v10;
  std::string *v11;
  std::string::size_type v12;
  char *v13;
  std::string *v14;
  int v15;
  std::string::size_type v16;

  v4 = a4;
  v6 = __pos;
  v7 = __str;
  v8 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v8 >= 0)
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    size = __str->__r_.__value_.__l.__size_;
  if (size > __pos)
  {
    if (a4[23] >= 0)
      v10 = a4;
    else
      v10 = *(char **)a4;
    if (v8 >= 0)
      v11 = __str;
    else
      v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
    while (strchr(v10, v11->__r_.__value_.__s.__data_[v6]))
    {
      if (size == ++v6)
        return -1;
    }
  }
  if (v6 == size)
    return -1;
  v12 = v6;
  if (v6 < size)
  {
    if (v4[23] >= 0)
      v13 = v4;
    else
      v13 = *(char **)v4;
    if (v8 >= 0)
      v14 = v7;
    else
      v14 = (std::string *)v7->__r_.__value_.__r.__words[0];
    v12 = v6;
    while (!strchr(v13, v14->__r_.__value_.__s.__data_[v12]))
    {
      if (size == ++v12)
      {
        v12 = size;
        break;
      }
    }
  }
  std::string::assign(this, v7, v6, v12 - v6);
  v15 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
  if (v15 >= 0)
    v16 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  else
    v16 = v7->__r_.__value_.__l.__size_;
  if (v12 < v16)
  {
    if (v4[23] < 0)
      v4 = *(char **)v4;
    if (v15 < 0)
      v7 = (std::string *)v7->__r_.__value_.__r.__words[0];
    while (strchr(v4, v7->__r_.__value_.__s.__data_[v12]))
    {
      if (v16 == ++v12)
        return v16;
    }
  }
  return v12;
}

tm *ims::localtime(ims *this, tm *a2, tm *a3)
{
  tm *result;
  void *v6;
  uint64_t v7;
  time_t v8;

  result = 0;
  if (this)
  {
    if (a2)
    {
      objc_msgSend(MEMORY[0x1E0C99E80], "localTimeZone", a3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "secondsFromGMT");
      v8 = *(_QWORD *)this + v7;
      gmtime_r(&v8, a2);
      a2->tm_gmtoff = v7;
      a2->tm_isdst = objc_msgSend(v6, "isDaylightSavingTime");

      return a2;
    }
  }
  return result;
}

void sub_1BEDF7BC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t ims::tokenize(std::string *a1, uint64_t *a2, char *a3)
{
  std::string::size_type i;
  std::string::size_type size;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  std::string __s;

  memset(&__s, 0, sizeof(__s));
  for (i = ims::nextToken(a1, 0, &__s, a3); i != -1; i = ims::nextToken(a1, i, &__s, a3))
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __s.__r_.__value_.__l.__size_;
    if (size)
    {
      v8 = a2[1];
      if (v8 >= a2[2])
      {
        v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&__s);
      }
      else
      {
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)a2[1], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else
        {
          v9 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
          *(_QWORD *)(v8 + 16) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
          *(_OWORD *)v8 = v9;
        }
        v10 = v8 + 24;
        a2[1] = v8 + 24;
      }
      a2[1] = v10;
    }
  }
  v13 = a2;
  v11 = *a2;
  v12 = v13[1];
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  return 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3);
}

void sub_1BEDF7CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ims::Client::updateNetworkServices(ims::Client *this, const ims::NetworkServices *a2)
{
  _QWORD v3[4];
  std::string __p;
  void *v5[39];
  std::string v6;
  _OWORD v7[19];
  uint64_t v8;

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  ims::NetworkServices::NetworkServices((ims::NetworkServices *)v7, a2);
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v6 = *(std::string *)((char *)this + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZN3ims6Client21updateNetworkServicesERKNS_15NetworkServicesE_block_invoke;
  v3[3] = &__block_descriptor_tmp_25;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  ims::NetworkServices::NetworkServices((ims::NetworkServices *)v5, (const ims::NetworkServices *)v7);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  ims::NetworkServices::~NetworkServices(v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  ims::NetworkServices::~NetworkServices((void **)v7);
}

void sub_1BEDF7E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62)
{
  if (a60 < 0)
    operator delete(__p);
  ims::NetworkServices::~NetworkServices(&a62);
  _Unwind_Resume(a1);
}

_QWORD *ims::ctime@<X0>(ims *this@<X0>, tm *a2@<X2>, _QWORD *a3@<X8>)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  uint64_t i;
  uint64_t v32;
  char v33;
  tm v34;
  std::locale v35;
  __int128 v36[3];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[4];
  _OWORD v42[3];
  _QWORD v43[6];
  __int128 v44;
  uint64_t v45;
  _QWORD v46[5];

  v46[4] = *MEMORY[0x1E0C80C00];
  if (!this)
    return std::string::basic_string[abi:ne180100]<0>(a3, "");
  memset(&v34, 0, sizeof(v34));
  ims::localtime(this, &v34, a2);
  v5 = atomic_load((unsigned __int8 *)&_MergedGlobals_6);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_6))
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "Sun");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v36[1] + 1, "Mon");
    std::string::basic_string[abi:ne180100]<0>(&v37, "Tue");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v38 + 1, "Wed");
    std::string::basic_string[abi:ne180100]<0>(&v40, "Thu");
    std::string::basic_string[abi:ne180100]<0>(&v41[1], "Fri");
    std::string::basic_string[abi:ne180100]<0>(v42, "Sat");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&qword_1ED70EA20, v36, 7uLL);
    for (i = 0; i != -168; i -= 24)
    {
      if (*((char *)&v42[1] + i + 7) < 0)
        operator delete(*(void **)((char *)v42 + i));
    }
    __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &qword_1ED70EA20, &dword_1BEDF4000);
    __cxa_guard_release(&_MergedGlobals_6);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_1ED70EA18);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED70EA18))
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "Jan");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v36[1] + 1, "Feb");
    std::string::basic_string[abi:ne180100]<0>(&v37, "Mar");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v38 + 1, "Apr");
    std::string::basic_string[abi:ne180100]<0>(&v40, "May");
    std::string::basic_string[abi:ne180100]<0>(&v41[1], "Jun");
    std::string::basic_string[abi:ne180100]<0>(v42, "Jul");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v42[1] + 1, "Aug");
    std::string::basic_string[abi:ne180100]<0>(v43, "Sep");
    std::string::basic_string[abi:ne180100]<0>(&v43[3], "Oct");
    std::string::basic_string[abi:ne180100]<0>(&v44, "Nov");
    std::string::basic_string[abi:ne180100]<0>(v46, "Dec");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&qword_1ED70EA38, v36, 0xCuLL);
    v32 = 288;
    do
    {
      if (*((char *)v36 + v32 - 1) < 0)
        operator delete(*(void **)((char *)&v34.tm_gmtoff + v32));
      v32 -= 24;
    }
    while (v32);
    __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &qword_1ED70EA38, &dword_1BEDF4000);
    __cxa_guard_release(&qword_1ED70EA18);
  }
  v45 = 0;
  v44 = 0u;
  memset(v43, 0, sizeof(v43));
  memset(v42, 0, sizeof(v42));
  v40 = 0u;
  memset(v41, 0, sizeof(v41));
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  memset(v36, 0, sizeof(v36));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
  v7 = qword_1ED70EA20 + 24 * v34.tm_wday;
  v8 = *(char *)(v7 + 23);
  if (v8 >= 0)
    v9 = qword_1ED70EA20 + 24 * v34.tm_wday;
  else
    v9 = *(_QWORD *)v7;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v7 + 23);
  else
    v10 = *(_QWORD *)(v7 + 8);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v9, v10);
  LOBYTE(v35.__locale_) = 32;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v35, 1);
  v13 = qword_1ED70EA38 + 24 * v34.tm_mon;
  v14 = *(char *)(v13 + 23);
  if (v14 >= 0)
    v15 = qword_1ED70EA38 + 24 * v34.tm_mon;
  else
    v15 = *(_QWORD *)v13;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(v13 + 23);
  else
    v16 = *(_QWORD *)(v13 + 8);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v15, v16);
  LOBYTE(v35.__locale_) = 32;
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v35, 1);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(*v18 - 24) + 24) = 2;
  v19 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v35.__locale_) = 32;
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v35, 1);
  v33 = 48;
  v21 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, &v33);
  *(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 24) = 2;
  v22 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v35.__locale_) = 58;
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v35, 1);
  *(_QWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 24) = 2;
  v24 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v35.__locale_) = 58;
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&v35, 1);
  *(_QWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 24) = 2;
  v26 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v35.__locale_) = 32;
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)&v35, 1);
  *(_QWORD *)((char *)v27 + *(_QWORD *)(*v27 - 24) + 24) = 4;
  v28 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
  v29 = std::locale::use_facet(&v35, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale(&v35);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v36 + 8, a3);
  *(_QWORD *)&v36[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v36 + *(_QWORD *)(*(_QWORD *)&v36[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v36[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v39) < 0)
    operator delete(*((void **)&v38 + 1));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1C3B8707C](v41);
}

void sub_1BEDF846C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, char a19)
{
  uint64_t v19;
  uint64_t v21;

  v21 = 288;
  while (1)
  {
    if (*(char *)(v19 + v21 - 1) < 0)
      operator delete(*(void **)(v19 + v21 - 24));
    v21 -= 24;
    if (!v21)
    {
      __cxa_guard_abort(&qword_1ED70EA18);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t ims::join<std::__wrap_iter<std::string const*>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v10, 1);
  if (a1 != a2)
  {
    v8 = 1;
    do
    {
      if ((v8 & 1) == 0)
        (*(void (**)(__int128 *, uint64_t))(v10 + 32))(&v10, a3);
      (*(void (**)(__int128 *, uint64_t))(v10 + 32))(&v10, a1);
      v8 = 0;
      a1 += 24;
    }
    while (a1 != a2);
  }
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v11 + 1) + 8, a4);
  *(_QWORD *)&v10 = &off_1E78D7A10;
  if ((_BYTE)v11)
  {
    result = *((_QWORD *)&v10 + 1);
    if (*((_QWORD *)&v10 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 8))(*((_QWORD *)&v10 + 1));
  }
  return result;
}

void sub_1BEDF864C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a10)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::NetworkServices::operator=(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  __int128 v6;
  uint64_t v7;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  v4 = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = v4;
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  v5 = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = v5;
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
  v6 = *(_OWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = v6;
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  std::string::operator=((std::string *)(a1 + 224), (const std::string *)(a2 + 224));
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 248));
  if (a1 != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 272), *(std::string **)(a2 + 272), *(__int128 **)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3));
  v7 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 302) = *(_QWORD *)(a2 + 302);
  *(_QWORD *)(a1 + 296) = v7;
  return a1;
}

void ims::NetworkServices::~NetworkServices(void **this)
{
  void **v2;

  v2 = this + 34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 271) < 0)
    operator delete(this[31]);
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

ims::NetworkServices *ims::NetworkServices::NetworkServices(ims::NetworkServices *this, const ims::NetworkServices *a2)
{
  std::string *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v4 = ims::AccessNetworks::AccessNetworks((std::string *)this, (__int128 *)a2);
  LODWORD(v4[9].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 54);
  if (*((char *)a2 + 247) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)v4 + 224), *((const std::string::value_type **)a2 + 28), *((_QWORD *)a2 + 29));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 14);
    v4[10].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 30);
    *(_OWORD *)&v4[9].__r_.__value_.__r.__words[1] = v5;
  }
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 248), *((const std::string::value_type **)a2 + 31), *((_QWORD *)a2 + 32));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 248);
    *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
    *(_OWORD *)((char *)this + 248) = v6;
  }
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 272), *((__int128 **)a2 + 34), *((__int128 **)a2 + 35), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 35) - *((_QWORD *)a2 + 34)) >> 3));
  v7 = *((_QWORD *)a2 + 37);
  *(_QWORD *)((char *)this + 302) = *(_QWORD *)((char *)a2 + 302);
  *((_QWORD *)this + 37) = v7;
  return this;
}

void sub_1BEDF8908(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 247) < 0)
    operator delete(*v2);
  ims::AccessNetworks::~AccessNetworks((void **)v1);
  _Unwind_Resume(a1);
}

void ims::PrefsContainer::release(ims::PrefsContainer *this)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)this;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
    CFRelease(v3);
}

std::string *ims::AccessNetworks::AccessNetworks(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  __int128 v15;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = a2[3];
  this[2].__r_.__value_.__s.__data_[16] = *((_BYTE *)a2 + 64);
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v8;
  }
  v9 = this + 4;
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v10 = a2[6];
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  v11 = *(__int128 *)((char *)a2 + 120);
  this[5].__r_.__value_.__s.__data_[16] = *((_BYTE *)a2 + 136);
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v11;
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(this + 6, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v12 = a2[9];
    this[6].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 20);
    *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v12;
  }
  v13 = this + 7;
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v14 = *(__int128 *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 23);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v15 = a2[12];
  this[8].__r_.__value_.__s.__data_[16] = *((_BYTE *)a2 + 208);
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v15;
  return this;
}

void sub_1BEDF8AF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 167) < 0)
    operator delete(*v3);
  ims::AccessNetwork::~AccessNetwork(v2);
  ims::AccessNetwork::~AccessNetwork((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1BEDF8B44()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
  JUMPOUT(0x1BEDF8B3CLL);
}

uint64_t ims::NetworkConfig::operator=(uint64_t a1, uint64_t a2)
{
  int v4;

  ims::NetworkServices::operator=(a1, a2);
  std::string::operator=((std::string *)(a1 + 312), (const std::string *)(a2 + 312));
  std::string::operator=((std::string *)(a1 + 336), (const std::string *)(a2 + 336));
  std::string::operator=((std::string *)(a1 + 360), (const std::string *)(a2 + 360));
  std::string::operator=((std::string *)(a1 + 384), (const std::string *)(a2 + 384));
  std::string::operator=((std::string *)(a1 + 408), (const std::string *)(a2 + 408));
  std::string::operator=((std::string *)(a1 + 432), (const std::string *)(a2 + 432));
  if (a1 != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 456), *(std::string **)(a2 + 456), *(__int128 **)(a2 + 464), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 464) - *(_QWORD *)(a2 + 456)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 480), *(std::string **)(a2 + 480), *(__int128 **)(a2 + 488), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 504), (const std::string *)(a2 + 504));
  v4 = *(_DWORD *)(a2 + 531);
  *(_DWORD *)(a1 + 528) = *(_DWORD *)(a2 + 528);
  *(_DWORD *)(a1 + 531) = v4;
  std::string::operator=((std::string *)(a1 + 536), (const std::string *)(a2 + 536));
  std::string::operator=((std::string *)(a1 + 560), (const std::string *)(a2 + 560));
  *(_WORD *)(a1 + 584) = *(_WORD *)(a2 + 584);
  return a1;
}

void ims::NetworkConfig::~NetworkConfig(void **this)
{
  void **v2;

  if (*((char *)this + 583) < 0)
    operator delete(this[70]);
  if (*((char *)this + 559) < 0)
    operator delete(this[67]);
  if (*((char *)this + 527) < 0)
    operator delete(this[63]);
  v2 = this + 60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 455) < 0)
    operator delete(this[54]);
  if (*((char *)this + 431) < 0)
    operator delete(this[51]);
  if (*((char *)this + 407) < 0)
    operator delete(this[48]);
  if (*((char *)this + 383) < 0)
    operator delete(this[45]);
  if (*((char *)this + 359) < 0)
    operator delete(this[42]);
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  ims::NetworkServices::~NetworkServices(this);
}

ims::NetworkConfig *ims::NetworkConfig::NetworkConfig(ims::NetworkConfig *this)
{
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 136) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_BYTE *)this + 208) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_BYTE *)this + 192) = 0;
  *((_BYTE *)this + 300) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_QWORD *)this + 36) = 0;
  *((_DWORD *)this + 76) = 1;
  *((_WORD *)this + 154) = 257;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 63, "ims");
  *((_WORD *)this + 266) = 0;
  *((_BYTE *)this + 534) = 1;
  *((_WORD *)this + 292) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  return this;
}

void sub_1BEDF8E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;

  a10 = (void **)(v10 + 480);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 456);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 455) < 0)
    operator delete(*(void **)(v10 + 432));
  if (*(char *)(v10 + 431) < 0)
    operator delete(*(void **)(v10 + 408));
  if (*(char *)(v10 + 407) < 0)
    operator delete(*(void **)(v10 + 384));
  if (*(char *)(v10 + 383) < 0)
    operator delete(*(void **)(v10 + 360));
  if (*(char *)(v10 + 359) < 0)
    operator delete(*(void **)(v10 + 336));
  if (*(char *)(v10 + 335) < 0)
    operator delete(*v11);
  ims::NetworkServices::~NetworkServices((void **)v10);
  _Unwind_Resume(a1);
}

uint64_t ims::AccessNetwork::clear(uint64_t this)
{
  if (*(char *)(this + 23) < 0)
  {
    **(_BYTE **)this = 0;
    *(_QWORD *)(this + 8) = 0;
  }
  else
  {
    *(_BYTE *)this = 0;
    *(_BYTE *)(this + 23) = 0;
  }
  if (*(char *)(this + 47) < 0)
  {
    **(_BYTE **)(this + 24) = 0;
    *(_QWORD *)(this + 32) = 0;
  }
  else
  {
    *(_BYTE *)(this + 24) = 0;
    *(_BYTE *)(this + 47) = 0;
  }
  *(_QWORD *)(this + 56) = 0;
  return this;
}

time_t ims::AccessNetwork::set(std::string *a1, const std::string *a2, const std::string *a3)
{
  time_t result;

  std::string::operator=(a1, a2);
  std::string::operator=(a1 + 1, a3);
  result = time(0);
  a1[2].__r_.__value_.__l.__size_ = result;
  return result;
}

void ims::StackConfig::~StackConfig(void **this)
{
  void *v2;

  v2 = *this;
  if (v2)
    CFRelease(v2);
  if (*((char *)this + 711) < 0)
    operator delete(this[86]);
  if (*((char *)this + 687) < 0)
    operator delete(this[83]);
  if (*((char *)this + 663) < 0)
    operator delete(this[80]);
  if (*((char *)this + 639) < 0)
    operator delete(this[77]);
  ims::NetworkConfig::~NetworkConfig(this + 3);
  ims::PrefsContainer::release((ims::PrefsContainer *)(this + 1));
}

void ImsLogDestinationOslog::output(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t *a5)
{
  NSObject *v7;
  int v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  int v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t *v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  int v24;
  _BOOL4 v25;
  uint64_t *v26;
  uint32_t v27;
  uint64_t *v28;
  int v29;
  uint64_t *v30;
  __int16 v31;
  uint64_t *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
    v7 = *(NSObject **)(a1 + 24);
  else
    v7 = MEMORY[0x1E0C81028];
  if (a3 == 6)
  {
    v16 = *((char *)a4 + 23);
    if (v16 >= 0)
      v17 = *((unsigned __int8 *)a4 + 23);
    else
      v17 = a4[1];
    v18 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
    if (v17)
    {
      if (!v18)
        return;
      v19 = (uint64_t *)*a4;
      if (v16 >= 0)
        v19 = a4;
      v29 = 136446466;
      v30 = v19;
      v31 = 2082;
      v32 = a5;
      v20 = "I [%{public}s]: %{public}s";
      v21 = v7;
      v22 = OS_LOG_TYPE_INFO;
LABEL_43:
      v27 = 22;
      goto LABEL_44;
    }
    if (!v18)
      return;
    v29 = 136446210;
    v30 = a5;
    v20 = "%{public}s";
    v21 = v7;
    v22 = OS_LOG_TYPE_INFO;
LABEL_37:
    v27 = 12;
LABEL_44:
    _os_log_impl(&dword_1BEDF4000, v21, v22, v20, (uint8_t *)&v29, v27);
    return;
  }
  if (a3 != 3)
  {
    v23 = *((unsigned __int8 *)a4 + 23);
    v24 = (char)v23;
    if ((v23 & 0x80u) != 0)
      v23 = a4[1];
    if (v23)
    {
      v25 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if (a3 == 4)
      {
        if (!v25)
          return;
        v26 = (uint64_t *)*a4;
        if (v24 >= 0)
          v26 = a4;
        v29 = 136446466;
        v30 = v26;
        v31 = 2082;
        v32 = a5;
        v20 = "W [%{public}s]: %{public}s";
      }
      else
      {
        if (!v25)
          return;
        v28 = (uint64_t *)*a4;
        if (v24 >= 0)
          v28 = a4;
        v29 = 136446466;
        v30 = v28;
        v31 = 2082;
        v32 = a5;
        v20 = "[%{public}s]: %{public}s";
      }
      v21 = v7;
      v22 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_43;
    }
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      return;
    v29 = 136446210;
    v30 = a5;
    v20 = "%{public}s";
    v21 = v7;
    v22 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_37;
  }
  v9 = *((char *)a4 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = a4[1];
  v11 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v10)
  {
    if (!v11)
      return;
    v12 = (uint64_t *)*a4;
    if (v9 >= 0)
      v12 = a4;
    v29 = 136446466;
    v30 = v12;
    v31 = 2082;
    v32 = a5;
    v13 = "E [%{public}s]: %{public}s";
    v14 = v7;
    v15 = 22;
  }
  else
  {
    if (!v11)
      return;
    v29 = 136446210;
    v30 = a5;
    v13 = "%{public}s";
    v14 = v7;
    v15 = 12;
  }
  _os_log_error_impl(&dword_1BEDF4000, v14, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v29, v15);
}

void ImsStringOutStream::ImsStringOutStream(ImsStringOutStream *this, char a2)
{
  uint64_t v4;

  v4 = operator new();
  std::ostringstream::basic_ostringstream[abi:ne180100](v4);
  *((_WORD *)this + 8) = 1;
  *(_QWORD *)this = &off_1E78D7980;
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 3) = v4;
  *((_BYTE *)this + 32) = a2;
}

void sub_1BEDF92EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4083609F1ALL);
  _Unwind_Resume(a1);
}

uint64_t ImsLoggerStreambuf::sync(char **this)
{
  ImsLoggerStreambuf::dump((ImsLoggerStreambuf *)this, this[6]);
  return 0;
}

void ImsLoggerStreambuf::dump(ImsLoggerStreambuf *this, char *a2)
{
  tm *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  tm *v12;
  uint64_t v13;
  _BYTE *v14;
  void **v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  void *__p[2];
  uint64_t v23;
  _OWORD v24[4];
  void *v25[2];
  __int128 v26;
  __int128 v27;
  _OWORD v28[9];
  uint64_t v29;
  tm v30;
  timeval v31;

  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 9) + 24))(*((_QWORD *)this + 9)))
  {
    v31.tv_sec = 0;
    *(_QWORD *)&v31.tv_usec = 0;
    gettimeofday(&v31, 0);
    memset(&v30, 0, sizeof(v30));
    ims::localtime((ims *)&v31, &v30, v4);
    v29 = 0;
    v27 = 0u;
    memset(v28, 0, sizeof(v28));
    *(_OWORD *)v25 = 0u;
    v26 = 0u;
    memset(v24, 0, sizeof(v24));
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
    LOBYTE(__p[0]) = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, (char *)__p);
    *(_QWORD *)((char *)&v24[1] + *(_QWORD *)(*(_QWORD *)&v24[0] - 24) + 8) = 2;
    v5 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 58;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 1);
    *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 2;
    v7 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 58;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)__p, 1);
    *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 2;
    v9 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 46;
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)__p, 1);
    *(_QWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 24) = 3;
    v11 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, 1);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v24 + 8, __p);
    *(_OWORD *)v20 = *(_OWORD *)__p;
    v21 = v23;
    if (*(_QWORD *)&v30.tm_mon != qword_1ED70EDBC || v30.tm_mday != _MergedGlobals_16)
    {
      __p[0] = 0;
      __p[1] = 0;
      v23 = 0;
      ims::ctime((ims *)&v31, v12, __p);
      if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9)))
      {
        v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9));
        v14 = (_BYTE *)HIBYTE(v23);
        if (v23 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        if (v23 < 0)
          v14 = __p[1];
        ImsLogger::output(v13, (uint64_t)v20, 6, (uint64_t)"date", v15, &v14[(_QWORD)v15], v13);
      }
      HIDWORD(qword_1ED70EDBC) = v30.tm_year;
      _MergedGlobals_16 = *(_QWORD *)&v30.tm_mday;
      if (SHIBYTE(v23) < 0)
        operator delete(__p[0]);
    }
    *(_QWORD *)&v24[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v24 + *(_QWORD *)(*(_QWORD *)&v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *((_QWORD *)&v24[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v26) < 0)
      operator delete(v25[1]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3B8707C](v28);
  }
  v16 = (*(uint64_t (**)(_QWORD, void **, _QWORD, _QWORD, char *))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9), v20, *((unsigned int *)this + 16), *((_QWORD *)this + 5), a2);
  if (v16 == *((_QWORD *)this + 5))
  {
    *a2++ = 10;
    v16 = (*(uint64_t (**)(_QWORD, void **, _QWORD, _QWORD, char *))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9), v20, *((unsigned int *)this + 16), *((_QWORD *)this + 5), a2);
  }
  if ((uint64_t)&a2[-v16] < 1)
  {
    v18 = 0;
  }
  else
  {
    v17 = 0;
    do
    {
      v17[*((_QWORD *)this + 10)] = v17[v16];
      ++v17;
    }
    while (&a2[-v16] != v17);
    v18 = ((_DWORD)a2 - v16);
  }
  v19 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 5) = v19;
  *((_QWORD *)this + 6) = v19 + v18;
  *((_QWORD *)this + 7) = v19 + 1024;
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
}

void sub_1BEDF96D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::ostringstream::~ostringstream((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1BEDF9728()
{
  JUMPOUT(0x1BEDF9710);
}

void IPTelephonyManager::updatePolicyInterfaceList(uint64_t a1, std::string *a2)
{
  void *__p[2];
  char v5;
  uint64_t v6[3];

  if (*(_QWORD *)(a1 + 232))
  {
    memset(v6, 0, sizeof(v6));
    std::string::basic_string[abi:ne180100]<0>(__p, ", ");
    ims::tokenize(a2, v6, (char *)__p);
    if (v5 < 0)
      operator delete(__p[0]);
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 232) + 96))(*(_QWORD *)(a1 + 232), v6);
    __p[0] = v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1BEDF97BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::updateNetworkServices(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  _BYTE *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  std::string *v17;
  std::string::size_type size;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  void **v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  std::string *v30;
  std::string::size_type v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  std::string *v35;
  std::string::size_type v36;
  uint64_t v37;
  _BYTE *v38;
  SipStack *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t *v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (***v72)(_QWORD, uint64_t);
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  capabilities::radio *v77;
  SipStack *v78;
  uint64_t v79;
  std::string::size_type v80;
  std::string::size_type v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  SipRegistrationClient *v85;
  std::string::size_type v86;
  unint64_t *v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  SipRegistrationClient *v93;
  std::string::size_type v94;
  unint64_t *v95;
  unint64_t v96;
  ims::AccessNetwork *v97;
  _BOOL4 v98;
  _BOOL4 isWifi;
  uint64_t v100;
  const char *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  int v112;
  _QWORD *v113;
  uint64_t v114;
  int v115;
  SipStack *v116;
  _BOOL4 v117;
  int RadioVendor;
  ims::StackConfig *v119;
  ims::StackConfig *v120;
  std::__shared_weak_count *v121;
  unint64_t *p_shared_owners;
  unint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  int v137;
  int v138;
  int v139;
  std::string *__str;
  std::string v141;
  std::string v142;
  std::string v143;
  __int128 v144;
  char v145;
  std::string v146;
  std::string v147;
  __int128 v148;
  char v149;
  std::string v150;
  std::string v151;
  __int128 v152;
  char v153;
  int v154;
  std::string v155;
  std::string v156;
  std::vector<std::string> v157;
  int v158;
  char v159;
  int v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int16 v167;
  int v168;
  __int16 v169;
  char v170;
  void *v171[2];
  char v172;
  void *__p[2];
  unsigned __int8 v174;
  std::string v175;
  _QWORD v176[8];
  __int128 v177;
  __int128 v178;
  __int128 v179;
  _BYTE v180[144];
  uint64_t v181;
  SipStack *v182;
  std::__shared_weak_count *v183;

  v182 = 0;
  v183 = 0;
  (*(void (**)(SipStack **__return_ptr))(**(_QWORD **)(a1 + 168) + 192))(&v182);
  if (!v182)
  {
    v26 = *(_QWORD *)(a1 + 24);
    v25 = a1 + 24;
    v27 = (*(uint64_t (**)(uint64_t))(v26 + 56))(v25);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"unable to update network services, sip stack ", 45);
    *(_BYTE *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 32))(v27, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)" invalid.", 9);
    *(_BYTE *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v27 + 17) = 0;
    goto LABEL_237;
  }
  v138 = *(_DWORD *)(a3 + 216);
  v139 = *((_DWORD *)v182 + 898);
  v137 = *(unsigned __int8 *)(a3 + 300);
  v181 = 0;
  v179 = 0u;
  memset(v180, 0, sizeof(v180));
  v177 = 0u;
  v178 = 0u;
  memset(v176, 0, sizeof(v176));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v176);
  if ((*((_BYTE *)v182 + 3592) & 1) != 0
    && (*(_BYTE *)(a3 + 216) & 1) != 0
    && !ims::AccessNetwork::isWifi((ims::AccessNetwork *)a3)
    && !ims::AccessNetwork::isLTE((ims::AccessNetwork *)a3)
    && !ims::AccessNetwork::isNR((ims::AccessNetwork *)a3))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"voice services requested on non-VoLTE RAT type: ", 48);
    *(_BYTE *)(v8 + 17) = 0;
    v9 = (_BYTE *)ims::operator<<(v8, a3);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v9[17] = 0;
  }
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)"updateNetworkServices (", 23);
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = *(_QWORD *)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"): servicesChanged= ", 20);
  if (v139 == v138)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)"false", 5);
  }
  else
  {
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)"true (is= ", 10);
    v16 = *(_DWORD *)(a3 + 216);
    std::string::basic_string[abi:ne180100]<0>(&v175, ",");
    BambiServices::namesForServiceMask(v16, (uint64_t)&v175, &v141);
    if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v141;
    else
      v17 = (std::string *)v141.__r_.__value_.__r.__words[0];
    if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v141.__r_.__value_.__r.__words[2]);
    else
      size = v141.__r_.__value_.__l.__size_;
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, size);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"; was= ", 7);
    v21 = *((_DWORD *)v182 + 898);
    std::string::basic_string[abi:ne180100]<0>(v171, ",");
    BambiServices::namesForServiceMask(v21, (uint64_t)v171, __p);
    if ((v174 & 0x80u) == 0)
      v22 = __p;
    else
      v22 = (void **)__p[0];
    if ((v174 & 0x80u) == 0)
      v23 = v174;
    else
      v23 = (uint64_t)__p[1];
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)")", 1);
    if ((char)v174 < 0)
      operator delete(__p[0]);
    if (v172 < 0)
      operator delete(v171[0]);
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v141.__r_.__value_.__l.__data_);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__r_.__value_.__l.__data_);
  }
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)" contextUp= ", 12);
  if (v137)
    v29 = "true";
  else
    v29 = "false";
  std::string::basic_string[abi:ne180100]<0>(&v141, v29);
  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v141;
  else
    v30 = (std::string *)v141.__r_.__value_.__r.__words[0];
  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
  else
    v31 = v141.__r_.__value_.__l.__size_;
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v30, v31);
  v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" isEmergency= ", 14);
  if (a4)
    v34 = "true";
  else
    v34 = "false";
  std::string::basic_string[abi:ne180100]<0>(&v175, v34);
  if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v175;
  else
    v35 = (std::string *)v175.__r_.__value_.__r.__words[0];
  if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
  else
    v36 = v175.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v35, v36);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  v37 = a1 + 24;
  v38 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, v38);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v176[1], &v175);
  LoggableString::LoggableString(&v141, &v175);
  (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v38 + 40))(v38, &v141);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v38[17] = 0;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  v39 = v182;
  __str = (std::string *)(a3 + 224);
  v40 = *((unsigned __int8 *)v182 + 3623);
  if ((v40 & 0x80u) == 0)
    v41 = *((unsigned __int8 *)v182 + 3623);
  else
    v41 = *((_QWORD *)v182 + 451);
  v42 = *(unsigned __int8 *)(a3 + 247);
  v43 = (char)v42;
  if ((v42 & 0x80u) != 0)
    v42 = *(_QWORD *)(a3 + 232);
  if (v41 == v42)
  {
    if (v43 >= 0)
      v44 = (unsigned __int8 *)(a3 + 224);
    else
      v44 = (unsigned __int8 *)__str->__r_.__value_.__r.__words[0];
    if ((v40 & 0x80) != 0)
    {
      if (!memcmp(*((const void **)v182 + 450), v44, *((_QWORD *)v182 + 451)))
        goto LABEL_80;
    }
    else
    {
      if (!*((_BYTE *)v182 + 3623))
        goto LABEL_80;
      v45 = 0;
      while (*((unsigned __int8 *)v182 + v45 + 3600) == v44[v45])
      {
        if (v40 == ++v45)
          goto LABEL_80;
      }
    }
  }
  std::string::operator=((std::string *)((char *)v39 + 4088), __str);
  v39 = v182;
LABEL_80:
  v46 = *((unsigned __int8 *)v39 + 3647);
  if ((v46 & 0x80u) == 0)
    v47 = *((unsigned __int8 *)v39 + 3647);
  else
    v47 = *((_QWORD *)v39 + 454);
  v48 = *(unsigned __int8 *)(a3 + 271);
  v49 = (char)v48;
  if ((v48 & 0x80u) != 0)
    v48 = *(_QWORD *)(a3 + 256);
  if (v47 == v48)
  {
    if (v49 >= 0)
      v50 = (unsigned __int8 *)(a3 + 248);
    else
      v50 = *(unsigned __int8 **)(a3 + 248);
    if ((v46 & 0x80) != 0)
    {
      if (!memcmp(*((const void **)v39 + 453), v50, *((_QWORD *)v39 + 454)))
        goto LABEL_97;
    }
    else
    {
      if (!*((_BYTE *)v39 + 3647))
        goto LABEL_97;
      v51 = 0;
      while (*((unsigned __int8 *)v39 + v51 + 3624) == v50[v51])
      {
        if (v46 == ++v51)
          goto LABEL_97;
      }
    }
  }
  std::string::operator=((std::string *)((char *)v39 + 4112), (const std::string *)(a3 + 248));
  v39 = v182;
LABEL_97:
  if (ims::AccessNetwork::networkTypeChanged((ims::AccessNetwork *)((char *)v39 + 3376), (const ims::AccessNetwork *)a3))
  {
    goto LABEL_135;
  }
  v52 = *((unsigned __int8 *)v39 + 3399);
  if ((v52 & 0x80u) != 0)
    v52 = *((_QWORD *)v39 + 423);
  if (!v52)
  {
    v55 = (unsigned __int8 *)(a3 + 23);
    v59 = *(unsigned __int8 *)(a3 + 23);
    v56 = (uint64_t *)(a3 + 8);
    if ((v59 & 0x80u) != 0)
      v59 = *(_QWORD *)(a3 + 8);
    if (!v59)
      goto LABEL_116;
    v53 = *(unsigned __int8 *)(a3 + 47);
    if ((v53 & 0x80u) != 0)
      v53 = *(_QWORD *)(a3 + 32);
    goto LABEL_115;
  }
  v53 = *((unsigned __int8 *)v39 + 3423);
  if ((v53 & 0x80u) != 0)
    v53 = *((_QWORD *)v39 + 426);
  v55 = (unsigned __int8 *)(a3 + 23);
  v54 = *(unsigned __int8 *)(a3 + 23);
  v56 = (uint64_t *)(a3 + 8);
  if ((v54 & 0x80u) != 0)
    v54 = *(_QWORD *)(a3 + 8);
  if (!v54)
  {
LABEL_115:
    if (v53)
      goto LABEL_135;
    goto LABEL_116;
  }
  v57 = v53 != 0;
  v58 = *(unsigned __int8 *)(a3 + 47);
  if ((v58 & 0x80u) != 0)
    v58 = *(_QWORD *)(a3 + 32);
  if (((v57 ^ (v58 != 0)) & 1) != 0)
    goto LABEL_135;
LABEL_116:
  if (ims::AccessNetwork::networkTypeChanged((ims::AccessNetwork *)((char *)v39 + 3448), (const ims::AccessNetwork *)(a3 + 72)))
  {
    goto LABEL_135;
  }
  v60 = *((unsigned __int8 *)v39 + 3471);
  if ((v60 & 0x80u) != 0)
    v60 = *((_QWORD *)v39 + 432);
  if (v60)
  {
    v61 = *((unsigned __int8 *)v39 + 3495);
    if ((v61 & 0x80u) != 0)
      v61 = *((_QWORD *)v39 + 435);
    v62 = *(unsigned __int8 *)(a3 + 95);
    if ((v62 & 0x80u) != 0)
      v62 = *(_QWORD *)(a3 + 80);
    if (v62)
    {
      v63 = v61 != 0;
      v64 = *(unsigned __int8 *)(a3 + 119);
      if ((v64 & 0x80u) != 0)
        v64 = *(_QWORD *)(a3 + 104);
      if (((v63 ^ (v64 != 0)) & 1) != 0)
        goto LABEL_135;
      goto LABEL_191;
    }
    goto LABEL_134;
  }
  v65 = *(unsigned __int8 *)(a3 + 95);
  if ((v65 & 0x80u) != 0)
    v65 = *(_QWORD *)(a3 + 80);
  if (v65)
  {
    v61 = *(unsigned __int8 *)(a3 + 119);
    if ((v61 & 0x80u) != 0)
      v61 = *(_QWORD *)(a3 + 104);
LABEL_134:
    if (v61)
      goto LABEL_135;
  }
LABEL_191:
  v103 = *((unsigned __int8 *)v39 + 3399);
  if ((v103 & 0x80u) != 0)
    v103 = *((_QWORD *)v39 + 423);
  if (!v103)
    goto LABEL_204;
  v104 = *((unsigned __int8 *)v39 + 3423);
  if ((v104 & 0x80u) != 0)
    v104 = *((_QWORD *)v39 + 426);
  if (!v104)
    goto LABEL_204;
  v105 = *v55;
  if ((v105 & 0x80u) != 0)
    v105 = *v56;
  if (!v105)
    goto LABEL_204;
  v106 = *(unsigned __int8 *)(a3 + 47);
  if ((v106 & 0x80u) != 0)
    v106 = *(_QWORD *)(a3 + 32);
  if (!v106
    || std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)v39 + 3400, (unsigned __int8 *)(a3 + 24)))
  {
LABEL_204:
    v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(a1 + 24, v107);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v107 + 8), (uint64_t)"updateNetworkServices: Access network has NOT changed", 53);
    *(_BYTE *)(v107 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v107 + 64))(v107, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v73 = 0;
    v74 = 0;
    *(_BYTE *)(v107 + 17) = 0;
    goto LABEL_205;
  }
LABEL_135:
  v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(a1 + 24, v66);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)"updateNetworkServices: Access network has changed from ", 55);
  *(_BYTE *)(v66 + 17) = 0;
  v67 = ims::operator<<(v66, (uint64_t)v182 + 3376);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v67 + 8), (uint64_t)" to ", 4);
  *(_BYTE *)(v67 + 17) = 0;
  v68 = (_BYTE *)ims::operator<<(v67, a3);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v68[17] = 0;
  v69 = *(unsigned __int8 *)(a3 + 95);
  if ((v69 & 0x80u) != 0)
    v69 = *(_QWORD *)(a3 + 80);
  v70 = a3;
  if (v69)
  {
    v71 = *(unsigned __int8 *)(a3 + 119);
    if ((v71 & 0x80u) != 0)
      v71 = *(_QWORD *)(a3 + 104);
    if (v71)
      v70 = a3 + 72;
    else
      v70 = a3;
  }
  v72 = *(void (****)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 120) + 632);
  if (v72)
    (**v72)(v72, v70);
  if (a4)
  {
    BambiClient::updateAccessNetworkInfo(*(_QWORD **)(a1 + 168), (unsigned __int8 *)a2, (ims::AccessNetwork *)a3, 0);
    v73 = 0;
    v74 = 0;
    goto LABEL_205;
  }
  if (ims::AccessNetwork::networkTypeChanged((ims::AccessNetwork *)((char *)v182 + 3376), (const ims::AccessNetwork *)a3))
  {
    v73 = (ims::AccessNetwork::isHandover((ims::AccessNetwork *)a3, (const ims::AccessNetwork *)((char *)v182 + 3376)) & 1) != 0
       || ims::AccessNetwork::isCellularHandover((ims::AccessNetwork *)a3, (const ims::AccessNetwork *)((char *)v182 + 3376));
  }
  else
  {
    v73 = 0;
  }
  if (ims::AccessNetwork::isLTE((ims::AccessNetwork *)a3)
    && !ims::AccessNetwork::isLTE((ims::AccessNetwork *)((char *)v182 + 3376))
    && *(_QWORD *)(a1 + 328))
  {
    v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(a1 + 24, v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v75 + 8), (uint64_t)"updateNetworkServices: Moving to LTE RAT.  Requesting current barring information.", 82);
    *(_BYTE *)(v75 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v75 + 64))(v75, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v75 + 17) = 0;
    IMSNasDeviceClient::requestCurrentBarringInfo(*(IMSNasDeviceClient **)(a1 + 328));
  }
  if (!v73)
    goto LABEL_173;
  v76 = *(_QWORD *)(a1 + 328);
  if (!v76)
    goto LABEL_173;
  IMSNasDeviceClient::reportCallStatus(v76, *((unsigned int *)v182 + 1019), 3, 1, a3, 1, 0);
  if (!capabilities::radio::supportsRel16(v77))
    goto LABEL_173;
  v78 = v182;
  v79 = *((_QWORD *)v182 + 18);
  if (!v79)
    goto LABEL_173;
  v80 = *(_QWORD *)(v79 + 248);
  v81 = *(_QWORD *)(v79 + 256);
  v141.__r_.__value_.__r.__words[0] = v80;
  v141.__r_.__value_.__l.__size_ = v81;
  if (v81)
  {
    v82 = (unint64_t *)(v81 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  if (v80)
  {
    v84 = *((_QWORD *)v78 + 18);
    v85 = *(SipRegistrationClient **)(v84 + 248);
    v86 = *(_QWORD *)(v84 + 256);
    v175.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
    v175.__r_.__value_.__l.__size_ = v86;
    if (v86)
    {
      v87 = (unint64_t *)(v86 + 8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    v89 = SipRegistrationClient::nasImsRegInProgress(v85);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v175);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v141);
    if (!v89)
      goto LABEL_173;
    v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(a1 + 24, v90);
    v91 = (_BYTE *)ImsOutStream::operator<<(v90, "stop previous RegAccessCheck while on the previous cellular RAT...");
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v91 + 64))(v91, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v91[17] = 0;
    IMSNasDeviceClient::reportCallStatus(*(_QWORD *)(a1 + 328), *((unsigned int *)v182 + 1019), 2, 64, (uint64_t)v182 + 3376, 1, 0);
    v92 = *((_QWORD *)v182 + 18);
    v93 = *(SipRegistrationClient **)(v92 + 248);
    v94 = *(_QWORD *)(v92 + 256);
    v141.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
    v141.__r_.__value_.__l.__size_ = v94;
    if (v94)
    {
      v95 = (unint64_t *)(v94 + 8);
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    SipRegistrationClient::nasImsRegStop(v93);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v141);
LABEL_173:
  v97 = (ims::AccessNetwork *)((char *)v182 + 3376);
  if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)((char *)v182 + 3376)))
    v98 = ims::AccessNetwork::isLTE((ims::AccessNetwork *)a3) || ims::AccessNetwork::isNR((ims::AccessNetwork *)a3);
  else
    v98 = 0;
  if (ims::AccessNetwork::isLTE(v97) || (isWifi = ims::AccessNetwork::isNR(v97)))
    isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)a3);
  v74 = v98 | isWifi;
  if ((_DWORD)v74 == 1)
  {
    v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(a1 + 24, v100);
    if (v98)
      v101 = "WiFi->Cell";
    else
      v101 = "Cell->WiFi";
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), (uint64_t)v101, 10);
    *(_BYTE *)(v100 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), (uint64_t)" handover detected", 18);
    *(_BYTE *)(v100 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v100 + 64))(v100, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v100 + 17) = 0;
  }
  v102 = v139 != v138 || v73;
  if ((v102 & 1) == 0)
  {
    BambiClient::updateAccessNetworkInfo(*(_QWORD **)(a1 + 168), (unsigned __int8 *)a2, (ims::AccessNetwork *)a3, 0);
    v73 = 0;
  }
LABEL_205:
  std::string::basic_string[abi:ne180100]<0>(&v175, ",");
  ims::join<std::__wrap_iter<std::string const*>>(*(_QWORD *)(a3 + 272), *(_QWORD *)(a3 + 280), (uint64_t)&v175, &v141);
  IPTelephonyManager::updatePolicyInterfaceList(a1, &v141);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  if (*((_DWORD *)v182 + 50) != 2 || (a4 & 1) != 0)
    goto LABEL_232;
  if (!v137 && *((_BYTE *)v182 + 3676))
  {
    v114 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(a1 + 24, v114);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v114 + 8), (uint64_t)"updateNetworkServices: the IMS context has gone down, deregistering", 67);
    *(_BYTE *)(v114 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v114 + 64))(v114, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v114 + 17) = 0;
    v115 = 1;
LABEL_230:
    v116 = v182;
    BambiDeregisterHandler::handleEndRegistration(*((BambiDeregisterHandler **)v182 + 529), v115);
    SipStack::cleanUpLazuliMessagesAndSessions(v116);
    goto LABEL_231;
  }
  v108 = v139 != v138 || v73;
  if (v108 == 1)
  {
    v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(a1 + 24, v109);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)"updateNetworkServices: we are updating our registered services (RAT ", 68);
    *(_BYTE *)(v109 + 17) = 0;
    if (v73)
      v110 = "changed)";
    else
      v110 = "UNchanged)";
    if (v73)
      v111 = 8;
    else
      v111 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)v110, v111);
    *(_BYTE *)(v109 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v109 + 64))(v109, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v109 + 17) = 0;
    v112 = *(_DWORD *)(a3 + 216);
    if (v112)
    {
      v113 = *(_QWORD **)(a1 + 168);
      std::string::basic_string[abi:ne180100]<0>(&v141, (char *)&str_19_6);
      std::string::basic_string[abi:ne180100]<0>(&v175, "xx.xx.xx.xx");
      BambiClient::updateRegisteredServices(v113, (unsigned __int8 *)a2, v112, a3, (uint64_t)&v141, (uint64_t)&v175, 1);
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v175.__r_.__value_.__l.__data_);
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v141.__r_.__value_.__l.__data_);
      goto LABEL_231;
    }
    v115 = 0;
    goto LABEL_230;
  }
LABEL_231:
  v117 = ims::AccessNetwork::isWifi((ims::AccessNetwork *)a3);
  RadioVendor = TelephonyRadiosGetRadioVendor();
  if (!*((_BYTE *)v182 + 2657))
  {
    v124 = RadioVendor == 4 || (unint64_t)v117;
    v125 = *(unsigned __int8 *)(a3 + 48);
    v126 = *(unsigned __int8 *)(a3 + 304);
    v127 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(a1 + 24, v127);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v127 + 8), (uint64_t)"setMediaManagerForStack to AP: ", 31);
    *(_BYTE *)(v127 + 17) = 0;
    v128 = (_DWORD)v124 ? "Yes" : "No";
    v129 = (_DWORD)v124 ? 3 : 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v127 + 8), (uint64_t)v128, v129);
    *(_BYTE *)(v127 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v127 + 8), (uint64_t)" appId: ", 8);
    *(_BYTE *)(v127 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v127 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v127 + 8), (uint64_t)", isWifiToCellularHandover: ", 28);
    *(_BYTE *)(v127 + 17) = 0;
    v130 = (_DWORD)v124 ? "False" : "True";
    v131 = (_DWORD)v124 ? 5 : 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v127 + 8), (uint64_t)v130, v131);
    *(_BYTE *)(v127 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v127 + 64))(v127, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v127 + 17) = 0;
    v132 = *(_QWORD **)(a1 + 168);
    if (v132)
    {
      BambiClient::setMediaManagerForStack(v132, (void **)a2, v124, v125 != 0, v126);
      v133 = *(_QWORD *)(a1 + 288);
      (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 168) + 192))(&v141, *(_QWORD *)(a1 + 168), a2);
      IMSMetricsManager::logWiFiHandover(v133, &v141, v124, v74);
      v134 = (std::__shared_weak_count *)v141.__r_.__value_.__l.__size_;
      if (v141.__r_.__value_.__l.__size_)
      {
        v135 = (unint64_t *)(v141.__r_.__value_.__l.__size_ + 8);
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
    }
  }
LABEL_232:
  bzero(&v141, 0x2E0uLL);
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v142);
  v165 = 0u;
  v166 = 0u;
  v163 = 0u;
  v164 = 0u;
  v161 = 0u;
  v162 = 0u;
  v167 = 257;
  v169 = 256;
  v170 = 1;
  v168 = 0;
  SipStack::copyStackConfigs((SipStack *)((char *)v182 + 3352), (const ims::StackConfig *)&v141, v119);
  std::string::operator=(&v142, (const std::string *)a3);
  std::string::operator=(&v143, (const std::string *)(a3 + 24));
  v144 = *(_OWORD *)(a3 + 48);
  v145 = *(_BYTE *)(a3 + 64);
  std::string::operator=(&v146, (const std::string *)(a3 + 72));
  std::string::operator=(&v147, (const std::string *)(a3 + 96));
  v148 = *(_OWORD *)(a3 + 120);
  v149 = *(_BYTE *)(a3 + 136);
  std::string::operator=(&v150, (const std::string *)(a3 + 144));
  std::string::operator=(&v151, (const std::string *)(a3 + 168));
  v152 = *(_OWORD *)(a3 + 192);
  v153 = *(_BYTE *)(a3 + 208);
  v154 = *(_DWORD *)(a3 + 216);
  std::string::operator=(&v155, __str);
  std::string::operator=(&v156, (const std::string *)(a3 + 248));
  if (&v157 != (std::vector<std::string> *)(a3 + 272))
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v157, *(std::string **)(a3 + 272), *(__int128 **)(a3 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 280) - *(_QWORD *)(a3 + 272)) >> 3));
  v158 = *(_DWORD *)(a3 + 296);
  v159 = *(_BYTE *)(a3 + 300);
  v160 = *(_DWORD *)(a3 + 304);
  SipStack::setSimConfig(v182, (SipStack *)&v141, v120);
  ims::StackConfig::~StackConfig((void **)&v141.__r_.__value_.__l.__data_);
  v176[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v176 + *(_QWORD *)(v176[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v176[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v178) < 0)
    operator delete(*((void **)&v177 + 1));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v180);
LABEL_237:
  v121 = v183;
  if (v183)
  {
    p_shared_owners = (unint64_t *)&v183->__shared_owners_;
    do
      v123 = __ldaxr(p_shared_owners);
    while (__stlxr(v123 - 1, p_shared_owners));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
}

void sub_1BEDFAA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x350]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v6 - 112);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::getInstance(uint64_t *__return_ptr a1@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  v3 = gIPTelephonyManager;
  if (!gIPTelephonyManager)
  {
    _ZNSt3__115allocate_sharedB8ne180100I18IPTelephonyManagerNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v10);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)&gIPTelephonyManager, &v10);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (*((_QWORD *)&v10 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    IPTelephonyManager::createManagers((IPTelephonyManager *)gIPTelephonyManager);
    v3 = gIPTelephonyManager;
  }
  v7 = qword_1ED704428;
  *a1 = v3;
  a1[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
}

void BambiAccessBarring::accessNetworkChanged(BambiAccessBarring *this, int a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;

  if (*((unsigned __int8 *)this + 136) != a2)
  {
    *((_BYTE *)this + 136) = a2;
    v4 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
    if (a2)
      v5 = "";
    else
      v5 = "non-";
    if (a2)
      v6 = 0;
    else
      v6 = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)v5, v6);
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"LTE access network", 18);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    BambiAccessBarring::checkFlags(this);
  }
}

void BambiAccessBarring::registerForUac(BambiAccessBarring *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string __p;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v17 = 0;
  v18 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v2 && (v18 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v3 = *((_QWORD *)this + 18);
    v17 = v3;
  }
  else
  {
    v3 = 0;
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v16 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)this + 21);
      v15 = v7;
      if (v7 && v3)
      {
        v8 = *(unsigned int *)(v7 + 4076);
        if (*(char *)(v7 + 4159) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 4136), *(_QWORD *)(v7 + 4144));
        else
          __p = *(std::string *)(v7 + 4136);
        (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, &__p, v8, 4);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BEDFAE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void IPSecurityManager::updatePoliciesFromList(uint64_t **a1, void ***a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  _QWORD *v13;
  void (**v14)(ImsResult *__hidden);
  void **v15;
  void (**v16)(ImsResult *__hidden);
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  char **v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  const char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t **v38;
  _QWORD v39[9];
  std::string __p;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char **v44;
  char *v45[3];

  if (!a1[40])
  {
    v31 = a1 + 2;
    v32 = ((uint64_t (*)(uint64_t **))a1[2][8])(a1 + 2);
    (*(void (**)(_QWORD *, uint64_t))(*v31 + 16))(v31, v32);
    v33 = *(_QWORD **)(v32 + 8);
    v34 = "Not updating interfaces - security policy not initialized";
    v35 = 57;
LABEL_44:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    *(_BYTE *)(v32 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v32 + 17) = 0;
    return;
  }
  v3 = a1[23];
  if (!v3)
    goto LABEL_43;
  v4 = v3[21];
  if (!v4)
    goto LABEL_43;
  v6 = *(_QWORD *)(v4 + 768);
  v7 = *(std::__shared_weak_count **)(v4 + 776);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v6)
        goto LABEL_10;
      goto LABEL_43;
    }
  }
  if (!v6)
  {
LABEL_43:
    v37 = a1[2];
    v36 = a1 + 2;
    v32 = ((uint64_t (*)(_QWORD *))v37[7])(v36);
    (*(void (**)(_QWORD *, uint64_t))(*v36 + 16))(v36, v32);
    v33 = *(_QWORD **)(v32 + 8);
    v34 = "Network manager not initialized";
    v35 = 31;
    goto LABEL_44;
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy interfaces before update");
  v38 = a1 + 20;
  printInterfaces(&__p, (uint64_t *)a1 + 20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v44 = 0;
  v45[0] = 0;
  v45[1] = 0;
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v44, (uint64_t)v38);
  std::__tree<std::string>::destroy((uint64_t)v38, (char *)a1[21]);
  a1[20] = (uint64_t *)(a1 + 21);
  a1[21] = 0;
  a1[22] = 0;
  v11 = *a2;
  v12 = a2[1];
  if (*a2 != v12)
  {
    v13 = a1 + 2;
    v14 = &off_1E78B7238;
    do
    {
      v15 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&v44, v11);
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      __p.__r_.__value_.__r.__words[2] = 0;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      if (v45 == (char **)v15)
      {
        v16 = v14;
        v17 = a1[23][21];
        v18 = *(_QWORD *)(v17 + 768);
        v19 = *(std::__shared_weak_count **)(v17 + 776);
        v39[0] = v18;
        v39[1] = v19;
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v18 + 64))(v18, v11);
        v23 = v22;
        if (!v19)
          goto LABEL_23;
        v24 = (unint64_t *)&v19->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
          if (!v23)
          {
LABEL_26:
            ((void (*)(_QWORD *__return_ptr, uint64_t **, void **))(*a1)[8])(v39, a1, v11);
            v14 = v16;
            ImsResult::operator=((uint64_t)&__p, (uint64_t)v39);
            ImsResult::~ImsResult((ImsResult *)v39);
            goto LABEL_27;
          }
        }
        else
        {
LABEL_23:
          if (!v22)
            goto LABEL_26;
        }
        ((void (*)(_QWORD *__return_ptr, uint64_t **, uint64_t))(*a1)[7])(v39, a1, v23);
        v14 = v16;
        ImsResult::operator=((uint64_t)&__p, (uint64_t)v39);
        ImsResult::~ImsResult((ImsResult *)v39);
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
      else
      {
        std::__tree<std::string>::erase((uint64_t **)&v44, (uint64_t)v15);
      }
LABEL_27:
      if ((*(unsigned int (**)(std::string::size_type, _QWORD))(*(_QWORD *)__p.__r_.__value_.__l.__size_
                                                                          + 24))(__p.__r_.__value_.__l.__size_, LODWORD(__p.__r_.__value_.__r.__words[2])))
      {
        v26 = (*(uint64_t (**)(uint64_t **))(*v13 + 56))(a1 + 2);
        (*(void (**)(uint64_t **, uint64_t))(*v13 + 16))(a1 + 2, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Unable to add policy for interface ", 35);
        *(_BYTE *)(v26 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v26 + 32))(v26, v11);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v26 + 17) = 0;
      }
      else
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v38, v11, (uint64_t)v11);
      }
      ImsResult::~ImsResult((ImsResult *)&__p);
      v11 += 3;
    }
    while (v11 != v12);
  }
  v27 = (uint64_t *)v44;
  if (v44 != v45)
  {
    do
    {
      ((void (*)(uint64_t **, uint64_t *))(*a1)[9])(a1, v27 + 4);
      v28 = (char *)v27[1];
      if (v28)
      {
        do
        {
          v29 = (char **)v28;
          v28 = *(char **)v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (char **)v27[2];
          v30 = *v29 == (char *)v27;
          v27 = (uint64_t *)v29;
        }
        while (!v30);
      }
      v27 = (uint64_t *)v29;
    }
    while (v29 != v45);
  }
  PolicyApply(a1[40][9]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy interfaces after update");
  printInterfaces(&__p, (uint64_t *)v38);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::string>::destroy((uint64_t)&v44, v45[0]);
}

void sub_1BEDFB2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  std::__tree<std::string>::destroy(v25 - 112, *(char **)(v25 - 104));
  _Unwind_Resume(a1);
}

IMSClientManager *IMSClientManager::instance(IMSClientManager *this)
{
  IMSClientManager *v1;

  v1 = (IMSClientManager *)IMSClientManager::_instance;
  if (!IMSClientManager::_instance)
  {
    v1 = (IMSClientManager *)operator new();
    IMSClientManager::IMSClientManager(v1);
    IMSClientManager::_instance = (uint64_t)v1;
  }
  return v1;
}

void sub_1BEDFB3BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C40B0379EA3);
  _Unwind_Resume(a1);
}

void IMSClientManager::callOnMainQueue(IMSClientManager *a1)
{
  NSObject *v2;

  IMSClientManager::instance(a1);
  v2 = sImsDispatchQueue;
  if (sImsDispatchQueue
    || (v2 = dispatch_queue_create("com.apple.ipTelephony.queue", 0), (sImsDispatchQueue = (uint64_t)v2) != 0))
  {
    dispatch_retain(v2);
    dispatch_async(v2, a1);
    dispatch_release(v2);
  }
  else
  {
    dispatch_async(0, a1);
  }
}

std::string *LoggableString::LoggableString(std::string *a1, const std::string *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::operator=(a1, a2);
  return a1;
}

void sub_1BEDFB488(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *ImsLogFacility::output(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  return ImsLogger::output(*(_QWORD *)(a1 + 32), a2, a3, a1 + 8, a4, a5, *(_QWORD *)(a1 + 32));
}

uint64_t ImsLogFacility::logTimestamps(ImsLogFacility *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 4) + 280);
}

uint64_t ImsOutStream::putStreamFunction(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return a2(*(_QWORD *)(a1 + 8));
}

_QWORD *ImsOutStream::putLoggableString(ImsOutStream *this, const LoggableString *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const LoggableString **)a2;
    v4 = v3;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)a2, v4);
}

void ImsOutStream::putUnknownString(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v8;

  if (ImsOutStream::isRedacting((ImsOutStream *)a1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    ImsOutStream::putRedactedString((_QWORD *)a1, (uint64_t)__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = *(char *)(a2 + 23);
    if (v4 >= 0)
      v5 = a2;
    else
      v5 = *(_QWORD *)a2;
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(a2 + 23);
    else
      v6 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), v5, v6);
    *(_BYTE *)(a1 + 17) = 0;
  }
}

void sub_1BEDFB574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BambiClient::sipStack(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  void *v19;
  int v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::string __p;

  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 23, a2);
  if (v6)
  {
    v7 = *((_QWORD *)v6 + 6);
    *a3 = *((_QWORD *)v6 + 5);
    a3[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    return;
  }
  v10 = a1[21];
  if (!v10)
    goto LABEL_32;
  if (*(char *)(v10 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 4136), *(_QWORD *)(v10 + 4144));
  else
    __p = *(std::string *)(v10 + 4136);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v12 = a2[23];
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)a2 + 1);
  if (size != v12)
  {
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_32;
  }
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(unsigned __int8 **)a2;
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_34;
    v15 = 0;
    do
    {
      v16 = __p.__r_.__value_.__s.__data_[v15];
      v17 = v14[v15];
    }
    while (v16 == v17 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v15++);
    if (v16 == v17)
      goto LABEL_34;
LABEL_32:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v19 = (void *)__p.__r_.__value_.__r.__words[0];
  v20 = memcmp(__p.__r_.__value_.__l.__data_, v14, __p.__r_.__value_.__l.__size_);
  operator delete(v19);
  if (v20)
    goto LABEL_32;
LABEL_34:
  v21 = a1[22];
  *a3 = a1[21];
  a3[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
}

void BambiClient::updateAccessNetworkInfo(_QWORD *a1, unsigned __int8 *a2, ims::AccessNetwork *a3, char a4)
{
  SipStack *v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::string::size_type size;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::string *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;
  _BOOL4 v26;
  void *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::string v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  v37 = 0;
  v38 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 192))(&v37);
  v8 = (SipStack *)v37;
  if (v37)
  {
    if (ims::AccessNetwork::isNR((ims::AccessNetwork *)(v37 + 3136)) && ims::AccessNetwork::isLTE(a3))
    {
      v10 = (_QWORD *)a1[46];
      if (v10)
      {
        while (1)
        {
          v11 = v10[2];
          if (v11)
            break;
LABEL_44:
          v10 = (_QWORD *)*v10;
          if (!v10)
          {
            v8 = (SipStack *)v37;
            goto LABEL_49;
          }
        }
        v12 = *(std::__shared_weak_count **)(v11 + 360);
        if (v12)
        {
          v13 = std::__shared_weak_count::lock(v12);
          if (v13)
          {
            v14 = *(_QWORD *)(v11 + 352);
            goto LABEL_11;
          }
        }
        else
        {
          v13 = 0;
        }
        v14 = 0;
LABEL_11:
        if (*(char *)(v14 + 4159) < 0)
          std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v14 + 4136), *(_QWORD *)(v14 + 4144));
        else
          v36 = *(std::string *)(v14 + 4136);
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
        else
          size = v36.__r_.__value_.__l.__size_;
        v16 = a2[23];
        v17 = (char)v16;
        if ((v16 & 0x80u) != 0)
          v16 = *((_QWORD *)a2 + 1);
        if (size == v16)
        {
          if (v17 >= 0)
            v9 = a2;
          else
            v9 = *(unsigned __int8 **)a2;
          if ((*((_BYTE *)&v36.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            v27 = (void *)v36.__r_.__value_.__r.__words[0];
            v26 = memcmp(v36.__r_.__value_.__l.__data_, v9, v36.__r_.__value_.__l.__size_) == 0;
            goto LABEL_36;
          }
          if (!*((_BYTE *)&v36.__r_.__value_.__s + 23))
          {
            v26 = 1;
            if (v13)
              goto LABEL_38;
            goto LABEL_42;
          }
          v18 = HIBYTE(v36.__r_.__value_.__r.__words[2]) - 1;
          v19 = &v36;
          do
          {
            v21 = v19->__r_.__value_.__s.__data_[0];
            v19 = (std::string *)((char *)v19 + 1);
            v20 = v21;
            v23 = *v9++;
            v22 = v23;
            v25 = v18-- != 0;
            v26 = v20 == v22;
          }
          while (v20 == v22 && v25);
          if ((*((_BYTE *)&v36.__r_.__value_.__s + 23) & 0x80) == 0)
          {
LABEL_37:
            if (v13)
            {
LABEL_38:
              p_shared_owners = (unint64_t *)&v13->__shared_owners_;
              do
                v29 = __ldaxr(p_shared_owners);
              while (__stlxr(v29 - 1, p_shared_owners));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v13->__on_zero_shared)(v13, v9);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
LABEL_42:
            if (v26)
              SipTimerContainer::cancelTimer((SipTimerContainer *)(v10[2] + 208), (std::string *)"EPSWatchdogTimer");
            goto LABEL_44;
          }
        }
        else
        {
          v26 = 0;
          if ((*((_BYTE *)&v36.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_37;
        }
        v27 = (void *)v36.__r_.__value_.__r.__words[0];
LABEL_36:
        operator delete(v27);
        goto LABEL_37;
      }
    }
LABEL_49:
    SipStack::updateAccessNetworkInfo(v8, (std::string *)a3, a4);
  }
  else
  {
    v31 = a1[2];
    v30 = a1 + 2;
    v32 = (*(uint64_t (**)(_QWORD *))(v31 + 56))(v30);
    (*(void (**)(_QWORD *, uint64_t))(*v30 + 16))(v30, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"Unable to update network info for invalid stack ", 48);
    *(_BYTE *)(v32 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v32 + 32))(v32, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v32 + 17) = 0;
  }
  v33 = v38;
  if (v38)
  {
    v34 = (unint64_t *)&v38->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1BEDFB9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<MessageSession,std::allocator<MessageSession>,std::string const&,void>(const std::string *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x448uLL);
  std::__shared_ptr_emplace<MessageSession>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<MessageSession>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 18, (uint64_t)(v4 + 3));
}

void sub_1BEDFBA34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MessageSession>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<MessageSession>,0>(_QWORD *a1, const std::string *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78B71E8;
  MessageSession::MessageSession((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1BEDFBA7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MessageSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78B71E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MessageSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78B71E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<MessageSession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void ImsResultDomainPosix::~ImsResultDomainPosix(void **this)
{
  *this = off_1E78B7320;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78B7320;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

void ImsResultDomainBambi::~ImsResultDomainBambi(void **this)
{
  *this = off_1E78B7320;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78B7320;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

void ImsResult::ImsResult(ImsResult *this, const ImsResult *a2)
{
  ImsStringOutStream **v4;
  ImsStringOutStream *v5;
  ImsResult *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E78B7238;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  v4 = (ImsStringOutStream **)((char *)this + 24);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  std::string::operator=((std::string *)this + 2, (const std::string *)a2 + 2);
  if (*((_QWORD *)a2 + 3))
  {
    v5 = (ImsStringOutStream *)operator new();
    ImsStringOutStream::ImsStringOutStream(v5, *((const ImsStringOutStream **)a2 + 3));
  }
  else
  {
    v5 = 0;
  }
  *v4 = v5;
  if (*((_QWORD *)a2 + 4))
  {
    v6 = (ImsResult *)operator new();
    ImsResult::ImsResult(v6, *((const ImsResult **)a2 + 4));
  }
  else
  {
    v6 = 0;
  }
  *((_QWORD *)this + 4) = v6;
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  *((_QWORD *)this + 5) = v7;
}

void sub_1BEDFBD08(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1C3B87100](v3, 0x10F3C40DD1005D0);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::ImsResult(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return a1;
}

void sub_1BEDFBDE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t ImsResult::description@<X0>(ImsResult *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    return std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*(_QWORD *)(v2 + 24) + 8, a2);
  else
    return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), *((unsigned int *)this + 4));
}

void ImsResult::setCause(ImsResult *this, const ImsResult *a2)
{
  ImsResult *v4;

  v4 = (ImsResult *)operator new();
  ImsResult::ImsResult(v4, a2);
  *((_QWORD *)this + 4) = v4;
}

void sub_1BEDFBEC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10F3C40DD1005D0);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  ImsStringOutStream *v5;
  uint64_t v6;
  ImsResult *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (*(_QWORD *)(a2 + 24))
    {
      v5 = (ImsStringOutStream *)operator new();
      ImsStringOutStream::ImsStringOutStream(v5, *(const ImsStringOutStream **)(a2 + 24));
    }
    else
    {
      v5 = 0;
    }
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (*(_QWORD *)(a2 + 32))
    {
      v7 = (ImsResult *)operator new();
      ImsResult::ImsResult(v7, *(const ImsResult **)(a2 + 32));
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(a1 + 32) = v7;
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *(_QWORD *)(a2 + 40);
    if (v9)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    *(_QWORD *)(a1 + 40) = v9;
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
  }
  return a1;
}

void sub_1BEDFC000(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10F3C40DD1005D0);
  _Unwind_Resume(a1);
}

ImsOutStream *ImsResult::log(ImsResult *this, ImsOutStream *a2)
{
  ImsStringOutStream *v4;
  void *v5;
  std::string v7;
  std::string __p;

  LoggableString::LoggableString(&__p, (const std::string *)(*((_QWORD *)this + 1) + 8));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = (ImsStringOutStream *)*((_QWORD *)this + 3);
  if (v4)
  {
    ImsStringOutStream::loggableStr(v4, &__p);
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    v5 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_10;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(&v7, *((_QWORD *)this + 1), *((unsigned int *)this + 4));
  LoggableString::LoggableString(&__p, &v7);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (void *)v7.__r_.__value_.__r.__words[0];
LABEL_10:
    operator delete(v5);
  }
LABEL_11:
  if (*((_QWORD *)this + 4))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)", caused by ", 12);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(_QWORD, ImsOutStream *))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), a2);
  }
  return a2;
}

void sub_1BEDFC220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void ImsStringOutStream::loggableStr(ImsStringOutStream *this@<X0>, std::string *a2@<X8>)
{
  std::string __p;

  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)this + 3) + 8, &__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEDFC2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsResult::loggableName(ImsResult *this@<X0>, std::string *a2@<X8>)
{
  std::string __p;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = 0;
  v5 = 0u;
  v6 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v5, 1);
  (*(void (**)(ImsResult *, __int128 *))(*(_QWORD *)this + 16))(this, &v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v6 + 1) + 8, &__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v5 = &off_1E78D7A10;
  if ((_BYTE)v6)
  {
    if (*((_QWORD *)&v5 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 8))(*((_QWORD *)&v5 + 1));
  }
}

void sub_1BEDFC388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  if (a18)
  {
    if (a17)
      (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

std::string *ImsResultDomainPosix::textForResultCode@<X0>(int __errnum@<W1>, std::string *a2@<X8>)
{
  __int128 v5;
  std::string::size_type v6;
  _OWORD v7[4];
  void *__p[2];
  __int128 v9;
  __int128 v10;
  _BYTE v11[144];
  uint64_t v12;
  _OWORD __strerrbuf[32];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(__strerrbuf, 0, sizeof(__strerrbuf));
  if (!strerror_r(__errnum, (char *)__strerrbuf, 0x1FFuLL))
    return std::string::__assign_external(a2, (const std::string::value_type *)__strerrbuf);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v7, 0, sizeof(v7));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Unknown Error ", 14);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v7 + 8, &v5);
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  a2->__r_.__value_.__r.__words[2] = v6;
  *(_QWORD *)&v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(*(_QWORD *)&v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v7[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v9) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (std::string *)MEMORY[0x1C3B8707C](v11);
}

void sub_1BEDFC57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1BEDFC678(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](a1 + 112);
  return a1;
}

_QWORD *ImsResultDomainBambi::textForResultCode@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  switch(a1)
  {
    case 1073741825:
      v3 = "Invalid Argument";
      break;
    case 1073741826:
      v3 = "Invalid State";
      break;
    case 1073741827:
      v3 = "Uninitialized";
      break;
    case 1073741828:
      v3 = "Sip Format Error";
      break;
    case 1073741829:
    case 1073741846:
      goto LABEL_7;
    case 1073741830:
      v3 = "Timed Out";
      break;
    case 1073741831:
      v3 = "Media Timed Out";
      break;
    case 1073741832:
      v3 = "Auth Sync Failure";
      break;
    case 1073741833:
      v3 = "Not Implemented";
      break;
    case 1073741834:
      v3 = "Not Available";
      break;
    case 1073741835:
      v3 = "Parse Error";
      break;
    case 1073741836:
      v3 = "Not Found";
      break;
    case 1073741837:
      v3 = "Empty";
      break;
    case 1073741838:
      v3 = "Pending";
      break;
    case 1073741839:
      v3 = "Remote Termination";
      break;
    case 1073741840:
      v3 = "Socket Send Error";
      break;
    case 1073741841:
      v3 = "Canceled";
      break;
    case 1073741842:
      v3 = "Network Error";
      break;
    case 1073741843:
      v3 = "Socket Closed By Peer Debug";
      break;
    case 1073741844:
      v3 = "Network Unreachable Error";
      break;
    case 1073741845:
      v3 = "AVConferenced crashed";
      break;
    case 1073741847:
      v3 = "Limited Connectivity";
      break;
    case 1073741848:
      v3 = "Authentication Failed";
      break;
    default:
      if (a1)
      {
        if (a1 == 3)
          v3 = "Accepted";
        else
LABEL_7:
          v3 = "Unknown Error";
      }
      else
      {
        v3 = "Success";
      }
      break;
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void ims::result::resultWithCause(ims::result *this@<X0>, const ImsResult *a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  ImsResult::ImsResult((ImsResult *)a3, this);
  ImsResult::setCause((ImsResult *)a3, a2);
}

void sub_1BEDFC8D0(_Unwind_Exception *a1)
{
  ImsResult *v1;

  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

uint64_t ims::result::log(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16)))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = (_BYTE *)ImsLogger::error(ims::_logger, a1, (uint64_t)__p);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 16))(a2, v4);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v4[17] = 0;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  return a2;
}

void sub_1BEDFC9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::endl[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1BEDFCA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t ims::result::log@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v6;
  void *__p[2];
  char v9;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16)))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = (_BYTE *)ImsLogger::error(ims::_logger, a1, (uint64_t)__p);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 16))(a2, v6);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v6[17] = 0;
    if (v9 < 0)
      operator delete(__p[0]);
  }
  return ImsResult::ImsResult(a3, a2);
}

void sub_1BEDFCB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ImsResultDomainPosix::isError(ImsResultDomainPosix *this, int a2)
{
  return a2 != 0;
}

uint64_t ImsResultDomainBambi::isError(ImsResultDomainBambi *this, unsigned int a2)
{
  return (a2 >> 30) & 1;
}

uint64_t ImsResultDomain::ImsResultDomain(uint64_t a1, const std::string *a2)
{
  *(_QWORD *)a1 = off_1E78B7320;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  return a1;
}

void sub_1BEDFCC38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E78B6820, MEMORY[0x1E0DE42D0]);
}

void sub_1BEDFCCBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0;
  v13[1] = 0;
  MEMORY[0x1C3B86EC0](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1C3B86ECC](v13);
  return a1;
}

void sub_1BEDFD088(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1C3B86ECC](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1BEDFD068);
}

void sub_1BEDFD0D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      __p[0] = 0;
      __p[1] = 0;
      v18 = 0;
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(v18) < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1BEDFD20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t _GLOBAL__sub_I_ImsResult_cpp()
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "POSIX");
  ImsResultDomain::ImsResultDomain((uint64_t)&_posixDomain, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  _posixDomain = (uint64_t)off_1E78B7280;
  __cxa_atexit((void (*)(void *))ImsResultDomainPosix::~ImsResultDomainPosix, &_posixDomain, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Bambi");
  ImsResultDomain::ImsResultDomain((uint64_t)&_bambiDomain, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  _bambiDomain = (uint64_t)off_1E78B72D8;
  return __cxa_atexit((void (*)(void *))ImsResultDomainBambi::~ImsResultDomainBambi, &_bambiDomain, &dword_1BEDF4000);
}

void sub_1BEDFD39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsOutStream::operator<<(uint64_t a1, char *__s)
{
  _QWORD *v4;
  size_t v5;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__s, v5);
  *(_BYTE *)(a1 + 17) = 0;
  return a1;
}

uint64_t AVCAudioSession::AVCAudioSession(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, ImsPrefs *a5, uint64_t *a6, __int128 *a7, dispatch_object_t *a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  BOOL v38;
  uint64_t v39;
  void *__p[2];
  char v42;
  void *v43[2];
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;

  *(_QWORD *)(a1 + 112) = &off_1E78B7B60;
  v11 = (std::__shared_weak_count *)a2[1];
  v49 = *a2;
  v50 = v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = (std::__shared_weak_count *)a4[1];
  v47 = *a4;
  v48 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (std::__shared_weak_count *)a6[1];
  v45 = *a6;
  v46 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  AVCRTPSession<AVCAudioStream>::AVCRTPSession(a1, (uint64_t *)&off_1E78B75C8, &v49, a3, &v47, a5, &v45, a7, a8);
  v20 = v46;
  if (v46)
  {
    v21 = (unint64_t *)&v46->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v48;
  if (v48)
  {
    v24 = (unint64_t *)&v48->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v50)
    std::__shared_weak_count::__release_weak(v50);
  *(_QWORD *)a1 = &off_1E78B7368;
  *(_QWORD *)(a1 + 24) = &unk_1E78B7438;
  *(_QWORD *)(a1 + 112) = &unk_1E78B7560;
  *(_QWORD *)(a1 + 552) = &unk_1E78B75A8;
  v26 = *a4;
  v27 = *(_QWORD **)(*a4 + 232);
  if (!v27)
    goto LABEL_33;
  v28 = *a4 + 232;
  do
  {
    v29 = v27[4];
    v30 = v29 >= a3;
    if (v29 >= a3)
      v31 = v27;
    else
      v31 = v27 + 1;
    if (v30)
      v28 = (uint64_t)v27;
    v27 = (_QWORD *)*v31;
  }
  while (*v31);
  if (v28 != *a4 + 232 && *(_QWORD *)(v28 + 32) <= a3)
  {
    v38 = 1;
  }
  else
  {
LABEL_33:
    v32 = v26 + 256;
    v33 = *(_QWORD **)(v26 + 256);
    if (!v33)
      goto LABEL_44;
    v34 = v26 + 256;
    do
    {
      v35 = v33[4];
      v36 = v35 >= a3;
      if (v35 >= a3)
        v37 = v33;
      else
        v37 = v33 + 1;
      if (v36)
        v34 = (uint64_t)v33;
      v33 = (_QWORD *)*v37;
    }
    while (*v37);
    if (v34 == v32 || *(_QWORD *)(v34 + 32) > a3)
LABEL_44:
      v34 = v32;
    v38 = v34 != v32;
  }
  *(_BYTE *)(a1 + 560) = v38;
  *(_BYTE *)(a1 + 609) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_WORD *)(a1 + 676) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  std::string::basic_string[abi:ne180100]<0>(v43, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v39 = ImsLogger::debug(ims::_logger, (uint64_t)v43, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"AVCAudioSession", 15);
  *(_BYTE *)(v39 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v39 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v39 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v39 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v39 + 17) = 0;
  if (v42 < 0)
    operator delete(__p[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  return a1;
}

void sub_1BEDFD720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;
  std::__shared_weak_count *v25;

  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v23 + 639) < 0)
    operator delete(*(void **)(v23 + 616));
  v25 = *(std::__shared_weak_count **)(v23 + 576);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  AVCRTPSession<AVCAudioStream>::~AVCRTPSession(v23, (uint64_t *)&off_1E78B75C8);
  _Unwind_Resume(a1);
}

void AVCAudioSession::~AVCAudioSession(AVCAudioSession *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  *(_QWORD *)this = &off_1E78B7368;
  *((_QWORD *)this + 3) = &unk_1E78B7438;
  *((_QWORD *)this + 14) = &unk_1E78B7560;
  *((_QWORD *)this + 69) = &unk_1E78B75A8;
  std::string::basic_string[abi:ne180100]<0>(v6, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"~AVCAudioSession", 16);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  AVCRTPStackController::sendNotifyIpVersionReq(*((AVCRTPStackController **)this + 63), *((_DWORD *)this + 168));
  if (objc_msgSend(*((id *)this + 60), "delegate"))
  {

    objc_msgSend(*((id *)this + 60), "setDelegate:", 0);
  }
  nw_release(*((void **)this + 74));
  nw_release(*((void **)this + 75));
  if (*((char *)this + 639) < 0)
    operator delete(*((void **)this + 77));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  AVCRTPSession<AVCAudioStream>::~AVCRTPSession((uint64_t)this, (uint64_t *)&off_1E78B75C8);
}

{
  AVCAudioSession::~AVCAudioSession(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'AVCAudioSession::~AVCAudioSession(AVCAudioSession *this)
{
  AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 24));
}

{
  AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 112));
}

{
  AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 552));
}

{
  AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

{
  AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 112));
  JUMPOUT(0x1C3B87100);
}

{
  AVCAudioSession::~AVCAudioSession((AVCAudioSession *)((char *)this - 552));
  JUMPOUT(0x1C3B87100);
}

void AVCAudioSession::initialize(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const std::string *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  ImsPrefs *v19;
  void **EnableAPOnlyModeKey;
  void *v21;
  int v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  ImsPrefs *v28;
  void **v29;
  void *v30;
  int v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_weak_owners;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  RTPTransportManager *v47;
  int v48;
  uint64_t v49;
  uint64_t v51;
  std::__shared_weak_count *v52;
  void (***v53)(void *, void **, uint64_t);
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  RTPTransportManager *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  void (***v67)(void *, void **, uint64_t);
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _BOOL4 v78;
  std::__shared_weak_count *v79;
  void *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  void (***v88)(void *, void **, _QWORD);
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  BOOL v101;
  std::__shared_weak_count *v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  const void *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count *v131;
  void (***v132)(void *, void **, uint64_t);
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  void *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  void *v153;
  void *v154;
  _QWORD aBlock[7];
  std::__shared_weak_count *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  int v161;
  int v162;
  char v163;
  uint64_t v164;
  void *v165[2];
  void *v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  void *v170;
  std::__shared_weak_count *v171;
  void *v172;
  std::__shared_weak_count *v173;
  void *__p;
  uint64_t *v175;
  int v176;
  char v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  void *v183;
  std::__shared_weak_count *v184;
  uint64_t v185;
  char v186;
  void *v187[2];
  _BYTE v188[72];
  uint64_t v189;
  std::__shared_weak_count *v190;
  void *v191;
  std::__shared_weak_count *v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  uint64_t v195;
  std::__shared_weak_count *v196;

  std::string::basic_string[abi:ne180100]<0>(&v183, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v11 = ImsLogger::debug(ims::_logger, (uint64_t)&v183, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"initialize", 10);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v11 + 17) = 0;
  v12 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (v177 < 0)
    operator delete(__p);
  if (SHIBYTE(v185) < 0)
    operator delete(v183);
  v13 = (void *)MEMORY[0x1C3B876AC](v12);
  v195 = 0;
  v196 = 0;
  v14 = (std::__shared_weak_count *)a7[1];
  if (!v14 || (v196 = std::__shared_weak_count::lock(v14)) == 0 || (v195 = *a7, (v15 = v195) == 0))
  {
    std::string::basic_string[abi:ne180100]<0>(&v183, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::error(ims::_logger, (uint64_t)&v183, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"SDPSession expired", 18);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (v177 < 0)
      operator delete(__p);
    if (SHIBYTE(v185) < 0)
      operator delete(v183);
    goto LABEL_266;
  }
  v183 = 0;
  v184 = 0;
  v16 = *(std::__shared_weak_count **)(v195 + 128);
  if (v16)
  {
    v16 = std::__shared_weak_count::lock(v16);
    v17 = v16;
    v184 = v16;
    if (v16)
    {
      v16 = *(std::__shared_weak_count **)(v15 + 120);
      v183 = v16;
    }
  }
  else
  {
    v17 = 0;
  }
  v19 = (ImsPrefs *)SipStack::prefs((SipStack *)v16);
  EnableAPOnlyModeKey = (void **)ImsPrefs::getEnableAPOnlyModeKey(v19);
  v21 = ImsPrefs::prefWithKey(v19, EnableAPOnlyModeKey);
  if (v21)
  {
    v22 = (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 40))(v21);
    if (!v22)
      goto LABEL_22;
  }
  else if (!*((_BYTE *)EnableAPOnlyModeKey + 57))
  {
    LOBYTE(v22) = 0;
    goto LABEL_22;
  }
  LOBYTE(v22) = _os_feature_enabled_impl();
LABEL_22:
  *(_BYTE *)(a1 + 584) = v22;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v25 = v195;
  v183 = 0;
  v184 = 0;
  v26 = *(std::__shared_weak_count **)(v195 + 128);
  if (v26)
  {
    v26 = std::__shared_weak_count::lock(v26);
    v27 = v26;
    v184 = v26;
    if (v26)
    {
      v26 = *(std::__shared_weak_count **)(v25 + 120);
      v183 = v26;
    }
  }
  else
  {
    v27 = 0;
  }
  v28 = (ImsPrefs *)SipStack::prefs((SipStack *)v26);
  v29 = (void **)ImsPrefs::getEnableAPOnlyModeKey(v28);
  v30 = ImsPrefs::prefWithKey(v28, v29);
  if (v30)
  {
    v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 40))(v30);
    if (!v27)
      goto LABEL_38;
  }
  else
  {
    v31 = *((_BYTE *)v29 + 57) != 0;
    if (!v27)
      goto LABEL_38;
  }
  v32 = (unint64_t *)&v27->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v31)
      goto LABEL_45;
    goto LABEL_39;
  }
LABEL_38:
  if (!v31)
    goto LABEL_45;
LABEL_39:
  v34 = *(_QWORD *)(a1 + 504);
  v35 = (std::__shared_weak_count *)a7[1];
  v193 = *a7;
  v194 = v35;
  if (v35)
  {
    p_shared_weak_owners = (unint64_t *)&v35->__shared_weak_owners_;
    do
      v37 = __ldxr(p_shared_weak_owners);
    while (__stxr(v37 + 1, p_shared_weak_owners));
  }
  AVCRTPStackController::sendNotifyIpVersionReq(v34, &v193);
  if (v194)
    std::__shared_weak_count::__release_weak(v194);
LABEL_45:
  v38 = v195;
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (v39 == 2)
  {
    if (*(_BYTE *)(v38 + 584))
    {
      v40 = v38 + 152;
      goto LABEL_53;
    }
  }
  else if (v39 == 6 && *(_BYTE *)(v38 + 1856))
  {
    v40 = v38 + 1496;
    goto LABEL_53;
  }
  if (*(_BYTE *)(v38 + 1328))
  {
    v40 = v38 + 1032;
LABEL_53:
    if (*(_BYTE *)(a1 + 584))
    {
      std::string::basic_string[abi:ne180100]<0>(&v183, "avc.audio.session");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v41 = ImsLogger::debug(ims::_logger, (uint64_t)&v183, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"Use skywalk channels instead of sockets", 39);
      *(_BYTE *)(v41 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v41 + 17) = 0;
      if (v177 < 0)
        operator delete(__p);
      if (SHIBYTE(v185) < 0)
        operator delete(v183);
      *(_BYTE *)(a1 + 608) = a3;
      std::string::operator=((std::string *)(a1 + 616), a5);
      v42 = *(_QWORD *)(v40 + 8);
      v43 = *(std::__shared_weak_count **)(v40 + 16);
      v189 = v42;
      v190 = v43;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      if (a3)
      {
        v46 = v196;
      }
      else
      {
        if (!v42 && !(*(char *)(a1 + 543) < 0 ? *(_QWORD *)(a1 + 528) : *(unsigned __int8 *)(a1 + 543)))
          *(_BYTE *)(a1 + 609) = 1;
        v46 = v196;
        if (!*(_BYTE *)(a1 + 609))
        {
          v187[0] = (void *)v38;
          v187[1] = v196;
          if (v196)
          {
            v94 = (unint64_t *)&v196->__shared_weak_owners_;
            do
              v95 = __ldxr(v94);
            while (__stxr(v95 + 1, v94));
          }
          AVCAudioSession::scheduleSkywalkInit((uint64_t)v188, (_QWORD *)a1, v187);
          ImsResult::~ImsResult((ImsResult *)v188);
          if (!v46)
            goto LABEL_165;
          v93 = v46;
          goto LABEL_164;
        }
      }
      v181 = v38;
      v182 = v46;
      if (v46)
      {
        v75 = (unint64_t *)&v46->__shared_weak_owners_;
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(&v183, a1, &v181);
      v178 = 0u;
      v179 = 0u;
      v180 = 0u;
      __p = &off_1E78B7238;
      v175 = &_bambiDomain;
      v176 = 0;
      v78 = v184 == (std::__shared_weak_count *)&_bambiDomain && (_DWORD)v185 == 0;
      ImsResult::~ImsResult((ImsResult *)&__p);
      ImsResult::~ImsResult((ImsResult *)&v183);
      if (v182)
        std::__shared_weak_count::__release_weak(v182);
      if (v78)
      {
        v183 = 0;
        v184 = 0;
        v79 = *(std::__shared_weak_count **)(a1 + 40);
        if (v79)
        {
          v184 = std::__shared_weak_count::lock(v79);
          if (v184)
          {
            v80 = *(void **)(a1 + 32);
            v183 = v80;
            if (v80)
            {
              RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v172);
              (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v80 + 16))(v80, &v172, 0);
              v81 = v173;
              if (v173)
              {
                v82 = (unint64_t *)&v173->__shared_owners_;
                do
                  v83 = __ldaxr(v82);
                while (__stlxr(v83 - 1, v82));
                if (!v83)
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
              }
            }
          }
        }
        v84 = v184;
        if (!v184)
          goto LABEL_165;
        v85 = (unint64_t *)&v184->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
      }
      else
      {
        v183 = 0;
        v184 = 0;
        v87 = *(std::__shared_weak_count **)(a1 + 40);
        if (v87)
        {
          v184 = std::__shared_weak_count::lock(v87);
          if (v184)
          {
            v88 = *(void (****)(void *, void **, _QWORD))(a1 + 32);
            v183 = v88;
            if (v88)
            {
              RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v170);
              (**v88)(v88, &v170, 0);
              v89 = v171;
              if (v171)
              {
                v90 = (unint64_t *)&v171->__shared_owners_;
                do
                  v91 = __ldaxr(v90);
                while (__stlxr(v91 - 1, v90));
                if (!v91)
                {
                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                  std::__shared_weak_count::__release_weak(v89);
                }
              }
            }
          }
        }
        v84 = v184;
        if (!v184)
          goto LABEL_165;
        v92 = (unint64_t *)&v184->__shared_owners_;
        do
          v86 = __ldaxr(v92);
        while (__stlxr(v86 - 1, v92));
      }
      if (v86)
      {
LABEL_165:
        v57 = v190;
        if (!v190)
          goto LABEL_266;
        v96 = (unint64_t *)&v190->__shared_owners_;
        do
          v59 = __ldaxr(v96);
        while (__stlxr(v59 - 1, v96));
        goto LABEL_264;
      }
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      v93 = v84;
LABEL_164:
      std::__shared_weak_count::__release_weak(v93);
      goto LABEL_165;
    }
    v189 = 0;
    v190 = 0;
    v47 = *(RTPTransportManager **)(a1 + 48);
    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    if (v48 == 2)
    {
      if (*(_BYTE *)(v38 + 584))
      {
        v49 = v38 + 152;
        goto LABEL_90;
      }
    }
    else if (v48 == 6 && *(_BYTE *)(v38 + 1856))
    {
      v49 = v38 + 1496;
      goto LABEL_90;
    }
    v49 = v38 + 1032;
    if (!*(_BYTE *)(v38 + 1328))
      v49 = 0;
LABEL_90:
    RTPTransportManager::getTransport(v47, *(unsigned __int16 *)(v49 + 24), &v189);
    v168 = 0;
    v169 = 0;
    v60 = *(RTPTransportManager **)(a1 + 48);
    v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    if (v61 == 2)
    {
      if (*(_BYTE *)(v38 + 584))
      {
        v62 = v38 + 152;
        goto LABEL_98;
      }
    }
    else if (v61 == 6 && *(_BYTE *)(v38 + 1856))
    {
      v62 = v38 + 1496;
      goto LABEL_98;
    }
    v62 = v38 + 1032;
    if (!*(_BYTE *)(v38 + 1328))
      v62 = 0;
LABEL_98:
    RTPTransportManager::getTransport(v60, (unsigned __int16)(*(_WORD *)(v62 + 24) + 1), &v168);
    v63 = v189;
    if (!v189)
    {
      std::string::basic_string[abi:ne180100]<0>(&v183, "avc.audio.session");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v65 = ImsLogger::error(ims::_logger, (uint64_t)&v183, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v65 + 8), (uint64_t)"initialize", 10);
      *(_BYTE *)(v65 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v65 + 8), (uint64_t)" No RTP socket associated with port ", 36);
      *(_BYTE *)(v65 + 17) = 0;
      (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
      std::ostream::operator<<();
      *(_BYTE *)(v65 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v65 + 8), (uint64_t)" for session ", 13);
      *(_BYTE *)(v65 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v65 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v65 + 17) = 0;
      if (v177 < 0)
        operator delete(__p);
      if (SHIBYTE(v185) < 0)
        operator delete(v183);
      v183 = 0;
      v184 = 0;
      v66 = *(std::__shared_weak_count **)(a1 + 40);
      if (v66)
      {
        v184 = std::__shared_weak_count::lock(v66);
        if (v184)
        {
          v67 = *(void (****)(void *, void **, uint64_t))(a1 + 32);
          v183 = v67;
          if (v67)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v166);
            (**v67)(v67, &v166, 9);
            v68 = v167;
            if (v167)
            {
              v69 = (unint64_t *)&v167->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
          }
        }
      }
      v71 = v184;
      if (v184)
      {
        v72 = (unint64_t *)&v184->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          v74 = v71;
LABEL_228:
          std::__shared_weak_count::__release_weak(v74);
        }
      }
LABEL_256:
      v146 = v169;
      if (v169)
      {
        v147 = (unint64_t *)&v169->__shared_owners_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      v57 = v190;
      if (v190)
      {
        v149 = (unint64_t *)&v190->__shared_owners_;
        do
          v59 = __ldaxr(v149);
        while (__stlxr(v59 - 1, v149));
        goto LABEL_264;
      }
      goto LABEL_266;
    }
    if (v168)
      goto LABEL_174;
    std::string::basic_string[abi:ne180100]<0>(&v183, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v64 = ims::error((uint64_t)&v183, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)"initialize", 10);
    *(_BYTE *)(v64 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)" No RTCP socket associated with port ", 37);
    *(_BYTE *)(v64 + 17) = 0;
    (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    std::ostream::operator<<();
    *(_BYTE *)(v64 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)" for session ", 13);
    *(_BYTE *)(v64 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v64 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v64 + 17) = 0;
    if (v177 < 0)
      operator delete(__p);
    if (SHIBYTE(v185) < 0)
      operator delete(v183);
    v63 = v189;
    if (v189)
    {
LABEL_174:
      v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 80))(v63);
      v98 = v168;
      if (v168)
      {
LABEL_175:
        v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 80))(v98);
        v100 = v99;
        v101 = v99 == -1;
        if (v97 != -1 && v99 != -1)
        {
          v102 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v38 + 128));
          __p = *(void **)(v38 + 120);
          v175 = (uint64_t *)v102;
          v103 = (void *)*((_QWORD *)__p + 20);
          v104 = (std::__shared_weak_count *)*((_QWORD *)__p + 21);
          v183 = v103;
          v184 = v104;
          if (v104)
          {
            v105 = (unint64_t *)&v104->__shared_owners_;
            do
              v106 = __ldxr(v105);
            while (__stxr(v106 + 1, v105));
          }
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v103 + 200))(&v164);
          v107 = HIDWORD(v164);
          if (v104)
          {
            v108 = (unint64_t *)&v104->__shared_owners_;
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          v110 = (std::__shared_weak_count *)v175;
          if (v175)
          {
            v111 = (unint64_t *)(v175 + 1);
            do
              v112 = __ldaxr(v111);
            while (__stlxr(v112 - 1, v111));
            if (!v112)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v189 + 112))(v189, v107);
          if (v168)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v168 + 112))(v168, v107);
          v183 = 0;
          v184 = (std::__shared_weak_count *)&v183;
          v185 = 0x2020000000;
          v186 = 0;
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3321888768;
          aBlock[2] = ___ZN15AVCAudioSession10initializeERKNSt3__110shared_ptrI9IpAddressEEbRKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEESD_14MediaDirectionNS0_8weak_ptrI10SDPSessionEE_block_invoke;
          aBlock[3] = &unk_1E78B7640;
          aBlock[5] = a1;
          aBlock[6] = v189;
          v156 = v190;
          if (v190)
          {
            v113 = (unint64_t *)&v190->__shared_owners_;
            do
              v114 = __ldxr(v113);
            while (__stxr(v114 + 1, v113));
          }
          v157 = v168;
          v158 = v169;
          if (v169)
          {
            v115 = (unint64_t *)&v169->__shared_owners_;
            do
              v116 = __ldxr(v115);
            while (__stxr(v116 + 1, v115));
          }
          v161 = v97;
          v162 = v100;
          v163 = a3;
          aBlock[4] = &v183;
          v159 = v195;
          v160 = v196;
          if (v196)
          {
            v117 = (unint64_t *)&v196->__shared_owners_;
            do
              v118 = __ldxr(v117);
            while (__stxr(v118 + 1, v117));
          }
          v119 = _Block_copy(aBlock);
          v120 = v119;
          v121 = v189;
          if (v119)
            v122 = _Block_copy(v119);
          else
            v122 = 0;
          v154 = v122;
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v121 + 96))(v121, &v154);
          if (v154)
            _Block_release(v154);
          v135 = v168;
          if (v168)
          {
            v136 = v120 ? _Block_copy(v120) : 0;
            v153 = v136;
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v135 + 96))(v135, &v153);
            if (v153)
              _Block_release(v153);
          }
          if (v120)
            _Block_release(v120);
          v137 = v160;
          if (v160)
          {
            v138 = (unint64_t *)&v160->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          v140 = v158;
          if (v158)
          {
            v141 = (unint64_t *)&v158->__shared_owners_;
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
          v143 = v156;
          if (v156)
          {
            v144 = (unint64_t *)&v156->__shared_owners_;
            do
              v145 = __ldaxr(v144);
            while (__stlxr(v145 - 1, v144));
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
              std::__shared_weak_count::__release_weak(v143);
            }
          }
          _Block_object_dispose(&v183, 8);
          goto LABEL_256;
        }
        if (v97 != -1)
        {
          if (v99 != -1)
            goto LABEL_220;
          goto LABEL_216;
        }
        goto LABEL_211;
      }
      if (v97 != -1)
        goto LABEL_216;
    }
    else
    {
      v98 = v168;
      if (v168)
      {
        v97 = -1;
        goto LABEL_175;
      }
    }
    v101 = 1;
LABEL_211:
    std::string::basic_string[abi:ne180100]<0>(&v183, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v123 = ims::error((uint64_t)&v183, (uint64_t)&__p);
    v124 = ImsOutStream::operator<<(v123, "initialize");
    v125 = (_BYTE *)ImsOutStream::operator<<(v124, " didn't find valid RTP transport for session ");
    std::ostream::operator<<();
    v125[17] = 0;
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v125 + 64))(v125, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v125[17] = 0;
    if (v177 < 0)
      operator delete(__p);
    if (SHIBYTE(v185) < 0)
      operator delete(v183);
    if (!v101)
    {
LABEL_220:
      v129 = *(std::__shared_weak_count **)(a1 + 40);
      if (v129)
      {
        v130 = std::__shared_weak_count::lock(v129);
        v184 = v130;
        if (v130)
        {
          v131 = v130;
          v132 = *(void (****)(void *, void **, uint64_t))(a1 + 32);
          v183 = v132;
          if (v132)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, v165);
            (**v132)(v132, v165, 4);
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v165);
          }
          v133 = (unint64_t *)&v131->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            v74 = v131;
            goto LABEL_228;
          }
        }
      }
      goto LABEL_256;
    }
LABEL_216:
    std::string::basic_string[abi:ne180100]<0>(&v183, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v126 = ims::error((uint64_t)&v183, (uint64_t)&__p);
    v127 = ImsOutStream::operator<<(v126, "initialize");
    v128 = (_BYTE *)ImsOutStream::operator<<(v127, " didn't find valid RTCP transport for session ");
    std::ostream::operator<<();
    v128[17] = 0;
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v128 + 64))(v128, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v128[17] = 0;
    if (v177 < 0)
      operator delete(__p);
    if (SHIBYTE(v185) < 0)
      operator delete(v183);
    goto LABEL_220;
  }
  std::string::basic_string[abi:ne180100]<0>(&v183, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v51 = ImsLogger::error(ims::_logger, (uint64_t)&v183, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)"initialize", 10);
  *(_BYTE *)(v51 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)" No media settings", 18);
  *(_BYTE *)(v51 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v51 + 17) = 0;
  if (v177 < 0)
    operator delete(__p);
  if (SHIBYTE(v185) < 0)
    operator delete(v183);
  v183 = 0;
  v184 = 0;
  v52 = *(std::__shared_weak_count **)(a1 + 40);
  if (v52)
  {
    v184 = std::__shared_weak_count::lock(v52);
    if (v184)
    {
      v53 = *(void (****)(void *, void **, uint64_t))(a1 + 32);
      v183 = v53;
      if (v53)
      {
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v191);
        (**v53)(v53, &v191, 9);
        v54 = v192;
        if (v192)
        {
          v55 = (unint64_t *)&v192->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
      }
    }
  }
  v57 = v184;
  if (v184)
  {
    v58 = (unint64_t *)&v184->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
LABEL_264:
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
LABEL_266:
  v150 = v196;
  if (v196)
  {
    v151 = (unint64_t *)&v196->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  objc_autoreleasePoolPop(v13);
}

void sub_1BEDFEC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v55 - 144);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v55 - 96);
  _Unwind_Resume(a1);
}

void RTPSharedPointerBase::getShared<MediaSessionInterface>(uint64_t a1@<X0>, void **p_lpsrc@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *lpsrc;
  std::__shared_weak_count *v9;

  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      v4 = v9;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void AVCAudioSession::scheduleSkywalkInit(uint64_t a1, _QWORD *a2, void **a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _BYTE *v9;
  unint64_t v10;
  int v11;
  _BYTE *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t v15;
  int v16;
  _BYTE *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  char v28;
  _BOOL4 v30;
  std::__shared_weak_count *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _BOOL4 v43;
  std::__shared_weak_count *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  dispatch_time_t v50;
  NSObject *v51;
  std::__shared_weak_count *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD block[6];
  std::__shared_weak_count *v57;
  void *v58;
  std::__shared_weak_count *v59;
  _QWORD v60[2];
  void *v61;
  std::__shared_weak_count *v62;
  void *__p;
  uint64_t *v64;
  int v65;
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  void *v70;
  std::__shared_weak_count *v71;
  void *v72;
  uint64_t *v73;
  int v74;
  char v75;
  nw_listener_t *v76;
  std::__shared_weak_count *v77;

  std::string::basic_string[abi:ne180100]<0>(&v72, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v72, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"scheduleSkywalkInit", 19);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v66 < 0)
    operator delete(__p);
  if (v75 < 0)
    operator delete(v72);
  v7 = (std::__shared_weak_count *)a3[1];
  if (!v7)
  {
    v13 = 0;
    v70 = *a3;
    v71 = 0;
    goto LABEL_49;
  }
  v8 = std::__shared_weak_count::lock(v7);
  v73 = (uint64_t *)v8;
  if (!v8)
    goto LABEL_45;
  v72 = *a3;
  v9 = v72;
  if (!v72)
  {
    v14 = v8;
LABEL_41:
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_45;
  }
  __p = 0;
  v64 = 0;
  v10 = a2[6];
  v11 = (*(uint64_t (**)(_QWORD *))(*a2 + 152))(a2);
  if (v11 == 2)
  {
    if (v9[584])
    {
      v12 = v9 + 152;
      goto LABEL_18;
    }
  }
  else if (v11 == 6 && v9[1856])
  {
    v12 = v9 + 1496;
    goto LABEL_18;
  }
  v12 = v9 + 1032;
  if (!v9[1328])
    v12 = 0;
LABEL_18:
  RTPTransportManager::getNwTransport(v10, *((unsigned __int16 *)v12 + 12), (uint64_t *)&__p);
  v76 = 0;
  v77 = 0;
  v15 = a2[6];
  v16 = (*(uint64_t (**)(_QWORD *))(*a2 + 152))(a2);
  if (v16 == 2)
  {
    if (v9[584])
    {
      v17 = v9 + 152;
      goto LABEL_26;
    }
  }
  else if (v16 == 6 && v9[1856])
  {
    v17 = v9 + 1496;
    goto LABEL_26;
  }
  v17 = v9 + 1032;
  if (!v9[1328])
    v17 = 0;
LABEL_26:
  RTPTransportManager::getNwTransport(v15, (unsigned __int16)(*((_WORD *)v17 + 12) + 1), (uint64_t *)&v76);
  if (__p)
  {
    ImsUdpNw::cancelNwConnection((ImsUdpNw *)__p);
    nw_listener_set_new_connection_limit(*((nw_listener_t *)__p + 5), 0);
  }
  if (v76)
  {
    ImsUdpNw::cancelNwConnection((ImsUdpNw *)v76);
    nw_listener_set_new_connection_limit(v76[5], 0);
  }
  v18 = v77;
  if (v77)
  {
    v19 = (unint64_t *)&v77->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)v64;
  if (v64)
  {
    v22 = (unint64_t *)(v64 + 1);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v14 = (std::__shared_weak_count *)v73;
  if (v73)
    goto LABEL_41;
LABEL_45:
  v13 = (std::__shared_weak_count *)a3[1];
  v70 = *a3;
  v71 = v13;
  if (v13)
  {
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
    v28 = 0;
    goto LABEL_50;
  }
LABEL_49:
  v28 = 1;
LABEL_50:
  AVCAudioSession::createNwPath((uint64_t)&v72, (uint64_t)a2, &v70, 0);
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  __p = &off_1E78B7238;
  v64 = &_bambiDomain;
  v65 = 0;
  v30 = v73 != &_bambiDomain || v74 != 0;
  ImsResult::~ImsResult((ImsResult *)&__p);
  ImsResult::~ImsResult((ImsResult *)&v72);
  if ((v28 & 1) == 0)
    std::__shared_weak_count::__release_weak(v13);
  if (v30)
  {
    v72 = 0;
    v73 = 0;
    v31 = (std::__shared_weak_count *)a2[5];
    if (v31)
    {
      v73 = (uint64_t *)std::__shared_weak_count::lock(v31);
      if (v73)
      {
        v32 = (void *)a2[4];
        v72 = v32;
        if (v32)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)a2, &v61);
          (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v32 + 16))(v32, &v61, 9);
          v33 = v62;
          if (v62)
          {
            v34 = (unint64_t *)&v62->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
        }
      }
    }
    v36 = (std::__shared_weak_count *)v73;
    if (!v73)
      goto LABEL_96;
    v37 = (unint64_t *)(v73 + 1);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
LABEL_94:
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
LABEL_96:
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)a1 = &off_1E78B7238;
    *(_QWORD *)(a1 + 8) = &_bambiDomain;
    *(_DWORD *)(a1 + 16) = 0x40000000;
    return;
  }
  v39 = (std::__shared_weak_count *)a3[1];
  v60[0] = *a3;
  v60[1] = v39;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_weak_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  AVCAudioSession::createNwPath((uint64_t)&v72, (uint64_t)a2, v60, 1);
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  __p = &off_1E78B7238;
  v64 = &_bambiDomain;
  v65 = 0;
  v43 = v73 != &_bambiDomain || v74 != 0;
  ImsResult::~ImsResult((ImsResult *)&__p);
  ImsResult::~ImsResult((ImsResult *)&v72);
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  if (v43)
  {
    v72 = 0;
    v73 = 0;
    v44 = (std::__shared_weak_count *)a2[5];
    if (v44)
    {
      v73 = (uint64_t *)std::__shared_weak_count::lock(v44);
      if (v73)
      {
        v45 = (void *)a2[4];
        v72 = v45;
        if (v45)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)a2, &v58);
          (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v45 + 16))(v45, &v58, 9);
          v46 = v59;
          if (v59)
          {
            v47 = (unint64_t *)&v59->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
        }
      }
    }
    v36 = (std::__shared_weak_count *)v73;
    if (!v73)
      goto LABEL_96;
    v49 = (unint64_t *)(v73 + 1);
    do
      v38 = __ldaxr(v49);
    while (__stlxr(v38 - 1, v49));
    goto LABEL_94;
  }
  v50 = dispatch_time(0, 1000000000);
  v51 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    v51 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v51;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN15AVCAudioSession19scheduleSkywalkInitENSt3__18weak_ptrI10SDPSessionEE_block_invoke;
  block[3] = &__block_descriptor_56_e8_40c36_ZTSKNSt3__18weak_ptrI10SDPSessionEE_e5_v8__0l;
  v53 = *a3;
  v52 = (std::__shared_weak_count *)a3[1];
  block[4] = a2;
  block[5] = v53;
  v57 = v52;
  if (v52)
  {
    v54 = (unint64_t *)&v52->__shared_weak_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  dispatch_after(v50, v51, block);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  if (v57)
    std::__shared_weak_count::__release_weak(v57);
}

void sub_1BEDFF5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v28 - 168);
  _Unwind_Resume(a1);
}

void ___ZN15AVCAudioSession10initializeERKNSt3__110shared_ptrI9IpAddressEEbRKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEESD_14MediaDirectionNS0_8weak_ptrI10SDPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  _BOOL4 v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  xpc_object_t v16;
  id v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  size_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  void (***v27)(void *, void **, uint64_t);
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  void (***v32)(void *, void **, _QWORD);
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  std::__shared_weak_count *v39;
  void (***v40)(void *, void **, uint64_t);
  _QWORD v41[2];
  void *v42[2];
  void *v43[2];
  void *__p[2];
  int v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void *v52;
  CFTypeRef cf;
  int v54;
  char v55;
  _BYTE v56[72];
  void *v57[2];
  void *v58[2];
  id v59;

  v2 = *(_QWORD *)(a1 + 40);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 104))(*(_QWORD *)(a1 + 48)))
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)&v52, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"RTP socket still attached to dispatch source [sessionId=", 56);
    *(_BYTE *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_5:
    *(_BYTE *)(v3 + 17) = 0;
    if (v46 < 0)
      operator delete(__p[0]);
    if (v55 < 0)
      operator delete(v52);
    return;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 104))(*(_QWORD *)(a1 + 64)))
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)&v52, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"RTCP socket still attached to dispatch source [sessionId=", 57);
    *(_BYTE *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_5;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v4 + 24))
    return;
  *(_BYTE *)(v4 + 24) = 1;
  if (*(_QWORD *)(v2 + 480))
  {
LABEL_12:
    v5 = *(std::__shared_weak_count **)(a1 + 88);
    v50 = *(_QWORD *)(a1 + 80);
    v51 = v5;
    if (v5)
    {
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(&v52, v2, &v50);
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    v45 = 0;
    v9 = cf == &_bambiDomain && v54 == 0;
    ImsResult::~ImsResult((ImsResult *)__p);
    ImsResult::~ImsResult((ImsResult *)&v52);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
    if (v9)
    {
      v10 = *(std::__shared_weak_count **)(v2 + 40);
      if (v10)
      {
        v11 = std::__shared_weak_count::lock(v10);
        cf = v11;
        if (v11)
        {
          v12 = v11;
          v13 = *(void **)(v2 + 32);
          v52 = v13;
          if (v13)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, v43);
            (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v13 + 16))(v13, v43, 0);
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v43);
          }
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
LABEL_58:
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
    else
    {
      v30 = *(std::__shared_weak_count **)(v2 + 40);
      if (v30)
      {
        v31 = std::__shared_weak_count::lock(v30);
        cf = v31;
        if (v31)
        {
          v12 = v31;
          v32 = *(void (****)(void *, void **, _QWORD))(v2 + 32);
          v52 = v32;
          if (v32)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, v42);
            (**v32)(v32, v42, 0);
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v42);
          }
          v33 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldaxr(v33);
          while (__stlxr(v15 - 1, v33));
          goto LABEL_58;
        }
      }
    }
    if (_os_feature_enabled_impl())
    {
      v52 = &off_1E78B7BD8;
      cf = 0;
      ims::CFNumber::CFNumber((ims::CFNumber *)__p, objc_msgSend(*(id *)(v2 + 480), "streamToken"));
      ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v52, (const void **)__p);
      ims::CFType::~CFType((ims::CFType *)__p);
      ims::CFNumber::CFNumber((ims::CFNumber *)__p, objc_msgSend(*(id *)(v2 + 480), "uplinkToken"));
      ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v52, (const void **)__p);
      ims::CFType::~CFType((ims::CFType *)__p);
      ims::CFNumber::CFNumber((ims::CFNumber *)__p, objc_msgSend(*(id *)(v2 + 480), "downlinkToken"));
      ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v52, (const void **)__p);
      ims::CFType::~CFType((ims::CFType *)__p);
      v36 = v2 + 48;
      v34 = *(_QWORD *)(v2 + 48);
      v35 = *(_QWORD *)(v36 + 8);
      v41[0] = off_1E78EAB00;
      v41[1] = cf;
      if (cf)
        CFRetain(cf);
      v41[0] = &off_1E78EAC08;
      RTPManager::handleAudioStreamTokens(v35, v34, (uint64_t)v41);
      ims::CFType::~CFType((ims::CFType *)v41);
      ims::CFType::~CFType((ims::CFType *)&v52);
    }
    return;
  }
  v16 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_fd(v16, (const char *)*MEMORY[0x1E0CF2300], *(_DWORD *)(a1 + 96));
  if (*(_QWORD *)(a1 + 64))
    xpc_dictionary_set_fd(v16, (const char *)*MEMORY[0x1E0CF22F0], *(_DWORD *)(a1 + 100));
  v59 = 0;
  v17 = objc_alloc(MEMORY[0x1E0CB3940]);
  v18 = (_QWORD *)(v2 + 616);
  if (*(char *)(v2 + 639) < 0)
    v18 = (_QWORD *)*v18;
  v19 = (void *)objc_msgSend(v17, "initWithUTF8String:", v18);
  std::string::basic_string[abi:ne180100]<0>(&v52, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v20 = ImsLogger::debug(ims::_logger, (uint64_t)&v52, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Session initialize request [sessionId=", 38);
  *(_BYTE *)(v20 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v20 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v20 + 17) = 0;
  if (v46 < 0)
    operator delete(__p[0]);
  if (v55 < 0)
    operator delete(v52);
  *(_QWORD *)(v2 + 480) = objc_msgSend(objc_alloc(MEMORY[0x1E0CF2250]), "initWithNetworkSockets:isOriginator:callID:error:", v16, *(unsigned __int8 *)(a1 + 104), v19, &v59);

  xpc_release(v16);
  if (v59)
  {
    *(_QWORD *)(v2 + 480) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v52, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v21 = ImsLogger::error(ims::_logger, (uint64_t)&v52, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Session init error: ", 20);
    *(_BYTE *)(v21 + 17) = 0;
    v22 = (const char *)objc_msgSend((id)objc_msgSend(v59, "description"), "UTF8String");
    v23 = strlen(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)v22, v23);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    if (v46 < 0)
      operator delete(__p[0]);
    if (v55 < 0)
      operator delete(v52);
    v24 = *(std::__shared_weak_count **)(v2 + 40);
    if (v24)
    {
      v25 = std::__shared_weak_count::lock(v24);
      cf = v25;
      if (v25)
      {
        v26 = v25;
        v27 = *(void (****)(void *, void **, uint64_t))(v2 + 32);
        v52 = v27;
        if (v27)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, v58);
          (**v27)(v27, v58, 9);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v58);
        }
        v28 = (unint64_t *)&v26->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
  }
  else
  {
    if (*(_QWORD *)(v2 + 480))
    {
      AVCAudioSession::completeInit((AVCAudioSession *)v56, v2);
      ImsResult::~ImsResult((ImsResult *)v56);
      goto LABEL_12;
    }
    std::string::basic_string[abi:ne180100]<0>(&v52, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    v37 = ims::error((uint64_t)&v52, (uint64_t)__p);
    v38 = (_BYTE *)ImsOutStream::operator<<(v37, "No AVC session");
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v38[17] = 0;
    if (v46 < 0)
      operator delete(__p[0]);
    if (v55 < 0)
      operator delete(v52);
    v52 = 0;
    cf = 0;
    v39 = *(std::__shared_weak_count **)(v2 + 40);
    if (v39)
    {
      cf = std::__shared_weak_count::lock(v39);
      if (cf)
      {
        v40 = *(void (****)(void *, void **, uint64_t))(v2 + 32);
        v52 = v40;
        if (v40)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, v57);
          (**v40)(v40, v57, 9);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v57);
        }
      }
    }
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v52);
  }
}

void sub_1BEDFFEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 - 104);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

double AVCAudioSession::completeInit(AVCAudioSession *this, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  AVCAudioSessionDelegate *v14;
  void *v15;
  void **v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void (***v19)(void *, void **, uint64_t);
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void (***v42)(void *, void **, uint64_t);
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void (***v49)(void *, void **, uint64_t);
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  double result;
  void *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  void *v59;
  std::__shared_weak_count *v60;
  void *v61;
  std::__shared_weak_count *v62;
  void *v63;
  std::__shared_weak_count *v64;
  void *__p[2];
  char v66;
  void (***v67)(void *, void **, uint64_t);
  std::__shared_weak_count *v68;
  char v69;

  v4 = objc_msgSend(*(id *)(a2 + 480), "capabilities");
  if (!v4)
  {
    *(_QWORD *)(a2 + 480) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v67, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v17 = ImsLogger::error(ims::_logger, (uint64_t)&v67, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"AVC session doesn't have a capabilities dict", 44);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (v66 < 0)
      operator delete(__p[0]);
    if (v69 < 0)
      operator delete(v67);
    v67 = 0;
    v68 = 0;
    v18 = *(std::__shared_weak_count **)(a2 + 40);
    if (v18)
    {
      v68 = std::__shared_weak_count::lock(v18);
      if (v68)
      {
        v19 = *(void (****)(void *, void **, uint64_t))(a2 + 32);
        v67 = v19;
        if (v19)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v63);
          (**v19)(v19, &v63, 9);
          v20 = v64;
          if (v64)
          {
            p_shared_owners = (unint64_t *)&v64->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
        }
      }
    }
    v23 = v68;
    if (!v68)
      goto LABEL_84;
    v24 = (unint64_t *)&v68->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    goto LABEL_82;
  }
  v5 = (void *)v4;
  std::string::basic_string[abi:ne180100]<0>(&v67, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v67, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"capabilities dict: ", 19);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = (const char *)objc_msgSend((id)objc_msgSend(v5, "description"), "UTF8String");
  v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)v7, v8);
  *(_BYTE *)(v6 + 17) = 0;
  if (v66 < 0)
    operator delete(__p[0]);
  if (v69 < 0)
    operator delete(v67);
  v9 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("avcKeySupportedCodecs"));
  if (!v9)
  {
    *(_QWORD *)(a2 + 480) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v67, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v40 = ImsLogger::debug(ims::_logger, (uint64_t)&v67, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"No supported codecs", 19);
    *(_BYTE *)(v40 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v40 + 17) = 0;
    if (v66 < 0)
      operator delete(__p[0]);
    if (v69 < 0)
      operator delete(v67);
    v67 = 0;
    v68 = 0;
    v41 = *(std::__shared_weak_count **)(a2 + 40);
    if (v41)
    {
      v68 = std::__shared_weak_count::lock(v41);
      if (v68)
      {
        v42 = *(void (****)(void *, void **, uint64_t))(a2 + 32);
        v67 = v42;
        if (v42)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v61);
          (**v42)(v42, &v61, 9);
          v43 = v62;
          if (v62)
          {
            v44 = (unint64_t *)&v62->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
        }
      }
    }
    v23 = v68;
    if (!v68)
      goto LABEL_84;
    v46 = (unint64_t *)&v68->__shared_owners_;
    do
      v25 = __ldaxr(v46);
    while (__stlxr(v25 - 1, v46));
    goto LABEL_82;
  }
  v10 = (void *)v9;
  std::string::basic_string[abi:ne180100]<0>(&v67, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v11 = ImsLogger::debug(ims::_logger, (uint64_t)&v67, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Got supported codecs", 20);
  *(_BYTE *)(v11 + 17) = 0;
  v12 = (const char *)objc_msgSend((id)objc_msgSend(v10, "description"), "UTF8String");
  v13 = strlen(v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)v12, v13);
  *(_BYTE *)(v11 + 17) = 0;
  if (v66 < 0)
    operator delete(__p[0]);
  if (v69 < 0)
    operator delete(v67);
  v14 = [AVCAudioSessionDelegate alloc];
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v67, (_QWORD *)(a2 + 8));
  if (v67
  {
    v59 = v15;
    v60 = v68;
    v16 = (void **)&v67;
  }
  else
  {
    v16 = &v59;
  }
  *v16 = 0;
  v16[1] = 0;
  v26 = v68;
  if (v68)
  {
    v27 = (unint64_t *)&v68->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *(std::__shared_weak_count **)(a2 + 512);
  v57 = *(_QWORD *)(a2 + 504);
  v58 = v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = -[AVCAudioSessionDelegate initWithOwner:andStackController:](v14, "initWithOwner:andStackController:", &v59, &v57);
  v33 = v58;
  if (v58)
  {
    v34 = (unint64_t *)&v58->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v60;
  if (v60)
  {
    v37 = (unint64_t *)&v60->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      if (v32)
        goto LABEL_49;
      goto LABEL_67;
    }
  }
  if (!v32)
  {
LABEL_67:
    *(_QWORD *)(a2 + 480) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v67, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v47 = ImsLogger::error(ims::_logger, (uint64_t)&v67, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"Unable to create AVC media stream delegate", 42);
    *(_BYTE *)(v47 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v47 + 17) = 0;
    if (v66 < 0)
      operator delete(__p[0]);
    if (v69 < 0)
      operator delete(v67);
    v67 = 0;
    v68 = 0;
    v48 = *(std::__shared_weak_count **)(a2 + 40);
    if (v48)
    {
      v68 = std::__shared_weak_count::lock(v48);
      if (v68)
      {
        v49 = *(void (****)(void *, void **, uint64_t))(a2 + 32);
        v67 = v49;
        if (v49)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v55);
          (**v49)(v49, &v55, 9);
          v50 = v56;
          if (v56)
          {
            v51 = (unint64_t *)&v56->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
        }
      }
    }
    v23 = v68;
    if (!v68)
      goto LABEL_84;
    v53 = (unint64_t *)&v68->__shared_owners_;
    do
      v25 = __ldaxr(v53);
    while (__stlxr(v25 - 1, v53));
LABEL_82:
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
LABEL_84:
    v39 = 0x40000000;
    goto LABEL_85;
  }
LABEL_49:
  objc_msgSend(*(id *)(a2 + 480), "setDelegate:", v32);
  v39 = 0;
LABEL_85:
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = &off_1E78B7238;
  *((_QWORD *)this + 1) = &_bambiDomain;
  *((_DWORD *)this + 4) = v39;
  return result;
}

void sub_1BEE006C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 88);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_48c49_ZTSNSt3__110shared_ptrI21ImsUdpSocketInterfaceEE64c49_ZTSNSt3__110shared_ptrI21ImsUdpSocketInterfaceEE80c38_ZTSNSt3__110shared_ptrI10SDPSessionEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = a2[7];
  result[6] = a2[6];
  result[7] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[9];
  result[8] = a2[8];
  result[9] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[11];
  result[10] = a2[10];
  result[11] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_48c49_ZTSNSt3__110shared_ptrI21ImsUdpSocketInterfaceEE64c49_ZTSNSt3__110shared_ptrI21ImsUdpSocketInterfaceEE80c38_ZTSNSt3__110shared_ptrI10SDPSessionEE(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 48;
  v2 = a1 + 64;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 80);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
}

void `non-virtual thunk to'AVCAudioSession::initialize(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const std::string *a5, uint64_t a6, uint64_t *a7)
{
  AVCAudioSession::initialize(a1 - 24, a2, a3, a4, a5, a6, a7);
}

void AVCAudioSession::initializeWithSkywalk(AVCAudioSession *this, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  const char *v10;
  size_t v11;
  id v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD v32[2];
  void *v33;
  std::__shared_weak_count *v34;
  void *__p[2];
  char v36;
  void *v37;
  CFTypeRef cf;
  char v39;
  id v40;
  _QWORD v41[2];
  _QWORD v42[3];

  v42[2] = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1C3B876AC]();
  v40 = 0;
  v5 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", a2 + 640);
  v6 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", a2 + 656);
  std::string::basic_string[abi:ne180100]<0>(&v37, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)&v37, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Session initialize request [sessionId=", 38);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" rtpUuid=", 9);
  *(_BYTE *)(v7 + 17) = 0;
  v8 = (const char *)objc_msgSend((id)objc_msgSend(v5, "UUIDString"), "UTF8String");
  v9 = strlen(v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)v8, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" rtcpUuid=", 10);
  *(_BYTE *)(v7 + 17) = 0;
  v10 = (const char *)objc_msgSend((id)objc_msgSend(v6, "UUIDString"), "UTF8String");
  v11 = strlen(v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)v10, v11);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v36 < 0)
    operator delete(__p[0]);
  if (v39 < 0)
    operator delete(v37);
  v12 = objc_alloc(MEMORY[0x1E0CB3940]);
  v13 = (_QWORD *)(a2 + 616);
  if (*(char *)(a2 + 639) < 0)
    v13 = (_QWORD *)*v13;
  v14 = (id)objc_msgSend(v12, "initWithUTF8String:", v13);
  v15 = *MEMORY[0x1E0CF2350];
  v41[0] = *MEMORY[0x1E0CF2348];
  v41[1] = v15;
  if (*(_BYTE *)(a2 + 608))
    v16 = &unk_1E78F45D0;
  else
    v16 = &unk_1E78F45E8;
  v42[0] = v14;
  v42[1] = v16;
  v17 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v42, v41, 2);
  *(_QWORD *)(a2 + 480) = objc_msgSend(objc_alloc(MEMORY[0x1E0CF2250]), "initWithRTPNWConnectionClientID:rtcpNWConnectionClientID:options:error:", v5, v6, v17, &v40);
  if (v40)
  {
    *(_QWORD *)(a2 + 480) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v37, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::error(ims::_logger, (uint64_t)&v37, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Session init error: ", 20);
    *(_BYTE *)(v18 + 17) = 0;
    if (v40)
      v19 = (const char *)objc_msgSend((id)objc_msgSend(v40, "description"), "UTF8String");
    else
      v19 = " returned error is nil";
    v23 = strlen(v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)v19, v23);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (v36 < 0)
      operator delete(__p[0]);
    if (v39 < 0)
      operator delete(v37);
    v37 = 0;
    cf = 0;
    v24 = *(std::__shared_weak_count **)(a2 + 40);
    if (v24)
    {
      cf = std::__shared_weak_count::lock(v24);
      if (cf)
      {
        v25 = *(void **)(a2 + 32);
        v37 = v25;
        if (v25)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v33);
          (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v25 + 40))(v25, &v33, 4);
          v26 = v34;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v28 = __ldaxr(p_shared_owners);
            while (__stlxr(v28 - 1, p_shared_owners));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
        }
      }
    }
    v29 = (std::__shared_weak_count *)cf;
    if (cf)
    {
      v30 = (unint64_t *)((char *)cf + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_QWORD *)this = &off_1E78B7238;
    *((_QWORD *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 1073741825;
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    if (_os_feature_enabled_impl())
    {
      v37 = &off_1E78B7BD8;
      cf = 0;
      ims::CFNumber::CFNumber((ims::CFNumber *)__p, objc_msgSend(*(id *)(a2 + 480), "streamToken"));
      ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v37, (const void **)__p);
      ims::CFType::~CFType((ims::CFType *)__p);
      ims::CFNumber::CFNumber((ims::CFNumber *)__p, objc_msgSend(*(id *)(a2 + 480), "uplinkToken"));
      ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v37, (const void **)__p);
      ims::CFType::~CFType((ims::CFType *)__p);
      ims::CFNumber::CFNumber((ims::CFNumber *)__p, objc_msgSend(*(id *)(a2 + 480), "downlinkToken"));
      ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v37, (const void **)__p);
      ims::CFType::~CFType((ims::CFType *)__p);
      v21 = *(_QWORD *)(a2 + 48);
      v20 = *(_QWORD *)(a2 + 56);
      v32[0] = off_1E78EAB00;
      v32[1] = cf;
      if (cf)
        CFRetain(cf);
      v32[0] = &off_1E78EAC08;
      RTPManager::handleAudioStreamTokens(v20, v21, (uint64_t)v32);
      ims::CFType::~CFType((ims::CFType *)v32);
      ims::CFType::~CFType((ims::CFType *)&v37);
    }
    objc_autoreleasePoolPop(v4);
    std::string::basic_string[abi:ne180100]<0>(&v37, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::debug(ims::_logger, (uint64_t)&v37, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Session initialize success  [sessionId=", 39);
    *(_BYTE *)(v22 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v22 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    if (v36 < 0)
      operator delete(__p[0]);
    if (v39 < 0)
      operator delete(v37);
    *(_BYTE *)(a2 + 609) = 0;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_QWORD *)this = &off_1E78B7238;
    *((_QWORD *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 0;
  }
}

void sub_1BEE00E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  ims::CFType::~CFType((ims::CFType *)&__p);
  _Unwind_Resume(a1);
}

void AVCAudioSession::createNwPath(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _BYTE *v11;
  unint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  _BYTE *v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  IpAddress *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *host_with_numeric_port;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  IpAddress *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _BYTE *v60;
  std::__shared_weak_count *v61;
  void *__p[2];
  char v63;
  uuid_string_t out;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(out, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)out, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"createNwPath", 12);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v63 < 0)
    operator delete(__p[0]);
  if (out[23] < 0)
    operator delete(*(void **)out);
  v60 = 0;
  v61 = 0;
  v9 = (std::__shared_weak_count *)a3[1];
  if (!v9)
  {
    v10 = 0;
    goto LABEL_13;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v61 = v10;
  if (!v10 || (v11 = (_BYTE *)*a3, (v60 = v11) == 0))
  {
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(out, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)out, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"SDPSession expired in AVCRTPAudioSession::setConfiguration", 58);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (v63 < 0)
      operator delete(__p[0]);
    if (out[23] < 0)
      operator delete(*(void **)out);
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)a1 = &off_1E78B7238;
    *(_QWORD *)(a1 + 8) = &_bambiDomain;
    *(_DWORD *)(a1 + 16) = 1073741825;
    if (v10)
      goto LABEL_66;
    return;
  }
  v58 = 0;
  v59 = 0;
  v12 = *(_QWORD *)(a2 + 48);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 152))(a2);
  if (v13 == 2)
  {
    if (v11[584])
    {
      v14 = v11 + 152;
      goto LABEL_23;
    }
  }
  else if (v13 == 6 && v11[1856])
  {
    v14 = v11 + 1496;
    goto LABEL_23;
  }
  v14 = v11 + 1032;
  if (!v11[1328])
    v14 = 0;
LABEL_23:
  RTPTransportManager::getNwTransport(v12, *((unsigned __int16 *)v14 + 12), &v58);
  v56 = 0;
  v57 = 0;
  v16 = *(_QWORD *)(a2 + 48);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 152))(a2);
  if (v17 == 2)
  {
    if (v11[584])
    {
      v18 = v11 + 152;
      goto LABEL_31;
    }
  }
  else if (v17 == 6 && v11[1856])
  {
    v18 = v11 + 1496;
    goto LABEL_31;
  }
  v18 = v11 + 1032;
  if (!v11[1328])
    v18 = 0;
LABEL_31:
  RTPTransportManager::getNwTransport(v16, (unsigned __int16)(*((_WORD *)v18 + 12) + 1), &v56);
  if (v58)
  {
    if (v56)
    {
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 152))(a2);
      if (v19 == 2)
      {
        if (v11[584])
        {
          v20 = v11 + 152;
          goto LABEL_43;
        }
      }
      else if (v19 == 6 && v11[1856])
      {
        v20 = v11 + 1496;
        goto LABEL_43;
      }
      if (v11[1328])
      {
        v20 = v11 + 1032;
LABEL_43:
        v23 = (IpAddress *)*((_QWORD *)v20 + 1);
        v22 = (std::__shared_weak_count *)*((_QWORD *)v20 + 2);
        v54 = v23;
        v55 = v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
        }
        if (v23
          || (*(char *)(a2 + 543) < 0 ? (v26 = *(_QWORD *)(a2 + 528)) : (v26 = *(unsigned __int8 *)(a2 + 543)), v26))
        {
          AVCRTPStackController::getClientUniquePID(*(AVCRTPStackController **)(a2 + 504));
          std::string::basic_string[abi:ne180100]<0>(out, "avc.audio.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v35 = ImsLogger::debug(ims::_logger, (uint64_t)out, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"nw_path local RTP endpoint port=", 32);
          *(_BYTE *)(v35 + 17) = 0;
          nw_endpoint_get_port(*(nw_endpoint_t *)(v58 + 24));
          std::ostream::operator<<();
          *(_BYTE *)(v35 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" RTCP port=", 11);
          *(_BYTE *)(v35 + 17) = 0;
          nw_endpoint_get_port(*(nw_endpoint_t *)(v56 + 24));
          std::ostream::operator<<();
          *(_BYTE *)(v35 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v35 + 17) = 0;
          if (v63 < 0)
            operator delete(__p[0]);
          if (out[23] < 0)
            operator delete(*(void **)out);
          std::string::basic_string[abi:ne180100]<0>(out, "avc.audio.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v36 = ImsLogger::debug(ims::_logger, (uint64_t)out, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"nw_path remote endpoint address=", 32);
          *(_BYTE *)(v36 + 17) = 0;
          IpAddress::asString(v23, 0, v52);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v36 + 32))(v36, v52);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)" port=", 6);
          *(_BYTE *)(v36 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v36 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v36 + 17) = 0;
          if (v53 < 0)
            operator delete(v52[0]);
          if (v63 < 0)
            operator delete(__p[0]);
          if (out[23] < 0)
            operator delete(*(void **)out);
          IpAddress::asString(v23, 0, out);
          host_with_numeric_port = (void *)nw_endpoint_create_host_with_numeric_port();
          if (out[23] < 0)
            operator delete(*(void **)out);
          if (a4)
          {
            nw_parameters_set_delegated_unique_pid();
            *(_QWORD *)(a2 + 600) = nw_path_create_evaluator_for_endpoint();
            nw_release(host_with_numeric_port);
            if (*(_QWORD *)(a2 + 600))
            {
              nw_path_evaluator_get_client_id();
              memset(out, 0, sizeof(out));
              uuid_unparse((const unsigned __int8 *)(a2 + 656), out);
              std::string::basic_string[abi:ne180100]<0>(__p, "avc.audio.session");
              std::string::basic_string[abi:ne180100]<0>(v52, "");
              v38 = ims::debug((uint64_t)__p, (uint64_t)v52);
              v39 = ImsOutStream::operator<<(v38, "RTCP nw_path_evaluator initialized with uuid = ");
              std::string::basic_string[abi:ne180100]<0>(v50, out);
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v39 + 32))(v39, v50);
              v40 = (_BYTE *)ImsOutStream::operator<<(v39, " clientID=");
              std::ostream::operator<<();
              v40[17] = 0;
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_90:
              v40[17] = 0;
              if (v51 < 0)
                operator delete(v50[0]);
              if (v53 < 0)
                operator delete(v52[0]);
              if (v63 < 0)
                operator delete(__p[0]);
              v43 = 0;
LABEL_105:
              *(_OWORD *)(a1 + 24) = 0u;
              *(_OWORD *)(a1 + 40) = 0u;
              *(_OWORD *)(a1 + 56) = 0u;
              *(_QWORD *)a1 = &off_1E78B7238;
              *(_QWORD *)(a1 + 8) = &_bambiDomain;
              *(_DWORD *)(a1 + 16) = v43;
              if (v22)
              {
                v48 = (unint64_t *)&v22->__shared_owners_;
                do
                  v49 = __ldaxr(v48);
                while (__stlxr(v49 - 1, v48));
                if (!v49)
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
              goto LABEL_55;
            }
            std::string::basic_string[abi:ne180100]<0>(out, "avc.audio.session");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            v44 = ims::error((uint64_t)out, (uint64_t)__p);
            v45 = (_BYTE *)ImsOutStream::operator<<(v44, "Failed to create RTCP nw_path_evaluator");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          else
          {
            nw_parameters_set_delegated_unique_pid();
            *(_QWORD *)(a2 + 592) = nw_path_create_evaluator_for_endpoint();
            nw_release(host_with_numeric_port);
            if (*(_QWORD *)(a2 + 592))
            {
              nw_path_evaluator_get_client_id();
              memset(out, 0, sizeof(out));
              uuid_unparse((const unsigned __int8 *)(a2 + 640), out);
              std::string::basic_string[abi:ne180100]<0>(__p, "avc.audio.session");
              std::string::basic_string[abi:ne180100]<0>(v52, "");
              v41 = ims::debug((uint64_t)__p, (uint64_t)v52);
              v42 = ImsOutStream::operator<<(v41, "RTP nw_path_evaluator initialized with uuid = ");
              std::string::basic_string[abi:ne180100]<0>(v50, out);
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v42 + 32))(v42, v50);
              v40 = (_BYTE *)ImsOutStream::operator<<(v42, " clientID=");
              std::ostream::operator<<();
              v40[17] = 0;
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_90;
            }
            std::string::basic_string[abi:ne180100]<0>(out, "avc.audio.session");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            v46 = ims::error((uint64_t)out, (uint64_t)__p);
            v45 = (_BYTE *)ImsOutStream::operator<<(v46, "Failed to create RTP nw_path_evaluator");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(out, "avc.audio.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          v47 = ims::warn((uint64_t)out, (uint64_t)__p);
          v45 = (_BYTE *)ImsOutStream::operator<<(v47, "No remote connection found for session");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        v45[17] = 0;
        if (v63 < 0)
          operator delete(__p[0]);
        if (out[23] < 0)
          operator delete(*(void **)out);
        v43 = 1073741825;
        goto LABEL_105;
      }
      std::string::basic_string[abi:ne180100]<0>(out, "avc.audio.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v21 = ImsLogger::warn(ims::_logger, (uint64_t)out, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Not enough information to configure with", 40);
      *(_BYTE *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(out, "avc.audio.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v21 = ImsLogger::error(ims::_logger, (uint64_t)out, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"RTCP Transport is null", 22);
      *(_BYTE *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(out, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v21 = ImsLogger::error(ims::_logger, (uint64_t)out, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"RTP Transport is null", 21);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v21 + 17) = 0;
  if (v63 < 0)
    operator delete(__p[0]);
  if (out[23] < 0)
    operator delete(*(void **)out);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 1073741825;
LABEL_55:
  v27 = v57;
  if (v57)
  {
    v28 = (unint64_t *)&v57->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v59;
  if (v59)
  {
    v31 = (unint64_t *)&v59->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v10 = v61;
  if (v61)
  {
LABEL_66:
    v33 = (unint64_t *)&v10->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BEE01AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void ___ZN15AVCAudioSession19scheduleSkywalkInitENSt3__18weak_ptrI10SDPSessionEE_block_invoke(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  uint64_t *v6;
  int v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  ImsPrefs *v20;
  void **UseRTPDetectionAutoStartKey;
  void *v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  MediaSessionStateMachine *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  int v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _BOOL4 v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  void *v67;
  std::__shared_weak_count *v68;
  void *v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  void *v73;
  std::__shared_weak_count *v74;
  void *v75;
  std::__shared_weak_count *v76;
  void (**v77)(ImsResult *__hidden);
  uint64_t *v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  _QWORD v86[2];

  v2 = (_QWORD *)a1[4];
  v3 = (std::__shared_weak_count *)a1[6];
  v86[0] = a1[5];
  v86[1] = v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  AVCAudioSession::cancelNwListeners(v2, (uint64_t)v86);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  AVCAudioSession::initializeWithSkywalk((AVCAudioSession *)&v83, (uint64_t)v2);
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v77 = &off_1E78B7238;
  v78 = &_bambiDomain;
  v79 = 0;
  v6 = v84;
  v7 = v85;
  ImsResult::~ImsResult((ImsResult *)&v77);
  ImsResult::~ImsResult((ImsResult *)&v83);
  if (v6 != &_bambiDomain || v7)
  {
    v83 = 0;
    v84 = 0;
    v12 = (std::__shared_weak_count *)v2[5];
    if (v12)
    {
      v84 = (uint64_t *)std::__shared_weak_count::lock(v12);
      if (v84)
      {
        v13 = v2[4];
        v83 = v13;
        if (v13)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)v2, &v75);
          (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v13 + 16))(v13, &v75, 9);
          v14 = v76;
          if (v76)
          {
            p_shared_owners = (unint64_t *)&v76->__shared_owners_;
            do
              v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
        }
      }
    }
    v17 = (std::__shared_weak_count *)v84;
    if (v84)
    {
      v18 = (unint64_t *)(v84 + 1);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      goto LABEL_108;
    }
    return;
  }
  v83 = 0;
  v84 = 0;
  v8 = (std::__shared_weak_count *)a1[6];
  if (v8)
  {
    v84 = (uint64_t *)std::__shared_weak_count::lock(v8);
    if (v84)
    {
      v9 = a1[5];
      v83 = v9;
      if (v9)
      {
        v77 = 0;
        v78 = 0;
        v10 = *(std::__shared_weak_count **)(v9 + 128);
        if (v10)
        {
          v10 = std::__shared_weak_count::lock(v10);
          v11 = v10;
          v78 = (uint64_t *)v10;
          if (v10)
          {
            v10 = *(std::__shared_weak_count **)(v9 + 120);
            v77 = (void (**)(ImsResult *__hidden))v10;
          }
        }
        else
        {
          v11 = 0;
        }
        v20 = (ImsPrefs *)SipStack::prefs((SipStack *)v10);
        UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v20);
        v22 = ImsPrefs::prefWithKey(v20, UseRTPDetectionAutoStartKey);
        if (v22)
        {
          v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 40))(v22);
          if (!v11)
          {
LABEL_35:
            if (v23)
            {
              v26 = (std::__shared_weak_count *)v2[72];
              if (v26)
              {
                v27 = std::__shared_weak_count::lock(v26);
                v78 = (uint64_t *)v27;
                if (v27)
                {
                  v28 = v27;
                  v29 = (MediaSessionStateMachine *)v2[71];
                  v77 = (void (**)(ImsResult *__hidden))v29;
                  if (v29)
                    MediaSessionStateMachine::setTrafficDetected(v29, 1);
                  v30 = (unint64_t *)&v28->__shared_owners_;
                  do
                    v31 = __ldaxr(v30);
                  while (__stlxr(v31 - 1, v30));
                  if (!v31)
                  {
                    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                    std::__shared_weak_count::__release_weak(v28);
                  }
                }
              }
              v32 = *(std::__shared_weak_count **)(v83 + 1936);
              if (v32)
              {
                v33 = *(_QWORD *)(v83 + 1928);
                v34 = (unint64_t *)&v32->__shared_weak_owners_;
                do
                  v35 = __ldxr(v34);
                while (__stxr(v35 + 1, v34));
                v36 = std::__shared_weak_count::lock(v32);
                std::__shared_weak_count::__release_weak(v32);
                if (v36)
                {
                  if (v33)
                    *(_BYTE *)(v33 + 454) = 1;
                  v37 = (unint64_t *)&v36->__shared_owners_;
                  do
                    v38 = __ldaxr(v37);
                  while (__stlxr(v38 - 1, v37));
                  if (!v38)
                  {
                    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                    std::__shared_weak_count::__release_weak(v36);
                  }
                }
              }
            }
            goto LABEL_54;
          }
        }
        else
        {
          v23 = *((_BYTE *)UseRTPDetectionAutoStartKey + 57) != 0;
          if (!v11)
            goto LABEL_35;
        }
        v24 = (unint64_t *)&v11->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_35;
      }
    }
  }
LABEL_54:
  v39 = (std::__shared_weak_count *)v84;
  if (v84)
  {
    v40 = (unint64_t *)(v84 + 1);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  AVCAudioSession::completeInit((AVCAudioSession *)&v83, (uint64_t)v2);
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v77 = &off_1E78B7238;
  v78 = &_bambiDomain;
  v79 = 0;
  v42 = v84;
  v43 = v85;
  ImsResult::~ImsResult((ImsResult *)&v77);
  ImsResult::~ImsResult((ImsResult *)&v83);
  if (v42 != &_bambiDomain || v43)
  {
    v83 = 0;
    v84 = 0;
    v55 = (std::__shared_weak_count *)v2[5];
    if (v55)
    {
      v84 = (uint64_t *)std::__shared_weak_count::lock(v55);
      if (v84)
      {
        v56 = v2[4];
        v83 = v56;
        if (v56)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)v2, &v73);
          (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v56 + 16))(v56, &v73, 9);
          v57 = v74;
          if (v74)
          {
            v58 = (unint64_t *)&v74->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
        }
      }
    }
    v17 = (std::__shared_weak_count *)v84;
    if (v84)
    {
      v60 = (unint64_t *)(v84 + 1);
      do
        v19 = __ldaxr(v60);
      while (__stlxr(v19 - 1, v60));
      goto LABEL_108;
    }
  }
  else
  {
    v44 = (std::__shared_weak_count *)a1[6];
    v71 = a1[5];
    v72 = v44;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_weak_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *))(*v2 + 48))(&v83, v2, &v71);
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v77 = &off_1E78B7238;
    v78 = &_bambiDomain;
    v79 = 0;
    v48 = v84 == &_bambiDomain && v85 == 0;
    ImsResult::~ImsResult((ImsResult *)&v77);
    ImsResult::~ImsResult((ImsResult *)&v83);
    if (v72)
      std::__shared_weak_count::__release_weak(v72);
    if (v48)
    {
      v83 = 0;
      v84 = 0;
      v49 = (std::__shared_weak_count *)v2[5];
      if (v49)
      {
        v84 = (uint64_t *)std::__shared_weak_count::lock(v49);
        if (v84)
        {
          v50 = v2[4];
          v83 = v50;
          if (v50)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)v2, &v69);
            (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v50 + 16))(v50, &v69, 0);
            v51 = v70;
            if (v70)
            {
              v52 = (unint64_t *)&v70->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
          }
        }
      }
      v17 = (std::__shared_weak_count *)v84;
      if (v84)
      {
        v54 = (unint64_t *)(v84 + 1);
        do
          v19 = __ldaxr(v54);
        while (__stlxr(v19 - 1, v54));
LABEL_108:
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    else
    {
      v83 = 0;
      v84 = 0;
      v61 = (std::__shared_weak_count *)v2[5];
      if (v61)
      {
        v84 = (uint64_t *)std::__shared_weak_count::lock(v61);
        if (v84)
        {
          v62 = v2[4];
          v83 = v62;
          if (v62)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)v2, &v67);
            (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v62 + 16))(v62, &v67, 9);
            v63 = v68;
            if (v68)
            {
              v64 = (unint64_t *)&v68->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
          }
        }
      }
      v17 = (std::__shared_weak_count *)v84;
      if (v84)
      {
        v66 = (unint64_t *)(v84 + 1);
        do
          v19 = __ldaxr(v66);
        while (__stlxr(v19 - 1, v66));
        goto LABEL_108;
      }
    }
  }
}

void sub_1BEE02300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void AVCAudioSession::cancelNwListeners(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _BYTE *v10;
  unint64_t v11;
  int v12;
  _BYTE *v13;
  std::__shared_weak_count *v14;
  unint64_t v15;
  int v16;
  _BYTE *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  ImsUdpNw *v26;
  std::__shared_weak_count *v27;
  void *__p;
  std::__shared_weak_count *v29;
  char v30;
  void *v31;
  std::__shared_weak_count *v32;
  char v33;

  std::string::basic_string[abi:ne180100]<0>(&v31, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v31, (uint64_t)&__p);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"cancelNwListeners", 17);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v30 < 0)
    operator delete(__p);
  if (v33 < 0)
    operator delete(v31);
  v8 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v8)
    return;
  v9 = std::__shared_weak_count::lock(v8);
  v32 = v9;
  if (!v9)
    return;
  v10 = *(_BYTE **)a2;
  v31 = v10;
  if (!v10)
  {
    v14 = v9;
LABEL_41:
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    return;
  }
  __p = 0;
  v29 = 0;
  v11 = a1[6];
  v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1);
  if (v12 == 2)
  {
    if (v10[584])
    {
      v13 = v10 + 152;
      goto LABEL_18;
    }
  }
  else if (v12 == 6 && v10[1856])
  {
    v13 = v10 + 1496;
    goto LABEL_18;
  }
  v13 = v10 + 1032;
  if (!v10[1328])
    v13 = 0;
LABEL_18:
  RTPTransportManager::getNwTransport(v11, *((unsigned __int16 *)v13 + 12), (uint64_t *)&__p);
  v26 = 0;
  v27 = 0;
  v15 = a1[6];
  v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1);
  if (v16 == 2)
  {
    if (v10[584])
    {
      v17 = v10 + 152;
      goto LABEL_26;
    }
  }
  else if (v16 == 6 && v10[1856])
  {
    v17 = v10 + 1496;
    goto LABEL_26;
  }
  v17 = v10 + 1032;
  if (!v10[1328])
    v17 = 0;
LABEL_26:
  RTPTransportManager::getNwTransport(v15, (unsigned __int16)(*((_WORD *)v17 + 12) + 1), (uint64_t *)&v26);
  if (__p)
    ImsUdpNw::cancelNwListener((ImsUdpNw *)__p);
  if (v26)
    ImsUdpNw::cancelNwListener(v26);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v29;
  if (v29)
  {
    v22 = (unint64_t *)&v29->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v14 = v32;
  if (v32)
    goto LABEL_41;
}

void sub_1BEE026CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSKNSt3__18weak_ptrI10SDPSessionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSKNSt3__18weak_ptrI10SDPSessionEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void AVCAudioSession::setConfiguration(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  int v13;
  void *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  ImsPrefs *v28;
  void **EnableANBRKey;
  void *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  ImsPrefs *v37;
  void **EnableRateAdaptationKey;
  void *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  _WORD *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _WORD *v57;
  std::string::size_type v58;
  std::string *v59;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  __int16 v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_weak_owners;
  unint64_t v71;
  BOOL v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  BOOL v78;
  std::__shared_weak_count *size;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::string *v85;
  int data;
  int v87;
  uint64_t v89;
  __int16 v90;
  __int16 v91;
  std::string *v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t *v99;
  int v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void *v106;
  ImsPrefs *v107;
  void **UseRTPDetectionAutoStartKey;
  void *v109;
  int v110;
  AVCAudioSession *v111;
  std::__shared_weak_count *v112;
  MediaSessionStateMachine *v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::string::size_type v128;
  std::string *v129;
  int data_low;
  int v131;
  BOOL v132;
  int v133;
  std::string *v134;
  int v135;
  uint64_t v137;
  std::string::size_type v138;
  std::string *v139;
  int v140;
  int v141;
  BOOL v142;
  int v143;
  std::string *v144;
  int v145;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  ImsPrefs *v149;
  void **EnableDTXKey;
  void *v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  ImsPrefs *v159;
  void **EnableIncomingDTMFKey;
  void *v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  BOOL v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  _BOOL8 v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  double v179;
  double v180;
  double v181;
  int v182;
  int v183;
  _BOOL8 v184;
  std::string::size_type v185;
  std::string *v186;
  int v187;
  int v188;
  unint64_t *v190;
  unint64_t v191;
  int isConfigEqualToActiveConfig;
  char v193;
  uint64_t v194;
  _BYTE *v195;
  uint64_t v196;
  int v197;
  int v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  unsigned int v202;
  int v203;
  unsigned int v204;
  void *v205[2];
  char v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  std::string v209;
  std::string v210;
  std::string v211;
  _QWORD v212[2];
  _QWORD v213[2];
  void *__p;
  uint64_t *v215;
  int v216;
  char v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _QWORD v221[2];
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  std::__shared_weak_count *v228;

  std::string::basic_string[abi:ne180100]<0>(&v222, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v222, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"setConfiguration", 16);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v217 < 0)
    operator delete(__p);
  if (SBYTE7(v223) < 0)
    operator delete((void *)v222);
  v8 = (void *)MEMORY[0x1C3B876AC](v7);
  v227 = 0;
  v228 = 0;
  v9 = (std::__shared_weak_count *)a2[1];
  if (!v9 || (v228 = std::__shared_weak_count::lock(v9)) == 0 || (v227 = *a2, (v10 = v227) == 0))
  {
    std::string::basic_string[abi:ne180100]<0>(&v222, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v21 = ImsLogger::error(ims::_logger, (uint64_t)&v222, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"SDPSession expired", 18);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_22;
  }
  if (!a1[60] && *((_BYTE *)a1 + 584) && (*((_BYTE *)a1 + 608) || *((_BYTE *)a1 + 609)))
  {
    *(_OWORD *)&v211.__r_.__value_.__l.__data_ = 0uLL;
    v25 = a1[6];
    v26 = (*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1);
    if (v26 == 2)
    {
      if (*(_BYTE *)(v10 + 584))
      {
        v27 = v10 + 152;
        goto LABEL_108;
      }
    }
    else if (v26 == 6 && *(_BYTE *)(v10 + 1856))
    {
      v27 = v10 + 1496;
      goto LABEL_108;
    }
    v27 = v10 + 1032;
    if (!*(_BYTE *)(v10 + 1328))
      v27 = 0;
LABEL_108:
    RTPTransportManager::getNwTransport(v25, *(unsigned __int16 *)(v27 + 24), (uint64_t *)&v211);
    *(_OWORD *)&v210.__r_.__value_.__l.__data_ = 0uLL;
    v66 = a1[6];
    v67 = (*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1);
    if (v67 == 2)
    {
      if (*(_BYTE *)(v10 + 584))
      {
        v68 = v10 + 152;
        goto LABEL_116;
      }
    }
    else if (v67 == 6 && *(_BYTE *)(v10 + 1856))
    {
      v68 = v10 + 1496;
LABEL_116:
      RTPTransportManager::getNwTransport(v66, (unsigned __int16)(*(_WORD *)(v68 + 24) + 1), (uint64_t *)&v210);
      if (v211.__r_.__value_.__r.__words[0])
      {
        ImsUdpNw::cancelNwConnection((ImsUdpNw *)v211.__r_.__value_.__l.__data_);
        nw_listener_set_new_connection_limit(*(nw_listener_t *)(v211.__r_.__value_.__r.__words[0] + 40), 0);
      }
      if (v210.__r_.__value_.__r.__words[0])
      {
        ImsUdpNw::cancelNwConnection((ImsUdpNw *)v210.__r_.__value_.__l.__data_);
        nw_listener_set_new_connection_limit(*(nw_listener_t *)(v210.__r_.__value_.__r.__words[0] + 40), 0);
      }
      v69 = (std::__shared_weak_count *)a2[1];
      v221[0] = *a2;
      v221[1] = v69;
      if (v69)
      {
        p_shared_weak_owners = (unint64_t *)&v69->__shared_weak_owners_;
        do
          v71 = __ldxr(p_shared_weak_owners);
        while (__stxr(v71 + 1, p_shared_weak_owners));
      }
      AVCAudioSession::createNwPath((uint64_t)&v222, (uint64_t)a1, v221, 0);
      v218 = 0u;
      v219 = 0u;
      v220 = 0u;
      __p = &off_1E78B7238;
      v215 = &_bambiDomain;
      v216 = 0;
      v73 = *((uint64_t **)&v222 + 1) != &_bambiDomain || (_DWORD)v223 != 0;
      ImsResult::~ImsResult((ImsResult *)&__p);
      ImsResult::~ImsResult((ImsResult *)&v222);
      if (v69)
        std::__shared_weak_count::__release_weak(v69);
      if (v73)
        goto LABEL_144;
      v74 = (std::__shared_weak_count *)a2[1];
      v213[0] = *a2;
      v213[1] = v74;
      if (v74)
      {
        v75 = (unint64_t *)&v74->__shared_weak_owners_;
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }
      AVCAudioSession::createNwPath((uint64_t)&v222, (uint64_t)a1, v213, 1);
      v218 = 0u;
      v219 = 0u;
      v220 = 0u;
      __p = &off_1E78B7238;
      v215 = &_bambiDomain;
      v216 = 0;
      v78 = *((uint64_t **)&v222 + 1) != &_bambiDomain || (_DWORD)v223 != 0;
      ImsResult::~ImsResult((ImsResult *)&__p);
      ImsResult::~ImsResult((ImsResult *)&v222);
      if (v74)
        std::__shared_weak_count::__release_weak(v74);
      if (v78)
        goto LABEL_144;
      v95 = *a2;
      v96 = (std::__shared_weak_count *)a2[1];
      v212[0] = v95;
      v212[1] = v96;
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_weak_owners_;
        do
          v98 = __ldxr(v97);
        while (__stxr(v98 + 1, v97));
      }
      AVCAudioSession::cancelNwListeners(a1, (uint64_t)v212);
      if (v96)
        std::__shared_weak_count::__release_weak(v96);
      AVCAudioSession::initializeWithSkywalk((AVCAudioSession *)&v222, (uint64_t)a1);
      v218 = 0u;
      v219 = 0u;
      v220 = 0u;
      __p = &off_1E78B7238;
      v215 = &_bambiDomain;
      v216 = 0;
      v99 = (uint64_t *)*((_QWORD *)&v222 + 1);
      v100 = v223;
      ImsResult::~ImsResult((ImsResult *)&__p);
      ImsResult::~ImsResult((ImsResult *)&v222);
      if (v99 != &_bambiDomain || v100)
        goto LABEL_144;
      v222 = 0uLL;
      v101 = *(std::__shared_weak_count **)(v10 + 128);
      if (v101)
      {
        *((_QWORD *)&v222 + 1) = std::__shared_weak_count::lock(v101);
        if (*((_QWORD *)&v222 + 1))
        {
          v101 = *(std::__shared_weak_count **)(v10 + 120);
          *(_QWORD *)&v222 = v101;
        }
        else
        {
          v101 = (std::__shared_weak_count *)v222;
        }
      }
      v107 = (ImsPrefs *)SipStack::prefs((SipStack *)v101);
      UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v107);
      v109 = ImsPrefs::prefWithKey(v107, UseRTPDetectionAutoStartKey);
      if (v109)
        v110 = (*(uint64_t (**)(void *))(*(_QWORD *)v109 + 40))(v109);
      else
        v110 = *((unsigned __int8 *)UseRTPDetectionAutoStartKey + 57);
      v111 = (AVCAudioSession *)std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v222);
      if (v110)
      {
        v222 = 0uLL;
        v112 = (std::__shared_weak_count *)a1[72];
        if (v112)
        {
          *((_QWORD *)&v222 + 1) = std::__shared_weak_count::lock(v112);
          if (*((_QWORD *)&v222 + 1))
          {
            v113 = (MediaSessionStateMachine *)a1[71];
            *(_QWORD *)&v222 = v113;
          }
          else
          {
            v113 = (MediaSessionStateMachine *)v222;
          }
          if (v113)
            MediaSessionStateMachine::setTrafficDetected(v113, 1);
        }
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v222);
        v114 = *(std::__shared_weak_count **)(v10 + 1936);
        if (v114)
        {
          v115 = *(_QWORD *)(v10 + 1928);
          v116 = (unint64_t *)&v114->__shared_weak_owners_;
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 1, v116));
          *(_QWORD *)&v222 = 0;
          *((_QWORD *)&v222 + 1) = std::__shared_weak_count::lock(v114);
          if (*((_QWORD *)&v222 + 1))
            *(_QWORD *)&v222 = v115;
          std::__shared_weak_count::__release_weak(v114);
          if ((_QWORD)v222)
            *(_BYTE *)(v222 + 454) = 1;
        }
        else
        {
          v222 = 0uLL;
        }
        v111 = (AVCAudioSession *)std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v222);
      }
      AVCAudioSession::completeInit(v111, (uint64_t)a1);
      v218 = 0u;
      v219 = 0u;
      v220 = 0u;
      __p = &off_1E78B7238;
      v215 = &_bambiDomain;
      v216 = 0;
      v118 = (uint64_t *)*((_QWORD *)&v222 + 1);
      v119 = v223;
      ImsResult::~ImsResult((ImsResult *)&__p);
      ImsResult::~ImsResult((ImsResult *)&v222);
      if (v118 != &_bambiDomain || v119)
      {
LABEL_144:
        *(_OWORD *)(a3 + 24) = 0u;
        *(_OWORD *)(a3 + 40) = 0u;
        *(_OWORD *)(a3 + 56) = 0u;
        *(_QWORD *)a3 = &off_1E78B7238;
        *(_QWORD *)(a3 + 8) = &_bambiDomain;
        *(_DWORD *)(a3 + 16) = 0x40000000;
        size = (std::__shared_weak_count *)v210.__r_.__value_.__l.__size_;
        if (v210.__r_.__value_.__l.__size_)
        {
          v80 = (unint64_t *)(v210.__r_.__value_.__l.__size_ + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v82 = (std::__shared_weak_count *)v211.__r_.__value_.__l.__size_;
        if (v211.__r_.__value_.__l.__size_)
        {
          v83 = (unint64_t *)(v211.__r_.__value_.__l.__size_ + 8);
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        goto LABEL_27;
      }
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v210);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v211);
      goto LABEL_9;
    }
    v68 = v10 + 1032;
    if (!*(_BYTE *)(v10 + 1328))
      v68 = 0;
    goto LABEL_116;
  }
LABEL_9:
  v11 = (void *)a1[61];
  if (v11)

  a1[61] = objc_opt_new();
  v12 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v10 + 128));
  *(_QWORD *)&v222 = *(_QWORD *)(v10 + 120);
  *((_QWORD *)&v222 + 1) = v12;
  v13 = *(_DWORD *)(v222 + 4076);
  v14 = (void *)objc_msgSend((id)a1[61], "audio");
  if (v13)
    v15 = 2 * (v13 == 1);
  else
    v15 = 1;
  objc_msgSend(v14, "setSubscriptionSlot:", v15);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v18 = v227;
  v222 = 0uLL;
  v19 = *(std::__shared_weak_count **)(v227 + 128);
  if (v19)
  {
    v19 = std::__shared_weak_count::lock(v19);
    v20 = v19;
    *((_QWORD *)&v222 + 1) = v19;
    if (v19)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 120);
      *(_QWORD *)&v222 = v19;
    }
  }
  else
  {
    v20 = 0;
  }
  v28 = (ImsPrefs *)SipStack::prefs((SipStack *)v19);
  EnableANBRKey = (void **)ImsPrefs::getEnableANBRKey(v28);
  v30 = ImsPrefs::prefWithKey(v28, EnableANBRKey);
  if (v30)
    v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 40))(v30);
  else
    v31 = *((_BYTE *)EnableANBRKey + 57) != 0;
  objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setAnbrEnabled:", v31);
  if (v20)
  {
    v32 = (unint64_t *)&v20->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v34 = v227;
  v222 = 0uLL;
  v35 = *(std::__shared_weak_count **)(v227 + 128);
  if (v35)
  {
    v35 = std::__shared_weak_count::lock(v35);
    v36 = v35;
    *((_QWORD *)&v222 + 1) = v35;
    if (v35)
    {
      v35 = *(std::__shared_weak_count **)(v34 + 120);
      *(_QWORD *)&v222 = v35;
    }
  }
  else
  {
    v36 = 0;
  }
  v37 = (ImsPrefs *)SipStack::prefs((SipStack *)v35);
  EnableRateAdaptationKey = (void **)ImsPrefs::getEnableRateAdaptationKey(v37);
  v39 = ImsPrefs::prefWithKey(v37, EnableRateAdaptationKey);
  if (v39)
    v40 = (*(uint64_t (**)(void *))(*(_QWORD *)v39 + 40))(v39);
  else
    v40 = *((_BYTE *)EnableRateAdaptationKey + 57) != 0;
  objc_msgSend((id)a1[61], "setRateAdaptationEnabled:", v40);
  if (v36)
  {
    v41 = (unint64_t *)&v36->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v43 = v227;
  v44 = *(std::__shared_weak_count **)(v227 + 128);
  if (v44 && (v45 = std::__shared_weak_count::lock(v44)) != 0)
  {
    v46 = v45;
    *((_DWORD *)a1 + 168) = *(_DWORD *)(*(_QWORD *)(v43 + 120) + 4076);
    v47 = (unint64_t *)&v45->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  else
  {
    *((_DWORD *)a1 + 168) = MEMORY[0xFEC];
  }
  v49 = v227;
  if (*(_BYTE *)(v227 + 584))
    v50 = (_WORD *)(v227 + 152);
  else
    v50 = 0;
  if (*(_BYTE *)(v227 + 584)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v227 + 152) + 24))(v227 + 152) & 1) != 0)
  {
    memset(&v211, 0, sizeof(v211));
    if (*(char *)(v49 + 455) < 0)
      std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)(v49 + 432), *(_QWORD *)(v49 + 440));
    else
      v211 = *(std::string *)(v49 + 432);
    v51 = *(unsigned __int16 *)(v49 + 482);
    v52 = *(unsigned __int16 *)(v49 + 484);
    v196 = *(_QWORD *)(v49 + 512);
    v200 = *(unsigned __int16 *)(v49 + 520);
    v201 = *(unsigned __int16 *)(v49 + 522);
    v53 = *(char *)(v49 + 531);
    v203 = *(unsigned __int8 *)(v49 + 480);
    v204 = *(char *)(v49 + 532);
    v54 = *(_DWORD *)(v49 + 540);
    v199 = *(int *)(v49 + 548);
    v197 = *(unsigned __int8 *)(v49 + 552);
    v198 = *(unsigned __int8 *)(v49 + 528);
    std::string::basic_string[abi:ne180100]<0>(&v222, "avc.audio.session");
    v202 = v52;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v55 = ImsLogger::debug(ims::_logger, (uint64_t)&v222, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)"Audio RX payload type ", 22);
    *(_BYTE *)(v55 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v55 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v55 + 17) = 0;
    if (v217 < 0)
      operator delete(__p);
    if (SBYTE7(v223) < 0)
      operator delete((void *)v222);
    std::string::basic_string[abi:ne180100]<0>(&v222, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v56 = ImsLogger::debug(ims::_logger, (uint64_t)&v222, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v56 + 8), (uint64_t)"Audio TX payload type ", 22);
    *(_BYTE *)(v56 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v56 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v56 + 17) = 0;
    if (v217 < 0)
      operator delete(__p);
    v57 = v50;
    if (SBYTE7(v223) < 0)
      operator delete((void *)v222);
    if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = HIBYTE(v211.__r_.__value_.__r.__words[2]);
    else
      v58 = v211.__r_.__value_.__l.__size_;
    switch(v58)
    {
      case 6uLL:
        v85 = &v211;
        if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v85 = (std::string *)v211.__r_.__value_.__r.__words[0];
        data = (int)v85->__r_.__value_.__l.__data_;
        v87 = WORD2(v85->__r_.__value_.__r.__words[0]);
        if (data != 760368449 || v87 != 16983)
          goto LABEL_166;
        objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setCodecType:", 1);
        objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setPreferredCodecRateMode:", v51);
        v89 = a1[7];
        v90 = objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "preferredCodecRateMode");
        v91 = 1;
        break;
      case 4uLL:
        v92 = &v211;
        if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v92 = (std::string *)v211.__r_.__value_.__r.__words[0];
        if (LODWORD(v92->__r_.__value_.__l.__data_) == 1431126864)
        {
          v104 = (void *)objc_msgSend((id)a1[61], "audio");
          v105 = 2;
        }
        else
        {
          if (LODWORD(v92->__r_.__value_.__l.__data_) != 1095582544)
            goto LABEL_166;
          v104 = (void *)objc_msgSend((id)a1[61], "audio");
          v105 = 3;
        }
        objc_msgSend(v104, "setCodecType:", v105, v196);
        goto LABEL_227;
      case 3uLL:
        if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = &v211;
        else
          v59 = (std::string *)v211.__r_.__value_.__r.__words[0];
        if (LOWORD(v59->__r_.__value_.__l.__data_) != 19777 || v59->__r_.__value_.__s.__data_[2] != 82)
        {
          if (!memcmp(v59, "EVS", 3uLL))
          {
            objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setPreferredCodecRateMode:", v201 + 1);
            v61 = (void *)objc_msgSend((id)a1[61], "audio");
            if (v204 + 1 >= 3)
              v62 = 0;
            else
              v62 = v204;
            objc_msgSend(v61, "setCodecCMRMode:", v62, v196);
            objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setChannelAwareOffset:", v53);
            if (v54 < 3)
            {
              v106 = (void *)a1[61];
              if (v54)
                objc_msgSend((id)objc_msgSend(v106, "audio"), "setCodecType:", 12);
              else
                objc_msgSend((id)objc_msgSend(v106, "audio"), "setCodecType:", 14);
              v63 = a1[7];
              v64 = objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "preferredCodecRateMode");
              v65 = 4;
            }
            else
            {
              objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setCodecType:", 13);
              v63 = a1[7];
              v64 = objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "preferredCodecRateMode");
              v65 = 5;
            }
            v120 = *(_QWORD *)(v63 + 296);
            if (v120)
            {
              v121 = *(_QWORD *)(v120 + 120);
              *(_WORD *)(v121 + 488) = v65;
              *(_WORD *)(v121 + 490) = v64;
            }
            if (v198)
            {
              objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setPreferredCodecRateMode:", v201);
              v122 = (void *)objc_msgSend((id)a1[61], "audio");
            }
            else
            {
              if (!v200)
              {
                if (v199 > 6)
                  v123 = 0;
                else
                  v123 = dword_1BF299484[v199];
                v122 = (void *)objc_msgSend((id)a1[61], "audio");
                goto LABEL_223;
              }
              v122 = (void *)objc_msgSend((id)a1[61], "audio");
            }
            v123 = v200 | (2 * v196);
LABEL_223:
            objc_msgSend(v122, "setCodecRateModeMask:", v123);
            if (v199 > 4)
              v124 = 0;
            else
              v124 = dword_1BF2994A0[v199];
            objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setCodecBandwidthMask:", v124);
            objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setHeaderFullOnly:", v197 != 0);
            objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setEnableMaxBitrateOnNoChangeCMR:", v204 == 15);
            goto LABEL_227;
          }
          goto LABEL_166;
        }
        objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setCodecType:", 0);
        objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setPreferredCodecRateMode:", v51);
        v89 = a1[7];
        v90 = objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "preferredCodecRateMode");
        v91 = 0;
        break;
      default:
LABEL_166:
        std::string::basic_string[abi:ne180100]<0>(&v222, "avc.audio.session");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        v93 = ims::error((uint64_t)&v222, (uint64_t)&__p);
        v94 = (_BYTE *)ImsOutStream::operator<<(v93, "Codec not recognized: ");
        LoggableString::LoggableString(&v210, &v211);
        (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v94 + 40))(v94, &v210);
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v94 + 64))(v94, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v94[17] = 0;
        if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v210.__r_.__value_.__l.__data_);
        if (v217 < 0)
          operator delete(__p);
        if (SBYTE7(v223) < 0)
          operator delete((void *)v222);
        *(_OWORD *)(a3 + 24) = 0u;
        *(_OWORD *)(a3 + 40) = 0u;
        *(_OWORD *)(a3 + 56) = 0u;
        *(_QWORD *)a3 = &off_1E78B7238;
        *(_QWORD *)(a3 + 8) = &_bambiDomain;
        *(_DWORD *)(a3 + 16) = 1073741825;
        goto LABEL_371;
    }
    v102 = *(_QWORD *)(v89 + 296);
    if (v102)
    {
      v103 = *(_QWORD *)(v102 + 120);
      *(_WORD *)(v103 + 488) = v91;
      *(_WORD *)(v103 + 490) = v90;
    }
LABEL_227:
    v126 = a1[6];
    v125 = a1[7];
    if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v209, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
    else
      v209 = v211;
    RTPManager::reportCodecForSessionId(v125, v126, (uint64_t)&v209);
    if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v209.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v222, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v127 = ImsLogger::debug(ims::_logger, (uint64_t)&v222, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v127 + 8), (uint64_t)"setConfiguration", 16);
    *(_BYTE *)(v127 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v127 + 8), (uint64_t)" Config: codecType: ", 20);
    *(_BYTE *)(v127 + 17) = 0;
    LoggableString::LoggableString(&v210, &v211);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v127 + 40))(v127, &v210);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v127 + 64))(v127, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v127 + 17) = 0;
    if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v210.__r_.__value_.__l.__data_);
    if (v217 < 0)
      operator delete(__p);
    if (SBYTE7(v223) < 0)
      operator delete((void *)v222);
    v128 = HIBYTE(v211.__r_.__value_.__r.__words[2]);
    if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v128 = v211.__r_.__value_.__l.__size_;
    if (v128 == 6)
    {
      v134 = &v211;
      if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v134 = (std::string *)v211.__r_.__value_.__r.__words[0];
      v135 = (int)v134->__r_.__value_.__l.__data_;
      v131 = WORD2(v134->__r_.__value_.__r.__words[0]);
      v132 = v135 == 760368449;
      v133 = 16983;
    }
    else
    {
      if (v128 != 3)
        goto LABEL_257;
      v129 = &v211;
      if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v129 = (std::string *)v211.__r_.__value_.__r.__words[0];
      data_low = LOWORD(v129->__r_.__value_.__l.__data_);
      v131 = v129->__r_.__value_.__s.__data_[2];
      v132 = data_low == 19777;
      v133 = 82;
    }
    if (v132 && v131 == v133)
    {
      std::string::basic_string[abi:ne180100]<0>(&v222, "avc.audio.session");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      v137 = ims::debug((uint64_t)&v222, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v137 + 8), (uint64_t)"Config: preferredCodecRateMode: ", 32);
      *(_BYTE *)(v137 + 17) = 0;
      objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "preferredCodecRateMode");
      std::ostream::operator<<();
      *(_BYTE *)(v137 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v137 + 64))(v137, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v137 + 17) = 0;
      if (v217 < 0)
        operator delete(__p);
      if (SBYTE7(v223) < 0)
        operator delete((void *)v222);
    }
LABEL_257:
    objc_msgSend((id)a1[61], "setTxPayloadType:", *(unsigned __int16 *)(v49 + 182), v196);
    objc_msgSend((id)a1[61], "setRxPayloadType:", *(unsigned __int16 *)(v49 + 180));
    v138 = HIBYTE(v211.__r_.__value_.__r.__words[2]);
    if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v138 = v211.__r_.__value_.__l.__size_;
    if (v138 == 6)
    {
      v144 = &v211;
      if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v144 = (std::string *)v211.__r_.__value_.__r.__words[0];
      v145 = (int)v144->__r_.__value_.__l.__data_;
      v141 = WORD2(v144->__r_.__value_.__r.__words[0]);
      v142 = v145 == 760368449;
      v143 = 16983;
    }
    else
    {
      if (v138 != 3)
        goto LABEL_273;
      v139 = &v211;
      if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v139 = (std::string *)v211.__r_.__value_.__r.__words[0];
      v140 = LOWORD(v139->__r_.__value_.__l.__data_);
      v141 = v139->__r_.__value_.__s.__data_[2];
      v142 = v140 == 19777;
      v143 = 82;
    }
    if (v142 && v141 == v143)
    {
      objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setOctetAligned:", v203 != 0);
      objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setCodecRateModeMask:", v202);
    }
LABEL_273:
    v222 = 0uLL;
    v147 = *(std::__shared_weak_count **)(v49 + 128);
    if (v147)
    {
      v147 = std::__shared_weak_count::lock(v147);
      v148 = v147;
      *((_QWORD *)&v222 + 1) = v147;
      if (v147)
      {
        v147 = *(std::__shared_weak_count **)(v49 + 120);
        *(_QWORD *)&v222 = v147;
      }
    }
    else
    {
      v148 = 0;
    }
    v149 = (ImsPrefs *)SipStack::prefs((SipStack *)v147);
    EnableDTXKey = (void **)ImsPrefs::getEnableDTXKey(v149);
    v151 = ImsPrefs::prefWithKey(v149, EnableDTXKey);
    if (v151)
      v152 = (*(uint64_t (**)(void *))(*(_QWORD *)v151 + 40))(v151);
    else
      v152 = *((_BYTE *)EnableDTXKey + 57) != 0;
    objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setDtxEnabled:", v152);
    if (v148)
    {
      v153 = (unint64_t *)&v148->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    v155 = *(unsigned __int16 *)(v49 + 458);
    if (v155 != 255)
    {
      objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setDtmfPayloadType:", v155);
      objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setDtmfTimestampRate:", *(unsigned __int16 *)(v49 + 462));
    }
    v156 = v227;
    v222 = 0uLL;
    v157 = *(std::__shared_weak_count **)(v227 + 128);
    if (v157)
    {
      v157 = std::__shared_weak_count::lock(v157);
      v158 = v157;
      *((_QWORD *)&v222 + 1) = v157;
      if (v157)
      {
        v157 = *(std::__shared_weak_count **)(v156 + 120);
        *(_QWORD *)&v222 = v157;
      }
    }
    else
    {
      v158 = 0;
    }
    v159 = (ImsPrefs *)SipStack::prefs((SipStack *)v157);
    EnableIncomingDTMFKey = (void **)ImsPrefs::getEnableIncomingDTMFKey(v159);
    v161 = ImsPrefs::prefWithKey(v159, EnableIncomingDTMFKey);
    if (v161)
      v162 = (*(uint64_t (**)(void *))(*(_QWORD *)v161 + 40))(v161);
    else
      v162 = *((_BYTE *)EnableIncomingDTMFKey + 57) != 0;
    objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setDtmfTonePlaybackEnabled:", v162);
    if (v158)
    {
      v163 = (unint64_t *)&v158->__shared_owners_;
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }
    }
    v165 = (_QWORD *)(a1[7] + 280);
    v166 = (_QWORD *)*v165;
    if (!*v165)
      goto LABEL_310;
    v167 = a1[6];
    v168 = a1[7] + 280;
    do
    {
      v169 = v166[4];
      v170 = v169 >= v167;
      if (v169 >= v167)
        v171 = v166;
      else
        v171 = v166 + 1;
      if (v170)
        v168 = (uint64_t)v166;
      v166 = (_QWORD *)*v171;
    }
    while (*v171);
    if ((_QWORD *)v168 == v165 || *(_QWORD *)(v168 + 32) > v167)
LABEL_310:
      v168 = a1[7] + 280;
    objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setDtmfEventCallbacksEnabled:", v168 != (_QWORD)v165);
    objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setPtime:", (unsigned __int16)v57[156]);
    if ((unint64_t)objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "ptime") <= 0x13)
    {
      std::string::basic_string[abi:ne180100]<0>(&v222, "avc.audio.session");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v172 = ImsLogger::error(ims::_logger, (uint64_t)&v222, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v172 + 8), (uint64_t)"Tried to set PacketizationTime to ", 34);
      *(_BYTE *)(v172 + 17) = 0;
      objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "ptime");
      std::ostream::operator<<();
      *(_BYTE *)(v172 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v172 + 8), (uint64_t)" setting it to ", 15);
      *(_BYTE *)(v172 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v172 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v172 + 64))(v172, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v172 + 17) = 0;
      if (v217 < 0)
        operator delete(__p);
      if (SBYTE7(v223) < 0)
        operator delete((void *)v222);
      objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setPtime:", 20);
    }
    objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setMaxPtime:", (unsigned __int16)v57[157]);
    if ((unint64_t)objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "maxPtime") <= 0x13)
    {
      std::string::basic_string[abi:ne180100]<0>(&v222, "avc.audio.session");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v173 = ImsLogger::error(ims::_logger, (uint64_t)&v222, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v173 + 8), (uint64_t)"Tried to set MaxPacketizationTime to ", 37);
      *(_BYTE *)(v173 + 17) = 0;
      objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "maxPtime");
      std::ostream::operator<<();
      *(_BYTE *)(v173 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v173 + 8), (uint64_t)" setting it to ", 15);
      *(_BYTE *)(v173 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v173 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v173 + 64))(v173, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v173 + 17) = 0;
      if (v217 < 0)
        operator delete(__p);
      if (SBYTE7(v223) < 0)
        operator delete((void *)v222);
      objc_msgSend((id)objc_msgSend((id)a1[61], "audio"), "setMaxPtime:", 20);
    }
    v174 = *((_DWORD *)a1 + 62) != 1 || *((_DWORD *)a1 + 106) != 0;
    objc_msgSend((id)a1[61], "setRtcpEnabled:", v174);
    objc_msgSend((id)a1[61], "setRtcpXREnabled:", *((unsigned __int8 *)a1 + 472));
    objc_msgSend((id)a1[61], "setRtcpRemotePort:", (unsigned __int16)(v57[13] + 1));
    v176 = 428;
    if (*((_DWORD *)a1 + 62) == 1)
      v176 = 424;
    LODWORD(v175) = *(_DWORD *)((char *)a1 + v176);
    objc_msgSend((id)a1[61], "setRtcpSendInterval:", (double)v175);
    LOWORD(v177) = *((_WORD *)a1 + 218);
    objc_msgSend((id)a1[61], "setRtpTimeOutInterval:", (double)v177);
    LOWORD(v178) = *((_WORD *)a1 + 219);
    objc_msgSend((id)a1[61], "setRtcpTimeOutInterval:", (double)v178);
    objc_msgSend((id)a1[61], "rtcpTimeOutInterval");
    v180 = v179;
    objc_msgSend((id)a1[61], "rtpTimeOutInterval");
    if (v180 < v181)
    {
      objc_msgSend((id)a1[61], "rtpTimeOutInterval");
      objc_msgSend((id)a1[61], "setRtcpTimeOutInterval:");
    }
    v182 = *((_DWORD *)a1 + 62);
    if (v182 == 1)
    {
      v183 = 0;
      v184 = 1;
    }
    else if (v182 == 2)
    {
      if (*((char *)a1 + 463) < 0)
        std::string::__init_copy_ctor_external(&v210, (const std::string::value_type *)a1[55], a1[56]);
      else
        v210 = *(std::string *)(a1 + 55);
      v185 = HIBYTE(v210.__r_.__value_.__r.__words[2]);
      if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v185 = v210.__r_.__value_.__l.__size_;
      if (v185 == 3)
      {
        v186 = &v210;
        if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v186 = (std::string *)v210.__r_.__value_.__r.__words[0];
        v187 = LOWORD(v186->__r_.__value_.__l.__data_);
        v188 = v186->__r_.__value_.__s.__data_[2];
        v184 = v187 == 21586 && v188 == 80;
      }
      else
      {
        v184 = 0;
      }
      v183 = 1;
    }
    else
    {
      v183 = 0;
      v184 = 0;
    }
    objc_msgSend((id)a1[61], "setRtpTimeOutEnabled:", v184);
    if (v183 && SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v210.__r_.__value_.__l.__data_);
    objc_msgSend((id)a1[61], "setRtcpTimeOutEnabled:", objc_msgSend((id)a1[61], "isRTPTimeOutEnabled") ^ 1);
    v226 = 0;
    v225 = 0u;
    v224 = 0u;
    v223 = 0u;
    v222 = 0u;
    v207 = v227;
    v208 = v228;
    if (v228)
    {
      v190 = (unint64_t *)&v228->__shared_weak_owners_;
      do
        v191 = __ldxr(v190);
      while (__stxr(v191 + 1, v190));
    }
    AVCRTPSession<AVCAudioStream>::setConfiguration((uint64_t)a1, &v207, (uint64_t)&v222);
    if (v208)
      std::__shared_weak_count::__release_weak(v208);
    isConfigEqualToActiveConfig = AVCRTPSession<AVCAudioStream>::isConfigEqualToActiveConfig((uint64_t)a1, (void *)a1[61]);
    *((_BYTE *)a1 + 476) = isConfigEqualToActiveConfig ^ 1;
    if (((isConfigEqualToActiveConfig ^ 1) & 1) == 0)
    {
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(_QWORD *)a3 = &off_1E78B7238;
      *(_QWORD *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
LABEL_370:
      ImsResult::~ImsResult((ImsResult *)&v222);
LABEL_371:
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v211.__r_.__value_.__l.__data_);
      goto LABEL_27;
    }
    v218 = 0u;
    v219 = 0u;
    v220 = 0u;
    __p = &off_1E78B7238;
    v215 = &_bambiDomain;
    v216 = 0;
    if (*((uint64_t **)&v222 + 1) == &_bambiDomain && !(_DWORD)v223)
    {
      v193 = objc_msgSend((id)a1[61], "isValidAudioConfig");
      ImsResult::~ImsResult((ImsResult *)&__p);
      if ((v193 & 1) != 0)
      {
LABEL_369:
        ImsResult::ImsResult(a3, (uint64_t)&v222);
        goto LABEL_370;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "avc.audio.session");
      std::string::basic_string[abi:ne180100]<0>(v205, "");
      v194 = ims::warn((uint64_t)&__p, (uint64_t)v205);
      v195 = (_BYTE *)ImsOutStream::operator<<(v194, "Invalid audio config");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v195 + 64))(v195, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v195[17] = 0;
      if (v206 < 0)
        operator delete(v205[0]);
      if (v217 < 0)
        operator delete(__p);
      v218 = 0u;
      v219 = 0u;
      v220 = 0u;
      __p = &off_1E78B7238;
      v215 = &_bambiDomain;
      v216 = 1073741835;
      ImsResult::operator=((uint64_t)&v222, (uint64_t)&__p);
    }
    ImsResult::~ImsResult((ImsResult *)&__p);
    goto LABEL_369;
  }
  std::string::basic_string[abi:ne180100]<0>(&v222, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v21 = ImsLogger::error(ims::_logger, (uint64_t)&v222, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Could not find TX payload type", 30);
  *(_BYTE *)(v21 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_22:
  *(_BYTE *)(v21 + 17) = 0;
  if (v217 < 0)
    operator delete(__p);
  if (SBYTE7(v223) < 0)
    operator delete((void *)v222);
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 1073741825;
LABEL_27:
  v22 = v228;
  if (v228)
  {
    v23 = (unint64_t *)&v228->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  objc_autoreleasePoolPop(v8);
}

void sub_1BEE041D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v53 - 208);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v53 - 128);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

void `non-virtual thunk to'AVCAudioSession::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  AVCAudioSession::setConfiguration((_QWORD *)(a1 - 24), a2, a3);
}

void AVCAudioSession::configureMediaLinkMonitor(AVCAudioSession *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  std::string::basic_string[abi:ne180100]<0>(v14, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"configureMediaLinkMonitor", 25);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  v8 = (char *)this + 24;
  v9 = (void *)MEMORY[0x1C3B876AC](v7);
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Enabling RTP timeout for session ", 33);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(char *))(*(_QWORD *)v8 + 176))((char *)this + 24);
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
    objc_msgSend(*((id *)this + 60), "setRtpTimeOutIntervalSec:", (double)a2);
  }
  objc_msgSend(*((id *)this + 60), "setRtpTimeOutEnabled:", a2 != 0);
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Enabling RTCP timeout for session ", 34);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(char *))(*(_QWORD *)v8 + 176))((char *)this + 24);
    std::ostream::operator<<();
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
    objc_msgSend(*((id *)this + 60), "setRtcpTimeOutIntervalSec:", (double)a3);
  }
  objc_msgSend(*((id *)this + 60), "setRtcpTimeOutEnabled:", a3 != 0);
  objc_autoreleasePoolPop(v9);
}

void sub_1BEE047BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'AVCAudioSession::configureMediaLinkMonitor(AVCAudioSession *this, unsigned int a2, unsigned int a3)
{
  AVCAudioSession::configureMediaLinkMonitor((AVCAudioSession *)((char *)this - 24), a2, a3);
}

void *AVCAudioSession::configureRemoteRTCP(AVCAudioSession *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  void *result;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"configureRemoteRTCP", 19);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" enabled=", 9);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" interval=", 10);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (*((_BYTE *)this + 473))
  {
    objc_msgSend(*((id *)this + 60), "setRtcpEnabled:", a2);
    objc_msgSend(*((id *)this + 60), "setRtcpSendIntervalSec:", (double)a3);
  }
  result = (void *)*((_QWORD *)this + 61);
  if (result)
  {
    objc_msgSend(result, "setRtcpEnabled:", a2);
    return (void *)objc_msgSend(*((id *)this + 61), "setRtcpSendInterval:", (double)a3);
  }
  return result;
}

void sub_1BEE049A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *`non-virtual thunk to'AVCAudioSession::configureRemoteRTCP(AVCAudioSession *this, uint64_t a2, unsigned int a3)
{
  return AVCAudioSession::configureRemoteRTCP((AVCAudioSession *)((char *)this - 24), a2, a3);
}

void AVCAudioSession::startSendingDTMF(AVCAudioSession *this, char a2)
{
  uint64_t v4;
  _BYTE *v5;
  void *__p[2];
  char v7;
  void *v8;
  void *v9;
  _BYTE *v10;

  std::string::basic_string[abi:ne180100]<0>(&v8, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"startSendingDTMF", 16);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" digit=", 7);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v8);
  v5 = operator new(1uLL);
  v8 = v5;
  *v5 = a2;
  v9 = v5 + 1;
  v10 = v5 + 1;
  (*(void (**)(AVCAudioSession *, void **))(*(_QWORD *)this + 144))(this, &v8);
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
}

void sub_1BEE04B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'AVCAudioSession::startSendingDTMF(AVCAudioSession *this, char a2)
{
  AVCAudioSession::startSendingDTMF((AVCAudioSession *)((char *)this - 24), a2);
}

double AVCAudioSession::stopSendingDTMF@<D0>(AVCAudioSession *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(v7, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"stopSendingDTMF", 15);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

void sub_1BEE04CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double `non-virtual thunk to'AVCAudioSession::stopSendingDTMF@<D0>(AVCAudioSession *this@<X0>, uint64_t a2@<X8>)
{
  return AVCAudioSession::stopSendingDTMF((AVCAudioSession *)((char *)this - 24), a2);
}

void AVCAudioSession::sendDTMFDigits(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  id v7;
  char *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  v6 = (void *)MEMORY[0x1C3B876AC]();
  v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      v10 = *v8++;
      objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithChar:", v10));
    }
    while (v8 != v9);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v11 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Sending DTMF digits: ", 21);
  *(_BYTE *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  objc_msgSend(*(id *)(a1 + 480), "sendDTMFDigitString:withVolume:duration:interval:", v7, *(unsigned __int8 *)(a1 + 464), *(unsigned __int8 *)(a1 + 465), *(unsigned __int16 *)(a1 + 468));
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  objc_autoreleasePoolPop(v6);
}

void sub_1BEE04EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'AVCAudioSession::sendDTMFDigits(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  AVCAudioSession::sendDTMFDigits(a1 - 24, a2, a3);
}

void AVCAudioSession::audioReady(AVCAudioSession *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v12, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"audioReady", 10);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" Audio ready notification received [sessionId=", 46);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  *((_BYTE *)this + 560) = 1;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v12[1] = v4;
    if (v4)
    {
      v5 = v4;
      v6 = (_QWORD *)*((_QWORD *)this + 71);
      v12[0] = v6;
      if (v6)
      {
        v7 = v6[19];
        if (v7)
        {
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 208))(v7, 2))
            (*(void (**)(_QWORD *, _QWORD))(*v6 + 32))(v6, 0);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEE05078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'AVCAudioSession::audioReady(AVCAudioSession *this)
{
  AVCAudioSession::audioReady((AVCAudioSession *)((char *)this - 552));
}

void AVCAudioSession::reportHandover(AVCAudioSession *this, const ims::AccessNetwork *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;

  std::string::basic_string[abi:ne180100]<0>(v24, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"reportHandover", 14);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v23 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  v8 = (void *)*((_QWORD *)this + 60);
  if (v8)
  {
    v9 = *((_QWORD *)this + 6);
    v10 = *((_QWORD *)this + 7);
    v11 = *(_QWORD **)(v10 + 232);
    if (!v11)
      goto LABEL_18;
    v12 = (_QWORD *)(v10 + 232);
    do
    {
      v13 = v11[4];
      v14 = v13 >= v9;
      if (v13 >= v9)
        v15 = v11;
      else
        v15 = v11 + 1;
      if (v14)
        v12 = v11;
      v11 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v12 == (_QWORD *)(v10 + 232) || v12[4] > v9)
    {
LABEL_18:
      v16 = *(_QWORD **)(v10 + 256);
      if (!v16)
        goto LABEL_29;
      v17 = (_QWORD *)(v10 + 256);
      v18 = (_QWORD *)(v10 + 256);
      do
      {
        v19 = v16[4];
        v20 = v19 >= v9;
        if (v19 >= v9)
          v21 = v16;
        else
          v21 = v16 + 1;
        if (v20)
          v18 = v16;
        v16 = (_QWORD *)*v21;
      }
      while (*v21);
      if (v18 == v17 || v18[4] > v9)
LABEL_29:
        objc_msgSend(v8, "setJitterBufferMode:", ims::AccessNetwork::isWifi(a2));
    }
  }
}

void sub_1BEE052D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'AVCAudioSession::reportHandover(AVCAudioSession *this, const ims::AccessNetwork *a2)
{
  AVCAudioSession::reportHandover((AVCAudioSession *)((char *)this - 24), a2);
}

void AVCAudioSession::setRelayMode(AVCAudioSession *this, char a2)
{
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _BOOL4 isWifi;
  void *v22;
  uint64_t v23;
  _BOOL4 v24;
  char isConfigEqualToActiveConfig;
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  char v33;
  void *__p[2];
  _OWORD v35[4];
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;

  std::string::basic_string[abi:ne180100]<0>(v38, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v38, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"setRelayMode", 12);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" isRelayMode=", 13);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (SBYTE7(v35[0]) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  *((_BYTE *)this + 676) = a2;
  v43 = 0;
  v44 = 0;
  RTPManager::sdpSessionForSession(*((RTPManager **)this + 7), *((_QWORD *)this + 6), &v43);
  if (v43)
  {
    v42 = 0;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    *(_OWORD *)v38 = 0u;
    v36 = v43;
    v37 = v44;
    if (v44)
    {
      p_shared_weak_owners = (unint64_t *)&v44->__shared_weak_owners_;
      do
        v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
    }
    (*(void (**)(void **__return_ptr, AVCAudioSession *, uint64_t *))(*(_QWORD *)this + 48))(v38, this, &v36);
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
    v7 = v43;
    v8 = *(std::__shared_weak_count **)(v43 + 128);
    if (!v8)
      goto LABEL_51;
    v9 = std::__shared_weak_count::lock(v8);
    if (!v9)
      goto LABEL_51;
    v10 = v9;
    v11 = *(_QWORD *)(v7 + 120);
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (v13)
    {
      if (!v11)
        goto LABEL_51;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
      if (!v11)
      {
LABEL_51:
        isConfigEqualToActiveConfig = AVCRTPSession<AVCAudioStream>::isConfigEqualToActiveConfig((uint64_t)this, *((void **)this + 61));
        *((_BYTE *)this + 476) = isConfigEqualToActiveConfig ^ 1;
        if ((isConfigEqualToActiveConfig & 1) == 0)
        {
          memset((char *)v35 + 8, 0, 48);
          __p[0] = &off_1E78B7238;
          __p[1] = &_bambiDomain;
          LODWORD(v35[0]) = 0;
          if (v38[1] != &_bambiDomain || (_DWORD)v39)
          {
            ImsResult::~ImsResult((ImsResult *)__p);
          }
          else
          {
            v26 = objc_msgSend(*((id *)this + 61), "isValidAudioConfig");
            ImsResult::~ImsResult((ImsResult *)__p);
            if ((v26 & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "avc.audio.session");
              std::string::basic_string[abi:ne180100]<0>(&v31, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v27 = ImsLogger::warn(ims::_logger, (uint64_t)__p, (uint64_t)&v31);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"Invalid audio config", 20);
              *(_BYTE *)(v27 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v27 + 17) = 0;
              if (v33 < 0)
                operator delete(v31);
              if (SBYTE7(v35[0]) < 0)
                operator delete(__p[0]);
            }
          }
        }
        ImsResult::~ImsResult((ImsResult *)v38);
        goto LABEL_61;
      }
    }
    *(_OWORD *)__p = 0u;
    memset(v35, 0, 56);
    v15 = v43;
    v31 = 0;
    v32 = 0;
    v16 = *(std::__shared_weak_count **)(v43 + 128);
    if (v16)
    {
      v17 = std::__shared_weak_count::lock(v16);
      v32 = v17;
      if (v17)
      {
        v18 = *(_QWORD *)(v15 + 120);
        v31 = (void *)v18;
        goto LABEL_28;
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 0;
LABEL_28:
    if (*(char *)(v18 + 3159) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v18 + 3136), *(_QWORD *)(v18 + 3144));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v18 + 3136);
      *(_QWORD *)&v35[0] = *(_QWORD *)(v18 + 3152);
    }
    if (*(char *)(v18 + 3183) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)v35 + 8), *(const std::string::value_type **)(v18 + 3160), *(_QWORD *)(v18 + 3168));
    }
    else
    {
      *(_OWORD *)((char *)v35 + 8) = *(_OWORD *)(v18 + 3160);
      *((_QWORD *)&v35[1] + 1) = *(_QWORD *)(v18 + 3176);
    }
    v35[2] = *(_OWORD *)(v18 + 3184);
    LOBYTE(v35[3]) = *(_BYTE *)(v18 + 3200);
    if (!v17)
      goto LABEL_38;
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((a2 & 1) != 0)
        goto LABEL_44;
    }
    else
    {
LABEL_38:
      if ((a2 & 1) != 0)
        goto LABEL_44;
    }
    if (!*((_BYTE *)this + 677))
    {
      isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)__p);
      v22 = (void *)objc_msgSend(*((id *)this + 61), "audio");
      if (isWifi)
        v23 = 0;
      else
        v23 = 6;
LABEL_47:
      objc_msgSend(v22, "setAudioStreamMode:", v23);
      if (SHIBYTE(v35[1]) < 0)
        operator delete(*((void **)&v35[0] + 1));
      if (SBYTE7(v35[0]) < 0)
        operator delete(__p[0]);
      goto LABEL_51;
    }
LABEL_44:
    v24 = ims::AccessNetwork::isWifi((ims::AccessNetwork *)__p);
    v22 = (void *)objc_msgSend(*((id *)this + 61), "audio");
    if (v24)
      v23 = 2;
    else
      v23 = 9;
    goto LABEL_47;
  }
  std::string::basic_string[abi:ne180100]<0>(v38, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v14 = ImsLogger::error(ims::_logger, (uint64_t)v38, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"SDP session not found", 21);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (SBYTE7(v35[0]) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
LABEL_61:
  v28 = v44;
  if (v44)
  {
    v29 = (unint64_t *)&v44->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1BEE05878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ImsResult::~ImsResult((ImsResult *)&a31);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v36 - 64);
  _Unwind_Resume(a1);
}

void ims::AccessNetwork::~AccessNetwork(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void AVCAudioSession::setScreeningMode(AVCAudioSession *this, uint64_t a2)
{
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _BOOL4 isWifi;
  void *v22;
  uint64_t v23;
  _BOOL4 v24;
  char isConfigEqualToActiveConfig;
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  char v33;
  void *__p[2];
  _OWORD v35[4];
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;

  std::string::basic_string[abi:ne180100]<0>(v38, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v38, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"setScreeningMode", 16);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" isScreeningMode=", 17);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (SBYTE7(v35[0]) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  *((_BYTE *)this + 677) = a2;
  v43 = 0;
  v44 = 0;
  RTPManager::sdpSessionForSession(*((RTPManager **)this + 7), *((_QWORD *)this + 6), &v43);
  if (v43)
  {
    v42 = 0;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    *(_OWORD *)v38 = 0u;
    v36 = v43;
    v37 = v44;
    if (v44)
    {
      p_shared_weak_owners = (unint64_t *)&v44->__shared_weak_owners_;
      do
        v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
    }
    (*(void (**)(void **__return_ptr, AVCAudioSession *, uint64_t *))(*(_QWORD *)this + 48))(v38, this, &v36);
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
    v7 = v43;
    v8 = *(std::__shared_weak_count **)(v43 + 128);
    if (!v8)
      goto LABEL_51;
    v9 = std::__shared_weak_count::lock(v8);
    if (!v9)
      goto LABEL_51;
    v10 = v9;
    v11 = *(_QWORD *)(v7 + 120);
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (v13)
    {
      if (!v11)
        goto LABEL_51;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
      if (!v11)
      {
LABEL_51:
        isConfigEqualToActiveConfig = AVCRTPSession<AVCAudioStream>::isConfigEqualToActiveConfig((uint64_t)this, *((void **)this + 61));
        *((_BYTE *)this + 476) = isConfigEqualToActiveConfig ^ 1;
        if ((isConfigEqualToActiveConfig & 1) == 0)
        {
          memset((char *)v35 + 8, 0, 48);
          __p[0] = &off_1E78B7238;
          __p[1] = &_bambiDomain;
          LODWORD(v35[0]) = 0;
          if (v38[1] != &_bambiDomain || (_DWORD)v39)
          {
            ImsResult::~ImsResult((ImsResult *)__p);
          }
          else
          {
            v26 = objc_msgSend(*((id *)this + 61), "isValidAudioConfig");
            ImsResult::~ImsResult((ImsResult *)__p);
            if ((v26 & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "avc.audio.session");
              std::string::basic_string[abi:ne180100]<0>(&v31, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v27 = ImsLogger::warn(ims::_logger, (uint64_t)__p, (uint64_t)&v31);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"Invalid audio config", 20);
              *(_BYTE *)(v27 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v27 + 17) = 0;
              if (v33 < 0)
                operator delete(v31);
              if (SBYTE7(v35[0]) < 0)
                operator delete(__p[0]);
            }
          }
        }
        ImsResult::~ImsResult((ImsResult *)v38);
        goto LABEL_61;
      }
    }
    *(_OWORD *)__p = 0u;
    memset(v35, 0, 56);
    v15 = v43;
    v31 = 0;
    v32 = 0;
    v16 = *(std::__shared_weak_count **)(v43 + 128);
    if (v16)
    {
      v17 = std::__shared_weak_count::lock(v16);
      v32 = v17;
      if (v17)
      {
        v18 = *(_QWORD *)(v15 + 120);
        v31 = (void *)v18;
        goto LABEL_28;
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 0;
LABEL_28:
    if (*(char *)(v18 + 3159) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v18 + 3136), *(_QWORD *)(v18 + 3144));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v18 + 3136);
      *(_QWORD *)&v35[0] = *(_QWORD *)(v18 + 3152);
    }
    if (*(char *)(v18 + 3183) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)v35 + 8), *(const std::string::value_type **)(v18 + 3160), *(_QWORD *)(v18 + 3168));
    }
    else
    {
      *(_OWORD *)((char *)v35 + 8) = *(_OWORD *)(v18 + 3160);
      *((_QWORD *)&v35[1] + 1) = *(_QWORD *)(v18 + 3176);
    }
    v35[2] = *(_OWORD *)(v18 + 3184);
    LOBYTE(v35[3]) = *(_BYTE *)(v18 + 3200);
    if (!v17)
      goto LABEL_38;
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((a2 & 1) != 0)
        goto LABEL_44;
    }
    else
    {
LABEL_38:
      if ((a2 & 1) != 0)
        goto LABEL_44;
    }
    if (!*((_BYTE *)this + 676))
    {
      isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)__p);
      v22 = (void *)objc_msgSend(*((id *)this + 61), "audio");
      if (isWifi)
        v23 = 0;
      else
        v23 = 6;
LABEL_47:
      objc_msgSend(v22, "setAudioStreamMode:", v23);
      objc_msgSend(*((id *)this + 61), "setOutOfProcessCodecsEnabled:", a2);
      if (SHIBYTE(v35[1]) < 0)
        operator delete(*((void **)&v35[0] + 1));
      if (SBYTE7(v35[0]) < 0)
        operator delete(__p[0]);
      goto LABEL_51;
    }
LABEL_44:
    v24 = ims::AccessNetwork::isWifi((ims::AccessNetwork *)__p);
    v22 = (void *)objc_msgSend(*((id *)this + 61), "audio");
    if (v24)
      v23 = 2;
    else
      v23 = 9;
    goto LABEL_47;
  }
  std::string::basic_string[abi:ne180100]<0>(v38, "avc.audio.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v14 = ImsLogger::error(ims::_logger, (uint64_t)v38, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"SDP session not found", 21);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (SBYTE7(v35[0]) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
LABEL_61:
  v28 = v44;
  if (v44)
  {
    v29 = (unint64_t *)&v44->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1BEE05F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ImsResult::~ImsResult((ImsResult *)&a31);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v36 - 64);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionDriver::transactionPending(MediaSessionDriver *this)
{
  return 0;
}

uint64_t MediaSessionDriver::direction(MediaSessionDriver *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t MediaSessionDriver::isAudioReady(MediaSessionDriver *this)
{
  return 1;
}

uint64_t MediaSessionInterface::delegate@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void MediaSessionInterface::setDelegate(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  std::string::basic_string[abi:ne180100]<0>(v15, "rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"setDelegate", 11);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  v9 = *a2;
  v8 = a2[1];
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (std::__shared_weak_count *)a1[2];
  a1[1] = v9;
  a1[2] = v8;
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

void sub_1BEE06234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MediaSessionInterface::clearDelegate(MediaSessionInterface *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t MediaSessionInterface::sessionId(MediaSessionInterface *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t MediaSessionInterface::canChangeMediaStack(MediaSessionInterface *this)
{
  return *((unsigned __int8 *)this + 80);
}

void MediaSessionDriver::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "MediaSessionDriver");
}

uint64_t ImsLoggable::log(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 24))(__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a2;
}

void sub_1BEE06300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'MediaSessionDriver::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "MediaSessionDriver");
}

uint64_t MediaSessionDriver::toTimerIdString@<X0>(_QWORD *a1@<X8>)
{
  return ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(a1);
}

void SipThreadSafeLockable::~SipThreadSafeLockable(SipThreadSafeLockable *this)
{
  *(_QWORD *)this = &off_1E78E5650;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 72));
  SipLockable::~SipLockable(this, (uint64_t *)off_1E78E5690);
}

{
  *(_QWORD *)this = &off_1E78E5650;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 72));
  SipLockable::~SipLockable(this, (uint64_t *)off_1E78E5690);
  JUMPOUT(0x1C3B87100);
}

uint64_t AVCAudioSession::mediaType(AVCAudioSession *this)
{
  return 2;
}

BOOL AVCAudioSession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return a2 == 2;
}

uint64_t AVCAudioSession::isAudioReady(AVCAudioSession *this)
{
  return *((unsigned __int8 *)this + 560);
}

uint64_t `non-virtual thunk to'AVCAudioSession::mediaType(AVCAudioSession *this)
{
  return 2;
}

BOOL `non-virtual thunk to'AVCAudioSession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return a2 == 2;
}

uint64_t `non-virtual thunk to'AVCAudioSession::isAudioReady(AVCAudioSession *this)
{
  return *((unsigned __int8 *)this + 536);
}

void ImsLoggable::~ImsLoggable(ImsLoggable *this)
{
  JUMPOUT(0x1C3B87100);
}

void ImsLoggable::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "UnknownLoggable");
}

void LoggableString::LoggableString(LoggableString *this, const char *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::string::__assign_external((std::string *)this, a2);
}

void sub_1BEE06478(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ims::CFMutableArray::~CFMutableArray(ims::CFMutableArray *this)
{
  ims::CFType::~CFType(this);
  JUMPOUT(0x1C3B87100);
}

ImsOutStream *ims::CFType::log(ims::CFType **this, ImsOutStream *a2)
{
  ims::CFType::shortLog(this[1], a2, 0, 0);
  return a2;
}

void ims::CFType::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "CFType");
}

CFTypeID ims::CFType::typeID(ims::CFType *this)
{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    return CFGetTypeID(v1);
  else
    return CFNullGetTypeID();
}

uint64_t ims::CFArray::getMemorySize(ims::CFArray *this)
{
  char v2;
  int v3;
  int64_t v4;
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  std::string::size_type size;
  std::string v10[3];
  char *v11;
  unsigned int *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  ims::CFArray::asStrings((uint64_t)this, (uint64_t)&v14, (uint64_t)v10);
  v2 = (*(uint64_t (**)(std::string::size_type, _QWORD))(*(_QWORD *)v10[0].__r_.__value_.__l.__size_ + 24))(v10[0].__r_.__value_.__l.__size_, LODWORD(v10[0].__r_.__value_.__r.__words[2]));
  ImsResult::~ImsResult((ImsResult *)v10);
  if ((v2 & 1) != 0)
  {
    ims::CFArray::asUint32s((uint64_t)this, (unsigned int **)&v11, (uint64_t)v10);
    v3 = (*(uint64_t (**)(std::string::size_type, _QWORD))(*(_QWORD *)v10[0].__r_.__value_.__l.__size_ + 24))(v10[0].__r_.__value_.__l.__size_, LODWORD(v10[0].__r_.__value_.__r.__words[2]));
    ImsResult::~ImsResult((ImsResult *)v10);
    if (v3)
      v4 = 0;
    else
      v4 = (char *)v12 - v11;
    if (v11)
    {
      v12 = (unsigned int *)v11;
      operator delete(v11);
    }
  }
  else
  {
    v5 = v14;
    v6 = v15;
    if (v14 == v15)
    {
      v4 = 0;
    }
    else
    {
      v4 = 0;
      do
      {
        memset(v10, 0, 24);
        if (*((char *)v5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
        }
        else
        {
          v7 = *v5;
          v10[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
          *(_OWORD *)&v10[0].__r_.__value_.__l.__data_ = v7;
        }
        if (SHIBYTE(v10[0].__r_.__value_.__r.__words[2]) < 0)
        {
          size = v10[0].__r_.__value_.__l.__size_;
          operator delete(v10[0].__r_.__value_.__l.__data_);
        }
        else
        {
          size = HIBYTE(v10[0].__r_.__value_.__r.__words[2]);
        }
        v4 += size;
        v5 = (__int128 *)((char *)v5 + 24);
      }
      while (v5 != v6);
    }
  }
  v10[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  return v4;
}

void sub_1BEE0664C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  ImsResult::~ImsResult((ImsResult *)&a9);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  a9 = v20 - 56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v5 = 0;
  v3 = 0u;
  v4 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v3, 1);
  std::ostream::operator<<();
  BYTE1(v4) = 0;
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v4 + 1) + 8, a1);
  *(_QWORD *)&v3 = &off_1E78D7A10;
  if ((_BYTE)v4)
  {
    result = *((_QWORD *)&v3 + 1);
    if (*((_QWORD *)&v3 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 8))(*((_QWORD *)&v3 + 1));
  }
  return result;
}

void sub_1BEE067BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a10)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

uint64_t XcapBootstrappingInfo::XcapBootstrappingInfo(uint64_t a1, bambi::XmlParser *a2, uint64_t a3, bambi::XmlParserItem *a4)
{
  *(_QWORD *)a1 = off_1E78B7C60;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  bambi::XmlParser::parseXml(a2, a1, a3, a4);
  return a1;
}

void sub_1BEE06910(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*(void **)(v1 + 32));
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void XcapBootstrappingInfo::parseChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  void *__p[2];
  char v13;

  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(a2 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  if (v9 == 4)
  {
    v10 = *(_DWORD **)a2;
    if ((v6 & 0x80u) == 0)
      v10 = (_DWORD *)a2;
    if (*v10 == 1684632674)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "btid");
      (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, __p, a3, a1 + 8);
      if (v13 < 0)
        operator delete(__p[0]);
      v6 = *(unsigned __int8 *)(a2 + 23);
      v8 = *(_QWORD *)(a2 + 8);
      v7 = *(_BYTE *)(a2 + 23);
    }
  }
  if (v7 < 0)
    v6 = v8;
  if (v6 == 8)
  {
    v11 = *(_QWORD **)a2;
    if (v7 >= 0)
      v11 = (_QWORD *)a2;
    if (*v11 == 0x656D69746566696CLL)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "lifetime");
      (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, __p, a3, a1 + 32);
      if (v13 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1BEE06A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XcapBootstrappingInfo::~XcapBootstrappingInfo(void **this)
{
  *this = off_1E78B7C60;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78B7C60;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

uint64_t bambi::XmlParserItem::createChild()
{
  return 0;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void BambiLazuliDelegate::handleIncomingLazuli(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  uint64_t v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  if (a8)
  {
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a8 + 56))(a8, v25);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a8 + 40))(a8);
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v27, a9);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, a2, a3, a4, a5, a6, a7, v25, v17, v27);
    v18 = v28;
    if (v28 == v27)
    {
      v19 = 4;
      v18 = v27;
    }
    else
    {
      if (!v28)
        goto LABEL_11;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "sip.msg");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v20 = ImsLogger::error(ims::_logger, (uint64_t)v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Hey, don't call handleIncomingMessage with a NULL body!", 55);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
    if (v22 < 0)
      operator delete(__p[0]);
    if (v24 < 0)
      operator delete(v23[0]);
  }
LABEL_11:
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
}

void sub_1BEE06D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void SipLazuliManager::OutgoingPager::send(std::chrono::steady_clock::time_point *this)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v3;
  SipMessage *v4;
  int v5;
  const std::string *v6;
  SipHeader *v7;
  uint64_t v8;
  uint64_t v9;
  const SipMessage *v10;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *__p[2];
  char v34;

  std::string::basic_string[abi:ne180100]<0>(__p, "sip.laz");
  rep = this->__d_.__rep_;
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)__p, rep + 64);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"SipLazuliManager::OutgoingMessage::send()", 41);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v34 < 0)
    operator delete(__p[0]);
  v4 = (SipMessage *)this[9].__d_.__rep_;
  if (v4)
  {
    v5 = *(_DWORD *)(this->__d_.__rep_ + 192);
    *(_DWORD *)(this->__d_.__rep_ + 192) = v5 + 1;
    v6 = (const std::string *)(*(uint64_t (**)(SipMessage *))(*(_QWORD *)v4 + 112))(v4);
    v7 = SipMessage::header<SipCSeqHeader>(v4, 1);
    *((_DWORD *)v7 + 15) = v5;
    std::string::operator=((std::string *)((char *)v7 + 64), v6);
    this[17].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v8 = *(_QWORD *)(this->__d_.__rep_ + 176);
    v32 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v8 + 16));
    v31 = *(_QWORD *)(v8 + 8);
    v9 = *(_QWORD *)(v31 + 152);
    v10 = (const SipMessage *)this[9].__d_.__rep_;
    v11 = this[1].__d_.__rep_;
    if (this->__d_.__rep_)
      v12 = this->__d_.__rep_ + 16;
    else
      v12 = 0;
    v29 = v12;
    v30 = (std::__shared_weak_count *)v11;
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v27 = 0;
    v28 = 0;
    SipTransactionLayer::sendRequest(v9, v10, &v29, &v27, __p);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)&this[10], (__int128 *)__p);
    v15 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v16 = (unint64_t *)((char *)__p[1] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v30;
    if (v30)
    {
      v22 = (unint64_t *)&v30->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v32;
    if (v32)
    {
      v25 = (unint64_t *)&v32->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    LOBYTE(this[12].__d_.__rep_) = 0;
  }
}

void sub_1BEE07038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void SipLazuliManager::SipLazuliManager(SipLazuliManager *this, SipUserAgent *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __SecKey *RandomKey;
  const __CFAllocator *v8;
  CFArrayRef v9;
  CFArrayRef v10;
  SecKeyRef v11;
  const void *SelfSignedCertificate;
  unsigned int v13;
  std::string::size_type v14;
  char *v16;
  uint64_t v17;
  const void *v18;
  char v19;
  uint64_t v20;
  const char **v21;
  char v22;
  const char *v23;
  const char **v24;
  uint64_t v25;
  char v26;
  size_t size;
  size_t v28;
  std::string *v29;
  std::string *p_p;
  char *v31;
  size_t v32;
  std::string *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::string::size_type v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char v42;
  SecKeyRef v43;
  uint64_t v44;
  uint64_t **v45;
  SipLazuliManager *v46;
  _QWORD v47[2];
  CFTypeRef cf;
  CFTypeRef v49;
  std::string v50;
  std::string v51;
  std::string __p;
  void *v53;
  CFArrayRef v54;
  void *v55[2];
  void *values[2];
  const char *v57;
  CFDictionaryRef v58;
  const char *v59;
  const char *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E78B7F60;
  *((_QWORD *)this + 1) = off_1E78B7F88;
  *((_QWORD *)this + 2) = &off_1E78B81C8;
  *((_QWORD *)this + 3) = off_1E78B7FB8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.laz");
  v40 = (char *)this + 32;
  ImsLogContainer::ImsLogContainer((uint64_t)this + 32, &__p, (const std::string *)((char *)a2 + 56));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 17) = &unk_1E78B7E68;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *(_QWORD *)this = &off_1E78B7CE8;
  *((_QWORD *)this + 1) = &unk_1E78B7D60;
  *((_QWORD *)this + 2) = &unk_1E78B7D90;
  *((_QWORD *)this + 3) = &unk_1E78B7DD8;
  *((_QWORD *)this + 4) = &unk_1E78B7E08;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 25) = (char *)this + 200;
  *((_QWORD *)this + 26) = (char *)this + 200;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = (char *)this + 232;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = (char *)this + 256;
  *((_QWORD *)this + 34) = (char *)this + 272;
  *((_QWORD *)this + 35) = (char *)this + 272;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = (char *)this + 304;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *(_QWORD *)((char *)this + 397) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = &off_1E78B7BD8;
  *((_QWORD *)this + 55) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 28) = 0u;
  SipTimerContainer::SipTimerContainer((SipLazuliManager *)((char *)this + 496));
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_DWORD *)this + 168) = 1065353216;
  v45 = (uint64_t **)((char *)this + 680);
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 86) = 0;
  *((_QWORD *)this + 85) = (char *)this + 688;
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = (char *)this + 712;
  *((_QWORD *)this + 22) = a2;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0x100000001;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v46 = this;
  if (!*((_QWORD *)this + 53))
  {
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Apple Inc.");
    ims::CFString::CFString(&v50, (char *)&__p, 0x8000100u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v59 = 0;
    v60 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "RCS");
    ims::CFString::CFString(&v59, (char *)&__p, 0x8000100u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v57 = (const char *)&off_1E78B8138;
    v58 = 0;
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v57, (const void *)*MEMORY[0x1E0CD6A38], (const void *)*MEMORY[0x1E0CD6A70]);
    ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)&v57, (const void *)*MEMORY[0x1E0CD6A20], 0x800u);
    RandomKey = SecKeyCreateRandomKey(v58, 0);
    v43 = SecKeyCopyPublicKey(RandomKey);
    values[0] = *(void **)MEMORY[0x1E0CD6F58];
    values[1] = (void *)v50.__r_.__value_.__l.__size_;
    v49 = 0;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, 0);
    cf = 0;
    v49 = v9;
    v55[0] = *(void **)MEMORY[0x1E0CD6F48];
    v55[1] = (void *)v60;
    cf = CFArrayCreate(v8, (const void **)v55, 2, 0);
    v53 = 0;
    v54 = 0;
    v53 = CFArrayCreate(v8, &v49, 1, 0);
    v54 = CFArrayCreate(v8, &cf, 1, 0);
    v10 = CFArrayCreate(v8, (const void **)&v53, 2, 0);
    v47[0] = &off_1E78B8138;
    v47[1] = 0;
    ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)v47, (const void *)*MEMORY[0x1E0CD6C90], 0x8000003D);
    v11 = v43;
    SelfSignedCertificate = (const void *)SecGenerateSelfSignedCertificate();
    if (SecCertificateGetSignatureHashAlgorithm() == 4)
    {
      SecCertificateGetSHA1Digest();
      memset(&v51, 0, sizeof(v51));
      memset(&__p, 0, sizeof(__p));
      ctu::cf::assign();
      v51 = __p;
      memset(&__p, 0, sizeof(__p));
      ctu::hex();
      v13 = 0;
      v14 = 2;
      do
      {
        std::string::insert(&__p, v14, ":", 1uLL);
        v14 += 3;
      }
      while (v13++ < 0x12);
      std::string::operator=((std::string *)((char *)this + 472), &__p);
      v11 = v43;
      if (*((char *)this + 471) < 0)
      {
        *((_QWORD *)this + 57) = 5;
        v16 = (char *)*((_QWORD *)this + 56);
      }
      else
      {
        *((_BYTE *)this + 471) = 5;
        v16 = (char *)this + 448;
      }
      strcpy(v16, "SHA-1");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v51.__r_.__value_.__r.__words[0])
      {
        v51.__r_.__value_.__l.__size_ = v51.__r_.__value_.__r.__words[0];
        operator delete(v51.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v17 = (*(uint64_t (**)(char *))(*(_QWORD *)v40 + 56))(v40);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v40 + 16))(v40, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Unable to compute hash for algorithm ", 37);
      *(_BYTE *)(v17 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
    }
    v18 = (const void *)SecIdentityCreate();
    *((_QWORD *)this + 53) = v18;
    ims::CFMutableArray::appendValue((SipLazuliManager *)((char *)this + 432), v18);
    if (SelfSignedCertificate)
      CFRelease(SelfSignedCertificate);
    if (v10)
      CFRelease(v10);
    if (v53)
      CFRelease(v53);
    if (v54)
      CFRelease(v54);
    if (cf)
      CFRelease(cf);
    if (v49)
      CFRelease(v49);
    if (v11)
      CFRelease(v11);
    if (RandomKey)
      CFRelease(RandomKey);
    ims::CFType::~CFType((ims::CFType *)v47);
    ims::CFType::~CFType((ims::CFType *)&v57);
    ims::CFType::~CFType((ims::CFType *)&v59);
    ims::CFType::~CFType((ims::CFType *)&v50);
  }
  v59 = ".msrpIncoming";
  v60 = ".msrpOutgoing";
  v57 = ".wifi";
  v58 = (CFDictionaryRef)".cell";
  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100]<0>(&__p, "com.apple.ipTelephony");
  v41 = (char *)this + 136;
  v19 = 0;
  v20 = 1;
  v21 = &v59;
  do
  {
    v44 = v20;
    v22 = 0;
    v42 = v19;
    v23 = *v21;
    v24 = &v57;
    v25 = 1;
    do
    {
      v26 = v22;
      memset(&v51, 0, sizeof(v51));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v28 = strlen(v23);
      memset(&v50, 0, sizeof(v50));
      std::string::basic_string[abi:ne180100]((uint64_t)&v50, size + v28);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v50;
      else
        v29 = (std::string *)v50.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v29, p_p, size);
      }
      v31 = (char *)v29 + size;
      if (v28)
        memmove(v31, v23, v28);
      v31[v28] = 0;
      v32 = strlen(*v24);
      v33 = std::string::append(&v50, *v24, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      PowerAssertionLock::addAssertion(v45, (__int128 *)&v51);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      v24 = &(&v57)[v25];
      v22 = 1;
      v25 = 2;
    }
    while ((v26 & 1) == 0);
    v21 = &(&v59)[v44];
    v19 = 1;
    v20 = 2;
  }
  while ((v42 & 1) == 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)v46 + 75) = v41;
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = 0uLL;
  v35 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    v51.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
    if (v36)
    {
      v37 = *((_QWORD *)a2 + 1);
      v51.__r_.__value_.__r.__words[0] = v37;
      goto LABEL_70;
    }
  }
  else
  {
    v36 = 0;
  }
  v37 = 0;
LABEL_70:
  if (*(char *)(v37 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v37 + 4136), *(_QWORD *)(v37 + 4144));
  else
    __p = *(std::string *)(v37 + 4136);
  std::string::operator=((std::string *)((char *)v46 + 544), (const std::string *)((char *)v46 + 40));
  std::string::operator=((std::string *)((char *)v46 + 568), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v36)
  {
    v38 = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1BEE07940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD **a9, SipTimerContainer *a10, uint64_t a11, char *a12, uint64_t *a13, void **a14, void **a15, ims::CFType *a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,PowerAssertionLock **a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;

  if (a46 < 0)
    operator delete(__p);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  ims::CFType::~CFType((ims::CFType *)&a24);
  ims::CFType::~CFType((ims::CFType *)(v46 - 128));
  ims::CFType::~CFType((ims::CFType *)(v46 - 112));
  ims::CFType::~CFType((ims::CFType *)&a28);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a23 + 704, *a9);
  PowerAssertionLock::~PowerAssertionLock(a22);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::~__hash_table(a23 + 640);
  SipTimerContainer::~SipTimerContainer(a10);
  if (*(char *)(a23 + 495) < 0)
    operator delete(*a15);
  if (*(char *)(a23 + 471) < 0)
    operator delete(*a14);
  ims::CFType::~CFType(a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a23 + 408);
  if (*(char *)(a23 + 399) < 0)
    operator delete(*(void **)(a23 + 376));
  if (*(char *)(a23 + 375) < 0)
    operator delete(*(void **)(a23 + 352));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a23 + 336);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a11);
  std::__tree<unsigned int>::destroy(a23 + 296, *(_QWORD **)(a23 + 304));
  std::__list_imp<SipLazuliManager::DeferredMessage>::clear(a12);
  std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::destroy(*(void ***)(a23 + 256));
  std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::destroy(*(_QWORD **)(a23 + 232));
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(a13);
  v48 = *(std::__shared_weak_count **)(a23 + 168);
  if (v48)
    std::__shared_weak_count::__release_weak(v48);
  v49 = *(std::__shared_weak_count **)(a23 + 152);
  if (v49)
    std::__shared_weak_count::__release_weak(v49);
  ImsLogContainer::~ImsLogContainer(a17);
  _Unwind_Resume(a1);
}

void ImsLogContainer::~ImsLogContainer(void **this)
{
  *this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

void SipLazuliManager::~SipLazuliManager(SipLazuliManager *this)
{
  const void *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = &off_1E78B7CE8;
  *((_QWORD *)this + 1) = &unk_1E78B7D60;
  *((_QWORD *)this + 2) = &unk_1E78B7D90;
  *((_QWORD *)this + 3) = &unk_1E78B7DD8;
  *((_QWORD *)this + 4) = &unk_1E78B7E08;
  *((_QWORD *)this + 17) = &unk_1E78B7E68;
  v2 = (const void *)*((_QWORD *)this + 53);
  if (v2)
    CFRelease(v2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 704, *((_QWORD **)this + 89));
  PowerAssertionLock::~PowerAssertionLock((PowerAssertionLock **)this + 85);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::~__hash_table((uint64_t)this + 640);
  SipTimerContainer::~SipTimerContainer((SipLazuliManager *)((char *)this + 496));
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  ims::CFType::~CFType((SipLazuliManager *)((char *)this + 432));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 408);
  if (*((char *)this + 399) < 0)
    operator delete(*((void **)this + 47));
  if (*((char *)this + 375) < 0)
    operator delete(*((void **)this + 44));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 336);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 320);
  std::__tree<unsigned int>::destroy((uint64_t)this + 296, *((_QWORD **)this + 38));
  std::__list_imp<SipLazuliManager::DeferredMessage>::clear((char *)this + 272);
  std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::destroy(*((void ***)this + 32));
  std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::destroy(*((_QWORD **)this + 29));
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 25);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  *((_QWORD *)this + 4) = off_1E78CFE68;
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
}

{
  SipLazuliManager::~SipLazuliManager(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipLazuliManager::~SipLazuliManager(SipLazuliManager *this)
{
  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 8));
}

{
  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 16));
}

{
  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 24));
}

{
  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 32));
}

{
  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 136));
}

{
  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

{
  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

{
  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 32));
  JUMPOUT(0x1C3B87100);
}

{
  SipLazuliManager::~SipLazuliManager((SipLazuliManager *)((char *)this - 136));
  JUMPOUT(0x1C3B87100);
}

void SipLazuliManager::deinitialize(SipLazuliManager *this)
{
  std::string v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = 0u;
  v3 = 0u;
  v4 = 0u;
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
  v1.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  LODWORD(v1.__r_.__value_.__r.__words[2]) = 1073741827;
  SipLazuliManager::clearQueueWithResult(this, &v1);
  ImsResult::~ImsResult((ImsResult *)&v1);
}

void sub_1BEE07EBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipLazuliManager::clearQueueWithResult(_QWORD *a1, std::string *a2)
{
  const std::string *v4;
  _QWORD *i;

  v4 = (const std::string *)a1[40];
  if (v4)
  {
    std::string::operator=(a2 + 2, v4 + 2);
    SipLazuliManager::generateError(a1, *(unsigned int *)(a1[40] + 16), a1[40] + 24, (uint64_t)a2);
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](a1 + 40);
  }
  for (i = (_QWORD *)a1[26]; i != a1 + 25; i = (_QWORD *)i[1])
    SipLazuliManager::generateError(a1, *(unsigned int *)(i[2] + 16), i[2] + 24, (uint64_t)a2);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(a1 + 25);
}

void SipLazuliManager::endAllMessages(SipLazuliManager *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  char v21;
  BOOL v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  char v49;
  BOOL v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t *i;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72[2];
  _BYTE v73[56];
  uint64_t v74;
  std::__shared_weak_count *v75;
  void *__p[2];
  char v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;

  SipLazuliManager::deinitialize(this);
  v2 = *((_QWORD *)this + 22);
  v75 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v2 + 16));
  v74 = *(_QWORD *)(v2 + 8);
  v3 = *(_QWORD *)(v74 + 152);
  memset(&v73[8], 0, 48);
  v72[0] = &off_1E78B7238;
  v72[1] = &_bambiDomain;
  *(_DWORD *)v73 = 1073741827;
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipClientTransaction>>::unordered_map((uint64_t)&v83, v3 + 152);
  v82 = 0;
  v80 = 0u;
  v81 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipServerTransaction>>::unordered_map((uint64_t)&v80, v3 + 192);
  v4 = (_QWORD *)v84;
  if ((_QWORD)v84)
  {
    v5 = v3 + 32;
    do
    {
      v6 = v4[5];
      v7 = (std::__shared_weak_count *)v4[6];
      v78 = v6;
      v79 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (v6
        && ((v11 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 288) + 112))(*(_QWORD *)(v6 + 288)),
             v12 = v11[23],
             (v12 & 0x80u) == 0)
          ? (v13 = v11[23])
          : (v13 = *((_QWORD *)v11 + 1)),
            v13 == 7))
      {
        if ((v12 & 0x80) != 0)
        {
          v22 = memcmp(*(const void **)v11, "MESSAGE", *((_QWORD *)v11 + 1)) == 0;
        }
        else if (v11[23])
        {
          v14 = v12 - 1;
          v15 = "MESSAGE";
          do
          {
            v17 = *v11++;
            v16 = v17;
            v19 = *(unsigned __int8 *)v15++;
            v18 = v19;
            v20 = v14-- != 0;
            v21 = v20;
            v22 = v16 == v18;
          }
          while (v16 == v18 && (v21 & 1) != 0);
        }
        else
        {
          v22 = 1;
        }
      }
      else
      {
        v22 = 0;
      }
      if (!v7)
        goto LABEL_26;
      v23 = (unint64_t *)&v7->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (v22)
        {
LABEL_27:
          v25 = v78;
          v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 144))(v78);
          v27 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64);
          if (v26)
          {
            v28 = v27(v3 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v3 + 32, v28);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
            *(_BYTE *)(v28 + 17) = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v25 + 152))(__p, v25);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v28 + 40))(v28, __p);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v28 + 17) = 0;
            if (v77 < 0)
              operator delete(__p[0]);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 32))(v25, 7);
          }
          else
          {
            v29 = v27(v3 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v3 + 32, v29);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"Error out transaction ", 22);
            *(_BYTE *)(v29 + 17) = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v25 + 152))(__p, v25);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v29 + 17) = 0;
            if (v77 < 0)
              operator delete(__p[0]);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v25 + 112))(v25, v72);
          }
        }
      }
      else
      {
LABEL_26:
        if (v22)
          goto LABEL_27;
      }
      v30 = v79;
      if (v79)
      {
        v31 = (unint64_t *)&v79->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  v33 = (_QWORD *)v81;
  if ((_QWORD)v81)
  {
    v34 = v3 + 32;
    do
    {
      v35 = v33[5];
      v36 = (std::__shared_weak_count *)v33[6];
      v78 = v35;
      v79 = v36;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldxr(v37);
        while (__stxr(v39 + 1, v37));
      }
      if (v35
        && ((v40 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 288) + 112))(*(_QWORD *)(v35 + 288)),
             v41 = v40[23],
             (v41 & 0x80u) == 0)
          ? (v42 = v40[23])
          : (v42 = *((_QWORD *)v40 + 1)),
            v42 == 7))
      {
        if ((v41 & 0x80) != 0)
        {
          v50 = memcmp(*(const void **)v40, "MESSAGE", *((_QWORD *)v40 + 1)) == 0;
        }
        else if (v40[23])
        {
          v43 = v41 - 1;
          v44 = "MESSAGE";
          do
          {
            v46 = *v40++;
            v45 = v46;
            v48 = *(unsigned __int8 *)v44++;
            v47 = v48;
            v20 = v43-- != 0;
            v49 = v20;
            v50 = v45 == v47;
          }
          while (v45 == v47 && (v49 & 1) != 0);
        }
        else
        {
          v50 = 1;
        }
      }
      else
      {
        v50 = 0;
      }
      if (!v36)
        goto LABEL_69;
      v51 = (unint64_t *)&v36->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        if (v50)
        {
LABEL_70:
          v53 = v78;
          v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 144))(v78);
          v55 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 64);
          if (v54)
          {
            v56 = v55(v3 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v3 + 32, v56);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v56 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
            *(_BYTE *)(v56 + 17) = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v53 + 160))(__p, v53);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v56 + 40))(v56, __p);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v56 + 17) = 0;
            if (v77 < 0)
              operator delete(__p[0]);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 32))(v53, 7);
          }
          else
          {
            v57 = v55(v3 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v3 + 32, v57);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v57 + 8), (uint64_t)"Error out transaction ", 22);
            *(_BYTE *)(v57 + 17) = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v53 + 160))(__p, v53);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v57 + 40))(v57, __p);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v57 + 17) = 0;
            if (v77 < 0)
              operator delete(__p[0]);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v53 + 112))(v53, v72);
          }
        }
      }
      else
      {
LABEL_69:
        if (v50)
          goto LABEL_70;
      }
      v58 = v79;
      if (v79)
      {
        v59 = (unint64_t *)&v79->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v33 = (_QWORD *)*v33;
    }
    while (v33);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v80);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v83);
  ImsResult::~ImsResult((ImsResult *)v72);
  v61 = v75;
  if (v75)
  {
    v62 = (unint64_t *)&v75->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  for (i = (uint64_t *)*((_QWORD *)this + 82); i; i = (uint64_t *)*i)
  {
    *(_OWORD *)v72 = 0u;
    memset(v73, 0, 24);
    if (*((char *)i + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v72, (const std::string::value_type *)i[2], i[3]);
    }
    else
    {
      *(_OWORD *)v72 = *((_OWORD *)i + 1);
      *(_QWORD *)v73 = i[4];
    }
    v66 = i[5];
    v65 = i[6];
    *(_QWORD *)&v73[8] = v66;
    *(_QWORD *)&v73[16] = v65;
    if (v65)
    {
      v67 = (unint64_t *)(v65 + 8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
      v66 = *(_QWORD *)&v73[8];
    }
    std::string::basic_string[abi:ne180100]<0>(&v83, "TerminateChat");
    MessageSession::terminate(v66, (uint64_t)&v83);
    if (SBYTE7(v84) < 0)
      operator delete((void *)v83);
    v69 = *(std::__shared_weak_count **)&v73[16];
    if (*(_QWORD *)&v73[16])
    {
      v70 = (unint64_t *)(*(_QWORD *)&v73[16] + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    if ((v73[7] & 0x80000000) != 0)
      operator delete(v72[0]);
  }
}

void sub_1BEE086D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v28 - 128);
  ImsResult::~ImsResult((ImsResult *)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::shared_ptr<MessageSession>>::~pair(uint64_t a1)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void SipLazuliManager::generateError(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::string v22;

  v8 = a1 + 38;
  v9 = a1[38];
  if (!v9)
    goto LABEL_12;
  v10 = *(_DWORD *)(a4 + 16);
  v11 = a1 + 38;
  do
  {
    v12 = *(_DWORD *)(v9 + 28);
    v13 = v12 >= v10;
    if (v12 >= v10)
      v14 = (uint64_t *)v9;
    else
      v14 = (uint64_t *)(v9 + 8);
    if (v13)
      v11 = (_QWORD *)v9;
    v9 = *v14;
  }
  while (*v14);
  if (v11 == v8 || v10 < *((_DWORD *)v11 + 7))
LABEL_12:
    v11 = a1 + 38;
  v15 = a1[23];
  if (v15)
  {
    v16 = a1[22];
    v17 = *(std::__shared_weak_count **)(v16 + 16);
    if (v17)
    {
      v18 = std::__shared_weak_count::lock(v17);
      if (v18)
      {
        v19 = *(_QWORD *)(v16 + 8);
LABEL_19:
        if (*(char *)(v19 + 4159) < 0)
          std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v19 + 4136), *(_QWORD *)(v19 + 4144));
        else
          v22 = *(std::string *)(v19 + 4136);
        (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t, uint64_t, BOOL))(*(_QWORD *)v15 + 32))(v15, &v22, a2, a3, a4, v11 != v8);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        goto LABEL_29;
      }
    }
    else
    {
      v18 = 0;
    }
    v19 = 0;
    goto LABEL_19;
  }
LABEL_29:
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](a1 + 40);
}

void sub_1BEE089C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void SipLazuliManager::initialize(uint64_t a1, SipStack **a2)
{
  SipStack *v4;
  SipStack *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  ImsPrefs *v12;
  void **SwitchoverSizeKey;
  void *v14;
  int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ImsPrefs *v20;
  void **FatalSmsErrorsKey;
  uint64_t **v22;
  const char *v23;
  void *__p;
  std::__shared_weak_count *v25;
  uint64_t v26;

  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)((char *)v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v5;
  *(_QWORD *)(a1 + 168) = v4;
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)((char *)*a2 + 3736));
  std::string::operator=((std::string *)(a1 + 376), (const std::string *)((char *)*a2 + 3760));
  v9 = *(_QWORD *)(a1 + 176);
  __p = 0;
  v25 = 0;
  v10 = *(std::__shared_weak_count **)(v9 + 16);
  if (v10)
  {
    v10 = std::__shared_weak_count::lock(v10);
    v11 = v10;
    v25 = v10;
    if (v10)
    {
      v10 = *(std::__shared_weak_count **)(v9 + 8);
      __p = v10;
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = (ImsPrefs *)SipStack::prefs((SipStack *)v10);
  SwitchoverSizeKey = (void **)ImsPrefs::getSwitchoverSizeKey(v12);
  v14 = ImsPrefs::prefWithKey(v12, SwitchoverSizeKey);
  if (v14)
    v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 56))(v14);
  else
    v15 = *((_DWORD *)SwitchoverSizeKey + 15);
  *(_DWORD *)(a1 + 400) = v15;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v18 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(a1 + 404) = *(_DWORD *)(a1 + 400) != 0;
  v19 = (*(uint64_t (**)(uint64_t))(v18 + 64))(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Using SwitchoverSize ", 21);
  *(_BYTE *)(v19 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v19 + 17) = 0;
  __p = 0;
  v25 = 0;
  v26 = 0;
  v20 = (ImsPrefs *)SipStack::prefs(*a2);
  FatalSmsErrorsKey = (void **)ImsPrefs::getFatalSmsErrorsKey(v20);
  ImsPrefs::stringValue(v20, FatalSmsErrorsKey);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(a1 + 296), &SipResponse::kStatusBadRequest, &SipResponse::kStatusBadRequest);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(a1 + 296), &SipResponse::kStatusNotFound, &SipResponse::kStatusNotFound);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(a1 + 296), &SipResponse::kStatusServerInternalError, &SipResponse::kStatusServerInternalError);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(a1 + 296), &SipResponse::kStatusBadGateway, &SipResponse::kStatusBadGateway);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(a1 + 296), &SipResponse::kStatusServiceUnavailable, &SipResponse::kStatusServiceUnavailable);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(a1 + 296), &SipResponse::kStatusNotImplemented, &SipResponse::kStatusNotImplemented);
  if (*((_BYTE *)*a2 + 2657))
  {
    v22 = (uint64_t **)(*(_QWORD *)(a1 + 176) + 128);
    v23 = "MESSAGE";
    std::__tree<std::__value_type<std::string,SipUserAgentDelegate *>,std::__map_value_compare<std::string,std::__value_type<std::string,SipUserAgentDelegate *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipUserAgentDelegate *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (void **)"MESSAGE", (uint64_t)&std::piecewise_construct, (__int128 **)&v23)[7] = a1;
  }
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_1BEE08D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  a19 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t SipLazuliManager::handleNewServerTransaction(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v3 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v3 || (v4 = *a2, v5 = *(_QWORD *)(a1 + 144), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v5 + 16;
  if (!v5)
    v7 = 0;
  v12 = v7;
  v13 = v6;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v4 + 344), &v12);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void SipLazuliManager::handleRequestError(SipLazuliManager *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string v8;

  v1 = *((_QWORD *)this + 23);
  if (!v1)
    return;
  v2 = *((_QWORD *)this + 22);
  v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_6;
  }
  v4 = std::__shared_weak_count::lock(v3);
  if (!v4)
  {
LABEL_6:
    v5 = 0;
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(v2 + 8);
LABEL_7:
  if (*(char *)(v5 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(v5 + 4136), *(_QWORD *)(v5 + 4144));
  else
    v8 = *(std::string *)(v5 + 4136);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v1 + 56))(v1, &v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BEE08F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipLazuliManager::handleRequest(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::string::size_type v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::string::size_type v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void **v28;
  uint64_t v29;
  SipUri *v30;
  char *v31;
  char *v32;
  SipUri *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  const void *v42;
  size_t v43;
  std::string::size_type size;
  std::string *v45;
  size_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unsigned int v50;
  std::string::size_type v51;
  size_t v52;
  std::string *v53;
  size_t v54;
  char v55;
  _QWORD *v56;
  std::string::size_type v57;
  std::string *v58;
  std::string *v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  __int128 v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  uint64_t **v71;
  char *v72;
  __int128 *v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  __int128 *v89;
  __int128 *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  SipUri *v97;
  char *v98;
  std::string v99;
  char v100[72];
  char v101[72];
  char v102[72];
  char v103[72];
  std::string v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  std::string v108;
  std::string v109;
  _QWORD v110[3];
  _QWORD *v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 184);
  if (!v6)
    goto LABEL_17;
  v7 = *(_QWORD *)(a1 + 176);
  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = 0uLL;
  v8 = *(std::__shared_weak_count **)(v7 + 16);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_6;
  }
  v9 = std::__shared_weak_count::lock(v8);
  v108.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  if (!v9)
  {
LABEL_6:
    v10 = 0;
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v108.__r_.__value_.__r.__words[0] = v10;
LABEL_7:
  if (*(char *)(v10 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v109, *(const std::string::value_type **)(v10 + 4136), *(_QWORD *)(v10 + 4144));
  else
    v109 = *(std::string *)(v10 + 4136);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 48))(v6, &v109);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_17:
  v13 = a1 + 32;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Received message request ", 25);
  *(_BYTE *)(v14 + 17) = 0;
  v15 = (char *)SipMessage::header<SipCallIdHeader>(a2);
  if (v15)
    v16 = (__int128 *)(v15 + 64);
  else
    v16 = &ims::kEmptyString;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 32))(v14, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" on stack ", 10);
  *(_BYTE *)(v14 + 17) = 0;
  v17 = *(_QWORD *)(a1 + 176);
  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = 0uLL;
  v18 = *(std::__shared_weak_count **)(v17 + 16);
  if (v18)
  {
    v19 = std::__shared_weak_count::lock(v18);
    v108.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
    if (v19)
    {
      v20 = *(_QWORD *)(v17 + 8);
      v108.__r_.__value_.__r.__words[0] = v20;
      goto LABEL_25;
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = 0;
LABEL_25:
  if (*(char *)(v20 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v109, *(const std::string::value_type **)(v20 + 4136), *(_QWORD *)(v20 + 4144));
  else
    v109 = *(std::string *)(v20 + 4136);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 32))(v14, &v109);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  memset(&v104, 0, sizeof(v104));
  v23 = SipMessage::header<SipContactHeader>(a2);
  if (!v23)
    goto LABEL_43;
  v24 = 0;
  v25 = v23[9];
  if (v25 && v25 != v23[10])
  {
    v26 = v25 + 8;
    if (SipUri::isValidUri((SipUri *)(v25 + 8)))
    {
      std::string::basic_string[abi:ne180100]<0>(&v109, "+g.gsma.rcs.isbot");
      v27 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v25 + 424, (void **)&v109.__r_.__value_.__l.__data_);
      v28 = (void **)(v25 + 432);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      if (v28 != v27)
      {
        SipUri::asString(v26, 2, &v109);
        v104 = v109;
        v24 = 1;
        goto LABEL_44;
      }
    }
LABEL_43:
    v24 = 0;
  }
LABEL_44:
  if (!*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 176)) + 1154)
    || *(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 176)) + 456))
  {
    v29 = SipUserAgent::config(*(SipUserAgent **)(a1 + 176));
    v30 = SipRequest::bestSenderIdentity(a2, *(_DWORD *)(v29 + 804));
    v98 = SipMessage::assertedIdentity(a2, 1);
    v31 = (char *)SipMessage::header<SipToHeader>(a2);
    v32 = v31;
    v33 = (SipUri *)(v31 + 104);
    if (v31)
      v34 = v31 + 104;
    else
      v34 = 0;
    if (!v31)
    {
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(a1 + 32);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(a1 + 32, v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"incoming Message missing To: header.", 36);
      *(_BYTE *)(v35 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v35 + 17) = 0;
      v36 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&v109, "Missing To header");
      SipServerTransaction::sendResponse(v36, 400, &v109);
      ImsResult::~ImsResult((ImsResult *)v102);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      v37 = 400;
      goto LABEL_163;
    }
    if (!*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 176)) + 918) || !*(_QWORD *)(a1 + 184))
      goto LABEL_129;
    if (!SipUri::isValidUri(v33))
    {
      std::string::basic_string[abi:ne180100]<0>(&v109, "sms");
      std::string::basic_string[abi:ne180100]<0>(&v108, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v40 = ImsLogger::error(ims::_logger, (uint64_t)&v109, (uint64_t)&v108);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"Failed to validate recipient for MT SMS- Invalid URI", 52);
      *(_BYTE *)(v40 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v40 + 17) = 0;
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v108.__r_.__value_.__l.__data_);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
LABEL_160:
      v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(a1 + 32);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(a1 + 32, v85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v85 + 8), (uint64_t)"incoming Message not destined for UE. Intended Recipient:", 57);
      *(_BYTE *)(v85 + 17) = 0;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v34 + 40))(v34, v85);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v85 + 64))(v85, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v85 + 17) = 0;
      v86 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&v109, "");
      SipServerTransaction::sendResponse(v86, 404, &v109);
      ImsResult::~ImsResult((ImsResult *)v101);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      v37 = 404;
LABEL_163:
      SipLazuliManager::logSendReceiveEvent(a1, 0, v37, 0, v24, (uint64_t)&v104);
      SipLazuliManager::handleRequestError((SipLazuliManager *)a1);
      goto LABEL_193;
    }
    if (*(char *)(a1 + 375) < 0)
    {
      if (!*(_QWORD *)(a1 + 360))
        goto LABEL_129;
    }
    else if (!*(_BYTE *)(a1 + 375))
    {
      goto LABEL_129;
    }
    v41 = *(char *)(a1 + 399);
    if (v41 < 0)
    {
      if (!*(_QWORD *)(a1 + 384))
        goto LABEL_129;
    }
    else if (!*(_BYTE *)(a1 + 399))
    {
      goto LABEL_129;
    }
    memset(&v109, 0, sizeof(v109));
    if (v32[255] < 0)
    {
      std::string::__init_copy_ctor_external(&v109, *((const std::string::value_type **)v32 + 29), *((_QWORD *)v32 + 30));
      LOBYTE(v41) = *(_BYTE *)(a1 + 399);
    }
    else
    {
      v109 = *(std::string *)(v32 + 232);
    }
    v97 = v30;
    if ((v41 & 0x80) != 0)
    {
      v42 = *(const void **)(a1 + 376);
      v43 = *(_QWORD *)(a1 + 384);
    }
    else
    {
      v42 = (const void *)(a1 + 376);
      v43 = v41;
    }
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v109.__r_.__value_.__r.__words[2]);
    else
      size = v109.__r_.__value_.__l.__size_;
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = &v109;
    else
      v45 = (std::string *)v109.__r_.__value_.__r.__words[0];
    if (size >= v43)
      v46 = v43;
    else
      v46 = size;
    if (!memcmp(v42, v45, v46) && size == v43)
    {
      std::string::basic_string[abi:ne180100]<0>(&v108, "sms");
      std::string::basic_string[abi:ne180100]<0>(&v105, "");
      v30 = v97;
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v47 = ImsLogger::debug(ims::_logger, (uint64_t)&v108, (uint64_t)&v105);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"Validated recipient for MT SMS - IMSI match", 43);
      *(_BYTE *)(v47 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_110:
      *(_BYTE *)(v47 + 17) = 0;
      if (SHIBYTE(v107) < 0)
        operator delete(v105);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v108.__r_.__value_.__l.__data_);
      v55 = 1;
      goto LABEL_126;
    }
    if (SipUri::isTelUri(v33))
    {
      SipUri::normalizedPhoneNumber(v33, &v108);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      v109 = v108;
    }
    v48 = (_QWORD *)(a1 + 352);
    if (*(char *)(a1 + 375) < 0)
    {
      v49 = *(_QWORD *)(a1 + 360);
      if (v49 < 4)
      {
        v50 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
        v51 = v109.__r_.__value_.__l.__size_;
        v48 = (_QWORD *)*v48;
LABEL_98:
        if ((v50 & 0x80u) == 0)
          v52 = v50;
        else
          v52 = v51;
        if ((v50 & 0x80u) == 0)
          v53 = &v109;
        else
          v53 = (std::string *)v109.__r_.__value_.__r.__words[0];
        if (v52 >= v49)
          v54 = v49;
        else
          v54 = v52;
        if (memcmp(v48, v53, v54) || v52 != v49)
        {
LABEL_121:
          std::string::basic_string[abi:ne180100]<0>(&v108, "sms");
          std::string::basic_string[abi:ne180100]<0>(&v105, "");
          v30 = v97;
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v63 = ImsLogger::error(ims::_logger, (uint64_t)&v108, (uint64_t)&v105);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v63 + 8), (uint64_t)"Failed to validate recipient for MT SMS - MDN mismatch", 54);
          *(_BYTE *)(v63 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v63 + 17) = 0;
          if (SHIBYTE(v107) < 0)
            operator delete(v105);
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v108.__r_.__value_.__l.__data_);
          v55 = 0;
LABEL_126:
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v109.__r_.__value_.__l.__data_);
          if ((v55 & 1) != 0)
          {
LABEL_129:
            memset(&v109, 0, sizeof(v109));
            v64 = *(_QWORD *)(a2 + 72);
            if (v64)
              v65 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
            else
              v65 = &SipBody::kGenericContentType;
            if (*((char *)v65 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v109, *(const std::string::value_type **)v65, *((_QWORD *)v65 + 1));
            }
            else
            {
              v66 = *v65;
              v109.__r_.__value_.__r.__words[2] = *((_QWORD *)v65 + 2);
              *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v66;
            }
            v67 = *a3;
            std::string::basic_string[abi:ne180100]<0>(&v108, "");
            SipServerTransaction::sendResponse(v67, 200, &v108);
            ImsResult::~ImsResult((ImsResult *)v100);
            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v108.__r_.__value_.__l.__data_);
            SipLazuliManager::logSendReceiveEvent(a1, 0, 200, 0, v24, (uint64_t)&v104);
            v68 = *(_QWORD *)(a1 + 176);
            *(_OWORD *)&v108.__r_.__value_.__l.__data_ = 0uLL;
            v69 = *(std::__shared_weak_count **)(v68 + 16);
            if (v69)
            {
              v70 = std::__shared_weak_count::lock(v69);
              v108.__r_.__value_.__l.__size_ = (std::string::size_type)v70;
              if (v70)
              {
                v71 = *(uint64_t ***)(v68 + 8);
                v108.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
                goto LABEL_142;
              }
            }
            else
            {
              v70 = 0;
            }
            v71 = 0;
LABEL_142:
            v72 = (char *)SipMessage::header<SipCallIdHeader>(a2);
            if (v72)
              v73 = (__int128 *)(v72 + 64);
            else
              v73 = &ims::kEmptyString;
            SipStack::saveEmergencyMessageCallId(v71, v73);
            if (v70)
            {
              v74 = (unint64_t *)&v70->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            memset(&v108, 0, sizeof(v108));
            v105 = 0;
            v106 = 0;
            v107 = 0;
            SipMessage::allHeadersWithName(a2, (const void **)SipHeader::kInReplyToContributionId, (uint64_t)&v105);
            v76 = v105;
            v77 = v106;
            if (v105 != v106)
            {
              while (!*v76)
              {
                v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 64))(a1 + 32);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(a1 + 32, v78);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)"InReplyTo-Contribution-ID: NULL", 31);
                *(_BYTE *)(v78 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v78 + 17) = 0;
                if (++v76 == v77)
                  goto LABEL_156;
              }
              if (((*(uint64_t (**)(_QWORD, std::string *))(*(_QWORD *)*v76 + 40))(*v76, &v108) & 1) == 0)
              {
                v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 64))(a1 + 32);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(a1 + 32, v79);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"InReplyTo-Contribution-ID can't be decoded", 42);
                *(_BYTE *)(v79 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v79 + 17) = 0;
              }
            }
LABEL_156:
            v80 = *(_QWORD *)(a1 + 184);
            if (!v80)
              goto LABEL_187;
            v81 = *(_QWORD *)(a1 + 176);
            v82 = *(std::__shared_weak_count **)(v81 + 16);
            if (v82)
            {
              v83 = std::__shared_weak_count::lock(v82);
              if (v83)
              {
                v84 = *(_QWORD *)(v81 + 8);
                goto LABEL_166;
              }
            }
            else
            {
              v83 = 0;
            }
            v84 = 0;
LABEL_166:
            if (*(char *)(v84 + 4159) < 0)
              std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)(v84 + 4136), *(_QWORD *)(v84 + 4144));
            else
              v99 = *(std::string *)(v84 + 4136);
            v87 = (char *)SipMessage::header<SipConversationIdHeader>(a2);
            v88 = (char *)SipMessage::header<SipContributionIdHeader>(a2);
            if (v87)
              v89 = (__int128 *)(v87 + 64);
            else
              v89 = &ims::kEmptyString;
            if (v88)
              v90 = (__int128 *)(v88 + 64);
            else
              v90 = &ims::kEmptyString;
            v91 = *(_QWORD *)(a2 + 72);
            v110[0] = &off_1E78B7FE8;
            v111 = v110;
            (*(void (**)(uint64_t, std::string *, SipUri *, char *, __int128 *, __int128 *, std::string *, uint64_t, _QWORD *))(*(_QWORD *)v80 + 16))(v80, &v99, v30, v98, v89, v90, &v108, v91, v110);
            v92 = v111;
            if (v111 == v110)
            {
              v93 = 4;
              v92 = v110;
            }
            else
            {
              if (!v111)
              {
LABEL_180:
                if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v99.__r_.__value_.__l.__data_);
                if (v83)
                {
                  v94 = (unint64_t *)&v83->__shared_owners_;
                  do
                    v95 = __ldaxr(v94);
                  while (__stlxr(v95 - 1, v94));
                  if (!v95)
                  {
                    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                    std::__shared_weak_count::__release_weak(v83);
                  }
                }
LABEL_187:
                if (v105)
                {
                  v106 = v105;
                  operator delete(v105);
                }
                if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v108.__r_.__value_.__l.__data_);
                if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v109.__r_.__value_.__l.__data_);
                goto LABEL_193;
              }
              v93 = 5;
            }
            (*(void (**)(void))(*v92 + 8 * v93))();
            goto LABEL_180;
          }
          goto LABEL_160;
        }
        goto LABEL_109;
      }
      v48 = (_QWORD *)*v48;
    }
    else
    {
      v49 = *(unsigned __int8 *)(a1 + 375);
      if (*(unsigned __int8 *)(a1 + 375) <= 3u)
      {
        v50 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
        v51 = v109.__r_.__value_.__l.__size_;
        goto LABEL_98;
      }
    }
    v56 = (_QWORD *)((char *)v48 + v49);
    v57 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
    v58 = &v109;
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v57 = v109.__r_.__value_.__l.__size_;
      v58 = (std::string *)v109.__r_.__value_.__r.__words[0];
    }
    v59 = (std::string *)((char *)v58 + v57 - 1);
    while (v56 != (_QWORD *)((char *)v48 + v49 - 4))
    {
      v61 = *((unsigned __int8 *)v56 - 1);
      v56 = (_QWORD *)((char *)v56 - 1);
      v60 = v61;
      v62 = v59->__r_.__value_.__s.__data_[0];
      v59 = (std::string *)((char *)v59 - 1);
      if (v60 != v62)
        goto LABEL_121;
    }
LABEL_109:
    std::string::basic_string[abi:ne180100]<0>(&v108, "sms");
    std::string::basic_string[abi:ne180100]<0>(&v105, "");
    v30 = v97;
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v47 = ImsLogger::debug(ims::_logger, (uint64_t)&v108, (uint64_t)&v105);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"Validated recipient for MT SMS - MDN match", 42);
    *(_BYTE *)(v47 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_110;
  }
  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 64))(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(a1 + 32, v38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"Secondary device should not receive message.  Faking timeout.", 61);
  *(_BYTE *)(v38 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v38 + 17) = 0;
  v39 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v109, "");
  SipServerTransaction::sendResponse(v39, 408, &v109);
  ImsResult::~ImsResult((ImsResult *)v103);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  SipLazuliManager::logSendReceiveEvent(a1, 0, 408, 0, v24, (uint64_t)&v104);
  SipLazuliManager::handleRequestError((SipLazuliManager *)a1);
LABEL_193:
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BEE09DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 161) < 0)
    operator delete(*(void **)(v20 - 184));
  if (*(char *)(v20 - 137) < 0)
    operator delete(*(void **)(v20 - 160));
  if (*(char *)(v20 - 217) < 0)
    operator delete(*(void **)(v20 - 240));
  _Unwind_Resume(exception_object);
}

void SipLazuliManager::logSendReceiveEvent(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::__shared_weak_count *v7;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string::size_type size;
  std::string *v35;
  int v36;
  std::string *v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::string v51;
  std::string v52;
  std::string v53;
  void *__p[2];
  char v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  std::string v60;
  std::string v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;

  v64 = 0;
  v65 = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 168);
  if (v7)
  {
    v65 = std::__shared_weak_count::lock(v7);
    if (v65)
    {
      v13 = *(_QWORD *)(a1 + 160);
      v64 = v13;
      if (v13)
      {
        v15 = *(_QWORD *)(v13 + 160);
        v14 = *(std::__shared_weak_count **)(v13 + 168);
        if (!v14)
          goto LABEL_9;
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
          if (!v15)
            goto LABEL_81;
        }
        else
        {
LABEL_9:
          if (!v15)
            goto LABEL_81;
        }
        v19 = *(_QWORD *)(v64 + 160);
        v20 = *(std::__shared_weak_count **)(v64 + 168);
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = *(_QWORD *)(v19 + 1040);
        v24 = *(std::__shared_weak_count **)(v19 + 1048);
        v62 = v23;
        v63 = v24;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        if (v20)
        {
          v27 = (unint64_t *)&v20->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        if (v62)
        {
          v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 216))(v62);
          memset(&v61, 0, sizeof(v61));
          memset(&v60, 0, sizeof(v60));
          if (v29)
          {
            v30 = 3;
            *((_BYTE *)&v61.__r_.__value_.__s + 23) = 3;
            LODWORD(v61.__r_.__value_.__l.__data_) = 5260116;
            *((_BYTE *)&v60.__r_.__value_.__s + 23) = 3;
            qmemcpy(&v60, "TLS", 3);
          }
          else
          {
            v58 = 0;
            v59 = 0;
            (*(void (**)(uint64_t, uint64_t *, std::string *))(*(_QWORD *)v62 + 232))(v62, &v58, &v61);
            v31 = v59;
            if (v59)
            {
              v32 = (unint64_t *)&v59->__shared_owners_;
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
            if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v61.__r_.__value_.__l.__size_;
            if (!size)
            {
              if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
              {
                v61.__r_.__value_.__l.__size_ = 3;
                v35 = (std::string *)v61.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&v61.__r_.__value_.__s + 23) = 3;
                v35 = &v61;
              }
              LODWORD(v35->__r_.__value_.__l.__data_) = 5260373;
            }
            v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 224))(v62);
            v30 = SHIBYTE(v60.__r_.__value_.__r.__words[2]);
            if (v36)
            {
              if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
              {
                v60.__r_.__value_.__l.__size_ = 5;
                v37 = (std::string *)v60.__r_.__value_.__r.__words[0];
              }
              else
              {
                v30 = 5;
                *((_BYTE *)&v60.__r_.__value_.__s + 23) = 5;
                v37 = &v60;
              }
              strcpy((char *)v37, "IPSEC");
            }
            else
            {
              if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
              {
                v60.__r_.__value_.__l.__size_ = 4;
                v38 = (std::string *)v60.__r_.__value_.__r.__words[0];
              }
              else
              {
                v30 = 4;
                *((_BYTE *)&v60.__r_.__value_.__s + 23) = 4;
                v38 = &v60;
              }
              strcpy((char *)v38, "NONE");
            }
          }
          (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v64 + 136) + 104))(&v56);
          v39 = v56;
          if (a2)
          {
            v40 = (uint64_t)((double)(std::chrono::steady_clock::now().__d_.__rep_ - a4) / 1000000.0);
            v41 = "MO";
          }
          else
          {
            v40 = 0;
            v41 = "MT";
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v41);
          if (*(char *)(a6 + 23) < 0)
            std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
          else
            v53 = *(std::string *)a6;
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v52, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
          else
            v52 = v61;
          if (v30 < 0)
            std::string::__init_copy_ctor_external(&v51, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
          else
            v51 = v60;
          IMSMetricsManager::logLazuliMessageSendReceive(v39, (a3 & 0xFFFFFFFD) == 200, v40, a3, (uint64_t)__p, 0, a5, (uint64_t)&v53, (uint64_t)&v52, (uint64_t)&v51);
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v51.__r_.__value_.__l.__data_);
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v52.__r_.__value_.__l.__data_);
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
          if (v55 < 0)
            operator delete(__p[0]);
          v42 = v57;
          if (v57)
          {
            v43 = (unint64_t *)&v57->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
        }
        v45 = v63;
        if (v63)
        {
          v46 = (unint64_t *)&v63->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
      }
    }
  }
LABEL_81:
  v48 = v65;
  if (v65)
  {
    v49 = (unint64_t *)&v65->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1BEE0A3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39)
{
  char v39;
  uint64_t v40;

  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (v39 < 0)
    operator delete(*(void **)(v40 - 144));
  if (*(char *)(v40 - 97) < 0)
    operator delete(*(void **)(v40 - 120));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v40 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v40 - 80);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipLazuliManager::handleRequest(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  SipLazuliManager::handleRequest(a1 - 16, a2, a3);
  return 1;
}

void SipLazuliManager::handleIncomingMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::string::size_type v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  NSObject *v32;
  std::string *v33;
  std::string *v34;
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::string v38;
  std::string v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v15 = (_QWORD *)(a1 + 32);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 16))(v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"Received message [conversationId = ", 35);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, a4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" on stack ", 10);
  *(_BYTE *)(v16 + 17) = 0;
  v17 = v15[18];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = 0uLL;
  v18 = *(std::__shared_weak_count **)(v17 + 16);
  if (v18)
  {
    v19 = std::__shared_weak_count::lock(v18);
    v38.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
    if (v19)
    {
      v20 = *(_QWORD *)(v17 + 8);
      v38.__r_.__value_.__r.__words[0] = v20;
      goto LABEL_6;
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = 0;
LABEL_6:
  if (*(char *)(v20 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(v20 + 4136), *(_QWORD *)(v20 + 4144));
  else
    v39 = *(std::string *)(v20 + 4136);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 32))(v16, &v39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v16 + 17) = 0;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v23 = *(_QWORD *)(a1 + 184);
  if (v23)
  {
    memset(&v39, 0, sizeof(v39));
    v24 = *(_QWORD *)(a1 + 176);
    v36 = 0;
    v37 = 0;
    v25 = *(std::__shared_weak_count **)(v24 + 16);
    if (v25)
    {
      v26 = std::__shared_weak_count::lock(v25);
      v37 = v26;
      if (v26)
      {
        v27 = *(_QWORD *)(v24 + 8);
        v36 = v27;
        goto LABEL_22;
      }
    }
    else
    {
      v26 = 0;
    }
    v27 = 0;
LABEL_22:
    if (*(char *)(v27 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v27 + 4136), *(_QWORD *)(v27 + 4144));
    else
      v38 = *(std::string *)(v27 + 4136);
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v40, a8);
    (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t, uint64_t, uint64_t, std::string *, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v23 + 24))(v23, &v38, a2, a3, a4, a5, &v39, a6, a7, v40);
    v28 = v41;
    if (v41 == v40)
    {
      v29 = 4;
      v28 = v40;
    }
    else
    {
      if (!v41)
      {
LABEL_30:
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (v26)
        {
          v30 = (unint64_t *)&v26->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        goto LABEL_39;
      }
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
    goto LABEL_30;
  }
LABEL_39:
  if (*(_BYTE *)(a1 + 404))
  {
    v32 = sImsDispatchQueue;
    if (!sImsDispatchQueue)
    {
      v32 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v32;
    }
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      v39 = *(std::string *)a4;
    v33 = (std::string *)operator new();
    v34 = v33;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(v33, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
    else
      *v33 = v39;
    v38.__r_.__value_.__r.__words[0] = 0;
    v36 = 0;
    dispatch_async_f(v32, v34, (dispatch_function_t)dispatch::async<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&v36);
    std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v38);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
}

void sub_1BEE0A8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  _Unwind_Resume(exception_object);
}

void SipLazuliManager::handleOutgoingMessageSuccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  std::string *v29;
  std::string *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::string v33;
  uint64_t v34;

  v13 = (_QWORD *)(a1 + 32);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(_QWORD *, uint64_t))(*v13 + 16))(v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Message send success conversationId ", 36);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" ctTransactionId ", 17);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, a5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" isEmpty ", 9);
  *(_BYTE *)(v14 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" allChunksAcked ", 16);
  *(_BYTE *)(v14 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" on stack ", 10);
  *(_BYTE *)(v14 + 17) = 0;
  v15 = v13[18];
  v31 = 0;
  v32 = 0;
  v16 = *(std::__shared_weak_count **)(v15 + 16);
  if (v16)
  {
    v17 = std::__shared_weak_count::lock(v16);
    v32 = v17;
    if (v17)
    {
      v18 = *(_QWORD *)(v15 + 8);
      v31 = v18;
      goto LABEL_6;
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = 0;
LABEL_6:
  if (*(char *)(v18 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v18 + 4136), *(_QWORD *)(v18 + 4144));
  else
    v33 = *(std::string *)(v18 + 4136);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 32))(v14, &v33);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = *(_QWORD *)(a1 + 184);
  if (!v21)
    goto LABEL_32;
  v22 = *(_QWORD *)(a1 + 176);
  v31 = 0;
  v32 = 0;
  v23 = *(std::__shared_weak_count **)(v22 + 16);
  if (!v23)
  {
    v24 = 0;
    goto LABEL_21;
  }
  v24 = std::__shared_weak_count::lock(v23);
  v32 = v24;
  if (!v24)
  {
LABEL_21:
    v25 = 0;
    goto LABEL_22;
  }
  v25 = *(_QWORD *)(v22 + 8);
  v31 = v25;
LABEL_22:
  if (*(char *)(v25 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v25 + 4136), *(_QWORD *)(v25 + 4144));
  else
    v33 = *(std::string *)(v25 + 4136);
  (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v33, a4, a3, a5);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if (!v24)
      goto LABEL_32;
  }
  else if (!v24)
  {
    goto LABEL_32;
  }
  v26 = (unint64_t *)&v24->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if ((a6 & 1) != 0)
      return;
    goto LABEL_33;
  }
LABEL_32:
  if ((a6 & 1) != 0)
    return;
LABEL_33:
  if (*(_BYTE *)(a1 + 404) && a7)
  {
    v28 = sImsDispatchQueue;
    if (!sImsDispatchQueue)
    {
      v28 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v28;
    }
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v33 = *(std::string *)a3;
    v29 = (std::string *)operator new();
    v30 = v29;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(v29, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    else
      *v29 = v33;
    v31 = 0;
    v34 = 0;
    dispatch_async_f(v28, v30, (dispatch_function_t)dispatch::async<SipLazuliManager::handleOutgoingMessageSuccess(SipUri const&,std::string const&,unsigned int,std::string const&,BOOL,BOOL)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::handleOutgoingMessageSuccess(SipUri const&,std::string const&,unsigned int,std::string const&,BOOL,BOOL)::$_0,std::default_delete<SipLazuliManager::handleOutgoingMessageSuccess(SipUri const&,std::string const&,unsigned int,std::string const&,BOOL,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
    std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&v34);
    std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&v31);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_1BEE0AD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipLazuliManager::handleOutgoingMessageError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  std::string *v24;
  std::string *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::string v28;
  std::string v29;
  uint64_t v30;

  memset(&v29, 0, sizeof(v29));
  if (*(char *)(a5 + 71) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(a5 + 48), *(_QWORD *)(a5 + 56));
  else
    v29 = *(std::string *)(a5 + 48);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Message send failed conversationId ", 35);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" ctTransactionId ", 17);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 32))(v9, &v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" on stack ", 10);
  *(_BYTE *)(v9 + 17) = 0;
  v10 = *(_QWORD *)(a1 + 176);
  v26 = 0;
  v27 = 0;
  v11 = *(std::__shared_weak_count **)(v10 + 16);
  if (v11)
  {
    v12 = std::__shared_weak_count::lock(v11);
    v27 = v12;
    if (v12)
    {
      v13 = *(_QWORD *)(v10 + 8);
      v26 = v13;
      goto LABEL_9;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
LABEL_9:
  if (*(char *)(v13 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v13 + 4136), *(_QWORD *)(v13 + 4144));
  else
    v28 = *(std::string *)(v13 + 4136);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 32))(v9, &v28);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = *(_QWORD *)(a1 + 184);
  if (v16)
  {
    v17 = *(_QWORD *)(a1 + 176);
    v26 = 0;
    v27 = 0;
    v18 = *(std::__shared_weak_count **)(v17 + 16);
    if (v18)
    {
      v19 = std::__shared_weak_count::lock(v18);
      v27 = v19;
      if (v19)
      {
        v20 = *(_QWORD *)(v17 + 8);
        v26 = v20;
LABEL_25:
        if (*(char *)(v20 + 4159) < 0)
          std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v20 + 4136), *(_QWORD *)(v20 + 4144));
        else
          v28 = *(std::string *)(v20 + 4136);
        (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, &v28, a4, a3, a5, 0);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        goto LABEL_35;
      }
    }
    else
    {
      v19 = 0;
    }
    v20 = 0;
    goto LABEL_25;
  }
LABEL_35:
  if (*(_BYTE *)(a1 + 404))
  {
    v23 = sImsDispatchQueue;
    if (!sImsDispatchQueue)
    {
      v23 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v23;
    }
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v28 = *(std::string *)a3;
    v24 = (std::string *)operator new();
    v25 = v24;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(v24, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
    else
      *v24 = v28;
    v26 = 0;
    v30 = 0;
    dispatch_async_f(v23, v25, (dispatch_function_t)dispatch::async<SipLazuliManager::handleOutgoingMessageError(SipUri const&,std::string const&,unsigned int,ImsResult)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::handleOutgoingMessageError(SipUri const&,std::string const&,unsigned int,ImsResult)::$_0,std::default_delete<SipLazuliManager::handleOutgoingMessageError(SipUri const&,std::string const&,unsigned int,ImsResult)::$_0>>)::{lambda(void *)#1}::__invoke);
    std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&v30);
    std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&v26);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1BEE0B178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipLazuliManager::queueForSend(SipLazuliManager *a1, std::string::size_type a2, int a3, uint64_t a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::string::size_type v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::string *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  std::string __p;
  std::string v21;
  std::string v22;
  std::string::size_type v23;
  std::__shared_weak_count *v24;
  std::string v25;

  v8 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((_QWORD *)(a2 + 32), (unsigned __int8 *)&SipHeader::kHeaderCallId)+ 5);
  memset(&__p, 0, sizeof(__p));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 40))(v8, &__p);
  v10 = *((_QWORD *)a1 + 18);
  v9 = (std::__shared_weak_count *)*((_QWORD *)a1 + 19);
  if (!v9 || (v11 = std::__shared_weak_count::lock(v9)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = (std::string *)operator new(0xA8uLL);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B8068;
  v23 = v10;
  v24 = v12;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v22 = *(std::string *)a4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v21 = __p;
  v13[1].__r_.__value_.__r.__words[0] = v10;
  v13[1].__r_.__value_.__l.__size_ = (std::string::size_type)v12;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  LODWORD(v13[1].__r_.__value_.__r.__words[2]) = a3;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v13 + 2, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    v13[2] = v22;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v13 + 3, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  else
    v13[3] = v21;
  v13[4].__r_.__value_.__l.__size_ = 0;
  v13[4].__r_.__value_.__r.__words[0] = a2;
  HIDWORD(v13[5].__r_.__value_.__r.__words[0]) = 0;
  v13[4].__r_.__value_.__r.__words[2] = 0;
  v13[5].__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v25, "com.apple.ipTelephony.rcs");
  ImsPowerAssertion::ImsPowerAssertion((uint64_t)&v13[5].__r_.__value_.__l.__size_, &v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v13[6].__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v17 = operator new(0x20uLL);
  v17[2] = v13 + 1;
  v17[3] = v13;
  v18 = *((_QWORD *)a1 + 25);
  *v17 = v18;
  v17[1] = (char *)a1 + 200;
  *(_QWORD *)(v18 + 8) = v17;
  *((_QWORD *)a1 + 25) = v17;
  ++*((_QWORD *)a1 + 27);
  v19 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 4) + 64))((_QWORD *)a1 + 4);
  (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 4) + 16))((_QWORD *)a1 + 4, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"queued message for send", 23);
  *(_BYTE *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v19 + 17) = 0;
  SipLazuliManager::processSendQueue(a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEE0B4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  void **v36;
  void *v38;

  if (*(char *)(v34 + 71) < 0)
    operator delete(*v36);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v35);
  if (a25 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v34);
  operator delete(v38);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(a1);
}

void SipLazuliManager::processSendQueue(SipLazuliManager *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _BOOL4 isRegistrationLimitedAccess;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ImsPowerAssertion *v17;
  uint64_t v18;
  int v19;
  _BYTE v20[72];
  _QWORD v21[2];
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void (**v26)(ImsResult *__hidden);
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  _QWORD v30[4];

  if (!*((_QWORD *)this + 40) && !*((_QWORD *)this + 42))
  {
    v2 = (char *)this + 32;
    v3 = *((_QWORD *)this + 27);
    v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))((char *)this + 32, v4);
    v5 = *(_QWORD **)(v4 + 8);
    if (v3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"processing send queue", 21);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)this + 40, *(_QWORD *)(*((_QWORD *)this + 26) + 16), *(_QWORD *)(*((_QWORD *)this + 26) + 24));
      v6 = (uint64_t *)*((_QWORD *)this + 26);
      v7 = *v6;
      *(_QWORD *)(v7 + 8) = v6[1];
      *(_QWORD *)v6[1] = v7;
      --*((_QWORD *)this + 27);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v6 + 2));
      operator delete(v6);
      v8 = *((_QWORD *)this + 22);
      v26 = 0;
      v27 = 0;
      v9 = *(std::__shared_weak_count **)(v8 + 16);
      if (v9)
      {
        v9 = std::__shared_weak_count::lock(v9);
        v10 = v9;
        v27 = (uint64_t *)v9;
        if (v9)
        {
          v9 = *(std::__shared_weak_count **)(v8 + 8);
          v26 = (void (**)(ImsResult *__hidden))v9;
        }
      }
      else
      {
        v10 = 0;
      }
      isRegistrationLimitedAccess = SipStack::isRegistrationLimitedAccess((SipStack *)v9);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (isRegistrationLimitedAccess)
      {
        v14 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))((char *)this + 32);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))((char *)this + 32, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Dropping message in Limited Access mode", 39);
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v14 + 17) = 0;
        v29 = 0u;
        memset(v30, 0, sizeof(v30));
        v26 = &off_1E78B7238;
        v27 = &SipResultDomain::_domain;
        v28 = 503;
        std::string::operator=((std::string *)&v30[1], (const std::string *)(*((_QWORD *)this + 40) + 48));
        v15 = *((_QWORD *)this + 40);
        v16 = *(unsigned int *)(v15 + 16);
        v23 = 0u;
        v24 = 0u;
        v25 = 0u;
        v21[0] = &off_1E78B7238;
        v21[1] = &SipResultDomain::_domain;
        v22 = 503;
        SipLazuliManager::generateError(this, v16, v15 + 24, (uint64_t)v21);
        ImsResult::~ImsResult((ImsResult *)v21);
        ImsResult::~ImsResult((ImsResult *)&v26);
      }
      else
      {
        v17 = (ImsPowerAssertion *)(*((_QWORD *)this + 40) + 104);
        v18 = SipUserAgent::config(*((SipUserAgent **)this + 22));
        v19 = SipTimers::timerValue((SipTimers *)(v18 + 512), (const SipTimer *)&SipTimers::kTimerF, 0);
        ImsPowerAssertion::initialize(v17, (double)(v19 + 30), 0, (uint64_t)v20);
        ImsResult::~ImsResult((ImsResult *)v20);
        SipLazuliManager::OutgoingPager::send(*((std::chrono::steady_clock::time_point **)this + 40));
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"send queue is empty", 19);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
    }
  }
}

void sub_1BEE0B880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult((ImsResult *)(v11 - 136));
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void SipLazuliManager::sendPager(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  _BOOL4 isWifi;
  SipRequest *RequestFromTemplate;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  SipHeader *v20;
  SipHeader *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  ImsPrefs *v25;
  void **UseAoRForSmsSenderIdentityKey;
  void *v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  SipUserAgent *v31;
  uint64_t v32;
  SipHeader *v33;
  SipHeader *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  ImsPrefs *v40;
  void **AddGeolocationSupportedHeaderKey;
  void *v42;
  int v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  SipHeader *v56;
  uint64_t v57;
  char *v58;
  __int128 *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  std::string::size_type v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  SipHeader *v69;
  std::string v70;
  std::string __str;
  uint64_t v72;
  uint64_t v73;
  std::string __p;
  std::string *p_p;

  v10 = (_QWORD *)(a1 + 32);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(_QWORD *, uint64_t))(*v10 + 16))(v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"SipLazuliManager::sendPager", 27);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  v12 = v10[18];
  v13 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v12 + 16));
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  __str.__r_.__value_.__r.__words[0] = *(_QWORD *)(v12 + 8);
  v14 = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 144);
  isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(__str.__r_.__value_.__r.__words[0] + 3136));
  RequestFromTemplate = SipMessageEncodingMap::createRequestFromTemplate((SipMessageEncodingMap *)(v14 + 288), (const std::string *)"MESSAGE", isWifi, *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 176));
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  SipUri::operator=((SipRequest *)((char *)RequestFromTemplate + 112), a2);
  v19 = *(unsigned __int8 *)(a4 + 47);
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(a4 + 32);
  if (v19)
  {
    v20 = SipMessage::header<SipCallIdHeader>(RequestFromTemplate, 1);
    std::string::operator=((std::string *)((char *)v20 + 64), (const std::string *)(a4 + 24));
  }
  else
  {
    ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(*(_QWORD *)(a1 + 176) + 592), 24, &__str);
    v21 = SipMessage::header<SipCallIdHeader>(RequestFromTemplate, 1);
    std::string::operator=((std::string *)((char *)v21 + 64), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v22 = *(_QWORD *)(a1 + 176);
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  v23 = *(std::__shared_weak_count **)(v22 + 16);
  if (v23)
  {
    v23 = std::__shared_weak_count::lock(v23);
    v24 = v23;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
    if (v23)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 8);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    }
  }
  else
  {
    v24 = 0;
  }
  v25 = (ImsPrefs *)SipStack::prefs((SipStack *)v23);
  UseAoRForSmsSenderIdentityKey = (void **)ImsPrefs::getUseAoRForSmsSenderIdentityKey(v25);
  v27 = ImsPrefs::prefWithKey(v25, UseAoRForSmsSenderIdentityKey);
  if (v27)
  {
    v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 40))(v27);
    if (!v24)
      goto LABEL_23;
  }
  else
  {
    v28 = *((_BYTE *)UseAoRForSmsSenderIdentityKey + 57) != 0;
    if (!v24)
      goto LABEL_23;
  }
  v29 = (unint64_t *)&v24->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_23:
  v31 = *(SipUserAgent **)(a1 + 176);
  if (v28)
    v32 = *((_QWORD *)v31 + 31) + 1184;
  else
    v32 = SipUserAgent::publicUri(v31);
  v33 = SipMessage::header<SipFromHeader>(RequestFromTemplate, 1);
  SipUri::operator=((SipHeader *)((char *)v33 + 104), v32);
  v34 = SipMessage::header<SipToHeader>(RequestFromTemplate, 1);
  SipUri::operator=((SipHeader *)((char *)v34 + 104), a2);
  v35 = (const void *)*((_QWORD *)RequestFromTemplate + 9);
  if (v35 != a3)
  {
    if (v35)
      (*(void (**)(const void *))(*(_QWORD *)v35 + 8))(v35);
    *((_QWORD *)RequestFromTemplate + 9) = a3;
  }
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "Geolocation");
    v36 = SipUserAgent::publicUri(*(SipUserAgent **)(a1 + 176));
    SipUri::asString(v36, 0, &__p);
    SipMessage::addHeader(RequestFromTemplate, (uint64_t)&__str, (uint64_t)&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Geolocation-Routing");
    std::string::basic_string[abi:ne180100]<0>(&__p, "yes");
    SipMessage::addHeader(RequestFromTemplate, (uint64_t)&__str, (uint64_t)&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v37 = *(_QWORD *)(a1 + 176);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
    v38 = *(std::__shared_weak_count **)(v37 + 16);
    if (v38)
    {
      v38 = std::__shared_weak_count::lock(v38);
      v39 = v38;
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
      if (v38)
      {
        v38 = *(std::__shared_weak_count **)(v37 + 8);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
      }
    }
    else
    {
      v39 = 0;
    }
    v40 = (ImsPrefs *)SipStack::prefs((SipStack *)v38);
    AddGeolocationSupportedHeaderKey = (void **)ImsPrefs::getAddGeolocationSupportedHeaderKey(v40);
    v42 = ImsPrefs::prefWithKey(v40, AddGeolocationSupportedHeaderKey);
    if (v42)
    {
      v43 = (*(uint64_t (**)(void *))(*(_QWORD *)v42 + 40))(v42);
      if (!v39)
        goto LABEL_50;
    }
    else
    {
      v43 = *((_BYTE *)AddGeolocationSupportedHeaderKey + 57) != 0;
      if (!v39)
        goto LABEL_50;
    }
    v44 = (unint64_t *)&v39->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if (!v43)
        goto LABEL_54;
      goto LABEL_51;
    }
LABEL_50:
    if (!v43)
      goto LABEL_54;
LABEL_51:
    std::string::basic_string[abi:ne180100]<0>(&__str, "geolocation");
    SipMessage::addSupportedOption(RequestFromTemplate, (void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_54:
  v46 = a4 + 72;
  v47 = *(unsigned __int8 *)(a4 + 95);
  if ((v47 & 0x80u) != 0)
    v47 = *(_QWORD *)(a4 + 80);
  if (v47)
    SipMessage::addHeader(RequestFromTemplate, (uint64_t)"Conversation-ID", a4 + 72, 0);
  v48 = *(unsigned __int8 *)(a4 + 119);
  if ((v48 & 0x80u) != 0)
    v48 = *(_QWORD *)(a4 + 104);
  if (v48)
    SipMessage::addHeader(RequestFromTemplate, (uint64_t)"Contribution-ID", a4 + 96, 0);
  v49 = *(unsigned __int8 *)(a4 + 143);
  if ((v49 & 0x80u) != 0)
    v49 = *(_QWORD *)(a4 + 128);
  if (v49)
    SipMessage::addHeader(RequestFromTemplate, (uint64_t)SipHeader::kInReplyToContributionId, a4 + 120, 0);
  std::string::basic_string[abi:ne180100]<0>(&__str, "no-fork");
  SipMessage::addHeader(RequestFromTemplate, (uint64_t)"Request-Disposition", (uint64_t)&__str, 0);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v50 = *(unsigned __int8 *)(a4 + 191);
  v51 = (char)v50;
  if ((v50 & 0x80u) != 0)
    v50 = *(_QWORD *)(a4 + 176);
  if (v50 == 34
    && ((v54 = *(const void **)(a4 + 168), v53 = (const void *)(a4 + 168), v52 = v54, v51 >= 0)
      ? (v55 = v53)
      : (v55 = v52),
        !memcmp(v55, "application/vnd.gsma.rcsrevoke+xml", 0x22uLL)))
  {
    v72 = 0;
    v73 = 256;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)&__str.__r_.__value_.__r.__words[2];
    __str.__r_.__value_.__r.__words[2] = 0;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B82D8;
    std::string::basic_string[abi:ne180100]<0>(&__p, "+g.gsma.rcs.msgrevoke");
    std::string::basic_string[abi:ne180100]<0>(&v70, "");
    p_p = &__p;
    v66 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__l.__size_, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
    std::string::operator=((std::string *)(v66 + 7), &v70);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)"require";
    v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__l.__size_, (void **)"require", (uint64_t)&std::piecewise_construct, (__int128 **)&v70);
    std::string::operator=((std::string *)(v67 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)"explicit";
    v68 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__l.__size_, (void **)"explicit", (uint64_t)&std::piecewise_construct, (__int128 **)&v70);
    std::string::operator=((std::string *)(v68 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v69 = SipMessage::header<SipAcceptContactHeader>(RequestFromTemplate, 1);
    SipAcceptContactHeader::addValueWithServiceMaskAndParams(v69, (BambiServices *)0x20000, (const SipParameterMap *)&__str);
    std::string::basic_string[abi:ne180100]<0>(&__p, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.session");
    SipMessage::addHeader(RequestFromTemplate, (uint64_t)"P-Preferred-Service", (uint64_t)&__p, 0);
  }
  else
  {
    v72 = 0;
    v73 = 256;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)&__str.__r_.__value_.__r.__words[2];
    __str.__r_.__value_.__r.__words[2] = 0;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B82D8;
    v56 = SipMessage::header<SipAcceptContactHeader>(RequestFromTemplate, 1);
    SipAcceptContactHeader::addValueWithServiceMaskAndParams(v56, (BambiServices *)0x400, (const SipParameterMap *)&__str);
    std::string::basic_string[abi:ne180100]<0>(&__p, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg");
    SipMessage::addHeader(RequestFromTemplate, (uint64_t)"P-Preferred-Service", (uint64_t)&__p, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__str.__r_.__value_.__l.__size_, (_QWORD *)__str.__r_.__value_.__r.__words[2]);
  v57 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)(a1 + 32) + 64))(v10);
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(v10, v57);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v57 + 8), (uint64_t)"Queuing message request ", 24);
  *(_BYTE *)(v57 + 17) = 0;
  v58 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)RequestFromTemplate);
  if (v58)
    v59 = (__int128 *)(v58 + 64);
  else
    v59 = &ims::kEmptyString;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v57 + 32))(v57, v59);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v57 + 8), (uint64_t)" on stack ", 10);
  *(_BYTE *)(v57 + 17) = 0;
  v60 = *(_QWORD *)(a1 + 176);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v61 = *(std::__shared_weak_count **)(v60 + 16);
  if (v61)
  {
    v62 = std::__shared_weak_count::lock(v61);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v62;
    if (v62)
    {
      v63 = *(_QWORD *)(v60 + 8);
      __p.__r_.__value_.__r.__words[0] = v63;
      goto LABEL_86;
    }
  }
  else
  {
    v62 = 0;
  }
  v63 = 0;
LABEL_86:
  if (*(char *)(v63 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v63 + 4136), *(_QWORD *)(v63 + 4144));
  else
    __str = *(std::string *)(v63 + 4136);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v57 + 32))(v57, &__str);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v57 + 17) = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v62)
  {
    v64 = (unint64_t *)&v62->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  SipLazuliManager::queueForSend((SipLazuliManager *)a1, (std::string::size_type)RequestFromTemplate, a5, v46);
}

void sub_1BEE0C204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, _QWORD *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v26, a18);
  _Unwind_Resume(a1);
}

void std::list<SipLazuliManager::DeferredMessage>::pop_front(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;

  v2 = *(char **)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)v2;
  *(_QWORD *)(v3 + 8) = *((_QWORD *)v2 + 1);
  **((_QWORD **)v2 + 1) = v3;
  *(_QWORD *)(a1 + 16) = v1 - 1;
  SipUri::~SipUri((SipUri *)(v2 + 312));
  LazuliSendParams::~LazuliSendParams((void **)v2 + 2);
  operator delete(v2);
}

void SipLazuliManager::OutgoingMsrp::~OutgoingMsrp(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void SipLazuliManager::handleAuthChallengeResponse(SipLazuliManager *this, const SipAuthInfo *a2)
{
  SipRequest **v3;
  char *v4;
  uint64_t v5;
  _BYTE v6[72];

  v3 = (SipRequest **)*((_QWORD *)this + 40);
  if (v3 && *((_BYTE *)v3 + 96))
  {
    SipAuthClient::addAuthorizationToRequest(*(SipAuthClient **)(*((_QWORD *)*v3 + 22) + 280), v3[9], 1, (uint64_t)v6);
    ImsResult::~ImsResult((ImsResult *)v6);
    SipLazuliManager::OutgoingPager::send((std::chrono::steady_clock::time_point *)v3);
  }
  else
  {
    v4 = (char *)this + 32;
    v5 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((_QWORD *)this + 4) + 56))((char *)this + 32, a2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))((char *)this + 32, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"received unexpected auth response.  Ignoring it, but checking queue.", 68);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    SipLazuliManager::processSendQueue(this);
  }
}

void `non-virtual thunk to'SipLazuliManager::handleAuthChallengeResponse(SipLazuliManager *this, const SipAuthInfo *a2)
{
  SipLazuliManager::handleAuthChallengeResponse((SipLazuliManager *)((char *)this - 24), a2);
}

void SipLazuliManager::handleAuthChallengeTimeout(SipLazuliManager *this, const SipAuthInfo *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v8[3];
  __int128 v9;
  _OWORD v10[2];

  v3 = *((_QWORD *)this + 40);
  if (v3 && *(_BYTE *)(v3 + 96))
  {
    v4 = (char *)this + 32;
    v5 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((_QWORD *)this + 4) + 56))((char *)this + 32, a2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))((char *)this + 32, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"auth challenge timed out.  Failing current message.", 51);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    v8[2] = 401;
    v9 = 0u;
    memset(v10, 0, sizeof(v10));
    v8[0] = &off_1E78B7238;
    v8[1] = &SipResultDomain::_domain;
    std::string::operator=((std::string *)((char *)v10 + 8), (const std::string *)(*((_QWORD *)this + 40) + 48));
    SipLazuliManager::generateError(this, *(unsigned int *)(*((_QWORD *)this + 40) + 16), *((_QWORD *)this + 40) + 24, (uint64_t)v8);
    SipLazuliManager::processSendQueue(this);
    ImsResult::~ImsResult((ImsResult *)v8);
  }
  else
  {
    v6 = (char *)this + 32;
    v7 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((_QWORD *)this + 4) + 56))((char *)this + 32, a2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v6 + 16))((char *)this + 32, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"received unexpected auth challenge timeout.  Ignoring it, but checking queue.", 77);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    SipLazuliManager::processSendQueue(this);
  }
}

void sub_1BEE0C5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipLazuliManager::handleAuthChallengeTimeout(SipLazuliManager *this, const SipAuthInfo *a2)
{
  SipLazuliManager::handleAuthChallengeTimeout((SipLazuliManager *)((char *)this - 24), a2);
}

uint64_t SipLazuliManager::handleResponse(const std::string **a1, uint64_t a2, _QWORD *a3)
{
  const std::string *v3;
  int v6;
  const std::string **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  const std::string *v11;
  uint64_t v12;
  uint64_t v13;
  SipHeader *v14;
  uint64_t v15;
  uint64_t v17;
  void **v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  const std::string *v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  const std::string *v40;
  const std::string *v41;
  const std::string *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  std::string::size_type size;
  std::string::size_type v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  char *v50;
  int v51;
  uint64_t v52;
  void *v53[2];
  uint64_t v54;
  std::string __str;
  char *v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  void *__p[2];
  __int128 v60;
  __int128 v61;
  std::string v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v3 = a1[40];
  if (!v3)
    return 1;
  if (*a3 != v3[3].__r_.__value_.__l.__size_)
    return 1;
  v6 = *(_DWORD *)(a2 + 88);
  if ((v6 - 100) < 0x64)
    return 1;
  v7 = a1 + 40;
  if (v6 == 401 && HIDWORD(v3[4].__r_.__value_.__r.__words[0]) <= 1)
  {
    v3[4].__r_.__value_.__s.__data_[0] = 1;
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)&v3[3].__r_.__value_.__l.__size_, (__int128 *)__p);
    v8 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v9 = (unint64_t *)((char *)__p[1] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    ++HIDWORD(v3[4].__r_.__value_.__r.__words[0]);
    if ((SipAuthClient::handleUnauthorizedResponse((SipAuthClient *)a1[22][11].__r_.__value_.__r.__words[2], (const SipResponse *)a2, (SipAuthChallengeSource *)(a1 + 3)) & 1) == 0)
    {
      v61 = 0u;
      memset(&v62, 0, sizeof(v62));
      *(_OWORD *)__p = 0u;
      v60 = 0u;
      SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)__p);
      std::string::operator=(&v62, *v7 + 2);
      v11 = *v7;
      v12 = LODWORD((*v7)->__r_.__value_.__r.__words[2]);
      SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)&v56);
      SipLazuliManager::generateError(a1, v12, (uint64_t)&v11[1], (uint64_t)&v56);
      ImsResult::~ImsResult((ImsResult *)&v56);
      SipLazuliManager::processSendQueue((SipLazuliManager *)a1);
      ImsResult::~ImsResult((ImsResult *)__p);
    }
    return 1;
  }
  v13 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a2 + 32), (unsigned __int8 *)&SipHeader::kHeaderCallId)+ 5);
  memset(&__str, 0, sizeof(__str));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 40))(v13, &__str);
  v53[0] = 0;
  v53[1] = 0;
  v54 = 0;
  v14 = SipMessage::header<SipContactHeader>((SipMessage *)(*v7)[3].__r_.__value_.__l.__data_, 0);
  if (!v14)
    goto LABEL_23;
  v15 = *((_QWORD *)v14 + 9);
  if (!v15 || v15 == *((_QWORD *)v14 + 10))
    goto LABEL_23;
  v17 = v15 + 8;
  if (!SipUri::isValidUri((SipUri *)(v15 + 8)))
    goto LABEL_23;
  std::string::basic_string[abi:ne180100]<0>(__p, "+g.gsma.rcs.isbot");
  v18 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v15 + 424, __p);
  v19 = (void **)(v15 + 432);
  if (SBYTE7(v60) < 0)
    operator delete(__p[0]);
  if (v19 == v18)
  {
LABEL_23:
    v20 = 0;
  }
  else
  {
    SipUri::asString(v17, 2, __p);
    *(_OWORD *)v53 = *(_OWORD *)__p;
    v54 = v60;
    v20 = 1;
  }
  v21 = *(unsigned int *)(a2 + 88);
  if ((_DWORD)v21 == 503)
  {
    if (!*v7)
    {
      v38 = ((uint64_t (*)(const std::string **))a1[4][2].__r_.__value_.__l.__size_)(a1 + 4);
      ((void (*)(const std::string **, uint64_t))a1[4]->__r_.__value_.__r.__words[2])(a1 + 4, v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"received unexpected service unavailable. Ignoring it.", 53);
      *(_BYTE *)(v38 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v38 + 17) = 0;
LABEL_43:
      v21 = *(unsigned int *)(a2 + 88);
      goto LABEL_44;
    }
    v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a2 + 32), "Retry-After");
    if (v22 && (v23 = *((_QWORD *)v22 + 5)) != 0)
    {
      v56 = 0;
      v57 = 0;
      v58 = 0;
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v23 + 40))(v23, &v56);
      if (SHIBYTE(v58) < 0)
      {
        v50 = v56;
        v51 = atoi(v56);
        if (!v51)
          goto LABEL_78;
        v24 = v51;
        operator delete(v50);
      }
      else
      {
        v24 = atoi((const char *)&v56);
        if (!v24)
        {
LABEL_78:
          v52 = ((uint64_t (*)(const std::string **))a1[4][2].__r_.__value_.__l.__size_)(a1 + 4);
          ((void (*)(const std::string **, uint64_t))a1[4]->__r_.__value_.__r.__words[2])(a1 + 4, v52);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"received zero or negative Retry-After. Ignoring it.", 51);
          *(_BYTE *)(v52 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v52 + 17) = 0;
          if (SHIBYTE(v58) < 0)
            operator delete(v56);
          goto LABEL_43;
        }
      }
    }
    else
    {
      v24 = 0;
    }
    v26 = a1[18];
    v25 = (std::__shared_weak_count *)a1[19];
    if (v25)
    {
      p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
      do
        v28 = __ldxr(p_shared_weak_owners);
      while (__stxr(v28 + 1, p_shared_weak_owners));
      do
        v29 = __ldxr(p_shared_weak_owners);
      while (__stxr(v29 + 1, p_shared_weak_owners));
    }
    v30 = ((uint64_t (*)(const std::string **))a1[4][2].__r_.__value_.__r.__words[2])(a1 + 4);
    ((void (*)(const std::string **, uint64_t))a1[4]->__r_.__value_.__r.__words[2])(a1 + 4, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"handleServiceUnavailable. Retrying MESSAGE again after ", 55);
    *(_BYTE *)(v30 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v30 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)" seconds.", 9);
    *(_BYTE *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v30 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v56, "Pager503RetryAfterTimer");
    if (v25)
    {
      v31 = (unint64_t *)&v25->__shared_weak_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    *((_QWORD *)&v60 + 1) = 0;
    v33 = operator new(0x20uLL);
    *v33 = &off_1E78B80B8;
    v33[1] = a1;
    v33[2] = v26;
    v33[3] = v25;
    *((_QWORD *)&v60 + 1) = v33;
    SipTimerContainer::startTimer(a1 + 62, (uint64_t)&v56, (uint64_t)__p, 1000 * v24, 0);
    v36 = (void **)*((_QWORD *)&v60 + 1);
    if (*((void ***)&v60 + 1) == __p)
    {
      v37 = 4;
      v36 = __p;
    }
    else
    {
      if (!*((_QWORD *)&v60 + 1))
      {
LABEL_53:
        if (SHIBYTE(v58) < 0)
          operator delete(v56);
        ImsPowerAssertion::deinitialize((uint64_t)&(*v7)[4].__r_.__value_.__l.__size_);
        std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](a1 + 42, (uint64_t)a1[40], (uint64_t)a1[41]);
        if (v25)
        {
          std::__shared_weak_count::__release_weak(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        goto LABEL_71;
      }
      v37 = 5;
    }
    (*((void (**)(void **, uint64_t, uint64_t))*v36 + v37))(v36, v34, v35);
    goto LABEL_53;
  }
LABEL_44:
  SipLazuliManager::logSendReceiveEvent((uint64_t)a1, 1, v21, a1[40][5].__r_.__value_.__r.__words[2], v20, (uint64_t)v53);
  v39 = *(_DWORD *)(a2 + 88);
  if (v39 - 200 > 0x63)
  {
    if (v39 >= 0x12C)
    {
      v61 = 0u;
      memset(&v62, 0, sizeof(v62));
      *(_OWORD *)__p = 0u;
      v60 = 0u;
      SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)__p);
      std::string::operator=(&v62, &__str);
      SipLazuliManager::generateError(a1, LODWORD(a1[40]->__r_.__value_.__r.__words[2]), (uint64_t)&a1[40][1], (uint64_t)__p);
      ImsResult::~ImsResult((ImsResult *)__p);
    }
    goto LABEL_70;
  }
  v40 = a1[23];
  if (v40)
  {
    v41 = a1[40];
    v42 = a1[22];
    v56 = 0;
    v57 = 0;
    v43 = (std::__shared_weak_count *)v42->__r_.__value_.__r.__words[2];
    if (v43)
    {
      v44 = std::__shared_weak_count::lock(v43);
      v57 = v44;
      if (v44)
      {
        size = v42->__r_.__value_.__l.__size_;
        v56 = (char *)size;
LABEL_59:
        if (*(char *)(size + 4159) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(size + 4136), *(_QWORD *)(size + 4144));
        }
        else
        {
          v46 = size + 4136;
          *(_OWORD *)__p = *(_OWORD *)v46;
          *(_QWORD *)&v60 = *(_QWORD *)(v46 + 16);
        }
        (*(void (**)(const std::string *, void **, _QWORD, const std::string *, std::string *))(v40->__r_.__value_.__r.__words[0] + 40))(v40, __p, LODWORD((*v7)->__r_.__value_.__r.__words[2]), v41 + 1, &__str);
        if (SBYTE7(v60) < 0)
          operator delete(__p[0]);
        if (v44)
        {
          p_shared_owners = (unint64_t *)&v44->__shared_owners_;
          do
            v48 = __ldaxr(p_shared_owners);
          while (__stlxr(v48 - 1, p_shared_owners));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        goto LABEL_69;
      }
    }
    else
    {
      v44 = 0;
    }
    size = 0;
    goto LABEL_59;
  }
LABEL_69:
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](a1 + 40);
LABEL_70:
  SipLazuliManager::processSendQueue((SipLazuliManager *)a1);
LABEL_71:
  if (SHIBYTE(v54) < 0)
    operator delete(v53[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BEE0CCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipLazuliManager::handleResponse(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  SipLazuliManager::handleResponse((const std::string **)(a1 - 16), a2, a3);
  return 1;
}

void SipLazuliManager::handleTransactionError(_QWORD *a1, const ImsResult *a2, uint64_t a3)
{
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _OWORD v13[3];
  std::string v14;
  void *v15;
  std::__shared_weak_count *v16;

  if (*(_QWORD *)a3
  {
    v7 = *(std::__shared_weak_count **)(a3 + 8);
    v15 = v6;
    v16 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v6 = 0;
    v15 = 0;
    v16 = 0;
  }
  v10 = a1[40];
  if (v10 && v6 == *(void **)(v10 + 80))
  {
    memset(&v14, 0, sizeof(v14));
    memset(v13, 0, sizeof(v13));
    ImsResult::ImsResult((ImsResult *)v13, a2);
    std::string::operator=(&v14, (const std::string *)(a1[40] + 48));
    SipLazuliManager::generateError(a1, *(unsigned int *)(a1[40] + 16), a1[40] + 24, (uint64_t)v13);
    ImsResult::~ImsResult((ImsResult *)v13);
  }
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BEE0CF84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipLazuliManager::handleTransactionError(uint64_t a1, const ImsResult *a2, uint64_t a3)
{
  SipLazuliManager::handleTransactionError((_QWORD *)(a1 - 16), a2, a3);
}

void SipLazuliManager::transactionTerminated(SipLazuliManager *a1, uint64_t a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (*(_QWORD *)a2
  {
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v8 = *((_QWORD *)a1 + 40);
  if (v8 && v4 == *(void **)(v8 + 80))
  {
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)a1 + 40);
    SipLazuliManager::processSendQueue(a1);
  }
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEE0D090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipLazuliManager::transactionTerminated(uint64_t a1, uint64_t a2)
{
  SipLazuliManager::transactionTerminated((SipLazuliManager *)(a1 - 16), a2);
}

SipHeader *SipMessage::header<SipAcceptContactHeader>(SipMessage *a1, int a2)
{
  SipHeader *result;

  result = SipMessage::headerWithName(a1, "Accept-Contact", a2);
  if (result)
  return result;
}

void SipParameterMap::~SipParameterMap(SipParameterMap *this)
{
  *(_QWORD *)this = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

{
  *(_QWORD *)this = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  JUMPOUT(0x1C3B87100);
}

void SipLazuliManager::sendMsrp(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[2];
  char v27;
  std::string v28;
  std::string v29;
  std::string __p;
  int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v12 = (_QWORD *)(a1 + 32);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(_QWORD *, uint64_t))(*v12 + 16))(v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"SipLazuliManager::sendMsrp", 26);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v12 + 76, a2);
  if (v14)
  {
    v16 = *((_QWORD *)v14 + 5);
    v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
    v32 = v16;
    v33 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    if (v16)
    {
      std::string::basic_string[abi:ne180100]<0>(v26, "");
      MessageSession::sendMessageBlob(v16, a3, (const std::string *)a4, a5, a6, (uint64_t)v26);
      if ((v27 & 0x80000000) == 0)
        goto LABEL_25;
      v19 = (void *)v26[0];
      goto LABEL_24;
    }
  }
  else
  {
    v15 = 0;
    v32 = 0;
    v33 = 0;
  }
  v20 = (*(uint64_t (**)(_QWORD *))(*v12 + 64))(v12);
  (*(void (**)(_QWORD *, uint64_t))(*v12 + 16))(v12, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"conversation not found, queueing: ", 34);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v20 + 32))(v20, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v20 + 17) = 0;
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v21 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 224), (void **)a2, (__int128 **)&v28);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v28 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v29 = *(std::string *)a4;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  v31 = a6;
  v22 = (char *)operator new(0x60uLL);
  *(std::string *)(v22 + 16) = v28;
  memset(&v28, 0, sizeof(v28));
  *(std::string *)(v22 + 40) = v29;
  memset(&v29, 0, sizeof(v29));
  *(std::string *)(v22 + 64) = __p;
  memset(&__p, 0, sizeof(__p));
  *((_DWORD *)v22 + 22) = a6;
  *((_QWORD *)v22 + 1) = v21 + 7;
  v23 = v21[7];
  *(_QWORD *)v22 = v23;
  *(_QWORD *)(v23 + 8) = v22;
  v21[7] = (uint64_t)v22;
  ++v21[9];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    v19 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_24:
    operator delete(v19);
  }
LABEL_25:
  if (v15)
  {
    v24 = (unint64_t *)&v15->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BEE0D440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 96);
  _Unwind_Resume(a1);
}

uint64_t SipLazuliManager::send(SipLazuliManager *this, const LazuliSendParams *a2, const SipUri *a3)
{
  unsigned int v6;
  _BOOL4 v7;
  char **v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  unsigned __int8 *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  const LazuliSendParams *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unsigned __int8 *v37;
  const char *v38;
  uint64_t v39;
  IMSClientManager *v40;
  uint64_t v41;
  void **v42;
  void **v43;
  std::__shared_weak_count *size;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  std::string *v52;
  uint64_t v53;
  SipStringBody *Body;
  SipStringBody *v55;
  uint64_t v56;
  unsigned __int8 *v57;
  std::string::size_type v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  const SipUri *v69;
  unsigned int v70;
  std::string __p[12];
  _BYTE v72[408];
  uint64_t v73;
  void *v74[2];
  uint64_t v75;
  void **v76;
  void **v77;

  v6 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = v6 + 1;
  v74[0] = 0;
  v74[1] = 0;
  v75 = 0;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(v74, *((char **)a2 + 18), *((char **)a2 + 19), *((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18));
  v7 = 0;
  v8 = (char **)((char *)a2 + 224);
  v9 = *((unsigned __int8 *)a2 + 247);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)a2 + 29);
  if (v9 > 9)
  {
    if (v9 != 10)
    {
      if (v9 != 12)
        goto LABEL_41;
      if (v10 >= 0)
        v21 = (char *)a2 + 224;
      else
        v21 = *v8;
      v22 = *(_QWORD *)v21;
      v23 = *((unsigned int *)v21 + 2);
      if (v22 != *(_QWORD *)"kMessageText" || v23 != *(unsigned int *)"Text")
        goto LABEL_40;
LABEL_32:
      v7 = *((_QWORD *)a2 + 27) > (unint64_t)*((unsigned int *)this + 100);
      goto LABEL_41;
    }
    if (v10 >= 0)
      v25 = (char *)a2 + 224;
    else
      v25 = *v8;
    v26 = *(_QWORD *)v25;
    v27 = *((unsigned __int16 *)v25 + 4);
    if (v26 != *(_QWORD *)"kComposing" || v27 != *(unsigned __int16 *)"ng")
    {
LABEL_40:
      v7 = 0;
      goto LABEL_41;
    }
    v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 80, (unsigned __int8 *)a2 + 72);
    if (v57)
    {
      v58 = *((_QWORD *)v57 + 5);
      v59 = (std::__shared_weak_count *)*((_QWORD *)v57 + 6);
      __p[0].__r_.__value_.__r.__words[0] = v58;
      __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v59;
      if (v59)
      {
        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldxr(p_shared_owners);
        while (__stxr(v61 + 1, p_shared_owners));
        if (v58)
        {
          do
            v62 = __ldaxr(p_shared_owners);
          while (__stlxr(v62 - 1, p_shared_owners));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
          goto LABEL_94;
        }
      }
      else
      {
        if (v58)
        {
LABEL_94:
          v7 = 1;
          goto LABEL_41;
        }
        v59 = 0;
      }
    }
    else
    {
      v59 = 0;
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = 0uLL;
    }
    v64 = *((_QWORD *)this + 4);
    v63 = (char *)this + 32;
    v65 = (*(uint64_t (**)(char *))(v64 + 64))(v63);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v63 + 16))(v63, v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v65 + 8), (uint64_t)"Dropping composing imdn ", 24);
    *(_BYTE *)(v65 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v65 + 32))(v65, (char *)a2 + 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v65 + 8), (uint64_t)" on ", 4);
    *(_BYTE *)(v65 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v65 + 32))(v65, (char *)a2 + 72);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v65 + 17) = 0;
    if (v59)
    {
      v66 = (unint64_t *)&v59->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
LABEL_89:
    v48 = 0;
    goto LABEL_90;
  }
  if (!v9)
    goto LABEL_32;
  if (v9 != 5)
    goto LABEL_41;
  if (v10 >= 0)
    v11 = (char *)a2 + 224;
  else
    v11 = *v8;
  v12 = *(_DWORD *)v11;
  v13 = v11[4];
  if (v12 != *(_DWORD *)"kImdn" || v13 != str_31_12[4])
    goto LABEL_40;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 80, (unsigned __int8 *)a2 + 72);
  if (!v15)
  {
    v16 = 0;
    goto LABEL_82;
  }
  v16 = *((_QWORD *)v15 + 5);
  v17 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
  if (!v17)
  {
LABEL_82:
    v7 = v16 != 0;
    goto LABEL_41;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  v7 = v16 != 0;
  do
    v20 = __ldaxr(v18);
  while (__stlxr(v20 - 1, v18));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_41:
  v29 = (_QWORD *)((char *)a2 + 168);
  v30 = *((unsigned __int8 *)a2 + 191);
  v31 = (char)v30;
  if ((v30 & 0x80u) != 0)
    v30 = *((_QWORD *)a2 + 22);
  if (v30 == 34)
  {
    v32 = v31 >= 0 ? (const LazuliSendParams *)((char *)a2 + 168) : (const LazuliSendParams *)*v29;
    if (!memcmp(v32, "application/vnd.gsma.rcsrevoke+xml", 0x22uLL))
    {
      v33 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"Using pager for Revoke message", 30);
      *(_BYTE *)(v33 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v7 = 0;
      *(_BYTE *)(v33 + 17) = 0;
    }
  }
  v34 = (char *)this + 32;
  v35 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"send trx ", 9);
  *(_BYTE *)(v35 + 17) = 0;
  v36 = (char *)a2 + 24;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v35 + 32))(v35, (char *)a2 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" recipient ", 11);
  v70 = v6;
  *(_BYTE *)(v35 + 17) = 0;
  v69 = a3;
  SipUri::asString((uint64_t)a3, 2, __p);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v35 + 32))(v35, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" conv ", 6);
  *(_BYTE *)(v35 + 17) = 0;
  v37 = (unsigned __int8 *)a2 + 72;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v35 + 32))(v35, (char *)a2 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" original length ", 17);
  *(_BYTE *)(v35 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v35 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" length ", 8);
  *(_BYTE *)(v35 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v35 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" type ", 6);
  *(_BYTE *)(v35 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v35 + 32))(v35, (char *)a2 + 224);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" session ", 9);
  *(_BYTE *)(v35 + 17) = 0;
  if (v7)
    v38 = "yes";
  else
    v38 = "no";
  if (v7)
    v39 = 3;
  else
    v39 = 2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)v38, v39);
  *(_BYTE *)(v35 + 17) = 0;
  v40 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v35 + 17) = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (*((_BYTE *)this + 404))
  {
    IMSClientManager::instance(v40);
    IPTelephonyManager::getInstance((uint64_t *)__p);
    v41 = *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + 200);
    v42 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v41 + 64, (void **)a2 + 9);
    v43 = (void **)(v41 + 72);
    size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
    if (__p[0].__r_.__value_.__l.__size_)
    {
      v45 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (v43 != v42)
    {
      v47 = (*(uint64_t (**)(char *))(*(_QWORD *)v34 + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v34 + 16))((char *)this + 32, v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"deferring trx ", 14);
      *(_BYTE *)(v47 + 17) = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v47 + 32))(v47, (char *)a2 + 24);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v47 + 17) = 0;
      LazuliSendParams::LazuliSendParams(__p, a2);
      v48 = v70;
      SipUri::SipUri((SipUri *)v72, v69);
      LOBYTE(v73) = v7;
      HIDWORD(v73) = v70;
      v49 = (char *)operator new(0x2D8uLL);
      *(_QWORD *)v49 = 0;
      *((_QWORD *)v49 + 1) = 0;
      LazuliSendParams::LazuliSendParams((std::string *)(v49 + 16), (__int128 *)__p);
      SipUri::SipUri((SipUri *)(v49 + 312), (const SipUri *)v72);
      *((_QWORD *)v49 + 90) = v73;
      v50 = *((_QWORD *)this + 34);
      *(_QWORD *)v49 = v50;
      *((_QWORD *)v49 + 1) = (char *)this + 272;
      *(_QWORD *)(v50 + 8) = v49;
      *((_QWORD *)this + 34) = v49;
      ++*((_QWORD *)this + 36);
      SipUri::~SipUri((SipUri *)v72);
      LazuliSendParams::~LazuliSendParams((void **)&__p[0].__r_.__value_.__l.__data_);
      goto LABEL_90;
    }
  }
  if (!v7)
  {
    Body = SipMessageEncodingMap::createBody((SipMessageEncodingMap *)(*((_QWORD *)this + 22) + 288), (const std::string *)a2 + 7);
    v48 = v70;
    v55 = Body;
    if (!Body)
    {
      v56 = (*(uint64_t (**)(char *))(*(_QWORD *)v34 + 56))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v34 + 16))(v34, v56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v56 + 8), (uint64_t)"unknown content type ", 21);
      *(_BYTE *)(v56 + 17) = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v56 + 32))(v56, (char *)a2 + 168);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v48 = 0;
      *(_BYTE *)(v56 + 17) = 0;
      goto LABEL_90;
    }
    if ((*(unsigned int (**)(SipStringBody *, void **, uint64_t))(*(_QWORD *)Body + 88))(Body, v74, *((_QWORD *)this + 22) + 288))
    {
      SipLazuliManager::sendPager((uint64_t)this, (uint64_t)v69, v55, (uint64_t)a2, v70);
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  v51 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    v51 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v51;
  }
  LazuliSendParams::LazuliSendParams(__p, a2);
  v52 = (std::string *)operator new();
  LazuliSendParams::LazuliSendParams(v52, (const LazuliSendParams *)__p);
  v76 = 0;
  v77 = 0;
  dispatch_async_f(v51, v52, (dispatch_function_t)dispatch::async<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0,std::default_delete<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0,std::default_delete<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0>>::~unique_ptr[abi:ne180100](&v76);
  std::unique_ptr<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0,std::default_delete<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0>>::~unique_ptr[abi:ne180100](&v77);
  LazuliSendParams::~LazuliSendParams((void **)&__p[0].__r_.__value_.__l.__data_);
  v53 = (uint64_t)v36;
  v48 = v70;
  SipLazuliManager::sendMsrp((uint64_t)this, v37, (uint64_t)v74, (uint64_t)v29, v53, v70);
LABEL_90:
  if (SHIBYTE(v75) < 0)
    operator delete(v74[0]);
  return v48;
}

void sub_1BEE0DD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  if (*(char *)(v17 - 105) < 0)
    operator delete(*(void **)(v17 - 128));
  _Unwind_Resume(a1);
}

uint64_t SipLazuliManager::addGroupParticipant(SipLazuliManager *this, std::string *a2, const SipUri *a3)
{
  __int128 *v5;
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void (**v25)(SipUri *__hidden);
  uint64_t (**v26)(SipHost *__hidden);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void (**v32)(SipParameterMap *__hidden);
  _QWORD *v33;
  _QWORD v34[3];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  void (**v50)(SipParameterMap *__hidden);
  _QWORD *v51;
  _QWORD v52[5];
  _QWORD v53[3];
  uint64_t v54;
  std::__shared_weak_count *v55;

  v5 = (__int128 *)&a2[3];
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 80, (unsigned __int8 *)&a2[3]);
  if (v6)
  {
    v8 = *((_QWORD *)v6 + 5);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
    v54 = v8;
    v55 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (v8)
    {
      v53[2] = 257;
      v52[2] = 257;
      v49 = 0;
      v34[2] = 257;
      v30 = 0u;
      v31 = 0;
      v28 = 0;
      v29 = 0;
      v26 = &off_1E78D08F8;
      v27 = 0;
      LOWORD(v30) = 0;
      v34[0] = 0;
      v34[1] = 0;
      v32 = &off_1E78B82D8;
      v33 = v34;
      v25 = &off_1E78BFCE8;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v48 = 0;
      v52[0] = 0;
      v52[1] = 0;
      v50 = &off_1E78B82D8;
      v51 = v52;
      v53[0] = 0;
      v53[1] = 0;
      v52[3] = &off_1E78B82D8;
      v52[4] = v53;
      SipUri::fromString((uint64_t)&v25, a2 + 8);
      v12 = *((_QWORD *)this + 4);
      v11 = (char *)this + 32;
      v13 = (*(uint64_t (**)(char *))(v12 + 64))(v11);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"refer/add ", 10);
      *(_BYTE *)(v13 + 17) = 0;
      ((void (*)(SipUri *, ImsOutStream *))v25[5])((SipUri *)&v25, (ImsOutStream *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" to group ", 10);
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 32))(v13, a2 + 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" trx ", 5);
      *(_BYTE *)(v13 + 17) = 0;
      v14 = (unsigned __int8 *)&a2[1];
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v13 + 32))(v13, v14);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      MessageSession::addParticipant(v8, v14, (const SipUri *)&v25);
      SipUri::~SipUri((SipUri *)&v25);
      if (!v7)
        return 0;
      goto LABEL_15;
    }
  }
  else
  {
    v54 = 0;
    v55 = 0;
  }
  v15 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"conversation for refer not found, queueing: ", 44);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 32))(v15, v5);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  v25 = (void (**)(SipUri *__hidden))v5;
  v16 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 31, (void **)v5, (__int128 **)&v25);
  LODWORD(v25) = 0;
  v17 = std::__list_imp<SipLazuliManager::Participant>::__create_node[abi:ne180100]<std::string const&,std::string const&,std::string const&,SipLazuliManager::Participant::Action>((uint64_t)&a2[1], (uint64_t)&a2[2], (uint64_t)&a2[8], &v25);
  v18 = v16[7];
  v16 += 7;
  *(_QWORD *)v17 = v18;
  *((_QWORD *)v17 + 1) = v16;
  *(_QWORD *)(v18 + 8) = v17;
  *v16 = (uint64_t)v17;
  ++v16[2];
  IMSClientManager::instance((IMSClientManager *)v17);
  IPTelephonyManager::getInstance((uint64_t *)&v25);
  IMSCallManager::initializeMOLazuliSession((IMSCallManager *)v25[25], (const LazuliSendParams *)a2, 0);
  v19 = (std::__shared_weak_count *)v26;
  if (v26)
  {
    v20 = (unint64_t *)(v26 + 1);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v7 = v55;
  if (v55)
  {
LABEL_15:
    v22 = (unint64_t *)&v7->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 0;
}

void sub_1BEE0E1AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 64);
  _Unwind_Resume(a1);
}

uint64_t SipLazuliManager::removeGroupParticipant(SipLazuliManager *this, std::string *a2, const SipUri *a3)
{
  __int128 *v5;
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void (**v25)(SipUri *__hidden);
  uint64_t (**v26)(SipHost *__hidden);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void (**v32)(SipParameterMap *__hidden);
  _QWORD *v33;
  _QWORD v34[3];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  void (**v50)(SipParameterMap *__hidden);
  _QWORD *v51;
  _QWORD v52[5];
  _QWORD v53[3];
  uint64_t v54;
  std::__shared_weak_count *v55;

  v5 = (__int128 *)&a2[3];
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 80, (unsigned __int8 *)&a2[3]);
  if (v6)
  {
    v8 = *((_QWORD *)v6 + 5);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
    v54 = v8;
    v55 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (v8)
    {
      v53[2] = 257;
      v52[2] = 257;
      v49 = 0;
      v34[2] = 257;
      v30 = 0u;
      v31 = 0;
      v28 = 0;
      v29 = 0;
      v26 = &off_1E78D08F8;
      v27 = 0;
      LOWORD(v30) = 0;
      v34[0] = 0;
      v34[1] = 0;
      v32 = &off_1E78B82D8;
      v33 = v34;
      v25 = &off_1E78BFCE8;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v48 = 0;
      v52[0] = 0;
      v52[1] = 0;
      v50 = &off_1E78B82D8;
      v51 = v52;
      v53[0] = 0;
      v53[1] = 0;
      v52[3] = &off_1E78B82D8;
      v52[4] = v53;
      SipUri::fromString((uint64_t)&v25, a2 + 8);
      v12 = *((_QWORD *)this + 4);
      v11 = (char *)this + 32;
      v13 = (*(uint64_t (**)(char *))(v12 + 64))(v11);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"refer/remove ", 13);
      *(_BYTE *)(v13 + 17) = 0;
      ((void (*)(SipUri *, ImsOutStream *))v25[5])((SipUri *)&v25, (ImsOutStream *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" to group ", 10);
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 32))(v13, a2 + 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" trx ", 5);
      *(_BYTE *)(v13 + 17) = 0;
      v14 = (unsigned __int8 *)&a2[1];
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v13 + 32))(v13, v14);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      MessageSession::removeParticipant(v8, v14, (const SipUri *)&v25);
      SipUri::~SipUri((SipUri *)&v25);
      if (!v7)
        return 0;
      goto LABEL_15;
    }
  }
  else
  {
    v54 = 0;
    v55 = 0;
  }
  v15 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"conversation for refer not found, queueing: ", 44);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 32))(v15, v5);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  v25 = (void (**)(SipUri *__hidden))v5;
  v16 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 31, (void **)v5, (__int128 **)&v25);
  LODWORD(v25) = 1;
  v17 = std::__list_imp<SipLazuliManager::Participant>::__create_node[abi:ne180100]<std::string const&,std::string const&,std::string const&,SipLazuliManager::Participant::Action>((uint64_t)&a2[1], (uint64_t)&a2[2], (uint64_t)&a2[8], &v25);
  v18 = v16[7];
  v16 += 7;
  *(_QWORD *)v17 = v18;
  *((_QWORD *)v17 + 1) = v16;
  *(_QWORD *)(v18 + 8) = v17;
  *v16 = (uint64_t)v17;
  ++v16[2];
  IMSClientManager::instance((IMSClientManager *)v17);
  IPTelephonyManager::getInstance((uint64_t *)&v25);
  IMSCallManager::initializeMOLazuliSession((IMSCallManager *)v25[25], (const LazuliSendParams *)a2, 0);
  v19 = (std::__shared_weak_count *)v26;
  if (v26)
  {
    v20 = (unint64_t *)(v26 + 1);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v7 = v55;
  if (v55)
  {
LABEL_15:
    v22 = (unint64_t *)&v7->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 0;
}

void sub_1BEE0E598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 64);
  _Unwind_Resume(a1);
}

uint64_t SipLazuliManager::changeGroupInfo(SipLazuliManager *this, const LazuliSendParams *a2, const SipUri *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  std::__shared_weak_count *v8;
  MessageSession *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t v14;
  IMSClientManager *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *__p;
  std::__shared_weak_count *v25;
  char v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  MessageSession *v30;
  std::__shared_weak_count *v31;

  v6 = (unsigned __int8 *)a2 + 72;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 80, (unsigned __int8 *)a2 + 72);
  if (v7)
  {
    v9 = (MessageSession *)*((_QWORD *)v7 + 5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)v7 + 6);
    v30 = v9;
    v31 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v30 = 0;
    v31 = 0;
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v27, *((char **)a2 + 18), *((char **)a2 + 19), *((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18));
  if (v9 && MessageSession::isGroupMgmtViaMSRP(v9))
  {
    v12 = 1;
  }
  else
  {
    v13 = HIBYTE(v29);
    if (v29 < 0)
      v13 = v28;
    v12 = v13 > *((unsigned int *)this + 100);
  }
  v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"change group info trx ", 22);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v14 + 32))(v14, (char *)a2 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" recipient ", 11);
  *(_BYTE *)(v14 + 17) = 0;
  SipUri::asString((uint64_t)a3, 2, &__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 32))(v14, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" conv ", 6);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v14 + 32))(v14, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" len ", 5);
  *(_BYTE *)(v14 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v14 + 17) = 0;
  v15 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if ((v26 & 0x80000000) == 0)
  {
    if (v12)
      goto LABEL_15;
LABEL_22:
    v19 = 0;
    goto LABEL_23;
  }
  operator delete(__p);
  if (!v12)
    goto LABEL_22;
LABEL_15:
  IMSClientManager::instance(v15);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  IMSCallManager::initializeMOLazuliSession(*((IMSCallManager **)__p + 25), a2, 0);
  v16 = v25;
  if (v25)
  {
    v17 = (unint64_t *)&v25->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *((unsigned int *)this + 49);
  *((_DWORD *)this + 49) = v19 + 1;
  SipLazuliManager::sendMsrp((uint64_t)this, v6, (uint64_t)&v27, (uint64_t)a2 + 168, (uint64_t)a2 + 24, v19);
LABEL_23:
  if (SHIBYTE(v29) < 0)
    operator delete(v27);
  v20 = v31;
  if (v31)
  {
    v21 = (unint64_t *)&v31->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v19;
}

void sub_1BEE0E8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t SipLazuliManager::reportChatbotSpam(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 isWifi;
  SipRequest *RequestFromTemplate;
  unint64_t *p_shared_owners;
  unint64_t v24;
  SipHeader *v25;
  uint64_t v26;
  SipHeader *v27;
  SipHeader *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  ImsPrefs *v32;
  void **UseAoRForSmsSenderIdentityKey;
  void *v34;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  SipUserAgent *v38;
  uint64_t v39;
  SipHeader *v40;
  SipHeader *v41;
  uint64_t v42;
  SipStringBody *Body;
  SipStringBody *v44;
  xpc_object_t v45;
  uint64_t v46;
  uint64_t v47;
  xpc_object_t v48;
  void *count;
  uint64_t v50;
  xpc_object_t v51;
  size_t v52;
  xpc_object_t value;
  uint64_t v54;
  uint64_t v55;
  SipStringBody *v56;
  uint64_t v57;
  char *v58;
  __int128 *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  __int128 *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v68;
  void *v69[2];
  char v70;
  void *v71[2];
  uint64_t v72;
  void (**v73)(SipParameterMap *__hidden);
  _QWORD **v74;
  _QWORD *v75[3];
  void *v76[2];
  uint64_t v77;
  void *__p;
  uint64_t v79;
  uint64_t v80;
  xpc_object_t object;
  void *v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  xpc_object_t v85;
  uint64_t v86;
  xpc_object_t v87;
  size_t v88;
  __int128 __str;
  __int128 __str_16;
  uint64_t v91;

  v14 = a1 + 32;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"SipLazuliManager::reportChatbotSpam", 35);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 64))(v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"send trx: ", 10);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)", recipient: ", 13);
  *(_BYTE *)(v16 + 17) = 0;
  SipUri::asString(a3, 2, &__str);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v16 + 32))(v16, &__str);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)", conv: ", 8);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, a4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)", spam type: ", 13);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, a6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)", free text len: ", 17);
  *(_BYTE *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v68 = a4;
  *(_BYTE *)(v16 + 17) = 0;
  if (SBYTE7(__str_16) < 0)
    operator delete((void *)__str);
  v17 = *(_QWORD *)(a1 + 176);
  v18 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v17 + 16));
  *((_QWORD *)&__str + 1) = v18;
  v19 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)&__str = v19;
  v20 = *(_QWORD *)(v19 + 144);
  isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v19 + 3136));
  RequestFromTemplate = SipMessageEncodingMap::createRequestFromTemplate((SipMessageEncodingMap *)(v20 + 288), (const std::string *)"MESSAGE", isWifi, *(unsigned __int8 *)(v19 + 176));
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  SipUri::operator=((SipRequest *)((char *)RequestFromTemplate + 112), a3);
  v25 = SipMessage::header<SipToHeader>(RequestFromTemplate, 1);
  SipUri::operator=((SipHeader *)((char *)v25 + 104), a3);
  v26 = *(unsigned __int8 *)(a2 + 23);
  if ((v26 & 0x80u) != 0)
    v26 = *(_QWORD *)(a2 + 8);
  if (v26)
  {
    v27 = SipMessage::header<SipCallIdHeader>(RequestFromTemplate, 1);
    std::string::operator=((std::string *)((char *)v27 + 64), (const std::string *)a2);
  }
  else
  {
    ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(*(_QWORD *)(a1 + 176) + 592), 24, (std::string *)&__str);
    v28 = SipMessage::header<SipCallIdHeader>(RequestFromTemplate, 1);
    std::string::operator=((std::string *)((char *)v28 + 64), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
  }
  v29 = *(_QWORD *)(a1 + 176);
  __str = 0uLL;
  v30 = *(std::__shared_weak_count **)(v29 + 16);
  if (v30)
  {
    v30 = std::__shared_weak_count::lock(v30);
    v31 = v30;
    *((_QWORD *)&__str + 1) = v30;
    if (v30)
    {
      v30 = *(std::__shared_weak_count **)(v29 + 8);
      *(_QWORD *)&__str = v30;
    }
  }
  else
  {
    v31 = 0;
  }
  v32 = (ImsPrefs *)SipStack::prefs((SipStack *)v30);
  UseAoRForSmsSenderIdentityKey = (void **)ImsPrefs::getUseAoRForSmsSenderIdentityKey(v32);
  v34 = ImsPrefs::prefWithKey(v32, UseAoRForSmsSenderIdentityKey);
  if (v34)
  {
    v35 = (*(uint64_t (**)(void *))(*(_QWORD *)v34 + 40))(v34);
    if (!v31)
      goto LABEL_25;
  }
  else
  {
    v35 = *((_BYTE *)UseAoRForSmsSenderIdentityKey + 57) != 0;
    if (!v31)
      goto LABEL_25;
  }
  v36 = (unint64_t *)&v31->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_25:
  v38 = *(SipUserAgent **)(a1 + 176);
  if (v35)
    v39 = *((_QWORD *)v38 + 31) + 1184;
  else
    v39 = SipUserAgent::publicUri(v38);
  v40 = SipMessage::header<SipFromHeader>(RequestFromTemplate, 1);
  SipUri::operator=((SipHeader *)((char *)v40 + 104), v39);
  v76[0] = 0;
  v76[1] = 0;
  v77 = 0;
  std::string::basic_string[abi:ne180100]<0>(v76, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.systemmsg");
  ims::addPercentEscapes((uint64_t)v76, 0, 0);
  SipMessage::addHeader(RequestFromTemplate, (uint64_t)"P-Preferred-Service", (uint64_t)v76, 0);
  v75[1] = 0;
  v75[2] = (_QWORD *)256;
  v73 = &off_1E78B82D8;
  v74 = v75;
  v75[0] = 0;
  v41 = SipMessage::header<SipAcceptContactHeader>(RequestFromTemplate, 1);
  SipAcceptContactHeader::addValueWithServiceMaskAndParams(v41, (BambiServices *)0x40000, (const SipParameterMap *)&v73);
  SipUserAgent::addUAHeaders(*(SipUserAgent **)(a1 + 176), RequestFromTemplate);
  v42 = *(_QWORD *)(a1 + 176);
  std::string::basic_string[abi:ne180100]<0>(&__str, "application/vnd.gsma.rcsspam-report+xml");
  Body = SipMessageEncodingMap::createBody((SipMessageEncodingMap *)(v42 + 288), (const std::string *)&__str);
  v44 = Body;
  if (SBYTE7(__str_16) < 0)
  {
    operator delete((void *)__str);
    if (v44)
      goto LABEL_30;
LABEL_33:
    v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"unknown content type ", 21);
    *(_BYTE *)(v46 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"application/vnd.gsma.rcsspam-report+xml", 39);
    *(_BYTE *)(v46 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v47 = 0;
    *(_BYTE *)(v46 + 17) = 0;
    goto LABEL_92;
  }
  if (!Body)
    goto LABEL_33;
LABEL_30:
  v71[0] = 0;
  v71[1] = 0;
  v72 = 0;
  SipUri::asString(a3, 2, v69);
  v91 = 0;
  __str = 0u;
  __str_16 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&__str, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"<?xml version=\"1.0\" encoding=\"UTF-8\"?>", 38);
  BYTE1(__str_16) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"\r\n", 2);
  BYTE1(__str_16) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"<sr xmlns=\"urn:gsma:params:xml:ns:rcs:rcs:spamreport\">", 54);
  BYTE1(__str_16) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"\r\n", 2);
  BYTE1(__str_16) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"    <Chatbot>", 13);
  BYTE1(__str_16) = 0;
  (*(void (**)(__int128 *, void **))(__str + 32))(&__str, v69);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"</Chatbot>", 10);
  BYTE1(__str_16) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"\r\n", 2);
  BYTE1(__str_16) = 0;
  v45 = *a5;
  if (*a5)
    xpc_retain(*a5);
  else
    v45 = xpc_null_create();
  xpc::array::iterator::iterator(&v87, v45, 0);
  xpc_release(v45);
  v48 = *a5;
  if (*a5)
    xpc_retain(*a5);
  else
    v48 = xpc_null_create();
  if (MEMORY[0x1C3B87B98](*a5) == MEMORY[0x1E0C812C8])
    count = (void *)xpc_array_get_count(*a5);
  else
    count = 0;
  xpc::array::iterator::iterator(&v85, v48, count);
  xpc_release(v48);
  v50 = v86;
  v51 = v87;
  v52 = v88;
  while (v52 != v50 || v51 != v85)
  {
    v82 = 0;
    v83 = 0;
    v84 = 0;
    value = xpc_array_get_value(v51, v52);
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    __p = 0;
    v79 = 0;
    v80 = 0;
    xpc::dyn_cast_or_default();
    if (SHIBYTE(v80) < 0)
      operator delete(__p);
    xpc_release(object);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"    <Message-ID>", 16);
    BYTE1(__str_16) = 0;
    (*(void (**)(__int128 *, void **))(__str + 32))(&__str, &v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"</Message-ID>", 13);
    BYTE1(__str_16) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"\r\n", 2);
    BYTE1(__str_16) = 0;
    if (SHIBYTE(v84) < 0)
      operator delete(v82);
    v51 = v87;
    v52 = ++v88;
    v50 = v86;
  }
  xpc_release(v51);
  xpc_release(v87);
  v54 = *(unsigned __int8 *)(a6 + 23);
  if ((v54 & 0x80u) != 0)
    v54 = *(_QWORD *)(a6 + 8);
  if (v54)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"    <spam-type>", 15);
    BYTE1(__str_16) = 0;
    (*(void (**)(__int128 *, uint64_t))(__str + 32))(&__str, a6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"</spam-type>", 12);
    BYTE1(__str_16) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"\r\n", 2);
    BYTE1(__str_16) = 0;
  }
  v55 = *(unsigned __int8 *)(a7 + 23);
  if ((v55 & 0x80u) != 0)
    v55 = *(_QWORD *)(a7 + 8);
  if (v55)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"    <free-text>", 15);
    BYTE1(__str_16) = 0;
    (*(void (**)(__int128 *, uint64_t))(__str + 32))(&__str, a7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"</free-text>", 12);
    BYTE1(__str_16) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"\r\n", 2);
    BYTE1(__str_16) = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)"</sr>", 5);
  BYTE1(__str_16) = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&__str_16 + 1) + 8, v71);
  *(_QWORD *)&__str = &off_1E78D7A10;
  if ((_BYTE)__str_16 && *((_QWORD *)&__str + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__str + 1) + 8))(*((_QWORD *)&__str + 1));
  if (v70 < 0)
    operator delete(v69[0]);
  if (((*(uint64_t (**)(SipStringBody *, void **, uint64_t))(*(_QWORD *)v44 + 88))(v44, v71, *(_QWORD *)(a1 + 176) + 288) & 1) != 0)
  {
    v56 = (SipStringBody *)*((_QWORD *)RequestFromTemplate + 9);
    if (v56 != v44)
    {
      if (v56)
        (*(void (**)(SipStringBody *))(*(_QWORD *)v56 + 8))(v56);
      *((_QWORD *)RequestFromTemplate + 9) = v44;
    }
    SipMessage::addHeader(RequestFromTemplate, (uint64_t)"Conversation-ID", v68, 0);
    v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 64))(v14);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v57 + 8), (uint64_t)"Queuing message request ", 24);
    *(_BYTE *)(v57 + 17) = 0;
    v58 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)RequestFromTemplate);
    if (v58)
      v59 = (__int128 *)(v58 + 64);
    else
      v59 = &ims::kEmptyString;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v57 + 32))(v57, v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v57 + 8), (uint64_t)" [chatbot spam report] on stack ", 32);
    *(_BYTE *)(v57 + 17) = 0;
    v60 = *(_QWORD *)(a1 + 176);
    v82 = 0;
    v83 = 0;
    v61 = *(std::__shared_weak_count **)(v60 + 16);
    if (v61)
    {
      v62 = std::__shared_weak_count::lock(v61);
      v83 = v62;
      if (v62)
      {
        v63 = *(_QWORD *)(v60 + 8);
        v82 = (void *)v63;
LABEL_79:
        if (*(char *)(v63 + 4159) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)(v63 + 4136), *(_QWORD *)(v63 + 4144));
        }
        else
        {
          v64 = (__int128 *)(v63 + 4136);
          __str = *v64;
          *(_QWORD *)&__str_16 = *((_QWORD *)v64 + 2);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v57 + 32))(v57, &__str);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v57 + 17) = 0;
        if (SBYTE7(__str_16) < 0)
          operator delete((void *)__str);
        if (v62)
        {
          v65 = (unint64_t *)&v62->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v47 = *(unsigned int *)(a1 + 196);
        *(_DWORD *)(a1 + 196) = v47 + 1;
        SipLazuliManager::queueForSend((SipLazuliManager *)a1, (std::string::size_type)RequestFromTemplate, v47, v68);
        goto LABEL_90;
      }
    }
    else
    {
      v62 = 0;
    }
    v63 = 0;
    goto LABEL_79;
  }
  v47 = 0;
LABEL_90:
  if (SHIBYTE(v72) < 0)
    operator delete(v71[0]);
LABEL_92:
  v73 = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v74, v75[0]);
  if (SHIBYTE(v77) < 0)
    operator delete(v76[0]);
  return v47;
}

void sub_1BEE0F430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,_QWORD *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,xpc_object_t object,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,xpc_object_t a46)
{
  uint64_t v46;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  if (a21 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v46, a24);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

void SipLazuliManager::logPrefix(SipLazuliManager *this, ImsOutStream *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;

  v3 = *((_QWORD *)this + 22);
  if (!v3)
    goto LABEL_12;
  v5 = *(std::__shared_weak_count **)(v3 + 16);
  if (!v5)
    goto LABEL_12;
  v6 = std::__shared_weak_count::lock(v5);
  if (!v6)
    goto LABEL_12;
  v7 = v6;
  v8 = *(_QWORD *)(v3 + 8);
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    if (v8)
      goto LABEL_8;
LABEL_12:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"SipLazuliManager: ", 18);
    *((_BYTE *)a2 + 17) = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  if (!v8)
    goto LABEL_12;
LABEL_8:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"SipLazuliManager[", 17);
  *((_BYTE *)a2 + 17) = 0;
  v11 = *((_QWORD *)this + 22);
  v12 = *(std::__shared_weak_count **)(v11 + 16);
  if (!v12)
  {
    v13 = 0;
    goto LABEL_15;
  }
  v13 = std::__shared_weak_count::lock(v12);
  if (!v13)
  {
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v14 = *(_QWORD *)(v11 + 8);
LABEL_16:
  if (*(char *)(v14 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v14 + 4136), *(_QWORD *)(v14 + 4144));
  else
    v17 = *(std::string *)(v14 + 4136);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 32))(a2, &v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"]: ", 3);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BEE0F768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipLazuliManager::logPrefix(SipLazuliManager *this, ImsOutStream *a2)
{
  SipLazuliManager::logPrefix((SipLazuliManager *)((char *)this - 32), a2);
}

void SipLazuliManager::createMessageSession(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, const std::string *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const std::string *v15;
  uint64_t *v16;
  unsigned __int8 *v17;
  uint8x8_t v18;
  unint64_t v19;
  unint64_t v20;
  std::string::size_type *v21;
  std::string::size_type i;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  std::string *v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  int8x8_t prime;
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  std::string::size_type *v45;
  uint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  MessageSession *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::chrono::steady_clock::time_point *v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_weak_owners;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  const void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  void **v67;
  void **v68;
  uint64_t (*v69)(uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::string::size_type v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  void **v80;
  void **v81;
  MessageSession *v82;
  int v83;
  int v84;
  MessageSession *v85;
  uint64_t *v86;
  uint64_t v87;
  void **v88;
  void **v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t *v98;
  void *v99;
  void ***v100;
  _QWORD *v101;
  uint64_t v102;
  void **j;
  uint64_t v105;
  std::string v106[2];
  void *__p[2];
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  void (**v125)(SipParameterMap *__hidden);
  _QWORD *v126;
  _QWORD v127[5];
  uint64_t v128;
  __int128 v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  _QWORD v134[2];
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  MessageSession *v139;
  std::__shared_weak_count *v140;

  v8 = a1;
  v9 = a1 + 32;
  v105 = a1 + 32;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"SipLazuliManager::createMessageSession for id: ", 47);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  v139 = 0;
  v140 = 0;
  std::allocate_shared[abi:ne180100]<MessageSession,std::allocator<MessageSession>,std::string const&,void>((const std::string *)(v9 + 32), &v139);
  v11 = (_QWORD *)(v9 + 632);
  v12 = std::__string_hash<char>::operator()[abi:ne180100](v9 + 632, a2);
  v13 = v12;
  v14 = *(_QWORD *)(v9 + 616);
  v102 = v8;
  if (v14)
  {
    v101 = (_QWORD *)(v9 + 632);
    v15 = a5;
    v16 = a3;
    v17 = (unsigned __int8 *)a2;
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v18.i16[0] = vaddlv_u8(v18);
    v19 = v18.u32[0];
    if (v18.u32[0] > 1uLL)
    {
      v20 = v12;
      if (v12 >= v14)
        v20 = v12 % v14;
    }
    else
    {
      v20 = (v14 - 1) & v12;
    }
    v21 = *(std::string::size_type **)(*(_QWORD *)(v8 + 640) + 8 * v20);
    if (v21)
    {
      for (i = *v21; i; i = *(_QWORD *)i)
      {
        v23 = *(_QWORD *)(i + 8);
        if (v23 == v13)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](v102 + 672, (unsigned __int8 *)(i + 16), v17) & 1) != 0)
          {
            a2 = (uint64_t)v17;
            a3 = v16;
            a5 = v15;
            v98 = a4;
            goto LABEL_80;
          }
        }
        else
        {
          if (v19 > 1)
          {
            if (v23 >= v14)
              v23 %= v14;
          }
          else
          {
            v23 &= v14 - 1;
          }
          if (v23 != v20)
            break;
        }
      }
      a2 = (uint64_t)v17;
      v8 = v102;
    }
    else
    {
      a2 = (uint64_t)v17;
    }
    a3 = v16;
    a5 = v15;
    v11 = v101;
  }
  else
  {
    v20 = 0;
  }
  v24 = operator new(0x38uLL);
  v25 = (_QWORD *)(v8 + 656);
  v106[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
  *(_OWORD *)&v106[0].__r_.__value_.__r.__words[1] = (unint64_t)(v8 + 656);
  *v24 = 0;
  v24[1] = v13;
  v26 = (std::string *)(v24 + 2);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v24[4] = *(_QWORD *)(a2 + 16);
  }
  v24[5] = 0;
  v24[6] = 0;
  v106[0].__r_.__value_.__s.__data_[16] = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(v8 + 664) + 1);
  v28 = *(float *)(v8 + 672);
  if (!v14 || (float)(v28 * (float)v14) < v27)
  {
    v29 = 1;
    if (v14 >= 3)
      v29 = (v14 & (v14 - 1)) != 0;
    v30 = v29 | (2 * v14);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = (int8x8_t)v31;
    else
      prime = (int8x8_t)v30;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v14 = *(_QWORD *)(v8 + 648);
    if (*(_QWORD *)&prime > v14)
      goto LABEL_36;
    if (*(_QWORD *)&prime < v14)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(v8 + 664) / *(float *)(v8 + 672));
      if (v14 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (*(_QWORD *)&prime <= v39)
        prime = (int8x8_t)v39;
      if (*(_QWORD *)&prime >= v14)
      {
        v14 = *(_QWORD *)(v8 + 648);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v33 = operator new(8 * *(_QWORD *)&prime);
          v34 = *(void **)(v8 + 640);
          *(_QWORD *)(v8 + 640) = v33;
          if (v34)
            operator delete(v34);
          v35 = 0;
          *(int8x8_t *)(v8 + 648) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(v8 + 640) + 8 * v35++) = 0;
          while (*(_QWORD *)&prime != v35);
          v36 = (_QWORD *)*v25;
          if (*v25)
          {
            v37 = v36[1];
            v38 = (uint8x8_t)vcnt_s8(prime);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(_QWORD *)&prime)
                v37 %= *(_QWORD *)&prime;
            }
            else
            {
              v37 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(v8 + 640) + 8 * v37) = v25;
            v42 = (_QWORD *)*v36;
            if (*v36)
            {
              do
              {
                v43 = v42[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v43 >= *(_QWORD *)&prime)
                    v43 %= *(_QWORD *)&prime;
                }
                else
                {
                  v43 &= *(_QWORD *)&prime - 1;
                }
                if (v43 != v37)
                {
                  v44 = *(_QWORD *)(v8 + 640);
                  if (!*(_QWORD *)(v44 + 8 * v43))
                  {
                    *(_QWORD *)(v44 + 8 * v43) = v36;
                    goto LABEL_61;
                  }
                  *v36 = *v42;
                  *v42 = **(_QWORD **)(*(_QWORD *)(v8 + 640) + 8 * v43);
                  **(_QWORD **)(*(_QWORD *)(v8 + 640) + 8 * v43) = v42;
                  v42 = v36;
                }
                v43 = v37;
LABEL_61:
                v36 = v42;
                v42 = (_QWORD *)*v42;
                v37 = v43;
              }
              while (v42);
            }
          }
          v14 = (unint64_t)prime;
          goto LABEL_65;
        }
        v99 = *(void **)(v8 + 640);
        *(_QWORD *)(v8 + 640) = 0;
        if (v99)
          operator delete(v99);
        v14 = 0;
        *(_QWORD *)(v8 + 648) = 0;
      }
    }
LABEL_65:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v20 = v13 % v14;
      else
        v20 = v13;
    }
    else
    {
      v20 = (v14 - 1) & v13;
    }
  }
  v45 = *(std::string::size_type **)(*(_QWORD *)(v8 + 640) + 8 * v20);
  v46 = v8;
  i = v106[0].__r_.__value_.__r.__words[0];
  if (v45)
  {
    *(_QWORD *)v106[0].__r_.__value_.__l.__data_ = *v45;
    v98 = a4;
LABEL_78:
    *v45 = i;
    goto LABEL_79;
  }
  *(_QWORD *)v106[0].__r_.__value_.__l.__data_ = *(_QWORD *)(v46 + 656);
  *(_QWORD *)(v46 + 656) = i;
  *(_QWORD *)(*(_QWORD *)(v46 + 640) + 8 * v20) = v25;
  v98 = a4;
  if (*(_QWORD *)i)
  {
    v47 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v47 >= v14)
        v47 %= v14;
    }
    else
    {
      v47 &= v14 - 1;
    }
    v45 = (std::string::size_type *)(*(_QWORD *)(v102 + 640) + 8 * v47);
    goto LABEL_78;
  }
LABEL_79:
  v106[0].__r_.__value_.__r.__words[0] = 0;
  ++*v11;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100]((uint64_t)v106);
LABEL_80:
  v49 = v139;
  v48 = v140;
  if (v140)
  {
    p_shared_owners = (unint64_t *)&v140->__shared_owners_;
    do
      v51 = __ldxr(p_shared_owners);
    while (__stxr(v51 + 1, p_shared_owners));
  }
  v52 = *(std::__shared_weak_count **)(i + 48);
  *(_QWORD *)(i + 40) = v49;
  *(_QWORD *)(i + 48) = v48;
  v53 = v102;
  if (v52)
  {
    v54 = (unint64_t *)&v52->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v56 = (std::chrono::steady_clock::time_point *)v139;
  v57 = (std::__shared_weak_count *)a3[1];
  v137 = *a3;
  v138 = v57;
  if (v57)
  {
    p_shared_weak_owners = (unint64_t *)&v57->__shared_weak_owners_;
    do
      v59 = __ldxr(p_shared_weak_owners);
    while (__stxr(v59 + 1, p_shared_weak_owners));
  }
  v60 = v98[1];
  v135 = *v98;
  v136 = (std::__shared_weak_count *)v60;
  if (v60)
  {
    v61 = (unint64_t *)(v60 + 8);
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = *(const void **)(v102 + 440);
  v134[0] = off_1E78EAB00;
  v134[1] = v63;
  if (v63)
    CFRetain(v63);
  v134[0] = &off_1E78B7BD8;
  MessageSession::initialize(v56, &v137, &v135, (uint64_t)v134, a5);
  ims::CFType::~CFType((ims::CFType *)v134);
  v64 = v136;
  if (v136)
  {
    v65 = (unint64_t *)&v136->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (v138)
    std::__shared_weak_count::__release_weak(v138);
  SipLazuliManager::createPowerAssertion(v102, (__int128 *)a2, 0);
  v67 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v102 + 224, (void **)a2);
  if ((void **)(v102 + 232) == v67)
  {
    v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 64))(v105);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v105 + 16))(v105, v72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v72 + 8), (uint64_t)"no messages available to send for ", 34);
    *(_BYTE *)(v72 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 32))(v72, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v72 + 17) = 0;
    v73 = (std::__shared_weak_count *)a3[1];
    if (v73)
    {
      v74 = std::__shared_weak_count::lock(v73);
      v106[0].__r_.__value_.__l.__size_ = (std::string::size_type)v74;
      if (v74)
      {
        v75 = v74;
        v76 = *a3;
        v106[0].__r_.__value_.__r.__words[0] = v76;
        if (v76 && *(_BYTE *)(v76 + 146))
          MessageSession::sendEmptyMessage(v139);
        v77 = (unint64_t *)&v75->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
    }
  }
  else
  {
    v68 = v67;
    v69 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v102 + 32) + 64);
    if (*(_BYTE *)(v102 + 404))
    {
      v70 = v69(v105);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v105 + 16))(v105, v70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v70 + 8), (uint64_t)"sending queued large message on conversation ", 45);
      *(_BYTE *)(v70 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 32))(v70, a2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v70 + 17) = 0;
      *(_OWORD *)__p = 0u;
      v108 = 0u;
      memset(v106, 0, sizeof(v106));
      v71 = (char *)v68[8];
      if (v71[39] < 0)
        std::string::__init_copy_ctor_external(v106, *((const std::string::value_type **)v71 + 2), *((_QWORD *)v71 + 3));
      else
        v106[0] = *(std::string *)(v71 + 16);
      if (v71[63] < 0)
        std::string::__init_copy_ctor_external(&v106[1], *((const std::string::value_type **)v71 + 5), *((_QWORD *)v71 + 6));
      else
        v106[1] = *(std::string *)(v71 + 40);
      if (v71[87] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v71 + 8), *((_QWORD *)v71 + 9));
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v71 + 4);
        *(_QWORD *)&v108 = *((_QWORD *)v71 + 10);
      }
      DWORD2(v108) = *((_DWORD *)v71 + 22);
      v84 = DWORD2(v108);
      v85 = v139;
      std::string::basic_string[abi:ne180100]<0>(v132, "");
      MessageSession::sendMessageBlob((uint64_t)v85, (uint64_t)v106, &v106[1], (uint64_t)__p, v84, (uint64_t)v132);
      if (v133 < 0)
        operator delete(v132[0]);
      v86 = (uint64_t *)v68[8];
      v87 = *v86;
      *(_QWORD *)(v87 + 8) = v86[1];
      *(_QWORD *)v86[1] = v87;
      v68[9] = (char *)v68[9] - 1;
      std::__destroy_at[abi:ne180100]<SipLazuliManager::OutgoingMsrp,0>((uint64_t)(v86 + 2));
      operator delete(v86);
      if (!v68[9])
        std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::__erase_unique<std::string>((void ***)(v102 + 224), (void **)a2);
      if (SBYTE7(v108) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v106[1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106[1].__r_.__value_.__l.__data_);
      if (SHIBYTE(v106[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106[0].__r_.__value_.__l.__data_);
    }
    else
    {
      v79 = v69(v105);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v105 + 16))(v105, v79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"sending ", 8);
      *(_BYTE *)(v79 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v79 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)" messages on conversation ", 26);
      *(_BYTE *)(v79 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 32))(v79, a2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v80 = v68 + 7;
      *(_BYTE *)(v79 + 17) = 0;
      v81 = (void **)v68[8];
      if (v81 != v68 + 7)
      {
        do
        {
          v82 = v139;
          v83 = *((_DWORD *)v81 + 22);
          std::string::basic_string[abi:ne180100]<0>(v130, "");
          MessageSession::sendMessageBlob((uint64_t)v82, (uint64_t)(v81 + 2), (const std::string *)(v81 + 5), (uint64_t)(v81 + 8), v83, (uint64_t)v130);
          if (v131 < 0)
            operator delete(v130[0]);
          v81 = (void **)v81[1];
        }
        while (v81 != v80);
      }
      std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::__erase_unique<std::string>((void ***)(v102 + 224), (void **)a2);
      v53 = v102;
    }
  }
  v88 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v53 + 248, (void **)a2);
  if ((void **)(v53 + 256) == v88)
  {
    v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 64))(v105);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v105 + 16))(v105, v94);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v94 + 8), (uint64_t)"no refers available for ", 24);
    *(_BYTE *)(v94 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v94 + 32))(v94, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v94 + 64))(v94, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v94 + 17) = 0;
  }
  else
  {
    v100 = (void ***)(v53 + 248);
    v89 = (void **)v88[8];
    for (j = v88 + 7; v89 != j; v89 = (void **)v89[1])
    {
      v129 = 0u;
      v127[2] = 257;
      v124 = 0u;
      v110 = 0u;
      __p[0] = 0;
      __p[1] = 0;
      memset(&v106[0].__r_.__value_.__r.__words[2], 0, 32);
      v109 = 0;
      *(_QWORD *)&v110 = 0;
      *(_QWORD *)&v108 = &off_1E78B82D8;
      *((_QWORD *)&v108 + 1) = &v109;
      v106[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BFCE8;
      v106[0].__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E78D08F8;
      v111 = 0u;
      v112 = 0u;
      v113 = 0u;
      v114 = 0u;
      v115 = 0u;
      v116 = 0u;
      v117 = 0u;
      v118 = 0u;
      v119 = 0u;
      v120 = 0u;
      v121 = 0u;
      v122 = 0u;
      v123 = 0u;
      *(_QWORD *)&v124 = 0;
      v127[0] = 0;
      v127[1] = 0;
      v125 = &off_1E78B82D8;
      v126 = v127;
      v128 = 0;
      *(_QWORD *)&v129 = 0;
      v127[3] = &off_1E78B82D8;
      v127[4] = &v128;
      WORD4(v110) = 257;
      WORD4(v129) = 257;
      SipUri::fromString((uint64_t)v106, (std::string *)(v89 + 8));
      v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 64))(v105);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v105 + 16))(v105, v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v90 + 8), (uint64_t)"refer/", 6);
      *(_BYTE *)(v90 + 17) = 0;
      if (*((_DWORD *)v89 + 22))
        v91 = "remove";
      else
        v91 = "add";
      if (*((_DWORD *)v89 + 22))
        v92 = 6;
      else
        v92 = 3;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v90 + 8), (uint64_t)v91, v92);
      *(_BYTE *)(v90 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v90 + 8), (uint64_t)" ", 1);
      *(_BYTE *)(v90 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 32))(v90, v89 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v90 + 8), (uint64_t)" to group ", 10);
      *(_BYTE *)(v90 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 32))(v90, v89 + 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v90 + 8), (uint64_t)" trx ", 5);
      *(_BYTE *)(v90 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 32))(v90, v89 + 2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v90 + 64))(v90, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v90 + 17) = 0;
      v93 = *((_DWORD *)v89 + 22);
      if (v93 == 1)
      {
        MessageSession::removeParticipant((uint64_t)v139, (unsigned __int8 *)v89 + 16, (const SipUri *)v106);
      }
      else if (!v93)
      {
        MessageSession::addParticipant((uint64_t)v139, (unsigned __int8 *)v89 + 16, (const SipUri *)v106);
      }
      SipUri::~SipUri((SipUri *)v106);
    }
    std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::__erase_unique<std::string>(v100, (void **)a2);
    v53 = v102;
  }
  SipLazuliManager::releasePowerAssertion(v53, (void **)a2);
  v95 = v140;
  if (v140)
  {
    v96 = (unint64_t *)&v140->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
}

void sub_1BEE1052C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v26 - 104);
  _Unwind_Resume(a1);
}

void SipLazuliManager::createPowerAssertion(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  _BOOL4 isWifi;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _BYTE v16[72];
  std::string __str;
  std::string *p_str;

  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(std::__shared_weak_count **)(v6 + 16);
  if (v7 && (v8 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v9 = v8;
    v10 = *(_QWORD *)(v6 + 8);
    if (v10)
      isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v10 + 3136));
    else
      isWifi = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    isWifi = 0;
  }
  memset(&__str, 0, sizeof(__str));
  SipLazuliManager::getPowerAssertionTag(a3, isWifi, &__str);
  p_str = &__str;
  v14 = std::__tree<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 680), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_str);
  AssertionCounter::initialize((AssertionCounter *)v14[7], 15.0, !isWifi, (uint64_t)v16);
  ImsResult::~ImsResult((ImsResult *)v16);
  p_str = (std::string *)a2;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 704), (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&p_str);
  std::string::operator=((std::string *)(v15 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BEE10760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipLazuliManager::releasePowerAssertion(uint64_t a1, void **a2)
{
  uint64_t **v3;
  void **v4;
  uint64_t *v5;

  v3 = (uint64_t **)(a1 + 704);
  v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 704, a2);
  if ((void **)(a1 + 712) != v4)
  {
    v5 = (uint64_t *)v4;
    PowerAssertionLock::deinitialize((uint64_t **)(a1 + 680), (uint64_t)(v4 + 7));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v5);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

void SipLazuliManager::terminateMessageSession(uint64_t a1, uint64_t a2, uint64_t a3, const ImsResult *a4)
{
  _QWORD *v7;
  unsigned __int8 *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int8x8_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unsigned __int8 **v21;
  unsigned __int8 *i;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  SipStringBody *Body;
  SipStringBody *v30;
  uint64_t v31;
  void **v32;
  void **v33;
  void **v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 *v57;
  unint64_t *v58;
  unint64_t v59;
  xpc_object_t v60;
  xpc_object_t v61;
  xpc_object_t v62;
  const char *v63;
  LazuliDelegate *v64;
  std::__shared_weak_count *size;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  char *v75;
  uint64_t *v76;
  int8x8_t v77;
  unint64_t v78;
  uint8x8_t v79;
  _QWORD *v80;
  _QWORD *v81;
  __int128 v82;
  int v83;
  _OWORD *v84;
  uint64_t v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  unint64_t v88;
  unint64_t v89;
  unsigned __int8 *v90;
  unint64_t v91;
  _QWORD *v92;
  BOOL v93;
  xpc_object_t v95;
  xpc_object_t v96;
  xpc_object_t v97;
  xpc_object_t v98;
  xpc_object_t v99;
  xpc_object_t v100;
  xpc_object_t object;
  xpc_object_t v102;
  std::__shared_weak_count *v103;
  std::string v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  __int128 __p;
  _BYTE v112[56];
  int v113;

  v7 = (_QWORD *)(a1 + 640);
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 640), (unsigned __int8 *)a2);
  if (v8)
  {
    v92 = v7;
    v10 = *((_QWORD *)v8 + 5);
    v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
    v104.__r_.__value_.__r.__words[0] = v10;
    v104.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v93 = v10 == 0;
    if (v10)
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a1 + 32);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Terminating session ", 20);
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, a2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      MessageSession::terminate(v10, a3);
      v14 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 664, a2);
      v15 = *(int8x8_t *)(a1 + 648);
      if (v15)
      {
        v16 = v14;
        v17 = (uint8x8_t)vcnt_s8(v15);
        v17.i16[0] = vaddlv_u8(v17);
        v18 = v17.u32[0];
        if (v17.u32[0] > 1uLL)
        {
          v19 = v14;
          if (v14 >= *(_QWORD *)&v15)
            v19 = v14 % *(_QWORD *)&v15;
        }
        else
        {
          v19 = (*(_QWORD *)&v15 - 1) & v14;
        }
        v21 = *(unsigned __int8 ***)(*v92 + 8 * v19);
        if (v21)
        {
          for (i = *v21; i; i = *(unsigned __int8 **)i)
          {
            v23 = *((_QWORD *)i + 1);
            if (v23 == v16)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 672, i + 16, (unsigned __int8 *)a2) & 1) != 0)
              {
                v77 = *(int8x8_t *)(a1 + 648);
                v78 = *((_QWORD *)i + 1);
                v79 = (uint8x8_t)vcnt_s8(v77);
                v79.i16[0] = vaddlv_u8(v79);
                if (v79.u32[0] > 1uLL)
                {
                  v81 = (_QWORD *)(a1 + 664);
                  v80 = v92;
                  if (v78 >= *(_QWORD *)&v77)
                    v78 %= *(_QWORD *)&v77;
                }
                else
                {
                  v78 &= *(_QWORD *)&v77 - 1;
                  v81 = (_QWORD *)(a1 + 664);
                  v80 = v92;
                }
                v86 = *(unsigned __int8 **)(*v80 + 8 * v78);
                do
                {
                  v87 = v86;
                  v86 = *(unsigned __int8 **)v86;
                }
                while (v86 != i);
                if (v87 == (unsigned __int8 *)(a1 + 656))
                  goto LABEL_168;
                v88 = *((_QWORD *)v87 + 1);
                if (v79.u32[0] > 1uLL)
                {
                  if (v88 >= *(_QWORD *)&v77)
                    v88 %= *(_QWORD *)&v77;
                }
                else
                {
                  v88 &= *(_QWORD *)&v77 - 1;
                }
                if (v88 != v78)
                {
LABEL_168:
                  if (!*(_QWORD *)i)
                    goto LABEL_169;
                  v89 = *(_QWORD *)(*(_QWORD *)i + 8);
                  if (v79.u32[0] > 1uLL)
                  {
                    if (v89 >= *(_QWORD *)&v77)
                      v89 %= *(_QWORD *)&v77;
                  }
                  else
                  {
                    v89 &= *(_QWORD *)&v77 - 1;
                  }
                  if (v89 != v78)
LABEL_169:
                    *(_QWORD *)(*v80 + 8 * v78) = 0;
                }
                v90 = *(unsigned __int8 **)i;
                if (*(_QWORD *)i)
                {
                  v91 = *((_QWORD *)v90 + 1);
                  if (v79.u32[0] > 1uLL)
                  {
                    if (v91 >= *(_QWORD *)&v77)
                      v91 %= *(_QWORD *)&v77;
                  }
                  else
                  {
                    v91 &= *(_QWORD *)&v77 - 1;
                  }
                  if (v91 != v78)
                  {
                    *(_QWORD *)(*v80 + 8 * v91) = v87;
                    v90 = *(unsigned __int8 **)i;
                  }
                }
                *(_QWORD *)v87 = v90;
                *(_QWORD *)i = 0;
                --*v81;
                *(_QWORD *)&__p = i;
                *((_QWORD *)&__p + 1) = a1 + 656;
                v112[0] = 1;
                std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
                if (!v9)
                {
LABEL_28:
                  v20 = v93;
                  goto LABEL_29;
                }
LABEL_24:
                v24 = (unint64_t *)&v9->__shared_owners_;
                do
                  v25 = __ldaxr(v24);
                while (__stlxr(v25 - 1, v24));
                if (!v25)
                {
                  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                  std::__shared_weak_count::__release_weak(v9);
                }
                goto LABEL_28;
              }
            }
            else
            {
              if (v18 > 1)
              {
                if (v23 >= *(_QWORD *)&v15)
                  v23 %= *(_QWORD *)&v15;
              }
              else
              {
                v23 &= *(_QWORD *)&v15 - 1;
              }
              if (v23 != v19)
                break;
            }
          }
        }
      }
    }
    if (!v9)
      goto LABEL_28;
    goto LABEL_24;
  }
  v20 = 1;
LABEL_29:
  if (!*(_BYTE *)(a1 + 404) || !*(_QWORD *)(a1 + 288))
  {
    v32 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 224, (void **)a2);
    if ((void **)(a1 + 232) == v32 || !v32[9])
    {
      v69 = *(_QWORD *)(a1 + 32);
      v68 = a1 + 32;
      v70 = (*(uint64_t (**)(uint64_t))(v69 + 64))(v68);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v70 + 8), (uint64_t)"No pending messages", 19);
      *(_BYTE *)(v70 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v70 + 17) = 0;
      return;
    }
    v33 = v32 + 7;
    v108 = (uint64_t)&v108;
    v109 = &v108;
    v110 = 0;
    v34 = (void **)v32[8];
    if (v34 == v32 + 7)
      goto LABEL_125;
    do
    {
      v35 = (char *)operator new(0x60uLL);
      v36 = (uint64_t)v35;
      *(_QWORD *)v35 = 0;
      *((_QWORD *)v35 + 1) = 0;
      if (*((char *)v34 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v35 + 16), (const std::string::value_type *)v34[2], (std::string::size_type)v34[3]);
      }
      else
      {
        v37 = *((_OWORD *)v34 + 1);
        *((_QWORD *)v35 + 4) = v34[4];
        *((_OWORD *)v35 + 1) = v37;
      }
      if (*((char *)v34 + 63) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v36 + 40), (const std::string::value_type *)v34[5], (std::string::size_type)v34[6]);
      }
      else
      {
        v38 = *(_OWORD *)(v34 + 5);
        *(_QWORD *)(v36 + 56) = v34[7];
        *(_OWORD *)(v36 + 40) = v38;
      }
      v39 = (std::string *)(v36 + 64);
      if (*((char *)v34 + 87) < 0)
      {
        std::string::__init_copy_ctor_external(v39, (const std::string::value_type *)v34[8], (std::string::size_type)v34[9]);
      }
      else
      {
        v40 = *((_OWORD *)v34 + 4);
        *(_QWORD *)(v36 + 80) = v34[10];
        *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
      }
      *(_DWORD *)(v36 + 88) = *((_DWORD *)v34 + 22);
      v41 = v108;
      *(_QWORD *)v36 = v108;
      *(_QWORD *)(v36 + 8) = &v108;
      *(_QWORD *)(v41 + 8) = v36;
      v108 = v36;
      ++v110;
      v34 = (void **)v34[1];
    }
    while (v34 != v33);
    v42 = v109;
    if (v109 == &v108)
    {
LABEL_125:
      std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::__erase_unique<std::string>((void ***)(a1 + 224), (void **)a2);
      std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::__erase_unique<std::string>((void ***)(a1 + 248), (void **)a2);
      std::__list_imp<SipLazuliManager::OutgoingMsrp>::clear(&v108);
      return;
    }
    v43 = a1 + 32;
    while (1)
    {
      v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 56))(a1 + 32);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(a1 + 32, v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"Terminating Session and propagating Send Failure for queued message trx ", 72);
      *(_BYTE *)(v44 + 17) = 0;
      v45 = (const char *)(v42 + 8);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v44 + 32))(v44, v42 + 8);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v44 + 17) = 0;
      if (!*(_QWORD *)(a1 + 184))
      {
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = 0uLL;
        v46 = *(_QWORD *)(a1 + 176);
        v102 = 0;
        v103 = 0;
        v47 = *(std::__shared_weak_count **)(v46 + 16);
        if (v47)
        {
          v48 = std::__shared_weak_count::lock(v47);
          v103 = v48;
          if (v48)
          {
            v49 = *(_QWORD *)(v46 + 8);
            v102 = (xpc_object_t)v49;
            goto LABEL_85;
          }
        }
        else
        {
          v48 = 0;
        }
        v49 = 0;
LABEL_85:
        if (*(char *)(v49 + 4159) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p, *(const std::string::value_type **)(v49 + 4136), *(_QWORD *)(v49 + 4144));
        }
        else
        {
          v57 = (__int128 *)(v49 + 4136);
          __p = *v57;
          *(_QWORD *)v112 = *((_QWORD *)v57 + 2);
        }
        IMSClientManager::lazuliDelegateForStack((void **)&__p, &v104);
        if ((v112[7] & 0x80000000) != 0)
          operator delete((void *)__p);
        if (v48)
        {
          v58 = (unint64_t *)&v48->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (v104.__r_.__value_.__r.__words[0])
        {
          v102 = 0;
          v60 = xpc_dictionary_create(0, 0, 0);
          v61 = v60;
          if (v60)
          {
            v102 = v60;
            goto LABEL_99;
          }
          v61 = xpc_null_create();
          v102 = v61;
          if (v61)
          {
LABEL_99:
            if (MEMORY[0x1C3B87B98](v61) != MEMORY[0x1E0C812F8])
            {
              v62 = xpc_null_create();
              goto LABEL_103;
            }
            xpc_retain(v61);
          }
          else
          {
            v62 = xpc_null_create();
            v61 = 0;
LABEL_103:
            v102 = v62;
          }
          xpc_release(v61);
          v100 = xpc_BOOL_create(0);
          if (!v100)
            v100 = xpc_null_create();
          *(_QWORD *)&__p = &v102;
          *((_QWORD *)&__p + 1) = "kIsSuccess";
          xpc::dict::object_proxy::operator=((uint64_t)&__p, &v100, &object);
          xpc_release(object);
          object = 0;
          xpc_release(v100);
          v100 = 0;
          if (*((char *)v42 + 87) < 0)
            v45 = *(const char **)v45;
          v98 = xpc_string_create(v45);
          if (!v98)
            v98 = xpc_null_create();
          *(_QWORD *)&__p = &v102;
          *((_QWORD *)&__p + 1) = "kTransactionId";
          xpc::dict::object_proxy::operator=((uint64_t)&__p, &v98, &v99);
          xpc_release(v99);
          v99 = 0;
          xpc_release(v98);
          v98 = 0;
          if (*(char *)(a2 + 23) >= 0)
            v63 = (const char *)a2;
          else
            v63 = *(const char **)a2;
          v96 = xpc_string_create(v63);
          if (!v96)
            v96 = xpc_null_create();
          *(_QWORD *)&__p = &v102;
          *((_QWORD *)&__p + 1) = "kConversationId";
          xpc::dict::object_proxy::operator=((uint64_t)&__p, &v96, &v97);
          xpc_release(v97);
          v97 = 0;
          xpc_release(v96);
          v64 = (LazuliDelegate *)v104.__r_.__value_.__r.__words[0];
          v95 = v102;
          v96 = 0;
          if (v102)
            xpc_retain(v102);
          else
            v95 = xpc_null_create();
          LazuliDelegate::handleMessageSend(v64, &v95);
          xpc_release(v95);
          v95 = 0;
          xpc_release(v102);
        }
        size = (std::__shared_weak_count *)v104.__r_.__value_.__l.__size_;
        if (v104.__r_.__value_.__l.__size_)
        {
          v66 = (unint64_t *)(v104.__r_.__value_.__l.__size_ + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        goto LABEL_81;
      }
      __p = 0u;
      memset(v112, 0, sizeof(v112));
      v105 = 0u;
      v106 = 0u;
      v107 = 0u;
      v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
      v104.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v104.__r_.__value_.__r.__words[2]) = 0x40000000;
      if (*((_BYTE *)a4 + 72))
        ImsResult::ImsResult((ImsResult *)&__p, a4);
      else
        ImsResult::ImsResult((uint64_t)&__p, (uint64_t)&v104);
      ImsResult::~ImsResult((ImsResult *)&v104);
      std::string::operator=((std::string *)&v112[32], (const std::string *)(v42 + 8));
      v50 = *(_QWORD *)(a1 + 176);
      v51 = *(_QWORD *)(a1 + 184);
      v102 = 0;
      v103 = 0;
      v52 = *(std::__shared_weak_count **)(v50 + 16);
      if (v52)
      {
        v53 = std::__shared_weak_count::lock(v52);
        v103 = v53;
        if (v53)
        {
          v54 = *(_QWORD *)(v50 + 8);
          v102 = (xpc_object_t)v54;
          goto LABEL_69;
        }
      }
      else
      {
        v53 = 0;
      }
      v54 = 0;
LABEL_69:
      if (*(char *)(v54 + 4159) < 0)
        std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(v54 + 4136), *(_QWORD *)(v54 + 4144));
      else
        v104 = *(std::string *)(v54 + 4136);
      (*(void (**)(uint64_t, std::string *, _QWORD, uint64_t, __int128 *, _QWORD))(*(_QWORD *)v51 + 32))(v51, &v104, *((unsigned int *)v42 + 22), a2, &__p, 0);
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v104.__r_.__value_.__l.__data_);
        if (v53)
        {
LABEL_76:
          v55 = (unint64_t *)&v53->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
      }
      else if (v53)
      {
        goto LABEL_76;
      }
      ImsResult::~ImsResult((ImsResult *)&__p);
LABEL_81:
      v42 = (uint64_t *)v42[1];
      if (v42 == &v108)
        goto LABEL_125;
    }
  }
  if ((v20 & 1) == 0)
  {
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a1 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Processing ", 11);
    *(_BYTE *)(v26 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v26 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)" queued messages after Large Message Mode transfer", 50);
    *(_BYTE *)(v26 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v26 + 17) = 0;
    if (*(_QWORD *)(a1 + 288))
    {
      v27 = a1 + 272;
      while (1)
      {
        v28 = *(_QWORD *)(a1 + 280);
        if (*(_BYTE *)(v28 + 720))
          break;
        Body = SipMessageEncodingMap::createBody((SipMessageEncodingMap *)(*(_QWORD *)(a1 + 176) + 288), (const std::string *)(v28 + 184));
        if (Body)
        {
          v30 = Body;
          __p = 0uLL;
          *(_QWORD *)v112 = 0;
          std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, *(char **)(v28 + 160), *(char **)(v28 + 168), *(_QWORD *)(v28 + 168) - *(_QWORD *)(v28 + 160));
          if ((*(unsigned int (**)(SipStringBody *, __int128 *, uint64_t))(*(_QWORD *)v30 + 88))(v30, &__p, *(_QWORD *)(a1 + 176) + 288))
          {
            SipLazuliManager::sendPager(a1, v28 + 312, v30, v28 + 16, *(_DWORD *)(v28 + 724));
          }
          if ((v112[7] & 0x80000000) != 0)
            operator delete((void *)__p);
        }
        v31 = *(unsigned int *)(v28 + 724);
        memset(&v112[8], 0, 48);
        *(_QWORD *)&__p = &off_1E78B7238;
        *((_QWORD *)&__p + 1) = &_bambiDomain;
        *(_DWORD *)v112 = 1073741828;
        SipLazuliManager::generateError((_QWORD *)a1, v31, v28 + 88, (uint64_t)&__p);
        ImsResult::~ImsResult((ImsResult *)&__p);
        std::list<SipLazuliManager::DeferredMessage>::pop_front(a1 + 272);
        if (!*(_QWORD *)(a1 + 288))
          return;
      }
      v71 = sImsDispatchQueue;
      if (!sImsDispatchQueue)
      {
        v71 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
        sImsDispatchQueue = (uint64_t)v71;
      }
      v72 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)&__p = *(_QWORD *)(a1 + 144);
      *((_QWORD *)&__p + 1) = v72;
      if (v72)
      {
        v73 = (unint64_t *)(v72 + 16);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      LazuliSendParams::LazuliSendParams((std::string *)v112, (const LazuliSendParams *)(v28 + 16));
      v75 = (char *)operator new();
      *(_OWORD *)v75 = __p;
      __p = 0uLL;
      LazuliSendParams::LazuliSendParams((std::string *)(v75 + 16), (__int128 *)v112);
      v104.__r_.__value_.__r.__words[0] = 0;
      v108 = 0;
      dispatch_async_f(v71, v75, (dispatch_function_t)dispatch::async<SipLazuliManager::processLargeMsgQueue(void)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::processLargeMsgQueue(void)::$_0,std::default_delete<SipLazuliManager::processLargeMsgQueue(void)::$_0>>)::{lambda(void *)#1}::__invoke);
      std::unique_ptr<SipLazuliManager::processLargeMsgQueue(void)::$_0,std::default_delete<SipLazuliManager::processLargeMsgQueue(void)::$_0>>::~unique_ptr[abi:ne180100](&v108);
      std::unique_ptr<SipLazuliManager::processLargeMsgQueue(void)::$_0,std::default_delete<SipLazuliManager::processLargeMsgQueue(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v104);
      LazuliSendParams::~LazuliSendParams((void **)v112);
      if (*((_QWORD *)&__p + 1))
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&__p + 1));
      memset(&v104, 0, sizeof(v104));
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v104, *(char **)(v28 + 160), *(char **)(v28 + 168), *(_QWORD *)(v28 + 168) - *(_QWORD *)(v28 + 160));
      *(_QWORD *)&__p = v28 + 88;
      v76 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 224), (void **)(v28 + 88), (__int128 **)&__p);
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
      }
      else
      {
        __p = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
        *(_QWORD *)v112 = *((_QWORD *)&v104.__r_.__value_.__l + 2);
      }
      if (*(char *)(v28 + 207) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v112[8], *(const std::string::value_type **)(v28 + 184), *(_QWORD *)(v28 + 192));
      }
      else
      {
        *(_OWORD *)&v112[8] = *(_OWORD *)(v28 + 184);
        *(_QWORD *)&v112[24] = *(_QWORD *)(v28 + 200);
      }
      if (*(char *)(v28 + 63) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v112[32], *(const std::string::value_type **)(v28 + 40), *(_QWORD *)(v28 + 48));
      }
      else
      {
        v82 = *(_OWORD *)(v28 + 40);
        *(_QWORD *)&v112[48] = *(_QWORD *)(v28 + 56);
        *(_OWORD *)&v112[32] = v82;
      }
      v113 = *(_DWORD *)(v28 + 724);
      v83 = v113;
      v84 = operator new(0x60uLL);
      v84[1] = __p;
      *((_QWORD *)v84 + 4) = *(_QWORD *)v112;
      *(_QWORD *)v112 = 0;
      __p = 0uLL;
      *(_OWORD *)((char *)v84 + 40) = *(_OWORD *)&v112[8];
      *((_QWORD *)v84 + 7) = *(_QWORD *)&v112[24];
      memset(&v112[8], 0, 24);
      *((_QWORD *)v84 + 10) = *(_QWORD *)&v112[48];
      v84[4] = *(_OWORD *)&v112[32];
      memset(&v112[32], 0, 24);
      *((_DWORD *)v84 + 22) = v83;
      *((_QWORD *)v84 + 1) = v76 + 7;
      v85 = v76[7];
      *(_QWORD *)v84 = v85;
      *(_QWORD *)(v85 + 8) = v84;
      v76[7] = (uint64_t)v84;
      ++v76[9];
      if ((v112[55] & 0x80000000) != 0)
        operator delete(*(void **)&v112[32]);
      if ((v112[31] & 0x80000000) != 0)
        operator delete(*(void **)&v112[8]);
      if ((v112[7] & 0x80000000) != 0)
        operator delete((void *)__p);
      std::list<SipLazuliManager::DeferredMessage>::pop_front(v27);
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BEE115A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,xpc_object_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *a38,std::__shared_weak_count *a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

xpc_object_t xpc::dict::object_proxy::operator=@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t result;

  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  result = xpc_null_create();
  *a2 = result;
  return result;
}

void SipLazuliManager::handleOptionsReceived(SipLazuliManager *this, const SipMessage *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  void *v13;
  void **v14;
  void *v15;
  void *v16;
  uint64_t v17;
  BOOL v18;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unsigned int v43;
  void *v44;
  std::__shared_weak_count *v45;
  char v46;
  void *__p[2];
  _OWORD v48[2];
  _BYTE v49[32];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _QWORD v76[3];
  std::string v77;

  if (*((_QWORD *)this + 23))
  {
    memset(&v77, 0, sizeof(v77));
    SipMessage::transactionId(a2, &v77);
    memset(v76, 0, sizeof(v76));
    SipMessage::assertedIdentityList(a2, (uint64_t)v76);
    v6 = SipMessage::header<SipContactHeader>((uint64_t)a2);
    if (v6)
    {
      v7 = v6[9];
      if (v7)
      {
        if (v7 != v6[10])
        {
          v75 = 0;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v52 = 0u;
          v50 = 0u;
          v51 = 0u;
          SipUri::SipUri((SipUri *)&v50, (const SipUri *)(v7 + 8));
          v8 = (char *)this + 32;
          v9 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
          (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Processing options exchange: txn-id=", 36);
          *(_BYTE *)(v9 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 32))(v9, &v77);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" for ", 5);
          *(_BYTE *)(v9 + 17) = 0;
          SipUri::asString((uint64_t)&v50, 2, __p);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 32))(v9, __p);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v9 + 17) = 0;
          if (SBYTE7(v48[0]) < 0)
            operator delete(__p[0]);
          SipLazuliManager::logSipOptionsEvent(this, a3, (const SipContactParam *)v7);
          v43 = *(_DWORD *)(v7 + 456);
          memset(v49, 0, sizeof(v49));
          v10 = (*(uint64_t (**)(char *))(*(_QWORD *)v8 + 64))((char *)this + 32);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v8 + 16))((char *)this + 32, v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Supported options: size=", 24);
          *(_BYTE *)(v10 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v10 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" {", 2);
          *(_BYTE *)(v10 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v10 + 17) = 0;
          v11 = *(__int128 **)(v7 + 424);
          if (v11 != (__int128 *)(v7 + 432))
          {
            do
            {
              memset(v48, 0, sizeof(v48));
              *(_OWORD *)__p = 0u;
              std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)__p, v11 + 2);
              v12 = (*(uint64_t (**)(char *))(*(_QWORD *)v8 + 64))((char *)this + 32);
              (*(void (**)(char *, uint64_t))(*(_QWORD *)v8 + 16))((char *)this + 32, v12);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"  ", 2);
              *(_BYTE *)(v12 + 17) = 0;
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 32))(v12, __p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" = ", 3);
              *(_BYTE *)(v12 + 17) = 0;
              (*(void (**)(uint64_t, char *))(*(_QWORD *)v12 + 32))(v12, (char *)v48 + 8);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v12 + 17) = 0;
              v13 = (void *)BYTE7(v48[0]);
              if (SBYTE7(v48[0]) < 0)
                v13 = __p[1];
              if (v13 == (void *)19)
              {
                v14 = (SBYTE7(v48[0]) & 0x80u) == 0 ? __p : (void **)__p[0];
                v15 = *v14;
                v16 = v14[1];
                v17 = *(uint64_t *)((char *)v14 + 11);
                v18 = v15 == (void *)0x2E616D73672E672BLL && v16 == (void *)0x6D6970632E736372;
                if (v18 && v17 == 0x7478656D6970632ELL)
                {
                  if (v49[24])
                  {
                    std::string::operator=((std::string *)v49, (const std::string *)((char *)v48 + 8));
                  }
                  else
                  {
                    if (SHIBYTE(v48[1]) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)v49, *((const std::string::value_type **)&v48[0] + 1), *(std::string::size_type *)&v48[1]);
                    }
                    else
                    {
                      *(_OWORD *)v49 = *(_OWORD *)((char *)v48 + 8);
                      *(_QWORD *)&v49[16] = *((_QWORD *)&v48[1] + 1);
                    }
                    v49[24] = 1;
                  }
                }
              }
              if (SHIBYTE(v48[1]) < 0)
                operator delete(*((void **)&v48[0] + 1));
              if (SBYTE7(v48[0]) < 0)
                operator delete(__p[0]);
              v20 = (__int128 *)*((_QWORD *)v11 + 1);
              if (v20)
              {
                do
                {
                  v21 = v20;
                  v20 = *(__int128 **)v20;
                }
                while (v20);
              }
              else
              {
                do
                {
                  v21 = (__int128 *)*((_QWORD *)v11 + 2);
                  v18 = *(_QWORD *)v21 == (_QWORD)v11;
                  v11 = v21;
                }
                while (!v18);
              }
              v11 = v21;
            }
            while (v21 != (__int128 *)(v7 + 432));
          }
          v22 = (*(uint64_t (**)(char *))(*(_QWORD *)v8 + 64))((char *)this + 32);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v8 + 16))((char *)this + 32, v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"}", 1);
          *(_BYTE *)(v22 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v22 + 17) = 0;
          v23 = (*(uint64_t (**)(char *))(*(_QWORD *)v8 + 64))((char *)this + 32);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v8 + 16))((char *)this + 32, v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Remote serviceMask=", 19);
          *(_BYTE *)(v23 + 17) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v44, ",");
          BambiServices::namesForServiceMask(v43, (uint64_t)&v44, __p);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v23 + 32))(v23, __p);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v23 + 17) = 0;
          if (SBYTE7(v48[0]) < 0)
            operator delete(__p[0]);
          if (v46 < 0)
            operator delete(v44);
          v24 = *((_QWORD *)this + 22);
          v25 = *((_QWORD *)this + 23);
          v44 = 0;
          v45 = 0;
          v26 = *(std::__shared_weak_count **)(v24 + 16);
          if (v26)
          {
            v27 = std::__shared_weak_count::lock(v26);
            v45 = v27;
            if (v27)
            {
              v28 = *(_QWORD *)(v24 + 8);
              v44 = (void *)v28;
LABEL_62:
              if (*(char *)(v28 + 4159) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v28 + 4136), *(_QWORD *)(v28 + 4144));
              }
              else
              {
                v40 = v28 + 4136;
                *(_OWORD *)__p = *(_OWORD *)v40;
                *(_QWORD *)&v48[0] = *(_QWORD *)(v40 + 16);
              }
              (*(void (**)(uint64_t, void **, __int128 *, _QWORD *, std::string *, _QWORD, _BYTE *))(*(_QWORD *)v25 + 64))(v25, __p, &v50, v76, &v77, v43, v49);
              if (SBYTE7(v48[0]) < 0)
                operator delete(__p[0]);
              if (v27)
              {
                p_shared_owners = (unint64_t *)&v27->__shared_owners_;
                do
                  v42 = __ldaxr(p_shared_owners);
                while (__stlxr(v42 - 1, p_shared_owners));
                if (!v42)
                {
                  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                  std::__shared_weak_count::__release_weak(v27);
                }
              }
              if (v49[24] && (v49[23] & 0x80000000) != 0)
                operator delete(*(void **)v49);
              SipUri::~SipUri((SipUri *)&v50);
LABEL_76:
              *(_QWORD *)&v50 = v76;
              std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v77.__r_.__value_.__l.__data_);
              return;
            }
          }
          else
          {
            v27 = 0;
          }
          v28 = 0;
          goto LABEL_62;
        }
      }
    }
    v29 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"Contact header is missing.  Propagating error using asserted ID ", 64);
    *(_BYTE *)(v29 + 17) = 0;
    v30 = SipMessage::assertedIdentity((uint64_t)a2, 1);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v30 + 40))(v30, v29);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v29 + 17) = 0;
    v32 = *((_QWORD *)this + 22);
    v31 = *((_QWORD *)this + 23);
    *(_OWORD *)v49 = 0uLL;
    v33 = *(std::__shared_weak_count **)(v32 + 16);
    if (v33)
    {
      v34 = std::__shared_weak_count::lock(v33);
      *(_QWORD *)&v49[8] = v34;
      if (v34)
      {
        v35 = *(_QWORD *)(v32 + 8);
        *(_QWORD *)v49 = v35;
LABEL_50:
        if (*(char *)(v35 + 4159) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v35 + 4136), *(_QWORD *)(v35 + 4144));
        }
        else
        {
          v36 = v35 + 4136;
          *(_OWORD *)__p = *(_OWORD *)v36;
          *(_QWORD *)&v48[0] = *(_QWORD *)(v36 + 16);
        }
        *(_QWORD *)&v54 = 0;
        *(_QWORD *)&v50 = &off_1E78B7238;
        *((_QWORD *)&v50 + 1) = &_bambiDomain;
        LODWORD(v51) = 0;
        v53 = 0uLL;
        *((_QWORD *)&v51 + 1) = 0;
        v52 = 0uLL;
        v37 = SipMessage::assertedIdentity((uint64_t)a2, 1);
        (*(void (**)(uint64_t, void **, __int128 *, std::string *, char *, _QWORD *))(*(_QWORD *)v31 + 72))(v31, __p, &v50, &v77, v37, v76);
        ImsResult::~ImsResult((ImsResult *)&v50);
        if (SBYTE7(v48[0]) < 0)
          operator delete(__p[0]);
        if (v34)
        {
          v38 = (unint64_t *)&v34->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        goto LABEL_76;
      }
    }
    else
    {
      v34 = 0;
    }
    v35 = 0;
    goto LABEL_50;
  }
}

void sub_1BEE11FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32)
{
  uint64_t v32;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a31 && a30 < 0)
    operator delete(__p);
  SipUri::~SipUri((SipUri *)&a32);
  a32 = v32 - 144;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (*(char *)(v32 - 97) < 0)
    operator delete(*(void **)(v32 - 120));
  _Unwind_Resume(a1);
}

void SipLazuliManager::logSipOptionsEvent(SipLazuliManager *this, uint64_t a2, const SipContactParam *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  int v7;
  uint64_t v8;
  __int128 *v9;
  char *v10;
  char v11;
  char v12;
  char v13;
  std::string::size_type size;
  std::string *v15;
  BOOL v16;
  std::string::size_type v17;
  std::string::size_type v18;
  BOOL v19;
  std::string *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  int v23;
  BOOL v26;
  std::string *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  uint64_t v30;
  BOOL v33;
  std::string *v34;
  std::string::size_type v35;
  std::string::size_type v36;
  uint64_t v37;
  std::string *v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string::size_type v43;
  uint64_t v44;
  BOOL v48;
  uint64_t v49;
  int64_t v50;
  std::string *v51;
  char *v52;
  uint64_t v53;
  std::string *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  std::string *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  std::string *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  std::string *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  std::string *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  std::string *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  std::string *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  std::string *v82;
  char *v83;
  char *v84;
  std::string *v85;
  char *v86;
  char *v87;
  __int128 *v88;
  __int128 *v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *__p;
  int v113;
  std::string v114;
  std::string v115;
  std::string v116[2];
  std::string v117;
  _QWORD v118[3];
  uint64_t v119;
  std::__shared_weak_count *v120;

  v119 = 0;
  v120 = 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (v5)
  {
    v7 = a2;
    v120 = std::__shared_weak_count::lock(v5);
    if (v120)
    {
      v8 = *((_QWORD *)this + 20);
      v119 = v8;
      if (v8)
      {
        if (v7 == 200)
        {
          memset(&v117, 0, sizeof(v117));
          v9 = (__int128 *)*((_QWORD *)a3 + 53);
          v10 = (char *)a3 + 432;
          if (v9 == (__int128 *)((char *)a3 + 432))
          {
            v94 = 0;
            v93 = 0;
            v92 = 0;
            v13 = 0;
            v110 = 0;
            v111 = 0;
            v95 = 0;
            v90 = 0;
            v91 = 0;
          }
          else
          {
            v107 = 0;
            v11 = 0;
            v12 = 0;
            v110 = 0;
            v111 = 0;
            v108 = 0;
            v109 = 0;
            v13 = 0;
            do
            {
              memset(v116, 0, sizeof(v116));
              std::pair<std::string const,std::string>::pair[abi:ne180100](v116, v9 + 2);
              size = HIBYTE(v116[0].__r_.__value_.__r.__words[2]);
              if ((v116[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = v116[0].__r_.__value_.__l.__size_;
              switch(size)
              {
                case 0x10uLL:
                  if ((v116[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v15 = v116;
                  else
                    v15 = (std::string *)v116[0].__r_.__value_.__r.__words[0];
                  v16 = v15->__r_.__value_.__r.__words[0] == 0x2E707067332E672BLL
                     && v15->__r_.__value_.__l.__size_ == 0x6665722D69736369;
                  if (v16
                    || ((v18 = v15->__r_.__value_.__r.__words[0],
                         v17 = v15->__r_.__value_.__l.__size_,
                         v18 == 0x2E707067332E672BLL)
                      ? (v19 = v17 == 0x6665722D69726169)
                      : (v19 = 0),
                        v19))
                  {
                    memset(&v115, 0, sizeof(v115));
                    if (SHIBYTE(v116[1].__r_.__value_.__r.__words[2]) < 0)
                      std::string::__init_copy_ctor_external(&v115, v116[1].__r_.__value_.__l.__data_, v116[1].__r_.__value_.__l.__size_);
                    else
                      v115 = v116[1];
                    v49 = v3;
                    ims::removePercentEscapes((uint64_t)&v115);
                    v113 = SHIBYTE(v115.__r_.__value_.__r.__words[2]);
                    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v50 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
                    else
                      v50 = v115.__r_.__value_.__l.__size_;
                    __p = (void *)v115.__r_.__value_.__r.__words[0];
                    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v51 = &v115;
                    else
                      v51 = (std::string *)v115.__r_.__value_.__r.__words[0];
                    v52 = (char *)v51 + v50;
                    if (v50 >= 43)
                    {
                      v53 = v50;
                      v54 = v51;
                      do
                      {
                        v55 = (char *)memchr(v54, 117, v53 - 42);
                        if (!v55)
                          break;
                        v56 = v55;
                        if (!memcmp(v55, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg", 0x2BuLL))
                        {
                          if (v56 != v52 && v56 - (char *)v51 != -1)
                            BYTE4(v108) = 1;
                          break;
                        }
                        v54 = (std::string *)(v56 + 1);
                        v53 = v52 - (v56 + 1);
                      }
                      while (v53 >= 43);
                    }
                    if (v50 >= 48)
                    {
                      v57 = v50;
                      v58 = v51;
                      do
                      {
                        v59 = (char *)memchr(v58, 117, v57 - 47);
                        if (!v59)
                          break;
                        v60 = v59;
                        if (!memcmp(v59, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.largemsg", 0x30uLL))
                        {
                          if (v60 != v52 && v60 - (char *)v51 != -1)
                            LOBYTE(v109) = 1;
                          break;
                        }
                        v58 = (std::string *)(v60 + 1);
                        v57 = v52 - (v60 + 1);
                      }
                      while (v57 >= 48);
                    }
                    if (v50 >= 48)
                    {
                      v61 = v50;
                      v62 = v51;
                      do
                      {
                        v63 = (char *)memchr(v62, 117, v61 - 47);
                        if (!v63)
                          break;
                        v64 = v63;
                        if (!memcmp(v63, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.deferred", 0x30uLL))
                        {
                          if (v64 != v52 && v64 - (char *)v51 != -1)
                            BYTE4(v109) = 1;
                          break;
                        }
                        v62 = (std::string *)(v64 + 1);
                        v61 = v52 - (v64 + 1);
                      }
                      while (v61 >= 48);
                    }
                    if (v50 >= 47)
                    {
                      v65 = v50;
                      v66 = v51;
                      do
                      {
                        v67 = (char *)memchr(v66, 117, v65 - 46);
                        if (!v67)
                          break;
                        v68 = v67;
                        if (!memcmp(v67, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.session", 0x2FuLL))
                        {
                          if (v68 != v52 && v68 - (char *)v51 != -1)
                            LOBYTE(v111) = 1;
                          break;
                        }
                        v66 = (std::string *)(v68 + 1);
                        v65 = v52 - (v68 + 1);
                      }
                      while (v65 >= 47);
                    }
                    if (v50 >= 46)
                    {
                      v69 = v50;
                      v70 = v51;
                      do
                      {
                        v71 = (char *)memchr(v70, 117, v69 - 45);
                        if (!v71)
                          break;
                        v72 = v71;
                        if (!memcmp(v71, "urn:urn-7:3gpp-application.ims.iari.rcs.fthttp", 0x2EuLL))
                        {
                          if (v72 != v52 && v72 - (char *)v51 != -1)
                            BYTE4(v111) = 1;
                          break;
                        }
                        v70 = (std::string *)(v72 + 1);
                        v69 = v52 - (v72 + 1);
                      }
                      while (v69 >= 46);
                    }
                    if (v50 >= 47)
                    {
                      v73 = v50;
                      v74 = v51;
                      do
                      {
                        v75 = (char *)memchr(v74, 117, v73 - 46);
                        if (!v75)
                          break;
                        v76 = v75;
                        if (!memcmp(v75, "urn:urn-7:3gpp-application.ims.iari.rcs.geopush", 0x2FuLL))
                        {
                          if (v76 != v52 && v76 - (char *)v51 != -1)
                            LOBYTE(v108) = 1;
                          break;
                        }
                        v74 = (std::string *)(v76 + 1);
                        v73 = v52 - (v76 + 1);
                      }
                      while (v73 >= 47);
                    }
                    if (v50 >= 46)
                    {
                      v77 = v50;
                      v78 = v51;
                      do
                      {
                        v79 = (char *)memchr(v78, 117, v77 - 45);
                        if (!v79)
                          break;
                        v80 = v79;
                        if (!memcmp(v79, "urn:urn-7:3gpp-application.ims.iari.rcs.geosms", 0x2EuLL))
                        {
                          if (v80 != v52 && v80 - (char *)v51 != -1)
                            v107 = 1;
                          break;
                        }
                        v78 = (std::string *)(v80 + 1);
                        v77 = v52 - (v80 + 1);
                      }
                      while (v77 >= 46);
                    }
                    if (v50 >= 47)
                    {
                      v81 = v50;
                      v82 = v51;
                      do
                      {
                        v83 = (char *)memchr(v82, 117, v81 - 46);
                        if (!v83)
                          break;
                        v84 = v83;
                        if (!memcmp(v83, "urn:urn-7:3gpp-application.ims.iari.rcs.chatbot", 0x2FuLL))
                        {
                          if (v84 != v52 && v84 - (char *)v51 != -1)
                            BYTE4(v110) = 1;
                          break;
                        }
                        v82 = (std::string *)(v84 + 1);
                        v81 = v52 - (v84 + 1);
                      }
                      while (v81 >= 47);
                    }
                    if (v50 >= 50)
                    {
                      v85 = v51;
                      do
                      {
                        v86 = (char *)memchr(v85, 117, v50 - 49);
                        if (!v86)
                          break;
                        v87 = v86;
                        if (!memcmp(v86, "urn:urn-7:3gpp-application.ims.iari.rcs.chatbot.sa", 0x32uLL))
                        {
                          if (v87 != v52 && v87 - (char *)v51 != -1)
                            LOBYTE(v110) = 1;
                          break;
                        }
                        v85 = (std::string *)(v87 + 1);
                        v50 = v52 - (v87 + 1);
                      }
                      while (v50 >= 50);
                    }
                    v3 = v49;
                    if (v113 < 0)
                      operator delete(__p);
                  }
                  break;
                case 0x11uLL:
                  if ((v116[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v20 = v116;
                  else
                    v20 = (std::string *)v116[0].__r_.__value_.__r.__words[0];
                  v21 = v20->__r_.__value_.__r.__words[0];
                  v22 = v20->__r_.__value_.__l.__size_;
                  v23 = v20->__r_.__value_.__s.__data_[16];
                  v26 = v21 == 0x2E616D73672E672BLL && v22 == 0x6F6273692E736372 && v23 == 116;
                  v11 |= v26;
                  break;
                case 0x13uLL:
                  if ((v116[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v27 = v116;
                  else
                    v27 = (std::string *)v116[0].__r_.__value_.__r.__words[0];
                  v28 = v27->__r_.__value_.__r.__words[0];
                  v29 = v27->__r_.__value_.__l.__size_;
                  v30 = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 3);
                  v33 = v28 == 0x2E616D73672E672BLL && v29 == 0x6D6970632E736372 && v30 == 0x7478656D6970632ELL;
                  v12 |= v33;
                  break;
                case 0x16uLL:
                  if ((v116[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v34 = v116;
                  else
                    v34 = (std::string *)v116[0].__r_.__value_.__r.__words[0];
                  v35 = v34->__r_.__value_.__r.__words[0];
                  v36 = v34->__r_.__value_.__l.__size_;
                  v37 = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 6);
                  if (v35 == 0x2E616D73672E672BLL && v36 == 0x76746F622E736372 && v37 == 0x6E6F697372657674)
                    std::string::operator=(&v117, &v116[1]);
                  break;
                case 0x1BuLL:
                  if ((v116[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v40 = v116;
                  else
                    v40 = (std::string *)v116[0].__r_.__value_.__r.__words[0];
                  v41 = v40->__r_.__value_.__r.__words[0];
                  v42 = v40->__r_.__value_.__l.__size_;
                  v43 = v40->__r_.__value_.__r.__words[2];
                  v44 = *(std::string::size_type *)((char *)&v40->__r_.__value_.__r.__words[2] + 3);
                  v48 = v41 == 0x2E616D73672E672BLL
                     && v42 == 0x2E6D70632E736372
                     && v43 == 0x616C2D7265676170
                     && v44 == 0x656772616C2D7265;
                  v13 |= v48;
                  break;
                default:
                  break;
              }
              if (SHIBYTE(v116[1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v116[1].__r_.__value_.__l.__data_);
              if (SHIBYTE(v116[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v116[0].__r_.__value_.__l.__data_);
              v88 = (__int128 *)*((_QWORD *)v9 + 1);
              if (v88)
              {
                do
                {
                  v89 = v88;
                  v88 = *(__int128 **)v88;
                }
                while (v88);
              }
              else
              {
                do
                {
                  v89 = (__int128 *)*((_QWORD *)v9 + 2);
                  v16 = *(_QWORD *)v89 == (_QWORD)v9;
                  v9 = v89;
                }
                while (!v16);
              }
              v9 = v89;
            }
            while (v89 != (__int128 *)v10);
            v90 = v107;
            v91 = v12;
            v8 = v119;
            v93 = v109;
            v92 = BYTE4(v109);
            v95 = v108;
            v94 = BYTE4(v108);
          }
          (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v8 + 136) + 104))(v116);
          v99 = v116[0].__r_.__value_.__r.__words[0];
          if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v114, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
          else
            v114 = v117;
          BYTE5(v106) = v91 & 1;
          BYTE4(v106) = v110 & 1;
          WORD1(v106) = *(_WORD *)((_BYTE *)&v110 + 3) & 0x100;
          BYTE1(v106) = v90 & 1;
          LOBYTE(v106) = v95 & 1;
          IMSMetricsManager::logLazuliMessageSipOptions(v99, v94 & 1, v93 & 1, v92 & 1, v13 & 1, v111 & 1, 0, BYTE4(v111) & 1, v106, (uint64_t)&v114);
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v114.__r_.__value_.__l.__data_);
          v100 = (std::__shared_weak_count *)v116[0].__r_.__value_.__l.__size_;
          if (v116[0].__r_.__value_.__l.__size_)
          {
            v101 = (unint64_t *)(v116[0].__r_.__value_.__l.__size_ + 8);
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v117.__r_.__value_.__l.__data_);
        }
        else
        {
          (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v8 + 136) + 104))(v116);
          memset(v118, 0, sizeof(v118));
          WORD2(v106) = 0;
          LODWORD(v106) = 0;
          IMSMetricsManager::logLazuliMessageSipOptions((uint64_t)v116[0].__r_.__value_.__l.__data_, 0, 0, 0, 0, 0, 0, 0, v106, (uint64_t)v118);
          v96 = (std::__shared_weak_count *)v116[0].__r_.__value_.__l.__size_;
          if (v116[0].__r_.__value_.__l.__size_)
          {
            v97 = (unint64_t *)(v116[0].__r_.__value_.__l.__size_ + 8);
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
        }
      }
    }
  }
  v103 = v120;
  if (v120)
  {
    p_shared_owners = (unint64_t *)&v120->__shared_owners_;
    do
      v105 = __ldaxr(p_shared_owners);
    while (__stlxr(v105 - 1, p_shared_owners));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t, const SipContactParam *))v103->__on_zero_shared)(v103, a2, a3);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
}

void sub_1BEE12A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v35 - 104);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipLazuliManager::handleOptionsReceived(SipLazuliManager *this, const SipMessage *a2, uint64_t a3)
{
  SipLazuliManager::handleOptionsReceived((SipLazuliManager *)((char *)this - 8), a2, a3);
}

void SipLazuliManager::handleOptionsError(SipLazuliManager *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  const SipContactParam *v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  std::string v26;

  v10 = *((_QWORD *)a1 + 23);
  if (!v10)
    goto LABEL_17;
  v14 = *((_QWORD *)a1 + 22);
  v15 = *(std::__shared_weak_count **)(v14 + 16);
  if (!v15)
  {
    v16 = 0;
    goto LABEL_6;
  }
  v16 = std::__shared_weak_count::lock(v15);
  if (!v16)
  {
LABEL_6:
    v17 = 0;
    goto LABEL_7;
  }
  v17 = *(_QWORD *)(v14 + 8);
LABEL_7:
  if (*(char *)(v17 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(v17 + 4136), *(_QWORD *)(v17 + 4144));
  else
    v26 = *(std::string *)(v17 + 4136);
  (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 72))(v10, &v26, a4, a5, a6, a7);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_17:
  v20 = SipMessage::header<SipContactHeader>(a2);
  if (!v20
    || ((v21 = (const SipContactParam *)*((_QWORD *)v20 + 9)) != 0
      ? (v22 = v21 == *((const SipContactParam **)v20 + 10))
      : (v22 = 1),
        v22))
  {
    v24 = *((_QWORD *)a1 + 4);
    v23 = (_QWORD *)((char *)a1 + 32);
    v25 = (*(uint64_t (**)(_QWORD *))(v24 + 56))(v23);
    (*(void (**)(_QWORD *, uint64_t))(*v23 + 16))(v23, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Contact header is missing in SipLazuliManager::handleOptionsError", 65);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
  }
  else
  {
    SipLazuliManager::logSipOptionsEvent(a1, *(unsigned int *)(a4 + 16), v21);
  }
}

void sub_1BEE12CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipLazuliManager::handleOptionsError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  SipLazuliManager::handleOptionsError((SipLazuliManager *)(a1 - 8), a2, a3, a4, a5, a6, a7);
}

void SipLazuliManager::getPowerAssertionTag(int a1@<W1>, int a2@<W2>, std::string *a3@<X8>)
{
  char *v7;
  char *v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string __p;
  void *v13;
  std::string::size_type v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  const void *v18[2];
  uint64_t v19;

  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "com.apple.ipTelephony");
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  if (a1)
    v7 = ".msrpIncoming";
  else
    v7 = ".msrpOutgoing";
  std::string::basic_string[abi:ne180100]<0>(v16, v7);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  if (a2)
    v8 = ".wifi";
  else
    v8 = ".cell";
  std::string::basic_string[abi:ne180100]<0>(&v13, v8);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v18, (const void **)v16, &__p);
  if (v15 >= 0)
    v9 = (const std::string::value_type *)&v13;
  else
    v9 = (const std::string::value_type *)v13;
  if (v15 >= 0)
    v10 = HIBYTE(v15);
  else
    v10 = v14;
  v11 = std::string::append(&__p, v9, v10);
  *a3 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15) < 0)
    operator delete(v13);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)v18[0]);
}

void sub_1BEE12E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void SipLazuliManager::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "SipLazuliManager");
}

void `non-virtual thunk to'SipLazuliManager::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "SipLazuliManager");
}

void SipUserAgentDelegate::~SipUserAgentDelegate(SipUserAgentDelegate *this)
{
  JUMPOUT(0x1C3B87100);
}

uint64_t SipUserAgentDelegate::handleNewServerTransaction()
{
  return 0;
}

void SipTransactionUser::~SipTransactionUser(SipTransactionUser *this)
{
  JUMPOUT(0x1C3B87100);
}

uint64_t SipTransactionUser::handleRequest()
{
  return 0;
}

uint64_t SipTransactionUser::handleResponse()
{
  return 0;
}

void std::__list_imp<SipLazuliManager::DeferredMessage>::clear(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (char *)*((_QWORD *)v3 + 1);
        SipUri::~SipUri((SipUri *)(v3 + 312));
        LazuliSendParams::~LazuliSendParams((void **)v3 + 2);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

_QWORD *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void LazuliSendParams::LazuliSendParams(std::string *this, const LazuliSendParams *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
  }
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(this[6].__r_.__value_.__r.__words, *((const void **)a2 + 18), *((_QWORD *)a2 + 19), *((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18));
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(this + 7, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 23);
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v10;
  }
  if (*((char *)a2 + 215) < 0)
  {
    std::string::__init_copy_ctor_external(this + 8, *((const std::string::value_type **)a2 + 24), *((_QWORD *)a2 + 25));
  }
  else
  {
    v11 = *((_OWORD *)a2 + 12);
    this[8].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 26);
    *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v11;
  }
  this[9].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 27);
  if (*((char *)a2 + 247) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 224), *((const std::string::value_type **)a2 + 28), *((_QWORD *)a2 + 29));
  }
  else
  {
    v12 = *((_OWORD *)a2 + 14);
    this[10].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 30);
    *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = v12;
  }
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 248), *((const std::string::value_type **)a2 + 31), *((_QWORD *)a2 + 32));
  }
  else
  {
    v13 = *(_OWORD *)((char *)a2 + 248);
    this[11].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 33);
    *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = v13;
  }
  v14 = (std::string *)((char *)this + 272);
  if (*((char *)a2 + 295) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)a2 + 34), *((_QWORD *)a2 + 35));
  }
  else
  {
    v15 = *((_OWORD *)a2 + 17);
    this[12].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 36);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
}

void sub_1BEE13408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void *v20;

  if (*(char *)(v10 + 271) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 247) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 215) < 0)
    operator delete(*v18);
  if (*(char *)(v10 + 191) < 0)
    operator delete(*v17);
  v20 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v10 + 152) = v20;
    operator delete(v20);
  }
  if (*(char *)(v10 + 143) < 0)
    operator delete(*v15);
  if (*(char *)(v10 + 119) < 0)
    operator delete(*v14);
  if (*(char *)(v10 + 95) < 0)
    operator delete(*v13);
  if (*(char *)(v10 + 71) < 0)
    operator delete(*a9);
  if (*(char *)(v10 + 47) < 0)
    operator delete(*a10);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BEE13578(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

ImsOutStream *SipParameterMap::log(SipParameterMap *this, ImsOutStream *a2)
{
  return SipParameterMap::toStream(this, a2, 0, 0, 0, 0);
}

void SipParameterMap::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "ParameterMap");
}

void LazuliSendParams::~LazuliSendParams(void **this)
{
  void *v2;

  if (*((char *)this + 295) < 0)
    operator delete(this[34]);
  if (*((char *)this + 271) < 0)
    operator delete(this[31]);
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  v2 = this[18];
  if (v2)
  {
    this[19] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void SipUri::~SipUri(SipUri *this)
{
  *(_QWORD *)this = &off_1E78BFCE8;
  *((_QWORD *)this + 46) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 376, *((_QWORD **)this + 48));
  *((_QWORD *)this + 41) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 336, *((_QWORD **)this + 43));
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  if (*((char *)this + 295) < 0)
    operator delete(*((void **)this + 34));
  if (*((char *)this + 271) < 0)
    operator delete(*((void **)this + 31));
  if (*((char *)this + 247) < 0)
    operator delete(*((void **)this + 28));
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  *(_QWORD *)this = off_1E78B8288;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHost::~SipHost((void **)this + 1);
}

{
  SipUri::~SipUri(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipHop::setHost(SipHop *this, const SipHost *a2)
{
  return SipHost::operator=((uint64_t)this + 8, (uint64_t)a2);
}

ImsOutStream *SipHop::toStream(SipHop *this, ImsOutStream *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  SipHost::ipAddress((SipHop *)((char *)this + 8), &v7);
  (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)v7 + 40))(v7, a2);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a2;
}

void sub_1BEE138C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipHop::ipAddress(SipHop *this@<X0>, _QWORD *a2@<X8>)
{
  SipHost::ipAddress((SipHop *)((char *)this + 8), a2);
}

void SipHop::returnAddress(SipHop *this@<X0>, _QWORD *a2@<X8>)
{
  SipHost::ipAddress((SipHop *)((char *)this + 8), a2);
}

xpc_object_t *xpc::array::iterator::iterator(xpc_object_t *a1, xpc_object_t object, void *a3)
{
  *a1 = object;
  if (object)
    xpc_retain(object);
  else
    *a1 = xpc_null_create();
  a1[1] = a3;
  return a1;
}

void ims::CFMutableDictionary::~CFMutableDictionary(ims::CFMutableDictionary *this)
{
  ims::CFType::~CFType(this);
  JUMPOUT(0x1C3B87100);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E78B6828, MEMORY[0x1E0DE42E0]);
}

void sub_1BEE139AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void std::__list_imp<SipLazuliManager::OutgoingMsrp>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<SipLazuliManager::OutgoingMsrp,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<SipLazuliManager::OutgoingMsrp,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1BEE13B20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void (***v2)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  BOOL v7;

  v1 = *a1;
  v2 = (void (***)(_QWORD))**a1;
  if (v2)
  {
    v4 = (void (***)(_QWORD))v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 51;
      do
      {
        (**v6)(v6);
        v7 = v6 == v2;
        v6 -= 51;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1BEE13C34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<unsigned int>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<unsigned int>::destroy(a1, *a2);
    std::__tree<unsigned int>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::OutgoingMsrp>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::OutgoingMsrp>>,0>(uint64_t a1)
{
  std::__list_imp<SipLazuliManager::OutgoingMsrp>::clear((uint64_t *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::destroy(void **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::Participant>>,0>(a1 + 4);
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::Participant>>,0>(void **a1)
{
  char *v2;
  _QWORD *v3;
  void **v4;
  _QWORD *v5;
  char *v6;

  if (a1[5])
  {
    v2 = (char *)(a1 + 3);
    v3 = a1[3];
    v4 = (void **)a1[4];
    v5 = *v4;
    v5[1] = v3[1];
    *(_QWORD *)v3[1] = v5;
    a1[5] = 0;
    if (v4 != a1 + 3)
    {
      do
      {
        v6 = (char *)v4[1];
        if (*((char *)v4 + 87) < 0)
          operator delete(v4[8]);
        if (*((char *)v4 + 63) < 0)
          operator delete(v4[5]);
        if (*((char *)v4 + 39) < 0)
          operator delete(v4[2]);
        operator delete(v4);
        v4 = (void **)v6;
      }
      while (v6 != v2);
    }
  }
  if (*((char *)a1 + 23) < 0)
    operator delete(*a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>(uint64_t a1)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<SipClientTransaction>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<SipClientTransaction>> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_1BEE1406C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<SipClientTransaction>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v6 = (_QWORD *)(a1 + 24);
  v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v8)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9)
              v15 %= v9;
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  memset(v25, 0, sizeof(v25));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<SipClientTransaction>> const&>(a1, v8, a3, v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9)
          v23 %= v9;
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1BEE1452C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<SipClientTransaction>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = (char *)operator new(0x38uLL);
  *a4 = v8;
  a4[1] = v7;
  *((_BYTE *)a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_1BEE145A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v4 + v7 + v8 + a3;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v6 + v9 + v17;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v30 + v28 + v39 + v29;
        v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

std::string *std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::unordered_map<std::string,std::shared_ptr<SipServerTransaction>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<SipServerTransaction>> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_1BEE14C8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<SipServerTransaction>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v6 = (_QWORD *)(a1 + 24);
  v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v8)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9)
              v15 %= v9;
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  memset(v25, 0, sizeof(v25));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<SipServerTransaction>> const&>(a1, v8, a3, v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9)
          v23 %= v9;
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1BEE14F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipServerTransaction>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<SipServerTransaction>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = (char *)operator new(0x38uLL);
  *a4 = v8;
  a4[1] = v7;
  *((_BYTE *)a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_1BEE14F94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<unsigned int>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__function::__func<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E78B7FE8;
  return result;
}

void std::__function::__func<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E78B7FE8;
}

uint64_t std::__function::__func<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipLazuliManager::handleRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(void)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t *std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B87100](v2, 0x1012C40EC159624);
  }
  return a1;
}

uint64_t *dispatch::async<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>)::{lambda(void *)#1}::__invoke(IMSClientManager *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  IMSClientManager *v7;
  xpc_object_t object;
  void *__p;
  std::__shared_weak_count *v10;
  char v11;

  v7 = a1;
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  v2 = v10;
  v3 = *((_QWORD *)__p + 25);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "UserTriggered");
  object = xpc_null_create();
  IMSCallManager::terminateLazuli(v3, (uint64_t)a1, (uint64_t)&__p, &object);
  xpc_release(object);
  object = 0;
  if (v11 < 0)
    operator delete(__p);
  return std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_1BEE1545C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  xpc_release(object);
  object = 0;
  if (a17 < 0)
    operator delete(__p);
  std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<SipLazuliManager::handleOutgoingMessageSuccess(SipUri const&,std::string const&,unsigned int,std::string const&,BOOL,BOOL)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::handleOutgoingMessageSuccess(SipUri const&,std::string const&,unsigned int,std::string const&,BOOL,BOOL)::$_0,std::default_delete<SipLazuliManager::handleOutgoingMessageSuccess(SipUri const&,std::string const&,unsigned int,std::string const&,BOOL,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(IMSClientManager *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  IMSClientManager *v7;
  xpc_object_t object;
  void *__p;
  std::__shared_weak_count *v10;
  char v11;

  v7 = a1;
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  v2 = v10;
  v3 = *((_QWORD *)__p + 25);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "UserTriggered");
  object = xpc_null_create();
  IMSCallManager::terminateLazuli(v3, (uint64_t)a1, (uint64_t)&__p, &object);
  xpc_release(object);
  object = 0;
  if (v11 < 0)
    operator delete(__p);
  return std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_1BEE15568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  xpc_release(object);
  object = 0;
  if (a17 < 0)
    operator delete(__p);
  std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<SipLazuliManager::handleOutgoingMessageError(SipUri const&,std::string const&,unsigned int,ImsResult)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::handleOutgoingMessageError(SipUri const&,std::string const&,unsigned int,ImsResult)::$_0,std::default_delete<SipLazuliManager::handleOutgoingMessageError(SipUri const&,std::string const&,unsigned int,ImsResult)::$_0>>)::{lambda(void *)#1}::__invoke(IMSClientManager *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  IMSClientManager *v7;
  xpc_object_t object;
  void *__p;
  std::__shared_weak_count *v10;
  char v11;

  v7 = a1;
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  v2 = v10;
  v3 = *((_QWORD *)__p + 25);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "MediaTimeout");
  object = xpc_null_create();
  IMSCallManager::terminateLazuli(v3, (uint64_t)a1, (uint64_t)&__p, &object);
  xpc_release(object);
  object = 0;
  if (v11 < 0)
    operator delete(__p);
  return std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_1BEE15674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  xpc_release(object);
  object = 0;
  if (a17 < 0)
    operator delete(__p);
  std::unique_ptr<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0,std::default_delete<SipLazuliManager::handleIncomingMessage(SipUri const&,SipUri const&,std::string const&,std::string const&,std::string const&,std::string const&,std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipLazuliManager::OutgoingPager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78B8068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipLazuliManager::OutgoingPager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78B8068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipLazuliManager::OutgoingPager>::__on_zero_shared(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = (void **)(a1 + 128);
  if (*(_DWORD *)(a1 + 152))
    ImsPowerAssertion::deinitialize(a1 + 128);
  v3 = *(_QWORD *)(a1 + 96);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 104);
  if (v4)
  {
    v9 = 0;
    v10 = 0;
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v4 + 344), &v9);
    v5 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  ImsPowerAssertion::~ImsPowerAssertion(v2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 104);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 24);
}

uint64_t *std::unique_ptr<SipLazuliManager::processLargeMsgQueue(void)::$_0,std::default_delete<SipLazuliManager::processLargeMsgQueue(void)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    LazuliSendParams::~LazuliSendParams((void **)(v2 + 16));
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    MEMORY[0x1C3B87100](v2, 0x1032C40146E9EE9);
  }
  return a1;
}

void LazuliSendParams::LazuliSendParams(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = a2[6];
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
  }
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(this[6].__r_.__value_.__r.__words, *((const void **)a2 + 18), *((_QWORD *)a2 + 19), *((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18));
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(this + 7, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 23);
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v10;
  }
  if (*((char *)a2 + 215) < 0)
  {
    std::string::__init_copy_ctor_external(this + 8, *((const std::string::value_type **)a2 + 24), *((_QWORD *)a2 + 25));
  }
  else
  {
    v11 = a2[12];
    this[8].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 26);
    *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v11;
  }
  this[9].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 27);
  if (*((char *)a2 + 247) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 224), *((const std::string::value_type **)a2 + 28), *((_QWORD *)a2 + 29));
  }
  else
  {
    v12 = a2[14];
    this[10].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 30);
    *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = v12;
  }
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 248), *((const std::string::value_type **)a2 + 31), *((_QWORD *)a2 + 32));
  }
  else
  {
    v13 = *(__int128 *)((char *)a2 + 248);
    this[11].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 33);
    *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = v13;
  }
  v14 = (std::string *)((char *)this + 272);
  if (*((char *)a2 + 295) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)a2 + 34), *((_QWORD *)a2 + 35));
  }
  else
  {
    v15 = a2[17];
    this[12].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 36);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
}

void sub_1BEE15AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void *v20;

  if (*(char *)(v10 + 271) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 247) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 215) < 0)
    operator delete(*v18);
  if (*(char *)(v10 + 191) < 0)
    operator delete(*v17);
  v20 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v10 + 152) = v20;
    operator delete(v20);
  }
  if (*(char *)(v10 + 143) < 0)
    operator delete(*v15);
  if (*(char *)(v10 + 119) < 0)
    operator delete(*v14);
  if (*(char *)(v10 + 95) < 0)
    operator delete(*v13);
  if (*(char *)(v10 + 71) < 0)
    operator delete(*a9);
  if (*(char *)(v10 + 47) < 0)
    operator delete(*a10);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

uint64_t *dispatch::async<SipLazuliManager::processLargeMsgQueue(void)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::processLargeMsgQueue(void)::$_0,std::default_delete<SipLazuliManager::processLargeMsgQueue(void)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  IMSClientManager *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v12;
  void *__p[2];
  char v14;
  void *v15;
  std::__shared_weak_count *v16;
  char v17;

  v12 = a1;
  v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    v3 = (IMSClientManager *)std::__shared_weak_count::lock(v2);
    v4 = (std::__shared_weak_count *)v3;
    if (v3 && *a1)
    {
      IMSClientManager::instance(v3);
      IPTelephonyManager::getInstance((uint64_t *)&v15);
      IMSCallManager::initializeMOLazuliSession(*((IMSCallManager **)v15 + 25), (const LazuliSendParams *)(a1 + 2), 0);
      v5 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
LABEL_15:
      v9 = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return std::unique_ptr<SipLazuliManager::processLargeMsgQueue(void)::$_0,std::default_delete<SipLazuliManager::processLargeMsgQueue(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v12);
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "laz.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::error(ims::_logger, (uint64_t)&v15, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Instance lost. Stack teardown?", 30);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v15);
  if (v4)
    goto LABEL_15;
  return std::unique_ptr<SipLazuliManager::processLargeMsgQueue(void)::$_0,std::default_delete<SipLazuliManager::processLargeMsgQueue(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v12);
}

void sub_1BEE15D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, std::__shared_weak_count *a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;

  v24 = a18;
  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (unint64_t *)&v22->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  std::unique_ptr<SipLazuliManager::processLargeMsgQueue(void)::$_0,std::default_delete<SipLazuliManager::processLargeMsgQueue(void)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t *v13;
  std::string *v14;
  __int128 v15;
  uint64_t *v16;
  _QWORD v18[2];
  uint64_t v19;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (!v5)
    goto LABEL_10;
  v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v10 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0)
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0)
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    v12 = *a3;
    v19 = 0;
    v13 = (uint64_t *)operator new(0x50uLL);
    v18[0] = v13;
    v18[1] = v6;
    v14 = (std::string *)(v13 + 4);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v15 = *v12;
      v13[6] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    v13[7] = (uint64_t)(v13 + 7);
    v13[8] = (uint64_t)(v13 + 7);
    v13[9] = 0;
    LOBYTE(v19) = 1;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v8;
    *v7 = v13;
    v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1BEE15F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::OutgoingMsrp>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

_QWORD *std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78B80B8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78B80B8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78B80B8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78B80B8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  SipLazuliManager *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = (SipLazuliManager *)a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
      {
        v8 = *(unsigned __int8 *)(a2 + 23);
        v9 = (char)v8;
        if ((v8 & 0x80u) != 0)
          v8 = *(_QWORD *)(a2 + 8);
        if (v8 == 23
          && (v9 >= 0 ? (v10 = (uint64_t *)a2) : (v10 = *(uint64_t **)a2),
              (v11 = *v10, v12 = v10[1], v13 = *(uint64_t *)((char *)v10 + 15), v11 == 0x3330357265676150)
            ? (v14 = v12 == 0x7466417972746552)
            : (v14 = 0),
              v14 ? (v15 = v13 == 0x72656D6954726574) : (v15 = 0),
              v15))
        {
          v22 = (_QWORD *)((char *)v5 + 32);
          v21 = *((_QWORD *)v5 + 4);
          if (*((_QWORD *)v5 + 42))
          {
            v23 = (*(uint64_t (**)(_QWORD *))(v21 + 64))((_QWORD *)v5 + 4);
            (*(void (**)(_QWORD *, uint64_t))(*v22 + 16))((_QWORD *)v5 + 4, v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Retrying pager MESSAGE again as recommended by Server", 53);
            *(_BYTE *)(v23 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v23 + 17) = 0;
            std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v5 + 40, *((_QWORD *)v5 + 42), *((_QWORD *)v5 + 43));
            std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)v5 + 42);
            SipLazuliManager::OutgoingPager::send(*((std::chrono::steady_clock::time_point **)v5 + 40));
          }
          else
          {
            v24 = (*(uint64_t (**)(_QWORD *))(v21 + 48))((_QWORD *)v5 + 4);
            (*(void (**)(_QWORD *, uint64_t))(*v22 + 16))((_QWORD *)v5 + 4, v24);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Lost track of previous throttled pager MESSAGE. Processing send queue...", 72);
            *(_BYTE *)(v24 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v24 + 17) = 0;
            SipLazuliManager::processSendQueue(v5);
          }
        }
        else
        {
          v17 = *((_QWORD *)v5 + 4);
          v16 = (_QWORD *)((char *)v5 + 32);
          v18 = (*(uint64_t (**)(_QWORD *))(v17 + 48))(v16);
          (*(void (**)(_QWORD *, uint64_t))(*v16 + 16))(v16, v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Timer fired for unknown id ", 27);
          *(_BYTE *)(v18 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, a2);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v18 + 17) = 0;
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEE163E8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0,std::allocator<SipLazuliManager::handleServiceUnavailableResponse(SipResponse const&)::$_0>,void ()(std::string &)>::target_type()
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void ***std::unique_ptr<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0,std::default_delete<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0>>::~unique_ptr[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    LazuliSendParams::~LazuliSendParams(v2);
    MEMORY[0x1C3B87100]();
  }
  return a1;
}

void ***dispatch::async<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0>(dispatch_queue_s *,std::unique_ptr<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0,std::default_delete<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v6 = a1;
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v7);
  IMSCallManager::initializeMOLazuliSession(*(IMSCallManager **)(v7 + 200), (const LazuliSendParams *)a1, 0);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return std::unique_ptr<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0,std::default_delete<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0>>::~unique_ptr[abi:ne180100](&v6);
}

void sub_1BEE16638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = a12;
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::unique_ptr<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0,std::default_delete<SipLazuliManager::send(LazuliSendParams const&,SipUri const&)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t *v13;
  std::string *v14;
  __int128 v15;
  uint64_t *v16;
  _QWORD v18[2];
  uint64_t v19;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (!v5)
    goto LABEL_10;
  v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v10 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0)
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0)
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    v12 = *a3;
    v19 = 0;
    v13 = (uint64_t *)operator new(0x50uLL);
    v18[0] = v13;
    v18[1] = v6;
    v14 = (std::string *)(v13 + 4);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v15 = *v12;
      v13[6] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    v13[7] = (uint64_t)(v13 + 7);
    v13[8] = (uint64_t)(v13 + 7);
    v13[9] = 0;
    LOBYTE(v19) = 1;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v8;
    *v7 = v13;
    v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1BEE167DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void **v1;

  v1 = *(void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::Participant>>,0>(v1 + 4);
    operator delete(v1);
  }
}

char *std::__list_imp<SipLazuliManager::Participant>::__create_node[abi:ne180100]<std::string const&,std::string const&,std::string const&,SipLazuliManager::Participant::Action>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  char *v8;
  char *v9;
  std::string *v10;

  v8 = (char *)operator new(0x60uLL);
  v9 = v8;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 16), *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a1;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a1 + 16);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v9 + 40), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)(v9 + 40) = *(_OWORD *)a2;
    *((_QWORD *)v9 + 7) = *(_QWORD *)(a2 + 16);
  }
  v10 = (std::string *)(v9 + 64);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v9 + 10) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v9 + 22) = *a4;
  return v9;
}

void sub_1BEE16908(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[63] < 0)
    operator delete(*v3);
  if (v1[39] < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void **std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::__erase_unique<std::string>(void ***a1, void **a2)
{
  void **v3;
  uint64_t *v4;
  void **v5;
  void **v6;
  void **v7;
  BOOL v8;
  uint64_t *v9;

  v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (void ***)v3)
  {
    v4 = (uint64_t *)v3;
    v5 = (void **)v3[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (void **)*v5;
      }
      while (v5);
    }
    else
    {
      v7 = v3;
      do
      {
        v6 = (void **)v7[2];
        v8 = *v6 == v7;
        v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3)
      *a1 = v6;
    v9 = (uint64_t *)a1[1];
    a1[2] = (void **)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::OutgoingMsrp>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::Participant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::Participant>>>>::__erase_unique<std::string>(void ***a1, void **a2)
{
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  BOOL v8;
  uint64_t *v9;

  v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (void ***)v3)
  {
    v4 = v3;
    v5 = (void **)v3[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (void **)*v5;
      }
      while (v5);
    }
    else
    {
      v7 = v3;
      do
      {
        v6 = (void **)v7[2];
        v8 = *v6 == v7;
        v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3)
      *a1 = v6;
    v9 = (uint64_t *)a1[1];
    a1[2] = (void **)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, (uint64_t *)v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::list<SipLazuliManager::Participant>>,0>(v4 + 4);
    operator delete(v4);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BEE17090(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t SipStringHeader::SipStringHeader(uint64_t a1, const std::string *a2, const std::string *a3)
{
  uint64_t v5;

  v5 = SipHeader::SipHeader(a1, a2);
  *(_QWORD *)v5 = off_1E78B8320;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_BYTE *)(v5 + 88) = 0;
  std::string::operator=((std::string *)(v5 + 64), a3);
  return a1;
}

void sub_1BEE171B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  SipHeader::~SipHeader((void **)v1);
  _Unwind_Resume(a1);
}

void SipHeader::~SipHeader(void **this)
{
  *this = off_1E78BE6E0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void SipStringHeader::SipStringHeader(SipStringHeader *this, const SipStringHeader *a2)
{
  _QWORD *v4;
  std::string *v5;
  __int128 v6;

  SipHeader::SipHeader(this, a2);
  *v4 = off_1E78B8320;
  v5 = (std::string *)(v4 + 8);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 4);
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 10);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_BYTE *)this + 88) = 0;
}

void sub_1BEE17284(_Unwind_Exception *a1)
{
  void **v1;

  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

uint64_t SipStringHeader::encodeValue(SipStringHeader *this, ImsOutStream *a2)
{
  void *v4[2];
  char v5;
  void *__p;
  char v7;

  if (*((_BYTE *)this + 88))
  {
    ObfuscatedString::ObfuscatedString((uint64_t)v4, (const std::string *)((char *)this + 64));
    (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 56))(a2, v4);
    if (v7 < 0)
      operator delete(__p);
    if (v5 < 0)
      operator delete(v4[0]);
  }
  else
  {
    (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 64);
  }
  return 1;
}

void sub_1BEE17320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ims::AccessNetwork::~AccessNetwork(&a9);
  _Unwind_Resume(a1);
}

uint64_t SipStringHeader::valueAsString(uint64_t a1, std::string *this)
{
  std::string::operator=(this, (const std::string *)(a1 + 64));
  return 1;
}

uint64_t SipStringHeader::setValueFromString(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 64), a2);
  return 1;
}

void SipStringHeader::~SipStringHeader(void **this)
{
  *this = off_1E78B8320;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78B8320;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

std::string *SipHeader::loggableName@<X0>(SipHeader *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 8));
}

SipStringHeader *SipStringHeader::clone(SipStringHeader *this)
{
  SipStringHeader *v2;

  v2 = (SipStringHeader *)operator new();
  SipStringHeader::SipStringHeader(v2, this);
  return v2;
}

void sub_1BEE17450(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40EE8ABE80);
  _Unwind_Resume(a1);
}

uint64_t SipHeader::allowsDuplicates(SipHeader *this)
{
  return 0;
}

uint64_t SipHeader::allowsMerging(SipHeader *this)
{
  return 0;
}

uint64_t SipHeader::mergeHeader(SipHeader *this, const SipHeader *a2)
{
  return 0;
}

uint64_t XmlParserGenericItem::XmlParserGenericItem(uint64_t a1, __int128 *a2)
{
  *(_QWORD *)a1 = &off_1E78CE278;
  bambi::XmlTreeItem::XmlTreeItem(a1 + 8, a2, 0);
  *(_QWORD *)a1 = &off_1E78B83B8;
  *(_QWORD *)(a1 + 8) = &unk_1E78B8438;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)a2);
  return a1;
}

void sub_1BEE17544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void **v6;
  void *v8;
  va_list va;

  va_start(va, a2);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v3 + 168) = v8;
    operator delete(v8);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5, *(_QWORD **)(v3 + 144));
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v3 + 111) < 0)
    operator delete(*(void **)(v3 + 88));
  if (*(char *)(v3 + 87) < 0)
    operator delete(*v4);
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  _Unwind_Resume(a1);
}

void XmlParserGenericItem::XmlParserGenericItem(XmlParserGenericItem *this, const XmlParserGenericItem *a2)
{
  const std::string *v4;
  const XmlParserGenericItem **v5;
  const XmlParserGenericItem **v6;
  const XmlParserGenericItem *v7;
  XmlParserGenericItem *v8;

  *(_QWORD *)this = &off_1E78CE278;
  v4 = (const std::string *)((char *)a2 + 64);
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)this + 8, (__int128 *)a2 + 4, 0);
  *(_QWORD *)this = &off_1E78B83B8;
  *((_QWORD *)this + 1) = &unk_1E78B8438;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 17) = (char *)this + 144;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  std::string::operator=((std::string *)((char *)this + 64), v4);
  std::string::operator=((std::string *)((char *)this + 88), (const std::string *)((char *)a2 + 88));
  if (this != a2)
  {
    std::vector<bambi::XmlParserNamespace>::__assign_with_size[abi:ne180100]<bambi::XmlParserNamespace*,bambi::XmlParserNamespace*>((uint64_t)this + 112, *((std::string **)a2 + 14), *((std::string **)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 4));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 17, *((__int128 **)a2 + 17), (__int128 *)a2 + 9);
  }
  v6 = (const XmlParserGenericItem **)*((_QWORD *)a2 + 20);
  v5 = (const XmlParserGenericItem **)*((_QWORD *)a2 + 21);
  while (v6 != v5)
  {
    v7 = *v6;
    v8 = (XmlParserGenericItem *)operator new();
    XmlParserGenericItem::XmlParserGenericItem(v8, v7);
    XmlParserGenericItem::addChildItem(this, v8);
    ++v6;
  }
}

void sub_1BEE176F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  void **v14;
  void *v16;

  v16 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v10 + 168) = v16;
    operator delete(v16);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v13, *(_QWORD **)(v10 + 144));
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (*(char *)(v10 + 111) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 87) < 0)
    operator delete(*v11);
  bambi::XmlTreeItem::~XmlTreeItem(a9);
  _Unwind_Resume(a1);
}

void XmlParserGenericItem::addChildItem(XmlParserGenericItem *this, XmlParserGenericItem *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = *((_QWORD *)this + 22);
  v4 = (char *)this + 176;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *((_QWORD *)v4 - 2);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)*((_QWORD *)this + 20);
    v18 = (char *)*((_QWORD *)this + 21);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    *((_QWORD *)this + 20) = v16;
    *((_QWORD *)this + 21) = v8;
    *((_QWORD *)this + 22) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 21) = v8;
}

void XmlParserGenericItem::~XmlParserGenericItem(XmlParserGenericItem *this)
{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;

  *(_QWORD *)this = &off_1E78B83B8;
  *((_QWORD *)this + 1) = &unk_1E78B8438;
  v2 = (void **)((char *)this + 8);
  v3 = (_QWORD *)*((_QWORD *)this + 20);
  v4 = (_QWORD *)*((_QWORD *)this + 21);
  if (v3 != v4)
  {
    do
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      ++v3;
    }
    while (v3 != v4);
    v3 = (_QWORD *)*((_QWORD *)this + 20);
  }
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 136, *((_QWORD **)this + 18));
  v5 = (void **)((char *)this + 112);
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  bambi::XmlTreeItem::~XmlTreeItem(v2);
}

{
  XmlParserGenericItem::~XmlParserGenericItem(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'XmlParserGenericItem::~XmlParserGenericItem(XmlParserGenericItem *this)
{
  XmlParserGenericItem::~XmlParserGenericItem((XmlParserGenericItem *)((char *)this - 8));
}

{
  XmlParserGenericItem::~XmlParserGenericItem((XmlParserGenericItem *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

std::string *XmlParserGenericItem::setName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 64), a2);
}

std::string *XmlParserGenericItem::setText(uint64_t a1, int a2, std::string *__str)
{
  return std::string::operator=((std::string *)(a1 + 88), __str);
}

std::string *XmlParserGenericItem::setAttribute(uint64_t a1, __int128 *a2, const std::string *a3)
{
  uint64_t *v4;
  __int128 *v6;

  v6 = a2;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 136), (void **)a2, (uint64_t)&std::piecewise_construct, &v6);
  return std::string::operator=((std::string *)(v4 + 7), a3);
}

BOOL XmlParserGenericItem::getAttribute(uint64_t a1, void **a2, std::string *a3)
{
  void **v5;
  void **v6;
  void **v7;

  v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 136, a2);
  v6 = v5;
  v7 = (void **)(a1 + 144);
  if (v7 != v5)
    std::string::operator=(a3, (const std::string *)(v5 + 7));
  return v7 != v6;
}

void XmlParserGenericItem::setNamespace(uint64_t a1, std::string **a2)
{
  uint64_t v2;

  v2 = a1 + 112;
  if ((std::string **)v2 != a2)
    std::vector<bambi::XmlParserNamespace>::__assign_with_size[abi:ne180100]<bambi::XmlParserNamespace*,bambi::XmlParserNamespace*>(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4));
}

uint64_t XmlParserGenericItem::createChild(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  XmlParserGenericItem::XmlParserGenericItem(v4, a2);
  v5 = a1[22];
  v6 = (uint64_t *)a1[21];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[20];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 22), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[20];
    v16 = (char *)a1[21];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[20];
    }
    a1[20] = v14;
    a1[21] = v7;
    a1[22] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[21] = v7;
  return v4;
}

void sub_1BEE17B5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C403C8F4F1BLL);
  _Unwind_Resume(a1);
}

XmlParserGenericItem *XmlParserGenericItem::firstChildAtPath(XmlParserGenericItem *a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v6;
  unint64_t v7;
  XmlParserGenericItem *ChildWithName;
  XmlParserGenericItem *v9;
  uint64_t v10;
  std::string v12;
  std::string v13;
  char v14;

  v6 = std::string::find((const std::string *)a2, 47, 0);
  if (v6 == -1)
    return XmlParserGenericItem::firstChildWithName(a1, (unsigned __int8 **)a2, a3);
  v7 = v6;
  memset(&v13, 0, sizeof(v13));
  std::string::basic_string(&v13, (const std::string *)a2, 0, v6, (std::allocator<char> *)&v12);
  ChildWithName = XmlParserGenericItem::firstChildWithName(a1, (unsigned __int8 **)&v13, a3);
  v9 = ChildWithName;
  v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  if (v7 < v10 - 1)
  {
    if (ChildWithName)
      goto LABEL_8;
    if ((_DWORD)a3)
    {
      v9 = (XmlParserGenericItem *)operator new();
      XmlParserGenericItem::XmlParserGenericItem((uint64_t)v9, (__int128 *)&v13);
      XmlParserGenericItem::addChildItem(a1, v9);
LABEL_8:
      std::string::basic_string(&v12, (const std::string *)a2, v7 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
      v9 = (XmlParserGenericItem *)XmlParserGenericItem::firstChildAtPath(v9, &v12, a3);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
      goto LABEL_12;
    }
    v9 = 0;
  }
LABEL_12:
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1BEE17CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  MEMORY[0x1C3B87100](v21, 0x10B3C403C8F4F1BLL);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

XmlParserGenericItem *XmlParserGenericItem::addChildWithName(XmlParserGenericItem *a1, __int128 *a2)
{
  XmlParserGenericItem *v4;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v4 = XmlParserGenericItem::addChildWithNameAndText(a1, a2, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1BEE17D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

XmlParserGenericItem *XmlParserGenericItem::addChildWithNameAndText(XmlParserGenericItem *a1, __int128 *a2, uint64_t a3)
{
  XmlParserGenericItem *v6;
  uint64_t v7;

  v6 = (XmlParserGenericItem *)operator new();
  XmlParserGenericItem::XmlParserGenericItem((uint64_t)v6, a2);
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  if (v7)
    (*(void (**)(XmlParserGenericItem *, __int128 *, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2, a3);
  XmlParserGenericItem::addChildItem(a1, v6);
  return v6;
}

void sub_1BEE17E44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C403C8F4F1BLL);
  _Unwind_Resume(a1);
}

XmlParserGenericItem *XmlParserGenericItem::firstChildWithName(XmlParserGenericItem *a1, unsigned __int8 **a2, int a3)
{
  uint64_t *v6;
  uint64_t *v7;
  char v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;

  v6 = (uint64_t *)*((_QWORD *)a1 + 20);
  v7 = (uint64_t *)*((_QWORD *)a1 + 21);
  if (v6 != v7)
  {
    v8 = *((_BYTE *)a2 + 23);
    if (v8 >= 0)
      v9 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v9 = a2[1];
    if (v8 >= 0)
      v10 = (unsigned __int8 *)a2;
    else
      v10 = *a2;
    do
    {
      v11 = *v6;
      v12 = *(unsigned __int8 *)(*v6 + 87);
      if ((v12 & 0x80u) == 0)
        v13 = (unsigned __int8 *)*(unsigned __int8 *)(*v6 + 87);
      else
        v13 = *(unsigned __int8 **)(*v6 + 72);
      if (v13 == v9)
      {
        if ((v12 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v11 + 64), v10, *(_QWORD *)(*v6 + 72)))
            return (XmlParserGenericItem *)v11;
        }
        else
        {
          if (!*(_BYTE *)(*v6 + 87))
            return (XmlParserGenericItem *)v11;
          v14 = 0;
          while (*(unsigned __int8 *)(v11 + v14 + 64) == v10[v14])
          {
            if (v12 == ++v14)
              return (XmlParserGenericItem *)v11;
          }
        }
      }
      ++v6;
    }
    while (v6 != v7);
  }
  if (a3)
    return XmlParserGenericItem::addChildWithName(a1, (__int128 *)a2);
  return 0;
}

void XmlParserGenericItem::constructTree(XmlParserGenericItem *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  xmlNodePtr *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const xmlChar *v9;
  unint64_t *v10;
  unint64_t v11;
  XmlParserGenericItem *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  XmlParserGenericItem *v19;
  XmlParserGenericItem *v20;
  BOOL v21;
  const std::string *v22;
  const std::string *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  int64x2_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  BOOL v62;
  uint64_t v63;
  XmlParserGenericItem *v64;
  int v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *v80[2];
  uint64_t v81;
  __int128 __p;
  uint64_t v83;
  int64x2_t v84;
  _QWORD v85[2];
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  int64x2_t v91;
  uint64_t v92;
  _QWORD *v93;

  *a2 = 0;
  a2[1] = 0;
  v4 = (char *)this + 8;
  bambi::XmlTreeItem::makeNode((XmlParserGenericItem *)((char *)this + 8), a2);
  v5 = (xmlNodePtr *)*a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v88 = *a2;
  v89 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (*((char *)this + 87) >= 0)
    v9 = (const xmlChar *)this + 64;
  else
    v9 = (const xmlChar *)*((_QWORD *)this + 8);
  xmlNodeSetName(*v5, v9);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v12 = (XmlParserGenericItem *)*((_QWORD *)this + 17);
  if (v12 != (XmlParserGenericItem *)((char *)this + 144))
  {
    do
    {
      v13 = a2[1];
      v86 = *a2;
      v87 = (std::__shared_weak_count *)v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      (*(void (**)(char *, uint64_t *, _QWORD *, _QWORD *))(*(_QWORD *)v4 + 48))(v4, &v86, (_QWORD *)v12 + 4, (_QWORD *)v12 + 7);
      v16 = v87;
      if (v87)
      {
        v17 = (unint64_t *)&v87->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = (XmlParserGenericItem *)*((_QWORD *)v12 + 1);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = *(XmlParserGenericItem **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (XmlParserGenericItem *)*((_QWORD *)v12 + 2);
          v21 = *(_QWORD *)v20 == (_QWORD)v12;
          v12 = v20;
        }
        while (!v21);
      }
      v12 = v20;
    }
    while (v20 != (XmlParserGenericItem *)((char *)this + 144));
  }
  v22 = (const std::string *)*((_QWORD *)this + 14);
  v23 = (const std::string *)*((_QWORD *)this + 15);
  if (v22 != v23)
  {
    v84 = 0uLL;
    v85[0] = 0;
    do
    {
      bambi::XmlTreeNs::XmlTreeNs((uint64_t)v80, v22, v22 + 1);
      v24 = v84.i64[1];
      if (v84.i64[1] >= v85[0])
      {
        v27 = 0xAAAAAAAAAAAAAAABLL * ((v84.i64[1] - v84.i64[0]) >> 4);
        v28 = v27 + 1;
        if (v27 + 1 > 0x555555555555555)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v85[0] - v84.i64[0]) >> 4) > v28)
          v28 = 0x5555555555555556 * ((v85[0] - v84.i64[0]) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v85[0] - v84.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v29 = 0x555555555555555;
        else
          v29 = v28;
        v93 = v85;
        if (v29)
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>>((uint64_t)v85, v29);
        else
          v30 = 0;
        v31 = &v30[48 * v27];
        v32 = *(_OWORD *)v80;
        *((_QWORD *)v31 + 2) = v81;
        *(_OWORD *)v31 = v32;
        v80[1] = 0;
        v81 = 0;
        v80[0] = 0;
        v33 = __p;
        *((_QWORD *)v31 + 5) = v83;
        *(_OWORD *)(v31 + 24) = v33;
        v83 = 0;
        __p = 0uLL;
        v34 = v84.i64[1];
        v35 = v84.i64[0];
        if (v84.i64[1] == v84.i64[0])
        {
          v39 = vdupq_n_s64(v84.u64[1]);
          v36 = &v30[48 * v27];
        }
        else
        {
          v36 = &v30[48 * v27];
          do
          {
            v37 = *(_OWORD *)(v34 - 48);
            *((_QWORD *)v36 - 4) = *(_QWORD *)(v34 - 32);
            *((_OWORD *)v36 - 3) = v37;
            *(_QWORD *)(v34 - 40) = 0;
            *(_QWORD *)(v34 - 32) = 0;
            *(_QWORD *)(v34 - 48) = 0;
            v38 = *(_OWORD *)(v34 - 24);
            *((_QWORD *)v36 - 1) = *(_QWORD *)(v34 - 8);
            *(_OWORD *)(v36 - 24) = v38;
            v36 -= 48;
            *(_QWORD *)(v34 - 16) = 0;
            *(_QWORD *)(v34 - 8) = 0;
            *(_QWORD *)(v34 - 24) = 0;
            v34 -= 48;
          }
          while (v34 != v35);
          v39 = v84;
        }
        v40 = v31 + 48;
        v84.i64[0] = (uint64_t)v36;
        v84.i64[1] = (uint64_t)(v31 + 48);
        v91 = v39;
        v41 = v85[0];
        v85[0] = &v30[48 * v29];
        v92 = v41;
        v90 = v39.i64[0];
        std::__split_buffer<bambi::XmlTreeNs>::~__split_buffer((uint64_t)&v90);
        v84.i64[1] = (uint64_t)v40;
        if (SHIBYTE(v83) < 0)
          operator delete((void *)__p);
      }
      else
      {
        v25 = *(_OWORD *)v80;
        *(_QWORD *)(v84.i64[1] + 16) = v81;
        *(_OWORD *)v24 = v25;
        v80[1] = 0;
        v81 = 0;
        v80[0] = 0;
        v26 = v83;
        *(_OWORD *)(v24 + 24) = __p;
        *(_QWORD *)(v24 + 40) = v26;
        v83 = 0;
        __p = 0uLL;
        v84.i64[1] = v24 + 48;
      }
      if (SHIBYTE(v81) < 0)
        operator delete(v80[0]);
      v22 += 2;
    }
    while (v22 != v23);
    v42 = a2[1];
    v78 = *a2;
    v79 = (std::__shared_weak_count *)v42;
    if (v42)
    {
      v43 = (unint64_t *)(v42 + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    (*(void (**)(char *, uint64_t *, int64x2_t *))(*(_QWORD *)v4 + 40))(v4, &v78, &v84);
    v45 = v79;
    if (v79)
    {
      v46 = (unint64_t *)&v79->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v80[0] = &v84;
    std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)v80);
  }
  v48 = (uint64_t *)*((_QWORD *)this + 20);
  v49 = (uint64_t *)*((_QWORD *)this + 21);
  while (v48 != v49)
  {
    v50 = *v48;
    v51 = a2[1];
    v76 = *a2;
    v77 = (std::__shared_weak_count *)v51;
    if (v51)
    {
      v52 = (unint64_t *)(v51 + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v50 + 96))(&v74);
    (*(void (**)(char *, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 56))(v4, &v76, &v74);
    v54 = v75;
    if (v75)
    {
      v55 = (unint64_t *)&v75->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = v77;
    if (v77)
    {
      v58 = (unint64_t *)&v77->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    ++v48;
  }
  v60 = *((_BYTE *)this + 111);
  if (v60 < 0)
  {
    if (!*((_QWORD *)this + 12))
      return;
  }
  else if (!*((_BYTE *)this + 111))
  {
    return;
  }
  if (v60 >= 0)
    v61 = *((unsigned __int8 *)this + 111);
  else
    v61 = *((_QWORD *)this + 12);
  if (v61)
  {
    v62 = 0;
    v63 = 0;
    v64 = v60 >= 0 ? (XmlParserGenericItem *)((char *)this + 88) : (XmlParserGenericItem *)*((_QWORD *)this + 11);
    do
    {
      v65 = *((unsigned __int8 *)v64 + v63);
      if (v65 != 13 && v65 != 32 && (v65 - 9) > 1)
        break;
      v62 = ++v63 >= v61;
    }
    while (v61 != v63);
    if (!v62)
    {
      v66 = a2[1];
      v72 = *a2;
      v73 = (std::__shared_weak_count *)v66;
      if (v66)
      {
        v67 = (unint64_t *)(v66 + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      (*(void (**)(char *, uint64_t *))(*(_QWORD *)v4 + 24))(v4, &v72);
      v69 = v73;
      if (v73)
      {
        v70 = (unint64_t *)&v73->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
    }
  }
}

void sub_1BEE18518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'XmlParserGenericItem::constructTree(XmlParserGenericItem *this@<X0>, uint64_t *a2@<X8>)
{
  XmlParserGenericItem::constructTree((XmlParserGenericItem *)((char *)this - 8), a2);
}

void std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<bambi::XmlParserNamespace>::__assign_with_size[abi:ne180100]<bambi::XmlParserNamespace*,bambi::XmlParserNamespace*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::string *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  uint64_t i;

  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 4) < a4)
  {
    if (v10)
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(std::string **)a1;
      if ((std::string *)v11 != v10)
      {
        do
        {
          v11 -= 48;
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v11);
        }
        while ((std::string *)v11 != v10);
        v12 = *(std::string **)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0x555555555555555)
      goto LABEL_21;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v14 = 2 * v13;
    if (2 * v13 <= a4)
      v14 = a4;
    v15 = v13 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v14;
    if (v15 > 0x555555555555555)
LABEL_21:
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>>(v9, v15);
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = &v16[48 * v17];
    v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>,bambi::XmlParserNamespace*,bambi::XmlParserNamespace*,bambi::XmlParserNamespace*>((uint64_t)__str, (uint64_t)a3, (uint64_t)v16);
    goto LABEL_17;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v10) >> 4) < a4)
  {
    v19 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v10) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<bambi::XmlParserNamespace *,bambi::XmlParserNamespace *,bambi::XmlParserNamespace *>(__str, v19, v10);
    v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>,bambi::XmlParserNamespace*,bambi::XmlParserNamespace*,bambi::XmlParserNamespace*>((uint64_t)v19, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_17:
    *(_QWORD *)(a1 + 8) = v18;
    return;
  }
  v20 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<bambi::XmlParserNamespace *,bambi::XmlParserNamespace *,bambi::XmlParserNamespace *>(__str, a3, v10);
  for (i = *(_QWORD *)(a1 + 8);
        (std::string *)i != v20;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(i))
  {
    i -= 48;
  }
  *(_QWORD *)(a1 + 8) = v20;
}

void sub_1BEE187C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BEE187CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>,bambi::XmlParserNamespace*,bambi::XmlParserNamespace*,bambi::XmlParserNamespace*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  std::string *v10;
  const std::string::value_type **v11;
  __int128 v12;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = (std::string *)(a3 + v6);
      v8 = (__int128 *)(a1 + v6);
      if (*(char *)(a1 + v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v7->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      v10 = (std::string *)(a3 + v6 + 24);
      v11 = (const std::string::value_type **)(a1 + v6 + 24);
      if (*(char *)(a1 + v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *v11, *(_QWORD *)(a1 + v6 + 32));
      }
      else
      {
        v12 = *(_OWORD *)v11;
        *(_QWORD *)(a3 + v6 + 40) = *(_QWORD *)(a1 + v6 + 40);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
      }
      v6 += 48;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_1BEE18888(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (*(char *)(v1 + v2 + 23) < 0)
    operator delete(*(void **)(v1 + v2));
  if (v2)
  {
    v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<bambi::XmlParserNamespace *,bambi::XmlParserNamespace *,bambi::XmlParserNamespace *>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      this += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return this;
}

void std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t std::__split_buffer<bambi::XmlTreeNs>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t bambi::XmlTreeNs::XmlTreeNs(uint64_t a1, const std::string *a2, const std::string *a3)
{
  std::string *v5;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v5 = (std::string *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)a1, a2);
  std::string::operator=(v5, a3);
  return a1;
}

void sub_1BEE18A4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          v18 = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<unsigned int>::__insert_node_at(v5, v18, leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1BEE18BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)(v4 + 32)) & 0x80) == 0)
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  memset(v7, 0, sizeof(v7));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, v7);
  v6 = 0;
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v6, v7[0] + 4);
  std::__tree<unsigned int>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1BEE18D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1BEE18E08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseAMRFormatParameters(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v5;
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v5 = parseAMRFormatParametersHelper(a1, a2, 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BEE18E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t parseAMRFormatParametersHelper(uint64_t a1, __int16 a2, int a3, std::string *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  char v10;
  size_t size;
  std::string *v12;
  _BYTE *v13;
  std::string::size_type v14;
  uint64_t *v16;
  int v17;
  uint64_t (*v18)(__int128 *, std::string *);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  std::string *v23;
  std::string v24;
  std::string __str;
  std::string v26;
  __int128 v27;
  void *v28[2];
  unsigned __int16 v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  std::string __p;
  char v35;
  __int16 v36;
  int v37;
  char v38;
  unsigned __int16 v39;
  char v40;
  unsigned __int16 v41;
  char v42;
  int v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  v31 = 0;
  v32 = 0;
  memset(v29, 0, sizeof(v29));
  v27 = 0u;
  *(_OWORD *)v28 = 0u;
  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v27, a2, a3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\t ;");
  ims::tokenize(a4, &v30, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = v30;
  v7 = v31;
  if (v30 == v31)
    goto LABEL_35;
  v23 = a4;
  v8 = 1;
  do
  {
    memset(&__p, 0, sizeof(__p));
    if (*(char *)(v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
    }
    else
    {
      v9 = *(_OWORD *)v6;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      v13 = memchr(v12, 61, size);
      v14 = v13 - (_BYTE *)v12;
      if (v13 && v14 != -1)
      {
        memset(&v26, 0, sizeof(v26));
        std::string::basic_string(&v26, &__p, 0, v14, (std::allocator<char> *)&__str);
        memset(&__str, 0, sizeof(__str));
        std::string::basic_string(&__str, &__p, v14 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v33);
        ims::chomp(&__str, "\r\n\t ;", 3);
        v16 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&SDPParser::amrFormatParameters, (void **)&v26.__r_.__value_.__l.__data_);
        v17 = (v16 == &qword_1ED70CD20) & v8;
        if (v16 != &qword_1ED70CD20 && ((v8 ^ 1) & 1) == 0)
        {
          v33 = &v26;
          v18 = (uint64_t (*)(__int128 *, std::string *))std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&SDPParser::amrFormatParameters, (void **)&v26.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v33)[7];
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v24, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          else
            v24 = __str;
          v17 = v18(&v27, &v24);
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v24.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v8 = v17;
      }
    }
    if (v10 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v6 += 24;
  }
  while (v6 != v7);
  if ((v8 & 1) != 0)
  {
LABEL_35:
    SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&__p, v29[4]);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78E9958;
    v35 = v29[5];
    v36 = *(unsigned __int16 *)((char *)&v29[5] + 1);
    v37 = *(_DWORD *)&v29[7];
    v38 = v29[9];
    v39 = v29[10];
    v40 = v29[11];
    v41 = v29[12];
    v42 = v29[13];
    v43 = *(_DWORD *)&v29[14];
    v44 = 1;
    SDPMediaFormatInfo::setSDPMediaFormatParams(a1, (uint64_t)&__p);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&__p);
    v19 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(&v26, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v20 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Failed to parse AMR codec with format parameters '", 50);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 32))(v20, v23);
    v21 = *(_QWORD **)(v20 + 8);
    __str.__r_.__value_.__s.__data_[0] = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)&__str, 1);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v19 = 0;
  }
  *(_QWORD *)&v27 = off_1E78ED0A8;
  if (SHIBYTE(v29[3]) < 0)
    operator delete(v28[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v19;
}

void sub_1BEE192DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  __p = &a42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseAMRWBFormatParameters(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v5;
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v5 = parseAMRFormatParametersHelper(a1, a2, 1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BEE19424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseEVSFormatParameters(uint64_t a1, __int16 a2, std::string *a3)
{
  uint64_t v5;
  uint64_t v6;
  int i;
  __int128 v8;
  char v9;
  size_t size;
  std::string *v11;
  _BYTE *v12;
  std::string::size_type v13;
  uint64_t *v15;
  int v16;
  uint64_t (*v17)(__int128 *, std::string *);
  uint64_t v19;
  std::string v20;
  std::string v21;
  std::string v22;
  __int128 v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  std::string __str;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  v23 = 0u;
  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)&v23, a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "\t ;");
  ims::tokenize(a3, &v31, (char *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v19 = a1;
  v5 = v31;
  v6 = v32;
  for (i = 1; v5 != v6; v5 += 24)
  {
    memset(&__str, 0, sizeof(__str));
    if (*(char *)(v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
    }
    else
    {
      v8 = *(_OWORD *)v5;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v8;
    }
    v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      v11 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      v12 = memchr(v11, 61, size);
      v13 = v12 - (_BYTE *)v11;
      if (v12 && v13 != -1)
      {
        memset(&v22, 0, sizeof(v22));
        std::string::basic_string(&v22, &__str, 0, v13, (std::allocator<char> *)&v21);
        memset(&v21, 0, sizeof(v21));
        std::string::basic_string(&v21, &__str, v13 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v34);
        ims::chomp(&v21, "\r\n\t ;", 3);
        v15 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&SDPParser::evsFormatParameters, (void **)&v22.__r_.__value_.__l.__data_);
        v16 = (v15 == &qword_1ED70CD38) & i;
        if (v15 != &qword_1ED70CD38 && ((i ^ 1) & 1) == 0)
        {
          v34 = &v22;
          v17 = (uint64_t (*)(__int128 *, std::string *))std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&SDPParser::evsFormatParameters, (void **)&v22.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v34)[7];
          if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v20, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
          else
            v20 = v21;
          v16 = v17(&v23, &v20);
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v20.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        i = v16;
      }
    }
    if (v9 < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)&__str, (const SDPMediaFormatEVSParams *)&v23);
  v36 = 2;
  SDPMediaFormatInfo::setSDPMediaFormatParams(v19, (uint64_t)&__str);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&__str);
  *(_QWORD *)&v23 = off_1E78ED0A8;
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  return i & 1;
}

void sub_1BEE1972C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(v48 - 224));
  if (a37 < 0)
    operator delete(__p);
  *(_QWORD *)(v48 - 224) = &a48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 224));
  _Unwind_Resume(a1);
}

BOOL SDPParser::parseDTMFFormatParameters(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v5;
  _DWORD *v6;
  _BOOL8 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v11;
  char v12;
  std::string __p;
  __int16 v14;
  char v15;
  void *v16;
  uint64_t v17;
  std::string v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v11, a2);
  v11 = off_1E78B8518;
  LOBYTE(v17) = v12;
  v16 = off_1E78ED0A8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v18 = __p;
  v19 = v14;
  v16 = off_1E78B8518;
  v20 = 3;
  SDPMediaFormatInfo::setSDPMediaFormatParams(a1, (uint64_t)&v16);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v16);
  v11 = off_1E78ED0A8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ims::chomp("\r\n\t ", a3, 3, (std::string *)&v16);
  v5 = v18.__r_.__value_.__s.__data_[7];
  if (v18.__r_.__value_.__s.__data_[7] < 0)
    v5 = v17;
  if (v5 == 4)
  {
    v6 = v16;
    if (v18.__r_.__value_.__s.__data_[7] >= 0)
      v6 = &v16;
    v7 = *v6 == 892415280;
    if ((v18.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
    {
LABEL_12:
      if (v7)
        return v7;
      goto LABEL_16;
    }
  }
  else
  {
    v7 = 0;
    if ((v18.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
      goto LABEL_12;
  }
  operator delete(v16);
  if (v7)
    return v7;
LABEL_16:
  std::string::basic_string[abi:ne180100]<0>(&v16, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::warn(ims::_logger, (uint64_t)&v16, (uint64_t)&v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"DTMF with unexpected format parameters parsed: '", 48);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a3);
  v9 = *(_QWORD **)(v8 + 8);
  v15 = 39;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v15, 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (__p.__r_.__value_.__s.__data_[7] < 0)
    operator delete(v11);
  if (v18.__r_.__value_.__s.__data_[7] < 0)
    operator delete(v16);
  return v7;
}

void sub_1BEE19A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SDPMediaFormatDTMFParams::~SDPMediaFormatDTMFParams(void **this)
{
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1C3B87100);
}

uint64_t SDPParser::parseTTYFormatParameters(uint64_t a1, __int16 a2, const std::string *__s)
{
  uint64_t size;
  const std::string *v7;
  char *v8;
  std::string *v9;
  char *v10;
  int v12;
  std::string v14;
  char v15;
  unsigned __int16 v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26[2];
  __int128 v27;
  _OWORD v28[10];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = (const std::string *)__s->__r_.__value_.__r.__words[0];
    size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    v7 = __s;
  }
  if (size >= 3)
  {
    v8 = (char *)v7 + size;
    v9 = (std::string *)v7;
    do
    {
      v10 = (char *)memchr(v9, 99, size - 2);
      if (!v10)
        break;
      if (*(_WORD *)v10 == 28771 && v10[2] == 115)
      {
        v12 = 0;
        if (v10 != v8 && v10 - (char *)v7 != -1)
        {
          memset(v28, 0, sizeof(v28));
          *(_OWORD *)v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v21 = 0u;
          std::string::basic_string(&v14, __s, v10 - (char *)v7 + 4, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v20);
          std::istringstream::basic_istringstream[abi:ne180100](&v21, (__int128 *)&v14);
          if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v14.__r_.__value_.__l.__data_);
          MEMORY[0x1C3B86E84](&v21, &v19);
          *(_QWORD *)&v21 = *MEMORY[0x1E0DE4F58];
          *(_QWORD *)((char *)&v21 + *(_QWORD *)(v21 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
          *(_QWORD *)&v22 = MEMORY[0x1E0DE4FB8] + 16;
          if (SBYTE7(v27) < 0)
            operator delete(v26[0]);
          std::streambuf::~streambuf();
          std::istream::~istream();
          MEMORY[0x1C3B8707C]((char *)v28 + 8);
          v12 = v19;
        }
        goto LABEL_13;
      }
      v9 = (std::string *)(v10 + 1);
      size = v8 - (char *)v9;
    }
    while (v8 - (char *)v9 >= 3);
  }
  v12 = 0;
LABEL_13:
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v14, a2);
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78E9AA8;
  v17 = v12;
  v18 = 0;
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v21, v16);
  *(_QWORD *)&v21 = off_1E78E9AA8;
  HIDWORD(v23) = v17;
  *(_QWORD *)&v24 = v18;
  DWORD2(v28[0]) = 4;
  SDPMediaFormatInfo::setSDPMediaFormatParams(a1, (uint64_t)&v21);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v21);
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78ED0A8;
  if (v15 < 0)
    operator delete((void *)v14.__r_.__value_.__r.__words[2]);
  return 1;
}

void sub_1BEE19D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::istringstream::~istringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;

  v4 = MEMORY[0x1E0DE4FD8];
  v5 = MEMORY[0x1E0DE4FD8] + 64;
  a1[15] = MEMORY[0x1E0DE4FD8] + 64;
  v6 = (uint64_t)(a1 + 2);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *a1 = v7;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v7 - 24)) = v8;
  a1[1] = 0;
  v9 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  *a1 = v4 + 24;
  a1[15] = v5;
  std::stringbuf::basic_stringbuf[abi:ne180100](v6, a2, 8);
  return a1;
}

void sub_1BEE19E2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1C3B8707C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F58];
  v3 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3B8707C](a1 + 120);
  return a1;
}

uint64_t SDPParser::parseTTYRedFormatParameters(uint64_t a1, __int16 a2, std::string *this)
{
  __int16 v6;
  std::string::size_type v7;
  std::string v9;
  char v10;
  unsigned __int16 v11;
  __int16 v12;
  __int16 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 __p;
  __int128 v21;
  _DWORD v22[42];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = 255;
  v13 = 255;
  v7 = std::string::find(this, 47, 0);
  if (v7 != -1)
  {
    memset(v22, 0, 160);
    __p = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    std::string::basic_string(&v9, this, v7 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
    std::istringstream::basic_istringstream[abi:ne180100](&v15, (__int128 *)&v9);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    MEMORY[0x1C3B86E90](&v15, &v13);
    *(_QWORD *)&v15 = *MEMORY[0x1E0DE4F58];
    *(_QWORD *)((char *)&v15 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
    *(_QWORD *)&v16 = MEMORY[0x1E0DE4FB8] + 16;
    if (SBYTE7(v21) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1C3B8707C](&v22[2]);
    v6 = v13;
  }
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v9, a2);
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78E9B20;
  v12 = v6;
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v15, v11);
  *(_QWORD *)&v15 = off_1E78E9B20;
  WORD5(v17) = v12;
  v22[2] = 5;
  SDPMediaFormatInfo::setSDPMediaFormatParams(a1, (uint64_t)&v15);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v15);
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78ED0A8;
  if (v10 < 0)
    operator delete((void *)v9.__r_.__value_.__r.__words[2]);
  return 1;
}

void sub_1BEE1A0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  std::istringstream::~istringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  v8 = (std::string *)(v7 + 32);
  v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  *((_QWORD *)v7 + 7) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BEE1A23C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void SDPMediaFormatParams::SDPMediaFormatParams(SDPMediaFormatParams *this, __int16 a2)
{
  std::string *v4;
  void *__p[2];
  uint64_t v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "fmtp");
  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = off_1E78ED0A8;
  v4 = (std::string *)((char *)this + 16);
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((_QWORD *)this + 4) = v6;
  }
  *(_QWORD *)this = off_1E78E99B8;
  *((_WORD *)this + 20) = a2;
}

void sub_1BEE1A33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPField::valid(SDPField *this)
{
  return *((unsigned __int8 *)this + 8);
}

void SDPMediaFormatEVSParams::SDPMediaFormatEVSParams(SDPMediaFormatEVSParams *this, __int16 a2)
{
  uint64_t v2;

  SDPMediaFormatParams::SDPMediaFormatParams(this, a2);
  *(_QWORD *)v2 = off_1E78E9A30;
  *(_DWORD *)(v2 + 42) = 257;
  *(_WORD *)(v2 + 48) = 220;
  *(_BYTE *)(v2 + 46) = 0;
  *(int64x2_t *)(v2 + 56) = vdupq_n_s64(0x1FFE00uLL);
  *(_QWORD *)(v2 + 72) = 2096640;
  *(_WORD *)(v2 + 80) = 511;
  *(_QWORD *)(v2 + 84) = 0x600000006;
  *(_DWORD *)(v2 + 92) = 6;
  *(_DWORD *)(v2 + 96) = 257;
  *(_QWORD *)(v2 + 100) = 131074;
  *(_BYTE *)(v2 + 108) = 0;
  *(_WORD *)(v2 + 109) = 257;
  *(_WORD *)(v2 + 112) = 255;
}

void SDPMediaFormatEVSParams::SDPMediaFormatEVSParams(SDPMediaFormatEVSParams *this, const SDPMediaFormatEVSParams *a2)
{
  uint64_t v3;

  SDPMediaFormatParams::SDPMediaFormatParams(this, *((_WORD *)a2 + 20));
  *(_QWORD *)v3 = off_1E78E9A30;
  *(_DWORD *)(v3 + 42) = *(_DWORD *)((char *)a2 + 42);
  *(_BYTE *)(v3 + 46) = *((_BYTE *)a2 + 46);
  *(_WORD *)(v3 + 48) = *((_WORD *)a2 + 24);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_QWORD *)(v3 + 72) = *((_QWORD *)a2 + 9);
  *(_WORD *)(v3 + 80) = *((_WORD *)a2 + 40);
  *(_QWORD *)(v3 + 84) = *(_QWORD *)((char *)a2 + 84);
  *(_DWORD *)(v3 + 92) = *((_DWORD *)a2 + 23);
  *(_DWORD *)(v3 + 96) = *((_DWORD *)a2 + 24);
  *(_DWORD *)(v3 + 100) = *((_DWORD *)a2 + 25);
  *(_WORD *)(v3 + 104) = *((_WORD *)a2 + 52);
  *(_DWORD *)(v3 + 106) = *(_DWORD *)((char *)a2 + 106);
  *(_BYTE *)(v3 + 110) = *((_BYTE *)a2 + 110);
  *(_WORD *)(v3 + 112) = *((_WORD *)a2 + 56);
}

unsigned int *std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(unsigned int *a1)
{
  uint64_t v2;
  char v4;

  v2 = a1[30];
  if ((_DWORD)v2 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix
     + v2))((int)&v4, (SDPMediaFormatUnknownParams *)a1);
  a1[30] = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS8_S9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(int a1, void **this)
{
  SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS8_S9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS8_S9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS8_S9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS8_S9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS8_S9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams(void **this)
{
  *this = &off_1E78B8590;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams(this);
  JUMPOUT(0x1C3B87100);
}

void SDPMediaFormatUnknownParams::formatParameters(SDPMediaFormatUnknownParams *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

BOOL SDPMediaFormatParams::printable(SDPMediaFormatParams *this)
{
  return *((unsigned __int16 *)this + 20) != 255;
}

uint64_t SDPMediaFormatParams::isOpenOffer(SDPMediaFormatParams *this)
{
  return 0;
}

uint64_t SDPMediaFormatParams::bandwidthAS(SDPMediaFormatParams *this)
{
  return 0;
}

_QWORD *SDPMediaFormatDTMFParams::formatParameters@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "0-15");
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  v8 = (std::string *)(v7 + 32);
  v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  *((_QWORD *)v7 + 7) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BEE1A7DC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x1E0DE4FB8] + 16;
  v7 = *a2;
  *(_QWORD *)(v6 + 80) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v6 + 64) = v7;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_DWORD *)(v6 + 96) = a3;
  std::stringbuf::__init_buf_ptrs[abi:ne180100](v6);
  return a1;
}

void sub_1BEE1A864(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

uint64_t ImsSocket::_createSocketWithDispatch(uint64_t a1, int a2, dispatch_object_t *a3, uint64_t a4, int a5)
{
  uint64_t v9;
  NSObject **v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v18;
  _BYTE v19[72];
  socklen_t v20[2];
  char v21;
  void *__p[2];
  char v23;
  uuid_t uu;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)v9 = a2;
  v10 = (NSObject **)(a1 + 56);
  if (v10 == a3)
  {
    v11 = a2;
  }
  else
  {
    ims::Dispatch::reset(v10, *a3);
    v9 = *(_QWORD *)(a1 + 40);
    if (!v9)
      goto LABEL_17;
    v11 = *(_DWORD *)v9;
  }
  if (v11 != -1)
  {
    v20[0] = 128;
    getsockname(v11, (sockaddr *)(v9 + 8), v20);
    *(_DWORD *)(a1 + 64) = *(unsigned __int8 *)(v9 + 9);
    IpAddress::createAddress((IpAddress *)(v9 + 8), (uint64_t)__p);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 24, (__int128 *)__p);
    v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v13 = (unint64_t *)((char *)__p[1] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (*(_QWORD *)(a1 + 24))
    {
      if (a5)
      {
        ImsSocket::attachDispatchSource((ImsSocket *)a1, *(NSObject **)(a1 + 56), (uint64_t)v19);
        ImsResult::~ImsResult((ImsResult *)v19);
      }
      memset(uu, 0, sizeof(uu));
      if (*(char *)(a4 + 23) < 0)
      {
        if (!*(_QWORD *)(a4 + 8))
          goto LABEL_25;
        v15 = *(const char **)a4;
      }
      else
      {
        v15 = (const char *)a4;
        if (!*(_BYTE *)(a4 + 23))
          goto LABEL_25;
      }
      if (!uuid_parse(v15, uu))
      {
        if (setsockopt(a2, 0xFFFF, 4360, uu, 0x10u))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "net");
          std::string::basic_string[abi:ne180100]<0>(v20, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v18 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Failed to Set UUID ", 19);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "net");
          std::string::basic_string[abi:ne180100]<0>(v20, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v18 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Set UUID ", 9);
        }
        *(_BYTE *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, a4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" on socket fd=", 14);
        *(_BYTE *)(v18 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_26;
      }
LABEL_25:
      std::string::basic_string[abi:ne180100]<0>(__p, "net");
      std::string::basic_string[abi:ne180100]<0>(v20, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v18 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Failed to parse UUID ", 21);
      *(_BYTE *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, a4);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_26:
      *(_BYTE *)(v18 + 17) = 0;
      if (v21 < 0)
        operator delete(*(void **)v20);
      if (v23 < 0)
        operator delete(__p[0]);
      ImsSocket::_setDscpOnSocket((ImsSocket *)a1, a2);
      return 1;
    }
  }
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(__p, "net");
  std::string::basic_string[abi:ne180100]<0>(v20, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v16 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"setLocalAddressFromSocket failed", 32);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v16 + 17) = 0;
  if (v21 < 0)
    operator delete(*(void **)v20);
  if (v23 < 0)
    operator delete(__p[0]);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  return 0;
}

void sub_1BEE1AE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsSocket::attachDispatchSource(ImsSocket *this@<X0>, NSObject *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v3;
  int *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v31[5];
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  NSObject *v35;
  _QWORD handler[6];
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;

  v3 = a2;
  if (!a2)
    v3 = *((_QWORD *)this + 7);
  v6 = (int *)*((_QWORD *)this + 5);
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v40, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)v40, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Unable to attach to NULL socket descriptor object", 49);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (!v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v40, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)v40, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Unable to attach to NULL dispatch queue", 39);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (*((_QWORD *)v6 + 17))
  {
    std::string::basic_string[abi:ne180100]<0>(v40, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::warn(ims::_logger, (uint64_t)v40, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"socket already attached to dispatch queue", 41);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(_BYTE *)(v7 + 17) = 0;
    if (v39 < 0)
      operator delete(__p[0]);
    if (v41 < 0)
      operator delete(v40[0]);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0x40000000;
    return;
  }
  v9 = *((_QWORD *)this + 1);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v6 = (int *)*((_QWORD *)this + 5);
  }
  v12 = dispatch_source_create(MEMORY[0x1E0C80DB8], *v6, 0, v3);
  *(_QWORD *)(*((_QWORD *)this + 5) + 136) = v12;
  if (v12)
  {
    v13 = MEMORY[0x1E0C809B0];
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 1174405120;
    handler[2] = ___ZN9ImsSocket20attachDispatchSourceEP16dispatch_queue_s_block_invoke;
    handler[3] = &__block_descriptor_tmp;
    handler[4] = this;
    handler[5] = v9;
    v37 = v8;
    if (v8)
    {
      v14 = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    dispatch_source_set_event_handler(v12, handler);
    v16 = *((_QWORD *)this + 5);
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    v18 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
      v18 = *((_QWORD *)this + 5);
    }
    v21 = *(NSObject **)(v18 + 136);
    v31[0] = v13;
    v31[1] = 1174405120;
    v31[2] = ___ZN9ImsSocket20attachDispatchSourceEP16dispatch_queue_s_block_invoke_26;
    v31[3] = &__block_descriptor_tmp_29;
    v31[4] = v16;
    v32 = v17;
    if (v17)
    {
      v22 = (unint64_t *)&v17->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v33 = v9;
    v34 = v8;
    if (v8)
    {
      v24 = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v35 = v21;
    dispatch_source_set_cancel_handler(v21, v31);
    dispatch_resume(*(dispatch_object_t *)(*((_QWORD *)this + 5) + 136));
    if (v34)
      std::__shared_weak_count::__release_weak(v34);
    v26 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v17)
    {
      v29 = (unint64_t *)&v17->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_1BEE1B280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 81) < 0)
    operator delete(*(void **)(v30 - 104));
  _Unwind_Resume(exception_object);
}

void ImsSocket::_setDscpOnSocket(ImsSocket *this, int a2)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  int v16;

  v3 = (_DWORD *)((char *)this + 68);
  v16 = *((_DWORD *)this + 17);
  v4 = *((_DWORD *)this + 16);
  if (v4 == 30)
  {
    if (setsockopt(a2, 41, 36, &v16, 4u))
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "net");
      std::string::basic_string[abi:ne180100]<0>(v12, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Failed to Set IPV6_TCLASS on IPv6 socket fd=", 44);
      *(_BYTE *)(v5 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v5 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" DSCP = 0x", 10);
      *(_BYTE *)(v5 + 17) = 0;
      v7 = *(_QWORD *)(v5 + 8) + *(_QWORD *)(**(_QWORD **)(v5 + 8) - 24);
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(v7 + 8) & 0xFFFFFFB5 | 8;
      *(_BYTE *)(v5 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_7;
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "net");
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Set IPV6_TCLASS to ", 19);
    *(_BYTE *)(v8 + 17) = 0;
    ims::toString<DscpClass>(v3, __p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" on IPv6 socket fd=", 19);
    *(_BYTE *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_10:
    *(_BYTE *)(v8 + 17) = 0;
    if (v11 < 0)
      operator delete(__p[0]);
    goto LABEL_12;
  }
  if (v4 != 2)
    goto LABEL_16;
  if (!setsockopt(a2, 0, 3, &v16, 4u))
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "net");
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Set IP_TOS to ", 14);
    *(_BYTE *)(v8 + 17) = 0;
    ims::toString<DscpClass>(v3, __p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" on IPv4 socket fd=", 19);
    *(_BYTE *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_10;
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "net");
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Failed to Set IP_TOS on IPv4 socket fd=", 39);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" DSCP = 0x", 10);
  *(_BYTE *)(v5 + 17) = 0;
  v6 = *(_QWORD *)(v5 + 8) + *(_QWORD *)(**(_QWORD **)(v5 + 8) - 24);
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(v6 + 8) & 0xFFFFFFB5 | 8;
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_7:
  *(_BYTE *)(v5 + 17) = 0;
LABEL_12:
  if (v13 < 0)
    operator delete(v12[0]);
  if (v15 < 0)
    operator delete(v14[0]);
LABEL_16:
  LODWORD(__p[0]) = 800;
  if (setsockopt(a2, 0xFFFF, 4230, __p, 4u))
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "net");
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Failed to Set SO_TRAFFIC_CLASS on socket fd=", 44);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "net");
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Set SO_TRAFFIC_CLASS on socket fd=", 34);
  }
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v13 < 0)
    operator delete(v12[0]);
  if (v15 < 0)
    operator delete(v14[0]);
}

void sub_1BEE1B810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t ImsSocket::ImsSocket(uint64_t a1, int a2)
{
  char *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E78B8608;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E78B86D8;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_QWORD *)v4 + 19) = 0;
  *((_QWORD *)v4 + 20) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *((_DWORD *)v4 + 6) = -1;
  *(_QWORD *)(a1 + 40) = v4 + 24;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 68) = a2;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_1BEE1B938(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void ImsSocket::~ImsSocket(ImsSocket *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &unk_1E78B8608;
  ImsSocket::close(this);
  v2 = *((_QWORD *)this + 7);
  if (v2)
    dispatch_release(v2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ImsSocket::close(ImsSocket *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 136))
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v3 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"ImsSocket detach source for fd ", 31);
      *(_BYTE *)(v3 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v3 + 17) = 0;
      if (v13 < 0)
        operator delete(__p[0]);
      if (v15 < 0)
        operator delete(v14[0]);
      v4 = *((_QWORD *)this + 5);
      if (v4)
      {
        v5 = *(NSObject **)(v4 + 136);
        if (v5)
        {
          dispatch_source_cancel(v5);
          *(_QWORD *)(*((_QWORD *)this + 5) + 136) = 0;
        }
      }
    }
    else if (*(_DWORD *)v2 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v7 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Closed", 6);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
      if (v13 < 0)
        operator delete(__p[0]);
      if (v15 < 0)
        operator delete(v14[0]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Closing fd ", 11);
      *(_BYTE *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (v13 < 0)
        operator delete(__p[0]);
      if (v15 < 0)
        operator delete(v14[0]);
      close(**((_DWORD **)this + 5));
      **((_DWORD **)this + 5) = -1;
    }
  }
  v8 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E78B86D8;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_QWORD *)v8 + 19) = 0;
  *((_QWORD *)v8 + 20) = 0;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v8;
  *(_OWORD *)(v8 + 24) = 0u;
  v8 += 24;
  *(_DWORD *)v8 = -1;
  *((_QWORD *)this + 5) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEE1BCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<IpAddress>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

double ImsSocket::allowPortReuse@<D0>(ImsSocket *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  ImsSocket *v3;
  double result;

  v2 = (unsigned int *)*((_QWORD *)this + 5);
  if (!v2 || (v3 = (ImsSocket *)*v2, (_DWORD)v3 == -1))
  {
    result = 0.0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 1073741827;
  }
  else
  {
    ImsSocket::setReusePortOptionForSocket(v3, a2);
  }
  return result;
}

void ImsSocket::setReusePortOptionForSocket(ImsSocket *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  int v10;

  v10 = 1;
  if (setsockopt((int)this, 0xFFFF, 512, &v10, 4u) == -1)
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    v4 = *__error();
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_posixDomain;
    *(_DWORD *)(a2 + 16) = v4;
    std::string::basic_string[abi:ne180100]<0>(v8, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"ImsSocket: unable to set port reuse for fd=", 43);
    *(_BYTE *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v7 < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(v8[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"ImsSocket: reuse port enabled for fd=", 37);
    *(_BYTE *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (v7 < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(v8[0]);
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
  }
}

void sub_1BEE1C010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  ImsResult *v21;

  if (a21 < 0)
    operator delete(__p);
  ImsResult::~ImsResult(v21);
  _Unwind_Resume(a1);
}

uint64_t ImsSocket::socketDescriptor(ImsSocket *this)
{
  unsigned int *v1;
  uint64_t result;
  uint64_t v3;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  v1 = (unsigned int *)*((_QWORD *)this + 5);
  if (!v1 || (result = *v1, (_DWORD)result == -1))
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::error(ims::_logger, (uint64_t)v6, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"_sock is empty...", 17);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (v5 < 0)
      operator delete(__p[0]);
    if (v7 < 0)
      operator delete(v6[0]);
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_1BEE1C15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsSocket::setNoTimeWaitForSocket(ImsSocket *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  int v10;

  v10 = 1;
  if (setsockopt((int)this, 6, 520, &v10, 4u) == -1)
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    v4 = *__error();
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_posixDomain;
    *(_DWORD *)(a2 + 16) = v4;
    std::string::basic_string[abi:ne180100]<0>(v8, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"ImsSocket: unable to set no-time-wait for fd=", 45);
    *(_BYTE *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v7 < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(v8[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"ImsSocket: no-time-wait enabled for socket ", 43);
    *(_BYTE *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (v7 < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(v8[0]);
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
  }
}

void sub_1BEE1C3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  ImsResult *v21;

  if (a21 < 0)
    operator delete(__p);
  ImsResult::~ImsResult(v21);
  _Unwind_Resume(a1);
}

void ImsSocket::setNoSigpipeOptionForSocket(ImsSocket *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  int v10;

  v10 = 1;
  if (setsockopt((int)this, 0xFFFF, 4130, &v10, 4u) == -1)
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    v4 = *__error();
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_posixDomain;
    *(_DWORD *)(a2 + 16) = v4;
    std::string::basic_string[abi:ne180100]<0>(v8, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"ImsSocket: unable to set SO_NOSIGPIPE for fd=", 45);
    *(_BYTE *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v7 < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(v8[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"ImsSocket: NOSIGPIPE enabled for fd=", 36);
    *(_BYTE *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (v7 < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(v8[0]);
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
  }
}

void sub_1BEE1C69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  ImsResult *v21;

  if (a21 < 0)
    operator delete(__p);
  ImsResult::~ImsResult(v21);
  _Unwind_Resume(a1);
}

int *ImsSocket::bindSocketToInterface@<X0>(int *result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  const char *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  unsigned int v20;

  v6 = (int)result;
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(_QWORD *)(a3 + 8))
    {
      v8 = *(const char **)a3;
      goto LABEL_6;
    }
LABEL_15:
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    v13 = 1073741825;
    goto LABEL_25;
  }
  if (!*(_BYTE *)(a3 + 23))
    goto LABEL_15;
  v8 = (const char *)a3;
LABEL_6:
  v20 = if_nametoindex(v8);
  if (!v20)
  {
    *(_QWORD *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    v9 = *__error();
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_posixDomain;
    *(_DWORD *)(a4 + 16) = v9;
    result = (int *)(*(uint64_t (**)(void))(_posixDomain + 24))();
    if ((result & 1) != 0)
      return result;
    ImsResult::~ImsResult((ImsResult *)a4);
  }
  if ((a2 & 2) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"binding IPv6 socket to interface ", 33);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" (index ", 8);
    *(_BYTE *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)")", 1);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
    v12 = 125;
    v11 = 41;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"binding IPv4 socket to interface ", 33);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" (index ", 8);
    *(_BYTE *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)")", 1);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
    v11 = 0;
    v12 = 25;
  }
  result = (int *)setsockopt(v6, v11, v12, &v20, 4u);
  if ((_DWORD)result == -1)
  {
    result = __error();
    v13 = *result;
    v15 = &_posixDomain;
  }
  else
  {
    v13 = 0;
    v15 = &_bambiDomain;
  }
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)a4 = &off_1E78B7238;
  *(_QWORD *)(a4 + 8) = v15;
LABEL_25:
  *(_DWORD *)(a4 + 16) = v13;
  return result;
}

void sub_1BEE1CA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN9ImsSocket20attachDispatchSourceEP16dispatch_queue_s_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  void (***v3)(_QWORD);
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (void (***)(_QWORD))a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        (**v3)(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEE1CB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9ImsSocketEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9ImsSocketEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN9ImsSocket20attachDispatchSourceEP16dispatch_queue_s_block_invoke_26(uint64_t a1)
{
  _DWORD *v1;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  std::__shared_weak_count *v15;

  v1 = *(_DWORD **)(a1 + 32);
  if (v1 && *v1 != -1)
  {
    v3 = *(std::__shared_weak_count **)(a1 + 56);
    if (v3)
    {
      v4 = std::__shared_weak_count::lock(v3);
      v15 = v4;
      if (v4)
      {
        v5 = v4;
        if (*(_QWORD *)(a1 + 48))
        {
          std::string::basic_string[abi:ne180100]<0>(v12, "net");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v6 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"ImsSocket ", 10);
          *(_BYTE *)(v6 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v6 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)": invalidating socket fd=", 25);
          *(_BYTE *)(v6 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v6 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v6 + 17) = 0;
          if (v11 < 0)
            operator delete(__p[0]);
          if (v13 < 0)
            operator delete(v12[0]);
        }
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Closing fd ", 11);
    *(_BYTE *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v11 < 0)
      operator delete(__p[0]);
    if (v13 < 0)
      operator delete(v12[0]);
    close(**(_DWORD **)(a1 + 32));
    **(_DWORD **)(a1 + 32) = -1;
    dispatch_release(*(dispatch_object_t *)(a1 + 64));
  }
}

void sub_1BEE1CDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrI16SocketDescriptorEE48c33_ZTSNSt3__18weak_ptrI9ImsSocketEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrI16SocketDescriptorEE48c33_ZTSNSt3__18weak_ptrI9ImsSocketEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ImsSocket::setDscpClass(uint64_t a1, int a2)
{
  int *v2;
  uint64_t v3;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  v2 = *(int **)(a1 + 40);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 68) != a2)
    {
      *(_DWORD *)(a1 + 68) = a2;
      ImsSocket::_setDscpOnSocket((ImsSocket *)a1, *v2);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::error(ims::_logger, (uint64_t)v6, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Unable to set DSCP on NULL socket descriptor object", 51);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (v5 < 0)
      operator delete(__p[0]);
    if (v7 < 0)
      operator delete(v6[0]);
  }
}

void sub_1BEE1CF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<SocketDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78B86D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SocketDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78B86D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

std::string *SipServerNonInviteTryingTransactionState::SipServerNonInviteTryingTransactionState(std::string *a1, std::string::size_type *a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string::size_type v10;
  std::__shared_weak_count *v11;

  v3 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  SipTransactionState::SipTransactionState(a1, &v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B8728;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E78B87B0;
  a1[9].__r_.__value_.__l.__size_ = 0x300000000;
  return a1;
}

void sub_1BEE1D0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipServerNonInviteTryingTransactionState *this, const SipResponse *a2, ImsResult *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = (_QWORD *)*((_QWORD *)this + 26);
      if (!v9)
      {
LABEL_18:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a3 + 1) + 24))(*((_QWORD *)a3 + 1), *((unsigned int *)a3 + 4))|| (v10 = *((_DWORD *)this + 56), v10 >= *((_DWORD *)this + 57)))
      {
        if ((*((_DWORD *)a2 + 22) - 100) < 0x64)
          v23 = 3;
        else
          v23 = 4;
        (*(void (**)(_QWORD *, uint64_t))(*v9 + 32))(v9, v23);
        goto LABEL_18;
      }
      *((_DWORD *)this + 56) = v10 + 1;
      v12 = v9[21];
      v11 = v9 + 21;
      v13 = (*(uint64_t (**)(_QWORD *))(v12 + 64))(v11);
      (*(void (**)(_QWORD *, uint64_t))(*v11 + 16))(v11, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Failed to send response, scheduling retry #", 43);
      *(_BYTE *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      v15 = *((_QWORD *)this + 24);
      v14 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
      if (v14)
      {
        p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
        do
          v17 = __ldxr(p_shared_weak_owners);
        while (__stxr(v17 + 1, p_shared_weak_owners));
        do
          v18 = __ldxr(p_shared_weak_owners);
        while (__stxr(v18 + 1, p_shared_weak_owners));
        do
          v19 = __ldxr(p_shared_weak_owners);
        while (__stxr(v19 + 1, p_shared_weak_owners));
      }
      v20 = operator new(0x20uLL);
      *v20 = &off_1E78B8990;
      v20[1] = this;
      v20[2] = v15;
      v20[3] = v14;
      v27 = v20;
      SipTimerContainer::startSipTimer((_QWORD *)this + 3, (uint64_t)&SipTimers::kTimerG, (uint64_t)v26, *((_DWORD *)this + 56));
      v21 = v27;
      if (v27 == v26)
      {
        v22 = 4;
        v21 = v26;
      }
      else
      {
        if (!v27)
          goto LABEL_25;
        v22 = 5;
      }
      (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_25:
      if (v14)
      {
        std::__shared_weak_count::__release_weak(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_18;
    }
  }
}

void sub_1BEE1D30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  std::__shared_weak_count *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v15)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  if (v16)
  {
    std::__shared_weak_count::__release_weak(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void SipServerNonInviteTryingTransactionState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (operator==(a2, (uint64_t)&SipTimers::kTimerG))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 216);
    if (v3)
    {
      v4 = std::__shared_weak_count::lock(v3);
      v28 = v4;
      if (v4)
      {
        v5 = v4;
        v6 = *(_QWORD **)(a1 + 208);
        v27 = v6;
        if (!v6)
          goto LABEL_17;
        v7 = v6 + 21;
        v8 = (*(uint64_t (**)(_QWORD *))(v6[21] + 64))(v6 + 21);
        (*(void (**)(_QWORD *, uint64_t))(v6[21] + 16))(v6 + 21, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Resending response", 18);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
        v26 = 0;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        (*(void (**)(__int128 *__return_ptr, _QWORD *))(*v6 + 128))(&v22, v6);
        if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v22 + 1) + 24))(*((_QWORD *)&v22 + 1), v23)|| (v9 = *(_DWORD *)(a1 + 224), v9 >= *(_DWORD *)(a1 + 228)))
        {
          (*(void (**)(_QWORD *, uint64_t))(*v6 + 32))(v6, 4);
LABEL_16:
          ImsResult::~ImsResult((ImsResult *)&v22);
LABEL_17:
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          return;
        }
        *(_DWORD *)(a1 + 224) = v9 + 1;
        v10 = (*(uint64_t (**)(_QWORD *))(*v7 + 64))(v6 + 21);
        (*(void (**)(_QWORD *, uint64_t))(*v7 + 16))(v7, v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Failed to send response, scheduling retry # ", 44);
        *(_BYTE *)(v10 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v10 + 17) = 0;
        v12 = *(_QWORD *)(a1 + 192);
        v11 = *(std::__shared_weak_count **)(a1 + 200);
        if (v11)
        {
          p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
          do
            v14 = __ldxr(p_shared_weak_owners);
          while (__stxr(v14 + 1, p_shared_weak_owners));
          do
            v15 = __ldxr(p_shared_weak_owners);
          while (__stxr(v15 + 1, p_shared_weak_owners));
          do
            v16 = __ldxr(p_shared_weak_owners);
          while (__stxr(v16 + 1, p_shared_weak_owners));
        }
        v30 = 0;
        v17 = operator new(0x20uLL);
        *v17 = &off_1E78B8A10;
        v17[1] = a1;
        v17[2] = v12;
        v17[3] = v11;
        v30 = v17;
        SipTimerContainer::startSipTimer((_QWORD *)(a1 + 24), (uint64_t)&SipTimers::kTimerG, (uint64_t)v29, *(_DWORD *)(a1 + 224));
        v18 = v30;
        if (v30 == v29)
        {
          v19 = 4;
          v18 = v29;
        }
        else
        {
          if (!v30)
            goto LABEL_24;
          v19 = 5;
        }
        (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_24:
        if (v11)
        {
          std::__shared_weak_count::__release_weak(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_16;
      }
    }
  }
}

void sub_1BEE1D63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  std::__shared_weak_count *v24;
  char *v26;
  uint64_t v27;

  v26 = a23;
  if (a23 == v23)
  {
    v27 = 4;
    v26 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  if (v24)
  {
    std::__shared_weak_count::__release_weak(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  ImsResult::~ImsResult((ImsResult *)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t SipServerNonInviteTryingTransactionState::enterState(uint64_t this)
{
  *(_DWORD *)(this + 224) = 0;
  return this;
}

std::string *SipServerNonInviteProceedingTransactionState::SipServerNonInviteProceedingTransactionState(std::string *a1, std::string::size_type *a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string::size_type v10;
  std::__shared_weak_count *v11;

  v3 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  SipTransactionState::SipTransactionState(a1, &v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B87E0;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E78B8860;
  return a1;
}

void sub_1BEE1D764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipServerNonInviteProceedingTransactionState::handleRequest(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[11];

  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v8[10] = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 208);
      v8[9] = v5;
      if (v5)
      {
        (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v5 + 128))(v8);
        ImsResult::~ImsResult((ImsResult *)v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BEE1D808(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

void SipServerNonInviteProceedingTransactionState::handleOutgoingResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if ((*(_DWORD *)(a2 + 88) - 100) > 0x63
    || (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 8) + 24))(*(_QWORD *)(a3 + 8), *(unsigned int *)(a3 + 16)))
  {
    v4 = *(std::__shared_weak_count **)(a1 + 216);
    if (v4)
    {
      v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)(a1 + 208);
        if (v7)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 4);
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

void sub_1BEE1D8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *SipServerNonInviteCompletedTransactionState::SipServerNonInviteCompletedTransactionState(std::string *a1, std::string::size_type *a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string::size_type v10;
  std::__shared_weak_count *v11;

  v3 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  SipTransactionState::SipTransactionState(a1, &v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B8890;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E78B8918;
  return a1;
}

void sub_1BEE1D97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipServerNonInviteCompletedTransactionState::enterState(SipServerNonInviteCompletedTransactionState *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  std::string __p;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  _BYTE *v38;
  _BYTE v39[24];
  _BYTE *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v36 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v2)
    goto LABEL_34;
  v36 = std::__shared_weak_count::lock(v2);
  if (!v36)
    goto LABEL_34;
  v3 = *((_QWORD *)this + 26);
  v35 = v3;
  if (!v3)
    goto LABEL_34;
  v5 = *((_QWORD *)this + 24);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = *(std::__shared_weak_count **)(v3 + 88);
  if (!v9)
  {
    v33 = 0;
    v34 = 0;
    goto LABEL_17;
  }
  v10 = *(_QWORD *)(v3 + 80);
  v11 = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  v33 = 0;
  v34 = std::__shared_weak_count::lock(v9);
  if (v34)
  {
    v33 = v10;
    std::__shared_weak_count::__release_weak(v9);
    if (v10 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10))
    {
      if (byte_1ED70CF80[23] < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)byte_1ED70CF80, *(std::string::size_type *)&byte_1ED70CF80[8]);
      else
        __p = *(std::string *)byte_1ED70CF80;
      if (v4)
      {
        v24 = (unint64_t *)&v4->__shared_weak_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v40 = 0;
      v26 = operator new(0x20uLL);
      *v26 = &off_1E78B8A90;
      v26[1] = this;
      v26[2] = v5;
      v26[3] = v4;
      v40 = v26;
      SipTimerContainer::startTimer((_QWORD *)this + 3, (uint64_t)&__p, (uint64_t)v39, 0, 0);
      v30 = v40;
      if (v40 == v39)
      {
        v31 = 4;
        v30 = v39;
      }
      else
      {
        if (!v40)
          goto LABEL_49;
        v31 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v30 + 8 * v31))(v30, v27, v28, v29);
LABEL_49:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_27;
    }
LABEL_17:
    if (!v4)
      goto LABEL_22;
    goto LABEL_20;
  }
  std::__shared_weak_count::__release_weak(v9);
  if (!v4)
    goto LABEL_22;
LABEL_20:
  v13 = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
LABEL_22:
  v15 = operator new(0x20uLL);
  *v15 = &off_1E78B8A90;
  v15[1] = this;
  v15[2] = v5;
  v15[3] = v4;
  v38 = v15;
  SipTimerContainer::startSipTimer((_QWORD *)this + 3, (uint64_t)&SipTimers::kTimerJ, (uint64_t)v37, 0);
  v16 = v38;
  if (v38 == v37)
  {
    v17 = 4;
    v16 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_27;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_27:
  v18 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_34:
  v21 = v36;
  if (v36)
  {
    v22 = (unint64_t *)&v36->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BEE1DC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::__shared_weak_count *v26;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void SipServerNonInviteCompletedTransactionState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (operator==(a2, (uint64_t)&SipTimers::kTimerJ))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 216);
    if (v3)
    {
      v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        v5 = v4;
        v6 = *(_QWORD *)(a1 + 208);
        if (v6)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, 7);
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void sub_1BEE1DE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipServerNonInviteCompletedTransactionState::handleRequest(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[11];

  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v8[10] = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 208);
      v8[9] = v5;
      if (v5)
      {
        (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v5 + 128))(v8);
        ImsResult::~ImsResult((ImsResult *)v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BEE1DEB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

void SipServerNonInviteTryingTransactionState::~SipServerNonInviteTryingTransactionState(SipServerNonInviteTryingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipServerNonInviteTryingTransactionState::id(SipServerNonInviteTryingTransactionState *this)
{
  return 1;
}

uint64_t SipTransactionState::handleResponse()
{
  return 1;
}

uint64_t SipServerNonInviteTryingTransactionState::allowOutgoingResponse(SipServerNonInviteTryingTransactionState *this)
{
  return 1;
}

void `non-virtual thunk to'SipServerNonInviteTryingTransactionState::~SipServerNonInviteTryingTransactionState(SipServerNonInviteTryingTransactionState *this)
{
  SipTransactionState::~SipTransactionState((SipServerNonInviteTryingTransactionState *)((char *)this - 8));
}

{
  SipTransactionState::~SipTransactionState((SipServerNonInviteTryingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipServerNonInviteProceedingTransactionState::~SipServerNonInviteProceedingTransactionState(SipServerNonInviteProceedingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipServerNonInviteProceedingTransactionState::id(SipServerNonInviteProceedingTransactionState *this)
{
  return 3;
}

uint64_t SipServerNonInviteProceedingTransactionState::allowOutgoingResponse(SipServerNonInviteProceedingTransactionState *this)
{
  return 1;
}

void `non-virtual thunk to'SipServerNonInviteProceedingTransactionState::~SipServerNonInviteProceedingTransactionState(SipServerNonInviteProceedingTransactionState *this)
{
  SipTransactionState::~SipTransactionState((SipServerNonInviteProceedingTransactionState *)((char *)this - 8));
}

{
  SipTransactionState::~SipTransactionState((SipServerNonInviteProceedingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipServerNonInviteCompletedTransactionState::~SipServerNonInviteCompletedTransactionState(SipServerNonInviteCompletedTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipServerNonInviteCompletedTransactionState::id(SipServerNonInviteCompletedTransactionState *this)
{
  return 4;
}

uint64_t SipTransactionState::allowOutgoingResponse(SipTransactionState *this)
{
  return 0;
}

void `non-virtual thunk to'SipServerNonInviteCompletedTransactionState::~SipServerNonInviteCompletedTransactionState(SipServerNonInviteCompletedTransactionState *this)
{
  SipTransactionState::~SipTransactionState((SipServerNonInviteCompletedTransactionState *)((char *)this - 8));
}

{
  SipTransactionState::~SipTransactionState((SipServerNonInviteCompletedTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipTransactionState::~SipTransactionState(SipTransactionState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78EDCB0;
  *((_QWORD *)this + 1) = &unk_1E78EDD30;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipState::~SipState(this);
}

{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C3B87100);
}

void SipState::~SipState(SipState *this)
{
  *(_QWORD *)this = &off_1E78C94C8;
  *((_QWORD *)this + 1) = &unk_1E78C9520;
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  SipTimerContainer::~SipTimerContainer((SipState *)((char *)this + 24));
}

{
  SipState::~SipState(this);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78B8990;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78B8990;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78B8990;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78B8990;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEE1E284(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleOutgoingResponse(SipResponse const&,ImsResult &)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78B8A10;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78B8A10;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78B8A10;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78B8A10;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEE1E4EC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

_QWORD *std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78B8A90;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78B8A90;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78B8A90;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78B8A90;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEE1E754(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void sub_1BEE1EA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BEE1EB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)E911LocationSelector;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BEE1F1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  void *v53;
  uint64_t v54;

  if (a39 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  if (a53 < 0)
    operator delete(a48);
  if (*(char *)(v54 - 209) < 0)
    operator delete(*(void **)(v54 - 232));
  ims::LocationInfo::~LocationInfo((void **)(v54 - 208));

  _Unwind_Resume(a1);
}

void ims::LocationInfo::~LocationInfo(void **this)
{
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
}

uint64_t __copy_helper_block_ea8_40c35_ZTSNSt3__110shared_ptrI8SipStackEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c35_ZTSNSt3__110shared_ptrI8SipStackEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t ImsLocationSelector::ImsLocationSelector(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  int v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;

  *(_QWORD *)(a1 + 8) = &unk_1E78B8B98;
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)a1 = &off_1E78B8B48;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a2;
  *(_QWORD *)(a1 + 80) = dispatch_queue_create("com.apple.ipTelephony.location", 0);
  std::string::basic_string[abi:ne180100]<0>(v22, "ims.location");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)v22, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"launching emergency location selector", 37);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  v8 = *(NSObject **)(a1 + 80);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3321888768;
  v17[2] = ___ZN19ImsLocationSelectorC1EP27ImsLocationSelectorDelegateNSt3__110shared_ptrI8SipStackEE18LocationUpdateMode_block_invoke;
  v17[3] = &__block_descriptor_60_ea8_40c35_ZTSNSt3__110shared_ptrI8SipStackEE_e5_v8__0l;
  v10 = *a3;
  v9 = (std::__shared_weak_count *)a3[1];
  v17[4] = a1;
  v17[5] = v10;
  v18 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v19 = a4;
  dispatch_async(v8, v17);
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

void sub_1BEE1F57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  SipLockable *v22;
  uint64_t v23;

  if (*(char *)(v23 - 49) < 0)
    operator delete(*(void **)(v23 - 72));
  SipLockable::~SipLockable(v22, (uint64_t *)off_1E78B8BD8);
  _Unwind_Resume(a1);
}

void ___ZN19ImsLocationSelectorC1EP27ImsLocationSelectorDelegateNSt3__110shared_ptrI8SipStackEE18LocationUpdateMode_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void **v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  E911LocationSelector *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void **)operator new();
  v4 = v3;
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(unsigned int *)(a1 + 56);
  v10 = *(_QWORD *)(v2 + 80);
  *v3 = 0;
  if (v6)
  {
    v11 = [E911LocationSelector alloc];
    v21 = v6;
    v22 = v5;
    if (v5)
    {
      v12 = (unint64_t *)&v5->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = -[E911LocationSelector initWithDelegate:sipStack:updateMode:dispatchQueue:](v11, "initWithDelegate:sipStack:updateMode:dispatchQueue:", v2, &v21, v9, v10, v6, v5);
    v15 = *v4;
    *v4 = (void *)v14;

    v16 = v22;
    if (v22)
    {
      v17 = (unint64_t *)&v22->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  *(_QWORD *)(v2 + 88) = v4;
  if (v5)
  {
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEE1F718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  id *v11;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1C3B87100](v11, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void ImsLocationSelector::~ImsLocationSelector(ImsLocationSelector *this)
{
  SipLockable *v2;
  NSObject *v3;
  _QWORD block[5];

  *(_QWORD *)this = &off_1E78B8B48;
  *((_QWORD *)this + 1) = &unk_1E78B8B98;
  v2 = (ImsLocationSelector *)((char *)this + 8);
  v3 = *((_QWORD *)this + 10);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN19ImsLocationSelectorD2Ev_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v3, block);
  dispatch_release(*((dispatch_object_t *)this + 10));
  SipLockable::~SipLockable(v2, (uint64_t *)off_1E78B8BD8);
}

{
  ImsLocationSelector::~ImsLocationSelector(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t ___ZN19ImsLocationSelectorD2Ev_block_invoke(uint64_t result)
{
  uint64_t v1;
  void **v2;
  void *v3;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(void ***)(v1 + 88);
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      *v2 = 0;

      v3 = *v2;
    }

    result = MEMORY[0x1C3B87100](v2, 0x80C40B8603338);
    *(_QWORD *)(v1 + 88) = 0;
  }
  return result;
}

void `non-virtual thunk to'ImsLocationSelector::~ImsLocationSelector(ImsLocationSelector *this)
{
  ImsLocationSelector::~ImsLocationSelector((ImsLocationSelector *)((char *)this - 8));
}

{
  ImsLocationSelector::~ImsLocationSelector((ImsLocationSelector *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void ImsLocationSelector::handleLocationUpdate(uint64_t a1, const ims::LocationInfo *a2)
{
  NSObject *v4;
  _QWORD block[5];
  uint64_t v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;

  v4 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    v4 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v4;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN19ImsLocationSelector20handleLocationUpdateEN3ims12LocationInfoE_block_invoke;
  block[3] = &__block_descriptor_184_ea8_40c24_ZTSN3ims12LocationInfoE_e5_v8__0l;
  block[4] = a1;
  ims::LocationInfo::LocationInfo((ims::LocationInfo *)&v6, a2);
  dispatch_async(v4, block);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7);
}

void ___ZN19ImsLocationSelector20handleLocationUpdateEN3ims12LocationInfoE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _BYTE v2[48];
  void *v3;
  char v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  void *__p;
  char v10;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96);
  if (v1)
  {
    ims::LocationInfo::LocationInfo((ims::LocationInfo *)v2, (const ims::LocationInfo *)(a1 + 40));
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v2);
    if (v10 < 0)
      operator delete(__p);
    if (v8 < 0)
      operator delete(v7);
    if (v6 < 0)
      operator delete(v5);
    if (v4 < 0)
      operator delete(v3);
  }
}

void sub_1BEE1FA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ims::LocationInfo::~LocationInfo(&a9);
  _Unwind_Resume(a1);
}

ims::LocationInfo *__copy_helper_block_ea8_40c24_ZTSN3ims12LocationInfoE(uint64_t a1, uint64_t a2)
{
  return ims::LocationInfo::LocationInfo((ims::LocationInfo *)(a1 + 40), (const ims::LocationInfo *)(a2 + 40));
}

void __destroy_helper_block_ea8_40c24_ZTSN3ims12LocationInfoE(uint64_t a1)
{
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
}

void ImsLocationSelector::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "ImsLocationSelector");
}

void `non-virtual thunk to'ImsLocationSelector::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "ImsLocationSelector");
}

ims::LocationInfo *ims::LocationInfo::LocationInfo(ims::LocationInfo *this, const ims::LocationInfo *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v5;
  *(_OWORD *)this = v4;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)this + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)((char *)this + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 6);
    *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)this + 6) = v8;
  }
  v9 = (std::string *)((char *)this + 120);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 120);
    *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_1BEE1FBB0(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[119] < 0)
    operator delete(*v4);
  if (v1[95] < 0)
    operator delete(*v3);
  if (v1[71] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t ims::detail::to_string_impl<double,std::integral_constant<BOOL,false>>::operator()(_QWORD *a1)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v5 = 0;
  v3 = 0u;
  v4 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v3, 1);
  std::ostream::operator<<();
  BYTE1(v4) = 0;
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v4 + 1) + 8, a1);
  *(_QWORD *)&v3 = &off_1E78D7A10;
  if ((_BYTE)v4)
  {
    result = *((_QWORD *)&v3 + 1);
    if (*((_QWORD *)&v3 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 8))(*((_QWORD *)&v3 + 1));
  }
  return result;
}

void sub_1BEE1FC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a10)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void HttpResponse::~HttpResponse(void **this)
{
  *this = off_1E78D2950;
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  HttpMessage::~HttpMessage(this);
}

{
  *this = off_1E78D2950;
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  HttpMessage::~HttpMessage(this);
  JUMPOUT(0x1C3B87100);
}

void HttpRequest::~HttpRequest(void **this)
{
  *this = off_1E78BC5F8;
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  HttpMessage::~HttpMessage(this);
}

{
  *this = off_1E78BC5F8;
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  HttpMessage::~HttpMessage(this);
  JUMPOUT(0x1C3B87100);
}

void HttpMessage::~HttpMessage(void **this)
{
  *this = off_1E78D99F8;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 1), this[2]);
}

ImsPrefs *SDPLazuliSettingsBuilder::SDPLazuliSettingsBuilder(ImsPrefs *a1, _QWORD *a2, ImsPrefs *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **UseRemoteMediaOrderKey;
  void *v9;
  char v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[2];

  v5 = (std::__shared_weak_count *)a2[1];
  v14[0] = *a2;
  v14[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  UseRemoteMediaOrderKey = (void **)ImsPrefs::getUseRemoteMediaOrderKey(a1);
  v9 = ImsPrefs::prefWithKey(a3, UseRemoteMediaOrderKey);
  if (v9)
    v10 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 40))(v9);
  else
    v10 = *((_BYTE *)UseRemoteMediaOrderKey + 57) != 0;
  SDPSettingsBuilder::SDPSettingsBuilder((uint64_t)a1, v14, v10);
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)a1 = &off_1E78B8D40;
  return a1;
}

void sub_1BEE1FE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SDPLazuliSettingsBuilder::~SDPLazuliSettingsBuilder(SDPLazuliSettingsBuilder *this)
{
  *(_QWORD *)this = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1C3B87100);
}

void SDPLazuliSettingsBuilder::createLazuliSettingsForOffer(uint64_t a1@<X0>, uint64_t *a2@<X1>, SDPMediaLazuliSettings *a3@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14[2];
  uint64_t v15;
  std::__shared_weak_count *v16;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 8);
  v16 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = (std::__shared_weak_count *)a2[1];
  v14[0] = *a2;
  v14[1] = (uint64_t)v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  SDPLazuliSettingsBuilder::createLazuliSettings(&v15, v14, a3);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BEE1FFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SDPLazuliSettingsBuilder::createLazuliSettings(uint64_t *a1@<X1>, uint64_t *a2@<X2>, SDPMediaLazuliSettings *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE v21[56];
  _BYTE v22[56];
  std::string v23;
  std::string v24;
  void *__p;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string *v38;

  v4 = *a2;
  if (*a2)
  {
    v5 = *a1;
    if (*a1)
    {
      v7 = *(_QWORD *)(v4 + 416);
      v6 = *(_QWORD *)(v4 + 424);
      while (v7 != v6)
      {
        if (*(_DWORD *)(v7 + 12) == 6)
          goto LABEL_9;
        v7 += 200;
      }
      v7 = 0;
LABEL_9:
      v10 = *(_QWORD *)(v5 + 416);
      v9 = *(_QWORD *)(v5 + 424);
      while (v10 != v9)
      {
        if (*(_DWORD *)(v10 + 12) == 6)
          goto LABEL_14;
        v10 += 200;
      }
      v10 = 0;
LABEL_14:
      if (v7)
      {
        if (v10)
        {
          v11 = *(_DWORD *)(v10 + 32);
          if (v11 == *(_DWORD *)(v7 + 32))
          {
            if (v11 == 8)
            {
              SDPMedia::path((SDPMedia *)v7, (uint64_t)&__p);
              v12 = v26;
              if (v27 != v26)
              {
                v13 = (v27 - v26) >> 3;
                if (v13 <= 1)
                  v13 = 1;
                while (*(_BYTE *)(*(_QWORD *)v12 + 152))
                {
                  v12 += 8;
                  if (!--v13)
                    goto LABEL_23;
                }
                LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)&__p);
                std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.lazulisettingbuilder");
                std::string::basic_string[abi:ne180100]<0>(&v37, "");
                v8 = ims::error((uint64_t)&__p, (uint64_t)&v37);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"MSRP hops are not allowed in MSRP TLS", 37);
                *(_BYTE *)(v8 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                goto LABEL_33;
              }
LABEL_23:
              LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)&__p);
            }
            memset(&v37, 0, sizeof(v37));
            SDPMedia::acceptTypes((SDPMedia *)v7, &v37);
            memset(&v36, 0, sizeof(v36));
            SDPMedia::acceptTypes((SDPMedia *)v10, &v36);
            if (v37.__r_.__value_.__r.__words[0] == v37.__r_.__value_.__l.__size_)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.lazulisettingbuilder");
              std::string::basic_string[abi:ne180100]<0>(&v35, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v16 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v35);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"Remote Accept-Types is empty", 28);
              *(_BYTE *)(v16 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            else
            {
              if (v36.__r_.__value_.__r.__words[0] != v36.__r_.__value_.__l.__size_)
              {
                memset(&v35, 0, sizeof(v35));
                SDPMedia::acceptWrappedTypes((SDPMedia *)v7, &v35);
                memset(&v34, 0, sizeof(v34));
                SDPMedia::acceptWrappedTypes((SDPMedia *)v10, &v34);
                if (v35.__r_.__value_.__r.__words[0] == v35.__r_.__value_.__l.__size_)
                {
                  std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.lazulisettingbuilder");
                  std::string::basic_string[abi:ne180100]<0>(&v31, "");
                  v18 = ims::error((uint64_t)&__p, (uint64_t)&v31);
                  v19 = (_BYTE *)ImsOutStream::operator<<(v18, "Remote Accept-Wrapped-Types is empty");
                  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                }
                else
                {
                  if (v34.__r_.__value_.__r.__words[0] != v34.__r_.__value_.__l.__size_)
                  {
                    v31 = 0;
                    v32 = 0;
                    v33 = 0;
                    std::ranges::__sort::__fn::operator()[abi:ne180100]<std::vector<std::string> &,std::ranges::less,std::identity>((uint64_t)v37.__r_.__value_.__l.__data_, (void **)v37.__r_.__value_.__l.__size_);
                    std::ranges::__sort::__fn::operator()[abi:ne180100]<std::vector<std::string> &,std::ranges::less,std::identity>((uint64_t)v36.__r_.__value_.__l.__data_, (void **)v36.__r_.__value_.__l.__size_);
                    std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::back_insert_iterator<std::vector<std::string>>>((uint64_t)&__p, (void **)v36.__r_.__value_.__l.__data_, (void **)v36.__r_.__value_.__l.__size_, (void **)v37.__r_.__value_.__l.__data_, (void **)v37.__r_.__value_.__l.__size_, (uint64_t *)&v31);
                    v28 = 0;
                    v29 = 0;
                    v30 = 0;
                    std::ranges::__sort::__fn::operator()[abi:ne180100]<std::vector<std::string> &,std::ranges::less,std::identity>((uint64_t)v35.__r_.__value_.__l.__data_, (void **)v35.__r_.__value_.__l.__size_);
                    std::ranges::__sort::__fn::operator()[abi:ne180100]<std::vector<std::string> &,std::ranges::less,std::identity>((uint64_t)v34.__r_.__value_.__l.__data_, (void **)v34.__r_.__value_.__l.__size_);
                    std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::back_insert_iterator<std::vector<std::string>>>((uint64_t)&__p, (void **)v34.__r_.__value_.__l.__data_, (void **)v34.__r_.__value_.__l.__size_, (void **)v35.__r_.__value_.__l.__data_, (void **)v35.__r_.__value_.__l.__size_, (uint64_t *)&v28);
                    memset(&v24, 0, sizeof(v24));
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, v31, v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3));
                    memset(&v23, 0, sizeof(v23));
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, v28, v29, 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
                    v14 = *(_WORD *)(v10 + 16);
                    v15 = *(_WORD *)(v7 + 16);
                    SDPMedia::path((SDPMedia *)v10, (uint64_t)v22);
                    SDPMedia::path((SDPMedia *)v7, (uint64_t)v21);
                    SDPMediaLazuliSettings::SDPMediaLazuliSettings((uint64_t)&__p, (__int128 **)&v24, (__int128 **)&v23, v14, v15, (const LazuliRouteSet *)v22, (const LazuliRouteSet *)v21);
                    SDPMediaLazuliSettings::SDPMediaLazuliSettings(a3, (__int128 **)&__p);
                    *((_BYTE *)a3 + 360) = 1;
                    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)&__p);
                    LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)v21);
                    LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)v22);
                    v38 = &v23;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
                    v38 = &v24;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
                    __p = &v28;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                    __p = &v31;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_53:
                    __p = &v34;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                    __p = &v35;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_54:
                    __p = &v36;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                    __p = &v37;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                    return;
                  }
                  std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.lazulisettingbuilder");
                  std::string::basic_string[abi:ne180100]<0>(&v31, "");
                  v20 = ims::error((uint64_t)&__p, (uint64_t)&v31);
                  v19 = (_BYTE *)ImsOutStream::operator<<(v20, "Local Accept-Wrapped-Types is empty");
                  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                }
                v19[17] = 0;
                if (SHIBYTE(v33) < 0)
                  operator delete(v31);
                if (SHIBYTE(v27) < 0)
                  operator delete(__p);
                *(_BYTE *)a3 = 0;
                *((_BYTE *)a3 + 360) = 0;
                goto LABEL_53;
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.lazulisettingbuilder");
              std::string::basic_string[abi:ne180100]<0>(&v35, "");
              v17 = ims::error((uint64_t)&__p, (uint64_t)&v35);
              v16 = ImsOutStream::operator<<(v17, "Local Accept-Types is empty");
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            *(_BYTE *)(v16 + 17) = 0;
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v35.__r_.__value_.__l.__data_);
            if (SHIBYTE(v27) < 0)
              operator delete(__p);
            *(_BYTE *)a3 = 0;
            *((_BYTE *)a3 + 360) = 0;
            goto LABEL_54;
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.lazulisettingbuilder");
          std::string::basic_string[abi:ne180100]<0>(&v37, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v8 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v37);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Media protocol types do not match", 33);
          *(_BYTE *)(v8 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.lazulisettingbuilder");
          std::string::basic_string[abi:ne180100]<0>(&v37, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v8 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v37);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Local media is null", 19);
          *(_BYTE *)(v8 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.lazulisettingbuilder");
        std::string::basic_string[abi:ne180100]<0>(&v37, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v8 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Remote media is null", 20);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.lazulisettingbuilder");
      std::string::basic_string[abi:ne180100]<0>(&v37, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Local SDP is null", 17);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.lazulisettingbuilder");
    std::string::basic_string[abi:ne180100]<0>(&v37, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Remote SDP is null", 18);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
LABEL_33:
  *(_BYTE *)(v8 + 17) = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  *(_BYTE *)a3 = 0;
  *((_BYTE *)a3 + 360) = 0;
}

void sub_1BEE207DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a34 < 0)
    operator delete(__p);
  *(_QWORD *)(v34 - 176) = v34 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 176));
  *(_QWORD *)(v34 - 152) = v34 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 152));
  *(_QWORD *)(v34 - 128) = v34 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 128));
  *(_QWORD *)(v34 - 104) = v34 - 80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 104));
  _Unwind_Resume(a1);
}

void SDPLazuliSettingsBuilder::createLazuliSettingsForOfferAnswer(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, SDPMediaLazuliSettings *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30[2];
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33[2];
  uint64_t v34;
  std::__shared_weak_count *v35;
  _OWORD v36[22];
  __int128 v37;

  v37 = 0u;
  memset(v36, 0, sizeof(v36));
  v7 = a2[1];
  v34 = *a2;
  v35 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (std::__shared_weak_count *)a3[1];
  v33[0] = *a3;
  v33[1] = (uint64_t)v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  SDPLazuliSettingsBuilder::createLazuliSettings(&v34, v33, (SDPMediaLazuliSettings *)v36);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = v35;
  if (v35)
  {
    v16 = (unint64_t *)&v35->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (BYTE8(v37))
  {
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 360) = 0;
    SDPMediaLazuliSettings::SDPMediaLazuliSettings(a4, (__int128 **)v36);
    *((_BYTE *)a4 + 360) = 1;
  }
  else
  {
    v18 = *(std::__shared_weak_count **)(a1 + 16);
    v31 = *(_QWORD *)(a1 + 8);
    v32 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = *a3;
    v22 = (std::__shared_weak_count *)a3[1];
    v30[0] = v21;
    v30[1] = (uint64_t)v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    SDPLazuliSettingsBuilder::createLazuliSettings(&v31, v30, a4);
    if (v22)
    {
      v25 = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  if (BYTE8(v37))
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)v36);
}

void sub_1BEE20BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a62)
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)&a17);
  _Unwind_Resume(a1);
}

void std::ranges::__sort::__fn::operator()[abi:ne180100]<std::vector<std::string> &,std::ranges::less,std::identity>(uint64_t a1, void **a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3));
  if (a2 == (void **)a1)
    v3 = 0;
  else
    v3 = v2;
  std::__introsort<std::_RangeAlgPolicy,std::ranges::less &,std::string *,false>(a1, a2, v3, 1);
}

void SDPSettingsBuilder::~SDPSettingsBuilder(SDPSettingsBuilder *this)
{
  *(_QWORD *)this = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1C3B87100);
}

void std::__introsort<std::_RangeAlgPolicy,std::ranges::less &,std::string *,false>(uint64_t a1, void **a2, uint64_t a3, char a4)
{
  void **v8;
  void **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  void **v22;
  void **v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  BOOL v30;
  BOOL v31;
  __int128 v32;
  void **v33;
  char v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void **v45;
  BOOL v47;
  uint64_t v48;
  void **v49;
  void **v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  int64_t v70;
  void **v71;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v92;
  void **v93;
  __int128 v94;
  uint64_t v95;
  void **v96;
  char v97;
  void **v98;
  __int128 v99;
  void *v100;
  void **v101;
  char v102;
  void **v103;
  __int128 v104;
  void *v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v8 = a2 - 3;
  v101 = a2 - 6;
  v103 = a2;
  v9 = a2 - 9;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (uint64_t)a2 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (void **)a1) & 0x80) != 0)
        {
          v42 = *(_OWORD *)a1;
          v105 = *(void **)(a1 + 16);
          v104 = v42;
          v43 = *(_OWORD *)v8;
          *(_QWORD *)(a1 + 16) = v8[2];
          *(_OWORD *)a1 = v43;
          v44 = v104;
          v8[2] = v105;
          *(_OWORD *)v8 = v44;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)a1, (void **)(a1 + 24), v8);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(a1, (void **)(a1 + 24), (void **)(a1 + 48), v8);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), v8);
        return;
      default:
        if (v11 <= 575)
        {
          v45 = (void **)(a1 + 24);
          v47 = (void **)a1 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = (void **)a1;
              do
              {
                v50 = v49;
                v49 = v45;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v45, v50) & 0x80) != 0)
                {
                  v51 = *(_OWORD *)v49;
                  v105 = v49[2];
                  v104 = v51;
                  v49[1] = 0;
                  v49[2] = 0;
                  *v49 = 0;
                  v52 = v48;
                  do
                  {
                    v53 = a1 + v52;
                    v54 = (void **)(a1 + v52 + 24);
                    if (*(char *)(a1 + v52 + 47) < 0)
                      operator delete(*v54);
                    *(_OWORD *)v54 = *(_OWORD *)v53;
                    *(_QWORD *)(a1 + v52 + 40) = *(_QWORD *)(v53 + 16);
                    *(_BYTE *)(v53 + 23) = 0;
                    *(_BYTE *)v53 = 0;
                    if (!v52)
                    {
                      v56 = a1;
                      goto LABEL_86;
                    }
                    v52 -= 24;
                  }
                  while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v104, (void **)(v52 + a1)) & 0x80) != 0);
                  v55 = *(char *)(a1 + v52 + 47);
                  v56 = a1 + v52 + 24;
                  if (v55 < 0)
                    operator delete(*(void **)v56);
LABEL_86:
                  a2 = v103;
                  v57 = v104;
                  *(_QWORD *)(v56 + 16) = v105;
                  *(_OWORD *)v56 = v57;
                }
                v45 = v49 + 3;
                v48 += 24;
              }
              while (v49 + 3 != a2);
            }
          }
          else if (!v47)
          {
            v92 = a1 - 24;
            do
            {
              v93 = (void **)a1;
              a1 = (uint64_t)v45;
              if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v45, v93) & 0x80) != 0)
              {
                v94 = *(_OWORD *)a1;
                v105 = *(void **)(a1 + 16);
                v104 = v94;
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                v95 = v92;
                do
                {
                  v96 = (void **)(v95 + 48);
                  if (*(char *)(v95 + 71) < 0)
                    operator delete(*v96);
                  *(_OWORD *)v96 = *(_OWORD *)(v95 + 24);
                  *(_QWORD *)(v95 + 64) = *(_QWORD *)(v95 + 40);
                  *(_BYTE *)(v95 + 47) = 0;
                  *(_BYTE *)(v95 + 24) = 0;
                  v97 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v104, (void **)v95);
                  v95 -= 24;
                }
                while (v97 < 0);
                v98 = (void **)(v95 + 48);
                if (*(char *)(v95 + 71) < 0)
                  operator delete(*v98);
                v99 = v104;
                *(_QWORD *)(v95 + 64) = v105;
                *(_OWORD *)v98 = v99;
              }
              v45 = (void **)(a1 + 24);
              v92 += 24;
            }
            while ((void **)(a1 + 24) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((void **)a1 != a2)
          {
            v58 = (unint64_t)(v12 - 2) >> 1;
            v59 = v58;
            do
            {
              v60 = v59;
              if (v58 >= v59)
              {
                v61 = (2 * v59) | 1;
                v62 = a1 + 24 * v61;
                if (2 * v59 + 2 < v12
                  && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24 * v61), (void **)(v62 + 24)) & 0x80u) != 0)
                {
                  v62 += 24;
                  v61 = 2 * v60 + 2;
                }
                v63 = a1 + 24 * v60;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v62, (void **)v63) & 0x80) == 0)
                {
                  v64 = *(_OWORD *)v63;
                  v105 = *(void **)(v63 + 16);
                  v104 = v64;
                  *(_QWORD *)(v63 + 8) = 0;
                  *(_QWORD *)(v63 + 16) = 0;
                  *(_QWORD *)v63 = 0;
                  while (1)
                  {
                    v65 = v62;
                    if (*(char *)(v63 + 23) < 0)
                      operator delete(*(void **)v63);
                    v66 = *(_OWORD *)v62;
                    *(_QWORD *)(v63 + 16) = *(_QWORD *)(v62 + 16);
                    *(_OWORD *)v63 = v66;
                    *(_BYTE *)(v62 + 23) = 0;
                    *(_BYTE *)v62 = 0;
                    if (v58 < v61)
                      break;
                    v67 = (2 * v61) | 1;
                    v62 = a1 + 24 * v67;
                    v68 = 2 * v61 + 2;
                    if (v68 < v12
                      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24 * v67), (void **)(v62 + 24)) & 0x80u) != 0)
                    {
                      v62 += 24;
                      v67 = v68;
                    }
                    v63 = v65;
                    v61 = v67;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v62, (void **)&v104) & 0x80) != 0)
                    {
                      if (*(char *)(v65 + 23) < 0)
                        operator delete(*(void **)v65);
                      break;
                    }
                  }
                  v69 = v104;
                  *(_QWORD *)(v65 + 16) = v105;
                  *(_OWORD *)v65 = v69;
                }
              }
              v59 = v60 - 1;
            }
            while (v60);
            v70 = v11 / 0x18uLL;
            v71 = v103;
            do
            {
              v72 = 0;
              v73 = v71;
              v100 = *(void **)a1;
              *(_QWORD *)&v106 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)((char *)&v106 + 7) = *(_QWORD *)(a1 + 15);
              v102 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v74 = v70 - 2;
              if (v70 < 2)
                v74 = v70 - 1;
              v75 = v74 >> 1;
              v76 = a1;
              do
              {
                v77 = v76 + 24 * v72 + 24;
                v78 = 2 * v72;
                v72 = (2 * v72) | 1;
                v79 = v78 + 2;
                if (v78 + 2 < v70
                  && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v77, (void **)(v77 + 24)) & 0x80u) != 0)
                {
                  v77 += 24;
                  v72 = v79;
                }
                if (*(char *)(v76 + 23) < 0)
                  operator delete(*(void **)v76);
                v80 = *(_OWORD *)v77;
                *(_QWORD *)(v76 + 16) = *(_QWORD *)(v77 + 16);
                *(_OWORD *)v76 = v80;
                *(_BYTE *)(v77 + 23) = 0;
                *(_BYTE *)v77 = 0;
                v76 = v77;
              }
              while (v72 <= v75);
              v71 = v73 - 3;
              if ((void **)v77 == v73 - 3)
              {
                *(_QWORD *)v77 = v100;
                v90 = *(_QWORD *)((char *)&v106 + 7);
                *(_QWORD *)(v77 + 8) = v106;
                *(_QWORD *)(v77 + 15) = v90;
                *(_BYTE *)(v77 + 23) = v102;
              }
              else
              {
                v81 = *(_OWORD *)v71;
                *(_QWORD *)(v77 + 16) = *(v73 - 1);
                *(_OWORD *)v77 = v81;
                *(v73 - 3) = v100;
                v82 = (void *)v106;
                *(void **)((char *)v73 - 9) = *(void **)((char *)&v106 + 7);
                *(v73 - 2) = v82;
                *((_BYTE *)v73 - 1) = v102;
                v83 = v77 - a1 + 24;
                if (v83 >= 25)
                {
                  v84 = (v83 / 0x18uLL - 2) >> 1;
                  v85 = a1 + 24 * v84;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v85, (void **)v77) & 0x80) != 0)
                  {
                    v86 = *(_OWORD *)v77;
                    v105 = *(void **)(v77 + 16);
                    v104 = v86;
                    *(_QWORD *)(v77 + 8) = 0;
                    *(_QWORD *)(v77 + 16) = 0;
                    *(_QWORD *)v77 = 0;
                    while (1)
                    {
                      v87 = v85;
                      if (*(char *)(v77 + 23) < 0)
                        operator delete(*(void **)v77);
                      v88 = *(_OWORD *)v85;
                      *(_QWORD *)(v77 + 16) = *(_QWORD *)(v85 + 16);
                      *(_OWORD *)v77 = v88;
                      *(_BYTE *)(v85 + 23) = 0;
                      *(_BYTE *)v85 = 0;
                      if (!v84)
                        break;
                      v84 = (v84 - 1) >> 1;
                      v85 = a1 + 24 * v84;
                      v77 = v87;
                      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v85, (void **)&v104) & 0x80) == 0)
                      {
                        if (*(char *)(v87 + 23) < 0)
                          operator delete(*(void **)v87);
                        break;
                      }
                    }
                    v89 = v104;
                    *(_QWORD *)(v87 + 16) = v105;
                    *(_OWORD *)v87 = v89;
                  }
                }
              }
            }
            while (v70-- > 2);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = a1 + 24 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)v14, (void **)a1, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)a1, (void **)v14, v8);
          v15 = 3 * v13;
          std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)(a1 + 24), (void **)(a1 + 8 * v15 - 24), v101);
          std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)(a1 + 48), (void **)(a1 + 24 + 8 * v15), v9);
          std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)(a1 + 8 * v15 - 24), (void **)v14, (_QWORD *)(a1 + 24 + 8 * v15));
          v16 = *(_OWORD *)a1;
          v105 = *(void **)(a1 + 16);
          v104 = v16;
          v17 = *(_QWORD *)(v14 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_QWORD *)(a1 + 16) = v17;
          v18 = v104;
          *(_QWORD *)(v14 + 16) = v105;
          *(_OWORD *)v14 = v18;
        }
        --a3;
        if ((a4 & 1) == 0
          && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 - 24), (void **)a1) & 0x80) == 0)
        {
          v32 = *(_OWORD *)a1;
          v107 = *(_QWORD *)(a1 + 16);
          v106 = v32;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v106, v8) & 0x80) != 0)
          {
            v10 = a1;
            do
              v10 += 24;
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v106, (void **)v10) & 0x80) == 0);
          }
          else
          {
            v33 = (void **)(a1 + 24);
            do
            {
              v10 = (unint64_t)v33;
              if (v33 >= a2)
                break;
              v34 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v106, v33);
              v33 = (void **)(v10 + 24);
            }
            while ((v34 & 0x80) == 0);
          }
          v35 = (unint64_t)a2;
          if (v10 < (unint64_t)a2)
          {
            v35 = (unint64_t)a2;
            do
              v35 -= 24;
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v106, (void **)v35) & 0x80) != 0);
          }
          while (v10 < v35)
          {
            v36 = *(_OWORD *)v10;
            v105 = *(void **)(v10 + 16);
            v104 = v36;
            v37 = *(_OWORD *)v35;
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(v35 + 16);
            *(_OWORD *)v10 = v37;
            v38 = v104;
            *(_QWORD *)(v35 + 16) = v105;
            *(_OWORD *)v35 = v38;
            do
              v10 += 24;
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v106, (void **)v10) & 0x80) == 0);
            do
              v35 -= 24;
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v106, (void **)v35) & 0x80) != 0);
          }
          v39 = (__int128 *)(v10 - 24);
          if (v10 - 24 == a1)
          {
            if (*(char *)(v10 - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v40 = *v39;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
            *(_OWORD *)a1 = v40;
            *(_BYTE *)(v10 - 1) = 0;
            *(_BYTE *)(v10 - 24) = 0;
          }
          a4 = 0;
          v41 = v106;
          *(_QWORD *)(v10 - 8) = v107;
          *v39 = v41;
          continue;
        }
        v19 = 0;
        v20 = *(_OWORD *)a1;
        v107 = *(_QWORD *)(a1 + 16);
        v106 = v20;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        do
          v19 += 24;
        while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v19 + a1), (void **)&v106) & 0x80) != 0);
        v21 = a1 + v19;
        v22 = v103;
        if (v19 == 24)
        {
          v22 = v103;
          do
          {
            if (v21 >= (unint64_t)v22)
              break;
            v22 -= 3;
          }
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, (void **)&v106) & 0x80) == 0);
        }
        else
        {
          do
            v22 -= 3;
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, (void **)&v106) & 0x80) == 0);
        }
        if (v21 >= (unint64_t)v22)
        {
          v10 = a1 + v19;
        }
        else
        {
          v23 = v22;
          v10 = a1 + v19;
          do
          {
            v24 = *(_OWORD *)v10;
            v105 = *(void **)(v10 + 16);
            v104 = v24;
            v25 = *(_OWORD *)v23;
            *(_QWORD *)(v10 + 16) = v23[2];
            *(_OWORD *)v10 = v25;
            v26 = v104;
            v23[2] = v105;
            *(_OWORD *)v23 = v26;
            do
              v10 += 24;
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v10, (void **)&v106) & 0x80) != 0);
            do
              v23 -= 3;
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, (void **)&v106) & 0x80) == 0);
          }
          while (v10 < (unint64_t)v23);
        }
        v27 = (__int128 *)(v10 - 24);
        if (v10 - 24 == a1)
        {
          if (*(char *)(v10 - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v28 = *v27;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
          *(_OWORD *)a1 = v28;
          *(_BYTE *)(v10 - 1) = 0;
          *(_BYTE *)(v10 - 24) = 0;
        }
        v29 = v106;
        *(_QWORD *)(v10 - 8) = v107;
        *v27 = v29;
        v30 = v21 >= (unint64_t)v22;
        a2 = v103;
        if (!v30)
        {
LABEL_37:
          std::__introsort<std::_RangeAlgPolicy,std::ranges::less &,std::string *,false>(a1, v10 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(a1, (void **)(v10 - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(v10, v103))
        {
          if (v31)
            continue;
          goto LABEL_37;
        }
        a2 = (void **)(v10 - 24);
        if (!v31)
          goto LABEL_2;
        return;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(void **a1, void **a2, _QWORD *a3)
{
  char v6;
  uint64_t result;
  void *v8;
  __int128 v9;
  void *v10;
  void *v11;
  __int128 v12;
  void *v13;
  void *v14;
  __int128 v15;
  void *v16;
  void *v17;
  __int128 v18;
  void *v19;
  void *v20;

  v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1);
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2);
  if (v6 < 0)
  {
    if ((char)result < 0)
    {
      v17 = a1[2];
      v18 = *(_OWORD *)a1;
      v20 = (void *)a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v20;
    }
    else
    {
      v14 = a1[2];
      v15 = *(_OWORD *)a1;
      v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
      result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2);
      if ((result & 0x80) == 0)
        return result;
      v17 = a2[2];
      v18 = *(_OWORD *)a2;
      v19 = (void *)a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v19;
    }
    *(_OWORD *)a3 = v18;
    a3[2] = v17;
  }
  else if ((char)result < 0)
  {
    v8 = a2[2];
    v9 = *(_OWORD *)a2;
    v10 = (void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v10;
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1);
    if ((result & 0x80) != 0)
    {
      v11 = a1[2];
      v12 = *(_OWORD *)a1;
      v13 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v13;
      *(_OWORD *)a2 = v12;
      a2[2] = v11;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(uint64_t a1, void **a2)
{
  unint64_t v4;
  _BOOL8 result;
  void **v6;
  void *v7;
  __int128 v8;
  void *v9;
  void **v10;
  void **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  void *v21;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2 - 3, (void **)a1) & 0x80) != 0)
      {
        v7 = *(void **)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = v6[2];
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_QWORD *)(a1 + 16) = v9;
        *(_OWORD *)v6 = v8;
        v6[2] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)a1, (void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(a1, (void **)(a1 + 24), (void **)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), a2 - 3);
      return 1;
    default:
      v10 = (void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)a1, (void **)(a1 + 24), (_QWORD *)(a1 + 48));
      v11 = (void **)(a1 + 72);
      if ((void **)(a1 + 72) == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10) & 0x80) != 0)
    {
      v20 = *(_OWORD *)v11;
      v21 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      v14 = v12;
      do
      {
        v15 = a1 + v14;
        v16 = (void **)(a1 + v14 + 72);
        if (*(char *)(a1 + v14 + 95) < 0)
          operator delete(*v16);
        *(_OWORD *)v16 = *(_OWORD *)(v15 + 48);
        *(_QWORD *)(a1 + v14 + 88) = *(_QWORD *)(v15 + 64);
        *(_BYTE *)(v15 + 71) = 0;
        *(_BYTE *)(v15 + 48) = 0;
        if (v14 == -48)
        {
          v19 = a1;
          goto LABEL_15;
        }
        v17 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v20, (void **)(a1 + v14 + 24));
        v14 -= 24;
      }
      while (v17 < 0);
      v18 = *(char *)(a1 + v14 + 95);
      v19 = a1 + v14 + 72;
      if (v18 < 0)
        operator delete(*(void **)v19);
LABEL_15:
      *(_OWORD *)v19 = v20;
      *(_QWORD *)(v19 + 16) = v21;
      if (++v13 == 8)
        return v11 + 3 == a2;
    }
    v10 = v11;
    v12 += 24;
    v11 += 3;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(uint64_t a1, void **a2, void **a3, _QWORD *a4)
{
  __n128 result;
  void *v9;
  __int128 v10;
  void *v11;
  void *v12;
  __int128 v13;
  void *v14;
  void *v15;
  void *v16;

  std::__sort3[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>((void **)a1, a2, a3);
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a4, a3) & 0x80) != 0)
  {
    v9 = a3[2];
    v10 = *(_OWORD *)a3;
    v11 = (void *)a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2) & 0x80) != 0)
    {
      v12 = a2[2];
      v13 = *(_OWORD *)a2;
      v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)a1) & 0x80) != 0)
      {
        v15 = *(void **)(a1 + 16);
        result = *(__n128 *)a1;
        v16 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(uint64_t a1, void **a2, void **a3, void **a4, _QWORD *a5)
{
  __n128 result;
  void *v11;
  __int128 v12;
  void *v13;
  void *v14;
  __int128 v15;
  void *v16;
  void *v17;
  __int128 v18;
  void *v19;
  void *v20;
  void *v21;

  std::__sort4[abi:ne180100]<std::_RangeAlgPolicy,std::ranges::less &,std::string *>(a1, a2, a3, a4);
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, a4) & 0x80) != 0)
  {
    v11 = a4[2];
    v12 = *(_OWORD *)a4;
    v13 = (void *)a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a4, a3) & 0x80) != 0)
    {
      v14 = a3[2];
      v15 = *(_OWORD *)a3;
      v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2) & 0x80) != 0)
      {
        v17 = a2[2];
        v18 = *(_OWORD *)a2;
        v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)a1) & 0x80) != 0)
        {
          v20 = *(void **)(a1 + 16);
          result = *(__n128 *)a1;
          v21 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

uint64_t std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::back_insert_iterator<std::vector<std::string>>>(uint64_t result, void **a2, void **a3, void **a4, void **a5, uint64_t *a6)
{
  _QWORD *v9;
  void **v10;
  void **v11;
  unint64_t v12;

  v9 = (_QWORD *)result;
  if (a2 != a3)
  {
    v10 = a4;
    if (a4 != a5)
    {
      v11 = a2;
      do
      {
        result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10);
        if ((result & 0x80) != 0)
        {
          v11 += 3;
        }
        else
        {
          result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, v11);
          if ((result & 0x80) == 0)
          {
            v12 = a6[1];
            if (v12 >= a6[2])
            {
              result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a6, (__int128 *)v11);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a6, (__int128 *)v11);
              result = v12 + 24;
            }
            a6[1] = result;
            v11 += 3;
          }
          v10 += 3;
        }
      }
      while (v11 != a3 && v10 != a5);
    }
  }
  *v9 = a3;
  v9[1] = a5;
  v9[2] = a6;
  return result;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1BEE21D74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1BEE21E88(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[4];
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = &v14;
  v12[3] = 1;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v14 + 1) = v9;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1BEE22164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1BEE22278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void SipUnknownHeader::~SipUnknownHeader(void **this)
{
  *this = off_1E78B8320;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78B8320;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipUnknownHeader::allowsDuplicates(SipUnknownHeader *this)
{
  return 1;
}

uint64_t TTAKRegistrationPolicy::TTAKRegistrationPolicy(uint64_t a1, std::__shared_weak_count **a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v7[2];

  *(_QWORD *)(a1 + 104) = &off_1E78B7B60;
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  Rfc5626RegistrationPolicy::Rfc5626RegistrationPolicy(a1, (uint64_t *)&off_1E78B9108, v7);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  *(_QWORD *)a1 = &off_1E78B8E48;
  *(_QWORD *)(a1 + 104) = &unk_1E78B90B0;
  *(_QWORD *)(a1 + 176) = &unk_1E78B90F8;
  *(_BYTE *)(a1 + 2356) = 0;
  return a1;
}

void sub_1BEE2242C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

uint64_t TTAKRegistrationPolicy::performActualWaitTime(TTAKRegistrationPolicy *this, const ImsResult *a2, unsigned int a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  time_t v14;
  void *__p[2];
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 2356) = 1;
  v6 = *((_QWORD *)this + 23);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = operator new(0x20uLL);
  *v11 = &off_1E78B9750;
  v11[1] = this;
  v11[2] = v6;
  v11[3] = v5;
  v19 = v11;
  SipTimerContainer::startTimer((_QWORD *)this + 28, (uint64_t)"ActualWaitTime", (uint64_t)v18, 1000 * a3, 0);
  v12 = v19;
  if (v19 == v18)
  {
    v13 = 4;
    v12 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  v14 = time(0);
  *((_QWORD *)this + 49) = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "ActualWaitTime");
  SipRegistrationPolicy::updateNextRetryTime(this, (ims *)(v14 + a3), (uint64_t)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return -1;
}

void sub_1BEE225AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::__shared_weak_count *v18;

  if (a14 < 0)
    operator delete(__p);
  if (v18)
  {
    std::__shared_weak_count::__release_weak(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(exception_object);
}

void TTAKRegistrationPolicy::handleTimer(SipRegistrationPolicy *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  unsigned __int8 *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  if (v5 != 14)
    goto LABEL_12;
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, "ActualWaitTime", *((_QWORD *)a2 + 1)))
      goto LABEL_13;
LABEL_12:
    SipRegistrationPolicy::handleTimer(a1, a2);
    return;
  }
  if (a2[23])
  {
    v6 = "ActualWaitTime";
    v7 = a2;
    while (*v7 == *(unsigned __int8 *)v6)
    {
      ++v7;
      ++v6;
      if (!--v4)
        goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 47);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      v10 = v9;
      v11 = *((_QWORD *)a1 + 46);
      if (v11)
      {
        v12 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)a1 + 64))(a1);
        (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"actual wait timer fired. Time to bring down the PDN.", 52);
        *(_BYTE *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v12 + 17) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1BEE227B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TTAKRegistrationPolicy::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  TTAKRegistrationPolicy::handleTimer((SipRegistrationPolicy *)(a1 - 176), a2);
}

uint64_t TTAKRegistrationPolicy::startingRegistration(TTAKRegistrationPolicy *this)
{
  uint64_t v2;

  if (!*((_BYTE *)this + 2356))
    return SipRegistrationPolicy::startingRegistration(this);
  v2 = (*(uint64_t (**)(TTAKRegistrationPolicy *))(*(_QWORD *)this + 32))(this);
  (*(void (**)(TTAKRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"registration is blocked until the PDN is reset", 46);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return 0;
}

ImsBlockQueue *TTAKRegistrationPolicy::deinitialize(SipRegistrationPolicy *this)
{
  *((_BYTE *)this + 2356) = 0;
  return SipRegistrationPolicy::deinitialize(this);
}

uint64_t TTAKRegistrationPolicy::onInterfaceChanged(TTAKRegistrationPolicy *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(TTAKRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(TTAKRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Not clearing throttling on interface change, per policy.", 56);
  *(_BYTE *)(v2 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return result;
}

void Rfc5626RegistrationPolicy::~Rfc5626RegistrationPolicy(Rfc5626RegistrationPolicy *this)
{
  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1E78EF8E0);
}

{
  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1E78EF8E0);
  JUMPOUT(0x1C3B87100);
}

uint64_t Rfc5626RegistrationPolicy::generalErrorRetryInterval(Rfc5626RegistrationPolicy *this)
{
  return 0;
}

uint64_t Rfc5626RegistrationPolicy::fatalErrorRetryInterval(Rfc5626RegistrationPolicy *this)
{
  return 0;
}

uint64_t Rfc5626RegistrationPolicy::forbiddenErrorRetryInterval(Rfc5626RegistrationPolicy *this)
{
  return 0;
}

uint64_t SipRegistrationPolicy::subscriptionRetryTimer(SipRegistrationPolicy *this)
{
  return (uint64_t)this + 2160;
}

uint64_t SipRegistrationPolicy::useNextProxyOnRegistrationChange(SipRegistrationPolicy *this)
{
  return 0;
}

const char *Rfc5626RegistrationPolicy::name(Rfc5626RegistrationPolicy *this)
{
  return "RFC5626";
}

uint64_t SipRegistrationPolicy::isTransactionRetryAllowed(SipRegistrationPolicy *this)
{
  return 1;
}

uint64_t SipRegistrationPolicy::isCSFBModeEnabled(SipRegistrationPolicy *this)
{
  return 0;
}

BOOL SipRegistrationPolicy::isEmergency(SipRegistrationPolicy *this)
{
  return *((_QWORD *)this + 279) != 0;
}

uint64_t SipRegistrationPolicy::shouldNotifyDelegate(SipRegistrationPolicy *this)
{
  return 1;
}

uint64_t SipRegistrationPolicy::allowNotificationsInLimitedAccess(SipRegistrationPolicy *this)
{
  return 0;
}

void `non-virtual thunk to'Rfc5626RegistrationPolicy::~Rfc5626RegistrationPolicy(Rfc5626RegistrationPolicy *this)
{
  SipRegistrationPolicy::~SipRegistrationPolicy((Rfc5626RegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1E78EF8E0);
}

{
  SipRegistrationPolicy::~SipRegistrationPolicy((Rfc5626RegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1E78EF8E0);
  JUMPOUT(0x1C3B87100);
}

void TTAKRegistrationPolicy::~TTAKRegistrationPolicy(TTAKRegistrationPolicy *this)
{
  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1E78B9110);
}

{
  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1E78B9110);
  JUMPOUT(0x1C3B87100);
}

uint64_t TTAKRegistrationPolicy::useNextProxy(TTAKRegistrationPolicy *this)
{
  return 1;
}

const char *TTAKRegistrationPolicy::name(TTAKRegistrationPolicy *this)
{
  return "TTAK";
}

void `non-virtual thunk to'TTAKRegistrationPolicy::~TTAKRegistrationPolicy(TTAKRegistrationPolicy *this)
{
  SipRegistrationPolicy::~SipRegistrationPolicy((TTAKRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1E78B9110);
}

{
  SipRegistrationPolicy::~SipRegistrationPolicy((TTAKRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1E78B9110);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78B9750;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78B9750;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78B9750;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78B9750;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEE22C34(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0,std::allocator<TTAKRegistrationPolicy::performActualWaitTime(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t SipRegistrationConfig::initializeFromPrefs(std::vector<std::string> *this, const ImsPrefs *a2)
{
  void **RegistrationPolicyKey;
  ImsPrefs *v5;
  void **p_end;
  void **RegistrationExpirationSecondsKey;
  void *v8;
  ImsPrefs *v9;
  void **RegSubscriptionEnabledKey;
  void *v11;
  unint64_t v12;
  void **RegSubscriptionExpirationSecondsKey;
  void *v14;
  ImsPrefs *v15;
  void **RegistrationExpirationCushionSecondsKey;
  void *v17;
  ImsPrefs *v18;
  void **RegistrationRefreshCushionPercentKey;
  void *v20;
  ImsPrefs *v21;
  void **RegistrationRefreshCushionCapSecondsKey;
  void *v23;
  ImsPrefs *v24;
  void **RegistrationThrottlingCushionPercentKey;
  void *v26;
  ImsPrefs *v27;
  void **RegistrationThrottlingCushionCapSecondsKey;
  void *v29;
  ImsPrefs *v30;
  void **AllowEarlyRegistrationRefreshKey;
  void *v32;
  unint64_t v33;
  void **FuzzyContactMatchingKey;
  void *v35;
  unint64_t v36;
  void **RegistrationCoalesceCushionPercentKey;
  void *v38;
  ImsPrefs *v39;
  void **FeatureTagsEnabledKey;
  void *v41;
  unint64_t v42;
  void **ForcedFeatureTagsKey;
  ImsPrefs *v44;
  void **ContactUserKey;
  ImsPrefs *v46;
  void **p_begin;
  void **AllowLimitedAccessModeRegistrationKey;
  void *v49;
  unint64_t v50;
  void **AllowDisabledModeKey;
  void *v52;
  unint64_t v53;
  void **RegistrationRetryIntervalsKey;
  std::string::size_type v55;
  std::string::size_type size;
  std::vector<std::string> *v57;
  std::string::size_type v58;
  std::string::size_type v59;
  std::string *v60;
  const char *v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  std::string *v65;
  uint64_t v66;
  int v67;
  _BYTE *v68;
  std::vector<std::string>::pointer end;
  std::string *value;
  std::string *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  _DWORD *v78;
  std::vector<std::string>::pointer begin;
  std::string *v80;
  std::string::size_type v81;
  int v82;
  ImsPrefs *v83;
  void **MaxFatalRegistrationErrorsKey;
  void *v85;
  ImsPrefs *v86;
  void **MaxAuthRetriesKey;
  void *v88;
  ImsPrefs *v89;
  void **NetworkTerminationRetryIntervalSecondsKey;
  void *v91;
  ImsPrefs *v92;
  void **SubscriptionTerminatedMeansRegistrationTerminatedKey;
  void *v94;
  unint64_t v95;
  void **ReSubscribeOnReRegistrationKey;
  void *v97;
  unint64_t v98;
  void **RetryAfterStatusCodesKey;
  ImsPrefs *v100;
  void **IgnoreRetryAfterStatusCodesKey;
  ImsPrefs *v102;
  void **ResetDisabledModeOnEventsKey;
  ImsPrefs *v104;
  void **ResetThrottlingOnEventsKey;
  ImsPrefs *v106;
  void **MaxForbiddenErrorsKey;
  void *v108;
  ImsPrefs *v109;
  void **MaxReRegistrationAttemptsKey;
  void *v111;
  ImsPrefs *v112;
  void **v113;
  void *v114;
  unint64_t v115;
  void **IncompleteRegistrationThrottlingIntervalSecondsKey;
  void *v117;
  ImsPrefs *v118;
  void **RegistrationRetryMaxTimeSecondsKey;
  void *v120;
  ImsPrefs *v121;
  void **RegistrationRetryBaseTimeSecondsKey;
  void *v123;
  ImsPrefs *v124;
  void **UseFakeSAsForDeregistrationKey;
  void *v126;
  unint64_t v127;
  void **MaxRegistrationAttemptsPerProxyKey;
  void *v129;
  ImsPrefs *v130;
  void **PdnBringupTimerSecondsKey;
  void *v132;
  int v133;
  ImsPrefs *v134;
  void **FatalRegistrationErrorCodesKey;
  ImsPrefs *v136;
  void **ForbiddenRegistrationErrorCodesKey;
  ImsPrefs *v138;
  void **DontThrottleOnRegistrationErrorCodesKey;
  ImsPrefs *v140;
  void **TimeoutRegistrationAllProxyErrorCodesKey;
  ImsPrefs *v142;
  void **SubscriptionRetryMaxSecondsKey;
  void *v144;
  ImsPrefs *v145;
  void **SubscriptionRetryMinSecondsKey;
  void *v147;
  ImsPrefs *v148;
  void **UseCustomSSOAuthKey;
  void *v150;
  unint64_t v151;
  void *DisableRegistrationOnNotifyEventsKey;
  ImsPrefs *v153;
  void **AllowRegistrationCanceledStateKey;
  void *v155;
  unint64_t v156;
  void **KillRegistrationOnHandoverTimeoutKey;
  void *v158;
  unint64_t v159;
  void **AlwaysResetProxyListKey;
  void *v161;
  unint64_t v162;
  void **v163;
  void *v164;
  unint64_t v165;
  void **ReRegistrationHysteresisTimerMillisecondsKey;
  void *v167;
  ImsPrefs *v168;
  void **HonorForbiddenRetryAfterKey;
  void *v170;
  unint64_t v171;
  void **ClearThrottlingOnSocketErrorsKey;
  ImsPrefs *v173;
  void **UseNextProxyForPcscfRestorationKey;
  void *v175;
  unint64_t v176;
  void **NoFallbackVoiceServiceKey;
  void *v178;
  unint64_t v179;
  void **DeferReRegOnSubDisableKey;
  void *v181;
  uint64_t result;
  std::string v183;
  std::string v184;
  std::string v185;
  std::string __p;
  char v187;

  RegistrationPolicyKey = (void **)ImsPrefs::getRegistrationPolicyKey((ImsPrefs *)this);
  v5 = (ImsPrefs *)ImsPrefs::stringValue(a2, RegistrationPolicyKey);
  p_end = (void **)&this[53].__end_;
  if (SHIBYTE(this[54].__begin_) < 0)
    operator delete(*p_end);
  *(_OWORD *)p_end = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  this[54].__begin_ = (std::vector<std::string>::pointer)__p.__r_.__value_.__r.__words[2];
  RegistrationExpirationSecondsKey = (void **)ImsPrefs::getRegistrationExpirationSecondsKey(v5);
  v8 = ImsPrefs::prefWithKey(a2, RegistrationExpirationSecondsKey);
  if (v8)
    v9 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v8 + 56))(v8);
  else
    v9 = (ImsPrefs *)*((unsigned int *)RegistrationExpirationSecondsKey + 15);
  HIDWORD(this[1].__end_) = (_DWORD)v9;
  RegSubscriptionEnabledKey = (void **)ImsPrefs::getRegSubscriptionEnabledKey(v9);
  v11 = ImsPrefs::prefWithKey(a2, RegSubscriptionEnabledKey);
  if (v11)
    v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 40))(v11);
  else
    v12 = *((_BYTE *)RegSubscriptionEnabledKey + 57) != 0;
  BYTE1(this[1].__end_) = v12;
  RegSubscriptionExpirationSecondsKey = (void **)ImsPrefs::getRegSubscriptionExpirationSecondsKey((ImsPrefs *)v12);
  v14 = ImsPrefs::prefWithKey(a2, RegSubscriptionExpirationSecondsKey);
  if (v14)
    v15 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v14 + 56))(v14);
  else
    v15 = (ImsPrefs *)*((unsigned int *)RegSubscriptionExpirationSecondsKey + 15);
  LODWORD(this[1].__end_cap_.__value_) = (_DWORD)v15;
  RegistrationExpirationCushionSecondsKey = (void **)ImsPrefs::getRegistrationExpirationCushionSecondsKey(v15);
  v17 = ImsPrefs::prefWithKey(a2, RegistrationExpirationCushionSecondsKey);
  if (v17)
    v18 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 56))(v17);
  else
    v18 = (ImsPrefs *)*((unsigned int *)RegistrationExpirationCushionSecondsKey + 15);
  HIDWORD(this[1].__end_cap_.__value_) = (_DWORD)v18;
  RegistrationRefreshCushionPercentKey = (void **)ImsPrefs::getRegistrationRefreshCushionPercentKey(v18);
  v20 = ImsPrefs::prefWithKey(a2, RegistrationRefreshCushionPercentKey);
  if (v20)
    v21 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v20 + 56))(v20);
  else
    v21 = (ImsPrefs *)*((unsigned int *)RegistrationRefreshCushionPercentKey + 15);
  LODWORD(this[2].__begin_) = (_DWORD)v21;
  RegistrationRefreshCushionCapSecondsKey = (void **)ImsPrefs::getRegistrationRefreshCushionCapSecondsKey(v21);
  v23 = ImsPrefs::prefWithKey(a2, RegistrationRefreshCushionCapSecondsKey);
  if (v23)
    v24 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v23 + 56))(v23);
  else
    v24 = (ImsPrefs *)*((unsigned int *)RegistrationRefreshCushionCapSecondsKey + 15);
  LODWORD(this[2].__end_) = (_DWORD)v24;
  RegistrationThrottlingCushionPercentKey = (void **)ImsPrefs::getRegistrationThrottlingCushionPercentKey(v24);
  v26 = ImsPrefs::prefWithKey(a2, RegistrationThrottlingCushionPercentKey);
  if (v26)
    v27 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v26 + 56))(v26);
  else
    v27 = (ImsPrefs *)*((unsigned int *)RegistrationThrottlingCushionPercentKey + 15);
  HIDWORD(this[2].__end_) = (_DWORD)v27;
  RegistrationThrottlingCushionCapSecondsKey = (void **)ImsPrefs::getRegistrationThrottlingCushionCapSecondsKey(v27);
  v29 = ImsPrefs::prefWithKey(a2, RegistrationThrottlingCushionCapSecondsKey);
  if (v29)
    v30 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v29 + 56))(v29);
  else
    v30 = (ImsPrefs *)*((unsigned int *)RegistrationThrottlingCushionCapSecondsKey + 15);
  LODWORD(this[2].__end_cap_.__value_) = (_DWORD)v30;
  AllowEarlyRegistrationRefreshKey = (void **)ImsPrefs::getAllowEarlyRegistrationRefreshKey(v30);
  v32 = ImsPrefs::prefWithKey(a2, AllowEarlyRegistrationRefreshKey);
  if (v32)
    v33 = (*(uint64_t (**)(void *))(*(_QWORD *)v32 + 40))(v32);
  else
    v33 = *((_BYTE *)AllowEarlyRegistrationRefreshKey + 57) != 0;
  BYTE4(this[2].__end_cap_.__value_) = v33;
  FuzzyContactMatchingKey = (void **)ImsPrefs::getFuzzyContactMatchingKey((ImsPrefs *)v33);
  v35 = ImsPrefs::prefWithKey(a2, FuzzyContactMatchingKey);
  if (v35)
    v36 = (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 40))(v35);
  else
    v36 = *((_BYTE *)FuzzyContactMatchingKey + 57) != 0;
  LOBYTE(this[51].__begin_) = v36;
  RegistrationCoalesceCushionPercentKey = (void **)ImsPrefs::getRegistrationCoalesceCushionPercentKey((ImsPrefs *)v36);
  v38 = ImsPrefs::prefWithKey(a2, RegistrationCoalesceCushionPercentKey);
  if (v38)
    v39 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v38 + 56))(v38);
  else
    v39 = (ImsPrefs *)*((unsigned int *)RegistrationCoalesceCushionPercentKey + 15);
  HIDWORD(this[2].__begin_) = (_DWORD)v39;
  FeatureTagsEnabledKey = (void **)ImsPrefs::getFeatureTagsEnabledKey(v39);
  v41 = ImsPrefs::prefWithKey(a2, FeatureTagsEnabledKey);
  if (v41)
    v42 = (*(uint64_t (**)(void *))(*(_QWORD *)v41 + 40))(v41);
  else
    v42 = *((_BYTE *)FeatureTagsEnabledKey + 57) != 0;
  LOBYTE(this[1].__end_) = v42;
  ForcedFeatureTagsKey = (void **)ImsPrefs::getForcedFeatureTagsKey((ImsPrefs *)v42);
  ImsPrefs::stringValue(a2, ForcedFeatureTagsKey);
  v44 = (ImsPrefs *)BambiServices::serviceMaskForNames(&__p);
  HIDWORD(this[1].__begin_) = (_DWORD)v44;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ContactUserKey = (void **)ImsPrefs::getContactUserKey(v44);
  v46 = (ImsPrefs *)ImsPrefs::stringValue(a2, ContactUserKey);
  p_begin = (void **)&this[38].__begin_;
  if (SHIBYTE(this[38].__end_cap_.__value_) < 0)
    operator delete(*p_begin);
  *(_OWORD *)p_begin = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  this[38].__end_cap_.__value_ = (std::string *)__p.__r_.__value_.__r.__words[2];
  AllowLimitedAccessModeRegistrationKey = (void **)ImsPrefs::getAllowLimitedAccessModeRegistrationKey(v46);
  v49 = ImsPrefs::prefWithKey(a2, AllowLimitedAccessModeRegistrationKey);
  if (v49)
    v50 = (*(uint64_t (**)(void *))(*(_QWORD *)v49 + 40))(v49);
  else
    v50 = *((_BYTE *)AllowLimitedAccessModeRegistrationKey + 57) != 0;
  BYTE2(this[1].__end_) = v50;
  AllowDisabledModeKey = (void **)ImsPrefs::getAllowDisabledModeKey((ImsPrefs *)v50);
  v52 = ImsPrefs::prefWithKey(a2, AllowDisabledModeKey);
  if (v52)
    v53 = (*(uint64_t (**)(void *))(*(_QWORD *)v52 + 40))(v52);
  else
    v53 = *((_BYTE *)AllowDisabledModeKey + 57) != 0;
  BYTE3(this[1].__end_) = v53;
  RegistrationRetryIntervalsKey = (void **)ImsPrefs::getRegistrationRetryIntervalsKey((ImsPrefs *)v53);
  ImsPrefs::stringValue(a2, RegistrationRetryIntervalsKey);
  this[40].__end_ = this[40].__begin_;
  memset(&__p, 0, sizeof(__p));
  ims::tokenize(&v183, (uint64_t *)&__p, 0x2Cu);
  size = __p.__r_.__value_.__l.__size_;
  v55 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    v57 = this + 40;
    do
    {
      if (*(char *)(v55 + 23) < 0)
      {
        if (*(_QWORD *)(v55 + 8))
        {
LABEL_55:
          v58 = std::string::find((const std::string *)v55, 43, 0);
          if (v58 == -1)
          {
            v61 = (const char *)v55;
            if (*(char *)(v55 + 23) < 0)
              v61 = *(const char **)v55;
            v62 = strtoul(v61, 0, 10);
            if (v62)
            {
              v63 = v62;
            }
            else
            {
              v66 = *(unsigned __int8 *)(v55 + 23);
              v67 = (char)v66;
              if ((v66 & 0x80u) != 0)
                v66 = *(_QWORD *)(v55 + 8);
              if (v66 != 1)
                goto LABEL_105;
              v68 = v67 >= 0 ? (_BYTE *)v55 : *(_BYTE **)v55;
              if (*v68 != 48)
                goto LABEL_105;
              v63 = 0;
            }
            v64 = 0;
          }
          else
          {
            v59 = v58;
            memset(&v185, 0, sizeof(v185));
            std::string::basic_string(&v185, (const std::string *)v55, 0, v58, (std::allocator<char> *)&v184);
            memset(&v184, 0, sizeof(v184));
            std::string::basic_string(&v184, (const std::string *)v55, v59 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v187);
            if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
            {
              if (!v185.__r_.__value_.__l.__size_)
                goto LABEL_67;
              v60 = (std::string *)v185.__r_.__value_.__r.__words[0];
LABEL_66:
              v63 = strtoul((const char *)v60, 0, 10);
            }
            else
            {
              if (*((_BYTE *)&v185.__r_.__value_.__s + 23))
              {
                v60 = &v185;
                goto LABEL_66;
              }
LABEL_67:
              v63 = 0;
            }
            if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v184.__r_.__value_.__l.__size_)
              {
                v65 = (std::string *)v184.__r_.__value_.__r.__words[0];
LABEL_73:
                v64 = strtoul((const char *)v65, 0, 10);
                if ((SHIBYTE(v184.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_86;
              }
              else
              {
                v64 = 0;
              }
              operator delete(v184.__r_.__value_.__l.__data_);
              goto LABEL_86;
            }
            if (*((_BYTE *)&v184.__r_.__value_.__s + 23))
            {
              v65 = &v184;
              goto LABEL_73;
            }
            v64 = 0;
LABEL_86:
            if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v185.__r_.__value_.__l.__data_);
          }
          end = this[40].__end_;
          value = this[40].__end_cap_.__value_;
          if (end >= value)
          {
            v72 = ((char *)end - (char *)v57->__begin_) >> 4;
            v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 60)
              std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
            v74 = (char *)value - (char *)v57->__begin_;
            if (v74 >> 3 > v73)
              v73 = v74 >> 3;
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
              v75 = 0xFFFFFFFFFFFFFFFLL;
            else
              v75 = v73;
            if (v75)
              v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)&this[40].__end_cap_, v75);
            else
              v76 = 0;
            v77 = &v76[16 * v72];
            *(_QWORD *)v77 = v63;
            *((_DWORD *)v77 + 2) = v64;
            *((_DWORD *)v77 + 3) = 0;
            v78 = this[40].__end_;
            begin = this[40].__begin_;
            v80 = (std::string *)v77;
            if (v78 != (_DWORD *)begin)
            {
              do
              {
                v81 = *((_QWORD *)v78 - 2);
                v78 -= 4;
                v82 = v78[2];
                v80[-1].__r_.__value_.__l.__size_ = v81;
                v80 = (std::string *)((char *)v80 - 16);
                LODWORD(v80->__r_.__value_.__r.__words[1]) = v82;
              }
              while (v78 != (_DWORD *)begin);
              v78 = v57->__begin_;
            }
            this[40].__begin_ = v80;
            v71 = (std::string *)(v77 + 16);
            this[40].__end_ = (std::vector<std::string>::pointer)(v77 + 16);
            this[40].__end_cap_.__value_ = (std::string *)&v76[16 * v75];
            if (v78)
              operator delete(v78);
          }
          else
          {
            end->__r_.__value_.__r.__words[0] = v63;
            v71 = (std::string *)&end->__r_.__value_.__r.__words[2];
            LODWORD(end->__r_.__value_.__r.__words[1]) = v64;
            HIDWORD(end->__r_.__value_.__r.__words[1]) = 0;
          }
          this[40].__end_ = v71;
        }
      }
      else if (*(_BYTE *)(v55 + 23))
      {
        goto LABEL_55;
      }
LABEL_105:
      v55 += 24;
    }
    while (v55 != size);
  }
  v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v183.__r_.__value_.__l.__data_);
  MaxFatalRegistrationErrorsKey = (void **)ImsPrefs::getMaxFatalRegistrationErrorsKey(v83);
  v85 = ImsPrefs::prefWithKey(a2, MaxFatalRegistrationErrorsKey);
  if (v85)
    v86 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v85 + 56))(v85);
  else
    v86 = (ImsPrefs *)*((unsigned int *)MaxFatalRegistrationErrorsKey + 15);
  LODWORD(this[41].__end_cap_.__value_) = (_DWORD)v86;
  MaxAuthRetriesKey = (void **)ImsPrefs::getMaxAuthRetriesKey(v86);
  v88 = ImsPrefs::prefWithKey(a2, MaxAuthRetriesKey);
  if (v88)
    v89 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v88 + 56))(v88);
  else
    v89 = (ImsPrefs *)*((unsigned int *)MaxAuthRetriesKey + 15);
  HIDWORD(this[41].__end_cap_.__value_) = (_DWORD)v89;
  NetworkTerminationRetryIntervalSecondsKey = (void **)ImsPrefs::getNetworkTerminationRetryIntervalSecondsKey(v89);
  v91 = ImsPrefs::prefWithKey(a2, NetworkTerminationRetryIntervalSecondsKey);
  if (v91)
    v92 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v91 + 56))(v91);
  else
    v92 = (ImsPrefs *)*((unsigned int *)NetworkTerminationRetryIntervalSecondsKey + 15);
  this[41].__begin_ = (std::vector<std::string>::pointer)(int)v92;
  SubscriptionTerminatedMeansRegistrationTerminatedKey = (void **)ImsPrefs::getSubscriptionTerminatedMeansRegistrationTerminatedKey(v92);
  v94 = ImsPrefs::prefWithKey(a2, SubscriptionTerminatedMeansRegistrationTerminatedKey);
  if (v94)
    v95 = (*(uint64_t (**)(void *))(*(_QWORD *)v94 + 40))(v94);
  else
    v95 = *((_BYTE *)SubscriptionTerminatedMeansRegistrationTerminatedKey + 57) != 0;
  BYTE1(this[51].__begin_) = v95;
  ReSubscribeOnReRegistrationKey = (void **)ImsPrefs::getReSubscribeOnReRegistrationKey((ImsPrefs *)v95);
  v97 = ImsPrefs::prefWithKey(a2, ReSubscribeOnReRegistrationKey);
  if (v97)
    v98 = (*(uint64_t (**)(void *))(*(_QWORD *)v97 + 40))(v97);
  else
    v98 = *((_BYTE *)ReSubscribeOnReRegistrationKey + 57) != 0;
  BYTE2(this[51].__begin_) = v98;
  RetryAfterStatusCodesKey = (void **)ImsPrefs::getRetryAfterStatusCodesKey((ImsPrefs *)v98);
  ImsPrefs::stringValue(a2, RetryAfterStatusCodesKey);
  SipRegistrationConfig::retryAfterStatusCodesFromString((uint64_t)&this[51].__end_, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  IgnoreRetryAfterStatusCodesKey = (void **)ImsPrefs::getIgnoreRetryAfterStatusCodesKey(v100);
  ImsPrefs::stringValue(a2, IgnoreRetryAfterStatusCodesKey);
  SipRegistrationConfig::retryAfterStatusCodesFromString((uint64_t)&this[52].__end_, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ResetDisabledModeOnEventsKey = (void **)ImsPrefs::getResetDisabledModeOnEventsKey(v102);
  ImsPrefs::stringValue(a2, ResetDisabledModeOnEventsKey);
  v104 = (ImsPrefs *)deviceEventsFromString(&__p);
  LODWORD(this[54].__end_) = (_DWORD)v104;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ResetThrottlingOnEventsKey = (void **)ImsPrefs::getResetThrottlingOnEventsKey(v104);
  ImsPrefs::stringValue(a2, ResetThrottlingOnEventsKey);
  v106 = (ImsPrefs *)deviceEventsFromString(&__p);
  HIDWORD(this[54].__end_) = (_DWORD)v106;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  MaxForbiddenErrorsKey = (void **)ImsPrefs::getMaxForbiddenErrorsKey(v106);
  v108 = ImsPrefs::prefWithKey(a2, MaxForbiddenErrorsKey);
  if (v108)
    v109 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v108 + 56))(v108);
  else
    v109 = (ImsPrefs *)*((unsigned int *)MaxForbiddenErrorsKey + 15);
  LODWORD(this[55].__end_cap_.__value_) = (_DWORD)v109;
  MaxReRegistrationAttemptsKey = (void **)ImsPrefs::getMaxReRegistrationAttemptsKey(v109);
  v111 = ImsPrefs::prefWithKey(a2, MaxReRegistrationAttemptsKey);
  if (v111)
    v112 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v111 + 56))(v111);
  else
    v112 = (ImsPrefs *)*((unsigned int *)MaxReRegistrationAttemptsKey + 15);
  HIDWORD(this[55].__end_cap_.__value_) = (_DWORD)v112;
  v113 = (void **)ImsPrefs::getClearRegistrationCallIdOnDeinitializationKey(v112);
  v114 = ImsPrefs::prefWithKey(a2, v113);
  if (v114)
    v115 = (*(uint64_t (**)(void *))(*(_QWORD *)v114 + 40))(v114);
  else
    v115 = *((_BYTE *)v113 + 57) != 0;
  LOBYTE(this[56].__begin_) = v115;
  IncompleteRegistrationThrottlingIntervalSecondsKey = (void **)ImsPrefs::getIncompleteRegistrationThrottlingIntervalSecondsKey((ImsPrefs *)v115);
  v117 = ImsPrefs::prefWithKey(a2, IncompleteRegistrationThrottlingIntervalSecondsKey);
  if (v117)
    v118 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v117 + 56))(v117);
  else
    v118 = (ImsPrefs *)*((unsigned int *)IncompleteRegistrationThrottlingIntervalSecondsKey + 15);
  this[41].__end_ = (std::vector<std::string>::pointer)(int)v118;
  RegistrationRetryMaxTimeSecondsKey = (void **)ImsPrefs::getRegistrationRetryMaxTimeSecondsKey(v118);
  v120 = ImsPrefs::prefWithKey(a2, RegistrationRetryMaxTimeSecondsKey);
  if (v120)
    v121 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v120 + 56))(v120);
  else
    v121 = (ImsPrefs *)*((unsigned int *)RegistrationRetryMaxTimeSecondsKey + 15);
  LODWORD(this[56].__end_) = (_DWORD)v121;
  RegistrationRetryBaseTimeSecondsKey = (void **)ImsPrefs::getRegistrationRetryBaseTimeSecondsKey(v121);
  v123 = ImsPrefs::prefWithKey(a2, RegistrationRetryBaseTimeSecondsKey);
  if (v123)
    v124 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v123 + 56))(v123);
  else
    v124 = (ImsPrefs *)*((unsigned int *)RegistrationRetryBaseTimeSecondsKey + 15);
  HIDWORD(this[56].__end_) = (_DWORD)v124;
  UseFakeSAsForDeregistrationKey = (void **)ImsPrefs::getUseFakeSAsForDeregistrationKey(v124);
  v126 = ImsPrefs::prefWithKey(a2, UseFakeSAsForDeregistrationKey);
  if (v126)
    v127 = (*(uint64_t (**)(void *))(*(_QWORD *)v126 + 40))(v126);
  else
    v127 = *((_BYTE *)UseFakeSAsForDeregistrationKey + 57) != 0;
  BYTE1(this[56].__begin_) = v127;
  MaxRegistrationAttemptsPerProxyKey = (void **)ImsPrefs::getMaxRegistrationAttemptsPerProxyKey((ImsPrefs *)v127);
  v129 = ImsPrefs::prefWithKey(a2, MaxRegistrationAttemptsPerProxyKey);
  if (v129)
    v130 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v129 + 56))(v129);
  else
    v130 = (ImsPrefs *)*((unsigned int *)MaxRegistrationAttemptsPerProxyKey + 15);
  LODWORD(this[56].__end_cap_.__value_) = (_DWORD)v130;
  PdnBringupTimerSecondsKey = (void **)ImsPrefs::getPdnBringupTimerSecondsKey(v130);
  v132 = ImsPrefs::prefWithKey(a2, PdnBringupTimerSecondsKey);
  if (v132)
    v133 = (*(uint64_t (**)(void *))(*(_QWORD *)v132 + 56))(v132);
  else
    v133 = *((_DWORD *)PdnBringupTimerSecondsKey + 15);
  HIDWORD(this[56].__end_cap_.__value_) = v133;
  v134 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(&__p, "REGISTER");
  FatalRegistrationErrorCodesKey = (void **)ImsPrefs::getFatalRegistrationErrorCodesKey(v134);
  ImsPrefs::stringValue(a2, FatalRegistrationErrorCodesKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)&this[59], (uint64_t)&__p, &v185);
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v185.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v136 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(&__p, "REGISTER");
  ForbiddenRegistrationErrorCodesKey = (void **)ImsPrefs::getForbiddenRegistrationErrorCodesKey(v136);
  ImsPrefs::stringValue(a2, ForbiddenRegistrationErrorCodesKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)&this[57].__end_cap_, (uint64_t)&__p, &v185);
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v185.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v138 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(&__p, "REGISTER");
  DontThrottleOnRegistrationErrorCodesKey = (void **)ImsPrefs::getDontThrottleOnRegistrationErrorCodesKey(v138);
  ImsPrefs::stringValue(a2, DontThrottleOnRegistrationErrorCodesKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)&this[60].__end_, (uint64_t)&__p, &v185);
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v185.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v140 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(&__p, "REGISTER");
  TimeoutRegistrationAllProxyErrorCodesKey = (void **)ImsPrefs::getTimeoutRegistrationAllProxyErrorCodesKey(v140);
  ImsPrefs::stringValue(a2, TimeoutRegistrationAllProxyErrorCodesKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)&this[61].__end_cap_, (uint64_t)&__p, &v185);
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v185.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SubscriptionRetryMaxSecondsKey = (void **)ImsPrefs::getSubscriptionRetryMaxSecondsKey(v142);
  v144 = ImsPrefs::prefWithKey(a2, SubscriptionRetryMaxSecondsKey);
  if (v144)
    v145 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v144 + 56))(v144);
  else
    v145 = (ImsPrefs *)*((unsigned int *)SubscriptionRetryMaxSecondsKey + 15);
  LODWORD(this[57].__begin_) = (_DWORD)v145;
  SubscriptionRetryMinSecondsKey = (void **)ImsPrefs::getSubscriptionRetryMinSecondsKey(v145);
  v147 = ImsPrefs::prefWithKey(a2, SubscriptionRetryMinSecondsKey);
  if (v147)
    v148 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v147 + 56))(v147);
  else
    v148 = (ImsPrefs *)*((unsigned int *)SubscriptionRetryMinSecondsKey + 15);
  HIDWORD(this[57].__begin_) = (_DWORD)v148;
  UseCustomSSOAuthKey = (void **)ImsPrefs::getUseCustomSSOAuthKey(v148);
  v150 = ImsPrefs::prefWithKey(a2, UseCustomSSOAuthKey);
  if (v150)
    v151 = (*(uint64_t (**)(void *))(*(_QWORD *)v150 + 40))(v150);
  else
    v151 = *((_BYTE *)UseCustomSSOAuthKey + 57) != 0;
  LOBYTE(this[64].__end_) = v151;
  DisableRegistrationOnNotifyEventsKey = ImsPrefs::getDisableRegistrationOnNotifyEventsKey((ImsPrefs *)v151);
  v153 = (ImsPrefs *)ImsPrefs::stringArrayValues(a2, (uint64_t)DisableRegistrationOnNotifyEventsKey, this + 68);
  AllowRegistrationCanceledStateKey = (void **)ImsPrefs::getAllowRegistrationCanceledStateKey(v153);
  v155 = ImsPrefs::prefWithKey(a2, AllowRegistrationCanceledStateKey);
  if (v155)
    v156 = (*(uint64_t (**)(void *))(*(_QWORD *)v155 + 40))(v155);
  else
    v156 = *((_BYTE *)AllowRegistrationCanceledStateKey + 57) != 0;
  BYTE1(this[57].__end_) = v156;
  KillRegistrationOnHandoverTimeoutKey = (void **)ImsPrefs::getKillRegistrationOnHandoverTimeoutKey((ImsPrefs *)v156);
  v158 = ImsPrefs::prefWithKey(a2, KillRegistrationOnHandoverTimeoutKey);
  if (v158)
    v159 = (*(uint64_t (**)(void *))(*(_QWORD *)v158 + 40))(v158);
  else
    v159 = *((_BYTE *)KillRegistrationOnHandoverTimeoutKey + 57) != 0;
  BYTE2(this[56].__begin_) = v159;
  AlwaysResetProxyListKey = (void **)ImsPrefs::getAlwaysResetProxyListKey((ImsPrefs *)v159);
  v161 = ImsPrefs::prefWithKey(a2, AlwaysResetProxyListKey);
  if (v161)
    v162 = (*(uint64_t (**)(void *))(*(_QWORD *)v161 + 40))(v161);
  else
    v162 = *((_BYTE *)AlwaysResetProxyListKey + 57) != 0;
  LOBYTE(this[69].__begin_) = v162;
  v163 = (void **)ImsPrefs::getDontChangeProxiesDuringActiveCallsKey((ImsPrefs *)v162);
  v164 = ImsPrefs::prefWithKey(a2, v163);
  if (v164)
    v165 = (*(uint64_t (**)(void *))(*(_QWORD *)v164 + 40))(v164);
  else
    v165 = *((_BYTE *)v163 + 57) != 0;
  BYTE1(this[69].__begin_) = v165;
  ReRegistrationHysteresisTimerMillisecondsKey = (void **)ImsPrefs::getReRegistrationHysteresisTimerMillisecondsKey((ImsPrefs *)v165);
  v167 = ImsPrefs::prefWithKey(a2, ReRegistrationHysteresisTimerMillisecondsKey);
  if (v167)
    v168 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v167 + 56))(v167);
  else
    v168 = (ImsPrefs *)*((unsigned int *)ReRegistrationHysteresisTimerMillisecondsKey + 15);
  HIDWORD(this[69].__begin_) = (_DWORD)v168;
  HonorForbiddenRetryAfterKey = (void **)ImsPrefs::getHonorForbiddenRetryAfterKey(v168);
  v170 = ImsPrefs::prefWithKey(a2, HonorForbiddenRetryAfterKey);
  if (v170)
    v171 = (*(uint64_t (**)(void *))(*(_QWORD *)v170 + 40))(v170);
  else
    v171 = *((_BYTE *)HonorForbiddenRetryAfterKey + 57) != 0;
  LOBYTE(this[67].__end_cap_.__value_) = v171;
  ClearThrottlingOnSocketErrorsKey = (void **)ImsPrefs::getClearThrottlingOnSocketErrorsKey((ImsPrefs *)v171);
  ImsPrefs::stringValue(a2, ClearThrottlingOnSocketErrorsKey);
  v173 = (ImsPrefs *)ImsResultSet::fromString((uint64_t)&this[63], (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  UseNextProxyForPcscfRestorationKey = (void **)ImsPrefs::getUseNextProxyForPcscfRestorationKey(v173);
  v175 = ImsPrefs::prefWithKey(a2, UseNextProxyForPcscfRestorationKey);
  if (v175)
    v176 = (*(uint64_t (**)(void *))(*(_QWORD *)v175 + 40))(v175);
  else
    v176 = *((_BYTE *)UseNextProxyForPcscfRestorationKey + 57) != 0;
  LOBYTE(this[69].__end_) = v176;
  NoFallbackVoiceServiceKey = (void **)ImsPrefs::getNoFallbackVoiceServiceKey((ImsPrefs *)v176);
  v178 = ImsPrefs::prefWithKey(a2, NoFallbackVoiceServiceKey);
  if (v178)
    v179 = (*(uint64_t (**)(void *))(*(_QWORD *)v178 + 40))(v178);
  else
    v179 = *((_BYTE *)NoFallbackVoiceServiceKey + 57) != 0;
  BYTE1(this[69].__end_) = v179;
  DeferReRegOnSubDisableKey = (void **)ImsPrefs::getDeferReRegOnSubDisableKey((ImsPrefs *)v179);
  v181 = ImsPrefs::prefWithKey(a2, DeferReRegOnSubDisableKey);
  if (v181)
    result = (*(uint64_t (**)(void *))(*(_QWORD *)v181 + 40))(v181);
  else
    result = *((_BYTE *)DeferReRegOnSubDisableKey + 57) != 0;
  BYTE3(this[56].__begin_) = result;
  return result;
}

void sub_1BEE23AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipRegistrationConfig::retryAfterStatusCodesFromString(uint64_t a1, std::string *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<unsigned int>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *v4 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  ims::tokenize(a2, &v8, 0x2Cu);
  v5 = v8;
  v6 = v9;
  while (v5 != v6)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      if (!*(_QWORD *)(v5 + 8))
        goto LABEL_10;
      LODWORD(v11) = 0;
      v7 = *(const char **)v5;
    }
    else
    {
      if (!*(_BYTE *)(v5 + 23))
        goto LABEL_10;
      LODWORD(v11) = 0;
      v7 = (const char *)v5;
    }
    LODWORD(v11) = strtoul(v7, 0, 10);
    if ((_DWORD)v11)
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)a1, (unsigned int *)&v11, &v11);
LABEL_10:
    v5 += 24;
  }
  v11 = (void **)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_1BEE23C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t deviceEventsFromString(std::string *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  size_t v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  ims::tokenize(a1, &v15, 0x2Cu);
  v1 = v15;
  v2 = v16;
  if (v15 == v16)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      ims::chomp((std::string *)v1, "\r\n\t ", 3);
      v4 = *(char *)(v1 + 23);
      if (v4 >= 0)
        v5 = *(unsigned __int8 *)(v1 + 23);
      else
        v5 = *(_QWORD *)(v1 + 8);
      switch(v5)
      {
        case 0xAuLL:
          if (v4 >= 0)
            v6 = (_QWORD *)v1;
          else
            v6 = *(_QWORD **)v1;
          if (memcmp(v6, "AudioReady", v5))
          {
            v7 = memcmp(v6, "SubEnabled", v5);
            v8 = v3 | 0x200;
            goto LABEL_34;
          }
          v3 = v3 | 8;
          break;
        case 0xBuLL:
          if (v4 >= 0)
            v9 = (_QWORD *)v1;
          else
            v9 = *(_QWORD **)v1;
          if (*v9 != *(_QWORD *)"SimInserted" || *(_QWORD *)((char *)v9 + 3) != *(_QWORD *)"Inserted")
          {
            v7 = memcmp(v9, "SubDisabled", v5);
            v8 = v3 | 0x100;
            goto LABEL_34;
          }
          v3 = v3 | 1;
          break;
        case 0x13uLL:
          if (v4 >= 0)
            v11 = (_QWORD *)v1;
          else
            v11 = *(_QWORD **)v1;
          if (memcmp(v11, "AirplaneModeToggled", v5))
          {
            v7 = memcmp(v11, "AirplaneModeEnabled", v5);
            v8 = v3 | 0x20;
            goto LABEL_34;
          }
          v3 = v3 | 2;
          break;
        case 0x14uLL:
          if (v4 >= 0)
            v12 = (_QWORD *)v1;
          else
            v12 = *(_QWORD **)v1;
          if (memcmp(v12, "AccessNetworkChanged", v5))
          {
            v7 = memcmp(v12, "AirplaneModeDisabled", v5);
            v8 = v3 | 0x40;
            goto LABEL_34;
          }
          v3 = v3 | 4;
          break;
        case 0x15uLL:
          if (v4 >= 0)
            v13 = (_QWORD *)v1;
          else
            v13 = *(_QWORD **)v1;
          v7 = memcmp(v13, "ServingNetworkChanged", v5);
          v8 = v3 | 0x80;
LABEL_34:
          if (v7)
            v3 = v3;
          else
            v3 = v8;
          break;
        default:
          break;
      }
      v1 += 24;
    }
    while (v1 != v2);
  }
  v18 = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  return v3;
}

void sub_1BEE23EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL SipRegistrationConfig::honorRetryAfterForStatusCode(SipRegistrationConfig *this, unsigned int a2)
{
  uint64_t v3;
  _DWORD *v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  char *v10;
  unsigned int v11;
  BOOL v12;
  char **v13;

  if (*((_BYTE *)this + 1348))
    return 1;
  v3 = *((_QWORD *)this + 158);
  if (!v3)
    goto LABEL_14;
  v4 = (_DWORD *)((char *)this + 1264);
  do
  {
    v5 = *(_DWORD *)(v3 + 28);
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (v6)
      v4 = (_DWORD *)v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 != (_DWORD *)((char *)this + 1264) && v4[7] <= a2)
    return 0;
LABEL_14:
  if (!*((_QWORD *)this + 156))
    return 1;
  v8 = (char *)this + 1240;
  v9 = (char *)*((_QWORD *)this + 155);
  if (!v9)
    goto LABEL_26;
  v10 = (char *)this + 1240;
  do
  {
    v11 = *((_DWORD *)v9 + 7);
    v12 = v11 >= a2;
    if (v11 >= a2)
      v13 = (char **)v9;
    else
      v13 = (char **)(v9 + 8);
    if (v12)
      v10 = v9;
    v9 = *v13;
  }
  while (*v13);
  if (v10 == v8 || *((_DWORD *)v10 + 7) > a2)
LABEL_26:
    v10 = (char *)this + 1240;
  return v10 != v8;
}

uint64_t SipRegistrationConfig::isValid(SipRegistrationConfig *this)
{
  uint64_t result;

  result = SipUri::isValidUri((SipRegistrationConfig *)((char *)this + 72));
  if (!(_DWORD)result)
    return result;
  if (*((char *)this + 911) < 0)
  {
    if (*((_QWORD *)this + 112))
      goto LABEL_12;
  }
  else if (*((_BYTE *)this + 911))
  {
    goto LABEL_12;
  }
  if (*((char *)this + 111) < 0)
  {
    if (!*((_QWORD *)this + 12))
    {
LABEL_10:
      result = *((_QWORD *)this + 15);
      if (!result)
        return result;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
      if (!(_DWORD)result)
        return result;
    }
  }
  else if (!*((_BYTE *)this + 111))
  {
    goto LABEL_10;
  }
LABEL_12:
  if (*((char *)this + 959) < 0)
  {
    if (*((_QWORD *)this + 118))
      return *(_QWORD *)this != *((_QWORD *)this + 1);
  }
  else if (*((_BYTE *)this + 959))
  {
    return *(_QWORD *)this != *((_QWORD *)this + 1);
  }
  return 0;
}

void deviceEventsToString(__int16 a1@<W0>, _QWORD *a2@<X8>)
{
  std::vector<std::string>::pointer end;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::vector<std::string>::pointer v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::vector<std::string>::pointer v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::vector<std::string>::pointer v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  std::string *v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::vector<std::string>::pointer v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  std::string *v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::vector<std::string>::pointer v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  std::string *v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  std::vector<std::string>::pointer v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  std::string *v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  std::vector<std::string>::pointer v67;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  std::string *v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  std::vector<std::string>::pointer v76;
  __int128 v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  std::string *v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  void *__p[2];
  std::string::size_type v86;
  std::vector<std::string> v87;
  std::__split_buffer<std::string> __v;

  memset(&v87, 0, sizeof(v87));
  if ((a1 & 1) == 0)
    goto LABEL_15;
  std::string::basic_string[abi:ne180100]<0>(__p, "SimInserted");
  end = v87.__end_;
  if (v87.__end_ < v87.__end_cap_.__value_)
  {
    v5 = *(_OWORD *)__p;
    v87.__end_->__r_.__value_.__r.__words[2] = v86;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v5;
    v87.__end_ = end + 1;
    if ((a1 & 2) == 0)
      goto LABEL_30;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(__p, "AirplaneModeToggled");
    v13 = v87.__end_;
    if (v87.__end_ >= v87.__end_cap_.__value_)
    {
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
      v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v16)
        v16 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v16;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
      if (v17)
        v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v87.__end_cap_, v17);
      else
        v18 = 0;
      v19 = v18 + v15;
      __v.__first_ = v18;
      __v.__begin_ = v19;
      __v.__end_cap_.__value_ = &v18[v17];
      v20 = *(_OWORD *)__p;
      v19->__r_.__value_.__r.__words[2] = v86;
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
      __p[1] = 0;
      v86 = 0;
      __p[0] = 0;
      __v.__end_ = v19 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v87, &__v);
      v21 = v87.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v87.__end_ = v21;
      if (SHIBYTE(v86) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v14 = *(_OWORD *)__p;
      v87.__end_->__r_.__value_.__r.__words[2] = v86;
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      v87.__end_ = v13 + 1;
    }
    goto LABEL_30;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
  v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555
     ? 0xAAAAAAAAAAAAAAALL
     : v7;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
  v9 = v8
     ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v87.__end_cap_, v8)
     : 0;
  v10 = v9 + v6;
  __v.__first_ = v9;
  __v.__begin_ = v10;
  __v.__end_cap_.__value_ = &v9[v8];
  v11 = *(_OWORD *)__p;
  v10->__r_.__value_.__r.__words[2] = v86;
  *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  __p[1] = 0;
  v86 = 0;
  __p[0] = 0;
  __v.__end_ = v10 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v87, &__v);
  v12 = v87.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v87.__end_ = v12;
  if (SHIBYTE(v86) < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 2) != 0)
      goto LABEL_16;
  }
  else
  {
LABEL_15:
    if ((a1 & 2) != 0)
      goto LABEL_16;
  }
  if ((a1 & 4) == 0)
    goto LABEL_44;
LABEL_30:
  std::string::basic_string[abi:ne180100]<0>(__p, "AccessNetworkChanged");
  v22 = v87.__end_;
  if (v87.__end_ < v87.__end_cap_.__value_)
  {
    v23 = *(_OWORD *)__p;
    v87.__end_->__r_.__value_.__r.__words[2] = v86;
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
    v87.__end_ = v22 + 1;
    if ((a1 & 8) == 0)
      goto LABEL_59;
LABEL_45:
    std::string::basic_string[abi:ne180100]<0>(__p, "AudioReady");
    v31 = v87.__end_;
    if (v87.__end_ >= v87.__end_cap_.__value_)
    {
      v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
      v34 = v33 + 1;
      if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v34)
        v34 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555)
        v35 = 0xAAAAAAAAAAAAAAALL;
      else
        v35 = v34;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
      if (v35)
        v36 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v87.__end_cap_, v35);
      else
        v36 = 0;
      v37 = v36 + v33;
      __v.__first_ = v36;
      __v.__begin_ = v37;
      __v.__end_cap_.__value_ = &v36[v35];
      v38 = *(_OWORD *)__p;
      v37->__r_.__value_.__r.__words[2] = v86;
      *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
      __p[1] = 0;
      v86 = 0;
      __p[0] = 0;
      __v.__end_ = v37 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v87, &__v);
      v39 = v87.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v87.__end_ = v39;
      if (SHIBYTE(v86) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v32 = *(_OWORD *)__p;
      v87.__end_->__r_.__value_.__r.__words[2] = v86;
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
      v87.__end_ = v31 + 1;
    }
    goto LABEL_59;
  }
  v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
  v25 = v24 + 1;
  if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v25)
    v25 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
  v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v25;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
  v27 = v26
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v87.__end_cap_, v26): 0;
  v28 = v27 + v24;
  __v.__first_ = v27;
  __v.__begin_ = v28;
  __v.__end_cap_.__value_ = &v27[v26];
  v29 = *(_OWORD *)__p;
  v28->__r_.__value_.__r.__words[2] = v86;
  *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
  __p[1] = 0;
  v86 = 0;
  __p[0] = 0;
  __v.__end_ = v28 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v87, &__v);
  v30 = v87.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v87.__end_ = v30;
  if (SHIBYTE(v86) < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 8) != 0)
      goto LABEL_45;
  }
  else
  {
LABEL_44:
    if ((a1 & 8) != 0)
      goto LABEL_45;
  }
  if ((a1 & 0x80) == 0)
    goto LABEL_73;
LABEL_59:
  std::string::basic_string[abi:ne180100]<0>(__p, "ServingNetworkChanged");
  v40 = v87.__end_;
  if (v87.__end_ < v87.__end_cap_.__value_)
  {
    v41 = *(_OWORD *)__p;
    v87.__end_->__r_.__value_.__r.__words[2] = v86;
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
    v87.__end_ = v40 + 1;
    if ((a1 & 0x40) == 0)
      goto LABEL_88;
LABEL_74:
    std::string::basic_string[abi:ne180100]<0>(__p, "AirplaneModeDisabled");
    v49 = v87.__end_;
    if (v87.__end_ >= v87.__end_cap_.__value_)
    {
      v51 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
      v52 = v51 + 1;
      if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v52)
        v52 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555)
        v53 = 0xAAAAAAAAAAAAAAALL;
      else
        v53 = v52;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
      if (v53)
        v54 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v87.__end_cap_, v53);
      else
        v54 = 0;
      v55 = v54 + v51;
      __v.__first_ = v54;
      __v.__begin_ = v55;
      __v.__end_cap_.__value_ = &v54[v53];
      v56 = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v86;
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
      __p[1] = 0;
      v86 = 0;
      __p[0] = 0;
      __v.__end_ = v55 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v87, &__v);
      v57 = v87.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v87.__end_ = v57;
      if (SHIBYTE(v86) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v50 = *(_OWORD *)__p;
      v87.__end_->__r_.__value_.__r.__words[2] = v86;
      *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
      v87.__end_ = v49 + 1;
    }
    goto LABEL_88;
  }
  v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
  v43 = v42 + 1;
  if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v43)
    v43 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
  v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v43;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
  v45 = v44
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v87.__end_cap_, v44): 0;
  v46 = v45 + v42;
  __v.__first_ = v45;
  __v.__begin_ = v46;
  __v.__end_cap_.__value_ = &v45[v44];
  v47 = *(_OWORD *)__p;
  v46->__r_.__value_.__r.__words[2] = v86;
  *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
  __p[1] = 0;
  v86 = 0;
  __p[0] = 0;
  __v.__end_ = v46 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v87, &__v);
  v48 = v87.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v87.__end_ = v48;
  if (SHIBYTE(v86) < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x40) != 0)
      goto LABEL_74;
  }
  else
  {
LABEL_73:
    if ((a1 & 0x40) != 0)
      goto LABEL_74;
  }
  if ((a1 & 0x20) == 0)
    goto LABEL_102;
LABEL_88:
  std::string::basic_string[abi:ne180100]<0>(__p, "AirplaneModeEnabled");
  v58 = v87.__end_;
  if (v87.__end_ < v87.__end_cap_.__value_)
  {
    v59 = *(_OWORD *)__p;
    v87.__end_->__r_.__value_.__r.__words[2] = v86;
    *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
    v87.__end_ = v58 + 1;
    if ((a1 & 0x200) == 0)
      goto LABEL_117;
    goto LABEL_103;
  }
  v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
  v61 = v60 + 1;
  if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v61)
    v61 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
  v62 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v61;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
  v63 = v62
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v87.__end_cap_, v62): 0;
  v64 = v63 + v60;
  __v.__first_ = v63;
  __v.__begin_ = v64;
  __v.__end_cap_.__value_ = &v63[v62];
  v65 = *(_OWORD *)__p;
  v64->__r_.__value_.__r.__words[2] = v86;
  *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
  __p[1] = 0;
  v86 = 0;
  __p[0] = 0;
  __v.__end_ = v64 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v87, &__v);
  v66 = v87.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v87.__end_ = v66;
  if (SHIBYTE(v86) < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x200) == 0)
      goto LABEL_117;
  }
  else
  {
LABEL_102:
    if ((a1 & 0x200) == 0)
      goto LABEL_117;
  }
LABEL_103:
  std::string::basic_string[abi:ne180100]<0>(__p, "SubEnabled");
  v67 = v87.__end_;
  if (v87.__end_ >= v87.__end_cap_.__value_)
  {
    v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
    v70 = v69 + 1;
    if (v69 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v70)
      v70 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555)
      v71 = 0xAAAAAAAAAAAAAAALL;
    else
      v71 = v70;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
    if (v71)
      v72 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v87.__end_cap_, v71);
    else
      v72 = 0;
    v73 = v72 + v69;
    __v.__first_ = v72;
    __v.__begin_ = v73;
    __v.__end_cap_.__value_ = &v72[v71];
    v74 = *(_OWORD *)__p;
    v73->__r_.__value_.__r.__words[2] = v86;
    *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
    __p[1] = 0;
    v86 = 0;
    __p[0] = 0;
    __v.__end_ = v73 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v87, &__v);
    v75 = v87.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v87.__end_ = v75;
    if (SHIBYTE(v86) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v68 = *(_OWORD *)__p;
    v87.__end_->__r_.__value_.__r.__words[2] = v86;
    *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
    v87.__end_ = v67 + 1;
  }
LABEL_117:
  if ((a1 & 0x100) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "SubDisabled");
    v76 = v87.__end_;
    if (v87.__end_ >= v87.__end_cap_.__value_)
    {
      v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
      v79 = v78 + 1;
      if (v78 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v79)
        v79 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555)
        v80 = 0xAAAAAAAAAAAAAAALL;
      else
        v80 = v79;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
      if (v80)
        v81 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v87.__end_cap_, v80);
      else
        v81 = 0;
      v82 = v81 + v78;
      __v.__first_ = v81;
      __v.__begin_ = v82;
      __v.__end_cap_.__value_ = &v81[v80];
      v83 = *(_OWORD *)__p;
      v82->__r_.__value_.__r.__words[2] = v86;
      *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v83;
      __p[1] = 0;
      v86 = 0;
      __p[0] = 0;
      __v.__end_ = v82 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v87, &__v);
      v84 = v87.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v87.__end_ = v84;
      if (SHIBYTE(v86) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v77 = *(_OWORD *)__p;
      v87.__end_->__r_.__value_.__r.__words[2] = v86;
      *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v77;
      v87.__end_ = v76 + 1;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, ",");
  ims::join<std::__wrap_iter<std::string const*>>((uint64_t)v87.__begin_, (uint64_t)v87.__end_, (uint64_t)&__v, a2);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1BEE24A30(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, char a8, uint64_t a9, char *__pa, std::__split_buffer<std::string> *a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a19);
  if (a15 < 0)
    operator delete(__pa);
  __pa = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void SDPMediaAudioSettings::~SDPMediaAudioSettings(void **this)
{
  *this = &off_1E78B97D0;
  if (*((char *)this + 303) < 0)
    operator delete(this[35]);
  SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)this);
}

{
  SDPMediaAudioSettings::~SDPMediaAudioSettings(this);
  JUMPOUT(0x1C3B87100);
}

BOOL SDPMediaAudioSettings::operator!=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;

  v2 = *(unsigned __int8 *)(a1 + 303);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 303);
  else
    v3 = *(_QWORD *)(a1 + 288);
  v4 = *(unsigned __int8 *)(a2 + 303);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 288);
  if (v3 != v4)
    return 1;
  v8 = (const void **)(a1 + 280);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)(a2 + 280);
  else
    v9 = *(unsigned __int8 **)(a2 + 280);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 288)))
      return 1;
  }
  else if (*(_BYTE *)(a1 + 303))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_16;
    }
    return 1;
  }
LABEL_16:
  if (*(unsigned __int16 *)(a1 + 304) != *(unsigned __int16 *)(a2 + 304)
    || *(unsigned __int16 *)(a1 + 306) != *(unsigned __int16 *)(a2 + 306)
    || *(unsigned __int16 *)(a1 + 308) != *(unsigned __int16 *)(a2 + 308)
    || *(unsigned __int16 *)(a1 + 312) != *(unsigned __int16 *)(a2 + 312)
    || *(unsigned __int16 *)(a1 + 314) != *(unsigned __int16 *)(a2 + 314)
    || SDPMediaAMRSettings::operator!=(a1 + 320, a2 + 320)
    || SDPMediaEVSSettings::operator!=(a1 + 360, a2 + 360))
  {
    return 1;
  }
  return SDPMediaSettings::operator!=(a1, a2);
}

BOOL SDPMediaAMRSettings::operator!=(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)
      || *(unsigned __int16 *)(a1 + 10) != *(unsigned __int16 *)(a2 + 10)
      || *(unsigned __int16 *)(a1 + 12) != *(unsigned __int16 *)(a2 + 12)
      || *(unsigned __int16 *)(a1 + 14) != *(unsigned __int16 *)(a2 + 14)
      || *(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16)
      || *(unsigned __int16 *)(a1 + 18) != *(unsigned __int16 *)(a2 + 18)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
      || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32);
}

BOOL SDPMediaEVSSettings::operator!=(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2
      || *(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8)
      || *(unsigned __int16 *)(a1 + 12) != *(unsigned __int16 *)(a2 + 12)
      || *(unsigned __int16 *)(a1 + 14) != *(unsigned __int16 *)(a2 + 14)
      || *(unsigned __int8 *)(a1 + 18) != *(unsigned __int8 *)(a2 + 18)
      || *(unsigned __int8 *)(a1 + 19) != *(unsigned __int8 *)(a2 + 19)
      || *(unsigned __int8 *)(a1 + 20) != *(unsigned __int8 *)(a2 + 20)
      || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
      || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)
      || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
      || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)
      || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)
      || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 41)
      || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48)
      || *(unsigned __int8 *)(a1 + 63) != *(unsigned __int8 *)(a2 + 63)
      || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64)
      || *(unsigned __int8 *)(a1 + 65) != *(unsigned __int8 *)(a2 + 65);
}

BOOL SDPMediaAudioSettings::valid(SDPMediaAudioSettings *this)
{
  return *((_QWORD *)this + 1)
      && *((_WORD *)this + 12)
      && *((_WORD *)this + 13)
      && *((_WORD *)this + 14) != 255
      && *((unsigned __int16 *)this + 15) != 255;
}

void SDPMediaAMRSettings::SDPMediaAMRSettings(SDPMediaAMRSettings *this, const SDPMediaFormatAMRParams *a2, const SDPMediaFormatAMRParams *a3, int a4, int a5, __int16 a6)
{
  unsigned int v11;
  __int16 v12;
  __int16 v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  BOOL v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  *(_QWORD *)this = &off_1E78B9808;
  *((_WORD *)this + 5) = 0;
  *(_DWORD *)((char *)this + 14) = 0x20000;
  *((_WORD *)this + 9) = 2;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  *((_BYTE *)this + 8) = *((_BYTE *)a3 + 43);
  v11 = (unsigned __int16)(*((_WORD *)a2 + 23) & *((_WORD *)a3 + 23));
  *((_WORD *)this + 6) = *((_WORD *)a2 + 23) & *((_WORD *)a3 + 23);
  if (((v11 >> a6) & 1) != 0)
  {
    v12 = a6;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if ((v11 & 1) != 0)
        v12 = v13;
      ++v13;
      v14 = v11 > 1;
      v11 >>= 1;
    }
    while (v14);
    std::string::basic_string[abi:ne180100]<0>(v21, "sdp.amr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::warn(ims::_logger, (uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Preferred mode: ", 16);
    *(_BYTE *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" can't be used, using mode: ", 28);
    *(_BYTE *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (v22 < 0)
      operator delete(v21[0]);
  }
  *((_WORD *)this + 5) = v12;
  *((_WORD *)this + 7) = *((_WORD *)a3 + 24);
  *((_WORD *)this + 8) = *((_WORD *)a3 + 26);
  *((_WORD *)this + 9) = *((_WORD *)a3 + 28);
  *((_WORD *)this + 10) = *((_WORD *)a3 + 30);
  if ((*(unsigned int (**)(const SDPMediaFormatAMRParams *))(*(_QWORD *)a2 + 64))(a2))
    v16 = (*(uint64_t (**)(const SDPMediaFormatAMRParams *))(*(_QWORD *)a3 + 64))(a3) ^ 1;
  else
    v16 = 1;
  *((_BYTE *)this + 22) = v16;
  *((_BYTE *)this + 23) = *((_BYTE *)a3 + 44);
  if (*((_BYTE *)a3 + 50))
    v17 = 1;
  else
    v17 = *((_BYTE *)a2 + 50) != 0;
  *((_BYTE *)this + 24) = v17;
  if (*((_BYTE *)a3 + 54))
    v18 = 1;
  else
    v18 = *((_BYTE *)a2 + 54) != 0;
  *((_BYTE *)this + 25) = v18;
  *((_BYTE *)this + 26) = *((_BYTE *)a3 + 58);
  *((_BYTE *)this + 27) = *((_BYTE *)a3 + 62);
  *((_QWORD *)this + 4) = SDPMediaAMRSettings::amrBandwidthASValue((SDPMediaAMRSettings *)*((unsigned __int16 *)this + 6), a4, a5, *((unsigned __int8 *)this + 8));
}

void sub_1BEE250F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaAMRSettings::amrBandwidthASValue(SDPMediaAMRSettings *this, int a2, int a3, int a4)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  BOOL v6;
  unsigned __int8 v7;
  uint64_t *v8;
  _WORD *v9;
  unsigned __int8 v10;
  _OWORD *v11;
  unsigned __int8 v12;
  _WORD *v13;
  unsigned __int8 v14;
  _OWORD *v15;
  unsigned __int8 v16;
  _WORD *v17;
  unsigned __int8 v18;
  _OWORD *v19;
  unsigned __int8 v20;
  _WORD *v21;
  unsigned __int8 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v29;
  __guard *v30;
  void *__p[2];
  char v32;
  void *v33[2];
  char v34;

  v4 = 0;
  v5 = 0;
  do
  {
    if ((this & 1) != 0)
      v4 = v5;
    ++v5;
    v6 = this > 1;
    LODWORD(this) = this >> 1;
  }
  while (v6);
  if (a2)
  {
    if (a4)
    {
      if (a3)
      {
        v7 = atomic_load((unsigned __int8 *)&_MergedGlobals_0);
        v8 = &qword_1ED70E7D8;
        if ((v7 & 1) == 0)
        {
          v30 = &_MergedGlobals_0;
          if (__cxa_guard_acquire(&_MergedGlobals_0))
          {
            qword_1ED70E7D8 = 0;
            qword_1ED70E7E0 = 0;
            qword_1ED70E7E8 = 0;
            v9 = operator new(0x12uLL);
            qword_1ED70E7D8 = (uint64_t)v9;
            v8 = &qword_1ED70E7D8;
            *(_OWORD *)v9 = xmmword_1BF29A060;
            v9[8] = 49;
            qword_1ED70E7E0 = (uint64_t)(v9 + 9);
            qword_1ED70E7E8 = (uint64_t)(v9 + 9);
LABEL_46:
            __cxa_guard_release(v30);
          }
        }
      }
      else
      {
        v16 = atomic_load((unsigned __int8 *)&qword_1ED70E790);
        v8 = &qword_1ED70E7F0;
        if ((v16 & 1) == 0)
        {
          v30 = &qword_1ED70E790;
          if (__cxa_guard_acquire(&qword_1ED70E790))
          {
            qword_1ED70E7F0 = 0;
            qword_1ED70E7F8 = 0;
            qword_1ED70E800 = 0;
            v17 = operator new(0x12uLL);
            qword_1ED70E7F0 = (uint64_t)v17;
            v8 = &qword_1ED70E7F0;
            *(_OWORD *)v17 = xmmword_1BF29A050;
            v17[8] = 41;
            qword_1ED70E7F8 = (uint64_t)(v17 + 9);
            qword_1ED70E800 = (uint64_t)(v17 + 9);
            goto LABEL_46;
          }
        }
      }
    }
    else if (a3)
    {
      v12 = atomic_load((unsigned __int8 *)&qword_1ED70E798);
      v8 = &qword_1ED70E808;
      if ((v12 & 1) == 0)
      {
        v30 = &qword_1ED70E798;
        if (__cxa_guard_acquire(&qword_1ED70E798))
        {
          qword_1ED70E808 = 0;
          qword_1ED70E810 = 0;
          qword_1ED70E818 = 0;
          v13 = operator new(0x12uLL);
          qword_1ED70E808 = (uint64_t)v13;
          v8 = &qword_1ED70E808;
          *(_OWORD *)v13 = xmmword_1BF29A040;
          v13[8] = 49;
          qword_1ED70E810 = (uint64_t)(v13 + 9);
          qword_1ED70E818 = (uint64_t)(v13 + 9);
          goto LABEL_46;
        }
      }
    }
    else
    {
      v20 = atomic_load((unsigned __int8 *)&qword_1ED70E7A0);
      v8 = &qword_1ED70E820;
      if ((v20 & 1) == 0)
      {
        v30 = &qword_1ED70E7A0;
        if (__cxa_guard_acquire(&qword_1ED70E7A0))
        {
          qword_1ED70E820 = 0;
          qword_1ED70E828 = 0;
          qword_1ED70E830 = 0;
          v21 = operator new(0x12uLL);
          qword_1ED70E820 = (uint64_t)v21;
          v8 = &qword_1ED70E820;
          *(_OWORD *)v21 = xmmword_1BF29A030;
          v21[8] = 41;
          qword_1ED70E828 = (uint64_t)(v21 + 9);
          qword_1ED70E830 = (uint64_t)(v21 + 9);
          goto LABEL_46;
        }
      }
    }
  }
  else if (a4)
  {
    if (a3)
    {
      v10 = atomic_load((unsigned __int8 *)&qword_1ED70E7A8);
      v8 = &qword_1ED70E838;
      if ((v10 & 1) == 0)
      {
        v30 = &qword_1ED70E7A8;
        if (__cxa_guard_acquire(&qword_1ED70E7A8))
        {
          qword_1ED70E838 = 0;
          qword_1ED70E840 = 0;
          qword_1ED70E848 = 0;
          v11 = operator new(0x10uLL);
          qword_1ED70E838 = (uint64_t)v11;
          v8 = &qword_1ED70E838;
          *v11 = xmmword_1BF29A020;
          qword_1ED70E840 = (uint64_t)(v11 + 1);
          qword_1ED70E848 = (uint64_t)(v11 + 1);
          goto LABEL_46;
        }
      }
    }
    else
    {
      v18 = atomic_load((unsigned __int8 *)&qword_1ED70E7B0);
      v8 = &qword_1ED70E850;
      if ((v18 & 1) == 0)
      {
        v30 = &qword_1ED70E7B0;
        if (__cxa_guard_acquire(&qword_1ED70E7B0))
        {
          qword_1ED70E850 = 0;
          qword_1ED70E858 = 0;
          qword_1ED70E860 = 0;
          v19 = operator new(0x10uLL);
          qword_1ED70E850 = (uint64_t)v19;
          v8 = &qword_1ED70E850;
          *v19 = xmmword_1BF29A010;
          qword_1ED70E858 = (uint64_t)(v19 + 1);
          qword_1ED70E860 = (uint64_t)(v19 + 1);
          goto LABEL_46;
        }
      }
    }
  }
  else if (a3)
  {
    v14 = atomic_load((unsigned __int8 *)&qword_1ED70E7B8);
    v8 = &qword_1ED70E868;
    if ((v14 & 1) == 0)
    {
      v30 = &qword_1ED70E7B8;
      if (__cxa_guard_acquire(&qword_1ED70E7B8))
      {
        qword_1ED70E868 = 0;
        qword_1ED70E870 = 0;
        qword_1ED70E878 = 0;
        v15 = operator new(0x10uLL);
        qword_1ED70E868 = (uint64_t)v15;
        v8 = &qword_1ED70E868;
        *v15 = xmmword_1BF29A000;
        qword_1ED70E870 = (uint64_t)(v15 + 1);
        qword_1ED70E878 = (uint64_t)(v15 + 1);
        goto LABEL_46;
      }
    }
  }
  else
  {
    v22 = atomic_load((unsigned __int8 *)&qword_1ED70E7C0);
    v8 = &qword_1ED70E880;
    if ((v22 & 1) == 0)
    {
      v30 = &qword_1ED70E7C0;
      if (__cxa_guard_acquire(&qword_1ED70E7C0))
      {
        qword_1ED70E880 = 0;
        qword_1ED70E888 = 0;
        qword_1ED70E890 = 0;
        v29 = operator new(0x10uLL);
        qword_1ED70E880 = (uint64_t)v29;
        v8 = &qword_1ED70E880;
        *v29 = xmmword_1BF299FF0;
        qword_1ED70E888 = (uint64_t)(v29 + 1);
        qword_1ED70E890 = (uint64_t)(v29 + 1);
        goto LABEL_46;
      }
    }
  }
  v23 = *v8;
  v24 = (v8[1] - *v8) >> 1;
  if (v24 <= v4)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "sdp");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v26 = ImsLogger::error(ims::_logger, (uint64_t)v33, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"SDPAudioSettingsBuilder::amrBandwidthASVAlue relevantBWValues array only has ", 77);
    *(_BYTE *)(v26 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v26 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)" values, highest mode is: ", 26);
    *(_BYTE *)(v26 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v26 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v26 + 17) = 0;
    if (v32 < 0)
      operator delete(__p[0]);
    if (v34 < 0)
      operator delete(v33[0]);
    v23 = *v8;
    v27 = v8[1] - *v8;
    v25 = (unsigned __int16)((v27 >> 1) - 1);
    v24 = v27 >> 1;
  }
  else
  {
    v25 = v4;
  }
  if (v24 <= v25)
    std::vector<unsigned short>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned __int16 *)(v23 + 2 * v25);
}

void sub_1BEE255D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_guard_abort(&qword_1ED70E7C0);
  _Unwind_Resume(a1);
}

void SDPMediaEVSSettings::SDPMediaEVSSettings(SDPMediaEVSSettings *this, const SDPMediaFormatEVSParams *a2, const SDPMediaFormatEVSParams *a3, int a4, const ImsPrefs *a5)
{
  uint64_t v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **RestrictSessionEVSBandwidthKey;
  ImsPrefs *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  void **v22;
  void *v23;
  unsigned int v24;
  int v25;
  __int16 v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  __int16 v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  char v36;
  char v37;
  BOOL v38;
  void *__p[2];
  char v40;
  void *v41[2];
  char v42;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 13) = 0;
  *((_QWORD *)this + 3) = 0x500000005;
  *((_DWORD *)this + 8) = 6;
  *((_WORD *)this + 20) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 131074;
  *((_WORD *)this + 32) = 0;
  v10 = *((_QWORD *)a3 + 7);
  if (v10 == 2096640)
  {
    v12 = (unsigned int *)((char *)a3 + 84);
    v11 = *((_DWORD *)a3 + 21);
    v13 = *((_QWORD *)a2 + 7);
    v14 = 2096640;
    switch(v11)
    {
      case 0:
        v14 = 65024;
        goto LABEL_14;
      case 3:
        v14 = 2093056;
        goto LABEL_14;
      case 5:
        v14 = 2080768;
        goto LABEL_14;
      case 6:
        v15 = v13 & 0x1FFE00;
        goto LABEL_16;
      default:
LABEL_14:
        v15 = v14 & v13;
LABEL_16:
        *(_QWORD *)this = v15;
        break;
    }
  }
  else
  {
    *(_QWORD *)this = *((_QWORD *)a2 + 7) & v10;
    v12 = (unsigned int *)((char *)a3 + 84);
    v11 = *((_DWORD *)a3 + 21);
    if (v11 == 6)
    {
      if ((v10 & 0xFE00) != 0)
      {
        if ((v10 & 0x3000) != 0)
          v11 = 4;
        else
          v11 = 2;
        if ((v10 & 0xC000) != 0)
          v11 = 6;
      }
      else
      {
        v11 = 5;
      }
    }
  }
  if (*((_DWORD *)a2 + 21) < v11)
    v11 = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 9) = v11;
  RestrictSessionEVSBandwidthKey = (void **)ImsPrefs::getRestrictSessionEVSBandwidthKey(this);
  v17 = (ImsPrefs *)ImsPrefs::prefWithKey(a5, RestrictSessionEVSBandwidthKey);
  if (v17)
  {
    v17 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v17 + 40))(v17);
    if ((v17 & 1) == 0)
    {
LABEL_21:
      v18 = *v12;
      goto LABEL_25;
    }
  }
  else if (!*((_BYTE *)RestrictSessionEVSBandwidthKey + 57))
  {
    goto LABEL_21;
  }
  v18 = *v12;
  if (*((_DWORD *)a2 + 21) < (signed int)*v12)
    v18 = *((_DWORD *)a2 + 21);
LABEL_25:
  *((_DWORD *)this + 8) = v18;
  if (v18 > 4)
    v19 = 5;
  else
    v19 = dword_1BF29A0C8[v18];
  *((_DWORD *)this + 6) = v19;
  v20 = *((int *)this + 9);
  if (v20 > 4)
    v21 = 5;
  else
    v21 = dword_1BF29A0C8[v20];
  *((_DWORD *)this + 7) = v21;
  v22 = (void **)ImsPrefs::getRestrictSessionEVSBandwidthKey(v17);
  v23 = ImsPrefs::prefWithKey(a5, v22);
  if (v23)
  {
    if (((*(uint64_t (**)(void *))(*(_QWORD *)v23 + 40))(v23) & 1) == 0)
    {
LABEL_33:
      if (*((unsigned __int16 *)a2 + 56) <= 2u && *((_WORD *)a2 + 40) == 7 && !*((_BYTE *)a3 + 45))
        v24 = 7;
      else
        v24 = *((unsigned __int16 *)a3 + 40);
      goto LABEL_39;
    }
  }
  else if (!*((_BYTE *)v22 + 57))
  {
    goto LABEL_33;
  }
  v24 = (unsigned __int16)(*((_WORD *)a2 + 40) & *((_WORD *)a3 + 40));
LABEL_39:
  v25 = 0;
  v26 = 0;
  *((_WORD *)this + 4) = v24;
  v27 = *((unsigned __int8 *)a3 + 45);
  *((_BYTE *)this + 16) = v27;
  v28 = *(_QWORD *)this;
  v29 = *(_QWORD *)this;
  do
  {
    if ((v29 & 1) != 0)
      v26 = v25;
    ++v25;
    v30 = v29 > 1;
    v29 >>= 1;
  }
  while (v30);
  if (v27 && ((v24 >> v26) & 1) == 0)
  {
    v31 = 0;
    v32 = 0;
    do
    {
      if ((v24 & 1) != 0)
        v31 = v32;
      ++v32;
      v30 = v24 > 1;
      v24 >>= 1;
    }
    while (v30);
    std::string::basic_string[abi:ne180100]<0>(v41, "sdp.evs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v33 = ImsLogger::warn(ims::_logger, (uint64_t)v41, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"Preferred mode: ", 16);
    *(_BYTE *)(v33 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v33 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" can't be used in EVS AMR-WB IO mode, using mode: ", 50);
    *(_BYTE *)(v33 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v33 + 17) = 0;
    if (v40 < 0)
      operator delete(__p[0]);
    if (v42 < 0)
      operator delete(v41[0]);
    v28 = *(_QWORD *)this;
    v26 = v31;
  }
  *((_WORD *)this + 5) = v26;
  v34 = *((_WORD *)a3 + 24);
  *((_WORD *)this + 6) = v34;
  *((_WORD *)this + 7) = v34;
  *((_BYTE *)this + 17) = *((_BYTE *)a3 + 46);
  if ((v28 & 0x2000) != 0)
    v35 = *((_BYTE *)a3 + 99);
  else
    v35 = -1;
  *((_BYTE *)this + 18) = v35;
  *((_BYTE *)this + 19) = v35;
  *((_BYTE *)this + 20) = *((_BYTE *)a3 + 98);
  v36 = *((_BYTE *)a3 + 44);
  *((_BYTE *)this + 40) = v36;
  *((_BYTE *)this + 41) = v36;
  *((_QWORD *)this + 6) = SDPMediaEVSSettings::evsBandwidthASValue(v28, (SDPMediaAMRSettings *)*((unsigned __int16 *)this + 4), *((unsigned __int8 *)this + 16), a4);
  *((_WORD *)this + 28) = *((_WORD *)a3 + 50);
  *(_DWORD *)((char *)this + 58) = *(_DWORD *)((char *)a3 + 102);
  if ((*(unsigned int (**)(const SDPMediaFormatEVSParams *))(*(_QWORD *)a2 + 64))(a2))
    v37 = (*(uint64_t (**)(const SDPMediaFormatEVSParams *))(*(_QWORD *)a3 + 64))(a3) ^ 1;
  else
    v37 = 1;
  *((_BYTE *)this + 62) = v37;
  if (*((_BYTE *)a3 + 106))
    v38 = 1;
  else
    v38 = *((_BYTE *)a2 + 106) != 0;
  *((_BYTE *)this + 63) = v38;
  *((_WORD *)this + 32) = *(_WORD *)((char *)a3 + 107);
}

void sub_1BEE25AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaEVSSettings::evsBandwidthASValue(unint64_t this, SDPMediaAMRSettings *a2, int a3, int a4)
{
  unsigned __int16 v5;
  unsigned __int16 v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t *v9;
  _DWORD *v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  __guard *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  if (a3)
    return SDPMediaAMRSettings::amrBandwidthASValue(a2, 1, a4, 1);
  v5 = 0;
  v6 = 0;
  v7 = 1024;
  do
  {
    if ((v7 & this) != 0)
      v5 = v6;
    ++v6;
    v7 *= 2;
  }
  while (v7);
  if (a4)
  {
    v8 = atomic_load((unsigned __int8 *)&qword_1ED70E7C8);
    v9 = &qword_1ED70E898;
    if ((v8 & 1) != 0)
      goto LABEL_12;
    v18 = &qword_1ED70E7C8;
    if (!__cxa_guard_acquire(&qword_1ED70E7C8))
      goto LABEL_12;
    qword_1ED70E898 = 0;
    qword_1ED70E8A0 = 0;
    qword_1ED70E8A8 = 0;
    v10 = operator new(0x16uLL);
    qword_1ED70E898 = (uint64_t)v10;
    v9 = &qword_1ED70E898;
    *(_OWORD *)v10 = xmmword_1BF29A080;
    v10[4] = 7929945;
    *((_WORD *)v10 + 10) = 153;
    qword_1ED70E8A0 = (uint64_t)v10 + 22;
    qword_1ED70E8A8 = (uint64_t)v10 + 22;
  }
  else
  {
    v11 = atomic_load((unsigned __int8 *)&qword_1ED70E7D0);
    v9 = &qword_1ED70E8B0;
    if ((v11 & 1) != 0)
      goto LABEL_12;
    v18 = &qword_1ED70E7D0;
    if (!__cxa_guard_acquire(&qword_1ED70E7D0))
      goto LABEL_12;
    qword_1ED70E8B0 = 0;
    qword_1ED70E8B8 = 0;
    qword_1ED70E8C0 = 0;
    v17 = operator new(0x16uLL);
    qword_1ED70E8B0 = (uint64_t)v17;
    v9 = &qword_1ED70E8B0;
    *(_OWORD *)v17 = xmmword_1BF29A070;
    v17[4] = 7405649;
    *((_WORD *)v17 + 10) = 145;
    qword_1ED70E8B8 = (uint64_t)v17 + 22;
    qword_1ED70E8C0 = (uint64_t)v17 + 22;
  }
  __cxa_guard_release(v18);
LABEL_12:
  v12 = *v9;
  v13 = (v9[1] - *v9) >> 1;
  if (v13 <= v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "sdp");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"SDPAudioSettingsBuilder::evsBandwidthASVAlue relevantBWValues array only has ", 77);
    *(_BYTE *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" values, highest mode is: ", 26);
    *(_BYTE *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (v22 < 0)
      operator delete(v21[0]);
    v12 = *v9;
    v16 = v9[1] - *v9;
    v14 = (unsigned __int16)((v16 >> 1) - 1);
    v13 = v16 >> 1;
  }
  else
  {
    v14 = v5;
  }
  if (v13 <= v14)
    std::vector<unsigned short>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned __int16 *)(v12 + 2 * v14);
}

void sub_1BEE25D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_guard_abort(&qword_1ED70E7D0);
  _Unwind_Resume(a1);
}

void SDPMediaAMRSettings::~SDPMediaAMRSettings(SDPMediaAMRSettings *this)
{
  JUMPOUT(0x1C3B87100);
}

void std::vector<unsigned short>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void SipAcceptHeader::~SipAcceptHeader(char **this)
{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipMultiStringHeader *SipAcceptHeader::clone(SipAcceptHeader *this)
{
  SipMultiStringHeader *v2;

  v2 = (SipMultiStringHeader *)operator new();
  SipMultiStringHeader::SipMultiStringHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78B9850;
  *((_BYTE *)v2 + 56) = 0;
  return v2;
}

void sub_1BEE25ECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

uint64_t SipMultiStringHeader::allowsDuplicates(SipMultiStringHeader *this)
{
  return 1;
}

uint64_t SipMultiStringHeader::allowsMerging(SipMultiStringHeader *this)
{
  return 1;
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

SipState *BambiConferenceCallState::BambiConferenceCallState(SipState *a1, _QWORD *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;

  v4 = *a2;
  v5 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(*a2 + 360));
  SipState::SipState(a1, *(const SipUserAgent **)(*(_QWORD *)(v4 + 352) + 144));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *((_QWORD *)a1 + 24) = 0;
  *((_QWORD *)a1 + 25) = 0;
  *(_QWORD *)a1 = &off_1E78B98E8;
  *((_QWORD *)a1 + 1) = &unk_1E78B9948;
  *((_QWORD *)a1 + 26) = 0;
  *((_QWORD *)a1 + 27) = 0;
  v8 = *a2;
  v9 = a2[1];
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = (std::__shared_weak_count *)*((_QWORD *)a1 + 27);
    *((_QWORD *)a1 + 26) = v8;
    *((_QWORD *)a1 + 27) = v9;
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    *((_QWORD *)a1 + 26) = v8;
    *((_QWORD *)a1 + 27) = 0;
  }
  return a1;
}

void sub_1BEE26024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t BambiConferenceCallState::stateMachine(BambiConferenceCallState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 26);
  if (v5)
    v6 = v5 + 1888;
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 26);
  if (v5)
    v6 = v5 + 1888;
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void BambiConferenceCallState::participants(BambiConferenceCallState *this, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void **v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void **v10[2];
  _QWORD v11[3];

  memset(v11, 0, sizeof(v11));
  v3 = *(std::__shared_weak_count **)(a2 + 216);
  if (v3 && (v5 = std::__shared_weak_count::lock(v3), (v10[1] = (void **)&v5->__vftable) != 0))
  {
    v6 = v5;
    v10[0] = *(void ***)(a2 + 208);
    v7 = v10[0];
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    if (v7)
      std::vector<std::shared_ptr<BambiConferenceParticipant>>::__init_with_size[abi:ne180100]<std::shared_ptr<BambiConferenceParticipant>*,std::shared_ptr<BambiConferenceParticipant>*>((char *)this, v7[233], v7[234], ((_BYTE *)v7[234] - (_BYTE *)v7[233]) >> 4);
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  v10[0] = (void **)v11;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v10);
}

void sub_1BEE26204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  a10 = (void **)&a12;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

SipState *BambiConferenceCallWaitingForHoldState::BambiConferenceCallWaitingForHoldState(SipState *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  BambiConferenceCallState::BambiConferenceCallState(a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)a1 = &off_1E78B9978;
  *((_QWORD *)a1 + 1) = &unk_1E78B99E0;
  return a1;
}

void sub_1BEE262C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiConferenceCallWaitingForHoldState::enterState(BambiConferenceCallWaitingForHoldState *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unsigned int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v24 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2 && (v24 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v3 = *((_QWORD *)this + 26);
    v23 = v3;
  }
  else
  {
    v3 = 0;
  }
  v5 = *((_QWORD *)this + 24);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  if (v3)
  {
    v9 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v3 + 360));
    __p[0] = *(void **)(v3 + 352);
    __p[1] = v9;
    v10 = *(_DWORD *)(SipUserAgent::config(*((SipUserAgent **)__p[0] + 18)) + 1124);
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    v10 = 15000;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "WaitingForHoldTimeout");
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v26 = 0;
  v15 = operator new(0x20uLL);
  *v15 = &off_1E78B9D40;
  v15[1] = this;
  v15[2] = v5;
  v15[3] = v4;
  v26 = v15;
  SipTimerContainer::startTimer((_QWORD *)this + 3, (uint64_t)__p, (uint64_t)v25, v10, 0);
  v16 = v26;
  if (v26 == v25)
  {
    v17 = 4;
    v16 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_23;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_23:
  if (v22 < 0)
    operator delete(__p[0]);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  v18 = v24;
  if (v24)
  {
    v19 = (unint64_t *)&v24->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1BEE264D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  if (v20)
  {
    std::__shared_weak_count::__release_weak(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void BambiConferenceCallWaitingForHoldState::handleTimer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  BambiCall *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *__p;
  std::__shared_weak_count *v36;
  char v37;
  void *v38;
  uint64_t *v39;
  char v40;
  void **v41;
  std::__shared_weak_count *v42;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2 == 21)
  {
    v4 = v3 >= 0 ? (uint64_t *)a2 : *(uint64_t **)a2;
    v5 = *v4;
    v6 = v4[1];
    v7 = *(uint64_t *)((char *)v4 + 13);
    v8 = v5 == 0x46676E6974696157 && v6 == 0x6954646C6F48726FLL;
    if (v8 && v7 == 0x74756F656D695464)
    {
      v41 = 0;
      v42 = 0;
      v11 = *(std::__shared_weak_count **)(a1 + 216);
      if (v11 && (v42 = std::__shared_weak_count::lock(v11)) != 0 && (v41 = *(void ***)(a1 + 208)) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v38, "bambi.conf");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v12 = ImsLogger::debug(ims::_logger, (uint64_t)&v38, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Timed out while waiting for initial participants to go on hold", 62);
        *(_BYTE *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v12 + 17) = 0;
        if (v37 < 0)
          operator delete(__p);
        if (v40 < 0)
          operator delete(v38);
        BambiConferenceCallState::participants((BambiConferenceCallState *)&v38, a1);
        v13 = (uint64_t *)v38;
        v14 = v39;
        while (v13 != v14)
        {
          v15 = *v13;
          v16 = (std::__shared_weak_count *)v13[1];
          __p = (void *)*v13;
          v36 = v16;
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(p_shared_owners);
            while (__stxr(v18 + 1, p_shared_owners));
            v19 = (BambiCall *)v41;
            v34 = v16;
            do
              v20 = __ldxr(p_shared_owners);
            while (__stxr(v20 + 1, p_shared_owners));
          }
          else
          {
            v19 = (BambiCall *)v41;
            v34 = 0;
          }
          v33 = v15;
          BambiConferenceCall::setParticipantState(v19, &v33, 10);
          v21 = v34;
          if (v34)
          {
            v22 = (unint64_t *)&v34->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          v24 = v36;
          if (v36)
          {
            v25 = (unint64_t *)&v36->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v13 += 2;
        }
        __p = &v38;
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        BambiConferenceCallState::participants((BambiConferenceCallState *)&v38, a1);
        v28 = (uint64_t *)v38;
        v29 = v39;
        __p = &v38;
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (v28 == v29)
          BambiConferenceCall::cleanupOnTimeout(v41);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v38, "bambi.conf");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v27 = ImsLogger::debug(ims::_logger, (uint64_t)&v38, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"handleTimer", 11);
        *(_BYTE *)(v27 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)" NULL conference call", 21);
        *(_BYTE *)(v27 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v27 + 17) = 0;
        if (v37 < 0)
          operator delete(__p);
        if (v40 < 0)
          operator delete(v38);
      }
      v30 = v42;
      if (v42)
      {
        v31 = (unint64_t *)&v42->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
  }
}

void sub_1BEE268E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22 - 48);
  _Unwind_Resume(a1);
}

void BambiConferenceCallWaitingForHoldState::handleParticipantStateChange(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  std::string v23;
  std::string __p;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  char v31;

  if ((a4 & 0xFFFFFFF7) != 2)
    return;
  v4 = a1;
  BambiConferenceCallState::participants((BambiConferenceCallState *)&v29, a1);
  v6 = v29;
  v5 = v30;
  if (v29 == v30)
  {
    v27[0] = &v29;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  }
  else
  {
    v21 = v4;
    v7 = 0;
    do
    {
      v9 = *v6;
      v8 = (std::__shared_weak_count *)v6[1];
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(v27, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(v25, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v12 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"checkForHeldParticipants: participant ", 38);
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 + 264) + 40))(v9 + 264, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" is in state ", 13);
      *(_BYTE *)(v12 + 17) = 0;
      v22 = *(_DWORD *)(v9 + 240);
      ims::toString<BambiCallParticipant::ParticipantState>(&v22, &v23);
      LoggableString::LoggableString(&__p, &v23);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 40))(v12, &__p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v12 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (v26 < 0)
        operator delete(v25[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      if (*(int *)(v9 + 240) <= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v27, "bambi.conf");
        std::string::basic_string[abi:ne180100]<0>(v25, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v13 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)v25);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 + 264) + 40))(v9 + 264, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" isn't held yet", 15);
        *(_BYTE *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v13 + 17) = 0;
        if (v26 < 0)
          operator delete(v25[0]);
        if (v28 < 0)
          operator delete(v27[0]);
        ++v7;
      }
      if (v8)
      {
        v14 = (unint64_t *)&v8->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 += 2;
    }
    while (v6 != v5);
    v27[0] = &v29;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
    v4 = v21;
    if (v7)
      goto LABEL_36;
  }
  BambiConferenceCallState::participants((BambiConferenceCallState *)&v29, v4);
  v16 = v29;
  v17 = v30;
  v27[0] = &v29;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  if (v16 != v17)
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(v27, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::debug(ims::_logger, (uint64_t)&v29, (uint64_t)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"All participants on hold. Start the session.", 44);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (v28 < 0)
      operator delete(v27[0]);
    if (v31 < 0)
      operator delete(v29);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, 2);
    return;
  }
LABEL_36:
  std::string::basic_string[abi:ne180100]<0>(&v29, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(v27, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v20 = ImsLogger::debug(ims::_logger, (uint64_t)&v29, (uint64_t)v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"BambiConferenceCall: still waiting for ", 39);
  *(_BYTE *)(v20 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v20 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" participants to hold before starting conference", 48);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v20 + 17) = 0;
  if (v28 < 0)
    operator delete(v27[0]);
  if (v31 < 0)
    operator delete(v29);
}

void sub_1BEE26DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 81) < 0)
    operator delete(*(void **)(v35 - 104));
  _Unwind_Resume(exception_object);
}

SipState *BambiConferenceCallSessionRequestedState::BambiConferenceCallSessionRequestedState(SipState *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  BambiConferenceCallState::BambiConferenceCallState(a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)a1 = &off_1E78B9A10;
  *((_QWORD *)a1 + 1) = &unk_1E78B9A70;
  return a1;
}

void sub_1BEE26F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiConferenceCallSessionRequestedState::enterState(BambiConferenceCallSessionRequestedState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  BambiConferenceCall *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = (BambiConferenceCall *)*((_QWORD *)this + 26);
      if (v5)
        BambiConferenceCall::startSessionWithConferenceServer(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BEE27014(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

SipState *BambiConferenceCallSessionConfirmedState::BambiConferenceCallSessionConfirmedState(SipState *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  BambiConferenceCallState::BambiConferenceCallState(a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)a1 = &off_1E78B9AA0;
  *((_QWORD *)a1 + 1) = &unk_1E78B9B00;
  return a1;
}

void sub_1BEE270EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiConferenceCallSessionConfirmedState::addParticipants(BambiConferenceCallSessionConfirmedState *this)
{
  std::__shared_weak_count *v2;
  BambiConferenceCall *v3;
  uint64_t *v4;
  uint64_t *v5;
  char v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  BambiConferenceCall *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  ImsPrefs *v15;
  void **SerializeRefersKey;
  void *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  char v20;
  ImsPrefs *v21;
  void **SerializeParticipantsKey;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  char v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  char v39;
  void *__p;
  char v41;
  void *v42[2];
  char v43;
  void *v44;
  std::__shared_weak_count *v45;
  char v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void *v49;
  uint64_t *v50;
  char v51;
  BambiConferenceCall *v52;
  std::__shared_weak_count *v53;

  v52 = 0;
  v53 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v2
    || (v53 = std::__shared_weak_count::lock(v2)) == 0
    || (v3 = (BambiConferenceCall *)*((_QWORD *)this + 26), (v52 = v3) == 0))
  {
    std::string::basic_string[abi:ne180100]<0>(&v37, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(&v49, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v33 = ImsLogger::debug(ims::_logger, (uint64_t)&v37, (uint64_t)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"addParticipants", 15);
    *(_BYTE *)(v33 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" NULL conference call", 21);
    *(_BYTE *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v33 + 17) = 0;
    if (v51 < 0)
      operator delete(v49);
    if (v39 < 0)
      operator delete(v37);
    goto LABEL_64;
  }
  BambiConferenceCallState::participants((BambiConferenceCallState *)&v49, (uint64_t)this);
  v4 = (uint64_t *)v49;
  v5 = v50;
  if (v49 != v50)
  {
    v6 = 1;
    while (1)
    {
      v8 = *v4;
      v7 = (std::__shared_weak_count *)v4[1];
      v47 = *v4;
      v48 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (*(_DWORD *)(v8 + 240) != 2)
        goto LABEL_46;
      std::string::basic_string[abi:ne180100]<0>(&v44, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(v42, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v11 = ImsLogger::debug(ims::_logger, (uint64_t)&v44, (uint64_t)v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Adding ", 7);
      *(_BYTE *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 + 264) + 40))(v8 + 264, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" to conference ", 15);
      *(_BYTE *)(v11 + 17) = 0;
      v12 = v52;
      ObfuscatedString::ObfuscatedString((uint64_t)&v37, (const std::string *)((char *)v52 + 464));
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 56))(v11, &v37);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v11 + 17) = 0;
      if (v41 < 0)
        operator delete(__p);
      if (v39 < 0)
        operator delete(v37);
      if (v43 < 0)
        operator delete(v42[0]);
      if (v46 < 0)
        operator delete(v44);
      BambiConferenceParticipant::joinConference((BambiConferenceParticipant *)v8);
      v37 = 0;
      v38 = 0;
      v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 45);
      if (v13)
      {
        v13 = std::__shared_weak_count::lock(v13);
        v14 = v13;
        v38 = v13;
        if (v13)
        {
          v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 44);
          v37 = v13;
        }
      }
      else
      {
        v14 = 0;
      }
      v15 = (ImsPrefs *)SipStack::prefs((SipStack *)v13);
      SerializeRefersKey = (void **)ImsPrefs::getSerializeRefersKey(v15);
      v17 = ImsPrefs::prefWithKey(v15, SerializeRefersKey);
      if (v17)
      {
        if (((*(uint64_t (**)(void *))(*(_QWORD *)v17 + 40))(v17) & 1) != 0)
          goto LABEL_28;
      }
      else if (*((_BYTE *)SerializeRefersKey + 57))
      {
LABEL_28:
        v20 = 1;
        if (!v14)
          goto LABEL_44;
        goto LABEL_40;
      }
      v44 = 0;
      v45 = 0;
      v18 = (std::__shared_weak_count *)*((_QWORD *)v12 + 45);
      if (v18)
      {
        v18 = std::__shared_weak_count::lock(v18);
        v19 = v18;
        v45 = v18;
        if (v18)
        {
          v18 = (std::__shared_weak_count *)*((_QWORD *)v12 + 44);
          v44 = v18;
        }
      }
      else
      {
        v19 = 0;
      }
      v21 = (ImsPrefs *)SipStack::prefs((SipStack *)v18);
      SerializeParticipantsKey = (void **)ImsPrefs::getSerializeParticipantsKey(v21);
      v23 = ImsPrefs::prefWithKey(v21, SerializeParticipantsKey);
      if (v23)
      {
        v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v23 + 40))(v23);
        if (!v19)
          goto LABEL_39;
      }
      else
      {
        v20 = *((_BYTE *)SerializeParticipantsKey + 57) != 0;
        if (!v19)
          goto LABEL_39;
      }
      v24 = (unint64_t *)&v19->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
LABEL_39:
      v14 = v38;
      if (!v38)
        goto LABEL_44;
LABEL_40:
      v26 = (unint64_t *)&v14->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
LABEL_44:
      v6 = 0;
      if ((v20 & 1) != 0)
      {
        v28 = 1;
        goto LABEL_47;
      }
LABEL_46:
      v28 = 0;
LABEL_47:
      v29 = v48;
      if (v48)
      {
        v30 = (unint64_t *)&v48->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v4 += 2;
      if (v4 == v5)
        v32 = 1;
      else
        v32 = v28;
      if ((v32 & 1) != 0)
      {
        v37 = &v49;
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
        if ((v6 & 1) != 0)
        {
          v3 = v52;
          goto LABEL_63;
        }
        goto LABEL_64;
      }
    }
  }
  v37 = &v49;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
LABEL_63:
  BambiConferenceCall::subscribeToConferenceEvents(v3);
LABEL_64:
  v34 = v53;
  if (v53)
  {
    v35 = (unint64_t *)&v53->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_1BEE275A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v37 - 104);
  _Unwind_Resume(a1);
}

void BambiConferenceCallSessionConfirmedState::handleParticipantStateChange(BambiConferenceCallSessionConfirmedState *a1, BambiConferenceParticipant **a2, uint64_t a3, unsigned int a4)
{
  std::__shared_weak_count *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  ImsPrefs *v15;
  void **SerializeParticipantsKey;
  void *v17;
  int v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  BambiCall *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD v38[6];
  std::__shared_weak_count *v39;
  uint64_t v40[2];
  void *v41[2];
  char v42;
  void *__p;
  char v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  BambiCall *v49;
  std::__shared_weak_count *v50;

  v49 = 0;
  v50 = 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 27);
  if (v5)
  {
    v50 = std::__shared_weak_count::lock(v5);
    if (v50)
    {
      v8 = *((_QWORD *)a1 + 26);
      v49 = (BambiCall *)v8;
      if (v8)
      {
        if (a4 == 2)
        {
          if ((*(_DWORD *)(v8 + 440) & 0xFFFFFFFE) == 2)
          {
            std::string::basic_string[abi:ne180100]<0>(v47, "bambi.conf");
            std::string::basic_string[abi:ne180100]<0>(v45, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v9 = ImsLogger::debug(ims::_logger, (uint64_t)v47, (uint64_t)v45);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Wait to resume conference ", 26);
            *(_BYTE *)(v9 + 17) = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)v41, (const std::string *)(v8 + 464));
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 56))(v9, v41);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v9 + 17) = 0;
            if (v44 < 0)
              operator delete(__p);
            if (v42 < 0)
              operator delete(v41[0]);
            if (v46 < 0)
              operator delete(v45[0]);
            if (v48 < 0)
              operator delete(v47[0]);
            v10 = (*(uint64_t (**)(BambiConferenceCallSessionConfirmedState *))(*(_QWORD *)a1 + 32))(a1);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, 4);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v47, "bambi.conf");
            std::string::basic_string[abi:ne180100]<0>(v45, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v12 = ImsLogger::debug(ims::_logger, (uint64_t)v47, (uint64_t)v45);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Adding ", 7);
            *(_BYTE *)(v12 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*((_QWORD *)*a2 + 33) + 40))((uint64_t)*a2 + 264, v12);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" to conference ", 15);
            *(_BYTE *)(v12 + 17) = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)v41, (const std::string *)(v8 + 464));
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 56))(v12, v41);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v12 + 17) = 0;
            if (v44 < 0)
              operator delete(__p);
            if (v42 < 0)
              operator delete(v41[0]);
            if (v46 < 0)
              operator delete(v45[0]);
            if (v48 < 0)
              operator delete(v47[0]);
            BambiConferenceParticipant::joinConference(*a2);
          }
        }
        v41[0] = 0;
        v41[1] = 0;
        v13 = *(std::__shared_weak_count **)(v8 + 360);
        if (v13)
        {
          v13 = std::__shared_weak_count::lock(v13);
          v14 = v13;
          v41[1] = v13;
          if (v13)
          {
            v13 = *(std::__shared_weak_count **)(v8 + 352);
            v41[0] = v13;
          }
        }
        else
        {
          v14 = 0;
        }
        v15 = (ImsPrefs *)SipStack::prefs((SipStack *)v13);
        SerializeParticipantsKey = (void **)ImsPrefs::getSerializeParticipantsKey(v15);
        v17 = ImsPrefs::prefWithKey(v15, SerializeParticipantsKey);
        if (v17)
        {
          v18 = (*(uint64_t (**)(void *))(*(_QWORD *)v17 + 40))(v17);
          if (!v14)
            goto LABEL_39;
        }
        else
        {
          v18 = *((_BYTE *)SerializeParticipantsKey + 57) != 0;
          if (!v14)
            goto LABEL_39;
        }
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
          if (v18)
            goto LABEL_40;
          goto LABEL_64;
        }
LABEL_39:
        if (v18)
        {
LABEL_40:
          if (a4 != 5 && a4 != 10)
          {
            if (a4 == 6)
            {
              v22 = *((_QWORD *)a1 + 24);
              v21 = (std::__shared_weak_count *)*((_QWORD *)a1 + 25);
              if (v21)
              {
                p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
                do
                  v24 = __ldxr(p_shared_weak_owners);
                while (__stxr(v24 + 1, p_shared_weak_owners));
              }
              v25 = v49;
              v26 = BambiCall::bambiClient(v49);
              LoggableString::LoggableString((LoggableString *)v41, "handleParticipantStateChange");
              v27 = v50;
              v40[0] = (uint64_t)v25;
              v40[1] = (uint64_t)v50;
              if (v50)
              {
                v28 = (unint64_t *)&v50->__shared_owners_;
                do
                  v29 = __ldxr(v28);
                while (__stxr(v29 + 1, v28));
              }
              v38[0] = MEMORY[0x1E0C809B0];
              v38[1] = 1174405120;
              v38[2] = ___ZN40BambiConferenceCallSessionConfirmedState28handleParticipantStateChangeENSt3__110shared_ptrI26BambiConferenceParticipantEEN20BambiCallParticipant16ParticipantStateES5__block_invoke;
              v38[3] = &__block_descriptor_tmp_0;
              v38[4] = a1;
              v38[5] = v22;
              v39 = v21;
              if (v21)
              {
                v30 = (unint64_t *)&v21->__shared_weak_owners_;
                do
                  v31 = __ldxr(v30);
                while (__stxr(v31 + 1, v30));
              }
              BambiClient::performBlock(v26, (__int128 *)v41, v40, v38);
              if (v27)
              {
                v32 = (unint64_t *)&v27->__shared_owners_;
                do
                  v33 = __ldaxr(v32);
                while (__stlxr(v33 - 1, v32));
                if (!v33)
                {
                  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                  std::__shared_weak_count::__release_weak(v27);
                }
              }
              if (v42 < 0)
                operator delete(v41[0]);
              if (v39)
                std::__shared_weak_count::__release_weak(v39);
              if (v21)
                std::__shared_weak_count::__release_weak(v21);
              goto LABEL_77;
            }
            goto LABEL_67;
          }
          goto LABEL_66;
        }
LABEL_64:
        if (a4 > 0xA || ((1 << a4) & 0x470) == 0)
        {
LABEL_67:
          if (a4 - 8 <= 2)
          {
            std::string::basic_string[abi:ne180100]<0>(v47, "bambi.conf");
            std::string::basic_string[abi:ne180100]<0>(v45, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v34 = ImsLogger::debug(ims::_logger, (uint64_t)v47, (uint64_t)v45);
            (*(void (**)(uint64_t, uint64_t))(*((_QWORD *)*a2 + 33) + 40))((uint64_t)*a2 + 264, v34);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)" left conference ", 17);
            *(_BYTE *)(v34 + 17) = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)v41, (const std::string *)((char *)v49 + 464));
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v34 + 56))(v34, v41);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v34 + 17) = 0;
            if (v44 < 0)
              operator delete(__p);
            if (v42 < 0)
              operator delete(v41[0]);
            if (v46 < 0)
              operator delete(v45[0]);
            if (v48 < 0)
              operator delete(v47[0]);
            BambiConferenceParticipant::handleParticipantLeftConference(*a2, a4 == 9);
          }
          goto LABEL_77;
        }
LABEL_66:
        BambiConferenceCallSessionConfirmedState::addParticipants(a1);
        goto LABEL_67;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v41, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(v47, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v11 = ImsLogger::debug(ims::_logger, (uint64_t)v41, (uint64_t)v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"handleParticipantStateChange", 28);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" NULL conference call", 21);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (v48 < 0)
    operator delete(v47[0]);
  if (v42 < 0)
    operator delete(v41[0]);
LABEL_77:
  v35 = v50;
  if (v50)
  {
    v36 = (unint64_t *)&v50->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_1BEE27D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::__shared_weak_count *v33;
  uint64_t v34;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a24 < 0)
    operator delete(__p);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 - 80);
  _Unwind_Resume(a1);
}

void ___ZN40BambiConferenceCallSessionConfirmedState28handleParticipantStateChangeENSt3__110shared_ptrI26BambiConferenceParticipantEEN20BambiCallParticipant16ParticipantStateES5__block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  BambiConferenceCallSessionConfirmedState *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (BambiConferenceCallSessionConfirmedState *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        BambiConferenceCallSessionConfirmedState::addParticipants(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEE27ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__18weak_ptrI24BambiConferenceCallStateEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__18weak_ptrI24BambiConferenceCallStateEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

SipState *BambiConferenceCallSessionTerminatedState::BambiConferenceCallSessionTerminatedState(SipState *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  BambiConferenceCallState::BambiConferenceCallState(a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)a1 = &off_1E78B9B60;
  *((_QWORD *)a1 + 1) = &unk_1E78B9BC0;
  return a1;
}

void sub_1BEE27FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiConferenceCallSessionTerminatedState::enterState(BambiConferenceCallSessionTerminatedState *this)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void **v9[2];
  _QWORD v10[3];

  BambiConferenceCallState::participants((BambiConferenceCallState *)v10, (uint64_t)this);
  v1 = v10[0];
  v2 = v10[1];
  while (v1 != v2)
  {
    v3 = *(void ***)v1;
    v4 = *(std::__shared_weak_count **)(v1 + 8);
    v9[0] = *(void ***)v1;
    v9[1] = (void **)&v4->__vftable;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    BambiConferenceParticipant::handleParticipantLeftConference((BambiConferenceParticipant *)v3, 0);
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v1 += 16;
  }
  v9[0] = (void **)v10;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v9);
}

void sub_1BEE28078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  a10 = (void **)&a12;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

SipState *BambiConferenceCallWaitToResumeConfirmedSessionState::BambiConferenceCallWaitToResumeConfirmedSessionState(SipState *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  BambiConferenceCallState::BambiConferenceCallState(a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)a1 = &off_1E78B9BF0;
  *((_QWORD *)a1 + 1) = &unk_1E78B9C50;
  return a1;
}

void sub_1BEE28138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiConferenceCallWaitToResumeConfirmedSessionState::enterState(BambiConferenceCallWaitToResumeConfirmedSessionState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  BambiConferenceCall *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  BambiConferenceCall *v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v13 = v3;
    if (v3)
    {
      v4 = (BambiConferenceCall *)*((_QWORD *)this + 26);
      v12 = v4;
      if (v4)
      {
        BambiConferenceCall::resumeConferenceCall(v4);
LABEL_11:
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        return;
      }
    }
  }
  else
  {
    v3 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"enterState", 10);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" NULL conference call", 21);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v3)
    goto LABEL_11;
}

void sub_1BEE28290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20 - 32);
  _Unwind_Resume(a1);
}

void BambiConferenceCallWaitToResumeConfirmedSessionState::handleParticipantStateChange(uint64_t a1, BambiConferenceParticipant **a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14[2];
  char v15;
  void *__p;
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v22 = 0;
  v23 = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 216);
  if (v5)
  {
    v8 = std::__shared_weak_count::lock(v5);
    v23 = v8;
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 208);
      v22 = v9;
      if (v9)
      {
        if ((a4 - 8) <= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(v20, "bambi.conf");
          std::string::basic_string[abi:ne180100]<0>(v18, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v10 = ImsLogger::debug(ims::_logger, (uint64_t)v20, (uint64_t)v18);
          (*(void (**)(uint64_t, uint64_t))(*((_QWORD *)*a2 + 33) + 40))((uint64_t)*a2 + 264, v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" left conference ", 17);
          *(_BYTE *)(v10 + 17) = 0;
          ObfuscatedString::ObfuscatedString((uint64_t)v14, (const std::string *)(v9 + 464));
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 56))(v10, v14);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v10 + 17) = 0;
          if (v17 < 0)
            operator delete(__p);
          if (v15 < 0)
            operator delete(v14[0]);
          if (v19 < 0)
            operator delete(v18[0]);
          if (v21 < 0)
            operator delete(v20[0]);
          BambiConferenceParticipant::handleParticipantLeftConference(*a2, a4 == 9);
        }
LABEL_20:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
    }
  }
  else
  {
    v8 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(v20, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v11 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"handleParticipantStateChange", 28);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" NULL conference call", 21);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (v21 < 0)
    operator delete(v20[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v8)
    goto LABEL_20;
}

void sub_1BEE28544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29 - 64);
  _Unwind_Resume(a1);
}

void BambiConferenceCallState::~BambiConferenceCallState(BambiConferenceCallState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78B98E8;
  *((_QWORD *)this + 1) = &unk_1E78B9948;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipState::~SipState(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78B98E8;
  *((_QWORD *)this + 1) = &unk_1E78B9948;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipState::~SipState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiConferenceCallState::id(BambiConferenceCallState *this)
{
  return 0;
}

void `non-virtual thunk to'BambiConferenceCallState::~BambiConferenceCallState(BambiConferenceCallState *this)
{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *((_QWORD *)this - 1) = &off_1E78B98E8;
  v2 = (BambiConferenceCallState *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E78B9948;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  SipState::~SipState(v2);
}

{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *((_QWORD *)this - 1) = &off_1E78B98E8;
  v2 = (BambiConferenceCallState *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E78B9948;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  SipState::~SipState(v2);
  JUMPOUT(0x1C3B87100);
}

void BambiConferenceCallWaitingForHoldState::~BambiConferenceCallWaitingForHoldState(BambiConferenceCallWaitingForHoldState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78B98E8;
  *((_QWORD *)this + 1) = &unk_1E78B9948;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipState::~SipState(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78B98E8;
  *((_QWORD *)this + 1) = &unk_1E78B9948;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipState::~SipState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiConferenceCallWaitingForHoldState::id(BambiConferenceCallWaitingForHoldState *this)
{
  return 1;
}

void `non-virtual thunk to'BambiConferenceCallWaitingForHoldState::~BambiConferenceCallWaitingForHoldState(BambiConferenceCallWaitingForHoldState *this)
{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *((_QWORD *)this - 1) = &off_1E78B98E8;
  v2 = (BambiConferenceCallWaitingForHoldState *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E78B9948;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  SipState::~SipState(v2);
}

{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *((_QWORD *)this - 1) = &off_1E78B98E8;
  v2 = (BambiConferenceCallWaitingForHoldState *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E78B9948;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  SipState::~SipState(v2);
  JUMPOUT(0x1C3B87100);
}

void BambiConferenceCallSessionRequestedState::~BambiConferenceCallSessionRequestedState(BambiConferenceCallSessionRequestedState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78B98E8;
  *((_QWORD *)this + 1) = &unk_1E78B9948;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipState::~SipState(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78B98E8;
  *((_QWORD *)this + 1) = &unk_1E78B9948;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipState::~SipState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiConferenceCallSessionRequestedState::id(BambiConferenceCallSessionRequestedState *this)
{
  return 2;
}

void `non-virtual thunk to'BambiConferenceCallSessionRequestedState::~BambiConferenceCallSessionRequestedState(BambiConferenceCallSessionRequestedState *this)
{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *((_QWORD *)this - 1) = &off_1E78B98E8;
  v2 = (BambiConferenceCallSessionRequestedState *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E78B9948;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  SipState::~SipState(v2);
}

{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *((_QWORD *)this - 1) = &off_1E78B98E8;
  v2 = (BambiConferenceCallSessionRequestedState *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E78B9948;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  SipState::~SipState(v2);
  JUMPOUT(0x1C3B87100);
}

void BambiConferenceCallSessionConfirmedState::~BambiConferenceCallSessionConfirmedState(BambiConferenceCallSessionConfirmedState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78B98E8;
  *((_QWORD *)this + 1) = &unk_1E78B9948;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipState::~SipState(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78B98E8;
  *((_QWORD *)this + 1) = &unk_1E78B9948;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipState::~SipState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiConferenceCallSessionConfirmedState::id(BambiConferenceCallSessionConfirmedState *this)
{
  return 3;
}

void `non-virtual thunk to'BambiConferenceCallSessionConfirmedState::~BambiConferenceCallSessionConfirmedState(BambiConferenceCallSessionConfirmedState *this)
{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *((_QWORD *)this - 1) = &off_1E78B98E8;
  v2 = (BambiConferenceCallSessionConfirmedState *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E78B9948;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  SipState::~SipState(v2);
}

{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *((_QWORD *)this - 1) = &off_1E78B98E8;
  v2 = (BambiConferenceCallSessionConfirmedState *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E78B9948;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  SipState::~SipState(v2);
  JUMPOUT(0x1C3B87100);
}

void BambiConferenceCallSessionTerminatedState::~BambiConferenceCallSessionTerminatedState(BambiConferenceCallSessionTerminatedState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78B98E8;
  *((_QWORD *)this + 1) = &unk_1E78B9948;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipState::~SipState(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78B98E8;
  *((_QWORD *)this + 1) = &unk_1E78B9948;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipState::~SipState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiConferenceCallSessionTerminatedState::id(BambiConferenceCallSessionTerminatedState *this)
{
  return 5;
}

void `non-virtual thunk to'BambiConferenceCallSessionTerminatedState::~BambiConferenceCallSessionTerminatedState(BambiConferenceCallSessionTerminatedState *this)
{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *((_QWORD *)this - 1) = &off_1E78B98E8;
  v2 = (BambiConferenceCallSessionTerminatedState *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E78B9948;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  SipState::~SipState(v2);
}

{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *((_QWORD *)this - 1) = &off_1E78B98E8;
  v2 = (BambiConferenceCallSessionTerminatedState *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E78B9948;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  SipState::~SipState(v2);
  JUMPOUT(0x1C3B87100);
}

void BambiConferenceCallWaitToResumeConfirmedSessionState::~BambiConferenceCallWaitToResumeConfirmedSessionState(BambiConferenceCallWaitToResumeConfirmedSessionState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78B98E8;
  *((_QWORD *)this + 1) = &unk_1E78B9948;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipState::~SipState(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78B98E8;
  *((_QWORD *)this + 1) = &unk_1E78B9948;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipState::~SipState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiConferenceCallWaitToResumeConfirmedSessionState::id(BambiConferenceCallWaitToResumeConfirmedSessionState *this)
{
  return 4;
}

void `non-virtual thunk to'BambiConferenceCallWaitToResumeConfirmedSessionState::~BambiConferenceCallWaitToResumeConfirmedSessionState(BambiConferenceCallWaitToResumeConfirmedSessionState *this)
{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *((_QWORD *)this - 1) = &off_1E78B98E8;
  v2 = (BambiConferenceCallWaitToResumeConfirmedSessionState *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E78B9948;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  SipState::~SipState(v2);
}

{
  SipState *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *((_QWORD *)this - 1) = &off_1E78B98E8;
  v2 = (BambiConferenceCallWaitToResumeConfirmedSessionState *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E78B9948;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  SipState::~SipState(v2);
  JUMPOUT(0x1C3B87100);
}

char *std::vector<std::shared_ptr<BambiConferenceParticipant>>::__init_with_size[abi:ne180100]<std::shared_ptr<BambiConferenceParticipant>*,std::shared_ptr<BambiConferenceParticipant>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<BambiConferenceParticipant>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BEE28EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<BambiConferenceParticipant>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78B9D40;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78B9D40;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78B9D40;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78B9D40;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEE29150(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiConferenceCallWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t AVCRTTSession::AVCRTTSession(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, ImsPrefs *a5, uint64_t *a6, __int128 *a7, dispatch_object_t *a8)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  void *__p[2];
  char v27;
  void *v28[2];
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  *(_QWORD *)(a1 + 112) = &off_1E78B7B60;
  v9 = (std::__shared_weak_count *)a2[1];
  v34 = *a2;
  v35 = v9;
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = a4[1];
  v32 = *a4;
  v33 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (std::__shared_weak_count *)a6[1];
  v30 = *a6;
  v31 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  AVCRTPSession<AVCTextStream>::AVCRTPSession(a1, (uint64_t *)&off_1E78B9FE8, &v34, a3, &v32, a5, &v30, a7, a8);
  v18 = v31;
  if (v31)
  {
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v33;
  if (v33)
  {
    v22 = (unint64_t *)&v33->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
  *(_QWORD *)a1 = &off_1E78B9DC8;
  *(_QWORD *)(a1 + 24) = &unk_1E78B9E80;
  *(_QWORD *)(a1 + 112) = &unk_1E78B9FA8;
  *(_BYTE *)(a1 + 545) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  std::string::basic_string[abi:ne180100]<0>(v28, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v24 = ImsLogger::debug(ims::_logger, (uint64_t)v28, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"AVCRTTSession", 13);
  *(_BYTE *)(v24 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v24 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v24 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v24 + 17) = 0;
  if (v27 < 0)
    operator delete(__p[0]);
  if (v29 < 0)
    operator delete(v28[0]);
  ++RTPManager::kRTTSessionCount;
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

void sub_1BEE29450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;
  void **v24;

  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v23 + 599) < 0)
    operator delete(*v24);
  AVCRTPSession<AVCTextStream>::~AVCRTPSession(v23, (uint64_t *)&off_1E78B9FE8);
  _Unwind_Resume(a1);
}

void AVCRTTSession::~AVCRTTSession(AVCRTTSession *this)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *(_QWORD *)this = &off_1E78B9DC8;
  *((_QWORD *)this + 3) = &unk_1E78B9E80;
  *((_QWORD *)this + 14) = &unk_1E78B9FA8;
  std::string::basic_string[abi:ne180100]<0>(v5, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"~AVCRTTSession", 14);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  --RTPManager::kRTTSessionCount;
  if (objc_msgSend(*((id *)this + 60), "delegate"))
  {

    objc_msgSend(*((id *)this + 60), "setDelegate:", 0);
  }
  nw_release(*((void **)this + 69));
  nw_release(*((void **)this + 70));
  if (*((char *)this + 599) < 0)
    operator delete(*((void **)this + 72));
  AVCRTPSession<AVCTextStream>::~AVCRTPSession((uint64_t)this, (uint64_t *)&off_1E78B9FE8);
}

{
  AVCRTTSession::~AVCRTTSession(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'AVCRTTSession::~AVCRTTSession(AVCRTTSession *this)
{
  AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24));
}

{
  AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 112));
}

{
  AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

{
  AVCRTTSession::~AVCRTTSession((AVCRTTSession *)((char *)this - 112));
  JUMPOUT(0x1C3B87100);
}

void AVCRTTSession::initialize(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, const std::string *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  ImsPrefs *v18;
  void **EnableAPOnlyModeKey;
  void *v20;
  int v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  _BOOL4 v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void (***size)(void *, void **, uint64_t);
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void (***v56)(void *, void **, uint64_t);
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  int v64;
  uint64_t v65;
  int v66;
  BOOL v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74;
  const void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  void (***v85)(void *, void **, uint64_t);
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  void *v107;
  _QWORD aBlock[7];
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  int v114;
  int v115;
  void *v116[2];
  void *v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *__p[2];
  int v128;
  char v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  char v138;
  void *v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;

  std::string::basic_string[abi:ne180100]<0>(&v135, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)&v135, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"initialize", 10);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" isMO=", 6);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v10 + 17) = 0;
  v11 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v129 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v137) < 0)
    operator delete(v135);
  v12 = (void *)MEMORY[0x1C3B876AC](v11);
  v141 = 0;
  v142 = 0;
  v13 = (std::__shared_weak_count *)a7[1];
  if (!v13 || (v142 = std::__shared_weak_count::lock(v13)) == 0 || (v141 = *a7, (v14 = v141) == 0))
  {
    std::string::basic_string[abi:ne180100]<0>(&v135, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v17 = ImsLogger::error(ims::_logger, (uint64_t)&v135, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"SDPSession expired", 18);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (v129 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v137) < 0)
      operator delete(v135);
    goto LABEL_192;
  }
  v135 = 0;
  v136 = 0;
  v15 = *(std::__shared_weak_count **)(v141 + 128);
  if (v15)
  {
    v15 = std::__shared_weak_count::lock(v15);
    v16 = v15;
    v136 = v15;
    if (v15)
    {
      v15 = *(std::__shared_weak_count **)(v14 + 120);
      v135 = v15;
    }
  }
  else
  {
    v16 = 0;
  }
  v18 = (ImsPrefs *)SipStack::prefs((SipStack *)v15);
  EnableAPOnlyModeKey = (void **)ImsPrefs::getEnableAPOnlyModeKey(v18);
  v20 = ImsPrefs::prefWithKey(v18, EnableAPOnlyModeKey);
  if (v20)
  {
    v21 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 40))(v20);
    if (!v21)
      goto LABEL_22;
  }
  else if (!*((_BYTE *)EnableAPOnlyModeKey + 57))
  {
    LOBYTE(v21) = 0;
    goto LABEL_22;
  }
  LOBYTE(v21) = _os_feature_enabled_impl();
LABEL_22:
  a1[22].__r_.__value_.__s.__data_[17] = v21;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v24 = v141;
  v25 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 144))(a1);
  if (v25 == 2)
  {
    if (*(_BYTE *)(v24 + 584))
      goto LABEL_33;
  }
  else if (v25 == 6 && *(_BYTE *)(v24 + 1856))
  {
    goto LABEL_33;
  }
  if (!*(_BYTE *)(v24 + 1328))
  {
    std::string::basic_string[abi:ne180100]<0>(&v135, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v47 = ImsLogger::error(ims::_logger, (uint64_t)&v135, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"No media settings", 17);
    *(_BYTE *)(v47 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v47 + 17) = 0;
    if (v129 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v137) < 0)
      operator delete(v135);
    v135 = 0;
    v136 = 0;
    v48 = (std::__shared_weak_count *)a1[1].__r_.__value_.__r.__words[2];
    if (v48)
    {
      v136 = std::__shared_weak_count::lock(v48);
      if (v136)
      {
        size = (void (***)(void *, void **, uint64_t))a1[1].__r_.__value_.__l.__size_;
        v135 = (std::__shared_weak_count *)size;
        if (size)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)a1, &v139);
          (**size)(size, &v139, 9);
          v50 = v140;
          if (v140)
          {
            v51 = (unint64_t *)&v140->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
        }
      }
    }
    v36 = v136;
    if (!v136)
      goto LABEL_192;
    v53 = (unint64_t *)&v136->__shared_owners_;
    do
      v38 = __ldaxr(v53);
    while (__stlxr(v38 - 1, v53));
LABEL_190:
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    goto LABEL_192;
  }
LABEL_33:
  if (!a1[22].__r_.__value_.__s.__data_[17])
  {
    v121 = 0;
    v122 = 0;
    RTPTransportManager::getTransport((RTPTransportManager *)a1[2].__r_.__value_.__l.__data_, *(unsigned __int16 *)(v24 + 142), &v121);
    v119 = 0;
    v120 = 0;
    RTPTransportManager::getTransport((RTPTransportManager *)a1[2].__r_.__value_.__l.__data_, (unsigned __int16)(*(_WORD *)(v24 + 142) + 1), &v119);
    v39 = v121;
    if (!v121)
    {
      std::string::basic_string[abi:ne180100]<0>(&v135, "avc.rtt.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v54 = ImsLogger::error(ims::_logger, (uint64_t)&v135, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"No RTP socket associated with port ", 35);
      *(_BYTE *)(v54 + 17) = 0;
      (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 144))(a1);
      std::ostream::operator<<();
      *(_BYTE *)(v54 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)" for session ", 13);
      *(_BYTE *)(v54 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v54 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v54 + 17) = 0;
      if (v129 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v137) < 0)
        operator delete(v135);
      v135 = 0;
      v136 = 0;
      v55 = (std::__shared_weak_count *)a1[1].__r_.__value_.__r.__words[2];
      if (v55)
      {
        v136 = std::__shared_weak_count::lock(v55);
        if (v136)
        {
          v56 = (void (***)(void *, void **, uint64_t))a1[1].__r_.__value_.__l.__size_;
          v135 = (std::__shared_weak_count *)v56;
          if (v56)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)a1, &v117);
            (**v56)(v56, &v117, 9);
            v57 = v118;
            if (v118)
            {
              v58 = (unint64_t *)&v118->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
          }
        }
      }
      v60 = v136;
      if (!v136)
        goto LABEL_182;
      v61 = (unint64_t *)&v136->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (v62)
        goto LABEL_182;
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      v63 = v60;
LABEL_154:
      std::__shared_weak_count::__release_weak(v63);
LABEL_182:
      v99 = v120;
      if (v120)
      {
        v100 = (unint64_t *)&v120->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      v36 = v122;
      if (!v122)
        goto LABEL_192;
      v102 = (unint64_t *)&v122->__shared_owners_;
      do
        v38 = __ldaxr(v102);
      while (__stlxr(v38 - 1, v102));
      goto LABEL_190;
    }
    if (v119)
      goto LABEL_115;
    std::string::basic_string[abi:ne180100]<0>(&v135, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    v40 = ims::error((uint64_t)&v135, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"No RTCP socket associated with port ", 36);
    *(_BYTE *)(v40 + 17) = 0;
    (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 144))(a1);
    std::ostream::operator<<();
    *(_BYTE *)(v40 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)" for session ", 13);
    *(_BYTE *)(v40 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v40 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v40 + 17) = 0;
    if (v129 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v137) < 0)
      operator delete(v135);
    v39 = v121;
    if (v121)
    {
LABEL_115:
      v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 80))(v39);
      v65 = v119;
      if (v119)
      {
LABEL_116:
        v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 80))(v65);
        v67 = v66 == -1;
        if (v64 != -1 && v66 != -1)
        {
          v135 = 0;
          v136 = (std::__shared_weak_count *)&v135;
          v137 = 0x2020000000;
          v138 = 0;
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3321888768;
          aBlock[2] = ___ZN13AVCRTTSession10initializeERKNSt3__110shared_ptrI9IpAddressEEbRKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEESD_14MediaDirectionNS0_8weak_ptrI10SDPSessionEE_block_invoke;
          aBlock[3] = &unk_1E78BA060;
          aBlock[5] = a1;
          aBlock[6] = v121;
          v109 = v122;
          if (v122)
          {
            v68 = (unint64_t *)&v122->__shared_owners_;
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
          }
          v110 = v119;
          v111 = v120;
          if (v120)
          {
            v70 = (unint64_t *)&v120->__shared_owners_;
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          v114 = v64;
          v115 = v66;
          aBlock[4] = &v135;
          v112 = v24;
          v113 = v142;
          if (v142)
          {
            v72 = (unint64_t *)&v142->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          v74 = _Block_copy(aBlock);
          v75 = v74;
          v76 = v121;
          if (v74)
            v77 = _Block_copy(v74);
          else
            v77 = 0;
          v107 = v77;
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v76 + 96))(v76, &v107);
          if (v107)
            _Block_release(v107);
          v88 = v119;
          if (v119)
          {
            v89 = v75 ? _Block_copy(v75) : 0;
            v106 = v89;
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v88 + 96))(v88, &v106);
            if (v106)
              _Block_release(v106);
          }
          if (v75)
            _Block_release(v75);
          v90 = v113;
          if (v113)
          {
            v91 = (unint64_t *)&v113->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
          v93 = v111;
          if (v111)
          {
            v94 = (unint64_t *)&v111->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          v96 = v109;
          if (v109)
          {
            v97 = (unint64_t *)&v109->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          _Block_object_dispose(&v135, 8);
          goto LABEL_182;
        }
        if (v64 != -1)
        {
          if (v66 != -1)
          {
LABEL_146:
            v82 = (std::__shared_weak_count *)a1[1].__r_.__value_.__r.__words[2];
            if (!v82)
              goto LABEL_182;
            v83 = std::__shared_weak_count::lock(v82);
            v136 = v83;
            if (!v83)
              goto LABEL_182;
            v84 = v83;
            v85 = (void (***)(void *, void **, uint64_t))a1[1].__r_.__value_.__l.__size_;
            v135 = (std::__shared_weak_count *)v85;
            if (v85)
            {
              RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)a1, v116);
              (**v85)(v85, v116, 4);
              std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v116);
            }
            v86 = (unint64_t *)&v84->__shared_owners_;
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (v87)
              goto LABEL_182;
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            v63 = v84;
            goto LABEL_154;
          }
LABEL_142:
          std::string::basic_string[abi:ne180100]<0>(&v135, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          v80 = ims::error((uint64_t)&v135, (uint64_t)__p);
          v81 = (_BYTE *)ImsOutStream::operator<<(v80, "Didn't find valid RTCP transport for session ");
          std::ostream::operator<<();
          v81[17] = 0;
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v81[17] = 0;
          if (v129 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v137) < 0)
            operator delete(v135);
          goto LABEL_146;
        }
LABEL_137:
        std::string::basic_string[abi:ne180100]<0>(&v135, "avc.rtt.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        v78 = ims::error((uint64_t)&v135, (uint64_t)__p);
        v79 = (_BYTE *)ImsOutStream::operator<<(v78, "Didn't find valid RTP transport for session ");
        std::ostream::operator<<();
        v79[17] = 0;
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v79[17] = 0;
        if (v129 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v137) < 0)
          operator delete(v135);
        if (!v67)
          goto LABEL_146;
        goto LABEL_142;
      }
      if (v64 != -1)
        goto LABEL_142;
    }
    else
    {
      v65 = v119;
      if (v119)
      {
        v64 = -1;
        goto LABEL_116;
      }
    }
    v67 = 1;
    goto LABEL_137;
  }
  std::string::basic_string[abi:ne180100]<0>(&v135, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v26 = ImsLogger::debug(ims::_logger, (uint64_t)&v135, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Use skywalk channels instead of sockets", 39);
  *(_BYTE *)(v26 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v26 + 17) = 0;
  if (v129 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v137) < 0)
    operator delete(v135);
  a1[23].__r_.__value_.__s.__data_[16] = 1;
  std::string::operator=(a1 + 24, a5);
  v133 = v24;
  v134 = v142;
  if (v142)
  {
    p_shared_weak_owners = (unint64_t *)&v142->__shared_weak_owners_;
    do
      v28 = __ldxr(p_shared_weak_owners);
    while (__stxr(v28 + 1, p_shared_weak_owners));
  }
  (*(void (**)(std::__shared_weak_count **__return_ptr, std::string *, uint64_t *))(a1->__r_.__value_.__r.__words[0]
                                                                                            + 48))(&v135, a1, &v133);
  v130 = 0u;
  v131 = 0u;
  v132 = 0u;
  __p[0] = &off_1E78B7238;
  __p[1] = &_bambiDomain;
  v128 = 0;
  v30 = v136 == (std::__shared_weak_count *)&_bambiDomain && (_DWORD)v137 == 0;
  ImsResult::~ImsResult((ImsResult *)__p);
  ImsResult::~ImsResult((ImsResult *)&v135);
  if (v134)
    std::__shared_weak_count::__release_weak(v134);
  if (!v30)
  {
    v135 = 0;
    v136 = 0;
    v41 = (std::__shared_weak_count *)a1[1].__r_.__value_.__r.__words[2];
    if (v41)
    {
      v136 = std::__shared_weak_count::lock(v41);
      if (v136)
      {
        v42 = (std::__shared_weak_count *)a1[1].__r_.__value_.__l.__size_;
        v135 = v42;
        if (v42)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)a1, &v123);
          ((void (*)(std::__shared_weak_count *, void **, _QWORD))v42->~__shared_weak_count)(v42, &v123, 0);
          v43 = v124;
          if (v124)
          {
            v44 = (unint64_t *)&v124->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
        }
      }
    }
    v36 = v136;
    if (!v136)
      goto LABEL_192;
    v46 = (unint64_t *)&v136->__shared_owners_;
    do
      v38 = __ldaxr(v46);
    while (__stlxr(v38 - 1, v46));
    goto LABEL_190;
  }
  v135 = 0;
  v136 = 0;
  v31 = (std::__shared_weak_count *)a1[1].__r_.__value_.__r.__words[2];
  if (v31)
  {
    v136 = std::__shared_weak_count::lock(v31);
    if (v136)
    {
      v32 = (std::__shared_weak_count *)a1[1].__r_.__value_.__l.__size_;
      v135 = v32;
      if (v32)
      {
        RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)a1, &v125);
        ((void (*)(std::__shared_weak_count *, void **, _QWORD))v32->__on_zero_shared)(v32, &v125, 0);
        v33 = v126;
        if (v126)
        {
          v34 = (unint64_t *)&v126->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
    }
  }
  v36 = v136;
  if (v136)
  {
    v37 = (unint64_t *)&v136->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    goto LABEL_190;
  }
LABEL_192:
  v103 = v142;
  if (v142)
  {
    v104 = (unint64_t *)&v142->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  objc_autoreleasePoolPop(v12);
}

void sub_1BEE2A5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, void *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v42 - 168);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v42 - 80);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTTSession10initializeERKNSt3__110shared_ptrI9IpAddressEEbRKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEESD_14MediaDirectionNS0_8weak_ptrI10SDPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  _BOOL4 v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  xpc_object_t v16;
  id v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  void (***v26)(void *, void **, uint64_t);
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  void (***v31)(void *, void **, _QWORD);
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  AVCRTTSessionDelegate *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  std::__shared_weak_count *v52;
  void (***v53)(void *, void **, uint64_t);
  void **v54;
  uint64_t v55;
  _BYTE *v56;
  std::__shared_weak_count *v57;
  void (***v58)(void *, void **, uint64_t);
  uint64_t v59;
  _BYTE *v60;
  std::__shared_weak_count *v61;
  void (***v62)(void *, void **, uint64_t);
  uint64_t v63;
  _BYTE *v64;
  std::__shared_weak_count *v65;
  void (***v66)(void *, void **, uint64_t);
  _QWORD v67[2];
  void *v68[2];
  void *v69[2];
  void *__p[2];
  int v71;
  char v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  void *v78;
  CFTypeRef cf;
  int v80;
  char v81;
  void *v82[2];
  _QWORD v83[2];
  void *v84[2];
  void *v85[2];
  void *v86[2];
  void *v87[2];
  void *v88[2];
  id v89;

  v2 = *(_QWORD *)(a1 + 40);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 104))(*(_QWORD *)(a1 + 48)))
  {
    std::string::basic_string[abi:ne180100]<0>(&v78, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)&v78, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"RTP socket still attached to dispatch source [sessionId=", 56);
    *(_BYTE *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_5:
    *(_BYTE *)(v3 + 17) = 0;
    if (v72 < 0)
      operator delete(__p[0]);
    if (v81 < 0)
      operator delete(v78);
    return;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 104))(*(_QWORD *)(a1 + 64)))
  {
    std::string::basic_string[abi:ne180100]<0>(&v78, "avc.audio.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)&v78, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"RTCP socket still attached to dispatch source [sessionId=", 57);
    *(_BYTE *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_5;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v4 + 24))
    return;
  *(_BYTE *)(v4 + 24) = 1;
  if (*(_QWORD *)(v2 + 480))
  {
LABEL_11:
    v5 = *(std::__shared_weak_count **)(a1 + 88);
    v76 = *(_QWORD *)(a1 + 80);
    v77 = v5;
    if (v5)
    {
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(&v78, v2, &v76);
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    v71 = 0;
    v9 = cf == &_bambiDomain && v80 == 0;
    ImsResult::~ImsResult((ImsResult *)__p);
    ImsResult::~ImsResult((ImsResult *)&v78);
    if (v77)
      std::__shared_weak_count::__release_weak(v77);
    if (v9)
    {
      v10 = *(std::__shared_weak_count **)(v2 + 40);
      if (v10)
      {
        v11 = std::__shared_weak_count::lock(v10);
        cf = v11;
        if (v11)
        {
          v12 = v11;
          v13 = *(void **)(v2 + 32);
          v78 = v13;
          if (v13)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, v69);
            (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v13 + 16))(v13, v69, 0);
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v69);
          }
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
LABEL_53:
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
    else
    {
      v29 = *(std::__shared_weak_count **)(v2 + 40);
      if (v29)
      {
        v30 = std::__shared_weak_count::lock(v29);
        cf = v30;
        if (v30)
        {
          v12 = v30;
          v31 = *(void (****)(void *, void **, _QWORD))(v2 + 32);
          v78 = v31;
          if (v31)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, v68);
            (**v31)(v31, v68, 0);
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v68);
          }
          v32 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldaxr(v32);
          while (__stlxr(v15 - 1, v32));
          goto LABEL_53;
        }
      }
    }
    v78 = 0;
    cf = 0;
    ims::CFNumber::CFNumber((ims::CFNumber *)&v78, objc_msgSend(*(id *)(v2 + 480), "streamToken"));
    v35 = v2 + 48;
    v33 = *(_QWORD *)(v2 + 48);
    v34 = *(_QWORD *)(v35 + 8);
    v67[0] = off_1E78EAB00;
    v67[1] = cf;
    if (cf)
      CFRetain(cf);
    v67[0] = &off_1E78EABB0;
    RTPManager::handleTextStreamToken(v34, v33, (uint64_t)v67);
    ims::CFType::~CFType((ims::CFType *)v67);
    ims::CFType::~CFType((ims::CFType *)&v78);
    return;
  }
  v16 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_fd(v16, (const char *)*MEMORY[0x1E0CF2300], *(_DWORD *)(a1 + 96));
  if (*(_QWORD *)(a1 + 64))
    xpc_dictionary_set_fd(v16, (const char *)*MEMORY[0x1E0CF22F0], *(_DWORD *)(a1 + 100));
  v89 = 0;
  v17 = objc_alloc(MEMORY[0x1E0CB3940]);
  v18 = (_QWORD *)(v2 + 576);
  if (*(char *)(v2 + 599) < 0)
    v18 = (_QWORD *)*v18;
  v19 = (void *)objc_msgSend(v17, "initWithUTF8String:", v18);
  *(_QWORD *)(v2 + 480) = objc_msgSend(objc_alloc(MEMORY[0x1E0CF22D0]), "initWithNetworkSockets:callID:error:", v16, v19, &v89);

  xpc_release(v16);
  if (!v89)
  {
    v36 = *(void **)(v2 + 480);
    if (v36)
    {
      v37 = objc_msgSend(v36, "capabilities");
      if (v37)
      {
        v38 = (void *)v37;
        std::string::basic_string[abi:ne180100]<0>(&v78, "avc.rtt.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        v39 = ims::debug((uint64_t)&v78, (uint64_t)__p);
        v40 = ImsOutStream::operator<<(v39, "capabilities dict: ");
        ImsOutStream::operator<<(v40, (char *)objc_msgSend((id)objc_msgSend(v38, "description"), "UTF8String"));
        if (v72 < 0)
          operator delete(__p[0]);
        if (v81 < 0)
          operator delete(v78);
        v41 = objc_msgSend(v38, "objectForKeyedSubscript:", CFSTR("avcKeySupportedCodecs"));
        if (v41)
        {
          v42 = (void *)v41;
          std::string::basic_string[abi:ne180100]<0>(&v78, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          v43 = ims::debug((uint64_t)&v78, (uint64_t)__p);
          v44 = ImsOutStream::operator<<(v43, "Got supported codecs");
          ImsOutStream::operator<<(v44, (char *)objc_msgSend((id)objc_msgSend(v42, "description"), "UTF8String"));
          if (v72 < 0)
            operator delete(__p[0]);
          if (v81 < 0)
            operator delete(v78);
          v45 = [AVCRTTSessionDelegate alloc];
          RTPSharedPointerBase::getShared<AVCRTTSession>(v84, v2);
          v46 = *(_QWORD *)(v2 + 512);
          v83[0] = *(_QWORD *)(v2 + 504);
          v83[1] = v46;
          if (v46)
          {
            v47 = (unint64_t *)(v46 + 8);
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          v49 = -[AVCRTTSessionDelegate initWithOwner:andStackController:](v45, "initWithOwner:andStackController:", v84, v83);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v83);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v84);
          if (v49)
          {
            objc_msgSend(*(id *)(v2 + 480), "setDelegate:", v49);
            goto LABEL_11;
          }
          *(_QWORD *)(v2 + 480) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v78, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          v63 = ims::error((uint64_t)&v78, (uint64_t)__p);
          v64 = (_BYTE *)ImsOutStream::operator<<(v63, "Unable to create AVC media stream delegate");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v64[17] = 0;
          if (v72 < 0)
            operator delete(__p[0]);
          if (v81 < 0)
            operator delete(v78);
          v78 = 0;
          cf = 0;
          v65 = *(std::__shared_weak_count **)(v2 + 40);
          if (!v65
            || (cf = std::__shared_weak_count::lock(v65)) == 0
            || (v66 = *(void (****)(void *, void **, uint64_t))(v2 + 32), (v78 = v66) == 0))
          {
LABEL_108:
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v78);
            return;
          }
          RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, v82);
          (**v66)(v66, v82, 9);
          v54 = v82;
        }
        else
        {
          *(_QWORD *)(v2 + 480) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v78, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          v59 = ims::debug((uint64_t)&v78, (uint64_t)__p);
          v60 = (_BYTE *)ImsOutStream::operator<<(v59, "No supported codecs");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v60[17] = 0;
          if (v72 < 0)
            operator delete(__p[0]);
          if (v81 < 0)
            operator delete(v78);
          v78 = 0;
          cf = 0;
          v61 = *(std::__shared_weak_count **)(v2 + 40);
          if (!v61)
            goto LABEL_108;
          cf = std::__shared_weak_count::lock(v61);
          if (!cf)
            goto LABEL_108;
          v62 = *(void (****)(void *, void **, uint64_t))(v2 + 32);
          v78 = v62;
          if (!v62)
            goto LABEL_108;
          RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, v85);
          (**v62)(v62, v85, 9);
          v54 = v85;
        }
      }
      else
      {
        *(_QWORD *)(v2 + 480) = 0;
        std::string::basic_string[abi:ne180100]<0>(&v78, "avc.rtt.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        v55 = ims::error((uint64_t)&v78, (uint64_t)__p);
        v56 = (_BYTE *)ImsOutStream::operator<<(v55, "AVC session doesn't have a capabilities dict");
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v56[17] = 0;
        if (v72 < 0)
          operator delete(__p[0]);
        if (v81 < 0)
          operator delete(v78);
        v78 = 0;
        cf = 0;
        v57 = *(std::__shared_weak_count **)(v2 + 40);
        if (!v57)
          goto LABEL_108;
        cf = std::__shared_weak_count::lock(v57);
        if (!cf)
          goto LABEL_108;
        v58 = *(void (****)(void *, void **, uint64_t))(v2 + 32);
        v78 = v58;
        if (!v58)
          goto LABEL_108;
        RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, v86);
        (**v58)(v58, v86, 9);
        v54 = v86;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v78, "avc.rtt.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      v50 = ims::error((uint64_t)&v78, (uint64_t)__p);
      v51 = (_BYTE *)ImsOutStream::operator<<(v50, "No AVC session");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v51[17] = 0;
      if (v72 < 0)
        operator delete(__p[0]);
      if (v81 < 0)
        operator delete(v78);
      v78 = 0;
      cf = 0;
      v52 = *(std::__shared_weak_count **)(v2 + 40);
      if (!v52)
        goto LABEL_108;
      cf = std::__shared_weak_count::lock(v52);
      if (!cf)
        goto LABEL_108;
      v53 = *(void (****)(void *, void **, uint64_t))(v2 + 32);
      v78 = v53;
      if (!v53)
        goto LABEL_108;
      RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, v87);
      (**v53)(v53, v87, 9);
      v54 = v87;
    }
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v54);
    goto LABEL_108;
  }
  *(_QWORD *)(v2 + 480) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v78, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v20 = ImsLogger::error(ims::_logger, (uint64_t)&v78, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Session init error: ", 20);
  *(_BYTE *)(v20 + 17) = 0;
  v21 = (const char *)objc_msgSend((id)objc_msgSend(v89, "description"), "UTF8String");
  v22 = strlen(v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)v21, v22);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v20 + 17) = 0;
  if (v72 < 0)
    operator delete(__p[0]);
  if (v81 < 0)
    operator delete(v78);
  v23 = *(std::__shared_weak_count **)(v2 + 40);
  if (v23)
  {
    v24 = std::__shared_weak_count::lock(v23);
    cf = v24;
    if (v24)
    {
      v25 = v24;
      v26 = *(void (****)(void *, void **, uint64_t))(v2 + 32);
      v78 = v26;
      if (v26)
      {
        RTPSharedPointerBase::getShared<MediaSessionInterface>(v2, v88);
        (**v26)(v26, v88, 9);
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v88);
      }
      v27 = (unint64_t *)&v25->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
}

void sub_1BEE2B264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v35 - 168);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void RTPSharedPointerBase::getShared<AVCRTTSession>(void **p_lpsrc, uint64_t a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *lpsrc;
  std::__shared_weak_count *v9;

  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (_QWORD *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      v4 = v9;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void `non-virtual thunk to'AVCRTTSession::initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const std::string *a5, uint64_t a6, uint64_t *a7)
{
  AVCRTTSession::initialize((std::string *)(a1 - 24), a2, a3, a4, a5, a6, a7);
}

void AVCRTTSession::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  BOOL v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  BOOL v27;
  unint64_t v28;
  void *v29;
  double v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t *v39;
  int v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  _QWORD v45[2];
  void *__p;
  uint64_t *v47;
  int v48;
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD v53[2];
  void *v54;
  uint64_t *v55;
  int v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  std::__shared_weak_count *v62;

  std::string::basic_string[abi:ne180100]<0>(&v54, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v54, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"setConfiguration", 16);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v49 < 0)
    operator delete(__p);
  if (v57 < 0)
    operator delete(v54);
  v8 = (void *)MEMORY[0x1C3B876AC](v7);
  v61 = 0;
  v62 = 0;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v62 = v10;
    if (v10)
    {
      v61 = *a2;
      v11 = v61;
      if (v61)
      {
        if (*(_QWORD *)(a1 + 480) || !*(_BYTE *)(a1 + 545) || !*(_BYTE *)(a1 + 568))
          goto LABEL_10;
        v18 = (std::__shared_weak_count *)a2[1];
        v53[0] = v61;
        v53[1] = v18;
        if (v18)
        {
          p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
          do
            v20 = __ldxr(p_shared_weak_owners);
          while (__stxr(v20 + 1, p_shared_weak_owners));
        }
        AVCRTTSession::createNwPath((uint64_t)&v54, a1, v53, 0);
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        __p = &off_1E78B7238;
        v47 = &_bambiDomain;
        v48 = 0;
        v22 = v55 != &_bambiDomain || v56 != 0;
        ImsResult::~ImsResult((ImsResult *)&__p);
        ImsResult::~ImsResult((ImsResult *)&v54);
        if (v18)
          std::__shared_weak_count::__release_weak(v18);
        if (v22)
          goto LABEL_54;
        v23 = (std::__shared_weak_count *)a2[1];
        v45[0] = *a2;
        v45[1] = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_weak_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        AVCRTTSession::createNwPath((uint64_t)&v54, a1, v45, 1);
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        __p = &off_1E78B7238;
        v47 = &_bambiDomain;
        v48 = 0;
        v27 = v55 != &_bambiDomain || v56 != 0;
        ImsResult::~ImsResult((ImsResult *)&__p);
        ImsResult::~ImsResult((ImsResult *)&v54);
        if (v23)
          std::__shared_weak_count::__release_weak(v23);
        if (v27)
          goto LABEL_54;
        AVCRTTSession::initializeWithSkywalk((AVCRTTSession *)&v54, a1);
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        __p = &off_1E78B7238;
        v47 = &_bambiDomain;
        v48 = 0;
        v39 = v55;
        v40 = v56;
        ImsResult::~ImsResult((ImsResult *)&__p);
        ImsResult::~ImsResult((ImsResult *)&v54);
        if (v39 != &_bambiDomain)
          goto LABEL_54;
        if (v40)
          goto LABEL_54;
        AVCRTTSession::completeInit((AVCRTTSession *)&v54, a1);
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        __p = &off_1E78B7238;
        v47 = &_bambiDomain;
        v48 = 0;
        v41 = v55;
        v42 = v56;
        ImsResult::~ImsResult((ImsResult *)&__p);
        ImsResult::~ImsResult((ImsResult *)&v54);
        if (v41 != &_bambiDomain || v42)
        {
LABEL_54:
          *(_OWORD *)(a3 + 24) = 0u;
          *(_OWORD *)(a3 + 40) = 0u;
          *(_OWORD *)(a3 + 56) = 0u;
          *(_QWORD *)a3 = &off_1E78B7238;
          *(_QWORD *)(a3 + 8) = &_bambiDomain;
          v17 = 0x40000000;
        }
        else
        {
LABEL_10:
          if (*(_BYTE *)(v11 + 1328)
            && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 1032) + 24))(v11 + 1032) & 1) != 0)
          {
            v12 = *(void **)(a1 + 488);
            if (v12)

            v13 = (void *)objc_opt_new();
            *(_QWORD *)(a1 + 488) = v13;
            objc_msgSend(v13, "setTxPayloadType:", *(unsigned __int16 *)(v11 + 1062));
            objc_msgSend(*(id *)(a1 + 488), "setRxPayloadType:", *(unsigned __int16 *)(v11 + 1060));
            v14 = *(_DWORD *)(a1 + 248) != 1 || *(_DWORD *)(a1 + 424) != 0;
            objc_msgSend(*(id *)(a1 + 488), "setRtcpEnabled:", v14);
            LODWORD(v28) = *(_DWORD *)(a1 + 424);
            objc_msgSend(*(id *)(a1 + 488), "setRtcpSendInterval:", (double)v28);
            objc_msgSend((id)objc_msgSend(*(id *)(a1 + 488), "text"), "setCodecType:", 0);
            if (*(_WORD *)(v11 + 1320) != 255 && *(_WORD *)(v11 + 1322) != 255)
            {
              objc_msgSend((id)objc_msgSend(*(id *)(a1 + 488), "text"), "setNumRedundantPayloads:", 2);
              objc_msgSend((id)objc_msgSend(*(id *)(a1 + 488), "text"), "setTxRedPayloadType:", *(unsigned __int16 *)(v11 + 1322));
              objc_msgSend((id)objc_msgSend(*(id *)(a1 + 488), "text"), "setRxRedPayloadType:", *(unsigned __int16 *)(v11 + 1320));
              v29 = (void *)objc_msgSend(*(id *)(a1 + 488), "text");
              LODWORD(v30) = 1050253722;
              objc_msgSend(v29, "setTxIntervalMin:", v30);
              std::string::basic_string[abi:ne180100]<0>(&v54, "avc.rtt.session");
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              v31 = ims::debug((uint64_t)&v54, (uint64_t)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"txIntervalMin was set", 21);
              *(_BYTE *)(v31 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v31 + 17) = 0;
              if (v49 < 0)
                operator delete(__p);
              if (v57 < 0)
                operator delete(v54);
            }
            objc_msgSend((id)objc_msgSend(*(id *)(a1 + 488), "audio"), "setAudioStreamMode:", 2);
            *(_QWORD *)(a3 + 64) = 0;
            *(_OWORD *)(a3 + 32) = 0u;
            *(_OWORD *)(a3 + 48) = 0u;
            *(_OWORD *)a3 = 0u;
            *(_OWORD *)(a3 + 16) = 0u;
            v32 = (std::__shared_weak_count *)a2[1];
            v43 = *a2;
            v44 = v32;
            if (v32)
            {
              v33 = (unint64_t *)&v32->__shared_weak_owners_;
              do
                v34 = __ldxr(v33);
              while (__stxr(v34 + 1, v33));
            }
            AVCRTPSession<AVCTextStream>::setConfiguration(a1, &v43, a3);
            if (v44)
              std::__shared_weak_count::__release_weak(v44);
            v58 = 0u;
            v59 = 0u;
            v60 = 0u;
            v54 = &off_1E78B7238;
            v55 = &_bambiDomain;
            v56 = 0;
            if (*(uint64_t **)(a3 + 8) == &_bambiDomain && !*(_DWORD *)(a3 + 16))
            {
              v35 = objc_msgSend(*(id *)(a1 + 488), "isValidTextConfig");
              ImsResult::~ImsResult((ImsResult *)&v54);
              if ((v35 & 1) != 0)
                goto LABEL_76;
              std::string::basic_string[abi:ne180100]<0>(&v54, "avc.rtt.session");
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              v36 = ims::warn((uint64_t)&v54, (uint64_t)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"Invalid RTT config", 18);
              *(_BYTE *)(v36 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v36 + 17) = 0;
              if (v49 < 0)
                operator delete(__p);
              if (v57 < 0)
                operator delete(v54);
              v58 = 0u;
              v59 = 0u;
              v60 = 0u;
              v54 = &off_1E78B7238;
              v55 = &_bambiDomain;
              v56 = 1073741835;
              ImsResult::operator=(a3, (uint64_t)&v54);
            }
            ImsResult::~ImsResult((ImsResult *)&v54);
            goto LABEL_76;
          }
          std::string::basic_string[abi:ne180100]<0>(&v54, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v16 = ImsLogger::error(ims::_logger, (uint64_t)&v54, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"TTY media information missing.", 30);
          *(_BYTE *)(v16 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v16 + 17) = 0;
          if (v49 < 0)
            operator delete(__p);
          if (v57 < 0)
            operator delete(v54);
          *(_OWORD *)(a3 + 24) = 0u;
          *(_OWORD *)(a3 + 40) = 0u;
          *(_OWORD *)(a3 + 56) = 0u;
          *(_QWORD *)a3 = &off_1E78B7238;
          *(_QWORD *)(a3 + 8) = &_bambiDomain;
          v17 = 1073741825;
        }
        *(_DWORD *)(a3 + 16) = v17;
LABEL_76:
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        goto LABEL_80;
      }
    }
  }
  else
  {
    v10 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v54, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v15 = ImsLogger::error(ims::_logger, (uint64_t)&v54, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"SDPSession expired", 18);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  if (v49 < 0)
    operator delete(__p);
  if (v57 < 0)
    operator delete(v54);
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 1073741825;
  if (v10)
    goto LABEL_76;
LABEL_80:
  objc_autoreleasePoolPop(v8);
}

void sub_1BEE2BC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v33 - 104);
  _Unwind_Resume(a1);
}

void AVCRTTSession::createNwPath(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _BYTE *v11;
  unint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  _BYTE *v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  IpAddress *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *host_with_numeric_port;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  IpAddress *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _BYTE *v60;
  std::__shared_weak_count *v61;
  void *__p[2];
  char v63;
  uuid_string_t out;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(out, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)out, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"createNwPath", 12);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v63 < 0)
    operator delete(__p[0]);
  if (out[23] < 0)
    operator delete(*(void **)out);
  v60 = 0;
  v61 = 0;
  v9 = (std::__shared_weak_count *)a3[1];
  if (!v9)
  {
    v10 = 0;
    goto LABEL_13;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v61 = v10;
  if (!v10 || (v11 = (_BYTE *)*a3, (v60 = v11) == 0))
  {
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(out, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)out, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"SDPSession expired in AVCRTTSession::setConfiguration", 53);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (v63 < 0)
      operator delete(__p[0]);
    if (out[23] < 0)
      operator delete(*(void **)out);
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)a1 = &off_1E78B7238;
    *(_QWORD *)(a1 + 8) = &_bambiDomain;
    *(_DWORD *)(a1 + 16) = 1073741825;
    if (v10)
      goto LABEL_66;
    return;
  }
  v58 = 0;
  v59 = 0;
  v12 = *(_QWORD *)(a2 + 48);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 144))(a2);
  if (v13 == 2)
  {
    if (v11[584])
    {
      v14 = v11 + 152;
      goto LABEL_23;
    }
  }
  else if (v13 == 6 && v11[1856])
  {
    v14 = v11 + 1496;
    goto LABEL_23;
  }
  v14 = v11 + 1032;
  if (!v11[1328])
    v14 = 0;
LABEL_23:
  RTPTransportManager::getNwTransport(v12, *((unsigned __int16 *)v14 + 12), &v58);
  v56 = 0;
  v57 = 0;
  v16 = *(_QWORD *)(a2 + 48);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 144))(a2);
  if (v17 == 2)
  {
    if (v11[584])
    {
      v18 = v11 + 152;
      goto LABEL_31;
    }
  }
  else if (v17 == 6 && v11[1856])
  {
    v18 = v11 + 1496;
    goto LABEL_31;
  }
  v18 = v11 + 1032;
  if (!v11[1328])
    v18 = 0;
LABEL_31:
  RTPTransportManager::getNwTransport(v16, (unsigned __int16)(*((_WORD *)v18 + 12) + 1), &v56);
  if (v58)
  {
    if (v56)
    {
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 144))(a2);
      if (v19 == 2)
      {
        if (v11[584])
        {
          v20 = v11 + 152;
          goto LABEL_43;
        }
      }
      else if (v19 == 6 && v11[1856])
      {
        v20 = v11 + 1496;
        goto LABEL_43;
      }
      if (v11[1328])
      {
        v20 = v11 + 1032;
LABEL_43:
        v23 = (IpAddress *)*((_QWORD *)v20 + 1);
        v22 = (std::__shared_weak_count *)*((_QWORD *)v20 + 2);
        v54 = v23;
        v55 = v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
        }
        if (v23
          || (*(char *)(a2 + 543) < 0 ? (v26 = *(_QWORD *)(a2 + 528)) : (v26 = *(unsigned __int8 *)(a2 + 543)), v26))
        {
          AVCRTPStackController::getClientUniquePID(*(AVCRTPStackController **)(a2 + 504));
          std::string::basic_string[abi:ne180100]<0>(out, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v35 = ImsLogger::debug(ims::_logger, (uint64_t)out, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"nw_path local RTP endpoint port=", 32);
          *(_BYTE *)(v35 + 17) = 0;
          nw_endpoint_get_port(*(nw_endpoint_t *)(v58 + 24));
          std::ostream::operator<<();
          *(_BYTE *)(v35 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" RTCP port=", 11);
          *(_BYTE *)(v35 + 17) = 0;
          nw_endpoint_get_port(*(nw_endpoint_t *)(v56 + 24));
          std::ostream::operator<<();
          *(_BYTE *)(v35 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v35 + 17) = 0;
          if (v63 < 0)
            operator delete(__p[0]);
          if (out[23] < 0)
            operator delete(*(void **)out);
          std::string::basic_string[abi:ne180100]<0>(out, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v36 = ImsLogger::debug(ims::_logger, (uint64_t)out, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"nw_path remote endpoint address=", 32);
          *(_BYTE *)(v36 + 17) = 0;
          IpAddress::asString(v23, 0, v52);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v36 + 32))(v36, v52);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)" port=", 6);
          *(_BYTE *)(v36 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v36 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v36 + 17) = 0;
          if (v53 < 0)
            operator delete(v52[0]);
          if (v63 < 0)
            operator delete(__p[0]);
          if (out[23] < 0)
            operator delete(*(void **)out);
          IpAddress::asString(v23, 0, out);
          host_with_numeric_port = (void *)nw_endpoint_create_host_with_numeric_port();
          if (out[23] < 0)
            operator delete(*(void **)out);
          if (a4)
          {
            nw_parameters_set_delegated_unique_pid();
            *(_QWORD *)(a2 + 560) = nw_path_create_evaluator_for_endpoint();
            nw_release(host_with_numeric_port);
            if (*(_QWORD *)(a2 + 560))
            {
              nw_path_evaluator_get_client_id();
              memset(out, 0, sizeof(out));
              uuid_unparse((const unsigned __int8 *)(a2 + 616), out);
              std::string::basic_string[abi:ne180100]<0>(__p, "avc.rtt.session");
              std::string::basic_string[abi:ne180100]<0>(v52, "");
              v38 = ims::debug((uint64_t)__p, (uint64_t)v52);
              v39 = ImsOutStream::operator<<(v38, "RTCP nw_path_evaluator initialized with uuid = ");
              std::string::basic_string[abi:ne180100]<0>(v50, out);
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v39 + 32))(v39, v50);
              v40 = (_BYTE *)ImsOutStream::operator<<(v39, " clientID=");
              std::ostream::operator<<();
              v40[17] = 0;
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_90:
              v40[17] = 0;
              if (v51 < 0)
                operator delete(v50[0]);
              if (v53 < 0)
                operator delete(v52[0]);
              if (v63 < 0)
                operator delete(__p[0]);
              v43 = 0;
LABEL_105:
              *(_OWORD *)(a1 + 24) = 0u;
              *(_OWORD *)(a1 + 40) = 0u;
              *(_OWORD *)(a1 + 56) = 0u;
              *(_QWORD *)a1 = &off_1E78B7238;
              *(_QWORD *)(a1 + 8) = &_bambiDomain;
              *(_DWORD *)(a1 + 16) = v43;
              if (v22)
              {
                v48 = (unint64_t *)&v22->__shared_owners_;
                do
                  v49 = __ldaxr(v48);
                while (__stlxr(v49 - 1, v48));
                if (!v49)
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
              goto LABEL_55;
            }
            std::string::basic_string[abi:ne180100]<0>(out, "avc.rtt.session");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            v44 = ims::error((uint64_t)out, (uint64_t)__p);
            v45 = (_BYTE *)ImsOutStream::operator<<(v44, "Failed to create RTCP nw_path_evaluator");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          else
          {
            nw_parameters_set_delegated_unique_pid();
            *(_QWORD *)(a2 + 552) = nw_path_create_evaluator_for_endpoint();
            nw_release(host_with_numeric_port);
            if (*(_QWORD *)(a2 + 552))
            {
              nw_path_evaluator_get_client_id();
              memset(out, 0, sizeof(out));
              uuid_unparse((const unsigned __int8 *)(a2 + 600), out);
              std::string::basic_string[abi:ne180100]<0>(__p, "avc.rtt.session");
              std::string::basic_string[abi:ne180100]<0>(v52, "");
              v41 = ims::debug((uint64_t)__p, (uint64_t)v52);
              v42 = ImsOutStream::operator<<(v41, "RTP nw_path_evaluator initialized with uuid = ");
              std::string::basic_string[abi:ne180100]<0>(v50, out);
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v42 + 32))(v42, v50);
              v40 = (_BYTE *)ImsOutStream::operator<<(v42, " clientID=");
              std::ostream::operator<<();
              v40[17] = 0;
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_90;
            }
            std::string::basic_string[abi:ne180100]<0>(out, "avc.rtt.session");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            v46 = ims::error((uint64_t)out, (uint64_t)__p);
            v45 = (_BYTE *)ImsOutStream::operator<<(v46, "Failed to create RTP nw_path_evaluator");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(out, "avc.rtt.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          v47 = ims::warn((uint64_t)out, (uint64_t)__p);
          v45 = (_BYTE *)ImsOutStream::operator<<(v47, "No remote connection found for session");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        v45[17] = 0;
        if (v63 < 0)
          operator delete(__p[0]);
        if (out[23] < 0)
          operator delete(*(void **)out);
        v43 = 1073741825;
        goto LABEL_105;
      }
      std::string::basic_string[abi:ne180100]<0>(out, "avc.rtt.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v21 = ImsLogger::warn(ims::_logger, (uint64_t)out, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Not enough information to configure with", 40);
      *(_BYTE *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(out, "avc.rtt.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v21 = ImsLogger::error(ims::_logger, (uint64_t)out, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"RTCP Transport is null", 22);
      *(_BYTE *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(out, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v21 = ImsLogger::error(ims::_logger, (uint64_t)out, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"RTP Transport is null", 21);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v21 + 17) = 0;
  if (v63 < 0)
    operator delete(__p[0]);
  if (out[23] < 0)
    operator delete(*(void **)out);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 1073741825;
LABEL_55:
  v27 = v57;
  if (v57)
  {
    v28 = (unint64_t *)&v57->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v59;
  if (v59)
  {
    v31 = (unint64_t *)&v59->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v10 = v61;
  if (v61)
  {
LABEL_66:
    v33 = (unint64_t *)&v10->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BEE2C948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void AVCRTTSession::initializeWithSkywalk(AVCRTTSession *this, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  const char *v10;
  size_t v11;
  id v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v33[2];
  void *v34;
  std::__shared_weak_count *v35;
  void *__p[2];
  char v37;
  void *v38;
  CFTypeRef cf;
  char v40;
  id v41;
  _QWORD v42[2];
  _QWORD v43[3];

  v43[2] = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1C3B876AC]();
  v41 = 0;
  v5 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", a2 + 600);
  v6 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", a2 + 616);
  std::string::basic_string[abi:ne180100]<0>(&v38, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)&v38, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Session initialize request [sessionId=", 38);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" rtpUuid=", 9);
  *(_BYTE *)(v7 + 17) = 0;
  v8 = (const char *)objc_msgSend((id)objc_msgSend(v5, "UUIDString"), "UTF8String");
  v9 = strlen(v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)v8, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" rtcpUuid=", 10);
  *(_BYTE *)(v7 + 17) = 0;
  v10 = (const char *)objc_msgSend((id)objc_msgSend(v6, "UUIDString"), "UTF8String");
  v11 = strlen(v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)v10, v11);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v37 < 0)
    operator delete(__p[0]);
  if (v40 < 0)
    operator delete(v38);
  v12 = objc_alloc(MEMORY[0x1E0CB3940]);
  v13 = (_QWORD *)(a2 + 576);
  if (*(char *)(a2 + 599) < 0)
    v13 = (_QWORD *)*v13;
  v14 = (id)objc_msgSend(v12, "initWithUTF8String:", v13);
  v15 = *MEMORY[0x1E0CF2350];
  v42[0] = *MEMORY[0x1E0CF2348];
  v42[1] = v15;
  if (*(_BYTE *)(a2 + 568))
    v16 = &unk_1E78F4600;
  else
    v16 = &unk_1E78F4618;
  v43[0] = v14;
  v43[1] = v16;
  v17 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v43, v42, 2);
  *(_QWORD *)(a2 + 480) = objc_msgSend(objc_alloc(MEMORY[0x1E0CF22D0]), "initWithRTPNWConnectionClientID:rtcpNWConnectionClientID:options:error:", v5, v6, v17, &v41);
  if (v41)
  {
    *(_QWORD *)(a2 + 480) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v38, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::error(ims::_logger, (uint64_t)&v38, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Session init error: ", 20);
    *(_BYTE *)(v18 + 17) = 0;
    if (v41)
      v19 = (const char *)objc_msgSend((id)objc_msgSend(v41, "description"), "UTF8String");
    else
      v19 = " returned error is nil";
    v24 = strlen(v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)v19, v24);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (v37 < 0)
      operator delete(__p[0]);
    if (v40 < 0)
      operator delete(v38);
    v38 = 0;
    cf = 0;
    v25 = *(std::__shared_weak_count **)(a2 + 40);
    if (v25)
    {
      cf = std::__shared_weak_count::lock(v25);
      if (cf)
      {
        v26 = *(void **)(a2 + 32);
        v38 = v26;
        if (v26)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v34);
          (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v26 + 40))(v26, &v34, 4);
          v27 = v35;
          if (v35)
          {
            p_shared_owners = (unint64_t *)&v35->__shared_owners_;
            do
              v29 = __ldaxr(p_shared_owners);
            while (__stlxr(v29 - 1, p_shared_owners));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
        }
      }
    }
    v30 = (std::__shared_weak_count *)cf;
    if (cf)
    {
      v31 = (unint64_t *)((char *)cf + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_QWORD *)this = &off_1E78B7238;
    *((_QWORD *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 1073741825;
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    objc_autoreleasePoolPop(v4);
    std::string::basic_string[abi:ne180100]<0>(&v38, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v20 = ImsLogger::debug(ims::_logger, (uint64_t)&v38, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Session initialize success  [sessionId=", 39);
    *(_BYTE *)(v20 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v20 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
    if (v37 < 0)
      operator delete(__p[0]);
    if (v40 < 0)
      operator delete(v38);
    v38 = 0;
    cf = 0;
    ims::CFNumber::CFNumber((ims::CFNumber *)&v38, objc_msgSend(*(id *)(a2 + 480), "streamToken"));
    v23 = a2 + 48;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = *(_QWORD *)(v23 + 8);
    v33[0] = off_1E78EAB00;
    v33[1] = cf;
    if (cf)
      CFRetain(cf);
    v33[0] = &off_1E78EABB0;
    RTPManager::handleTextStreamToken(v22, v21, (uint64_t)v33);
    ims::CFType::~CFType((ims::CFType *)v33);
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_QWORD *)this = &off_1E78B7238;
    *((_QWORD *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 0;
    ims::CFType::~CFType((ims::CFType *)&v38);
  }
}

void sub_1BEE2D110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

double AVCRTTSession::completeInit(AVCRTTSession *this, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  AVCRTTSessionDelegate *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void (***v28)(void *, void **, uint64_t);
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void (***v37)(void *, void **, uint64_t);
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void (***v44)(void *, void **, uint64_t);
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  double result;
  void *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  void *v54;
  std::__shared_weak_count *v55;
  void *v56;
  std::__shared_weak_count *v57;
  void *v58;
  std::__shared_weak_count *v59;
  void *__p[2];
  char v61;
  void (***v62)(void *, void **, uint64_t);
  std::__shared_weak_count *v63;
  char v64;

  v4 = objc_msgSend(*(id *)(a2 + 480), "capabilities");
  if (!v4)
  {
    *(_QWORD *)(a2 + 480) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v62, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v26 = ImsLogger::error(ims::_logger, (uint64_t)&v62, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"AVC session doesn't have a capabilities dict", 44);
    *(_BYTE *)(v26 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v26 + 17) = 0;
    if (v61 < 0)
      operator delete(__p[0]);
    if (v64 < 0)
      operator delete(v62);
    v62 = 0;
    v63 = 0;
    v27 = *(std::__shared_weak_count **)(a2 + 40);
    if (v27)
    {
      v63 = std::__shared_weak_count::lock(v27);
      if (v63)
      {
        v28 = *(void (****)(void *, void **, uint64_t))(a2 + 32);
        v62 = v28;
        if (v28)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v58);
          (**v28)(v28, &v58, 9);
          v29 = v59;
          if (v59)
          {
            p_shared_owners = (unint64_t *)&v59->__shared_owners_;
            do
              v31 = __ldaxr(p_shared_owners);
            while (__stlxr(v31 - 1, p_shared_owners));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
        }
      }
    }
    v32 = v63;
    if (!v63)
      goto LABEL_75;
    v33 = (unint64_t *)&v63->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    goto LABEL_73;
  }
  v5 = (void *)v4;
  std::string::basic_string[abi:ne180100]<0>(&v62, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v62, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"capabilities dict: ", 19);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = (const char *)objc_msgSend((id)objc_msgSend(v5, "description"), "UTF8String");
  v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)v7, v8);
  *(_BYTE *)(v6 + 17) = 0;
  if (v61 < 0)
    operator delete(__p[0]);
  if (v64 < 0)
    operator delete(v62);
  v9 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("avcKeySupportedCodecs"));
  if (!v9)
  {
    *(_QWORD *)(a2 + 480) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v62, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v35 = ImsLogger::debug(ims::_logger, (uint64_t)&v62, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"No supported codecs", 19);
    *(_BYTE *)(v35 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v35 + 17) = 0;
    if (v61 < 0)
      operator delete(__p[0]);
    if (v64 < 0)
      operator delete(v62);
    v62 = 0;
    v63 = 0;
    v36 = *(std::__shared_weak_count **)(a2 + 40);
    if (v36)
    {
      v63 = std::__shared_weak_count::lock(v36);
      if (v63)
      {
        v37 = *(void (****)(void *, void **, uint64_t))(a2 + 32);
        v62 = v37;
        if (v37)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v56);
          (**v37)(v37, &v56, 9);
          v38 = v57;
          if (v57)
          {
            v39 = (unint64_t *)&v57->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
        }
      }
    }
    v32 = v63;
    if (!v63)
      goto LABEL_75;
    v41 = (unint64_t *)&v63->__shared_owners_;
    do
      v34 = __ldaxr(v41);
    while (__stlxr(v34 - 1, v41));
    goto LABEL_73;
  }
  v10 = (void *)v9;
  std::string::basic_string[abi:ne180100]<0>(&v62, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v11 = ImsLogger::debug(ims::_logger, (uint64_t)&v62, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Got supported codecs", 20);
  *(_BYTE *)(v11 + 17) = 0;
  v12 = (const char *)objc_msgSend((id)objc_msgSend(v10, "description"), "UTF8String");
  v13 = strlen(v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)v12, v13);
  *(_BYTE *)(v11 + 17) = 0;
  if (v61 < 0)
    operator delete(__p[0]);
  if (v64 < 0)
    operator delete(v62);
  v14 = [AVCRTTSessionDelegate alloc];
  RTPSharedPointerBase::getShared<AVCRTTSession>(&v54, a2);
  v15 = *(std::__shared_weak_count **)(a2 + 512);
  v52 = *(_QWORD *)(a2 + 504);
  v53 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = -[AVCRTTSessionDelegate initWithOwner:andStackController:](v14, "initWithOwner:andStackController:", &v54, &v52);
  v19 = v53;
  if (v53)
  {
    v20 = (unint64_t *)&v53->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v55;
  if (v55)
  {
    v23 = (unint64_t *)&v55->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (v18)
        goto LABEL_24;
      goto LABEL_58;
    }
  }
  if (!v18)
  {
LABEL_58:
    *(_QWORD *)(a2 + 480) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v62, "avc.rtt.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v42 = ImsLogger::error(ims::_logger, (uint64_t)&v62, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"Unable to create AVC media stream delegate", 42);
    *(_BYTE *)(v42 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v42 + 17) = 0;
    if (v61 < 0)
      operator delete(__p[0]);
    if (v64 < 0)
      operator delete(v62);
    v62 = 0;
    v63 = 0;
    v43 = *(std::__shared_weak_count **)(a2 + 40);
    if (v43)
    {
      v63 = std::__shared_weak_count::lock(v43);
      if (v63)
      {
        v44 = *(void (****)(void *, void **, uint64_t))(a2 + 32);
        v62 = v44;
        if (v44)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a2, &v50);
          (**v44)(v44, &v50, 9);
          v45 = v51;
          if (v51)
          {
            v46 = (unint64_t *)&v51->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
        }
      }
    }
    v32 = v63;
    if (!v63)
      goto LABEL_75;
    v48 = (unint64_t *)&v63->__shared_owners_;
    do
      v34 = __ldaxr(v48);
    while (__stlxr(v34 - 1, v48));
LABEL_73:
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
LABEL_75:
    v25 = 0x40000000;
    goto LABEL_76;
  }
LABEL_24:
  objc_msgSend(*(id *)(a2 + 480), "setDelegate:", v18);
  v25 = 0;
LABEL_76:
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = &off_1E78B7238;
  *((_QWORD *)this + 1) = &_bambiDomain;
  *((_DWORD *)this + 4) = v25;
  return result;
}

void sub_1BEE2D844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 88);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'AVCRTTSession::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  AVCRTTSession::setConfiguration(a1 - 24, a2, a3);
}

void *AVCRTTSession::configureRemoteRTCP(AVCRTTSession *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  void *result;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "avc.rtt.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" enabled=", 9);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" interval=", 10);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (*((_BYTE *)this + 473))
  {
    objc_msgSend(*((id *)this + 60), "setRtcpEnabled:", a2);
    objc_msgSend(*((id *)this + 60), "setRtcpSendIntervalSec:", (double)a3);
  }
  result = (void *)*((_QWORD *)this + 61);
  if (result)
  {
    objc_msgSend(result, "setRtcpEnabled:", a2);
    return (void *)objc_msgSend(*((id *)this + 61), "setRtcpSendInterval:", (double)a3);
  }
  return result;
}

void sub_1BEE2DA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *`non-virtual thunk to'AVCRTTSession::configureRemoteRTCP(AVCRTTSession *this, uint64_t a2, unsigned int a3)
{
  return AVCRTTSession::configureRemoteRTCP((AVCRTTSession *)((char *)this - 24), a2, a3);
}

double AVCRTTSession::startSendingDTMF@<D0>(AVCRTTSession *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 1073741834;
  return result;
}

double AVCRTTSession::stopSendingDTMF@<D0>(AVCRTTSession *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 1073741834;
  return result;
}

double AVCRTTSession::sendDTMFDigits@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 1073741834;
  return result;
}

uint64_t AVCRTTSession::mediaType(AVCRTTSession *this)
{
  return 4;
}

BOOL AVCRTTSession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return a2 == 4;
}

uint64_t `non-virtual thunk to'AVCRTTSession::mediaType(AVCRTTSession *this)
{
  return 4;
}

BOOL `non-virtual thunk to'AVCRTTSession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return a2 == 4;
}

double `non-virtual thunk to'AVCRTTSession::startSendingDTMF@<D0>(AVCRTTSession *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 1073741834;
  return result;
}

double `non-virtual thunk to'AVCRTTSession::stopSendingDTMF@<D0>(AVCRTTSession *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 1073741834;
  return result;
}

double `non-virtual thunk to'AVCRTTSession::sendDTMFDigits@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 1073741834;
  return result;
}

_QWORD *IMSRegistrationManager::IMSRegistrationManager(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  std::string __p;

  *a1 = &unk_1E78BA6B8;
  a1[1] = off_1E78BA6D8;
  v4 = (uint64_t)(a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "reg");
  ImsLogContainer::ImsLogContainer(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = off_1E78BA520;
  a1[1] = &unk_1E78BA598;
  a1[2] = &unk_1E78BA600;
  a1[19] = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  a1[18] = a1 + 19;
  a1[23] = 0;
  a1[22] = 0;
  a1[20] = 0;
  a1[21] = a1 + 22;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](a1 + 16, a2);
  return a1;
}

void sub_1BEE2DCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSRegistrationManager::~IMSRegistrationManager(IMSRegistrationManager *this)
{
  *(_QWORD *)this = off_1E78BA520;
  *((_QWORD *)this + 1) = &unk_1E78BA598;
  *((_QWORD *)this + 2) = &unk_1E78BA600;
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 22));
  std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::destroy(*((_QWORD **)this + 19));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  *((_QWORD *)this + 2) = off_1E78CFE68;
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  IMSRegistrationManager::~IMSRegistrationManager(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'IMSRegistrationManager::~IMSRegistrationManager(IMSRegistrationManager *this)
{
  IMSRegistrationManager::~IMSRegistrationManager((IMSRegistrationManager *)((char *)this - 8));
}

{
  IMSRegistrationManager::~IMSRegistrationManager((IMSRegistrationManager *)((char *)this - 16));
}

{
  IMSRegistrationManager::~IMSRegistrationManager((IMSRegistrationManager *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  IMSRegistrationManager::~IMSRegistrationManager((IMSRegistrationManager *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

void IMSRegistrationManager::sipStackInitialized(_QWORD *a1, void **a2)
{
  uint64_t **v4;
  _QWORD *v5;
  void **v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v4 = (uint64_t **)(a1 + 19);
  v5 = (_QWORD *)a1[19];
  if (!v5)
    goto LABEL_12;
  v6 = (void **)(a1 + 19);
  do
  {
    v7 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5 + 4, a2);
    if (v7 >= 0)
      v8 = v5;
    else
      v8 = v5 + 1;
    if (v7 >= 0)
      v6 = (void **)v5;
    v5 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == (void **)v4
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4) & 0x80) != 0)
  {
LABEL_12:
    v12 = a1[2];
    v11 = a1 + 2;
    v13 = (*(uint64_t (**)(_QWORD *))(v12 + 56))(v11);
    (*(void (**)(_QWORD *, uint64_t))(*v11 + 16))(v11, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Unable to find configuration for ", 33);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 32))(v13, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
  }
  else
  {
    v9 = *(_QWORD **)(a1[16] + 168);
    v14 = a2;
    v10 = std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4 - 1, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v14);
    BambiClient::startRegistration(v9, (unsigned __int8 *)a2, (uint64_t)(v10 + 7));
  }
}

uint64_t SipRegistrationConfig::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char v7;
  char v8;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  if (a1 != a2)
    std::vector<SipUri>::__assign_with_size[abi:ne180100]<SipUri*,SipUri*>((SipUri **)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v4 = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  SipUri::operator=((SipUri *)(a1 + 72), a2 + 72);
  SipUri::operator=((SipUri *)(a1 + 480), a2 + 480);
  std::string::operator=((std::string *)(a1 + 888), (const std::string *)(a2 + 888));
  std::string::operator=((std::string *)(a1 + 912), (const std::string *)(a2 + 912));
  std::string::operator=((std::string *)(a1 + 936), (const std::string *)(a2 + 936));
  if (a1 != a2)
    std::vector<SipRetryInfo>::__assign_with_size[abi:ne180100]<SipRetryInfo*,SipRetryInfo*>((char *)(a1 + 960), *(char **)(a2 + 960), *(_QWORD *)(a2 + 968), (uint64_t)(*(_QWORD *)(a2 + 968) - *(_QWORD *)(a2 + 960)) >> 4);
  v6 = *(_OWORD *)(a2 + 984);
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  *(_OWORD *)(a1 + 984) = v6;
  std::string::operator=((std::string *)(a1 + 1008), (const std::string *)(a2 + 1008));
  std::string::operator=((std::string *)(a1 + 1032), (const std::string *)(a2 + 1032));
  v7 = *(_BYTE *)(a2 + 1072);
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 1056);
  *(_BYTE *)(a1 + 1072) = v7;
  std::string::operator=((std::string *)(a1 + 1080), (const std::string *)(a2 + 1080));
  std::string::operator=((std::string *)(a1 + 1104), (const std::string *)(a2 + 1104));
  v8 = *(_BYTE *)(a2 + 1144);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(_BYTE *)(a1 + 1144) = v8;
  std::string::operator=((std::string *)(a1 + 1152), (const std::string *)(a2 + 1152));
  std::string::operator=((std::string *)(a1 + 1176), (const std::string *)(a2 + 1176));
  v9 = *(_OWORD *)(a2 + 1200);
  *(_BYTE *)(a1 + 1216) = *(_BYTE *)(a2 + 1216);
  *(_OWORD *)(a1 + 1200) = v9;
  v10 = *(_BYTE *)(a2 + 1226);
  *(_WORD *)(a1 + 1224) = *(_WORD *)(a2 + 1224);
  *(_BYTE *)(a1 + 1226) = v10;
  if (a1 != a2)
  {
    std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)(a1 + 1232), *(unsigned int **)(a2 + 1232), (unsigned int *)(a2 + 1240));
    std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)(a1 + 1256), *(unsigned int **)(a2 + 1256), (unsigned int *)(a2 + 1264));
  }
  std::string::operator=((std::string *)(a1 + 1280), (const std::string *)(a2 + 1280));
  *(_QWORD *)(a1 + 1304) = *(_QWORD *)(a2 + 1304);
  std::string::operator=((std::string *)(a1 + 1312), (const std::string *)(a2 + 1312));
  v11 = *(_OWORD *)(a2 + 1363);
  v12 = *(_OWORD *)(a2 + 1352);
  *(_OWORD *)(a1 + 1336) = *(_OWORD *)(a2 + 1336);
  *(_OWORD *)(a1 + 1352) = v12;
  *(_OWORD *)(a1 + 1363) = v11;
  if (a1 != a2)
  {
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1392), *(__int128 **)(a2 + 1392), (__int128 *)(a2 + 1400));
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1424), *(__int128 **)(a2 + 1424), (__int128 *)(a2 + 1432));
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1456), *(__int128 **)(a2 + 1456), (__int128 *)(a2 + 1464));
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1488), *(__int128 **)(a2 + 1488), (__int128 *)(a2 + 1496));
    std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)(a1 + 1520), *(unsigned int **)(a2 + 1520), (unsigned int *)(a2 + 1528));
  }
  *(_BYTE *)(a1 + 1544) = *(_BYTE *)(a2 + 1544);
  std::string::operator=((std::string *)(a1 + 1552), (const std::string *)(a2 + 1552));
  std::string::operator=((std::string *)(a1 + 1576), (const std::string *)(a2 + 1576));
  std::string::operator=((std::string *)(a1 + 1600), (const std::string *)(a2 + 1600));
  *(_BYTE *)(a1 + 1624) = *(_BYTE *)(a2 + 1624);
  if (a1 != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 1632), *(std::string **)(a2 + 1632), *(__int128 **)(a2 + 1640), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 1640) - *(_QWORD *)(a2 + 1632)) >> 3));
  v13 = *(_QWORD *)(a2 + 1656);
  *(_WORD *)(a1 + 1664) = *(_WORD *)(a2 + 1664);
  *(_QWORD *)(a1 + 1656) = v13;
  return a1;
}

void ims::AccessNetworks::~AccessNetworks(void **this)
{
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void IMSRegistrationManager::sipStackInvalidated(uint64_t a1, void **a2)
{
  void ***v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  BOOL v9;
  uint64_t *v10;

  v3 = (void ***)(a1 + 168);
  v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 168, a2);
  if ((void **)(a1 + 176) != v4)
  {
    v5 = v4;
    v6 = (void **)v4[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (void **)*v6;
      }
      while (v6);
    }
    else
    {
      v8 = v4;
      do
      {
        v7 = (void **)v8[2];
        v9 = *v7 == v8;
        v8 = v7;
      }
      while (!v9);
    }
    if (*v3 == v4)
      *v3 = v7;
    v10 = *(uint64_t **)(a1 + 176);
    --*(_QWORD *)(a1 + 184);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v10, (uint64_t *)v5);
    if (*((char *)v5 + 55) < 0)
      operator delete(v5[4]);
    operator delete(v5);
  }
}

void ims::RegistrationActiveInfo::~RegistrationActiveInfo(void **this)
{
  void **v2;

  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  v2 = this + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t *IMSRegistrationManager::setRegistrationTerminated(uint64_t a1, void **a2, int a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *result;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p;
  std::__shared_weak_count *v29;
  char v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;

  v31 = a4;
  v33 = 0;
  v34 = a3;
  v32 = 200;
  BYTE4(v32) = a5;
  *(_WORD *)((char *)&v32 + 5) = a4 != -1;
  v9 = a1 + 16;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"send registration terminated due to ", 36);
  *(_BYTE *)(v10 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, off_1E78BA740[a3]);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" ", 1);
  *(_BYTE *)(v10 + 17) = 0;
  if (a4 == -1)
    v11 = "will NOT retry";
  else
    v11 = "will retry";
  if (a4 == -1)
    v12 = 14;
  else
    v12 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)v11, v12);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v30 < 0)
    operator delete(__p);
  if (IMSRegistrationManager::getRegistrationState(a1, a2))
  {
    v13 = *(_QWORD *)(a1 + 128);
    v15 = *(void **)(v13 + 288);
    v14 = *(std::__shared_weak_count **)(v13 + 296);
    __p = v15;
    v29 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      v13 = *(_QWORD *)(a1 + 128);
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, void **))(**(_QWORD **)(v13 + 168) + 192))(&v26, *(_QWORD *)(v13 + 168), a2);
    IMSMetricsManager::logRegistrationTerminated((uint64_t)v15, &v26);
    v18 = v27;
    if (v27)
    {
      v19 = (unint64_t *)&v27->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v29;
    if (v29)
    {
      v22 = (unint64_t *)&v29->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v24 = IMSClientManager::delegateForStack(a2);
  (*(void (**)(uint64_t, int *))(*(_QWORD *)(v24 + 8) + 32))(v24 + 8, &v31);
  __p = a2;
  result = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 168), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  *((_BYTE *)result + 56) = 0;
  return result;
}

void sub_1BEE2E5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

BOOL IMSRegistrationManager::getRegistrationState(uint64_t a1, void **a2)
{
  uint64_t **v3;
  void **v5;

  v3 = (uint64_t **)(a1 + 168);
  if ((void **)(a1 + 176) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 168, a2))return 0;
  v5 = a2;
  return *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v5)+ 56) != 0;
}

uint64_t IMSRegistrationManager::setRegistrationError(uint64_t a1, void **a2, uint64_t a3, int a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD v11[2];
  int v12;
  int v13;
  int v14;

  v12 = 0;
  v13 = 0;
  *(_WORD *)((char *)&v12 + 1) = a3 != -1;
  v14 = 1;
  v11[0] = a3;
  v11[1] = a4;
  v5 = a1 + 16;
  if (a3 == -1)
    v6 = "will NOT retry";
  else
    v6 = "will retry";
  if (a3 == -1)
    v7 = 14;
  else
    v7 = 10;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"sending registration terminated due to sip registration error ", 62);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)v6, v7);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v9 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)(v9 + 8) + 32))(v9 + 8, v11);
}

uint64_t IMSRegistrationManager::handleRegistrationStateChanged(uint64_t a1, void **a2, uint64_t a3, int a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  if (a4)
  {
    v6 = *(_QWORD *)(a1 + 128);
    v8 = *(_QWORD *)(v6 + 288);
    v7 = *(std::__shared_weak_count **)(v6 + 296);
    v21 = v8;
    v22 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v6 = *(_QWORD *)(a1 + 128);
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, void **))(**(_QWORD **)(v6 + 168) + 192))(&v19, *(_QWORD *)(v6 + 168), a2);
    IMSMetricsManager::logRegistrationStateChange(v8, &v19, a3);
    v11 = v20;
    if (v20)
    {
      v12 = (unint64_t *)&v20->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v22;
    if (v22)
    {
      v15 = (unint64_t *)&v22->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v17 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 + 8) + 16))(v17 + 8, a3);
}

void sub_1BEE2E880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'IMSRegistrationManager::handleRegistrationStateChanged(uint64_t a1, void **a2, uint64_t a3, int a4)
{
  return IMSRegistrationManager::handleRegistrationStateChanged(a1 - 8, a2, a3, a4);
}

uint64_t IMSRegistrationManager::handleRegistrationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(v6 + 288);
  v7 = *(std::__shared_weak_count **)(v6 + 296);
  v20 = v8;
  v21 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a1 + 128);
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v6 + 168) + 192))(&v18, *(_QWORD *)(v6 + 168), a2);
  IMSMetricsManager::logRegistrationRequest(v8, &v18, a3);
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  result = *(_QWORD *)(a1 + 120);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 48))(result, a2, a3);
  return result;
}

void sub_1BEE2E9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'IMSRegistrationManager::handleRegistrationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IMSRegistrationManager::handleRegistrationRequest(a1 - 8, a2, a3);
}

uint64_t IMSRegistrationManager::handleRegistrationActive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  std::string *v12;
  __int128 v13;
  __int128 *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t result;
  uint64_t v39;
  std::__shared_weak_count *v40;
  void *__p[4];
  __int128 v42;
  void *v43[2];
  __int128 v44;
  uint64_t v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  std::string *v49;
  std::string *v50;
  unint64_t v51;
  std::string __str;
  __int128 v53;
  void *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 + 48) + 504);
  v55 = 0;
  v56 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 128) + 168) + 192))(&v55);
  v53 = 0uLL;
  v54 = 0;
  memset(&__str, 0, sizeof(__str));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __str = *(std::string *)a2;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v7 = *(_QWORD **)(v55 + 144);
  v8 = v7[67];
  if (v8 || (v8 = v7[68]) != 0)
  {
    SipUri::asString(v8, (uint64_t)&v53, 2);
    v7 = *(_QWORD **)(v55 + 144);
  }
  if (v7[61] != v7[62])
  {
    v46 = 0;
    v47 = 0;
    v48 = 0;
    SipRouteSet::allHops((uint64_t)(v7 + 60), (char **)&v46);
    v9 = (uint64_t *)v46;
    v10 = (uint64_t *)v47;
    if (v46 != v47)
    {
      do
      {
        v11 = *v9;
        memset(__p, 0, 24);
        SipUri::asString(v11, (uint64_t)__p, 2);
        v12 = v50;
        if ((unint64_t)v50 >= v51)
        {
          v14 = (__int128 *)std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)&v49, (__int128 *)__p);
        }
        else
        {
          if (SHIBYTE(__p[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v50, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v13 = *(_OWORD *)__p;
            v50->__r_.__value_.__r.__words[2] = (std::string::size_type)__p[2];
            *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
          }
          v14 = (__int128 *)&v12[1];
        }
        v50 = (std::string *)v14;
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        ++v9;
      }
      while (v9 != v10);
      v9 = (uint64_t *)v46;
    }
    if (v9)
    {
      v47 = (__int128 *)v9;
      operator delete(v9);
    }
    v7 = *(_QWORD **)(v55 + 144);
  }
  v15 = (_QWORD *)v7[31];
  v16 = (std::__shared_weak_count *)v7[32];
  __p[0] = v15;
  __p[1] = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = v15[59];
  v20 = time(0);
  if (v16)
  {
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v45 = 0;
  *(_OWORD *)v43 = 0u;
  v44 = 0u;
  v42 = 0u;
  memset(__p, 0, sizeof(__p));
  LODWORD(__p[0]) = v6;
  if (SHIBYTE(v54) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v53, *((std::string::size_type *)&v53 + 1));
  }
  else
  {
    *(_OWORD *)&__p[1] = v53;
    __p[3] = v54;
  }
  *(_OWORD *)v43 = 0u;
  v44 = 0u;
  v42 = 0u;
  std::string::operator=((std::string *)&v43[1], &__str);
  LODWORD(v45) = v19 - v20;
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v42, v49, (__int128 *)v50, 0xAAAAAAAAAAAAAAABLL * (((char *)v50 - (char *)v49) >> 3));
  v23 = IMSClientManager::delegateForStack((void **)a2);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(v23 + 8) + 24))(v23 + 8, __p);
  v46 = (__int128 *)a2;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 168), (void **)a2, (uint64_t)&std::piecewise_construct, &v46)+ 56) = 1;
  if (SHIBYTE(v44) < 0)
    operator delete(v43[1]);
  v46 = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  __p[0] = &v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54) < 0)
    operator delete((void *)v53);
  v24 = v56;
  if (v56)
  {
    v25 = (unint64_t *)&v56->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(_QWORD *)(a1 + 128);
  v29 = *(void **)(v27 + 288);
  v28 = *(unint64_t **)(v27 + 296);
  __p[0] = v29;
  __p[1] = v28;
  if (v28)
  {
    v30 = v28 + 1;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    v27 = *(_QWORD *)(a1 + 128);
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v27 + 168) + 192))(&v39, *(_QWORD *)(v27 + 168), a2);
  IMSMetricsManager::logRegistrationSuccess((uint64_t)v29, &v39, a3);
  v32 = v40;
  if (v40)
  {
    v33 = (unint64_t *)&v40->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v36 = (unint64_t *)((char *)__p[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  result = *(_QWORD *)(a1 + 120);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2, a3);
  return result;
}

void sub_1BEE2EE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30)
{
  uint64_t v30;

  a11 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  if (*(char *)(v30 - 121) < 0)
    operator delete(*(void **)(v30 - 144));
  if (*(char *)(v30 - 89) < 0)
    operator delete(*(void **)(v30 - 112));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 88);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'IMSRegistrationManager::handleRegistrationActive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IMSRegistrationManager::handleRegistrationActive(a1 - 8, a2, a3);
}

uint64_t IMSRegistrationManager::handleRegistrationTerminated(_QWORD *a1, void **a2, unsigned int *a3, int a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  const std::string *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  time_t Retry;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  char v25;
  uint64_t v26;
  std::string::size_type v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *size;
  unint64_t *v35;
  unint64_t v36;
  uint64_t result;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string __p;

  v8 = a1 + 2;
  v9 = (*(uint64_t (**)(_QWORD *))(a1[2] + 64))(a1 + 2);
  (*(void (**)(_QWORD *, uint64_t))(*v8 + 16))(v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Registration terminated due to ", 31);
  *(_BYTE *)(v9 + 17) = 0;
  v10 = a3[14];
  if (0xAAAAAAAAAAAAAAABLL * ((qword_1ED704438 - _terminationReasonStrings) >> 3) <= v10)
    v11 = (const std::string *)"Unknown";
  else
    v11 = (const std::string *)(_terminationReasonStrings + 24 * v10);
  LoggableString::LoggableString(&__p, v11);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 40))(v9, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = (*(uint64_t (**)(_QWORD *))(*v8 + 64))(v8);
  (*(void (**)(_QWORD *, uint64_t))(*v8 + 16))(v8, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Network is ", 11);
  *(_BYTE *)(v12 + 17) = 0;
  v13 = a3[14] - 4;
  if (v13 > 0xD)
  {
    v15 = 0;
    v14 = "";
  }
  else
  {
    v14 = off_1E78BA798[v13];
    v15 = qword_1BF29A3D8[v13];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)v14, v15);
  *(_BYTE *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"aware of our deregistration", 27);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  v16 = (*(uint64_t (**)(_QWORD *))(*v8 + 64))(v8);
  (*(void (**)(_QWORD *, uint64_t))(*v8 + 16))(v8, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"Network ", 8);
  *(_BYTE *)(v16 + 17) = 0;
  v17 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a3 + 48))(a3);
  if (v17)
    v18 = "initiated";
  else
    v18 = "didn't initiate";
  if (v17)
    v19 = 9;
  else
    v19 = 15;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)v18, v19);
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" our deregistration", 19);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v16 + 17) = 0;
  Retry = SipRegistrationNotification::secondsUntilNextRetry((SipRegistrationNotification *)a3);
  if (a4)
  {
    v21 = (*(uint64_t (**)(_QWORD *))(*v8 + 64))(v8);
    (*(void (**)(_QWORD *, uint64_t))(*v8 + 16))(v8, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"hasDeferredRegistration: set retryAfter = 1 instead of ", 55);
    *(_BYTE *)(v21 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    Retry = 1;
  }
  v22 = a3[14];
  v23 = 3;
  v24 = 2;
  switch(v22)
  {
    case 5u:
    case 6u:
    case 9u:
      goto LABEL_20;
    case 0xAu:
      goto LABEL_28;
    case 0xBu:
      v23 = 4;
      goto LABEL_28;
    case 0xDu:
      v23 = 6;
      goto LABEL_28;
    case 0x12u:
    case 0x15u:
      v24 = 8;
      goto LABEL_20;
    case 0x13u:
      v23 = 9;
      goto LABEL_28;
    case 0x16u:
      v23 = 10;
      goto LABEL_28;
    default:
      v24 = 0;
LABEL_20:
      if (v22 <= 0x11 && ((1 << v22) & 0x351F0) != 0)
      {
        v25 = 0;
      }
      else
      {
        v23 = v24;
LABEL_28:
        v25 = 1;
        v24 = v23;
      }
      IMSRegistrationManager::setRegistrationTerminated((uint64_t)a1, a2, v24, Retry, v25);
      if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)a3 + 48))(a3))
      {
        v26 = a1[16];
        v28 = *(_QWORD *)(v26 + 288);
        v27 = *(_QWORD *)(v26 + 296);
        __p.__r_.__value_.__r.__words[0] = v28;
        __p.__r_.__value_.__l.__size_ = v27;
        if (v27)
        {
          v29 = (unint64_t *)(v27 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v26 = a1[16];
        }
        (*(void (**)(uint64_t *__return_ptr, _QWORD, void **))(**(_QWORD **)(v26 + 168) + 192))(&v38, *(_QWORD *)(v26 + 168), a2);
        IMSMetricsManager::logRegistrationTerminated(v28, &v38, (uint64_t)a3);
        v31 = v39;
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v35 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
      }
      result = a1[15];
      if (result)
        return (*(uint64_t (**)(uint64_t, void **, unsigned int *, _QWORD))(*(_QWORD *)result + 24))(result, a2, a3, 0);
      return result;
  }
}

void sub_1BEE2F388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'IMSRegistrationManager::handleRegistrationTerminated(uint64_t a1, void **a2, unsigned int *a3, int a4)
{
  return IMSRegistrationManager::handleRegistrationTerminated((_QWORD *)(a1 - 8), a2, a3, a4);
}

uint64_t IMSRegistrationManager::handleRegistrationError(_QWORD *a1, void **a2, SipRegistrationNotification *this, int a4)
{
  time_t Retry;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  ImsPrefs *v12;
  void **IgnoreReregistrationErrorCodesKey;
  ImsPrefs *v14;
  void **ReportSipErrorsDuringReRegistrationKey;
  void *v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  BOOL v20;
  BOOL v21;
  uint64_t (*v22)(_QWORD *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  std::__shared_weak_count *v42;
  void (**v43)(ImsResult *__hidden);
  uint64_t *v44;
  _QWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  std::string __p;
  void *v50[2];
  char v51;
  SipStack *v52;
  std::__shared_weak_count *v53;

  Retry = SipRegistrationNotification::secondsUntilNextRetry(this);
  v9 = a1 + 2;
  v10 = (*(uint64_t (**)(_QWORD *))(a1[2] + 64))(a1 + 2);
  (*(void (**)(_QWORD *, uint64_t))(a1[2] + 16))(a1 + 2, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Registration error = ", 21);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 8) + 16))((char *)this + 64, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)".  Next retry in ", 17);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" seconds", 8);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (*((uint64_t **)this + 9) == &SipResultDomain::_domain)
    v11 = *((_DWORD *)this + 20);
  else
    v11 = 0;
  if (IMSRegistrationManager::getRegistrationState((uint64_t)a1, a2))
  {
    v45 = 0;
    *(_QWORD *)&v46 = 0;
    v43 = &off_1E78EB020;
    v44 = (uint64_t *)&v45;
    v52 = 0;
    v53 = 0;
    (*(void (**)(SipStack **__return_ptr, _QWORD, void **))(**(_QWORD **)(a1[16] + 168) + 192))(&v52, *(_QWORD *)(a1[16] + 168), a2);
    if (!v52)
    {
      v18 = (*(uint64_t (**)(_QWORD *))(*v9 + 64))(a1 + 2);
      (*(void (**)(_QWORD *, uint64_t))(*v9 + 16))(a1 + 2, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"sipStack is null: will not report.", 34);
      *(_BYTE *)(v18 + 17) = 0;
      v19 = (_BYTE *)(v18 + 17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_26:
      *v19 = 0;
      goto LABEL_29;
    }
    std::string::basic_string[abi:ne180100]<0>(v50, "all");
    v12 = (ImsPrefs *)SipStack::prefs(v52);
    IgnoreReregistrationErrorCodesKey = (void **)ImsPrefs::getIgnoreReregistrationErrorCodesKey(v12);
    ImsPrefs::stringValue(v12, IgnoreReregistrationErrorCodesKey);
    SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)&v43, (uint64_t)v50, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v51 < 0)
      operator delete(v50[0]);
    v14 = (ImsPrefs *)SipStack::prefs(v52);
    ReportSipErrorsDuringReRegistrationKey = (void **)ImsPrefs::getReportSipErrorsDuringReRegistrationKey(v14);
    v16 = ImsPrefs::prefWithKey(v14, ReportSipErrorsDuringReRegistrationKey);
    if (v16)
    {
      if (!(*(unsigned int (**)(void *))(*(_QWORD *)v16 + 40))(v16))
        goto LABEL_23;
    }
    else if (!*((_BYTE *)ReportSipErrorsDuringReRegistrationKey + 57))
    {
      goto LABEL_23;
    }
    if (v11)
    {
      std::string::basic_string[abi:ne180100]<0>(v50, "all");
      v20 = SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)&v43, v50, v11, 0);
      v21 = v20;
      if (v51 < 0)
      {
        operator delete(v50[0]);
        if (v21)
          goto LABEL_23;
      }
      else if (v20)
      {
        goto LABEL_23;
      }
      v25 = (*(uint64_t (**)(_QWORD *))(*v9 + 64))(a1 + 2);
      (*(void (**)(_QWORD *, uint64_t))(*v9 + 16))(a1 + 2, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Response ", 9);
      *(_BYTE *)(v25 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v25 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" should be reported as RegistrationTerminated", 45);
      *(_BYTE *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v25 + 17) = 0;
      IMSRegistrationManager::setRegistrationTerminated((uint64_t)a1, a2, 0, Retry, 1);
LABEL_29:
      v26 = v53;
      if (v53)
      {
        p_shared_owners = (unint64_t *)&v53->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v43 = &off_1E78EB020;
      std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)&v44, v45);
      goto LABEL_35;
    }
LABEL_23:
    v22 = *(uint64_t (**)(_QWORD *))(*v9 + 64);
    if (a4)
    {
      v23 = v22(a1 + 2);
      (*(void (**)(_QWORD *, uint64_t))(*v9 + 16))(a1 + 2, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"causedByUAC. Will report.", 25);
      *(_BYTE *)(v23 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v23 + 17) = 0;
      IMSRegistrationManager::setRegistrationError((uint64_t)a1, a2, Retry, v11);
      goto LABEL_29;
    }
    v24 = v22(a1 + 2);
    (*(void (**)(_QWORD *, uint64_t))(*v9 + 16))(a1 + 2, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Will not report.", 16);
    *(_BYTE *)(v24 + 17) = 0;
    v19 = (_BYTE *)(v24 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_26;
  }
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v43 = &off_1E78B7238;
  v44 = &_bambiDomain;
  LODWORD(v45) = 1073741848;
  if (*((uint64_t **)this + 9) == &_bambiDomain)
  {
    v17 = *((_DWORD *)this + 20);
    ImsResult::~ImsResult((ImsResult *)&v43);
    if (v17 == 1073741848)
    {
      IMSRegistrationManager::setRegistrationTerminated((uint64_t)a1, a2, 7, -1, 0);
      goto LABEL_35;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v43);
  }
  IMSRegistrationManager::setRegistrationError((uint64_t)a1, a2, Retry, v11);
LABEL_35:
  v29 = a1[16];
  v31 = *(_QWORD *)(v29 + 288);
  v30 = *(_QWORD *)(v29 + 296);
  v43 = (void (**)(ImsResult *__hidden))v31;
  v44 = (uint64_t *)v30;
  if (v30)
  {
    v32 = (unint64_t *)(v30 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    v29 = a1[16];
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, void **))(**(_QWORD **)(v29 + 168) + 192))(&v41, *(_QWORD *)(v29 + 168), a2);
  IMSMetricsManager::logRegistrationError(v31, &v41, (uint64_t)this);
  v34 = v42;
  if (v42)
  {
    v35 = (unint64_t *)&v42->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)v44;
  if (v44)
  {
    v38 = (unint64_t *)(v44 + 1);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  result = a1[15];
  if (result)
    return (*(uint64_t (**)(uint64_t, void **, SipRegistrationNotification *, _QWORD))(*(_QWORD *)result + 40))(result, a2, this, 0);
  return result;
}

void sub_1BEE2F9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  uint64_t v32;

  if (a31 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v32 - 104);
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v31, a13);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'IMSRegistrationManager::handleRegistrationError(uint64_t a1, void **a2, SipRegistrationNotification *a3, int a4)
{
  return IMSRegistrationManager::handleRegistrationError((_QWORD *)(a1 - 8), a2, a3, a4);
}

uint64_t IMSRegistrationManager::handleRegistrationModeChange(uint64_t a1, void **a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;

  v6 = a1 + 16;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Registration mode changed to ", 29);
  *(_BYTE *)(v7 + 17) = 0;
  v8 = operator<<(v7, a3);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  v9 = *a3;
  if (*a3 == SipRegistrationMode::kModeDisabled)
  {
    IMSRegistrationManager::setRegistrationTerminated(a1, a2, 4, -1, 1);
    v9 = *a3;
  }
  if (v9 == SipRegistrationMode::kModeDisabledCountry)
  {
    IMSRegistrationManager::setRegistrationTerminated(a1, a2, 6, -1, 1);
    v9 = *a3;
  }
  if (v9 == SipRegistrationMode::kModeLimitedAccess)
  {
    IMSRegistrationManager::setRegistrationTerminated(a1, a2, 3, -1, 1);
    v9 = *a3;
  }
  if (v9 == SipRegistrationMode::kModeNormal)
  {
    v10 = IMSClientManager::delegateForStack(a2);
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 8) + 104))(v10 + 8);
  }
  result = *(_QWORD *)(a1 + 120);
  if (result)
    return (*(uint64_t (**)(uint64_t, void **, unsigned int *))(*(_QWORD *)result + 32))(result, a2, a3);
  return result;
}

uint64_t `non-virtual thunk to'IMSRegistrationManager::handleRegistrationModeChange(uint64_t a1, void **a2, unsigned int *a3)
{
  return IMSRegistrationManager::handleRegistrationModeChange(a1 - 8, a2, a3);
}

uint64_t IMSRegistrationManager::handleRegistrationIdentities(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v4;

  v4 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 8) + 120))(v4 + 8, a3);
}

uint64_t `non-virtual thunk to'IMSRegistrationManager::handleRegistrationIdentities(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v4;

  v4 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 8) + 120))(v4 + 8, a3);
}

uint64_t IMSRegistrationManager::handleNewInitialRegistration(uint64_t a1, void **a2)
{
  uint64_t v2;

  v2 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 128))(v2 + 8);
}

uint64_t `non-virtual thunk to'IMSRegistrationManager::handleNewInitialRegistration(uint64_t a1, void **a2)
{
  uint64_t v2;

  v2 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 128))(v2 + 8);
}

_QWORD *IMSRegistrationManager::logPrefix(IMSRegistrationManager *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"RegistrationManager: ", 21);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

_QWORD *`non-virtual thunk to'IMSRegistrationManager::logPrefix(IMSRegistrationManager *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"RegistrationManager: ", 21);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

SipUri *std::vector<SipUri>::__assign_with_size[abi:ne180100]<SipUri*,SipUri*>(SipUri **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  SipUri *v9;
  unint64_t v10;
  unint64_t v11;
  SipUri *result;
  uint64_t v13;
  SipUri *v14;
  SipUri *v15;
  SipUri *v16;
  SipUri *v17;
  BOOL v18;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0xFAFAFAFAFAFAFAFBLL * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<SipUri>::__vdeallocate(a1);
    if (a4 > 0xA0A0A0A0A0A0A0)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v10 = 0xF5F5F5F5F5F5F5F6 * ((a1[2] - *a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xFAFAFAFAFAFAFAFBLL * ((a1[2] - *a1) >> 3) >= 0x50505050505050)
      v11 = 0xA0A0A0A0A0A0A0;
    else
      v11 = v10;
    std::vector<SipUri>::__vallocate[abi:ne180100](a1, v11);
    result = (SipUri *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipUri>,SipUri*,SipUri*,SipUri*>(v8, a2, a3, (uint64_t)a1[1]);
    goto LABEL_11;
  }
  if (0xFAFAFAFAFAFAFAFBLL * ((a1[1] - v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((a1[1] - v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,SipUri *,SipUri *,SipUri *,0>(a2, v13, v9);
    result = (SipUri *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipUri>,SipUri*,SipUri*,SipUri*>(v8, v13, a3, (uint64_t)a1[1]);
LABEL_11:
    a1[1] = result;
    return result;
  }
  result = (SipUri *)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,SipUri *,SipUri *,SipUri *,0>(a2, a3, v9);
  v15 = v14;
  v16 = a1[1];
  if (v16 != v14)
  {
    v17 = (SipUri *)((char *)v16 - 408);
    do
    {
      result = (SipUri *)(**(uint64_t (***)(SipUri *))v17)(v17);
      v18 = v17 == v15;
      v17 = (SipUri *)((char *)v17 - 408);
    }
    while (!v18);
  }
  a1[1] = v15;
  return result;
}

void sub_1BEE2FE84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BEE2FE8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<SipUri>::__vdeallocate(_QWORD *a1)
{
  void (***v1)(_QWORD);
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  BOOL v6;

  v1 = (void (***)(_QWORD))*a1;
  if (*a1)
  {
    v3 = (void (***)(_QWORD))a1[1];
    v4 = (void (***)(_QWORD))*a1;
    if (v3 != v1)
    {
      v5 = v3 - 51;
      do
      {
        (**v5)(v5);
        v6 = v5 == v1;
        v5 -= 51;
      }
      while (!v6);
      v4 = (void (***)(_QWORD))*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<SipUri>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xA0A0A0A0A0A0A1)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipUri>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[408 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipUri>,SipUri*,SipUri*,SipUri*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      SipUri::SipUri((SipUri *)(a4 + v7), (const SipUri *)(a2 + v7));
      v7 += 408;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1BEE2FFB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 408;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 408;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,SipUri *,SipUri *,SipUri *,0>(uint64_t a1, uint64_t a2, SipUri *this)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      SipUri::operator=(this, v4);
      v4 += 408;
      this = (SipUri *)((char *)this + 408);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipUri>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xA0A0A0A0A0A0A1)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(408 * a2);
}

char *std::vector<SipRetryInfo>::__assign_with_size[abi:ne180100]<SipRetryInfo*,SipRetryInfo*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::shared_ptr<BambiConferenceParticipant>>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v17 - 4;
      v19 = v9;
      v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9 - 4);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 - 4;
    v19 = v9;
    v20 = v16;
LABEL_18:
    result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t **std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t **result, unsigned int *a2, unsigned int *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          std::__tree<unsigned int>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (unsigned int *)*((_QWORD *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = *(unsigned int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (unsigned int *)*((_QWORD *)v9 + 2);
              v11 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<unsigned int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<unsigned int>::__emplace_multi<unsigned int const&>(v5, a2 + 7);
      v12 = (unsigned int *)*((_QWORD *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(unsigned int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (unsigned int *)*((_QWORD *)a2 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1BEE302E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<unsigned int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<unsigned int>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t std::__tree<unsigned int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<unsigned int>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<unsigned int>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<unsigned int>::__emplace_multi<unsigned int const&>(uint64_t **a1, unsigned int *a2)
{
  uint64_t *v4;
  unsigned int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x20uLL);
  v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t **std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::set<unsigned int> &>::operator=[abi:ne180100]<std::string const,std::set<unsigned int>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          v18[0] = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<unsigned int>::__insert_node_at(v5, v18[0], leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__emplace_multi<std::pair<std::string const,std::set<unsigned int>> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1BEE305C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::set<unsigned int> &>::operator=[abi:ne180100]<std::string const,std::set<unsigned int>,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(uint64_t ***)(a1 + 8);
  if (v4 != (uint64_t **)(a2 + 24))
    std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(v4, *(unsigned int **)(a2 + 24), (unsigned int *)(a2 + 32));
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned int>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned int>>,0>(uint64_t a1)
{
  std::__tree<unsigned int>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__emplace_multi<std::pair<std::string const,std::set<unsigned int>> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  memset(v7, 0, sizeof(v7));
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__construct_node<std::pair<std::string const,std::set<unsigned int>> const&>((uint64_t)a1, a2, v7);
  v6 = 0;
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v6, v7[0] + 4);
  std::__tree<unsigned int>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1BEE3076C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__construct_node<std::pair<std::string const,std::set<unsigned int>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = std::pair<std::string const,std::set<unsigned int>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1BEE307DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::set<unsigned int>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1BEE3084C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<unsigned int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1BEE308A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<unsigned int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(v5, v6, v4 + 7, v4 + 7);
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v10 = 0;
  v11 = 0;
  v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned int>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void SipRegistrationConfig::SipRegistrationConfig(SipRegistrationConfig *this, const SipRegistrationConfig *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int16 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<SipUri>::__init_with_size[abi:ne180100]<SipUri*,SipUri*>(this, *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  v4 = *(_OWORD *)((char *)a2 + 24);
  v5 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 53) = *(_OWORD *)((char *)a2 + 53);
  *(_OWORD *)((char *)this + 40) = v5;
  *(_OWORD *)((char *)this + 24) = v4;
  SipUri::SipUri((SipRegistrationConfig *)((char *)this + 72), (const SipRegistrationConfig *)((char *)a2 + 72));
  SipUri::SipUri((SipRegistrationConfig *)((char *)this + 480), (const SipRegistrationConfig *)((char *)a2 + 480));
  if (*((char *)a2 + 911) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 37, *((const std::string::value_type **)a2 + 111), *((_QWORD *)a2 + 112));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 888);
    *((_QWORD *)this + 113) = *((_QWORD *)a2 + 113);
    *(_OWORD *)((char *)this + 888) = v6;
  }
  if (*((char *)a2 + 935) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 38, *((const std::string::value_type **)a2 + 114), *((_QWORD *)a2 + 115));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 57);
    *((_QWORD *)this + 116) = *((_QWORD *)a2 + 116);
    *((_OWORD *)this + 57) = v7;
  }
  if (*((char *)a2 + 959) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 39, *((const std::string::value_type **)a2 + 117), *((_QWORD *)a2 + 118));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 936);
    *((_QWORD *)this + 119) = *((_QWORD *)a2 + 119);
    *(_OWORD *)((char *)this + 936) = v8;
  }
  *((_QWORD *)this + 122) = 0;
  *((_OWORD *)this + 60) = 0u;
  std::vector<SipRetryInfo>::__init_with_size[abi:ne180100]<SipRetryInfo*,SipRetryInfo*>((_QWORD *)this + 120, *((const void **)a2 + 120), *((_QWORD *)a2 + 121), (uint64_t)(*((_QWORD *)a2 + 121) - *((_QWORD *)a2 + 120)) >> 4);
  v9 = *(_OWORD *)((char *)a2 + 984);
  *((_QWORD *)this + 125) = *((_QWORD *)a2 + 125);
  *(_OWORD *)((char *)this + 984) = v9;
  ims::AccessNetworks::AccessNetworks((std::string *)this + 42, (__int128 *)a2 + 63);
  v10 = *((_WORD *)a2 + 612);
  *((_BYTE *)this + 1226) = *((_BYTE *)a2 + 1226);
  *((_WORD *)this + 612) = v10;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)this + 154, (uint64_t)a2 + 1232);
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)this + 157, (uint64_t)a2 + 1256);
  if (*((char *)a2 + 1303) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 1280), *((const std::string::value_type **)a2 + 160), *((_QWORD *)a2 + 161));
  }
  else
  {
    v11 = *((_OWORD *)a2 + 80);
    *((_QWORD *)this + 162) = *((_QWORD *)a2 + 162);
    *((_OWORD *)this + 80) = v11;
  }
  *((_QWORD *)this + 163) = *((_QWORD *)a2 + 163);
  if (*((char *)a2 + 1335) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 1312), *((const std::string::value_type **)a2 + 164), *((_QWORD *)a2 + 165));
  }
  else
  {
    v12 = *((_OWORD *)a2 + 82);
    *((_QWORD *)this + 166) = *((_QWORD *)a2 + 166);
    *((_OWORD *)this + 82) = v12;
  }
  v13 = *(_OWORD *)((char *)a2 + 1336);
  v14 = *(_OWORD *)((char *)a2 + 1352);
  *(_OWORD *)((char *)this + 1363) = *(_OWORD *)((char *)a2 + 1363);
  *(_OWORD *)((char *)this + 1336) = v13;
  *(_OWORD *)((char *)this + 1352) = v14;
  *((_QWORD *)this + 173) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 174, (uint64_t)a2 + 1392);
  *((_QWORD *)this + 177) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 178, (uint64_t)a2 + 1424);
  *((_QWORD *)this + 181) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 182, (uint64_t)a2 + 1456);
  *((_QWORD *)this + 185) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 186, (uint64_t)a2 + 1488);
  *((_QWORD *)this + 189) = &off_1E78DD338;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)this + 190, (uint64_t)a2 + 1520);
  *((_BYTE *)this + 1544) = *((_BYTE *)a2 + 1544);
  if (*((char *)a2 + 1575) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 1552), *((const std::string::value_type **)a2 + 194), *((_QWORD *)a2 + 195));
  }
  else
  {
    v15 = *((_OWORD *)a2 + 97);
    *((_QWORD *)this + 196) = *((_QWORD *)a2 + 196);
    *((_OWORD *)this + 97) = v15;
  }
  if (*((char *)a2 + 1599) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 1576), *((const std::string::value_type **)a2 + 197), *((_QWORD *)a2 + 198));
  }
  else
  {
    v16 = *(_OWORD *)((char *)a2 + 1576);
    *((_QWORD *)this + 199) = *((_QWORD *)a2 + 199);
    *(_OWORD *)((char *)this + 1576) = v16;
  }
  v17 = (std::string *)((char *)this + 1600);
  if (*((char *)a2 + 1623) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *((const std::string::value_type **)a2 + 200), *((_QWORD *)a2 + 201));
  }
  else
  {
    v18 = *((_OWORD *)a2 + 100);
    *((_QWORD *)this + 202) = *((_QWORD *)a2 + 202);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
  }
  *((_BYTE *)this + 1624) = *((_BYTE *)a2 + 1624);
  *((_QWORD *)this + 204) = 0;
  *((_QWORD *)this + 206) = 0;
  *((_QWORD *)this + 205) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 68, *((__int128 **)a2 + 204), *((__int128 **)a2 + 205), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 205) - *((_QWORD *)a2 + 204)) >> 3));
  v19 = *((_QWORD *)a2 + 207);
  *((_WORD *)this + 832) = *((_WORD *)a2 + 832);
  *((_QWORD *)this + 207) = v19;
}

void sub_1BEE30F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, void **a15, void **a16, void **a17, SipUri *a18, SipUri *a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void *v30;

  if (*(char *)(v20 + 1599) < 0)
    operator delete(*v22);
  if (*(char *)(v20 + 1575) < 0)
    operator delete(*v28);
  *(_QWORD *)(v20 + 1512) = &off_1E78DD338;
  std::__tree<unsigned int>::destroy(v24, *(_QWORD **)(v20 + 1528));
  *(_QWORD *)(v20 + 1480) = v21;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v27, *(_QWORD **)(v20 + 1496));
  *(_QWORD *)(v20 + 1448) = v21;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v23, *(_QWORD **)(v20 + 1464));
  *(_QWORD *)(v20 + 1416) = v21;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v26, *(_QWORD **)(v20 + 1432));
  *(_QWORD *)(v20 + 1384) = v21;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a10, *(_QWORD **)(v20 + 1400));
  if (*(char *)(v20 + 1335) < 0)
    operator delete(*v25);
  if (*(char *)(v20 + 1303) < 0)
    operator delete(*a9);
  std::__tree<unsigned int>::destroy(a11, *(_QWORD **)(v20 + 1264));
  std::__tree<unsigned int>::destroy(a12, *(_QWORD **)(v20 + 1240));
  ims::AccessNetworks::~AccessNetworks(a16);
  v30 = *a17;
  if (*a17)
  {
    *(_QWORD *)(v20 + 968) = v30;
    operator delete(v30);
  }
  if (*(char *)(v20 + 959) < 0)
    operator delete(*a13);
  if (*(char *)(v20 + 935) < 0)
    operator delete(*a14);
  if (*(char *)(v20 + 911) < 0)
    operator delete(*a15);
  SipUri::~SipUri(a18);
  SipUri::~SipUri(a19);
  a20 = v20;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

void sub_1BEE3111C()
{
  JUMPOUT(0x1BEE31044);
}

void sub_1BEE31124()
{
  JUMPOUT(0x1BEE31054);
}

void sub_1BEE3112C()
{
  JUMPOUT(0x1BEE31064);
}

void sub_1BEE31134()
{
  JUMPOUT(0x1BEE31094);
}

void sub_1BEE3113C()
{
  JUMPOUT(0x1BEE310A0);
}

void sub_1BEE31144()
{
  JUMPOUT(0x1BEE310A8);
}

void sub_1BEE3114C()
{
  JUMPOUT(0x1BEE310BCLL);
}

void sub_1BEE31154()
{
  JUMPOUT(0x1BEE31100);
}

void sub_1BEE3115C()
{
  JUMPOUT(0x1BEE31108);
}

_QWORD *std::vector<SipUri>::__init_with_size[abi:ne180100]<SipUri*,SipUri*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<SipUri>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipUri>,SipUri*,SipUri*,SipUri*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BEE311C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<SipRetryInfo>::__init_with_size[abi:ne180100]<SipRetryInfo*,SipRetryInfo*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<BambiConferenceParticipant>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 4);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BEE31244(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::set<unsigned int>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::set<unsigned int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1BEE3129C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::set<unsigned int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<unsigned int>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<unsigned int>> const&>(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  void **v12;

  v11 = 0;
  v12 = 0;
  v6 = std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__construct_node<std::pair<std::string const,std::set<unsigned int>> const&>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void **std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(_QWORD *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  void **v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  _QWORD *v16;
  BOOL v17;
  void **v19;

  v9 = (void **)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      v12 = (_QWORD *)a2;
    }
    else
    {
      v11 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        v16 = (_QWORD *)a2;
        do
        {
          v12 = (_QWORD *)v16[2];
          v17 = *v12 == (_QWORD)v16;
          v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0)
        return (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
    }
    if (*(_QWORD *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a2 + 32), a5) & 0x80) != 0)
  {
    a4 = (uint64_t *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v13)
    {
      v14 = *(void ***)(a2 + 8);
      do
      {
        v15 = v14;
        v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      v19 = (void **)a2;
      do
      {
        v15 = (void **)v19[2];
        v17 = *v15 == v19;
        v19 = v15;
      }
      while (!v17);
    }
    if (v15 == v9)
      goto LABEL_27;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
    {
      v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }
      else
      {
        *a3 = (void **)a2;
      }
      return (void **)a4;
    }
    return (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  *a3 = (void **)a2;
  *a4 = a2;
  return (void **)a4;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1BEE31668(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1BEE317E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BEE317E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipRegistrationConfig>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipRegistrationConfig>,0>(uint64_t a1)
{
  SipRegistrationConfig::~SipRegistrationConfig((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void SipRegistrationConfig::~SipRegistrationConfig(void **this)
{
  void *v2;
  void **v3;

  v3 = this + 204;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 1623) < 0)
    operator delete(this[200]);
  if (*((char *)this + 1599) < 0)
    operator delete(this[197]);
  if (*((char *)this + 1575) < 0)
    operator delete(this[194]);
  this[189] = &off_1E78DD338;
  std::__tree<unsigned int>::destroy((uint64_t)(this + 190), this[191]);
  this[185] = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(this + 186), this[187]);
  this[181] = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(this + 182), this[183]);
  this[177] = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(this + 178), this[179]);
  this[173] = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(this + 174), this[175]);
  if (*((char *)this + 1335) < 0)
    operator delete(this[164]);
  if (*((char *)this + 1303) < 0)
    operator delete(this[160]);
  std::__tree<unsigned int>::destroy((uint64_t)(this + 157), this[158]);
  std::__tree<unsigned int>::destroy((uint64_t)(this + 154), this[155]);
  if (*((char *)this + 1199) < 0)
    operator delete(this[147]);
  if (*((char *)this + 1175) < 0)
    operator delete(this[144]);
  if (*((char *)this + 1127) < 0)
    operator delete(this[138]);
  if (*((char *)this + 1103) < 0)
    operator delete(this[135]);
  if (*((char *)this + 1055) < 0)
    operator delete(this[129]);
  if (*((char *)this + 1031) < 0)
    operator delete(this[126]);
  v2 = this[120];
  if (v2)
  {
    this[121] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 959) < 0)
    operator delete(this[117]);
  if (*((char *)this + 935) < 0)
    operator delete(this[114]);
  if (*((char *)this + 911) < 0)
    operator delete(this[111]);
  SipUri::~SipUri((SipUri *)(this + 60));
  SipUri::~SipUri((SipUri *)(this + 9));
  v3 = this;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipRegistrationConfig>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipRegistrationConfig>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x6C0uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = std::pair<std::string const,SipRegistrationConfig>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1BEE31BD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipRegistrationConfig>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipRegistrationConfig>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,SipRegistrationConfig>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  bzero(&this[1], 0x688uLL);
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)&this[1]);
  return this;
}

void sub_1BEE31C54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void SipRegistrationConfig::SipRegistrationConfig(SipRegistrationConfig *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 16777473;
  *(_OWORD *)((char *)this + 36) = xmmword_1BF29A450;
  *(_OWORD *)((char *)this + 52) = xmmword_1BF29A460;
  *((_BYTE *)this + 68) = 1;
  *((_QWORD *)this + 9) = &off_1E78BFCE8;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 10) = &off_1E78D08F8;
  *((_QWORD *)this + 11) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_WORD *)this + 56) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 17) = &off_1E78B82D8;
  *((_QWORD *)this + 18) = (char *)this + 152;
  *((_BYTE *)this + 169) = 1;
  *((_QWORD *)this + 48) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 50) = &off_1E78B82D8;
  *((_QWORD *)this + 51) = (char *)this + 416;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((_QWORD *)this + 55) = &off_1E78B82D8;
  *((_QWORD *)this + 56) = (char *)this + 456;
  *((_BYTE *)this + 168) = 1;
  *((_WORD *)this + 216) = 257;
  *((_WORD *)this + 236) = 257;
  *((_BYTE *)this + 392) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_WORD *)this + 260) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 68) = &off_1E78B82D8;
  *((_OWORD *)this + 35) = 0u;
  *((_QWORD *)this + 69) = (char *)this + 560;
  *((_BYTE *)this + 577) = 1;
  *((_QWORD *)this + 60) = &off_1E78BFCE8;
  *((_QWORD *)this + 61) = &off_1E78D08F8;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *((_QWORD *)this + 99) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_QWORD *)this + 101) = &off_1E78B82D8;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_QWORD *)this + 102) = (char *)this + 824;
  *((_BYTE *)this + 841) = 1;
  *((_QWORD *)this + 106) = &off_1E78B82D8;
  *((_OWORD *)this + 54) = 0u;
  *((_QWORD *)this + 107) = (char *)this + 864;
  *((_BYTE *)this + 576) = 1;
  *((_BYTE *)this + 840) = 1;
  *((_WORD *)this + 440) = 257;
  *((_BYTE *)this + 800) = 0;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *((_QWORD *)this + 123) = 60;
  *((_QWORD *)this + 124) = 30;
  *((_QWORD *)this + 125) = 0x200000001;
  *((_QWORD *)this + 133) = 0;
  *((_BYTE *)this + 1072) = 0;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_BYTE *)this + 1056) = 0;
  *((_QWORD *)this + 142) = 0;
  *((_BYTE *)this + 1144) = 0;
  *((_BYTE *)this + 1128) = 0;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *((_QWORD *)this + 151) = 0;
  *((_BYTE *)this + 1216) = 0;
  *((_BYTE *)this + 1200) = 0;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_WORD *)this + 612) = 1;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *((_BYTE *)this + 1226) = 0;
  *((_QWORD *)this + 154) = (char *)this + 1240;
  *((_OWORD *)this + 79) = 0u;
  *((_QWORD *)this + 157) = (char *)this + 1264;
  *((_QWORD *)this + 162) = 0;
  *((_OWORD *)this + 80) = 0u;
  *((_QWORD *)this + 163) = 0x300000003;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 164, "sos");
  *((_QWORD *)this + 167) = 0x100000002;
  *((_DWORD *)this + 336) = 16842752;
  *((_BYTE *)this + 1348) = 0;
  *(_OWORD *)((char *)this + 1352) = xmmword_1BF29A470;
  *((_QWORD *)this + 171) = 900;
  *((_WORD *)this + 688) = 256;
  *((_BYTE *)this + 1378) = 1;
  *(_OWORD *)((char *)this + 1400) = 0u;
  *((_QWORD *)this + 173) = &off_1E78EB020;
  *((_QWORD *)this + 174) = (char *)this + 1400;
  *((_QWORD *)this + 177) = &off_1E78EB020;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *((_QWORD *)this + 178) = (char *)this + 1432;
  *((_QWORD *)this + 181) = &off_1E78EB020;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *((_QWORD *)this + 182) = (char *)this + 1464;
  *((_QWORD *)this + 185) = &off_1E78EB020;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *((_QWORD *)this + 186) = (char *)this + 1496;
  *((_QWORD *)this + 189) = &off_1E78DD338;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *((_QWORD *)this + 190) = (char *)this + 1528;
  *((_BYTE *)this + 1544) = 0;
  *((_OWORD *)this + 97) = 0u;
  *((_OWORD *)this + 98) = 0u;
  *((_OWORD *)this + 99) = 0u;
  *((_OWORD *)this + 100) = 0u;
  *((_QWORD *)this + 202) = 0;
  *((_QWORD *)this + 206) = 0;
  *((_OWORD *)this + 102) = 0u;
  *((_WORD *)this + 828) = 256;
  *((_DWORD *)this + 415) = 0;
  *((_WORD *)this + 832) = 1;
}

void sub_1BEE31FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  SipUri *v11;
  SipUri *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  void *v19;

  if (*(char *)(v10 + 1303) < 0)
    operator delete(*v17);
  std::__tree<unsigned int>::destroy(v15, *(_QWORD **)(v10 + 1264));
  std::__tree<unsigned int>::destroy(v14, *(_QWORD **)(v10 + 1240));
  ims::AccessNetworks::~AccessNetworks(v13);
  v19 = *(void **)(v10 + 960);
  if (v19)
  {
    *(_QWORD *)(v10 + 968) = v19;
    operator delete(v19);
  }
  if (*(char *)(v10 + 959) < 0)
    operator delete(*(void **)(v10 + 936));
  if (*(char *)(v10 + 935) < 0)
    operator delete(*(void **)(v10 + 912));
  if (*(char *)(v10 + 911) < 0)
    operator delete(*v16);
  SipUri::~SipUri(v12);
  SipUri::~SipUri(v11);
  a10 = (void **)v10;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipRegistrationConfig>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipRegistrationConfig>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipRegistrationConfig>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  v8 = (std::string *)(v7 + 32);
  v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  v7[56] = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BEE321B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

const char *toString(uint64_t a1)
{
  const char *result;

  result = "kCFStreamEventNone";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "kCFStreamEventOpenCompleted";
      break;
    case 2:
      result = "kCFStreamEventHasBytesAvailable";
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 4:
      result = "kCFStreamEventCanAcceptBytes";
      break;
    case 8:
      result = "kCFStreamEventErrorOccurred";
      break;
    default:
      if (a1 == 16)
        result = "kCFStreamEventEndEncountered";
      else
LABEL_5:
        result = "Unknown event";
      break;
  }
  return result;
}

void HttpStreamPair::~HttpStreamPair(HttpStreamPair *this)
{
  HttpStreamPair::_cleanupReadStream((CFReadStreamRef *)this);
  HttpStreamPair::_cleanupWriteStream((CFWriteStreamRef *)this);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void HttpStreamPair::_cleanupReadStream(CFReadStreamRef *this)
{
  uint64_t v2;
  __CFReadStream *v3;
  __CFRunLoop *Main;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (this[4])
  {
    std::string::basic_string[abi:ne180100]<0>(v7, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v2 = ImsLogger::debug(ims::_logger, (uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Cleaning up read stream: ", 25);
    *(_BYTE *)(v2 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    if (v6 < 0)
      operator delete(__p[0]);
    if (v8 < 0)
      operator delete(v7[0]);
    CFReadStreamSetClient(this[4], 0, 0, 0);
    v3 = this[4];
    Main = CFRunLoopGetMain();
    CFReadStreamUnscheduleFromRunLoop(v3, Main, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
    CFReadStreamClose(this[4]);
    CFRelease(this[4]);
    this[4] = 0;
  }
}

void sub_1BEE323C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HttpStreamPair::_cleanupWriteStream(CFWriteStreamRef *this)
{
  uint64_t v2;
  __CFWriteStream *v3;
  __CFRunLoop *Main;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (this[5])
  {
    std::string::basic_string[abi:ne180100]<0>(v7, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v2 = ImsLogger::debug(ims::_logger, (uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Cleaning up write stream: ", 26);
    *(_BYTE *)(v2 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    if (v6 < 0)
      operator delete(__p[0]);
    if (v8 < 0)
      operator delete(v7[0]);
    CFWriteStreamSetClient(this[5], 0, 0, 0);
    v3 = this[5];
    Main = CFRunLoopGetMain();
    CFWriteStreamUnscheduleFromRunLoop(v3, Main, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
    CFWriteStreamClose(this[5]);
    CFRelease(this[5]);
    this[5] = 0;
  }
}

void sub_1BEE32538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL HttpStreamPair::initialize(CFReadStreamRef *a1, const char *a2, UInt32 a3)
{
  const __CFAllocator *v5;
  const __CFString *v6;
  _BOOL8 v7;
  _QWORD v9[2];

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v9[0] = &off_1E78EAB58;
  v9[1] = v6;
  CFStreamCreatePairWithSocketToHost(v5, v6, a3, a1 + 4, a1 + 5);
  v7 = HttpStreamPair::_initiateReadStream(a1) && (HttpStreamPair::_initiateWriteStream(a1) & 1) != 0;
  ims::CFType::~CFType((ims::CFType *)v9);
  return v7;
}

void sub_1BEE3261C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ims::CFType::~CFType((ims::CFType *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HttpStreamPair::_initiateReadStream(CFReadStreamRef *this)
{
  __CFReadStream *v2;
  __CFRunLoop *Main;
  const __CFAllocator *v4;
  void **v5;
  const void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v14)(ims::CFString *__hidden);
  CFTypeRef v15;
  void *v16[2];
  char v17;
  void *__p[2];
  char v19;
  void (**v20)(ims::CFString *__hidden);
  CFTypeRef propertyValue;
  CFStreamClientContext clientContext;

  clientContext.version = 0;
  clientContext.info = this;
  memset(&clientContext.retain, 0, 24);
  if (CFReadStreamSetClient(this[4], 0x1BuLL, (CFReadStreamClientCallBack)HttpStreamPair::_handleReadStreamCallback, &clientContext))
  {
    v2 = this[4];
    Main = CFRunLoopGetMain();
    CFReadStreamScheduleWithRunLoop(v2, Main, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  }
  v20 = 0;
  propertyValue = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  (**(void (***)(void **__return_ptr))*this)(__p);
  if (v19 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = CFStringCreateWithCString(v4, (const char *)v5, 0x600u);
  v20 = &off_1E78EAB58;
  propertyValue = v6;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    v6 = propertyValue;
  }
  if (!CFReadStreamSetProperty(this[4], (CFStreamPropertyKey)*MEMORY[0x1E0C93210], v6))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Failed to set stream property on read stream: kCFStreamPropertyDataConnectionServiceType", 88);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_28:
    *(_BYTE *)(v8 + 17) = 0;
    if (v17 < 0)
      operator delete(v16[0]);
    if (v19 < 0)
      operator delete(__p[0]);
LABEL_37:
    v11 = 0;
    goto LABEL_38;
  }
  if (*((char *)this + 31) < 0)
  {
    if (this[2])
    {
      v14 = 0;
      v15 = 0;
      v7 = (const char *)this[1];
      goto LABEL_15;
    }
LABEL_21:
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"No network ID given for carrier ", 32);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 32))(v10, (char *)this + 8);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v17 < 0)
      operator delete(v16[0]);
    if (v19 < 0)
      operator delete(__p[0]);
    goto LABEL_25;
  }
  if (!*((_BYTE *)this + 31))
    goto LABEL_21;
  v14 = 0;
  v15 = 0;
  v7 = (const char *)(this + 1);
LABEL_15:
  v14 = &off_1E78EAB58;
  v15 = CFStringCreateWithCString(v4, v7, 0x600u);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Setting account ID property to carrier ID: ", 43);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v9 + 32))(v9, (char *)this + 8);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v17 < 0)
    operator delete(v16[0]);
  if (v19 < 0)
    operator delete(__p[0]);
  if (!CFReadStreamSetProperty(this[4], (CFStreamPropertyKey)*MEMORY[0x1E0C931C8], v15))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Failed to set stream property on read stream: kCFStreamPropertyAccountIdentifier", 80);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (v17 < 0)
      operator delete(v16[0]);
    if (v19 < 0)
      operator delete(__p[0]);
    ims::CFType::~CFType((ims::CFType *)&v14);
    goto LABEL_37;
  }
  ims::CFType::~CFType((ims::CFType *)&v14);
LABEL_25:
  if (!CFReadStreamOpen(this[4]))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Failed to open read stream", 26);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_28;
  }
  v11 = 1;
LABEL_38:
  ims::CFType::~CFType((ims::CFType *)&v20);
  return v11;
}

void sub_1BEE32B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
    operator delete(__p);
  ims::CFType::~CFType((ims::CFType *)&a10);
  ims::CFType::~CFType((ims::CFType *)&a24);
  _Unwind_Resume(a1);
}

uint64_t HttpStreamPair::_initiateWriteStream(CFWriteStreamRef *this)
{
  __CFWriteStream *v2;
  __CFRunLoop *Main;
  const __CFAllocator *v4;
  void **v5;
  const void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v14)(ims::CFString *__hidden);
  CFTypeRef v15;
  void *v16[2];
  char v17;
  void *__p[2];
  char v19;
  void (**v20)(ims::CFString *__hidden);
  CFTypeRef propertyValue;
  CFStreamClientContext clientContext;

  clientContext.version = 0;
  clientContext.info = this;
  memset(&clientContext.retain, 0, 24);
  if (CFWriteStreamSetClient(this[5], 0x1DuLL, (CFWriteStreamClientCallBack)HttpStreamPair::_handleWriteStreamCallback, &clientContext))
  {
    v2 = this[5];
    Main = CFRunLoopGetMain();
    CFWriteStreamScheduleWithRunLoop(v2, Main, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  }
  v20 = 0;
  propertyValue = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  (**(void (***)(void **__return_ptr))*this)(__p);
  if (v19 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = CFStringCreateWithCString(v4, (const char *)v5, 0x600u);
  v20 = &off_1E78EAB58;
  propertyValue = v6;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    v6 = propertyValue;
  }
  if (!CFWriteStreamSetProperty(this[5], (CFStreamPropertyKey)*MEMORY[0x1E0C93210], v6))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Failed to set stream property on write stream: kCFStreamPropertyDataConnectionServiceType)", 90);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_28:
    *(_BYTE *)(v8 + 17) = 0;
    if (v17 < 0)
      operator delete(v16[0]);
    if (v19 < 0)
      operator delete(__p[0]);
LABEL_37:
    v11 = 0;
    goto LABEL_38;
  }
  if (*((char *)this + 31) < 0)
  {
    if (this[2])
    {
      v14 = 0;
      v15 = 0;
      v7 = (const char *)this[1];
      goto LABEL_15;
    }
LABEL_21:
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"No network ID given for carrier ", 32);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 32))(v10, (char *)this + 8);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v17 < 0)
      operator delete(v16[0]);
    if (v19 < 0)
      operator delete(__p[0]);
    goto LABEL_25;
  }
  if (!*((_BYTE *)this + 31))
    goto LABEL_21;
  v14 = 0;
  v15 = 0;
  v7 = (const char *)(this + 1);
LABEL_15:
  v14 = &off_1E78EAB58;
  v15 = CFStringCreateWithCString(v4, v7, 0x600u);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Setting account ID property to carrier ID: ", 43);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v9 + 32))(v9, (char *)this + 8);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v17 < 0)
    operator delete(v16[0]);
  if (v19 < 0)
    operator delete(__p[0]);
  if (!CFWriteStreamSetProperty(this[5], (CFStreamPropertyKey)*MEMORY[0x1E0C931C8], v15))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Failed to set stream property on write stream: kCFStreamPropertyAccountIdentifier", 81);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (v17 < 0)
      operator delete(v16[0]);
    if (v19 < 0)
      operator delete(__p[0]);
    ims::CFType::~CFType((ims::CFType *)&v14);
    goto LABEL_37;
  }
  ims::CFType::~CFType((ims::CFType *)&v14);
LABEL_25:
  if (!CFWriteStreamOpen(this[5]))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Failed to open write stream", 27);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_28;
  }
  v11 = 1;
LABEL_38:
  ims::CFType::~CFType((ims::CFType *)&v20);
  return v11;
}

void sub_1BEE3314C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
    operator delete(__p);
  ims::CFType::~CFType((ims::CFType *)&a10);
  ims::CFType::~CFType((ims::CFType *)&a24);
  _Unwind_Resume(a1);
}

void HttpStreamPair::_handleReadStreamCallback(HttpStreamPair *this, __CFReadStream *a2, _QWORD *a3, void *a4)
{
  uint64_t v7;
  const char *v8;
  size_t v9;
  CFErrorRef v10;
  uint64_t v11;
  size_t v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleReadStreamCallback: Event - ", 34);
    *(_BYTE *)(v7 + 17) = 0;
    v8 = toString((uint64_t)a2);
    v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)v8, v9);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
    if ((uint64_t)a2 > 7)
    {
      if (a2 == (__CFReadStream *)8)
      {
        v10 = CFReadStreamCopyError(this);
        (*(void (**)(_QWORD, _QWORD, CFErrorRef))(*(_QWORD *)*a3 + 24))(*a3, 0, v10);
        CFRelease(v10);
        return;
      }
      if (a2 == (__CFReadStream *)16)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 32))(*a3, 0);
        return;
      }
    }
    else
    {
      if (a2 == (__CFReadStream *)1)
        return;
      if (a2 == (__CFReadStream *)2)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 8))(*a3);
        return;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v15, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::warn(ims::_logger, (uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Not handling CFStreamEventType - ", 33);
    *(_BYTE *)(v11 + 17) = 0;
    v12 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)v8, v12);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
}

void sub_1BEE33494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HttpStreamPair::_handleWriteStreamCallback(HttpStreamPair *this, __CFWriteStream *a2, _QWORD *a3, void *a4)
{
  uint64_t v7;
  const char *v8;
  size_t v9;
  CFErrorRef v10;
  uint64_t v11;
  size_t v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleWriteStreamCallback: Event - ", 35);
    *(_BYTE *)(v7 + 17) = 0;
    v8 = toString((uint64_t)a2);
    v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)v8, v9);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
    if ((uint64_t)a2 > 7)
    {
      if (a2 == (__CFWriteStream *)8)
      {
        v10 = CFWriteStreamCopyError(this);
        (*(void (**)(_QWORD, uint64_t, CFErrorRef))(*(_QWORD *)*a3 + 24))(*a3, 1, v10);
        CFRelease(v10);
        return;
      }
      if (a2 == (__CFWriteStream *)16)
      {
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 1);
        return;
      }
    }
    else
    {
      if (a2 == (__CFWriteStream *)1)
        return;
      if (a2 == (__CFWriteStream *)4)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
        return;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v15, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::warn(ims::_logger, (uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Not handling CFStreamEventType - ", 33);
    *(_BYTE *)(v11 + 17) = 0;
    v12 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)v8, v12);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
}

void sub_1BEE3374C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HttpStreamPair::readData(HttpStreamPair *this, void *a2, unint64_t *a3)
{
  __CFReadStream *v5;
  CFIndex v7;
  uint64_t v8;
  UInt8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  UInt8 *buffer;
  UInt8 *v20;
  uint64_t v21;

  v5 = (__CFReadStream *)*((_QWORD *)this + 4);
  if (v5)
  {
    if (CFReadStreamHasBytesAvailable(v5))
    {
      buffer = 0;
      v20 = 0;
      v21 = 0;
      std::vector<unsigned char>::vector(&buffer, *a3);
      v7 = CFReadStreamRead(*((CFReadStreamRef *)this + 4), buffer, *a3);
      if ((v7 & 0x8000000000000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v17, (char *)kXcapLoggingFacility);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v8 = ImsLogger::debug(ims::_logger, (uint64_t)v17, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": ", 2);
        *(_BYTE *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"readData: Length - Expected = ", 30);
        *(_BYTE *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)", Actual = ", 11);
        *(_BYTE *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
        if (v16 < 0)
          operator delete(__p[0]);
        if (v18 < 0)
          operator delete(v17[0]);
        v9 = buffer;
        memcpy(a2, buffer, v7);
        if (v7 == *a3)
          v10 = 0;
        else
          v10 = 4294957493;
        *a3 = v7;
        if (!v9)
          return v10;
LABEL_28:
        v20 = v9;
        operator delete(v9);
        return v10;
      }
      CFReadStreamGetError(*((CFReadStreamRef *)this + 4));
      std::string::basic_string[abi:ne180100]<0>(v17, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v13 = ImsLogger::error(ims::_logger, (uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Failure to read data from stream. Errorcode: ", 45);
      *(_BYTE *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      if (v16 < 0)
        operator delete(__p[0]);
      if (v18 < 0)
        operator delete(v17[0]);
      v10 = 4294957496;
      v9 = buffer;
      if (buffer)
        goto LABEL_28;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&buffer, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(v17, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v12 = ImsLogger::debug(ims::_logger, (uint64_t)&buffer, (uint64_t)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v12 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"readData: No bytes available to be read", 39);
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v12 + 17) = 0;
      if (v18 < 0)
        operator delete(v17[0]);
      if (SHIBYTE(v21) < 0)
        operator delete(buffer);
      *a3 = 0;
      return 4294957493;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&buffer, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v17, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::error(ims::_logger, (uint64_t)&buffer, (uint64_t)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Stream not open for reading: ", 29);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v18 < 0)
      operator delete(v17[0]);
    if (SHIBYTE(v21) < 0)
      operator delete(buffer);
    *a3 = 0;
    return 4294957496;
  }
  return v10;
}

void sub_1BEE33B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t HttpStreamPair::writeData(HttpStreamPair *this, const UInt8 *a2, CFIndex *a3)
{
  __CFWriteStream *v5;
  CFIndex v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  v5 = (__CFWriteStream *)*((_QWORD *)this + 5);
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::error(ims::_logger, (uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Stream not open for writing: ", 29);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
    *a3 = 0;
    return 4294957496;
  }
  v6 = CFWriteStreamWrite(v5, a2, *a3);
  if (v6 < 0)
  {
    CFWriteStreamGetError(*((CFWriteStreamRef *)this + 5));
    std::string::basic_string[abi:ne180100]<0>(v14, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::error(ims::_logger, (uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Failed to write data to stream. Errorcode: ", 43);
    *(_BYTE *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
    return 4294957496;
  }
  v7 = v6;
  std::string::basic_string[abi:ne180100]<0>(v14, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"writeData: Length - Max = ", 26);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)", Actual = ", 11);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  result = 0;
  *a3 = v7;
  return result;
}

void sub_1BEE33F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HttpStreamPair::_hostPortInfo@<X0>(uint64_t this@<X0>, int (*a2)(int, sockaddr *, unsigned int *)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  const __CFData *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  void *v12[2];
  char v13;
  void *__p[2];
  char v15;
  int v16;
  UInt8 buffer[4];
  void (**v18)(ims::CFData *__hidden);
  const __CFData *v19;
  _OWORD v20[4];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[144];
  uint64_t v25;
  __int128 __s;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  sockaddr v34;
  uint64_t v35;
  CFRange v36;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(this + 32))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return this;
  }
  v5 = this;
  v25 = 0;
  v23 = 0u;
  memset(v24, 0, sizeof(v24));
  v21 = 0u;
  v22 = 0u;
  memset(v20, 0, sizeof(v20));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  v18 = 0;
  v19 = 0;
  v6 = (const __CFData *)CFReadStreamCopyProperty(*(CFReadStreamRef *)(v5 + 32), (CFStreamPropertyKey)*MEMORY[0x1E0C9B2F0]);
  v18 = &off_1E78D9E48;
  v19 = v6;
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&__s, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::warn(ims::_logger, (uint64_t)&__s, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Cannot fetch transport name/ip - CFReadStreamCopyProperty() failed ", 67);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_7;
  }
  *(_DWORD *)buffer = 0;
  v36.location = 0;
  v36.length = 4;
  CFDataGetBytes(v6, v36, buffer);
  *(_QWORD *)&v34.sa_len = 0;
  *(_QWORD *)&v34.sa_data[6] = 0;
  v16 = 16;
  if (a2(*(unsigned int *)buffer, &v34, (unsigned int *)&v16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__s, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::warn(ims::_logger, (uint64_t)&__s, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Cannot fetch transport name/ip - getsockname() failed ", 54);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_7:
    *(_BYTE *)(v7 + 17) = 0;
    if (v15 < 0)
      operator delete(__p[0]);
    if ((SBYTE7(v27) & 0x80000000) == 0)
      goto LABEL_18;
    v8 = (void *)__s;
    goto LABEL_11;
  }
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  __s = 0u;
  v27 = 0u;
  if (!getnameinfo(&v34, 0x10u, (char *)&__s, 0x80u, 0, 0, 10))
  {
    v10 = strlen((const char *)&__s);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&__s, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)":", 1);
    std::ostream::operator<<();
    goto LABEL_18;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::warn(ims::_logger, (uint64_t)__p, (uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Cannot fetch transport name/ip - getnameinfo() failed ", 54);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v13 < 0)
    operator delete(v12[0]);
  if ((v15 & 0x80000000) == 0)
    goto LABEL_18;
  v8 = __p[0];
LABEL_11:
  operator delete(v8);
LABEL_18:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v20 + 8, a3);
  ims::CFType::~CFType((ims::CFType *)&v18);
  *(_QWORD *)&v20[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(*(_QWORD *)&v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v20[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v22) < 0)
    operator delete(*((void **)&v21 + 1));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v24);
}

void sub_1BEE34368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  ims::CFType::~CFType((ims::CFType *)&a23);
  std::ostringstream::~ostringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1BEE34468(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallMediaStream::~BambiCallMediaStream(BambiCallMediaStream *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E78BA818;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E78BA818;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

_QWORD *BambiCallMediaStream::setMediaSessionId(_QWORD *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (this[4] != a2)
  {
    v2 = (uint64_t)this;
    this[4] = a2;
    v3 = (*(uint64_t (**)(_QWORD *))(*this + 64))(this);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"setMediaSessionId to ", 21);
    *(_BYTE *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v3 + 17) = 0;
    this = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
  }
  return this;
}

_QWORD *BambiCallMediaStream::logPrefix(BambiCallMediaStream *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"BambiCallMediaStream: ", 22);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void SipUssdDataBody::SipUssdDataBody(SipUssdDataBody *this, const SipUssdData *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = off_1E78BA8A0;
  SipUssdData::SipUssdData((SipUssdDataBody *)((char *)this + 32), a2);
}

void sub_1BEE3461C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  *(_QWORD *)v1 = off_1E78D24E0;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void SipUssdData::~SipUssdData(SipUssdData *this)
{
  void **v2;

  *(_QWORD *)this = off_1E78C9C68;
  *((_QWORD *)this + 1) = &unk_1E78C9CE0;
  v2 = (void **)((char *)this + 8);
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  bambi::XmlTreeItem::~XmlTreeItem(v2);
}

{
  void **v2;

  *(_QWORD *)this = off_1E78C9C68;
  *((_QWORD *)this + 1) = &unk_1E78C9CE0;
  v2 = (void **)((char *)this + 8);
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  JUMPOUT(0x1C3B87100);
}

void SipUssdDataBody::generateXml(SipUssdDataBody *this@<X0>, std::string *a2@<X8>)
{
  _OWORD v3[4];
  void *v4[2];
  void *__p[2];
  __int128 v6;
  uint64_t v7;

  v7 = 0;
  *(_OWORD *)__p = 0u;
  v6 = 0u;
  *(_OWORD *)v4 = 0u;
  memset(v3, 0, sizeof(v3));
  SipUssdData::SipUssdData((SipUssdData *)v3, (SipUssdDataBody *)((char *)this + 32));
  bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)((char *)v3 + 8), 0, 1, a2);
  *(_QWORD *)&v3[0] = off_1E78C9C68;
  *((_QWORD *)&v3[0] + 1) = &unk_1E78C9CE0;
  if (SHIBYTE(v6) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v4[0]);
  bambi::XmlTreeItem::~XmlTreeItem((void **)v3 + 1);
}

void sub_1BEE34740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SipUssdData::~SipUssdData((SipUssdData *)&a9);
  _Unwind_Resume(a1);
}

void SipUssdDataBody::~SipUssdDataBody(SipUssdDataBody *this)
{
  void **v2;

  *(_QWORD *)this = off_1E78BA8A0;
  *((_QWORD *)this + 4) = off_1E78C9C68;
  *((_QWORD *)this + 5) = &unk_1E78C9CE0;
  v2 = (void **)((char *)this + 40);
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  *(_QWORD *)this = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void **v2;

  *(_QWORD *)this = off_1E78BA8A0;
  *((_QWORD *)this + 4) = off_1E78C9C68;
  *((_QWORD *)this + 5) = &unk_1E78C9CE0;
  v2 = (void **)((char *)this + 40);
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  *(_QWORD *)this = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1C3B87100);
}

uint64_t SipBody::initWithContentTypeHeader()
{
  return 1;
}

_QWORD *SipUssdDataBody::clone(SipUssdDataBody *this)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = operator new();
  v3 = (_QWORD *)v2;
  *(_QWORD *)v2 = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 8), *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v2 + 24) = *((_QWORD *)this + 3);
  }
  *v3 = off_1E78BA8A0;
  SipUssdData::SipUssdData((SipUssdData *)(v3 + 4), (SipUssdDataBody *)((char *)this + 32));
  return v3;
}

void sub_1BEE34914(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40DDEF20B8);
  _Unwind_Resume(a1);
}

void *SipUssdDataBody::contentType(SipUssdDataBody *this)
{
  return &SipUssdDataBody::kContentType;
}

uint64_t SipUssdDataBody::rootItem(SipUssdDataBody *this)
{
  return (uint64_t)this + 32;
}

uint64_t _GLOBAL__sub_I_SipUssdDataBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(SipUssdDataBody::kContentType, "application/vnd.3gpp.ussd+xml");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], SipUssdDataBody::kContentType, &dword_1BEDF4000);
}

void SipTransportGroup::~SipTransportGroup(SipTransportGroup *this, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 48)) = a2[5];
  *((_QWORD *)this + 9) = off_1E78E89D8;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  SipTransportInterface::~SipTransportInterface(this, (uint64_t)(a2 + 1));
}

uint64_t SipIPSecTransportGroup::SipIPSecTransportGroup(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::string __str;
  uint64_t v27;
  std::__shared_weak_count *v28;

  *(_QWORD *)a1 = &off_1E78B7B60;
  v4 = (std::__shared_weak_count *)a2[1];
  v27 = *a2;
  v28 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  SipTransportGroup::SipTransportGroup((uint64_t *)a1, (uint64_t *)off_1E78BAB50, &v27);
  v7 = v28;
  if (v28)
  {
    v8 = (unint64_t *)&v28->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1E78BA960;
  *(_QWORD *)(a1 + 72) = &unk_1E78BAAC0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 208) = &unk_1E78BAB20;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 336));
  *(_WORD *)(a1 + 492) = 0;
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 216, (__int128 *)&__str);
  size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 232, (__int128 *)&__str);
  v13 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v14 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 248, (__int128 *)&__str);
  v16 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 440) = a1 + *(_QWORD *)(*(_QWORD *)a1 - 48);
  v19 = *a2;
  v20 = *(std::__shared_weak_count **)(*a2 + 16);
  if (v20)
  {
    v21 = std::__shared_weak_count::lock(v20);
    if (v21)
    {
      v22 = *(_QWORD *)(v19 + 8);
      goto LABEL_29;
    }
  }
  else
  {
    v21 = 0;
  }
  v22 = 0;
LABEL_29:
  if (*(char *)(v22 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v22 + 4136), *(_QWORD *)(v22 + 4144));
  else
    __str = *(std::string *)(v22 + 4136);
  std::string::operator=((std::string *)(a1 + 384), (const std::string *)(a1 + 80));
  std::string::operator=((std::string *)(a1 + 408), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return a1;
}

void sub_1BEE34CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  SipTransportGroup *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  SipTimerContainer *v22;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  SipTimerContainer::~SipTimerContainer(v22);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v18 + 264);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v19);
  SipTransportGroup::~SipTransportGroup(v18, (uint64_t *)off_1E78BAB50);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::~SipIPSecTransportGroup(SipIPSecTransportGroup *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E78BA960;
  *((_QWORD *)this + 9) = &unk_1E78BAAC0;
  *((_QWORD *)this + 26) = &unk_1E78BAB20;
  v3 = (_QWORD *)((char *)this + 232);
  v2 = *((_QWORD *)this + 29);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v3);
  }
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 27);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 31);
  v4 = *((_QWORD *)this + 36);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 36) = 0;
  v5 = *((_QWORD *)this + 37);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 37) = 0;
  v6 = *((_QWORD *)this + 35);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 35) = 0;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 33);
  v7 = *((_QWORD *)this + 38);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 38) = 0;
  v8 = *((_QWORD *)this + 39);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 39) = 0;
  v9 = *((_QWORD *)this + 40);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 40) = 0;
  SipTimerContainer::cancelTimer((SipIPSecTransportGroup *)((char *)this + 336), (std::string *)"SALifetime");
  SipTimerContainer::~SipTimerContainer((SipIPSecTransportGroup *)((char *)this + 336));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  SipTransportGroup::~SipTransportGroup(this, (uint64_t *)off_1E78BAB50);
}

{
  SipIPSecTransportGroup::~SipIPSecTransportGroup(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipIPSecTransportGroup::~SipIPSecTransportGroup(SipIPSecTransportGroup *this)
{
  SipIPSecTransportGroup::~SipIPSecTransportGroup((SipIPSecTransportGroup *)((char *)this - 72));
}

{
  SipIPSecTransportGroup::~SipIPSecTransportGroup((SipIPSecTransportGroup *)((char *)this - 208));
}

{
  SipIPSecTransportGroup::~SipIPSecTransportGroup((SipIPSecTransportGroup *)((char *)this - 72));
  JUMPOUT(0x1C3B87100);
}

{
  SipIPSecTransportGroup::~SipIPSecTransportGroup((SipIPSecTransportGroup *)((char *)this - 208));
  JUMPOUT(0x1C3B87100);
}

SipIPSecTransportGroup *SipIPSecTransportGroup::securityDelegate(SipIPSecTransportGroup *this, std::__shared_weak_count *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (!a2)
    return 0;
  v2 = a2;
  p_shared_weak_owners = (unint64_t *)&a2->__shared_weak_owners_;
  do
    v5 = __ldxr(p_shared_weak_owners);
  while (__stxr(v5 + 1, p_shared_weak_owners));
  v6 = std::__shared_weak_count::lock(a2);
  if (!v6)
  {
    this = 0;
    goto LABEL_13;
  }
  v7 = v6;
  std::__shared_weak_count::__release_weak(v2);
  if (this)
    this = (SipIPSecTransportGroup *)(*(uint64_t (**)(SipIPSecTransportGroup *))(*(_QWORD *)this + 136))(this);
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    v2 = v7;
LABEL_13:
    std::__shared_weak_count::__release_weak(v2);
  }
  return this;
}

void sub_1BEE35018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL SipIPSecTransportGroup::initialized(SipIPSecTransportGroup *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 36);
  return v1
      && *(_DWORD *)(v1 + 8)
      && *(_DWORD *)(v1 + 12)
      && (v2 = *((_QWORD *)this + 37)) != 0
      && *(_DWORD *)(v2 + 8)
      && *(_DWORD *)(v2 + 12) != 0;
}

uint64_t ImsResult::operator<<<char [39]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE350EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [28]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE35190(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::initialize(uint64_t a1@<X0>, uint64_t a2@<X1>, SipUri *a3@<X2>, std::string *a4@<X3>, uint64_t *a5@<X4>, unsigned int a6@<W5>, unsigned int a7@<W6>, char a8@<W7>, uint64_t a9@<X8>)
{
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  const ImsResult *v43;
  const ImsResult *v44;
  uint64_t v45;
  const ImsResult *v46;
  char v47;
  char v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  ImsPrefs *v53;
  void **UseEphemeralRangeForIPSecKey;
  void *v55;
  uint64_t v56;
  ImsPrefs *v57;
  void **DefaultIPSecPortKey;
  void *v59;
  void *v60;
  __int128 *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  ImsPrefs *v82;
  void *MaxIPSecTransportRetriesKey;
  void *v84;
  int v85;
  int v86;
  int v87;
  __guard *v88;
  unsigned __int16 v89;
  uint64_t v90;
  NSObject *v91;
  const ImsResult *v92;
  uint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  _BOOL4 v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unsigned __int16 v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  int v109;
  __int128 v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  SipIPSecTransportGroup *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  SipIPSecTransportGroup *v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  SipUri *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  uint64_t v241;
  _QWORD *v242;
  unsigned int v243;
  int v244;
  int v245;
  unsigned int v246;
  SipUri *v247;
  char v248;
  uint64_t v250;
  _OWORD v251[5];
  __int128 v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  __int128 v257[4];
  uint64_t v258;
  __int128 v259;
  SipTcpTransport *v260;
  std::__shared_weak_count *v261;
  _QWORD v262[2];
  int v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  void *__p[2];
  char v268;
  _QWORD v269[2];
  dispatch_object_t object;
  __int128 v271[4];
  void *v272;
  std::__shared_weak_count *v273;
  void *v274;
  std::__shared_weak_count *v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  __int128 v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  uint64_t v285;
  std::__shared_weak_count *v286;

  if (!SipIPSecTransportGroup::securityDelegate(*(SipIPSecTransportGroup **)(a1 + 192), *(std::__shared_weak_count **)(a1 + 200)))
  {
    v282 = 0u;
    v283 = 0u;
    v284 = 0u;
    *(_QWORD *)&v280 = &off_1E78B7238;
    *((_QWORD *)&v280 + 1) = &_bambiDomain;
    LODWORD(v281) = 1073741827;
    v43 = (const ImsResult *)ImsResult::operator<<<char [25]>((uint64_t)&v280, "no security delegate set");
    ImsResult::ImsResult((ImsResult *)a9, v43);
    ImsResult::~ImsResult((ImsResult *)&v280);
    return;
  }
  v248 = a8;
  v17 = *(std::__shared_weak_count **)(a1 + 200);
  if (!v17)
  {
    v21 = 0;
    v255 = 0;
    v256 = 0;
    goto LABEL_30;
  }
  v246 = a7;
  v247 = a3;
  v18 = *(_QWORD *)(a1 + 192);
  p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  v255 = 0;
  v21 = std::__shared_weak_count::lock(v17);
  v256 = v21;
  if (!v21)
  {
    std::__shared_weak_count::__release_weak(v17);
LABEL_30:
    v282 = 0u;
    v283 = 0u;
    v284 = 0u;
    *(_QWORD *)&v280 = &off_1E78B7238;
    *((_QWORD *)&v280 + 1) = &_bambiDomain;
    LODWORD(v281) = 0x40000000;
    v44 = (const ImsResult *)ImsResult::operator<<<char [19]>((uint64_t)&v280, "no transport layer");
    ImsResult::ImsResult((ImsResult *)a9, v44);
    ImsResult::~ImsResult((ImsResult *)&v280);
    if (!v21)
      return;
    goto LABEL_302;
  }
  v255 = v18;
  std::__shared_weak_count::__release_weak(v17);
  if (!v18)
    goto LABEL_30;
  v22 = (uint64_t *)(a1 + 72);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"SipIPSecTransportGroup::initialize()", 36);
  *(_BYTE *)(v23 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v23 + 17) = 0;
  v253 = 0u;
  v254 = 0u;
  v252 = 0u;
  memset(v251, 0, 72);
  v24 = (std::__shared_weak_count *)a5[1];
  v250 = *a5;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  v27 = *(std::__shared_weak_count **)(a1 + 200);
  v243 = a6;
  if (!v27)
  {
    v31 = 0;
    v285 = 0;
    v286 = 0;
    goto LABEL_34;
  }
  v28 = *(_QWORD *)(a1 + 192);
  v29 = (unint64_t *)&v27->__shared_weak_owners_;
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  v285 = 0;
  v31 = std::__shared_weak_count::lock(v27);
  v286 = v31;
  if (!v31)
  {
    std::__shared_weak_count::__release_weak(v27);
LABEL_34:
    v45 = (*(uint64_t (**)(uint64_t))(*v22 + 56))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*v22 + 16))(a1 + 72, v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v45 + 8), (uint64_t)"No Transport Layer to setup transports", 38);
    *(_BYTE *)(v45 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v45 + 17) = 0;
    v282 = 0u;
    v283 = 0u;
    v284 = 0u;
    *(_QWORD *)&v280 = &off_1E78B7238;
    *((_QWORD *)&v280 + 1) = &_bambiDomain;
    LODWORD(v281) = 0x40000000;
    v46 = (const ImsResult *)ImsResult::operator<<<char [39]>((uint64_t)&v280, "No Transport Layer to setup transports");
    ImsResult::ImsResult((ImsResult *)v251, v46);
    ImsResult::~ImsResult((ImsResult *)&v280);
    v47 = v248;
    if (!v31)
      goto LABEL_212;
    goto LABEL_208;
  }
  v285 = v28;
  std::__shared_weak_count::__release_weak(v27);
  if (!v28)
    goto LABEL_34;
  v240 = v24;
  v241 = a9;
  v278 = 0uLL;
  v279 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v278, "67A03811-DB0A-594E-C2AE-8B0517EDF26F");
  v32 = *(std::__shared_weak_count **)(a1 + 200);
  if (!v32)
    goto LABEL_45;
  v33 = *(_QWORD *)(a1 + 192);
  v34 = (unint64_t *)&v32->__shared_weak_owners_;
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  v36 = std::__shared_weak_count::lock(v32);
  std::__shared_weak_count::__release_weak(v32);
  if (!v36)
    goto LABEL_45;
  if (!v33)
    goto LABEL_36;
  v37 = *(std::__shared_weak_count **)(v33 + 16);
  if (!v37)
    goto LABEL_36;
  v38 = std::__shared_weak_count::lock(v37);
  if (!v38)
    goto LABEL_36;
  v39 = v38;
  v40 = *(_QWORD *)(v33 + 8);
  if (v40)
  {
    LOBYTE(v32) = *(_BYTE *)(v40 + 2657) != 0;
    v41 = (unint64_t *)&v38->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (v42)
      goto LABEL_342;
  }
  else
  {
    v238 = (unint64_t *)&v38->__shared_owners_;
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (v239)
      goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v39);
  if (!v40)
  {
LABEL_36:
    v48 = 1;
    goto LABEL_37;
  }
LABEL_342:
  v48 = 0;
LABEL_37:
  v49 = (unint64_t *)&v36->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  if (!(v48 & 1 | ((v32 & 1) == 0)))
  {
    ims::convertBundleIdToUuid(&v280);
    if (SHIBYTE(v279) < 0)
      operator delete((void *)v278);
    v278 = v280;
    v279 = v281;
  }
LABEL_45:
  v276 = 0;
  v277 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 32))(&v276);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v28 + 200))(&v280, v28);
  v51 = v280;
  v52 = v285;
  a9 = v241;
  v53 = (ImsPrefs *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v285 + 184))(v285);
  UseEphemeralRangeForIPSecKey = (void **)ImsPrefs::getUseEphemeralRangeForIPSecKey(v53);
  v55 = ImsPrefs::prefWithKey(v53, UseEphemeralRangeForIPSecKey);
  if (v55)
    v56 = (*(uint64_t (**)(void *))(*(_QWORD *)v55 + 40))(v55);
  else
    v56 = *((_BYTE *)UseEphemeralRangeForIPSecKey + 57) != 0;
  v57 = (ImsPrefs *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 184))(v52);
  DefaultIPSecPortKey = (void **)ImsPrefs::getDefaultIPSecPortKey(v57);
  v59 = ImsPrefs::prefWithKey(v57, DefaultIPSecPortKey);
  if (v59)
    LOWORD(v245) = (*(uint64_t (**)(void *))(*(_QWORD *)v59 + 56))(v59);
  else
    v245 = *((_DWORD *)DefaultIPSecPortKey + 15);
  v274 = 0;
  v275 = 0;
  v242 = (_QWORD *)(a1 + 176);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v280, (_QWORD *)(a1 + 176));
  if ((_QWORD)v280
  {
    v274 = v60;
    v275 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
    v61 = &v280;
  }
  else
  {
    v61 = (__int128 *)&v274;
  }
  *(_QWORD *)v61 = 0;
  *((_QWORD *)v61 + 1) = 0;
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
  if (*((_QWORD *)&v280 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v285 + 176))(&v280);
  if (!(_QWORD)v280)
  {
    v78 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
    if (!*((_QWORD *)&v280 + 1))
      goto LABEL_89;
    v81 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
    do
      v80 = __ldaxr(v81);
    while (__stlxr(v80 - 1, v81));
    goto LABEL_87;
  }
  v65 = v274;
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
  if (*((_QWORD *)&v280 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v65)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v285 + 176))(v271);
    v69 = *(_QWORD *)&v271[0];
    v272 = v274;
    v273 = v275;
    if (v275)
    {
      v70 = (unint64_t *)&v275->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, void **, std::string *, uint64_t))(*(_QWORD *)v69 + 112))(&v280, v69, &v272, a4, v51);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)&v252, &v280);
    v72 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
    if (*((_QWORD *)&v280 + 1))
    {
      v73 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = v273;
    if (v273)
    {
      v76 = (unint64_t *)&v273->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = (std::__shared_weak_count *)*((_QWORD *)&v271[0] + 1);
    if (*((_QWORD *)&v271[0] + 1))
    {
      v79 = (unint64_t *)(*((_QWORD *)&v271[0] + 1) + 8);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
LABEL_87:
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
  }
LABEL_89:
  v82 = (ImsPrefs *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v285 + 184))(v285);
  MaxIPSecTransportRetriesKey = ImsPrefs::getMaxIPSecTransportRetriesKey(v82);
  v84 = ImsPrefs::prefWithKey(v82, (void **)MaxIPSecTransportRetriesKey);
  if (v84)
    v85 = (*(uint64_t (**)(void *))(*(_QWORD *)v84 + 56))(v84);
  else
    v85 = *((_DWORD *)MaxIPSecTransportRetriesKey + 15);
  v281 = 0x40000000;
  v282 = 0u;
  v283 = 0u;
  v284 = 0u;
  *(_QWORD *)&v280 = &off_1E78B7238;
  *((_QWORD *)&v280 + 1) = &_bambiDomain;
  if (v85 >= 1)
  {
    v86 = 0;
    if (v85 >= 100)
      v87 = 100;
    else
      v87 = v85;
    v244 = v87;
    while (1)
    {
      if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v280 + 1) + 24))(*((_QWORD *)&v280 + 1), v281))goto LABEL_194;
      if ((_DWORD)v56)
        v89 = 0;
      else
        v89 = v86 + v245;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v276 + 64))(v276, v89);
      v90 = v252;
      if (!(_QWORD)v252)
      {
        v264 = 0u;
        v265 = 0u;
        v266 = 0u;
        v262[0] = &off_1E78B7238;
        v262[1] = &_bambiDomain;
        v263 = 0x40000000;
        v92 = (const ImsResult *)ImsResult::operator<<<char [28]>((uint64_t)v262, "NetworkManager no available");
        ImsResult::ImsResult((ImsResult *)v271, v92);
        goto LABEL_108;
      }
      v91 = v88[131];
      if (v91)
        break;
      v91 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      v88[131] = (__guard)v91;
      object = v91;
      if (v91)
        goto LABEL_106;
LABEL_107:
      v269[0] = &off_1E78B7BD8;
      v269[1] = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *, dispatch_object_t *, __int128 *, _QWORD, _QWORD *, void **, std::string *))(*(_QWORD *)v90 + 16))(v271, v90, &v276, &object, &v278, 0, v269, __p, a4);
LABEL_108:
      ImsResult::operator=((uint64_t)&v280, (uint64_t)v271);
      ImsResult::~ImsResult((ImsResult *)v271);
      if (v90)
      {
        if (v268 < 0)
          operator delete(__p[0]);
        ims::CFType::~CFType((ims::CFType *)v269);
        if (object)
          dispatch_release(object);
      }
      else
      {
        ImsResult::~ImsResult((ImsResult *)v262);
      }
      if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v280 + 1) + 24))(*((_QWORD *)&v280 + 1), v281) & 1) != 0)goto LABEL_193;
      v93 = v276;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v252 + 64))(v271);
      v94 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v271[0] + 56))(*(_QWORD *)&v271[0]);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 64))(v93, v94);
      v95 = (std::__shared_weak_count *)*((_QWORD *)&v271[0] + 1);
      if (*((_QWORD *)&v271[0] + 1))
      {
        v96 = (unint64_t *)(*((_QWORD *)&v271[0] + 1) + 8);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      if (v250)
      {
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v250 + 136))(v271, v250);
        if (*(_QWORD *)&v271[0])
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v250 + 144))(v257, v250);
          v98 = (std::__shared_weak_count *)*((_QWORD *)&v257[0] + 1);
          v99 = *(_QWORD *)&v257[0] != 0;
          if (*((_QWORD *)&v257[0] + 1))
          {
            v100 = (unint64_t *)(*((_QWORD *)&v257[0] + 1) + 8);
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
        }
        else
        {
          v99 = 0;
        }
        v102 = (std::__shared_weak_count *)*((_QWORD *)&v271[0] + 1);
        if (*((_QWORD *)&v271[0] + 1))
        {
          v103 = (unint64_t *)(*((_QWORD *)&v271[0] + 1) + 8);
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
        }
        if (v99)
        {
          v216 = (*(uint64_t (**)(uint64_t))(*v22 + 64))(a1 + 72);
          (*(void (**)(uint64_t, uint64_t))(*v22 + 16))(a1 + 72, v216);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v216 + 8), (uint64_t)"using existing transport for IPSec initialization", 49);
          *(_BYTE *)(v216 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v216 + 64))(v216, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v216 + 17) = 0;
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v257, v242);
          v260 = (SipTcpTransport *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v285 + 112))(v285);
          std::allocate_shared[abi:ne180100]<SipUdpTransport,std::allocator<SipUdpTransport>,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,void>((uint64_t *)v257, (uint64_t *)&v260, v271);
          std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)&v253, v271);
          v217 = (std::__shared_weak_count *)*((_QWORD *)&v271[0] + 1);
          if (*((_QWORD *)&v271[0] + 1))
          {
            v218 = (unint64_t *)(*((_QWORD *)&v271[0] + 1) + 8);
            do
              v219 = __ldaxr(v218);
            while (__stlxr(v219 - 1, v218));
            if (!v219)
            {
              ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
              std::__shared_weak_count::__release_weak(v217);
            }
          }
          v220 = (std::__shared_weak_count *)*((_QWORD *)&v257[0] + 1);
          if (*((_QWORD *)&v257[0] + 1))
          {
            v221 = (unint64_t *)(*((_QWORD *)&v257[0] + 1) + 8);
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 - 1, v221));
            if (!v222)
            {
              ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
              std::__shared_weak_count::__release_weak(v220);
            }
          }
          v223 = v253;
          (*(void (**)(SipTcpTransport **__return_ptr))(*(_QWORD *)v250 + 136))(&v260);
          SipUdpTransport::initialize(v223, (uint64_t *)&v260, (uint64_t)v271);
          ImsResult::~ImsResult((ImsResult *)v271);
          v224 = v261;
          if (v261)
          {
            v225 = (unint64_t *)&v261->__shared_owners_;
            do
              v226 = __ldaxr(v225);
            while (__stlxr(v226 - 1, v225));
            if (!v226)
            {
              ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
              std::__shared_weak_count::__release_weak(v224);
            }
          }
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v259, v242);
          v258 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v285 + 112))(v285);
          std::allocate_shared[abi:ne180100]<SipTcpTransport,std::allocator<SipTcpTransport>,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,void>((uint64_t *)&v259, &v258, v257);
          std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)&v254, v257);
          v227 = (std::__shared_weak_count *)*((_QWORD *)&v257[0] + 1);
          if (*((_QWORD *)&v257[0] + 1))
          {
            v228 = (unint64_t *)(*((_QWORD *)&v257[0] + 1) + 8);
            do
              v229 = __ldaxr(v228);
            while (__stlxr(v229 - 1, v228));
            if (!v229)
            {
              ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
              std::__shared_weak_count::__release_weak(v227);
            }
          }
          v230 = (std::__shared_weak_count *)*((_QWORD *)&v259 + 1);
          if (*((_QWORD *)&v259 + 1))
          {
            v231 = (unint64_t *)(*((_QWORD *)&v259 + 1) + 8);
            do
              v232 = __ldaxr(v231);
            while (__stlxr(v232 - 1, v231));
            if (!v232)
            {
              ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
              std::__shared_weak_count::__release_weak(v230);
            }
          }
          v233 = v254;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v250 + 144))(&v259);
          v234 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 56))(v276);
          SipTcpTransport::initialize(v233, (uint64_t)&v259, v234, (uint64_t)v257);
          ImsResult::~ImsResult((ImsResult *)v257);
          v235 = (std::__shared_weak_count *)*((_QWORD *)&v259 + 1);
          if (*((_QWORD *)&v259 + 1))
          {
            v236 = (unint64_t *)(*((_QWORD *)&v259 + 1) + 8);
            do
              v237 = __ldaxr(v236);
            while (__stlxr(v237 - 1, v236));
            if (!v237)
            {
              ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
              std::__shared_weak_count::__release_weak(v235);
            }
          }
          ImsResult::ImsResult((uint64_t)v251, (uint64_t)&v280);
          goto LABEL_195;
        }
      }
      if ((_DWORD)v56)
        v105 = 0;
      else
        v105 = v86 + v245 + 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v276 + 64))(v276, v105);
      v257[0] = 0uLL;
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v271, v242);
      v260 = (SipTcpTransport *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v285 + 112))(v285);
      std::allocate_shared[abi:ne180100]<SipUdpTransport,std::allocator<SipUdpTransport>,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,void>((uint64_t *)v271, (uint64_t *)&v260, v257);
      v106 = (std::__shared_weak_count *)*((_QWORD *)&v271[0] + 1);
      if (*((_QWORD *)&v271[0] + 1))
      {
        v107 = (unint64_t *)(*((_QWORD *)&v271[0] + 1) + 8);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      SipUdpTransport::initialize(*(uint64_t **)&v257[0], (uint64_t)&v276, (uint64_t)&v278, (uint64_t)a4, (uint64_t)v271);
      ImsResult::operator=((uint64_t)&v280, (uint64_t)v271);
      ImsResult::~ImsResult((ImsResult *)v271);
      if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v280 + 1) + 24))(*((_QWORD *)&v280 + 1), v281))
      {
        ImsResult::ImsResult((uint64_t)v251, (uint64_t)&v280);
        v109 = 1;
        goto LABEL_187;
      }
      (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)&v257[0] + 16))(v271);
      v110 = v271[0];
      if (*((_QWORD *)&v271[0] + 1))
      {
        v111 = (unint64_t *)(*((_QWORD *)&v271[0] + 1) + 8);
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v110 + 1) + 16))(*((_QWORD *)&v110 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v110 + 1));
        }
      }
      if ((_QWORD)v110)
      {
        v113 = v276;
        (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)&v257[0] + 16))(v271);
        v114 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v271[0] + 56))(*(_QWORD *)&v271[0]);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v113 + 64))(v113, v114);
        v115 = (std::__shared_weak_count *)*((_QWORD *)&v271[0] + 1);
        if (*((_QWORD *)&v271[0] + 1))
        {
          v116 = (unint64_t *)(*((_QWORD *)&v271[0] + 1) + 8);
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
      }
      v118 = v285;
      v119 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v285 + 16))(v285) + 576);
      if (v119 < 1)
      {
        v123 = 0;
      }
      else
      {
        v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 144))(v118);
        if (v120)
        {
          v121 = *(_DWORD *)(v120 + 56);
          v122 = (*(uint64_t (**)(uint64_t))(*v22 + 64))(a1 + 72);
          (*(void (**)(uint64_t, uint64_t))(*v22 + 16))(a1 + 72, v122);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v122 + 8), (uint64_t)"using MSS ", 10);
          v123 = v121 - v119;
          *(_BYTE *)(v122 + 17) = 0;
          v124 = (_BYTE *)(v122 + 17);
          std::ostream::operator<<();
          *(_BYTE *)(v122 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v122 + 64))(v122, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        else
        {
          v125 = (*(uint64_t (**)(uint64_t))(*v22 + 64))(a1 + 72);
          (*(void (**)(uint64_t, uint64_t))(*v22 + 16))(a1 + 72, v125);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v125 + 8), (uint64_t)"layer doesn't have a local interface, so I can't set MSS", 56);
          *(_BYTE *)(v125 + 17) = 0;
          v124 = (_BYTE *)(v125 + 17);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v125 + 64))(v125, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v123 = 0;
        }
        *v124 = 0;
      }
      v126 = v56;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v252 + 64))(v271);
      v127 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v271[0] + 56))(*(_QWORD *)&v271[0]);
      v128 = (std::__shared_weak_count *)*((_QWORD *)&v271[0] + 1);
      if (*((_QWORD *)&v271[0] + 1))
      {
        v129 = (unint64_t *)(*((_QWORD *)&v271[0] + 1) + 8);
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      v260 = 0;
      v261 = 0;
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v259, v242);
      v131 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v285 + 112))(v285);
      v132 = (std::__shared_weak_count *)operator new(0x150uLL);
      v132->__shared_owners_ = 0;
      v132->__shared_weak_owners_ = 0;
      v132->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BAF58;
      v133 = (std::__shared_weak_count *)*((_QWORD *)&v259 + 1);
      v271[0] = v259;
      v259 = 0uLL;
      SipTcpTransport::SipTcpTransport((uint64_t)&v132[1], (uint64_t *)v271, v131, v123);
      if (v133)
      {
        v134 = (unint64_t *)&v133->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      v260 = (SipTcpTransport *)&v132[1];
      v261 = v132;
      std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v260, &v132[7].__shared_owners_, (uint64_t)&v132[1]);
      v136 = (std::__shared_weak_count *)*((_QWORD *)&v259 + 1);
      a9 = v241;
      if (*((_QWORD *)&v259 + 1))
      {
        v137 = (unint64_t *)(*((_QWORD *)&v259 + 1) + 8);
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      SipTcpTransport::initialize(v260, a4, &v276, (uint64_t)&v278, v127, (uint64_t)v271);
      ImsResult::operator=((uint64_t)&v280, (uint64_t)v271);
      v56 = v126;
      ImsResult::~ImsResult((ImsResult *)v271);
      if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v280 + 1) + 24))(*((_QWORD *)&v280 + 1), v281))
      {
        std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v253, (uint64_t *)v257);
        std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v254, (uint64_t *)&v260);
        *(_WORD *)(a1 + 492) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 56))(v276);
LABEL_181:
        ImsResult::ImsResult((uint64_t)v251, (uint64_t)&v280);
        v109 = 1;
        goto LABEL_182;
      }
      if ((_DWORD)v281 != 48 || *((uint64_t **)&v280 + 1) != &_posixDomain)
        goto LABEL_181;
      v109 = 4;
LABEL_182:
      v139 = v261;
      if (v261)
      {
        v140 = (unint64_t *)&v261->__shared_owners_;
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
LABEL_187:
      v142 = (std::__shared_weak_count *)*((_QWORD *)&v257[0] + 1);
      if (*((_QWORD *)&v257[0] + 1))
      {
        v143 = (unint64_t *)(*((_QWORD *)&v257[0] + 1) + 8);
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      if (v109 != 4)
        goto LABEL_195;
LABEL_193:
      if (++v86 == v244)
        goto LABEL_194;
    }
    object = (dispatch_object_t)v88[131];
LABEL_106:
    dispatch_retain(v91);
    goto LABEL_107;
  }
LABEL_194:
  memset((char *)&v251[1] + 8, 0, 48);
  *(_QWORD *)&v251[0] = &off_1E78B7238;
  *((_QWORD *)&v251[0] + 1) = &_bambiDomain;
  LODWORD(v251[1]) = 0x40000000;
LABEL_195:
  ImsResult::~ImsResult((ImsResult *)&v280);
  v145 = v275;
  v47 = v248;
  if (v275)
  {
    v146 = (unint64_t *)&v275->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v277;
  if (v277)
  {
    v149 = (unint64_t *)&v277->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  if (SHIBYTE(v279) < 0)
    operator delete((void *)v278);
  v31 = v286;
  v24 = v240;
  if (v286)
  {
LABEL_208:
    v151 = (unint64_t *)&v31->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
LABEL_212:
  if (v24)
  {
    v153 = (unint64_t *)&v24->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v251[0] + 1) + 24))(*((_QWORD *)&v251[0] + 1), LODWORD(v251[1])))
  {
    v155 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
    v253 = 0uLL;
    if (v155)
    {
      v156 = (unint64_t *)&v155->__shared_owners_;
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
    v158 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
    v254 = 0uLL;
    if (v158)
    {
      v159 = (unint64_t *)&v158->__shared_owners_;
      do
        v160 = __ldaxr(v159);
      while (__stlxr(v160 - 1, v159));
      if (!v160)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }
    }
    ImsResult::ImsResult(a9, (uint64_t)v251);
  }
  else
  {
    v161 = (*(uint64_t (**)(uint64_t))(*v22 + 64))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*v22 + 16))(a1 + 72, v161);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v161 + 8), (uint64_t)"creating temporary inbound SA for local client port", 51);
    *(_BYTE *)(v161 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v161 + 64))(v161, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v161 + 17) = 0;
    v162 = operator new();
    v163 = SipIPSecTransportGroup::securityDelegate(*(SipIPSecTransportGroup **)(a1 + 192), *(std::__shared_weak_count **)(a1 + 200));
    *(_QWORD *)v162 = &off_1E78CF470;
    *(_QWORD *)(v162 + 8) = 0;
    *(_QWORD *)(v162 + 64) = 0;
    *(_QWORD *)(v162 + 72) = 0;
    *(_OWORD *)(v162 + 16) = 0u;
    *(_OWORD *)(v162 + 32) = 0u;
    *(_QWORD *)(v162 + 48) = v163;
    *(_QWORD *)(v162 + 56) = 0;
    *(_BYTE *)(v162 + 80) = 1;
    *(_BYTE *)(v162 + 81) = v47;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v252 + 64))(v271);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v247 + 48))(v257);
    v164 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v255 + 16))(v255);
    SipSecurityAssociationPair::createTemporary(v162, (uint64_t)v271, (uint64_t)v257, v164, v243, v246, (uint64_t)&v280);
    ImsResult::operator=((uint64_t)v251, (uint64_t)&v280);
    ImsResult::~ImsResult((ImsResult *)&v280);
    v165 = (std::__shared_weak_count *)*((_QWORD *)&v257[0] + 1);
    if (*((_QWORD *)&v257[0] + 1))
    {
      v166 = (unint64_t *)(*((_QWORD *)&v257[0] + 1) + 8);
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
    v168 = (std::__shared_weak_count *)*((_QWORD *)&v271[0] + 1);
    if (*((_QWORD *)&v271[0] + 1))
    {
      v169 = (unint64_t *)(*((_QWORD *)&v271[0] + 1) + 8);
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
    }
    v171 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v251[0] + 1) + 24))(*((_QWORD *)&v251[0] + 1), LODWORD(v251[1]));
    v172 = *v22;
    if (v171)
    {
      v173 = (*(uint64_t (**)(uint64_t))(v172 + 56))(a1 + 72);
      (*(void (**)(uint64_t *, uint64_t))(*v22 + 16))(v22, v173);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v173 + 8), (uint64_t)"unable to set up temporary SA for client port: ", 47);
      *(_BYTE *)(v173 + 17) = 0;
      (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)&v251[0] + 16))(v251, v173);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v173 + 64))(v173, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v173 + 17) = 0;
      v174 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
      v253 = 0uLL;
      if (v174)
      {
        v175 = (unint64_t *)&v174->__shared_owners_;
        do
          v176 = __ldaxr(v175);
        while (__stlxr(v176 - 1, v175));
        if (!v176)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      v177 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
      v254 = 0uLL;
      if (v177)
      {
        v178 = (unint64_t *)&v177->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
      ImsResult::ImsResult(a9, (uint64_t)v251);
    }
    else
    {
      v180 = (*(uint64_t (**)(uint64_t))(v172 + 64))(a1 + 72);
      (*(void (**)(uint64_t, uint64_t))(*v22 + 16))(a1 + 72, v180);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v180 + 8), (uint64_t)"creating temporary inbound SA for local server port", 51);
      *(_BYTE *)(v180 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v180 + 64))(v180, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v180 + 17) = 0;
      v181 = operator new();
      v182 = SipIPSecTransportGroup::securityDelegate(*(SipIPSecTransportGroup **)(a1 + 192), *(std::__shared_weak_count **)(a1 + 200));
      *(_QWORD *)v181 = &off_1E78CF470;
      *(_QWORD *)(v181 + 8) = 0;
      *(_QWORD *)(v181 + 64) = 0;
      *(_QWORD *)(v181 + 72) = 0;
      *(_OWORD *)(v181 + 16) = 0u;
      *(_OWORD *)(v181 + 32) = 0u;
      *(_QWORD *)(v181 + 48) = v182;
      *(_QWORD *)(v181 + 56) = 0;
      *(_BYTE *)(v181 + 80) = 0;
      *(_BYTE *)(v181 + 81) = v47;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v253 + 16))(v271);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v247 + 48))(v257);
      v183 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v255 + 16))(v255);
      SipSecurityAssociationPair::createTemporary(v181, (uint64_t)v271, (uint64_t)v257, v183, v243, v246, (uint64_t)&v280);
      ImsResult::operator=((uint64_t)v251, (uint64_t)&v280);
      ImsResult::~ImsResult((ImsResult *)&v280);
      v184 = (std::__shared_weak_count *)*((_QWORD *)&v257[0] + 1);
      if (*((_QWORD *)&v257[0] + 1))
      {
        v185 = (unint64_t *)(*((_QWORD *)&v257[0] + 1) + 8);
        do
          v186 = __ldaxr(v185);
        while (__stlxr(v186 - 1, v185));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
      }
      v187 = (std::__shared_weak_count *)*((_QWORD *)&v271[0] + 1);
      if (*((_QWORD *)&v271[0] + 1))
      {
        v188 = (unint64_t *)(*((_QWORD *)&v271[0] + 1) + 8);
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
      }
      if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v251[0] + 1) + 24))(*((_QWORD *)&v251[0] + 1), LODWORD(v251[1])))
      {
        v190 = (*(uint64_t (**)(uint64_t))(*v22 + 56))(a1 + 72);
        (*(void (**)(uint64_t *, uint64_t))(*v22 + 16))(v22, v190);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v190 + 8), (uint64_t)"unable to set up temporary SA for server port: ", 47);
        *(_BYTE *)(v190 + 17) = 0;
        (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)&v251[0] + 16))(v251, v190);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v190 + 64))(v190, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v190 + 17) = 0;
        v191 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
        v253 = 0uLL;
        if (v191)
        {
          v192 = (unint64_t *)&v191->__shared_owners_;
          do
            v193 = __ldaxr(v192);
          while (__stlxr(v193 - 1, v192));
          if (!v193)
          {
            ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
            std::__shared_weak_count::__release_weak(v191);
          }
        }
        v194 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
        v254 = 0uLL;
        if (v194)
        {
          v195 = (unint64_t *)&v194->__shared_owners_;
          do
            v196 = __ldaxr(v195);
          while (__stlxr(v196 - 1, v195));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
        (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
        ImsResult::ImsResult(a9, (uint64_t)v251);
      }
      else
      {
        *(_QWORD *)(a1 + 288) = v162;
        *(_QWORD *)(a1 + 296) = v181;
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v247 + 48))(v271);
        (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)&v271[0] + 32))(&v280);
        std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 264, &v280);
        v197 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
        if (*((_QWORD *)&v280 + 1))
        {
          v198 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
          do
            v199 = __ldaxr(v198);
          while (__stlxr(v199 - 1, v198));
          if (!v199)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
        v200 = (std::__shared_weak_count *)*((_QWORD *)&v271[0] + 1);
        if (*((_QWORD *)&v271[0] + 1))
        {
          v201 = (unint64_t *)(*((_QWORD *)&v271[0] + 1) + 8);
          do
            v202 = __ldaxr(v201);
          while (__stlxr(v202 - 1, v201));
          if (!v202)
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            std::__shared_weak_count::__release_weak(v200);
          }
        }
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 264) + 64))(*(_QWORD *)(a1 + 264), 0);
        v203 = *(_QWORD *)(a1 + 280);
        if (v203)
          (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
        v204 = (SipUri *)operator new();
        SipUri::SipUri(v204, v247);
        *(_QWORD *)(a1 + 280) = v204;
        SipHop::setHostPort(v204, 0);
        std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 216), (uint64_t *)&v253);
        std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 248), (uint64_t *)&v254);
        std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 232), (uint64_t *)&v252);
        SipIPSecTransportGroup::initializeSecurityClientHeader((SipIPSecTransportGroup *)a1);
        *(_OWORD *)(a9 + 24) = 0u;
        *(_OWORD *)(a9 + 40) = 0u;
        *(_OWORD *)(a9 + 56) = 0u;
        *(_QWORD *)a9 = &off_1E78B7238;
        *(_QWORD *)(a9 + 8) = &_bambiDomain;
        *(_DWORD *)(a9 + 16) = 0;
      }
    }
  }
  ImsResult::~ImsResult((ImsResult *)v251);
  v205 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
  if (*((_QWORD *)&v254 + 1))
  {
    v206 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 8);
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
  if (*((_QWORD *)&v253 + 1))
  {
    v209 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v211 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
  if (*((_QWORD *)&v252 + 1))
  {
    v212 = (unint64_t *)(*((_QWORD *)&v252 + 1) + 8);
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v21 = v256;
  if (v256)
  {
LABEL_302:
    v214 = (unint64_t *)&v21->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BEE36DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  ImsResult::~ImsResult((ImsResult *)(v39 - 192));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 256);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 240);
  if (*(char *)(v39 - 201) < 0)
    operator delete(*(void **)(v39 - 224));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 120);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  SipIPSecTransportGroup::SipTransportPair::~SipTransportPair((SipIPSecTransportGroup::SipTransportPair *)&a33);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_1BEE37098()
{
  uint64_t v0;

  ImsResult::~ImsResult((ImsResult *)(v0 - 192));
  JUMPOUT(0x1BEE37088);
}

uint64_t ImsResult::operator<<<char [25]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE37128(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [19]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE371CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::initializeSecurityClientHeader(SipIPSecTransportGroup *this)
{
  SipIPSecTransportGroup *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  SipIPSecTransportGroup *v18;
  uint64_t v19;
  void **v20;
  void **v21;
  __int128 *v22;
  void **v23;
  __int128 *v24;
  void **v25;
  __int128 *v26;
  void **v27;
  __int128 *v28;
  std::string::size_type size;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string __str;
  uint64_t v50;
  std::__shared_weak_count *v51;
  __int128 *v52[2];

  v1 = this;
  v2 = *((_QWORD *)this + 39);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)v1 + 25);
  if (v3)
  {
    v4 = *((_QWORD *)v1 + 24);
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    v50 = 0;
    v51 = std::__shared_weak_count::lock(v3);
    if (v51)
    {
      v50 = v4;
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
      {
        v7 = (_QWORD *)operator new();
        SipHeader::SipHeader((uint64_t)v7, (const std::string *)"Security-Client");
        v7[8] = 0;
        v7[9] = 0;
        v7[10] = 0;
        *v7 = &off_1E78CB588;
        *((_QWORD *)v1 + 39) = v7;
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
        v9 = *(_QWORD *)(v8 + 504);
        v10 = *(_QWORD *)(v8 + 512);
        if (v9 != v10)
        {
          v11 = (char *)v1 + 72;
          v12 = &std::piecewise_construct;
          v45 = *(_QWORD *)(v8 + 512);
          do
          {
            v13 = *(unsigned __int8 *)(v9 + 31);
            if ((v13 & 0x80u) == 0)
              v14 = *(unsigned __int8 *)(v9 + 31);
            else
              v14 = *(_QWORD *)(v9 + 16);
            if (v14 == 10)
            {
              if ((v13 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)(v9 + 8), &SipIPSec3gppSecurityMechanism::kMechanismName, *(_QWORD *)(v9 + 16)))
                {
LABEL_24:
                  v17 = (uint64_t **)operator new();
                  SipSecurityMechanism::SipSecurityMechanism((uint64_t)v17, &SipIPSec3gppSecurityMechanism::kMechanismName);
                  *v17 = (uint64_t *)&off_1E78DF128;
                  SipIPSec3gppSecurityMechanism::initializeFromTransport((SipIPSec3gppSecurityMechanism *)v17, v1);
                  v18 = v1;
                  v19 = (uint64_t)v12;
                  memset(&__str, 0, sizeof(__str));
                  v20 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9 + 40, (void **)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm);
                  v21 = (void **)(v9 + 48);
                  v22 = (__int128 *)(v20 + 7);
                  if ((void **)(v9 + 48) == v20)
                    v22 = &ims::kEmptyString;
                  if (*((char *)v22 + 23) < 0)
                    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
                  else
                    __str = *(std::string *)v22;
                  memset(&v48, 0, sizeof(v48));
                  v23 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9 + 40, (void **)"ealg");
                  v24 = (__int128 *)(v23 + 7);
                  if (v21 == v23)
                    v24 = &ims::kEmptyString;
                  if (*((char *)v24 + 23) < 0)
                    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v24, *((_QWORD *)v24 + 1));
                  else
                    v48 = *(std::string *)v24;
                  memset(&v47, 0, sizeof(v47));
                  v25 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9 + 40, (void **)"prot");
                  v26 = (__int128 *)(v25 + 7);
                  if (v21 == v25)
                    v26 = &ims::kEmptyString;
                  if (*((char *)v26 + 23) < 0)
                    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)v26, *((_QWORD *)v26 + 1));
                  else
                    v47 = *(std::string *)v26;
                  memset(&v46, 0, sizeof(v46));
                  v27 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9 + 40, (void **)&SipIPSec3gppSecurityMechanism::kParameterMode);
                  v28 = (__int128 *)(v27 + 7);
                  if (v21 == v27)
                    v28 = &ims::kEmptyString;
                  if (*((char *)v28 + 23) < 0)
                    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
                  else
                    v46 = *(std::string *)v28;
                  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    size = __str.__r_.__value_.__l.__size_;
                  if (size)
                  {
                    v52[0] = (__int128 *)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm;
                    v12 = (void *)v19;
                    v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17 + 5, (void **)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm, v19, v52);
                    std::string::operator=((std::string *)(v30 + 7), &__str);
                    v52[0] = (__int128 *)"ealg";
                    v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17 + 5, (void **)"ealg", v19, v52);
                    std::string::operator=((std::string *)(v31 + 7), &v48);
                    v52[0] = (__int128 *)"prot";
                    v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17 + 5, (void **)"prot", v19, v52);
                    std::string::operator=((std::string *)(v32 + 7), &v47);
                    v52[0] = (__int128 *)&SipIPSec3gppSecurityMechanism::kParameterMode;
                    v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17 + 5, (void **)&SipIPSec3gppSecurityMechanism::kParameterMode, v19, v52);
                    std::string::operator=((std::string *)(v33 + 7), &v46);
                    v1 = v18;
                    v34 = (_QWORD *)*((_QWORD *)v18 + 39);
                    v52[0] = (__int128 *)v17;
                    SipVectorHeader<SipSecurityMechanism *>::addItem(v34, v52);
                  }
                  else
                  {
                    v35 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 56))(v11);
                    v12 = (void *)v19;
                    (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v35);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"skipping incomplete ipsec-3gpp config ", 38);
                    *(_BYTE *)(v35 + 17) = 0;
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 32))(v35, v9 + 8);
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 + 32) + 16))(v9 + 32, v35);
                    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(_BYTE *)(v35 + 17) = 0;
                    v1 = v18;
                  }
                  v10 = v45;
                  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v46.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v47.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v48.__r_.__value_.__l.__data_);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  goto LABEL_22;
                }
              }
              else
              {
                if (!*(_BYTE *)(v9 + 31))
                  goto LABEL_24;
                v15 = 0;
                while (*(unsigned __int8 *)(v9 + v15 + 8) == SipIPSec3gppSecurityMechanism::kMechanismName.__r_.__value_.__s.__data_[v15])
                {
                  if (v13 == ++v15)
                    goto LABEL_24;
                }
              }
            }
            v16 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 56))(v11);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"skipping config for unknown Security Agreement mechanism ", 57);
            *(_BYTE *)(v16 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v9 + 8);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v16 + 17) = 0;
LABEL_22:
            v9 += 72;
          }
          while (v9 != v10);
        }
        if (*(_QWORD *)(*((_QWORD *)v1 + 39) + 64) == *(_QWORD *)(*((_QWORD *)v1 + 39) + 72))
        {
          v36 = (uint64_t **)operator new();
          SipSecurityMechanism::SipSecurityMechanism((uint64_t)v36, &SipIPSec3gppSecurityMechanism::kMechanismName);
          *v36 = (uint64_t *)&off_1E78DF128;
          SipIPSec3gppSecurityMechanism::initializeFromTransport((SipIPSec3gppSecurityMechanism *)v36, v1);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"ealg";
          v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v36 + 5, (void **)"ealg", (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
          std::string::operator=((std::string *)(v37 + 7), (const std::string *)"null");
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm;
          v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v36 + 5, (void **)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
          std::string::operator=((std::string *)(v38 + 7), (const std::string *)"hmac-sha-1-96");
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"prot";
          v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v36 + 5, (void **)"prot", (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
          std::string::operator=((std::string *)(v39 + 7), &SipIPSec3gppSecurityMechanism::kProtocolESP);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&SipIPSec3gppSecurityMechanism::kParameterMode;
          v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v36 + 5, (void **)&SipIPSec3gppSecurityMechanism::kParameterMode, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
          std::string::operator=((std::string *)(v40 + 7), (const std::string *)"trans");
          v41 = (_QWORD *)*((_QWORD *)v1 + 39);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
          SipVectorHeader<SipSecurityMechanism *>::addItem(v41, &__str);
        }
      }
    }
    else
    {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v50 = 0;
    v51 = 0;
  }
  v42 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_1BEE378D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v37 - 120);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::SipTransportPair::~SipTransportPair(SipIPSecTransportGroup::SipTransportPair *this)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void SipVectorHeader<SipSecurityMechanism *>::addItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[10];
  v4 = (uint64_t)(a1 + 10);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *(_QWORD *)(v4 - 16);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = *a2;
    v8 = v16 + 8;
    v19 = (char *)a1[8];
    v18 = (char *)a1[9];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    a1[8] = v16;
    a1[9] = v8;
    a1[10] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[9] = v8;
}

void SipIPSecTransportGroup::updateServiceClass(SipIPSecTransportGroup *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v2)
  {
    v3 = *((_QWORD *)this + 24);
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    v13 = 0;
    v6 = std::__shared_weak_count::lock(v2);
    v14 = v6;
    if (v6)
    {
      v13 = v3;
      std::__shared_weak_count::__release_weak(v2);
      if (v3)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 200))(&v12, v3);
        v7 = v12;
        goto LABEL_10;
      }
    }
    else
    {
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  else
  {
    v6 = 0;
    v13 = 0;
    v14 = 0;
  }
  v7 = 104;
LABEL_10:
  v8 = *((_QWORD *)this + 29);
  if (v8)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 112))(v8, v7);
  v9 = *((_QWORD *)this + 31);
  if (v9)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, v7);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BEE37BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::updateCrlfKeepAliveInterval(SipIPSecTransportGroup *this, int a2, int a3)
{
  SipTcpTransport *v3;

  v3 = (SipTcpTransport *)*((_QWORD *)this + 31);
  if (v3)
    SipTcpTransport::updateCrlfKeepAliveInterval(v3, a2, a3);
}

void SipIPSecTransportGroup::updateCrlfKeepAliveNetwork(SipIPSecTransportGroup *this)
{
  SipTcpTransport *v1;

  v1 = (SipTcpTransport *)*((_QWORD *)this + 31);
  if (v1)
    SipTcpTransport::updateCrlfKeepAliveNetwork(v1);
}

void SipIPSecTransportGroup::handleKeepAliveWake(SipIPSecTransportGroup *this)
{
  SipTcpTransport *v1;

  v1 = (SipTcpTransport *)*((_QWORD *)this + 31);
  if (v1)
    SipTcpTransport::handleKeepAliveWake(v1);
}

void SipIPSecTransportGroup::updateFromSecurityServerHeader(SipIPSecTransportGroup *this@<X0>, const SipSecurityServerHeader *a2@<X1>, uint64_t a3@<X8>)
{
  SipSecurityMechanism *v6;
  SipSecurityMechanism *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  SipHop *v15;
  uint64_t v16;
  uint64_t v17;
  SipSecurityVerifyHeader *v18;
  ImsResult *v19;
  uint64_t v20;
  uint64_t v21;
  ImsStringOutStream *v22;
  ImsResult *v23;
  _BYTE v24[72];
  void (**v25)(ImsResult *__hidden);
  uint64_t *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  if (!a2 || *((_QWORD *)a2 + 9) == *((_QWORD *)a2 + 8))
  {
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v25 = &off_1E78B7238;
    v26 = &_bambiDomain;
    v27 = 1073741825;
    v19 = (ImsResult *)ImsResult::operator<<<char [57]>((uint64_t)&v25, "no security mechanism specified in SecurityServer header");
    ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 72), v19);
    ImsResult::ImsResult((ImsResult *)a3, v19);
LABEL_12:
    ImsResult::~ImsResult((ImsResult *)&v25);
    return;
  }
  v6 = SipSecurityServerHeader::bestMatchingMechanism(a2, *((const SipSecurityClientHeader **)this + 39));
  if (!v6)
  {
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v25 = &off_1E78B7238;
    v26 = &_bambiDomain;
    v27 = 1073741825;
    v20 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v20, algn_1ED704220[24]);
    *(_QWORD *)&v28 = v20;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"No acceptable security mechanism in Security-Server header", 58);
    *(_BYTE *)(v20 + 17) = 0;
    ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 72), (ImsResult *)&v25);
    ImsResult::ImsResult((ImsResult *)a3, (const ImsResult *)&v25);
    goto LABEL_12;
  }
  v7 = v6;
  if (!v8)
  {
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v25 = &off_1E78B7238;
    v26 = &_bambiDomain;
    v27 = 0x40000000;
    v21 = ImsResult::operator<<<char [20]>((uint64_t)&v25, "Security mechanism ");
    v22 = *(ImsStringOutStream **)(v21 + 24);
    if (!v22)
    {
      v22 = (ImsStringOutStream *)operator new();
      ImsStringOutStream::ImsStringOutStream(v22, *(_BYTE *)(*(_QWORD *)(v21 + 8) + 32));
      *(_QWORD *)(v21 + 24) = v22;
    }
    (*(void (**)(SipSecurityMechanism *, ImsStringOutStream *))(*(_QWORD *)v7 + 16))(v7, v22);
    v23 = (ImsResult *)ImsResult::operator<<<char [19]>(v21, "has the wrong type");
    ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 72), v23);
    ImsResult::ImsResult((ImsResult *)a3, v23);
    goto LABEL_12;
  }
  v9 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 32))(v8);
  *((_QWORD *)this + 38) = v9;
  v10 = *((_QWORD *)this + 36);
  *(_DWORD *)(v10 + 12) = SipParameterMap::uintParameter(v9 + 32, (void **)"spi-s", 0);
  v11 = *((_QWORD *)this + 37);
  *(_DWORD *)(v11 + 12) = SipParameterMap::uintParameter(*((_QWORD *)this + 38) + 32, (void **)"spi-c", 0);
  v12 = SipParameterMap::uintParameter(*((_QWORD *)this + 38) + 32, (void **)"port-s", 0);
  v13 = SipParameterMap::uintParameter(*((_QWORD *)this + 38) + 32, (void **)"port-c", 0);
  if (*((_QWORD *)this + 33))
  {
    v14 = v13;
    v15 = (SipHop *)*((_QWORD *)this + 35);
    if (v15)
    {
      SipHop::setHostPort(v15, v12);
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 33) + 64))(*((_QWORD *)this + 33), v14);
      SipUdpTransport::setRemoteOutboundAddress(*((_QWORD **)this + 27), (uint64_t *)this + 33, (uint64_t)&v25);
      ImsResult::~ImsResult((ImsResult *)&v25);
      SipTcpTransport::setRemoteOutboundAddress(*((_QWORD *)this + 31), (uint64_t *)this + 33, (uint64_t)v24);
      ImsResult::~ImsResult((ImsResult *)v24);
    }
  }
  v16 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"using security mechanism ", 25);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 38) + 16))(*((_QWORD *)this + 38), v16);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v16 + 17) = 0;
  v17 = *((_QWORD *)this + 40);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (SipSecurityVerifyHeader *)operator new();
  SipSecurityVerifyHeader::SipSecurityVerifyHeader(v18, a2);
  *((_QWORD *)this + 40) = v18;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
}

void sub_1BEE37FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  MEMORY[0x1C3B87100](v10, 0x10A1C4082A5C483);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [57]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE380D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [20]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE38174(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::addTransportSpecificHeaders(SipIPSecTransportGroup *this, SipMessage *a2)
{
  SipMessage *v4;
  SipMessage *v5;
  uint64_t v6;
  SipHeader *v7;
  void *__p[2];
  char v9;

  SipTransportGroup::addAccessNetworkInfoHeader(this, a2);
  SipTransportGroup::addRoutableLocalAddressHeader(this, a2);
  if (a2)
  {
    if (v4)
    {
      v5 = v4;
      SipMessage::removeHeadersWithName(v4, "Security-Verify");
      v6 = *((_QWORD *)this + 40);
      if (v6)
      {
        v7 = (SipHeader *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
        SipMessage::addHeader(v5, v7, 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "sec-agree");
        SipMessage::addRequiredOption(v5, __p);
        if (v9 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "sec-agree");
        SipMessage::addProxyRequiredOption(v5, __p);
        if (v9 < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_1BEE38280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipIPSecTransportGroup::updateKeys(SipIPSecTransportGroup *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  ImsResult *v18;
  ImsResult *v19;
  ImsResult *v20;
  ImsResult *v21;
  ImsResult *v22;
  ImsResult *v23;
  ImsResult *v24;
  ims::result *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  ims::result *v32;
  SipIPSecTransportGroup *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  _QWORD v40[2];
  void (**v41)(ImsResult *__hidden);
  uint64_t *v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD v47[2];
  _OWORD v48[5];

  if (*((_QWORD *)this + 36) && *((_QWORD *)this + 37))
  {
    if (SipIPSecTransportGroup::securityDelegate(*((SipIPSecTransportGroup **)this + 24), *((std::__shared_weak_count **)this + 25)))
    {
      v6 = *((_QWORD *)this + 33);
      if (v6 && *((_QWORD *)this + 35))
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6))
          goto LABEL_26;
        (*(void (**)(_OWORD *__return_ptr))(**((_QWORD **)this + 35) + 48))(v48);
        v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v48[0] + 56))(*(_QWORD *)&v48[0]);
        v8 = (std::__shared_weak_count *)*((_QWORD *)&v48[0] + 1);
        if (*((_QWORD *)&v48[0] + 1))
        {
          v9 = (unint64_t *)(*((_QWORD *)&v48[0] + 1) + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if (v7)
        {
          v11 = *((_QWORD *)this + 36);
          if (v11 && *(_DWORD *)(v11 + 8) && *(_DWORD *)(v11 + 12))
          {
            v12 = *((_QWORD *)this + 37);
            if (v12 && *(_DWORD *)(v12 + 8) && *(_DWORD *)(v12 + 12))
            {
              if (*((_QWORD *)this + 38))
              {
                v13 = (char *)this + 72;
                v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
                (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v14);
                v15 = (_BYTE *)ImsOutStream::operator<<(v14, "updating SA pair for local client port <-> remote server port");
                (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                v15[17] = 0;
                memset(v48, 0, 72);
                v16 = *((_QWORD *)this + 36);
                (*(void (**)(void (***__return_ptr)(ImsResult *__hidden), SipIPSecTransportGroup *))(*(_QWORD *)this + 184))(&v41, this);
                v17 = *((_QWORD *)this + 35);
                if (v17)
                {
                  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v17 + 48))(v47);
                }
                else
                {
                  v47[0] = 0;
                  v47[1] = 0;
                }
                SipSecurityAssociationPair::update(v16, (uint64_t)&v41, (uint64_t)v47, (uint64_t)v48);
                std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v47);
                std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v41);
                if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v48[0] + 1) + 24))(*((_QWORD *)&v48[0] + 1), LODWORD(v48[1])))
                {
                  v44 = 0u;
                  v45 = 0u;
                  v46 = 0u;
                  v41 = &off_1E78B7238;
                  v42 = &_bambiDomain;
                  v43 = 0x40000000;
                  v25 = (ims::result *)ImsResult::operator<<<char [32]>((uint64_t)&v41, "unable to update client SA pair");
                  ims::result::resultWithCause(v25, (const ImsResult *)v48, a2);
                }
                else
                {
                  v26 = (*(uint64_t (**)(char *))(*(_QWORD *)v13 + 64))((char *)this + 72);
                  (*(void (**)(char *, uint64_t))(*(_QWORD *)v13 + 16))((char *)this + 72, v26);
                  v27 = (_BYTE *)ImsOutStream::operator<<(v26, "updating SA pair for local server port <-> remote client port");
                  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  v27[17] = 0;
                  v28 = *((_QWORD *)this + 37);
                  (*(void (**)(_QWORD *__return_ptr, SipIPSecTransportGroup *))(*(_QWORD *)this + 192))(v47, this);
                  v29 = *((_QWORD *)this + 34);
                  v40[0] = *((_QWORD *)this + 33);
                  v40[1] = v29;
                  if (v29)
                  {
                    v30 = (unint64_t *)(v29 + 8);
                    do
                      v31 = __ldxr(v30);
                    while (__stxr(v31 + 1, v30));
                  }
                  SipSecurityAssociationPair::update(v28, (uint64_t)v47, (uint64_t)v40, (uint64_t)&v41);
                  ImsResult::operator=((uint64_t)v48, (uint64_t)&v41);
                  ImsResult::~ImsResult((ImsResult *)&v41);
                  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v40);
                  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v47);
                  if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v48[0] + 1) + 24))(*((_QWORD *)&v48[0] + 1), LODWORD(v48[1])))
                  {
                    v33 = SipIPSecTransportGroup::securityDelegate(*((SipIPSecTransportGroup **)this + 24), *((std::__shared_weak_count **)this + 25));
                    (*(void (**)(SipIPSecTransportGroup *))(*(_QWORD *)v33 + 48))(v33);
                    v34 = (*(uint64_t (**)(char *))(*(_QWORD *)v13 + 64))((char *)this + 72);
                    (*(void (**)(char *, uint64_t))(*(_QWORD *)v13 + 16))((char *)this + 72, v34);
                    v35 = (_BYTE *)ImsOutStream::operator<<(v34, "initialized successfully");
                    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    v35[17] = 0;
                    v36 = (*(uint64_t (**)(char *))(*(_QWORD *)v13 + 64))((char *)this + 72);
                    (*(void (**)(char *, uint64_t))(*(_QWORD *)v13 + 16))((char *)this + 72, v36);
                    v37 = (_BYTE *)ImsOutStream::operator<<(v36, "client SA pair: ");
                    (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 36) + 16))(*((_QWORD *)this + 36), v37);
                    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    v37[17] = 0;
                    v38 = (*(uint64_t (**)(char *))(*(_QWORD *)v13 + 64))((char *)this + 72);
                    (*(void (**)(char *, uint64_t))(*(_QWORD *)v13 + 16))((char *)this + 72, v38);
                    v39 = (_BYTE *)ImsOutStream::operator<<(v38, "server SA pair: ");
                    (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 37) + 16))(*((_QWORD *)this + 37), v39);
                    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    v39[17] = 0;
                    *(_OWORD *)(a2 + 24) = 0u;
                    *(_OWORD *)(a2 + 40) = 0u;
                    *(_OWORD *)(a2 + 56) = 0u;
                    *(_QWORD *)a2 = &off_1E78B7238;
                    *(_QWORD *)(a2 + 8) = &_bambiDomain;
                    *(_DWORD *)(a2 + 16) = 0;
                    goto LABEL_23;
                  }
                  v44 = 0u;
                  v45 = 0u;
                  v46 = 0u;
                  v41 = &off_1E78B7238;
                  v42 = &_bambiDomain;
                  v43 = 0x40000000;
                  v32 = (ims::result *)ImsResult::operator<<<char [32]>((uint64_t)&v41, "unable to update server SA pair");
                  ims::result::resultWithCause(v32, (const ImsResult *)v48, a2);
                }
                ImsResult::~ImsResult((ImsResult *)&v41);
              }
              else
              {
                memset((char *)&v48[1] + 8, 0, 48);
                *(_QWORD *)&v48[0] = &off_1E78B7238;
                *((_QWORD *)&v48[0] + 1) = &_bambiDomain;
                LODWORD(v48[1]) = 1073741827;
                v24 = (ImsResult *)ImsResult::operator<<<char [22]>((uint64_t)v48, "No Security Mechanism");
                ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 72), v24);
                ImsResult::ImsResult((ImsResult *)a2, v24);
              }
            }
            else
            {
              memset((char *)&v48[1] + 8, 0, 48);
              *(_QWORD *)&v48[0] = &off_1E78B7238;
              *((_QWORD *)&v48[0] + 1) = &_bambiDomain;
              LODWORD(v48[1]) = 1073741827;
              v23 = (ImsResult *)ImsResult::operator<<<char [31]>((uint64_t)v48, "server SA pair not initialized");
              ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 72), v23);
              ImsResult::ImsResult((ImsResult *)a2, v23);
            }
          }
          else
          {
            memset((char *)&v48[1] + 8, 0, 48);
            *(_QWORD *)&v48[0] = &off_1E78B7238;
            *((_QWORD *)&v48[0] + 1) = &_bambiDomain;
            LODWORD(v48[1]) = 1073741827;
            v22 = (ImsResult *)ImsResult::operator<<<char [31]>((uint64_t)v48, "client SA pair not initialized");
            ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 72), v22);
            ImsResult::ImsResult((ImsResult *)a2, v22);
          }
        }
        else
        {
LABEL_26:
          memset((char *)&v48[1] + 8, 0, 48);
          *(_QWORD *)&v48[0] = &off_1E78B7238;
          *((_QWORD *)&v48[0] + 1) = &_bambiDomain;
          LODWORD(v48[1]) = 1073741827;
          v21 = (ImsResult *)ImsResult::operator<<<char [22]>((uint64_t)v48, "ports not initialized");
          ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 72), v21);
          ImsResult::ImsResult((ImsResult *)a2, v21);
        }
      }
      else
      {
        memset((char *)&v48[1] + 8, 0, 48);
        *(_QWORD *)&v48[0] = &off_1E78B7238;
        *((_QWORD *)&v48[0] + 1) = &_bambiDomain;
        LODWORD(v48[1]) = 1073741827;
        v19 = (ImsResult *)ImsResult::operator<<<char [40]>((uint64_t)v48, "client/server addresses not initialized");
        ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 72), v19);
        ImsResult::ImsResult((ImsResult *)a2, v19);
      }
    }
    else
    {
      memset((char *)&v48[1] + 8, 0, 48);
      *(_QWORD *)&v48[0] = &off_1E78B7238;
      *((_QWORD *)&v48[0] + 1) = &_bambiDomain;
      LODWORD(v48[1]) = 1073741827;
      v20 = (ImsResult *)ImsResult::operator<<<char [21]>((uint64_t)v48, "no security delegate");
      ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 72), v20);
      ImsResult::ImsResult((ImsResult *)a2, v20);
    }
  }
  else
  {
    memset((char *)&v48[1] + 8, 0, 48);
    *(_QWORD *)&v48[0] = &off_1E78B7238;
    *((_QWORD *)&v48[0] + 1) = &_bambiDomain;
    LODWORD(v48[1]) = 1073741826;
    v18 = (ImsResult *)ImsResult::operator<<<char [53]>((uint64_t)v48, "updateKeys called on an uninitalized transport group");
    ImsLogContainer::logResult((SipIPSecTransportGroup *)((char *)this + 72), v18);
    ImsResult::ImsResult((ImsResult *)a2, v18);
  }
LABEL_23:
  ImsResult::~ImsResult((ImsResult *)v48);
}

void sub_1BEE38A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult((ImsResult *)va1);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [53]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE38B5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [21]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE38C00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [40]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE38CA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [22]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE38D48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [31]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE38DEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [32]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE38E90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::updateKeysFromAuthResponse(SipIPSecTransportGroup *this@<X0>, const SipAuthResponse *lpsrc@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  void *v6;
  uint64_t v7;

  if (v5)
  {
    v6 = v5;
    (*(void (**)(void *))(*(_QWORD *)v5 + 32))(v5);
    (*(void (**)(void *))(*(_QWORD *)v6 + 32))(v6);
    v7 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"updating with keys from AKA response", 36);
  }
  else
  {
    v7 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"auth mechanism wasn't AKA; trying to update with NULL keys",
      58);
  }
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  SipIPSecTransportGroup::updateKeys(this, a3);
}

void SipIPSecTransportGroup::processMessageFromTransport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1) & 1) == 0)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 32))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"not initialized.  Rejecting incoming message from ", 50);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 40))(*a6, v15);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
  }
  if (!*(_QWORD *)(a1 + 264))
  {
    v26 = *(_QWORD *)(a1 + 72);
    v25 = a1 + 72;
    v27 = (*(uint64_t (**)(uint64_t))(v26 + 32))(v25);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"no remote client address specified.  Rejecting incoming message from ", 69);
    *(_BYTE *)(v27 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 40))(*a6, v27);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v27 + 17) = 0;
    return;
  }
  v16 = *(std::__shared_weak_count **)(a1 + 200);
  if (v16)
  {
    v17 = *(_QWORD *)(a1 + 192);
    p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    v69 = 0;
    v70 = std::__shared_weak_count::lock(v16);
    if (v70)
    {
      v69 = v17;
      std::__shared_weak_count::__release_weak(v16);
      if (v17)
      {
        v20 = *a6;
        v21 = *(std::__shared_weak_count **)(a1 + 272);
        v67 = *(_QWORD *)(a1 + 264);
        v68 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(p_shared_owners);
          while (__stxr(v23 + 1, p_shared_owners));
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v20 + 104))(v20, &v67, 1) & 1) != 0)
        {
          v24 = 0;
        }
        else if (*a8)
        {
          v34 = *a6;
          v35 = *(_QWORD *)(a1 + 280);
          if (v35)
          {
            (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v35 + 48))(&v65);
          }
          else
          {
            v65 = 0;
            v66 = 0;
          }
          v24 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v34 + 104))(v34, &v65, 1) ^ 1;
          v36 = v66;
          if (v66)
          {
            v37 = (unint64_t *)&v66->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
        }
        else
        {
          v24 = 1;
        }
        v39 = v68;
        if (!v68)
          goto LABEL_38;
        v40 = (unint64_t *)&v68->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
          if (v24)
            goto LABEL_39;
        }
        else
        {
LABEL_38:
          if (v24)
          {
LABEL_39:
            v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 32))(a1 + 72);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"rejecting incoming message from ", 32);
            *(_BYTE *)(v42 + 17) = 0;
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 40))(*a6, v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)".  Should be from ", 18);
            *(_BYTE *)(v42 + 17) = 0;
            v43 = *(_QWORD *)(a1 + 264);
            v44 = *(std::__shared_weak_count **)(a1 + 272);
            v67 = v43;
            v68 = v44;
            if (v44)
            {
              v45 = (unint64_t *)&v44->__shared_owners_;
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 40))(v43, v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)" or TCP connection from ", 24);
            *(_BYTE *)(v42 + 17) = 0;
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 280) + 48))(&v65);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 40))(v65, v42);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v42 + 17) = 0;
            v47 = v66;
            if (v66)
            {
              v48 = (unint64_t *)&v66->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v50 = v68;
            if (!v68)
              goto LABEL_18;
            v51 = (unint64_t *)&v68->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            goto LABEL_63;
          }
        }
        ++*(_DWORD *)(a1 + 488);
        v53 = v69;
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v63, (_QWORD *)(a1 + 176));
        v54 = (std::__shared_weak_count *)a8[1];
        v61 = *a8;
        v62 = v54;
        if (v54)
        {
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 128))(v53, a2, a3, a4, a5, a6, &v63, &v61);
        v57 = v62;
        if (v62)
        {
          v58 = (unint64_t *)&v62->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v50 = v64;
        if (!v64)
          goto LABEL_18;
        v60 = (unint64_t *)&v64->__shared_owners_;
        do
          v52 = __ldaxr(v60);
        while (__stlxr(v52 - 1, v60));
LABEL_63:
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
        goto LABEL_18;
      }
    }
    else
    {
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    v69 = 0;
    v70 = 0;
  }
  v29 = *(_QWORD *)(a1 + 72);
  v28 = a1 + 72;
  v30 = (*(uint64_t (**)(uint64_t))(v29 + 56))(v28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"no transport layer.  Rejecting incoming message from ", 53);
  *(_BYTE *)(v30 + 17) = 0;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 40))(*a6, v30);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v30 + 17) = 0;
LABEL_18:
  v31 = v70;
  if (v70)
  {
    v32 = (unint64_t *)&v70->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1BEE39580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t SipIPSecTransportGroup::processDataFromSocket(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = a1 + 72;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"received ", 9);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" bytes from ", 12);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 40))(*a4, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" on outgoing SA socket.  Ignoring.", 34);
  *(_BYTE *)(v6 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  return result;
}

uint64_t `non-virtual thunk to'SipIPSecTransportGroup::processDataFromSocket(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return SipIPSecTransportGroup::processDataFromSocket(a1 - 208, a2, a3, a4);
}

void SipIPSecTransportGroup::sendData(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X5>, ImsResult *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  ImsResult *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  char *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  ImsResult *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  const void *v50;
  uint64_t v51;
  ImsResult *v52;
  ImsResult *v53;
  ImsLogContainer *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  unint64_t *p_shared_weak_owners;
  unint64_t v65;
  char *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  ImsPrefs *v83;
  void **IgnoreNetworkUnreachableErrorsKey;
  void *v85;
  int v86;
  int v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  unint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void (**v104)(ImsResult *__hidden);
  uint64_t *v105;
  int v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  _OWORD v112[6];

  if (((*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1) & 1) == 0)
  {
    memset((char *)&v112[1] + 8, 0, 48);
    *(_QWORD *)&v112[0] = &off_1E78B7238;
    *((_QWORD *)&v112[0] + 1) = &_bambiDomain;
    LODWORD(v112[1]) = 1073741827;
    v16 = (ImsResult *)ImsResult::operator<<<char [38]>((uint64_t)v112, "sendData() called on uninitialized SA");
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 9), v16);
    ImsResult::ImsResult(a7, v16);
    goto LABEL_53;
  }
  v14 = *a5;
  v15 = a1[35];
  if (v15)
    (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)v15 + 48))(v112);
  else
    v112[0] = 0uLL;
  if (((*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v14 + 104))(v14, v112, 1) & 1) != 0)
  {
    v17 = 0;
  }
  else if (a6)
  {
    v18 = *a5;
    v19 = a1[34];
    v104 = (void (**)(ImsResult *__hidden))a1[33];
    v105 = (uint64_t *)v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v17 = (*(uint64_t (**)(uint64_t, void (***)(ImsResult *__hidden), uint64_t))(*(_QWORD *)v18
                                                                                                  + 104))(v18, &v104, 1) ^ 1;
    v22 = (std::__shared_weak_count *)v105;
    if (v105)
    {
      v23 = (unint64_t *)(v105 + 1);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  else
  {
    v17 = 1;
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v112[0] + 1);
  if (!*((_QWORD *)&v112[0] + 1))
    goto LABEL_22;
  v26 = (unint64_t *)(*((_QWORD *)&v112[0] + 1) + 8);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (v17)
      goto LABEL_23;
  }
  else
  {
LABEL_22:
    if (v17)
    {
LABEL_23:
      memset((char *)&v112[1] + 8, 0, 48);
      *(_QWORD *)&v112[0] = &off_1E78B7238;
      *((_QWORD *)&v112[0] + 1) = &_bambiDomain;
      LODWORD(v112[1]) = 1073741825;
      v28 = ImsResult::operator<<<char [49]>((uint64_t)v112, "remote address for sendData does not match (got ");
      v29 = ImsResult::operator<<<std::shared_ptr<IpAddress>>(v28, a5);
      v30 = ImsResult::operator<<<char [12]>(v29, ", expected ");
      v31 = a1[35];
      if (v31)
      {
        (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v31 + 48))(&v104);
      }
      else
      {
        v104 = 0;
        v105 = 0;
      }
      v38 = ImsResult::operator<<<std::shared_ptr<IpAddress>>(v30, &v104);
      v39 = ImsResult::operator<<<char [23]>(v38, " or TCP connection to ");
      v40 = (std::__shared_weak_count *)a1[34];
      v110 = a1[33];
      v111 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
      }
      v43 = (ImsResult *)ImsResult::operator<<<std::shared_ptr<IpAddress>>(v39, &v110);
      ImsLogContainer::logResult((ImsLogContainer *)(a1 + 9), v43);
      ImsResult::ImsResult(a7, v43);
      v44 = v111;
      if (v111)
      {
        v45 = (unint64_t *)&v111->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = (std::__shared_weak_count *)v105;
      if (!v105)
        goto LABEL_53;
      v48 = (unint64_t *)(v105 + 1);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      goto LABEL_48;
    }
  }
  v32 = *(unsigned __int8 *)(a4 + 23);
  v33 = *(_QWORD *)(a4 + 8);
  if ((v32 & 0x80u) == 0)
    v34 = *(unsigned __int8 *)(a4 + 23);
  else
    v34 = *(_QWORD *)(a4 + 8);
  if (v34 != 3)
    goto LABEL_52;
  if ((v32 & 0x80) == 0)
  {
    if (*(_BYTE *)(a4 + 23))
    {
      v35 = &SipTransport::kTransportUDP;
      v36 = (unsigned __int8 *)a4;
      v37 = *(unsigned __int8 *)(a4 + 23);
      while (*v36 == *v35)
      {
        ++v36;
        ++v35;
        if (!--v37)
          goto LABEL_55;
      }
      v66 = &SipTransport::kTransportTCP;
      v67 = (unsigned __int8 *)a4;
      while (*v67 == *v66)
      {
        ++v67;
        ++v66;
        if (!--v32)
          goto LABEL_71;
      }
      goto LABEL_52;
    }
LABEL_55:
    if (a6 && *a6)
    {
      memset((char *)&v112[1] + 8, 0, 48);
      *(_QWORD *)&v112[0] = &off_1E78B7238;
      *((_QWORD *)&v112[0] + 1) = &_bambiDomain;
      LODWORD(v112[1]) = 1073741825;
      v53 = (ImsResult *)ImsResult::operator<<<char [53]>((uint64_t)v112, "UDP transport specified, but TCP connection provided");
      ImsLogContainer::logResult((ImsLogContainer *)(a1 + 9), v53);
      ImsResult::ImsResult(a7, v53);
      goto LABEL_53;
    }
    v54 = (ImsLogContainer *)(a1 + 9);
    v55 = (*(uint64_t (**)(_QWORD *))(a1[9] + 64))(a1 + 9);
    (*(void (**)(_QWORD *, uint64_t))(a1[9] + 16))(a1 + 9, v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)"sending data with client outbound SPI ", 38);
    *(_BYTE *)(v55 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v55 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)" (", 2);
    *(_BYTE *)(v55 + 17) = 0;
    v56 = *(_QWORD *)(v55 + 8) + *(_QWORD *)(**(_QWORD **)(v55 + 8) - 24);
    *(_DWORD *)(v56 + 8) = *(_DWORD *)(v56 + 8) & 0xFFFFFFB5 | 8;
    *(_BYTE *)(v55 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v55 + 17) = 0;
    v57 = *(_QWORD **)(v55 + 8);
    *(_DWORD *)((char *)v57 + *(_QWORD *)(*v57 - 24) + 8) = *(_DWORD *)((_BYTE *)v57 + *(_QWORD *)(*v57 - 24) + 8) & 0xFFFFFFB5 | 2;
    *(_BYTE *)(v55 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)")", 1);
    *(_BYTE *)(v55 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v55 + 17) = 0;
    memset(v112, 0, 72);
    v58 = a1[29];
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1[35] + 48))(&v104);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, void (***)(ImsResult *__hidden)))(*(_QWORD *)v58 + 32))(v112, v58, a2, a3, &v104);
    v59 = (std::__shared_weak_count *)v105;
    if (v105)
    {
      v60 = (unint64_t *)(v105 + 1);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = (std::__shared_weak_count *)a1[25];
    if (v62)
    {
      v63 = a1[24];
      p_shared_weak_owners = (unint64_t *)&v62->__shared_weak_owners_;
      do
        v65 = __ldxr(p_shared_weak_owners);
      while (__stxr(v65 + 1, p_shared_weak_owners));
      v110 = 0;
      v111 = std::__shared_weak_count::lock(v62);
      if (v111)
        v110 = v63;
      else
        v63 = 0;
      std::__shared_weak_count::__release_weak(v62);
    }
    else
    {
      v63 = 0;
      v110 = 0;
      v111 = 0;
    }
    if (LODWORD(v112[1]) != 51 || *((uint64_t **)&v112[0] + 1) != &_posixDomain || !v63)
      goto LABEL_93;
    v83 = (ImsPrefs *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 184))(v63);
    IgnoreNetworkUnreachableErrorsKey = (void **)ImsPrefs::getIgnoreNetworkUnreachableErrorsKey(v83);
    v85 = ImsPrefs::prefWithKey(v83, IgnoreNetworkUnreachableErrorsKey);
    if (v85)
    {
      if (!(*(unsigned int (**)(void *))(*(_QWORD *)v85 + 40))(v85))
      {
LABEL_93:
        ImsLogContainer::logResult(v54, (ImsResult *)v112);
        ImsResult::ImsResult(a7, (const ImsResult *)v112);
        v47 = v111;
        if (v111)
        {
          v97 = (unint64_t *)&v111->__shared_owners_;
          do
            v49 = __ldaxr(v97);
          while (__stlxr(v49 - 1, v97));
LABEL_48:
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
LABEL_53:
        ImsResult::~ImsResult((ImsResult *)v112);
        return;
      }
    }
    else if (!*((_BYTE *)IgnoreNetworkUnreachableErrorsKey + 57))
    {
      goto LABEL_93;
    }
    v95 = (*(uint64_t (**)(ImsLogContainer *))(*(_QWORD *)v54 + 32))(v54);
    (*(void (**)(ImsLogContainer *, uint64_t))(*(_QWORD *)v54 + 16))(v54, v95);
    v96 = (_BYTE *)ImsOutStream::operator<<(v95, "Ignoring network unreachable error");
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v96 + 64))(v96, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v96[17] = 0;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    v104 = &off_1E78B7238;
    v105 = &_bambiDomain;
    v106 = 0;
    ImsResult::operator=((uint64_t)v112, (uint64_t)&v104);
    ImsResult::~ImsResult((ImsResult *)&v104);
    goto LABEL_93;
  }
  v50 = *(const void **)a4;
  if (!memcmp(*(const void **)a4, &SipTransport::kTransportUDP, *(_QWORD *)(a4 + 8)))
    goto LABEL_55;
  if (memcmp(v50, &SipTransport::kTransportTCP, v33))
  {
LABEL_52:
    memset((char *)&v112[1] + 8, 0, 48);
    *(_QWORD *)&v112[0] = &off_1E78B7238;
    *((_QWORD *)&v112[0] + 1) = &_bambiDomain;
    LODWORD(v112[1]) = 1073741825;
    v51 = ImsResult::operator<<<char [24]>((uint64_t)v112, "unknown transport type ");
    v52 = (ImsResult *)ImsResult::operator<<<std::string>(v51, a4);
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 9), v52);
    ImsResult::ImsResult(a7, v52);
    goto LABEL_53;
  }
LABEL_71:
  if (a6 && (v68 = *a6) != 0)
  {
    v69 = a6[1];
    *(_QWORD *)&v112[0] = *a6;
    *((_QWORD *)&v112[0] + 1) = v69;
    if (v69)
    {
      v70 = (unint64_t *)(v69 + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v68 + 272) + 136))(&v104);
    v72 = (*((uint64_t (**)(_QWORD))*v104 + 7))(v104);
    (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 184))(&v110, a1);
    v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 56))(v110);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v110);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v104);
    if (v72 == v73)
    {
      v74 = (*(uint64_t (**)(_QWORD *))(a1[9] + 64))(a1 + 9);
      (*(void (**)(_QWORD *, uint64_t))(a1[9] + 16))(a1 + 9, v74);
      v75 = ImsOutStream::operator<<(v74, "sending data with existing connection using client outbound SPI ");
      std::ostream::operator<<();
      *(_BYTE *)(v75 + 17) = 0;
      v76 = ImsOutStream::operator<<(v75, " (");
      v77 = *(_QWORD *)(v76 + 8) + *(_QWORD *)(**(_QWORD **)(v76 + 8) - 24);
      *(_DWORD *)(v77 + 8) = *(_DWORD *)(v77 + 8) & 0xFFFFFFB5 | 8;
      *(_BYTE *)(v76 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v76 + 17) = 0;
      v78 = *(_QWORD *)(v76 + 8) + *(_QWORD *)(**(_QWORD **)(v76 + 8) - 24);
      *(_DWORD *)(v78 + 8) = *(_DWORD *)(v78 + 8) & 0xFFFFFFB5 | 2;
      *(_BYTE *)(v76 + 17) = 0;
      v79 = (_BYTE *)ImsOutStream::operator<<(v76, ")");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)&v112[0] + 272) + 136))(&v104);
      v86 = (*((uint64_t (**)(_QWORD))*v104 + 7))(v104);
      (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 192))(&v110, a1);
      v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 56))(v110);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v110);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v104);
      v89 = a1 + 9;
      v88 = a1[9];
      if (v86 == v87)
      {
        v90 = (*(uint64_t (**)(_QWORD *))(v88 + 64))(a1 + 9);
        (*(void (**)(_QWORD *, uint64_t))(*v89 + 16))(a1 + 9, v90);
        v91 = ImsOutStream::operator<<(v90, "sending data with existing connection using server outbound SPI ");
        std::ostream::operator<<();
        *(_BYTE *)(v91 + 17) = 0;
        v92 = ImsOutStream::operator<<(v91, " (");
        v93 = *(_QWORD *)(v92 + 8) + *(_QWORD *)(**(_QWORD **)(v92 + 8) - 24);
        *(_DWORD *)(v93 + 8) = *(_DWORD *)(v93 + 8) & 0xFFFFFFB5 | 8;
        *(_BYTE *)(v92 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v92 + 17) = 0;
        v94 = *(_QWORD *)(v92 + 8) + *(_QWORD *)(**(_QWORD **)(v92 + 8) - 24);
        *(_DWORD *)(v94 + 8) = *(_DWORD *)(v94 + 8) & 0xFFFFFFB5 | 2;
        *(_BYTE *)(v92 + 17) = 0;
        v79 = (_BYTE *)ImsOutStream::operator<<(v92, ")");
      }
      else
      {
        v98 = (*(uint64_t (**)(_QWORD *))(v88 + 56))(a1 + 9);
        (*(void (**)(_QWORD *, uint64_t))(*v89 + 16))(a1 + 9, v98);
        v99 = ImsOutStream::operator<<(v98, "I don't know which SPI will be used for ");
        v79 = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 104))(*a6, v99);
      }
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    v79[17] = 0;
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v112);
  }
  else
  {
    v80 = (*(uint64_t (**)(_QWORD *))(a1[9] + 64))(a1 + 9);
    (*(void (**)(_QWORD *, uint64_t))(a1[9] + 16))(a1 + 9, v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v80 + 8), (uint64_t)"sending data with client outbound SPI ", 38);
    *(_BYTE *)(v80 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v80 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v80 + 8), (uint64_t)" (", 2);
    *(_BYTE *)(v80 + 17) = 0;
    v81 = *(_QWORD *)(v80 + 8) + *(_QWORD *)(**(_QWORD **)(v80 + 8) - 24);
    *(_DWORD *)(v81 + 8) = *(_DWORD *)(v81 + 8) & 0xFFFFFFB5 | 8;
    *(_BYTE *)(v80 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v80 + 17) = 0;
    v82 = *(_QWORD **)(v80 + 8);
    *(_DWORD *)((char *)v82 + *(_QWORD *)(*v82 - 24) + 8) = *(_DWORD *)((_BYTE *)v82 + *(_QWORD *)(*v82 - 24) + 8) & 0xFFFFFFB5 | 2;
    *(_BYTE *)(v80 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)")", 1);
    *(_BYTE *)(v80 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v80 + 64))(v80, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v80 + 17) = 0;
  }
  v100 = a1[31];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1[35] + 48))(&v104);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, void (***)(ImsResult *__hidden), _QWORD *))(*(_QWORD *)v100 + 32))(v112, v100, a2, a3, &v104, a6);
  ImsLogContainer::logResult((uint64_t)(a1 + 9), (uint64_t)v112, (uint64_t)a7);
  ImsResult::~ImsResult((ImsResult *)v112);
  v101 = (std::__shared_weak_count *)v105;
  if (v105)
  {
    v102 = (unint64_t *)(v105 + 1);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
}

void sub_1BEE3A354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [38]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE3A4C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [49]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE3A564(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<std::shared_ptr<IpAddress>>(uint64_t a1, _QWORD *a2)
{
  ImsStringOutStream *v4;

  v4 = *(ImsStringOutStream **)(a1 + 24);
  if (!v4)
  {
    v4 = (ImsStringOutStream *)operator new();
    ImsStringOutStream::ImsStringOutStream(v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  (*(void (**)(_QWORD, ImsStringOutStream *))(*(_QWORD *)*a2 + 40))(*a2, v4);
  return a1;
}

void sub_1BEE3A5FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [12]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE3A6A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [23]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE3A744(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [24]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE3A7E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<std::string>(uint64_t a1, uint64_t a2)
{
  ImsStringOutStream *v4;

  v4 = *(ImsStringOutStream **)(a1 + 24);
  if (!v4)
  {
    v4 = (ImsStringOutStream *)operator new();
    ImsStringOutStream::ImsStringOutStream(v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  (*(void (**)(ImsStringOutStream *, uint64_t))(*(_QWORD *)v4 + 32))(v4, a2);
  return a1;
}

void sub_1BEE3A880(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t SipIPSecTransportGroup::localServerAddress@<X0>(SipIPSecTransportGroup *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 27);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t SipIPSecTransportGroup::localClientAddress@<X0>(SipIPSecTransportGroup *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 29);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t SipIPSecTransportGroup::remoteServerUri(SipIPSecTransportGroup *this)
{
  return *((_QWORD *)this + 35);
}

void SipIPSecTransportGroup::updateExpiration(SipIPSecTransportGroup *this, unsigned int a2)
{
  time_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  tm *v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = time(0) + a2;
  if (*((_QWORD *)this + 41) < v4)
  {
    v6 = *((_QWORD *)this + 22);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (v5)
    {
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      *((_QWORD *)this + 41) = v4;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
    }
    else
    {
      *((_QWORD *)this + 41) = v4;
    }
    v11 = operator new(0x20uLL);
    *v11 = &off_1E78BAE88;
    v11[1] = this;
    v11[2] = v6;
    v11[3] = v5;
    v17 = v11;
    SipTimerContainer::startTimer((_QWORD *)this + 42, (uint64_t)"SALifetime", (uint64_t)v16, 1000 * a2, 0);
    v12 = v17;
    if (v17 == v16)
    {
      v13 = 4;
      v12 = v16;
    }
    else
    {
      if (!v17)
        goto LABEL_15;
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_15:
    v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"new expiration is ", 18);
    *(_BYTE *)(v14 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 41), v14, v15);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (v5)
    {
      std::__shared_weak_count::__release_weak(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEE3AA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  if (v13)
  {
    std::__shared_weak_count::__release_weak(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void SipIPSecTransportGroup::handleTimer(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void **p_lpsrc;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  void *lpsrc;
  std::__shared_weak_count *v21;
  void *v22;
  std::__shared_weak_count *v23;

  v2 = (_QWORD *)(a1 + 72);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
  (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"expiration timer fired.  Telling my owner.", 42);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  v22 = 0;
  v23 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, v2 + 13);
  if (lpsrc
  {
    v22 = v4;
    v23 = v21;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v22;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v6 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(_QWORD *)(a1 + 480);
  if (v9 && v22)
  {
    v18 = v22;
    v19 = v23;
    if (v23)
    {
      v10 = (unint64_t *)&v23->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 16))(v9, &v18);
    v12 = v19;
    if (v19)
    {
      v13 = (unint64_t *)&v19->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BEE3ACBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t SipIPSecTransportGroup::loggableName@<X0>(SipIPSecTransportGroup *this@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string::size_type v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  std::string __p;
  uint64_t v56;
  std::__shared_weak_count *v57;
  _OWORD v58[4];
  void *v59[2];
  __int128 v60;
  __int128 v61;
  _BYTE v62[144];
  uint64_t v63;

  v63 = 0;
  v61 = 0u;
  memset(v62, 0, sizeof(v62));
  *(_OWORD *)v59 = 0u;
  v60 = 0u;
  memset(v58, 0, sizeof(v58));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v58);
  (*(void (**)(std::string *__return_ptr, SipIPSecTransportGroup *))(*(_QWORD *)this + 192))(&__p, this);
  if (__p.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(uint64_t *__return_ptr, SipIPSecTransportGroup *))(*(_QWORD *)this + 192))(&v56, this);
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 56))(v56);
    v4 = v57;
    if (v57)
    {
      p_shared_owners = (unint64_t *)&v57->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v8 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  (*(void (**)(std::string *__return_ptr, SipIPSecTransportGroup *))(*(_QWORD *)this + 184))(&__p, this);
  if (__p.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(uint64_t *__return_ptr, SipIPSecTransportGroup *))(*(_QWORD *)this + 184))(&v56, this);
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 56))(v56);
    v10 = v57;
    if (v57)
    {
      v11 = (unint64_t *)&v57->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v13 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v14 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *((_QWORD *)this + 35);
  if (v16)
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v16 + 48))(&__p);
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 35) + 48))(&v56);
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 56))(v56);
      v17 = v57;
      if (v57)
      {
        v18 = (unint64_t *)&v57->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  v20 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v21 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *((_QWORD *)this + 33);
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  __p.__r_.__value_.__r.__words[0] = v23;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if (!v23)
  {
    if (!v24)
      goto LABEL_55;
    goto LABEL_51;
  }
  v27 = *((_QWORD *)this + 33);
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  v56 = v27;
  v57 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 56))(v27);
  if (v28)
  {
    v31 = (unint64_t *)&v28->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v24 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
LABEL_51:
    v33 = (unint64_t *)&v24->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_55:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"IPSecTransport [", 16);
  v35 = *((_QWORD *)this + 36);
  if (!v35)
    goto LABEL_67;
  v36 = *(unsigned __int8 *)(v35 + 79);
  if (*(char *)(v35 + 79) < 0)
  {
    if (!*(_QWORD *)(v35 + 64))
      goto LABEL_67;
  }
  else if (!*(_BYTE *)(v35 + 79))
  {
    goto LABEL_67;
  }
  v37 = v35 + 56;
  v39 = *(_QWORD *)(v35 + 56);
  v38 = *(_QWORD *)(v35 + 64);
  if ((v36 & 0x80u) == 0)
    v40 = v37;
  else
    v40 = v39;
  if ((v36 & 0x80u) == 0)
    v41 = v36;
  else
    v41 = v38;
  v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v40, v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" ", 1);
LABEL_67:
  v43 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" --> ", 5);
  v44 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", ", 2);
  v45 = *((_QWORD *)this + 37);
  if (!v45)
    goto LABEL_79;
  v46 = *(unsigned __int8 *)(v45 + 79);
  if (*(char *)(v45 + 79) < 0)
  {
    if (!*(_QWORD *)(v45 + 64))
      goto LABEL_79;
  }
  else if (!*(_BYTE *)(v45 + 79))
  {
    goto LABEL_79;
  }
  v47 = v45 + 56;
  v49 = *(_QWORD *)(v45 + 56);
  v48 = *(_QWORD *)(v45 + 64);
  if ((v46 & 0x80u) == 0)
    v50 = v47;
  else
    v50 = v49;
  if ((v46 & 0x80u) == 0)
    v51 = v46;
  else
    v51 = v48;
  v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v50, v51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" ", 1);
LABEL_79:
  v53 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" <-- ", 5);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"]", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v58 + 8, &__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v58[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v58 + *(_QWORD *)(*(_QWORD *)&v58[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v58[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v60) < 0)
    operator delete(v59[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v62);
}

void sub_1BEE3B21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void SipIPSecTransportGroup::printTransportInfo(SipIPSecTransportGroup *this, ImsOutStream *a2, int a3)
{
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::string::size_type v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::string *p_p;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::string v50;
  void *v51[2];
  __int128 v52;
  uint64_t v53;
  std::string __p;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 192))(v51);
  if (v51[0])
  {
    (*(void (**)(std::string *__return_ptr, SipIPSecTransportGroup *))(*(_QWORD *)this + 192))(&__p, this);
    (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 56))(__p.__r_.__value_.__r.__words[0]);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v7 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  v9 = (std::__shared_weak_count *)v51[1];
  if (v51[1])
  {
    v10 = (unint64_t *)((char *)v51[1] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  (*(void (**)(void **__return_ptr, SipIPSecTransportGroup *))(*(_QWORD *)this + 184))(v51, this);
  if (v51[0])
  {
    (*(void (**)(std::string *__return_ptr, SipIPSecTransportGroup *))(*(_QWORD *)this + 184))(&__p, this);
    (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 56))(__p.__r_.__value_.__r.__words[0]);
    v12 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v13 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v15 = (std::__shared_weak_count *)v51[1];
  if (v51[1])
  {
    v16 = (unint64_t *)((char *)v51[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *((_QWORD *)this + 35);
  if (v18)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v18 + 48))(v51);
    if (v51[0])
    {
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 35) + 48))(&__p);
      (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 56))(__p.__r_.__value_.__r.__words[0]);
      v19 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
  else
  {
    v51[0] = 0;
    v51[1] = 0;
  }
  v22 = (std::__shared_weak_count *)v51[1];
  if (v51[1])
  {
    v23 = (unint64_t *)((char *)v51[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (void *)*((_QWORD *)this + 33);
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  v51[0] = v25;
  v51[1] = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  if (!v25)
  {
    if (!v26)
      goto LABEL_55;
    goto LABEL_51;
  }
  v29 = *((_QWORD *)this + 33);
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  __p.__r_.__value_.__r.__words[0] = v29;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  (*(void (**)(std::string::size_type))(*(_QWORD *)v29 + 56))(v29);
  if (v30)
  {
    v33 = (unint64_t *)&v30->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v26 = (std::__shared_weak_count *)v51[1];
  if (v51[1])
  {
LABEL_51:
    v35 = (unint64_t *)&v26->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
LABEL_55:
  memset(&__p, 0, sizeof(__p));
  v37 = *((_QWORD *)this + 35);
  if (!v37)
    goto LABEL_72;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v37 + 48))(v51);
  v39 = v51[0];
  v38 = (std::__shared_weak_count *)v51[1];
  if (!v51[1])
    goto LABEL_60;
  v40 = (unint64_t *)((char *)v51[1] + 8);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_60:
    if (v39)
      goto LABEL_61;
LABEL_72:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      __p.__r_.__value_.__l.__size_ = 1;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 1;
      p_p = &__p;
    }
    LOWORD(p_p->__r_.__value_.__l.__data_) = 63;
    goto LABEL_76;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  if (!v39)
    goto LABEL_72;
LABEL_61:
  v53 = 0;
  *(_OWORD *)v51 = 0u;
  v52 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v51, a2);
  (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 35) + 48))(&v50);
  (*(void (**)(std::string::size_type, void **, _QWORD))(*(_QWORD *)v50.__r_.__value_.__l.__data_ + 120))(v50.__r_.__value_.__r.__words[0], v51, 0);
  v42 = (std::__shared_weak_count *)v50.__r_.__value_.__l.__size_;
  if (v50.__r_.__value_.__l.__size_)
  {
    v43 = (unint64_t *)(v50.__r_.__value_.__l.__size_ + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v52 + 1) + 8, &v50);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v50;
  v51[0] = &off_1E78D7A10;
  if ((_BYTE)v52 && v51[1])
    (*(void (**)(void *))(*(_QWORD *)v51[1] + 8))(v51[1]);
LABEL_76:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"IPSecTransport [", 16);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(std::string *__return_ptr, SipIPSecTransportGroup *))(*(_QWORD *)this + 192))(&v50, this);
  (*(void (**)(std::string::size_type, ImsOutStream *))(*(_QWORD *)v50.__r_.__value_.__l.__data_ + 40))(v50.__r_.__value_.__r.__words[0], a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" <--> ", 6);
  *((_BYTE *)a2 + 17) = 0;
  LoggableString::LoggableString((std::string *)v51, &__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)", ", 2);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" --> ", 5);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)", ", 2);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" <-- ", 5);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"]", 1);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SBYTE7(v52) < 0)
    operator delete(v51[0]);
  v46 = (std::__shared_weak_count *)v50.__r_.__value_.__l.__size_;
  if (!v50.__r_.__value_.__l.__size_)
    goto LABEL_82;
  v47 = (unint64_t *)(v50.__r_.__value_.__l.__size_ + 8);
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    if (!a3)
      goto LABEL_87;
  }
  else
  {
LABEL_82:
    if (!a3)
      goto LABEL_87;
  }
  v49 = *((_QWORD *)this + 31);
  if (v49 && *(_QWORD *)(v49 + 224))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Open connections:", 19);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    SipTcpTransport::printConnectionMap(*((ImsOutStream **)this + 31), a2);
  }
LABEL_87:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEE3B94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, uint64_t a19, uint64_t a20,void *__p,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 && a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (SHIBYTE(a23) < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipTransportGroup::isReliable(SipTransportGroup *this)
{
  return 0;
}

_QWORD *SipTransportGroup::transportGroup@<X0>(SipTransportGroup *this@<X0>, _QWORD *a2@<X8>)
{
  return std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(a2, (_QWORD *)this + 22);
}

uint64_t SipTransportGroup::isIPSec(SipTransportGroup *this)
{
  return 0;
}

uint64_t SipTransportGroup::acceptsTransactionsFromConnection(SipTransportGroup *this)
{
  return 1;
}

uint64_t SipIPSecTransportGroup::udpTransport@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 224);
  *a2 = *(_QWORD *)(this + 216);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t SipIPSecTransportGroup::tcpTransport@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 256);
  *a2 = *(_QWORD *)(this + 248);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t SipIPSecTransportGroup::localPort(SipIPSecTransportGroup *this)
{
  return *((unsigned __int16 *)this + 246);
}

uint64_t SipIPSecTransportGroup::isSecure(SipIPSecTransportGroup *this)
{
  return 1;
}

uint64_t SipIPSecTransportGroup::isIPSec(SipIPSecTransportGroup *this)
{
  return 1;
}

void ImsUdpSocketInterfaceDelegate::~ImsUdpSocketInterfaceDelegate(ImsUdpSocketInterfaceDelegate *this)
{
  JUMPOUT(0x1C3B87100);
}

void SipTransportInterface::~SipTransportInterface(SipTransportInterface *this, uint64_t a2)
{
  *((_QWORD *)this + 9) = off_1E78CFE68;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  SipLockable::~SipLockable(this, (uint64_t *)(a2 + 8));
}

void std::allocate_shared[abi:ne180100]<SipUdpTransport,std::allocator<SipUdpTransport>,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x70uLL);
  std::__shared_ptr_emplace<SipUdpTransport>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,std::allocator<SipUdpTransport>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a3, v6 + 8, (uint64_t)(v6 + 3));
}

void sub_1BEE3BB8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SipUdpTransport>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,std::allocator<SipUdpTransport>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78BAF08;
  std::construct_at[abi:ne180100]<SipUdpTransport,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,SipUdpTransport*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1BEE3BBD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipUdpTransport>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BAF08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipUdpTransport>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BAF08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipUdpTransport>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<SipUdpTransport,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,SipUdpTransport*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v8[0] = *a2;
  v8[1] = (uint64_t)v4;
  *a2 = 0;
  a2[1] = 0;
  SipUdpTransport::SipUdpTransport(a1, v8, *a3);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1BEE3BCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<SipTcpTransport,std::allocator<SipTcpTransport>,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x150uLL);
  std::__shared_ptr_emplace<SipTcpTransport>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,std::allocator<SipTcpTransport>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a3, v6 + 22, (uint64_t)(v6 + 3));
}

void sub_1BEE3BD14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SipTcpTransport>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,std::allocator<SipTcpTransport>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78BAF58;
  std::construct_at[abi:ne180100]<SipTcpTransport,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,SipTcpTransport*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1BEE3BD5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipTcpTransport>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BAF58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipTcpTransport>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BAF58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipTcpTransport>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<SipTcpTransport,std::shared_ptr<SipTransportGroup>,SipMessageEncodingMap *,SipTcpTransport*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v8[0] = *a2;
  v8[1] = (uint64_t)v4;
  *a2 = 0;
  a2[1] = 0;
  SipTcpTransport::SipTcpTransport(a1, v8, *a3, 0);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1BEE3BE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78BAE88;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78BAE88;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78BAE88;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78BAE88;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 320))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEE3C030(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0,std::allocator<SipIPSecTransportGroup::updateExpiration(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void sub_1BEE3C208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BEE3C788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1BEE3C96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

void sub_1BEE3CCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 48);
  _Unwind_Resume(a1);
}

void sub_1BEE3CE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

void sub_1BEE3D1B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 56);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BEE3D398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BEE3D87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1BEE3DAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BEE3DF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1BEE3E0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

void sub_1BEE3E438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 48);
  _Unwind_Resume(a1);
}

void sub_1BEE3E5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

void sub_1BEE3E90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 48);
  _Unwind_Resume(a1);
}

void sub_1BEE3EADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_AVCRTTSessionDelegate_mm()
{
  objc_autoreleasePoolPop((void *)MEMORY[0x1C3B876AC]());
}

__n128 MediaSessionBaseCollection::add@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __n128 result;
  void *__p[2];
  char v28;
  void *v29[2];
  char v30;

  std::string::basic_string[abi:ne180100]<0>(v29, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v29, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v9 = v8;
  v10 = *(_QWORD **)(v8 + 8);
  v11 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"add", 3);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" session=", 9);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v28 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  v13 = (uint64_t **)(a1 + 16);
  v12 = *(uint64_t **)(a1 + 16);
  if (v12)
  {
    while (1)
    {
      while (1)
      {
        v14 = (uint64_t **)v12;
        v15 = v12[4];
        if (v15 <= (unint64_t)a2)
          break;
        v12 = *v14;
        v13 = v14;
        if (!*v14)
          goto LABEL_14;
      }
      if (v15 >= (unint64_t)a2)
        break;
      v12 = v14[1];
      if (!v12)
      {
        v13 = v14 + 1;
        goto LABEL_14;
      }
    }
  }
  else
  {
    v14 = (uint64_t **)(a1 + 16);
LABEL_14:
    v16 = (uint64_t *)v14;
    v14 = (uint64_t **)operator new(0x38uLL);
    v14[5] = 0;
    v14[6] = 0;
    v14[4] = a2;
    *v14 = 0;
    v14[1] = 0;
    v14[2] = v16;
    *v13 = (uint64_t *)v14;
    v17 = **(_QWORD **)(a1 + 8);
    v18 = (uint64_t *)v14;
    if (v17)
    {
      *(_QWORD *)(a1 + 8) = v17;
      v18 = *v13;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), v18);
    ++*(_QWORD *)(a1 + 24);
  }
  v20 = (uint64_t *)a3->n128_u64[0];
  v19 = a3->n128_i64[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = (std::__shared_weak_count *)v14[6];
  v14[5] = v20;
  v14[6] = (uint64_t *)v19;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  result = *a3;
  *a4 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_1BEE3EE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MediaSessionBaseCollection::get(MediaSessionBaseCollection *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  unint64_t v18;

  v18 = a2;
  std::string::basic_string[abi:ne180100]<0>(v16, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v16, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v6 = v5;
  v7 = *(_QWORD **)(v5 + 8);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"get", 3);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  v12 = 0;
  v13 = 0;
  ims::getValueFromMap<unsigned long long,std::shared_ptr<MediaSessionInterface>>(a3, (uint64_t)this + 8, &v18, (uint64_t)&v12);
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEE3F094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void ims::getValueFromMap<unsigned long long,std::shared_ptr<MediaSessionInterface>>(_QWORD *a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  v8 = *(_QWORD **)(a2 + 8);
  v6 = (_QWORD *)(a2 + 8);
  v7 = v8;
  if (!v8)
    goto LABEL_12;
  v9 = *a3;
  v10 = v6;
  do
  {
    v11 = v7[4];
    v12 = v11 >= v9;
    if (v11 >= v9)
      v13 = v7;
    else
      v13 = v7 + 1;
    if (v12)
      v10 = v7;
    v7 = (_QWORD *)*v13;
  }
  while (*v13);
  if (v10 != v6 && v9 >= v10[4])
  {
    v16 = v10[5];
    v15 = v10[6];
    *a1 = v16;
    a1[1] = v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(v21, "rtp.util");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"getValueFromMap", 15);
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" Object not found [key=", 23);
    *(_BYTE *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (v22 < 0)
      operator delete(v21[0]);
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
}

void sub_1BEE3F25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MediaSessionBaseCollection::remove(MediaSessionBaseCollection *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  uint64_t **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  unint64_t v29;

  v29 = a2;
  std::string::basic_string[abi:ne180100]<0>(v27, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v6 = v5;
  v7 = *(_QWORD **)(v5 + 8);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"remove", 6);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  *a3 = 0;
  a3[1] = 0;
  v9 = (uint64_t **)((char *)this + 8);
  v23 = 0;
  v24 = 0;
  ims::getValueFromMap<unsigned long long,std::shared_ptr<MediaSessionInterface>>(a3, (uint64_t)this + 8, &v29, (uint64_t)&v23);
  v10 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (*a3)
  {
    v13 = (uint64_t *)*((_QWORD *)this + 2);
    if (v13)
    {
      v14 = (uint64_t *)((char *)this + 16);
      v15 = (_QWORD *)*((_QWORD *)this + 2);
      do
      {
        v16 = v15[4];
        v17 = v16 >= v29;
        if (v16 >= v29)
          v18 = v15;
        else
          v18 = v15 + 1;
        if (v17)
          v14 = v15;
        v15 = (_QWORD *)*v18;
      }
      while (*v18);
      if (v14 != (uint64_t *)((char *)this + 16) && v14[4] <= v29)
      {
        v19 = (uint64_t *)v14[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          v21 = v14;
          do
          {
            v20 = (uint64_t *)v21[2];
            v22 = *v20 == (_QWORD)v21;
            v21 = v20;
          }
          while (!v22);
        }
        if (*v9 == v14)
          *v9 = v20;
        --*((_QWORD *)this + 3);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v13, v14);
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 5));
        operator delete(v14);
      }
    }
  }
}

void sub_1BEE3F510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

BOOL MediaSessionBaseCollection::contains(MediaSessionBaseCollection *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;

  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"contains", 8);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  v10 = (_QWORD *)*((_QWORD *)this + 2);
  v9 = (char *)this + 16;
  v8 = v10;
  if (!v10)
    goto LABEL_17;
  v11 = v9;
  do
  {
    v12 = v8[4];
    v13 = v12 >= a2;
    if (v12 >= a2)
      v14 = v8;
    else
      v14 = v8 + 1;
    if (v13)
      v11 = (char *)v8;
    v8 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 == v9 || *((_QWORD *)v11 + 4) > a2)
LABEL_17:
    v11 = v9;
  return v11 != v9;
}

void sub_1BEE3F708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionBaseCollection::contains(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;

  std::string::basic_string[abi:ne180100]<0>(v22, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v22, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"contains", 8);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [session=", 10);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  v8 = (_QWORD *)a1[1];
  v9 = a1 + 2;
  if (v8 == a1 + 2)
    return 0;
  while (1)
  {
    v11 = v8[5];
    v10 = (std::__shared_weak_count *)v8[6];
    if (v10)
      break;
    if (v11 == *a2)
      return 1;
LABEL_17:
    v16 = (_QWORD *)v8[1];
    if (v16)
    {
      do
      {
        v17 = v16;
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        v17 = (_QWORD *)v8[2];
        v18 = *v17 == (_QWORD)v8;
        v8 = v17;
      }
      while (!v18);
    }
    v8 = v17;
    if (v17 == v9)
      return 0;
  }
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = *a2;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v11 != v14)
    goto LABEL_17;
  return 1;
}

void sub_1BEE3F960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionBaseCollection::size(MediaSessionBaseCollection *this)
{
  return *((_QWORD *)this + 3);
}

BOOL MediaSessionBaseCollection::empty(MediaSessionBaseCollection *this)
{
  return *((_QWORD *)this + 3) == 0;
}

void MediaSessionBaseCollection::clear(MediaSessionBaseCollection *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"clear", 5);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  v7 = (_QWORD *)*((_QWORD *)this + 2);
  v6 = (_QWORD *)((char *)this + 16);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy((uint64_t)(v6 - 1), v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

void sub_1BEE3FAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MediaSessionBaseCollection::sessionIdList(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void **v21;
  unsigned __int8 *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  void *__p[2];
  char v31;
  void *v32[2];
  std::__shared_weak_count *v33;

  std::string::basic_string[abi:ne180100]<0>(v32, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"sessionIdList", 13);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [stackId=", 10);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v7 + 32))(v7, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v31 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
  *a3 = (uint64_t)a3;
  a3[1] = (uint64_t)a3;
  a3[2] = 0;
  v10 = (_QWORD *)a1[1];
  if (v10 != a1 + 2)
  {
    do
    {
      v12 = (void *)v10[4];
      v11 = v10[5];
      v32[0] = v12;
      v32[1] = (void *)v11;
      v13 = (std::__shared_weak_count *)v10[6];
      v33 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = *(unsigned __int8 *)(v11 + 79);
      v17 = *(_QWORD *)(v11 + 64);
      if ((v16 & 0x80u) == 0)
        v18 = *(unsigned __int8 *)(v11 + 79);
      else
        v18 = *(_QWORD *)(v11 + 64);
      v19 = a2[23];
      v20 = (char)v19;
      if ((v19 & 0x80u) != 0)
        v19 = *((_QWORD *)a2 + 1);
      if (v18 != v19)
        goto LABEL_26;
      v21 = (const void **)(v11 + 56);
      if (v20 >= 0)
        v22 = a2;
      else
        v22 = *(unsigned __int8 **)a2;
      if ((v16 & 0x80) != 0)
      {
        if (memcmp(*v21, v22, v17))
          goto LABEL_26;
      }
      else if ((_DWORD)v16)
      {
        while (*(unsigned __int8 *)v21 == *v22)
        {
          v21 = (const void **)((char *)v21 + 1);
          ++v22;
          if (!--v16)
            goto LABEL_25;
        }
        goto LABEL_26;
      }
LABEL_25:
      v23 = operator new(0x18uLL);
      v23[1] = a3;
      v23[2] = v12;
      v24 = *a3;
      *v23 = *a3;
      *(_QWORD *)(v24 + 8) = v23;
      *a3 = (uint64_t)v23;
      ++a3[2];
LABEL_26:
      if (v13)
      {
        v25 = (unint64_t *)&v13->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v27 = (_QWORD *)v10[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v10[2];
          v29 = *v28 == (_QWORD)v10;
          v10 = v28;
        }
        while (!v29);
      }
      v10 = v28;
    }
    while (v28 != a1 + 2);
  }
}

void sub_1BEE3FDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MediaSessionBaseCollection::~MediaSessionBaseCollection(MediaSessionBaseCollection *this)
{
  MediaSessionBaseCollection::~MediaSessionBaseCollection(this);
  JUMPOUT(0x1C3B87100);
}

{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *(_QWORD *)this = &off_1E78BB058;
  std::string::basic_string[abi:ne180100]<0>(v5, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"~MediaSessionBaseCollection", 27);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  (*(void (**)(MediaSessionBaseCollection *))(*(_QWORD *)this + 72))(this);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  MediaSessionCollection::~MediaSessionCollection(this);
}

_QWORD *std::__list_imp<unsigned long long>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void MediaSessionCollection::~MediaSessionCollection(MediaSessionCollection *this)
{
  uint64_t v1;
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  *(_QWORD *)this = off_1E78BB0E8;
  std::string::basic_string[abi:ne180100]<0>(v4, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v1 = ImsLogger::debug(ims::_logger, (uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v1 + 8), (uint64_t)"~MediaSessionCollection", 23);
  *(_BYTE *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v1 + 17) = 0;
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy(a1, a2[1]);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

_QWORD *XcapNodeSelector::Step::encodePrefix(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t **v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 v12;
  char *v13;

  if (a2)
  {
    v12 = *a2;
    v13 = (char *)&v12;
    v3 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v12, (uint64_t)&std::piecewise_construct, &v13);
    v6 = v3[8];
    v4 = v3 + 8;
    v5 = (uint64_t)v6;
    v7 = *((char *)v4 + 23);
    if (v7 >= 0)
      v8 = (uint64_t)v4;
    else
      v8 = v5;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)v4 + 23);
    else
      v9 = (uint64_t)v4[1];
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)":", 1);
  }
  return a1;
}

void XcapNodeSelector::XcapNodeSelector(XcapNodeSelector *this)
{
  _QWORD *v2;
  std::string __p;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = 0;
  v2 = (_QWORD *)operator new();
  *v2 = &off_1E78BB150;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  *(_QWORD *)this = v2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "~~");
  XcapNodeSelector::appendNode((uint64_t **)this, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "simservs");
  XcapNodeSelector::appendNode((uint64_t **)this, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEE4023C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  _QWORD **v16;

  if (a15 < 0)
    operator delete(__p);
  std::__tree<unsigned int>::destroy(v15, *v16);
  _Unwind_Resume(a1);
}

void XcapNodeSelector::appendNode(uint64_t **a1, const std::string *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unsigned __int8 v22;

  v6 = operator new();
  *(_WORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = off_1E78BB180;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  std::string::operator=((std::string *)(v6 + 24), a2);
  *(_QWORD *)(v6 + 16) = a3;
  if (a3)
  {
    v22 = *a3;
    std::__tree<XcapNs::nsType>::__emplace_unique_key_args<XcapNs::nsType,XcapNs::nsType const&>(a1 + 2, &v22, &v22);
  }
  v7 = *a1;
  v8 = (uint64_t *)(*a1)[2];
  v9 = (*a1)[3];
  if ((unint64_t)v8 >= v9)
  {
    v11 = v7[1];
    v12 = ((uint64_t)v8 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<XcapNodeSelector::Step *>::__throw_length_error[abi:ne180100]();
    v13 = v9 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(*a1 + 3), v15);
    else
      v16 = 0;
    v17 = (uint64_t *)&v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = v6;
    v10 = v17 + 1;
    v20 = (char *)v7[1];
    v19 = (char *)v7[2];
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v17 = v21;
      }
      while (v19 != v20);
      v19 = (char *)v7[1];
    }
    v7[1] = (uint64_t)v17;
    v7[2] = (uint64_t)v10;
    v7[3] = (uint64_t)v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v8 = v6;
    v10 = v8 + 1;
  }
  v7[2] = (uint64_t)v10;
}

void XcapNodeSelector::XcapNodeSelector(XcapNodeSelector *this, const XcapNodeSelector *a2)
{
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  XcapNodeSelector::operator=((uint64_t)this, a2);
}

void sub_1BEE403F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;
  _QWORD **v3;

  v3 = v2;
  std::__tree<unsigned int>::destroy(v1, *v3);
  _Unwind_Resume(a1);
}

uint64_t XcapNodeSelector::operator=(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (*a2)
    *(_QWORD *)a1 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v4 = a2[1];
  if (v4)
    *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  if ((_QWORD *)a1 != a2)
    std::__tree<XcapNs::nsType>::__assign_multi<std::__tree_const_iterator<XcapNs::nsType,std::__tree_node<XcapNs::nsType,void *> *,long>>((uint64_t **)(a1 + 16), (_QWORD *)a2[2], a2 + 3);
  return a1;
}

void XcapNodeSelector::~XcapNodeSelector(XcapNodeSelector *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__tree<unsigned int>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
}

uint64_t XcapNodeSelector::fetchPath@<X0>(XcapNodeSelector *this@<X0>, _QWORD *a2@<X8>)
{
  void *p_p;
  uint64_t v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  void *__p;
  uint64_t v11;
  unsigned __int8 v12;
  _OWORD v13[4];
  void *v14[2];
  __int128 v15;
  __int128 v16;
  _BYTE v17[144];
  uint64_t v18;

  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)v14 = 0u;
  memset(v13, 0, sizeof(v13));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  if (*(_QWORD *)this)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)this + 24))(&__p);
    if ((v12 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v12 & 0x80u) == 0)
      v5 = v12;
    else
      v5 = v11;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, v5);
    if ((char)v12 < 0)
      operator delete(__p);
    if (*((_QWORD *)this + 1))
    {
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"/", 1);
      (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 1) + 24))(&__p);
      v7 = (v12 & 0x80u) == 0 ? &__p : (void **)__p;
      v8 = (v12 & 0x80u) == 0 ? v12 : v11;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
      if ((char)v12 < 0)
        operator delete(__p);
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v13 + 8, a2);
  *(_QWORD *)&v13[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(*(_QWORD *)&v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v13[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v15) < 0)
    operator delete(v14[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v17);
}

void sub_1BEE4066C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t XcapNodeSelector::fetchQuery@<X0>(XcapNodeSelector *this@<X0>, _QWORD *a2@<X8>)
{
  XcapNodeSelector *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  XcapNodeSelector *v23;
  XcapNodeSelector *v24;
  BOOL v25;
  _OWORD v28[4];
  void *__p[2];
  __int128 v30;
  __int128 v31;
  _OWORD v32[9];
  uint64_t v33;
  unsigned __int8 v34;
  char *v35[2];

  v33 = 0;
  v31 = 0u;
  memset(v32, 0, sizeof(v32));
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  memset(v28, 0, sizeof(v28));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
  if (*((_QWORD *)this + 4))
  {
    v3 = (XcapNodeSelector *)*((_QWORD *)this + 2);
    if (v3 != (XcapNodeSelector *)((char *)this + 24))
    {
      do
      {
        v4 = *((_BYTE *)v3 + 25);
        v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"xmlns(", 6);
        v34 = v4;
        v35[0] = (char *)&v34;
        v6 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v34, (uint64_t)&std::piecewise_construct, v35);
        v9 = v6[8];
        v7 = v6 + 8;
        v8 = (uint64_t)v9;
        v10 = *((char *)v7 + 23);
        if (v10 >= 0)
          v11 = (uint64_t)v7;
        else
          v11 = v8;
        if (v10 >= 0)
          v12 = *((unsigned __int8 *)v7 + 23);
        else
          v12 = (uint64_t)v7[1];
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v11, v12);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"=", 1);
        v34 = v4;
        v35[0] = (char *)&v34;
        v15 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v34, (uint64_t)&std::piecewise_construct, v35);
        v18 = v15[5];
        v16 = v15 + 5;
        v17 = (uint64_t)v18;
        v19 = *((char *)v16 + 23);
        if (v19 >= 0)
          v20 = (uint64_t)v16;
        else
          v20 = v17;
        if (v19 >= 0)
          v21 = *((unsigned __int8 *)v16 + 23);
        else
          v21 = (uint64_t)v16[1];
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
        v23 = (XcapNodeSelector *)*((_QWORD *)v3 + 1);
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = *(XcapNodeSelector **)v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (XcapNodeSelector *)*((_QWORD *)v3 + 2);
            v25 = *(_QWORD *)v24 == (_QWORD)v3;
            v3 = v24;
          }
          while (!v25);
        }
        v3 = v24;
      }
      while (v24 != (XcapNodeSelector *)((char *)this + 24));
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v28 + 8, a2);
  *(_QWORD *)&v28[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v28 + *(_QWORD *)(*(_QWORD *)&v28[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v28[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v30) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v32);
}

void sub_1BEE408C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t XcapNodeSelector::asString@<X0>(XcapNodeSelector *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *p_p;
  uint64_t v8;
  void *__p;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[4];
  void *v17[2];
  __int128 v18;
  __int128 v19;
  _OWORD v20[9];
  uint64_t v21;

  v21 = 0;
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  *(_OWORD *)v17 = 0u;
  v18 = 0u;
  memset(v16, 0, sizeof(v16));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  XcapNodeSelector::fetchPath(this, &v13);
  __p = 0;
  v11 = 0;
  v12 = 0;
  XcapNodeSelector::fetchQuery(this, &__p);
  if (v15 >= 0)
    v4 = HIBYTE(v15);
  else
    v4 = v14;
  if (v4)
  {
    if (v15 >= 0)
      v5 = &v13;
    else
      v5 = v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v5, v4);
  }
  v6 = HIBYTE(v12);
  if (v12 < 0)
    v6 = v11;
  if (v6)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"?", 1);
    if (v12 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v12 >= 0)
      v8 = HIBYTE(v12);
    else
      v8 = v11;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)p_p, v8);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16 + 8, a2);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  if (SHIBYTE(v15) < 0)
    operator delete(v13);
  *(_QWORD *)&v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(*(_QWORD *)&v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v16[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v18) < 0)
    operator delete(v17[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v20);
}

void sub_1BEE40A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void XcapNodeSelector::appendNodeByAttr(uint64_t **a1, const std::string *a2, const std::string *a3, const std::string *a4, unsigned __int8 *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unsigned __int8 v28;

  v10 = operator new();
  *(_WORD *)(v10 + 64) = 0;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_QWORD *)v10 = &off_1E78BB1E0;
  *(_QWORD *)(v10 + 56) = &unk_1E78BB228;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 8) = 0u;
  std::string::operator=((std::string *)(v10 + 80), a2);
  std::string::operator=((std::string *)(v10 + 8), a3);
  std::string::operator=((std::string *)(v10 + 32), a4);
  v11 = *(_QWORD *)v10;
  *(_QWORD *)(v10 + *(_QWORD *)(*(_QWORD *)v10 - 24) + 16) = a5;
  if (a5)
  {
    v28 = *a5;
    std::__tree<XcapNs::nsType>::__emplace_unique_key_args<XcapNs::nsType,XcapNs::nsType const&>(a1 + 2, &v28, &v28);
    v11 = *(_QWORD *)v10;
  }
  v12 = *a1;
  v13 = v10 + *(_QWORD *)(v11 - 24);
  v14 = (uint64_t *)(*a1)[2];
  v15 = (*a1)[3];
  if ((unint64_t)v14 >= v15)
  {
    v17 = v12[1];
    v18 = ((uint64_t)v14 - v17) >> 3;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<XcapNodeSelector::Step *>::__throw_length_error[abi:ne180100]();
    v19 = v15 - v17;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(*a1 + 3), v21);
    else
      v22 = 0;
    v23 = (uint64_t *)&v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v13;
    v16 = v23 + 1;
    v26 = (char *)v12[1];
    v25 = (char *)v12[2];
    if (v25 != v26)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = (char *)v12[1];
    }
    v12[1] = (uint64_t)v23;
    v12[2] = (uint64_t)v16;
    v12[3] = (uint64_t)v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v14 = v13;
    v16 = v14 + 1;
  }
  v12[2] = (uint64_t)v16;
}

_QWORD *XcapNodeSelector::StepName::encode@<X0>(XcapNodeSelector::StepName *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[4];
  void *__p[2];
  __int128 v13;
  __int128 v14;
  _OWORD v15[9];
  uint64_t v16;

  if (*((_BYTE *)this + 9))
    return std::string::basic_string[abi:ne180100]<0>(a2, "*");
  v16 = 0;
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  *(_OWORD *)__p = 0u;
  v13 = 0u;
  memset(v11, 0, sizeof(v11));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  XcapNodeSelector::Step::encodePrefix(v11, *((unsigned __int8 **)this + 2));
  v7 = *((_QWORD *)this + 3);
  v6 = (char *)this + 24;
  v5 = v7;
  v8 = v6[23];
  if (v8 >= 0)
    v9 = (uint64_t)v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = v6[23];
  else
    v10 = *((_QWORD *)v6 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v9, v10);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11 + 8, a2);
  *(_QWORD *)&v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(*(_QWORD *)&v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v11[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v13) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1C3B8707C](v15);
}

void sub_1BEE40D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t XcapNodeSelector::StepAttr::encode@<X0>(XcapNodeSelector::StepAttr *this@<X0>, _QWORD *a2@<X8>)
{
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *__p[2];
  unsigned __int8 v22;
  _OWORD v23[4];
  void *v24[2];
  __int128 v25;
  __int128 v26;
  _BYTE v27[144];
  uint64_t v28;

  v28 = 0;
  memset(v27, 0, sizeof(v27));
  v25 = 0u;
  v26 = 0u;
  *(_OWORD *)v24 = 0u;
  memset(v23, 0, sizeof(v23));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  XcapNodeSelector::StepName::encode((XcapNodeSelector::StepAttr *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), __p);
  if ((v22 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v22 & 0x80u) == 0)
    v5 = v22;
  else
    v5 = (uint64_t)__p[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"[@", 2);
  v8 = *((char *)this + 31);
  if (v8 >= 0)
    v9 = (char *)this + 8;
  else
    v9 = (char *)*((_QWORD *)this + 1);
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)this + 31);
  else
    v10 = *((_QWORD *)this + 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"=\"", 2);
  v15 = *((_QWORD *)this + 4);
  v14 = (char *)this + 32;
  v13 = v15;
  v16 = v14[23];
  if (v16 >= 0)
    v17 = (uint64_t)v14;
  else
    v17 = v13;
  if (v16 >= 0)
    v18 = v14[23];
  else
    v18 = *((_QWORD *)v14 + 1);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\"]", 2);
  if ((char)v22 < 0)
    operator delete(__p[0]);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v23 + 8, a2);
  *(_QWORD *)&v23[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v23 + *(_QWORD *)(*(_QWORD *)&v23[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v23[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v25) < 0)
    operator delete(v24[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v27);
}

void sub_1BEE40F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'XcapNodeSelector::StepAttr::encode@<X0>(XcapNodeSelector::StepAttr *this@<X0>, _QWORD *a2@<X8>)
{
  return XcapNodeSelector::StepAttr::encode((XcapNodeSelector::StepAttr *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2);
}

void XcapNodeSelector::ElementSelector::~ElementSelector(XcapNodeSelector::ElementSelector *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E78BB150;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  XcapNodeSelector::ElementSelector::~ElementSelector(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t XcapNodeSelector::ElementSelector::encode@<X0>(XcapNodeSelector::ElementSelector *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  NSObject *v7;
  unint64_t v8;
  void **v9;
  uint64_t v10;
  void *__p[2];
  unsigned __int8 v13;
  _OWORD v14[4];
  void *v15[2];
  __int128 v16;
  __int128 v17;
  _OWORD v18[9];
  uint64_t v19;

  v19 = 0;
  v17 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  memset(v14, 0, sizeof(v14));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  v5 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if (v4 != v5)
  {
    v6 = (v4 - v5) >> 3;
    v7 = MEMORY[0x1E0C81028];
    v8 = 1;
    do
    {
      if (*(_QWORD *)v5)
      {
        (*(void (**)(void **__return_ptr))(**(_QWORD **)v5 + 24))(__p);
        if ((v13 & 0x80u) == 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        if ((v13 & 0x80u) == 0)
          v10 = v13;
        else
          v10 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v9, v10);
        if ((char)v13 < 0)
          operator delete(__p[0]);
        if (v8 < v6)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/", 1);
      }
      else if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_fault_impl(&dword_1BEDF4000, v7, OS_LOG_TYPE_FAULT, "Invalid step value", (uint8_t *)__p, 2u);
      }
      v5 += 8;
      ++v8;
    }
    while (v5 != v4);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v14 + 8, a2);
  *(_QWORD *)&v14[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(*(_QWORD *)&v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v14[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v18);
}

void sub_1BEE411F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void XcapNodeSelector::StepName::~StepName(void **this)
{
  *this = off_1E78BB180;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

{
  *this = off_1E78BB180;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  JUMPOUT(0x1C3B87100);
}

uint64_t XcapNodeSelector::StepName::clone(XcapNodeSelector::StepName *this)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  *(_OWORD *)(v2 + 8) = *(_OWORD *)((char *)this + 8);
  *(_QWORD *)v2 = off_1E78BB180;
  v3 = (std::string *)(v2 + 24);
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    *(_QWORD *)(v2 + 40) = *((_QWORD *)this + 5);
  }
  return v2;
}

void sub_1BEE41324(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10D3C4091169FA2);
  _Unwind_Resume(a1);
}

void XcapNodeSelector::StepAttr::~StepAttr(void **this)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = off_1E78BB180;
  if (*(char *)(v2 + 103) < 0)
    operator delete(this[10]);
}

{
  XcapNodeSelector::StepAttr::~StepAttr(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t XcapNodeSelector::StepAttr::clone(XcapNodeSelector::StepAttr *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  std::string *v5;

  v2 = operator new();
  v3 = v2;
  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_OWORD *)(v2 + 64) = *(_OWORD *)(v4 + 8);
  *(_QWORD *)(v2 + 56) = off_1E78BB180;
  if (v4[47] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 80), *((const std::string::value_type **)v4 + 3), *((_QWORD *)v4 + 4));
  }
  else
  {
    *(_OWORD *)(v2 + 80) = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(v2 + 96) = *((_QWORD *)v4 + 5);
  }
  *(_QWORD *)v3 = &off_1E78BB1E0;
  *(_QWORD *)(v3 + 56) = &unk_1E78BB228;
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v3 + 8), *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)(v3 + 8) = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v3 + 24) = *((_QWORD *)this + 3);
  }
  v5 = (std::string *)(v3 + 32);
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    *(_QWORD *)(v3 + 48) = *((_QWORD *)this + 6);
  }
  return v3;
}

void sub_1BEE414BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  *(_QWORD *)(v1 + 56) = v4;
  if (*(char *)(v1 + 103) < 0)
    operator delete(*v2);
  MEMORY[0x1C3B87100](v1, 0x10D3C40D90D4617);
  _Unwind_Resume(a1);
}

void `virtual thunk to'XcapNodeSelector::StepAttr::~StepAttr(XcapNodeSelector::StepAttr *this)
{
  XcapNodeSelector::StepAttr::~StepAttr((void **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  XcapNodeSelector::StepAttr::~StepAttr((void **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1C3B87100);
}

_QWORD *`covariant return thunk to'XcapNodeSelector::StepAttr::clone(XcapNodeSelector::StepAttr *this)
{
  _QWORD *result;

  result = (_QWORD *)XcapNodeSelector::StepAttr::clone((XcapNodeSelector::StepAttr *)((char *)this
                                                                                    + *(_QWORD *)(*(_QWORD *)this - 32)));
  if (result)
    return (_QWORD *)((char *)result + *(_QWORD *)(*result - 24));
  return result;
}

_QWORD *XcapNodeSelector::ElementSelector::clone(XcapNodeSelector::ElementSelector *this)
{
  _QWORD *v2;
  char **v3;
  _QWORD *v4;
  _QWORD *i;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  v3 = (char **)(v2 + 1);
  *v2 = &off_1E78BB150;
  v2[2] = 0;
  v2[3] = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  for (i = (_QWORD *)*((_QWORD *)this + 2); v4 != i; ++v4)
  {
    v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    v7 = v6;
    v9 = (uint64_t *)v2[2];
    v8 = v2[3];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v3) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<XcapNodeSelector::Step *>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v3;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(v2 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      *v16 = v7;
      v10 = v16 + 1;
      v18 = (char *)v2[1];
      v17 = (char *)v2[2];
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v16 = v19;
        }
        while (v17 != v18);
        v17 = *v3;
      }
      v2[1] = v16;
      v2[2] = v10;
      v2[3] = &v15[8 * v14];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v9 = v6;
      v10 = v9 + 1;
    }
    v2[2] = v10;
  }
  return v2;
}

void sub_1BEE416DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x1C3B87100](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<XcapNs::nsType>::__assign_multi<std::__tree_const_iterator<XcapNs::nsType,std::__tree_node<XcapNs::nsType,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t **v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t **v27;
  _QWORD *v28;
  uint64_t v29;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v8 = result + 1;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v9 = v6[1];
    else
      v9 = (uint64_t)v6;
    v27 = result;
    v28 = (_QWORD *)v9;
    v29 = v9;
    if (v9)
    {
      v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next(v9);
      v28 = v10;
      if (a2 != a3)
      {
        v11 = a2;
        do
        {
          v12 = (uint64_t)v10;
          v13 = *((unsigned __int8 *)v11 + 25);
          *(_BYTE *)(v9 + 25) = v13;
          v14 = *v8;
          v15 = v5 + 1;
          v16 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                v15 = (uint64_t **)v14;
                if (v13 >= *((unsigned __int8 *)v14 + 25))
                  break;
                v14 = (uint64_t *)*v14;
                v16 = v15;
                if (!*v15)
                  goto LABEL_14;
              }
              v14 = (uint64_t *)v14[1];
            }
            while (v14);
            v16 = v15 + 1;
          }
LABEL_14:
          std::__tree<unsigned int>::__insert_node_at(v5, (uint64_t)v15, v16, (uint64_t *)v9);
          if (v12)
            v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next(v12);
          else
            v10 = 0;
          v17 = (_QWORD *)v11[1];
          if (v17)
          {
            do
            {
              a2 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v11[2];
              v18 = *a2 == (_QWORD)v11;
              v11 = a2;
            }
            while (!v18);
          }
          if (!v12)
            break;
          v9 = v12;
          v11 = a2;
        }
        while (a2 != a3);
        v28 = v10;
        v29 = v12;
      }
    }
    result = (uint64_t **)std::__tree<unsigned int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v27);
  }
  if (a2 != a3)
  {
    v19 = v5 + 1;
    do
    {
      v20 = *((unsigned __int8 *)a2 + 25);
      v21 = (uint64_t *)operator new(0x20uLL);
      *((_BYTE *)v21 + 25) = v20;
      v22 = *v19;
      v23 = v5 + 1;
      v24 = v5 + 1;
      if (*v19)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t **)v22;
            if (*((unsigned __int8 *)v22 + 25) <= v20)
              break;
            v22 = (uint64_t *)*v22;
            v24 = v23;
            if (!*v23)
              goto LABEL_34;
          }
          v22 = (uint64_t *)v22[1];
        }
        while (v22);
        v24 = v23 + 1;
      }
LABEL_34:
      result = (uint64_t **)std::__tree<unsigned int>::__insert_node_at(v5, (uint64_t)v23, v24, v21);
      v25 = (_QWORD *)a2[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)a2[2];
          v18 = *v26 == (_QWORD)a2;
          a2 = v26;
        }
        while (!v18);
      }
      a2 = v26;
    }
    while (v26 != a3);
  }
  return result;
}

void std::vector<XcapNodeSelector::Step *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void XcapNodeSelector::StepAttr::~StepAttr(void **this, void **a2)
{
  _QWORD *v3;

  v3 = *a2;
  *this = *a2;
  *(void **)((char *)this + *(v3 - 3)) = a2[1];
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t SDPParserSettings::initializeFromStack(_BYTE *a1, SipStack **a2)
{
  ImsPrefs *v4;
  void **AllowIPv6UnicastAddressKey;
  void *v6;
  uint64_t result;

  v4 = (ImsPrefs *)SipStack::prefs(*a2);
  AllowIPv6UnicastAddressKey = (void **)ImsPrefs::getAllowIPv6UnicastAddressKey(v4);
  v6 = ImsPrefs::prefWithKey(v4, AllowIPv6UnicastAddressKey);
  if (v6)
    result = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 40))(v6);
  else
    result = *((_BYTE *)AllowIPv6UnicastAddressKey + 57) != 0;
  *a1 = result;
  a1[1] = *((_BYTE *)*a2 + 2657);
  return result;
}

BOOL SDPParser::parseVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  _QWORD *v6;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  char v12;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    if (*(char *)(a2 + 23) >= 0)
      v4 = (const char *)a2;
    else
      v4 = *(const char **)a2;
    *(_QWORD *)(v3 + 32) = atoll(v4);
    std::string::basic_string[abi:ne180100]<0>(v10, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::spam(ims::_logger, (uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"SDPModel Protocol Version set to ", 33);
    *(_BYTE *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(_BYTE *)(v5 + 17) = 0;
    v6 = *(_QWORD **)(v5 + 8);
    v12 = 118;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v12, 1);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v5 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  return v3 != 0;
}

void sub_1BEE41BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SDPParser::parseOrigin(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  unsigned __int8 v18;
  uint64_t v19;
  std::string v21;
  void *v22[2];
  char v23;
  void *v24;
  char v25;
  std::string __p[4];
  void *v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *v32[2];
  __int128 v33;
  _OWORD v34[10];
  std::string::size_type v35;
  std::string::size_type v36;
  std::string v37;
  std::string v38;
  char v39;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)v27, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(_BYTE *)(v5 + 17) = 0;
    v7 = *(_QWORD **)(v5 + 8);
    LOBYTE(v22[0]) = 111;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v22, 1);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_5;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 24))(v4 + 40))
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)v27, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Origin already found: '", 23);
    *(_BYTE *)(v5 + 17) = 0;
    v6 = *(_QWORD **)(v5 + 8);
    LOBYTE(v22[0]) = 111;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v22, 1);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_5:
    *(_BYTE *)(v5 + 17) = 0;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SBYTE7(v28) < 0)
      operator delete(v27[0]);
    return 0;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v8 = v9 == 0;
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::error(ims::_logger, (uint64_t)v27, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Protocol version set to ", 24);
    *(_BYTE *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)". Only 0 is supported: '", 24);
    *(_BYTE *)(v10 + 17) = 0;
    v11 = *(_QWORD **)(v10 + 8);
    LOBYTE(v22[0]) = 111;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v22, 1);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v10 + 32))(v10, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SBYTE7(v28) < 0)
      operator delete(v27[0]);
  }
  memset(&v38, 0, sizeof(v38));
  memset(&v37, 0, sizeof(v37));
  std::string::basic_string[abi:ne180100]<0>(&v37, "");
  v35 = 0;
  v36 = 0;
  memset(v34, 0, sizeof(v34));
  *(_OWORD *)v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  *(_OWORD *)v27 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100](v27, a2, 8);
  v12 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v27, (uint64_t)&v37);
  if ((*((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 32) & 5) != 0
    || (v13 = (_QWORD *)MEMORY[0x1C3B86E9C](v27, &v36), (*((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 32) & 5) != 0)
    || (v14 = (_QWORD *)MEMORY[0x1C3B86E9C](v27, &v35), (*((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 32) & 5) != 0))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"SDPOrigin is missing something: '", 33);
    *(_BYTE *)(v15 + 17) = 0;
    v16 = *(_QWORD **)(v15 + 8);
    v39 = 111;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v39, 1);
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v15 + 32))(v15, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (v23 < 0)
      operator delete(v22[0]);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v8 = 0;
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *((_QWORD *)v27[0] - 3)));
  v17 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale((std::locale *)__p);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v27, (uint64_t)&v38, v18);
  v19 = *(_QWORD *)(a1 + 8);
  SDPParser::parseConnectionHelper(&v38, (char *)a1, (uint64_t)v22);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v21, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    v21 = v37;
  SDPOrigin::SDPOrigin(__p, (uint64_t)v22, (__int128 *)&v21, v36, v35);
  SDPModel::setOrigin(v19, (uint64_t)__p);
  SDPOrigin::~SDPOrigin((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  v22[0] = off_1E78D19C0;
  if (v25 < 0)
    operator delete(v24);
  v27[0] = *(void **)MEMORY[0x1E0DE4F58];
  *(void **)((char *)v27 + *((_QWORD *)v27[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v28 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v33) < 0)
    operator delete(v32[0]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3B8707C]((char *)v34 + 8);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1BEE422B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::locale a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  if (a26 < 0)
    operator delete(__p);
  std::istringstream::~istringstream((uint64_t)&a45);
  if (*(char *)(v50 - 81) < 0)
    operator delete(*(void **)(v50 - 104));
  if (*(char *)(v50 - 57) < 0)
    operator delete(*(void **)(v50 - 80));
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseSessionName(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  std::string __p;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  char v15;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    std::string::operator=((std::string *)(v3 + 152), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = *(_QWORD *)(a1 + 8);
    if (!*(_QWORD *)(v7 + 32) && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 24))(v7 + 40) & 1) != 0)
      return 1;
    std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)v13, (uint64_t)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Session name parsed out of order. Must appear after origin: '", 61);
    *(_BYTE *)(v5 + 17) = 0;
    v9 = *(_QWORD **)(v5 + 8);
    v15 = 115;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v15, 1);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)v13, (uint64_t)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(_BYTE *)(v5 + 17) = 0;
    v6 = *(_QWORD **)(v5 + 8);
    v15 = 115;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v15, 1);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v5 + 17) = 0;
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  return 0;
}

void sub_1BEE42648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseSessionInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  _QWORD *v11;
  std::string __p;
  void *v13[2];
  char v14;
  std::string v15;
  char v16;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    std::string::operator=((std::string *)(v3 + 176), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = *(_QWORD *)(a1 + 8);
    if (!*(_QWORD *)(v7 + 32) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 24))(v7 + 40))
    {
      v8 = *(_QWORD *)(a1 + 8);
      if (*(char *)(v8 + 175) < 0)
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v8 + 152), *(_QWORD *)(v8 + 160));
      else
        v15 = *(std::string *)(v8 + 152);
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
      else
        size = v15.__r_.__value_.__l.__size_;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (size)
        return 1;
    }
    std::string::basic_string[abi:ne180100]<0>(&v15, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)&v15, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Session information parsed out of order. Must appear after origin: '", 68);
    *(_BYTE *)(v5 + 17) = 0;
    v11 = *(_QWORD **)(v5 + 8);
    v16 = 105;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v16, 1);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)&v15, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(_BYTE *)(v5 + 17) = 0;
    v6 = *(_QWORD **)(v5 + 8);
    v16 = 105;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v16, 1);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v5 + 17) = 0;
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1BEE4296C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseURI(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  _QWORD *v11;
  std::string __p;
  void *v13[2];
  char v14;
  std::string v15;
  char v16;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    std::string::operator=((std::string *)(v3 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = *(_QWORD *)(a1 + 8);
    if (!*(_QWORD *)(v7 + 32) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 24))(v7 + 40))
    {
      v8 = *(_QWORD *)(a1 + 8);
      if (*(char *)(v8 + 175) < 0)
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v8 + 152), *(_QWORD *)(v8 + 160));
      else
        v15 = *(std::string *)(v8 + 152);
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
      else
        size = v15.__r_.__value_.__l.__size_;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (size)
        return 1;
    }
    std::string::basic_string[abi:ne180100]<0>(&v15, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)&v15, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"URI parsed out of order. Must appear after origin: '", 52);
    *(_BYTE *)(v5 + 17) = 0;
    v11 = *(_QWORD **)(v5 + 8);
    v16 = 117;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v16, 1);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)&v15, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(_BYTE *)(v5 + 17) = 0;
    v6 = *(_QWORD **)(v5 + 8);
    v16 = 117;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v16, 1);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v5 + 17) = 0;
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1BEE42C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseEmail(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::string::size_type size;
  _QWORD *v13;
  void *__p[2];
  char v15;
  std::string v16;
  char v17;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v5 = std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>(v3 + 224, 0, 0, a2);
    v5[1] = v3 + 224;
    v6 = *(_QWORD *)(v3 + 224);
    *v5 = v6;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v3 + 224) = v5;
    ++*(_QWORD *)(v3 + 240);
    v7 = *(_QWORD *)(a1 + 8);
    if (!*(_QWORD *)(v7 + 32) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 24))(v7 + 40))
    {
      v8 = *(_QWORD *)(a1 + 8);
      if (*(char *)(v8 + 175) < 0)
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v8 + 152), *(_QWORD *)(v8 + 160));
      else
        v16 = *(std::string *)(v8 + 152);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      else
        size = v16.__r_.__value_.__l.__size_;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (size)
        return 1;
    }
    std::string::basic_string[abi:ne180100]<0>(&v16, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::error(ims::_logger, (uint64_t)&v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Email parsed out of order. Must appear after origin: '", 54);
    *(_BYTE *)(v9 + 17) = 0;
    v13 = *(_QWORD **)(v9 + 8);
    v17 = 101;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v17, 1);
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::error(ims::_logger, (uint64_t)&v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(_BYTE *)(v9 + 17) = 0;
    v10 = *(_QWORD **)(v9 + 8);
    v17 = 101;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v17, 1);
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v9 + 17) = 0;
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1BEE42FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parsePhoneNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::string::size_type size;
  _QWORD *v13;
  void *__p[2];
  char v15;
  std::string v16;
  char v17;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v5 = std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>(v3 + 248, 0, 0, a2);
    v5[1] = v3 + 248;
    v6 = *(_QWORD *)(v3 + 248);
    *v5 = v6;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v3 + 248) = v5;
    ++*(_QWORD *)(v3 + 264);
    v7 = *(_QWORD *)(a1 + 8);
    if (!*(_QWORD *)(v7 + 32) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 24))(v7 + 40))
    {
      v8 = *(_QWORD *)(a1 + 8);
      if (*(char *)(v8 + 175) < 0)
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v8 + 152), *(_QWORD *)(v8 + 160));
      else
        v16 = *(std::string *)(v8 + 152);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      else
        size = v16.__r_.__value_.__l.__size_;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (size)
        return 1;
    }
    std::string::basic_string[abi:ne180100]<0>(&v16, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::error(ims::_logger, (uint64_t)&v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Phone number parsed out of order. Must appear after origin: '", 61);
    *(_BYTE *)(v9 + 17) = 0;
    v13 = *(_QWORD **)(v9 + 8);
    v17 = 112;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v17, 1);
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::error(ims::_logger, (uint64_t)&v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(_BYTE *)(v9 + 17) = 0;
    v10 = *(_QWORD **)(v9 + 8);
    v17 = 112;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v17, 1);
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v9 + 17) = 0;
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1BEE432AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseConnection(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::string::size_type size;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v13;
  void *v14[2];
  char v15;
  void *__p[2];
  void *v17[2];
  __int128 v18;
  uint64_t v19;
  std::string v20;
  char v21;

  if (*(_QWORD *)(a1 + 8))
  {
    v19 = 0;
    *(_OWORD *)v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    SDPParser::parseConnectionHelper(a2, (char *)a1, (uint64_t)__p);
    SDPModel::addSDPConnection(*(SDPModel **)(a1 + 8), (const SDPConnection *)__p);
    v4 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v4 + 32) || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 24))(v4 + 40))
      goto LABEL_20;
    v5 = *(_QWORD *)(a1 + 8);
    if (*(char *)(v5 + 175) < 0)
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v5 + 152), *(_QWORD *)(v5 + 160));
    else
      v20 = *(std::string *)(v5 + 152);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    else
      size = v20.__r_.__value_.__l.__size_;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (size)
    {
      if (SDPConnection::valid((const std::string *)__p))
      {
        v8 = 1;
LABEL_26:
        __p[0] = off_1E78D19C0;
        if (SHIBYTE(v18) < 0)
          operator delete(v17[1]);
        return v8;
      }
      std::string::basic_string[abi:ne180100]<0>(&v20, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(v14, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v10 = ImsLogger::error(ims::_logger, (uint64_t)&v20, (uint64_t)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Invalid address given in connection object ", 43);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, &v17[1]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)": '", 3);
      *(_BYTE *)(v10 + 17) = 0;
      v13 = *(_QWORD **)(v10 + 8);
      v21 = 99;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v21, 1);
      *(_BYTE *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"=", 1);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v10 + 32))(v10, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"'", 1);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
LABEL_20:
      std::string::basic_string[abi:ne180100]<0>(&v20, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(v14, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v10 = ImsLogger::error(ims::_logger, (uint64_t)&v20, (uint64_t)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Connection information parsed out of order. Must appear after origin: '", 71);
      *(_BYTE *)(v10 + 17) = 0;
      v11 = *(_QWORD **)(v10 + 8);
      v21 = 99;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v21, 1);
      *(_BYTE *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"=", 1);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v10 + 32))(v10, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"'", 1);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(_BYTE *)(v10 + 17) = 0;
    if (v15 < 0)
      operator delete(v14[0]);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    v8 = 0;
    goto LABEL_26;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(&v20, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SDPModel is null: '", 19);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = *(_QWORD **)(v6 + 8);
  LOBYTE(v14[0]) = 99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v14, 1);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"=", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v6 + 32))(v6, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"'", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17[0]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1BEE43700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 25) < 0)
    operator delete(*(void **)(v27 - 48));
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseBandwidth(uint64_t a1, std::string *this)
{
  std::string::size_type v4;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::string::size_type size;
  char *v10;
  int v11;
  unsigned __int8 *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  std::string *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::string::size_type v28;
  _QWORD *v30;
  void *__p[2];
  char v32;
  void *v33[2];
  char v34;
  std::string v35;
  std::string v36;
  char v37;

  if (!*(_QWORD *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(&v35, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)&v36, (uint64_t)&v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(_BYTE *)(v15 + 17) = 0;
    v16 = *(_QWORD **)(v15 + 8);
    LOBYTE(v33[0]) = 98;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v33, 1);
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v15 + 32))(v15, this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_47;
  }
  v4 = std::string::find(this, 58, 0);
  if (v4 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(&v35, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)&v36, (uint64_t)&v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Bandwidth missing information: '", 32);
    *(_BYTE *)(v15 + 17) = 0;
    v27 = *(_QWORD **)(v15 + 8);
    LOBYTE(v33[0]) = 98;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v33, 1);
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v15 + 32))(v15, this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_47;
  }
  v5 = v4;
  memset(&v36, 0, sizeof(v36));
  std::string::basic_string(&v36, this, 0, v4, (std::allocator<char> *)&v35);
  memset(&v35, 0, sizeof(v35));
  std::string::basic_string(&v35, this, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v33);
  v6 = 0;
  v7 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  v8 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  else
    size = v36.__r_.__value_.__l.__size_;
  while (1)
  {
    v10 = (char *)&SDPBandwidth::bwTypeLookup + 24 * v6;
    v11 = v10[23];
    if (size != (v11 & ~(v11 >> 31)))
      goto LABEL_17;
    v12 = v11 >= 0 ? (unsigned __int8 *)&SDPBandwidth::bwTypeLookup + 24 * v6 : *(unsigned __int8 **)v10;
    if ((v7 & 0x80) != 0)
      break;
    if (!(_DWORD)v7)
      goto LABEL_20;
    v13 = &v36;
    v14 = v7;
    while (v13->__r_.__value_.__s.__data_[0] == *v12)
    {
      v13 = (std::string *)((char *)v13 + 1);
      ++v12;
      if (!--v14)
        goto LABEL_20;
    }
LABEL_17:
    if (++v6 == 6)
      goto LABEL_21;
  }
  if (memcmp((const void *)v8, v12, *((size_t *)&v8 + 1)))
    goto LABEL_17;
LABEL_20:
  if ((_DWORD)v6)
    goto LABEL_26;
LABEL_21:
  std::string::basic_string[abi:ne180100]<0>(v33, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v17 = ImsLogger::error(ims::_logger, (uint64_t)v33, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Bandwidth set to kBWTypeUnknown: '", 34);
  *(_BYTE *)(v17 + 17) = 0;
  v18 = *(_QWORD **)(v17 + 8);
  v37 = 98;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v37, 1);
  *(_BYTE *)(v17 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"=", 1);
  *(_BYTE *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v17 + 32))(v17, this);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"'", 1);
  *(_BYTE *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v17 + 17) = 0;
  if (v32 < 0)
    operator delete(__p[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  LODWORD(v6) = 0;
LABEL_26:
  v19 = *(_QWORD *)(a1 + 8);
  v20 = (void *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v35;
  else
    v21 = (std::string *)v35.__r_.__value_.__r.__words[0];
  v22 = atoll((const char *)v21);
  v23 = operator new(0x38uLL);
  v23[24] = 1;
  *((_DWORD *)v23 + 7) = v6;
  v23[32] = v22 != 0;
  *((_QWORD *)v23 + 5) = v22;
  *((_DWORD *)v23 + 12) = 2;
  *((_WORD *)v23 + 26) = 5;
  *((_QWORD *)v23 + 1) = v19 + 296;
  *((_QWORD *)v23 + 2) = &off_1E78BFAB0;
  v24 = *(_QWORD *)(v19 + 296);
  *(_QWORD *)v23 = v24;
  *(_QWORD *)(v24 + 8) = v23;
  *(_QWORD *)(v19 + 296) = v23;
  ++*(_QWORD *)(v19 + 312);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  v25 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v25 + 32) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v25 + 40) + 24))(v25 + 40))
  {
    v26 = *(_QWORD *)(a1 + 8);
    if (*(char *)(v26 + 175) < 0)
      std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v26 + 152), *(_QWORD *)(v26 + 160));
    else
      v36 = *(std::string *)(v26 + 152);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    else
      v28 = v36.__r_.__value_.__l.__size_;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (v28)
      return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v36, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(&v35, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v15 = ImsLogger::error(ims::_logger, (uint64_t)&v36, (uint64_t)&v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Bandwidth information parsed out of order. Must appear after origin: '", 70);
  *(_BYTE *)(v15 + 17) = 0;
  v30 = *(_QWORD **)(v15 + 8);
  LOBYTE(v33[0]) = 98;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v33, 1);
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"=", 1);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v15 + 32))(v15, this);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"'", 1);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_47:
  *(_BYTE *)(v15 + 17) = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1BEE43DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseTime(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  void *__p;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[3];
  void *v29[2];
  char v30;
  _BYTE v31[32];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void *v35[2];
  __int128 v36;
  _OWORD v37[10];
  __int128 v38;
  char v39;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 32) || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 24))(v4 + 40))
      goto LABEL_19;
    v5 = *(_QWORD *)(a1 + 8);
    if (*(char *)(v5 + 175) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v31, *(const std::string::value_type **)(v5 + 152), *(_QWORD *)(v5 + 160));
    }
    else
    {
      *(_OWORD *)v31 = *(_OWORD *)(v5 + 152);
      *(_QWORD *)&v31[16] = *(_QWORD *)(v5 + 168);
    }
    if (v31[23] >= 0)
      v9 = v31[23];
    else
      v9 = *(_QWORD *)&v31[8];
    if ((v31[23] & 0x80000000) != 0)
      operator delete(*(void **)v31);
    if (v9)
    {
      v8 = 1;
    }
    else
    {
LABEL_19:
      std::string::basic_string[abi:ne180100]<0>(v31, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v10 = ImsLogger::error(ims::_logger, (uint64_t)v31, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Time information parsed out of order. Must appear after origin: '", 65);
      *(_BYTE *)(v10 + 17) = 0;
      v11 = *(_QWORD **)(v10 + 8);
      LOBYTE(v29[0]) = 116;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v29, 1);
      *(_BYTE *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"=", 1);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v10 + 32))(v10, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"'", 1);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v10 + 17) = 0;
      if (SHIBYTE(v26) < 0)
        operator delete(__p);
      if ((v31[23] & 0x80000000) != 0)
        operator delete(*(void **)v31);
      v8 = 0;
    }
    v38 = 0uLL;
    memset(v37, 0, sizeof(v37));
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    memset(v31, 0, sizeof(v31));
    std::istringstream::basic_istringstream[abi:ne180100](v31, a2, 8);
    v12 = (_QWORD *)MEMORY[0x1C3B86E9C](v31, (char *)&v38 + 8);
    if ((*((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 32) & 5) != 0
      || (v13 = (_QWORD *)MEMORY[0x1C3B86E9C](v31, &v38), (*((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 32) & 5) != 0))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(v29, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v14 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Unable to parse Timing object: '", 32);
      *(_BYTE *)(v14 + 17) = 0;
      v15 = *(_QWORD **)(v14 + 8);
      v39 = 116;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v39, 1);
      *(_BYTE *)(v14 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"=", 1);
      *(_BYTE *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v14 + 32))(v14, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"'", 1);
      *(_BYTE *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v14 + 17) = 0;
      if (v30 < 0)
        operator delete(v29[0]);
      if (SHIBYTE(v26) < 0)
        operator delete(__p);
      v8 = 0;
      v16 = *((_QWORD *)&v38 + 1);
      v17 = v38;
    }
    else
    {
      v16 = *((_QWORD *)&v38 + 1) | v38;
      if (v38 == 0)
      {
        v17 = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parser");
        std::string::basic_string[abi:ne180100]<0>(v29, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v22 = ImsLogger::warn(ims::_logger, (uint64_t)&__p, (uint64_t)v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"We don't support non-zero values in timing objects: '", 53);
        *(_BYTE *)(v22 + 17) = 0;
        v23 = *(_QWORD **)(v22 + 8);
        v39 = 116;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v39, 1);
        *(_BYTE *)(v22 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"=", 1);
        *(_BYTE *)(v22 + 17) = 0;
        (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v22 + 32))(v22, a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"'", 1);
        *(_BYTE *)(v22 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v22 + 17) = 0;
        if (v30 < 0)
          operator delete(v29[0]);
        if (SHIBYTE(v26) < 0)
          operator delete(__p);
        v17 = 0;
        v16 = 0;
        v38 = 0uLL;
      }
    }
    v18 = *(_QWORD *)(a1 + 8);
    v25 = 1;
    __p = &off_1E78EDC20;
    v26 = v16;
    v27 = v17;
    v28[0] = (uint64_t)v28;
    v28[1] = (uint64_t)v28;
    v28[2] = 0;
    v19 = std::__list_imp<SDPTiming>::__create_node[abi:ne180100]<SDPTiming>(v18 + 320, 0, 0, (const SDPTiming *)&__p);
    v19[1] = v18 + 320;
    v20 = *(_QWORD *)(v18 + 320);
    *v19 = v20;
    *(_QWORD *)(v20 + 8) = v19;
    *(_QWORD *)(v18 + 320) = v19;
    ++*(_QWORD *)(v18 + 336);
    __p = &off_1E78EDC20;
    std::__list_imp<SDPRepeatTime>::clear(v28);
    *(_QWORD *)v31 = *MEMORY[0x1E0DE4F58];
    *(_QWORD *)&v31[*(_QWORD *)(*(_QWORD *)v31 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
    *(_QWORD *)&v31[16] = MEMORY[0x1E0DE4FB8] + 16;
    if (SBYTE7(v36) < 0)
      operator delete(v35[0]);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1C3B8707C]((char *)v37 + 8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::error(ims::_logger, (uint64_t)v31, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(_BYTE *)(v6 + 17) = 0;
    v7 = *(_QWORD **)(v6 + 8);
    LOBYTE(v29[0]) = 116;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v29, 1);
    *(_BYTE *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v6 + 32))(v6, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (SHIBYTE(v26) < 0)
      operator delete(__p);
    if ((v31[23] & 0x80000000) != 0)
      operator delete(*(void **)v31);
    return 0;
  }
  return v8;
}

void sub_1BEE4448C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
    operator delete(__p);
  std::istringstream::~istringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseRepeatTimes(uint64_t a1, const std::string *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t TimeInSeconds;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v28;
  char v29;
  __int128 v30;
  _QWORD v31[3];
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  void *__p[2];
  char v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[168];
  std::string v46;
  std::string v47;
  std::string v48;
  _QWORD v49[2];
  uint64_t v50;
  char v51;

  if (*(_QWORD *)(a1 + 8))
  {
    v49[0] = v49;
    v49[1] = v49;
    v50 = 0;
    memset(&v48, 0, sizeof(v48));
    memset(&v47, 0, sizeof(v47));
    memset(&v46, 0, sizeof(v46));
    memset(v45, 0, 160);
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    *(_OWORD *)v38 = 0u;
    std::istringstream::basic_istringstream[abi:ne180100](v38, a2, 8);
    v4 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v38, (uint64_t)&v48);
    if ((*((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 5) != 0
      || (v5 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v38, (uint64_t)&v47), (*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)|| (v6 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v38, (uint64_t)&v46), (*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0))
    {
      std::string::basic_string[abi:ne180100]<0>(&v28, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v7 = ImsLogger::error(ims::_logger, (uint64_t)&v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Repeat Times missing information: '", 35);
      *(_BYTE *)(v7 + 17) = 0;
      v8 = *(_QWORD **)(v7 + 8);
      v51 = 114;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v51, 1);
      *(_BYTE *)(v7 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"=", 1);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v7 + 32))(v7, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"'", 1);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
      if (v37 < 0)
        operator delete(__p[0]);
      if (SBYTE7(v30) < 0)
        operator delete(v28);
      v9 = 0;
    }
    else
    {
      v9 = 1;
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v35, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    else
      v35 = v48;
    TimeInSeconds = SDPParser::getTimeInSeconds((uint64_t)&v35);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v34, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
    else
      v34 = v47;
    v13 = SDPParser::getTimeInSeconds((uint64_t)&v34);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v33, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    else
      v33 = v46;
    v14 = SDPParser::getTimeInSeconds((uint64_t)&v33);
    v15 = operator new(0x18uLL);
    v16 = v49[0];
    v15[1] = v49;
    v15[2] = v14;
    *v15 = v16;
    *(_QWORD *)(v16 + 8) = v15;
    v49[0] = v15;
    ++v50;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    while (1)
    {
      v17 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v38, (uint64_t)&v46);
      if ((*((_BYTE *)v17 + *(_QWORD *)(*v17 - 24) + 32) & 5) != 0)
        break;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v32, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
      else
        v32 = v46;
      v18 = SDPParser::getTimeInSeconds((uint64_t)&v32);
      v19 = operator new(0x18uLL);
      v19[1] = v49;
      v19[2] = v18;
      v20 = v49[0];
      *v19 = v49[0];
      *(_QWORD *)(v20 + 8) = v19;
      v49[0] = v19;
      ++v50;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
    }
    v21 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v21 + 336))
    {
      v22 = *(_QWORD *)(v21 + 320);
      v29 = 1;
      v28 = &off_1E78EDBD8;
      *(_QWORD *)&v30 = TimeInSeconds;
      *((_QWORD *)&v30 + 1) = v13;
      std::list<unsigned long long>::list(v31, (uint64_t)v49);
      v23 = operator new(0x48uLL);
      *v23 = 0;
      v23[1] = 0;
      *((_BYTE *)v23 + 24) = 1;
      v23[2] = &off_1E78EDBD8;
      *((_OWORD *)v23 + 2) = v30;
      std::list<unsigned long long>::list(v23 + 6, (uint64_t)v31);
      v23[1] = v22 + 48;
      v24 = *(_QWORD *)(v22 + 48);
      *v23 = v24;
      *(_QWORD *)(v24 + 8) = v23;
      *(_QWORD *)(v22 + 48) = v23;
      ++*(_QWORD *)(v22 + 64);
      v28 = &off_1E78EDBD8;
      std::__list_imp<unsigned long long>::clear(v31);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v28, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v25 = ImsLogger::error(ims::_logger, (uint64_t)&v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Parsing of SDP_REPEAT_TIMES_TAG failed: '", 41);
      *(_BYTE *)(v25 + 17) = 0;
      v26 = *(_QWORD **)(v25 + 8);
      v51 = 114;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)&v51, 1);
      *(_BYTE *)(v25 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"=", 1);
      *(_BYTE *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v25 + 32))(v25, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"'", 1);
      *(_BYTE *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v25 + 17) = 0;
      if (v37 < 0)
        operator delete(__p[0]);
      if (SBYTE7(v30) < 0)
        operator delete(v28);
      v9 = 0;
    }
    v38[0] = *(void **)MEMORY[0x1E0DE4F58];
    *(void **)((char *)v38 + *((_QWORD *)v38[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F58] + 24);
    *(_QWORD *)&v39 = MEMORY[0x1E0DE4FB8] + 16;
    if (SBYTE7(v44) < 0)
      operator delete((void *)v43);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1C3B8707C](&v45[8]);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    std::__list_imp<unsigned long long>::clear(v49);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(&v28, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::error(ims::_logger, (uint64_t)v38, (uint64_t)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(_BYTE *)(v10 + 17) = 0;
    v11 = *(_QWORD **)(v10 + 8);
    LOBYTE(v49[0]) = 114;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v49, 1);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v10 + 32))(v10, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (SBYTE7(v30) < 0)
      operator delete(v28);
    if (SBYTE7(v39) < 0)
      operator delete(v38[0]);
    return 0;
  }
  return v9;
}

void sub_1BEE44C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a15 < 0)
    operator delete(__p);
  std::istringstream::~istringstream((uint64_t)&a53);
  if (*(char *)(v58 - 161) < 0)
    operator delete(*(void **)(v58 - 184));
  if (*(char *)(v58 - 137) < 0)
    operator delete(*(void **)(v58 - 160));
  if (*(char *)(v58 - 113) < 0)
    operator delete(*(void **)(v58 - 136));
  std::__list_imp<unsigned long long>::clear((_QWORD *)(v58 - 112));
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseTimeZone(uint64_t a1, const std::string *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TimeInSeconds;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  std::string::size_type v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  void *v21;
  char v22;
  _QWORD v23[3];
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  void *__p[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[168];
  _QWORD v36[2];
  uint64_t v37;
  char v38;
  void (**v39)(SDPTimeZone *__hidden);
  char v40;
  _QWORD v41[3];

  if (*(_QWORD *)(a1 + 8))
  {
    v36[0] = v36;
    v36[1] = v36;
    v37 = 0;
    memset(v35, 0, 160);
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)__p = 0u;
    std::istringstream::basic_istringstream[abi:ne180100](__p, a2, 8);
    memset(&v27, 0, sizeof(v27));
    std::string::basic_string[abi:ne180100]<0>(&v27, "");
    memset(&v26, 0, sizeof(v26));
    std::string::basic_string[abi:ne180100]<0>(&v26, "");
    while (1)
    {
      v4 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)__p, (uint64_t)&v27);
      if ((*((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 5) != 0)
        break;
      v5 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)__p, (uint64_t)&v26);
      if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)
        break;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v25, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
      else
        v25 = v27;
      TimeInSeconds = SDPParser::getTimeInSeconds((uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v24, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
      else
        v24 = v26;
      v7 = SDPParser::getTimeInSeconds((uint64_t)&v24);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      v8 = operator new(0x20uLL);
      v8[2] = TimeInSeconds;
      v8[3] = v7;
      v9 = v36[0];
      *v8 = v36[0];
      v8[1] = v36;
      *(_QWORD *)(v9 + 8) = v8;
      v36[0] = v8;
      ++v37;
    }
    v10 = *(_QWORD *)(a1 + 8);
    v22 = 1;
    std::list<std::pair<unsigned long long,long>>::list(v23, (uint64_t)v36);
    v40 = 1;
    v39 = &off_1E78EDC68;
    std::list<std::pair<unsigned long long,long>>::list(v41, (uint64_t)v23);
    std::optional<SDPTimeZone>::operator=[abi:ne180100]<SDPTimeZone,void>(v10 + 344, (uint64_t)&v39);
    v39 = &off_1E78EDC68;
    std::__list_imp<unsigned long long>::clear(v41);
    v21 = &off_1E78EDC68;
    std::__list_imp<unsigned long long>::clear(v23);
    if (!v37)
      goto LABEL_30;
    size = v27.__r_.__value_.__l.__size_;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    v12 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    if (!size)
      goto LABEL_23;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = v26.__r_.__value_.__l.__size_;
    if (v12)
    {
LABEL_23:
      v13 = 1;
      if ((*((_BYTE *)&v26.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_42:
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        __p[0] = *(void **)MEMORY[0x1E0DE4F58];
        *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F58] + 24);
        *(_QWORD *)&v29 = MEMORY[0x1E0DE4FB8] + 16;
        if (SBYTE7(v34) < 0)
          operator delete((void *)v33);
        std::streambuf::~streambuf();
        std::istream::~istream();
        MEMORY[0x1C3B8707C](&v35[8]);
        std::__list_imp<unsigned long long>::clear(v36);
        return v13;
      }
    }
    else
    {
LABEL_30:
      std::string::basic_string[abi:ne180100]<0>(&v39, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(&v21, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v16 = ImsLogger::error(ims::_logger, (uint64_t)&v39, (uint64_t)&v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"Timezone adjustment offset list ", 32);
      *(_BYTE *)(v16 + 17) = 0;
      if (v37)
        v17 = " missing offset";
      else
        v17 = "missing";
      if (v37)
        v18 = 15;
      else
        v18 = 7;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)v17, v18);
      *(_BYTE *)(v16 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)": '", 3);
      *(_BYTE *)(v16 + 17) = 0;
      v19 = *(_QWORD **)(v16 + 8);
      v38 = 122;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v38, 1);
      *(_BYTE *)(v16 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"=", 1);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v16 + 32))(v16, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"'", 1);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v16 + 17) = 0;
      if (SHIBYTE(v23[0]) < 0)
        operator delete(v21);
      if (SHIBYTE(v41[0]) < 0)
        operator delete(v39);
      v13 = 0;
      if ((*((_BYTE *)&v26.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_42;
    }
    operator delete(v26.__r_.__value_.__l.__data_);
    goto LABEL_42;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(&v39, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v14 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"SDPModel is null: '", 19);
  *(_BYTE *)(v14 + 17) = 0;
  v15 = *(_QWORD **)(v14 + 8);
  LOBYTE(v21) = 122;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v21, 1);
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"=", 1);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v14 + 32))(v14, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"'", 1);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (SHIBYTE(v41[0]) < 0)
    operator delete(v39);
  if (SBYTE7(v29) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1BEE452D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (*(char *)(v49 - 81) < 0)
    operator delete(*(void **)(v49 - 104));
  if (a37 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  std::istringstream::~istringstream((uint64_t)&a44);
  std::__list_imp<unsigned long long>::clear((_QWORD *)(v49 - 136));
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseEncryptionKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  char v10;

  std::string::basic_string[abi:ne180100]<0>(v8, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::error(ims::_logger, (uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"SDP_ENCRYPTION_KEY_TAG NOT IMPLEMENTED: '", 41);
  *(_BYTE *)(v3 + 17) = 0;
  v4 = *(_QWORD **)(v3 + 8);
  v10 = 107;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v10, 1);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"=", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"'", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  return 1;
}

void sub_1BEE4550C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SDPParser::parseAttribute(uint64_t a1, std::string *this)
{
  uint64_t v3;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(uint64_t *, std::string *);
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string __p;
  std::string v29;
  std::string v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::string v33;
  std::string v34;
  char v35;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v5 = std::string::find(this, 58, 0);
    memset(&v34, 0, sizeof(v34));
    std::string::basic_string(&v34, this, 0, v5, (std::allocator<char> *)&v30);
    memset(&v33, 0, sizeof(v33));
    if (v5 != -1)
    {
      std::string::basic_string(&v30, this, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v35);
      v33 = v30;
    }
    v6 = qword_1ED70E8E8;
    if (!qword_1ED70E8E8)
      goto LABEL_17;
    v7 = &qword_1ED70E8E8;
    do
    {
      v8 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v6 + 32), (void **)&v34.__r_.__value_.__l.__data_);
      if (v8 >= 0)
        v9 = (uint64_t *)v6;
      else
        v9 = (uint64_t *)(v6 + 8);
      if (v8 >= 0)
        v7 = (uint64_t *)v6;
      v6 = *v9;
    }
    while (*v9);
    if (v7 == &qword_1ED70E8E8
      || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v34, (void **)v7 + 4) & 0x80) != 0)
    {
LABEL_17:
      v14 = *(_QWORD *)(a1 + 8);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v29, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
      else
        v29 = v34;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
      else
        __p = v33;
      SDPUnsupportedAttribute::SDPUnsupportedAttribute((uint64_t)&v30, (uint64_t)&v29, (__int128 *)&__p);
      v18 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPUnsupportedAttribute>(v14 + 392, 0, 0, (uint64_t)&v30);
      v18[1] = v14 + 392;
      v19 = *(_QWORD *)(v14 + 392);
      *v18 = v19;
      *(_QWORD *)(v19 + 8) = v18;
      *(_QWORD *)(v14 + 392) = v18;
      ++*(_QWORD *)(v14 + 408);
      SDPUnsupportedAttribute::~SDPUnsupportedAttribute((void **)&v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
    }
    else
    {
      v30.__r_.__value_.__r.__words[0] = 0;
      v10 = std::__tree<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>>>::__find_equal<std::string>((uint64_t **)&v30, (void **)&v34.__r_.__value_.__l.__data_);
      v11 = (uint64_t *)*v10;
      if (!*v10)
      {
        v12 = (uint64_t **)v10;
        v11 = (uint64_t *)operator new(0x40uLL);
        v13 = (std::string *)(v11 + 4);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v13, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
          v11[6] = v34.__r_.__value_.__r.__words[2];
        }
        v11[7] = 0;
        std::__tree<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>>>::__insert_node_at((uint64_t)v30.__r_.__value_.__l.__data_, v12, v11);
      }
      v20 = (void (*)(uint64_t *, std::string *))v11[7];
      v21 = *(std::__shared_weak_count **)(a1 + 16);
      v31 = *(_QWORD *)(a1 + 8);
      v32 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      v20(&v31, &v33);
      v24 = v32;
      if (v32)
      {
        v25 = (unint64_t *)&v32->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v34.__r_.__value_.__r.__words[0];
      goto LABEL_45;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(&v34, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)&v30, (uint64_t)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"SDPModel is null: '", 19);
    *(_BYTE *)(v15 + 17) = 0;
    v16 = *(_QWORD **)(v15 + 8);
    v33.__r_.__value_.__s.__data_[0] = 97;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v33, 1);
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"=", 1);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v15 + 32))(v15, this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v30.__r_.__value_.__r.__words[0];
LABEL_45:
      operator delete(v17);
    }
  }
  return v3 != 0;
}

void sub_1BEE45900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;
  uint64_t v35;

  operator delete(v34);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMedia(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  int v28;
  void *v29;
  std::string *p_p;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  size_t size;
  std::string *p_str;
  _BYTE *v36;
  std::string::size_type v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  int v44;
  void *v45;
  std::string *v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  void *v55;
  uint64_t **v56;
  _DWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  int v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v71;
  uint64_t v72;
  void (**v74)(SDPMedia *__hidden);
  int v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  _QWORD v79[2];
  __int128 v80;
  __int128 v81;
  _QWORD v82[3];
  _QWORD v83[3];
  _QWORD v84[6];
  __int128 v85;
  void *v86[2];
  char v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  std::string __str;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95[2];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[167];
  char v103;
  std::string __p;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int16 v113;
  __int16 v114;
  _QWORD v115[15];
  int v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 8))
  {
    v75 = 1;
    v78 = 0;
    v85 = 0u;
    memset(&v84[2], 0, 32);
    v82[2] = 0;
    v83[2] = 0;
    v74 = &off_1E78E2050;
    v76 = 0uLL;
    v77 = 0;
    v79[0] = v79;
    v79[1] = v79;
    v80 = 0u;
    v81 = 0u;
    v82[0] = v82;
    v82[1] = v82;
    v83[0] = v83;
    v83[1] = v83;
    v84[0] = v84;
    v84[1] = v84;
    SDPPreconditionTable::SDPPreconditionTable((SDPPreconditionTable *)&v84[3], 1);
    v3 = 0;
    LOBYTE(v85) = 0;
    *((_QWORD *)&v85 + 1) = 0;
    v67 = *(void **)(MEMORY[0x1E0DE4F58] + 24);
    v68 = (void *)*MEMORY[0x1E0DE4F58];
    v66 = MEMORY[0x1E0DE4FB8] + 16;
    v4 = 109;
    v65 = 1;
    while (1)
    {
      if (v4 == 109 && (v3 & 1) != 0)
      {
        v5 = *(_QWORD **)(a1 + 8);
        *((_QWORD *)&v85 + 1) = v5;
        v6 = v5[53];
        if (v6 >= v5[54])
        {
          v7 = std::vector<SDPMedia>::__push_back_slow_path<SDPMedia const&>(v5 + 52, (const SDPMedia *)&v74);
        }
        else
        {
          SDPMedia::SDPMedia((SDPMedia *)v5[53], (const SDPMedia *)&v74);
          v7 = v6 + 200;
          v5[53] = v6 + 200;
        }
        v5[53] = v7;
      }
      else if (v4 != 109)
      {
        if (*(char *)(a2 + 23) >= 0)
          v8 = *(unsigned __int8 *)(a2 + 23);
        else
          v8 = *(_QWORD *)(a2 + 8);
        v9 = qword_1ED70E900;
        if (v8)
          v10 = qword_1ED70E900 == 0;
        else
          v10 = 1;
        if (v10)
          goto LABEL_24;
        v11 = &qword_1ED70E900;
        v12 = qword_1ED70E900;
        do
        {
          v13 = *(_DWORD *)(v12 + 32);
          v14 = v13 < v4;
          if (v13 >= v4)
            v15 = (uint64_t *)v12;
          else
            v15 = (uint64_t *)(v12 + 8);
          if (!v14)
            v11 = (uint64_t *)v12;
          v12 = *v15;
        }
        while (*v15);
        if (v11 == &qword_1ED70E900 || v4 < *((_DWORD *)v11 + 8))
        {
LABEL_24:
          std::string::basic_string[abi:ne180100]<0>(v95, "sdp.parser");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v16 = ImsLogger::warn(ims::_logger, (uint64_t)v95, (uint64_t)&__p);
          v17 = v16;
          v18 = *(unsigned __int8 *)(a2 + 23);
          if ((v18 & 0x80u) != 0)
            v18 = *(_QWORD *)(a2 + 8);
          if (v18)
            v19 = "Media parser not found";
          else
            v19 = "Nothing to parse";
          v20 = *(_QWORD **)(v16 + 8);
          if (v18)
            v21 = 22;
          else
            v21 = 16;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v19, v21);
          *(_BYTE *)(v17 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)": '", 3);
          *(_BYTE *)(v17 + 17) = 0;
          v22 = *(_QWORD **)(v17 + 8);
          LOBYTE(v92) = 109;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v92, 1);
          *(_BYTE *)(v17 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"=", 1);
          *(_BYTE *)(v17 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 32))(v17, a2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"'", 1);
          *(_BYTE *)(v17 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v17 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SBYTE7(v96) < 0)
            operator delete(v95[0]);
          v65 = 0;
        }
        else
        {
          do
          {
            while (1)
            {
              v23 = v9;
              v24 = *(_DWORD *)(v9 + 32);
              if (v24 <= v4)
                break;
              v9 = *(_QWORD *)v23;
              if (!*(_QWORD *)v23)
              {
                v56 = (uint64_t **)v23;
                goto LABEL_126;
              }
            }
            if (v24 >= v4)
              goto LABEL_127;
            v9 = *(_QWORD *)(v23 + 8);
          }
          while (v9);
          v56 = (uint64_t **)(v23 + 8);
LABEL_126:
          v57 = operator new(0x30uLL);
          v57[8] = v4;
          *((_QWORD *)v57 + 5) = 0;
          std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>>>::__insert_node_at(v23, v56, (uint64_t *)v57);
          v23 = (uint64_t)v57;
LABEL_127:
          v65 &= (*(uint64_t (**)(uint64_t, void (***)(SDPMedia *__hidden), uint64_t))(v23 + 40))(a1, &v74, a2);
        }
        goto LABEL_123;
      }
      memset(v102, 0, 160);
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      *(_OWORD *)v95 = 0u;
      std::istringstream::basic_istringstream[abi:ne180100](v95, (const std::string *)a2, 8);
      v92 = 0;
      v93 = 0;
      v94 = 0;
      memset(&__str, 0, sizeof(__str));
      v88 = 0;
      v89 = 0;
      v90 = 0;
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v95, (uint64_t)&v92);
      v25 = HIBYTE(v94);
      if (v94 < 0)
        v25 = v93;
      if (v25)
      {
        v26 = 0;
        while (1)
        {
          if (v94 >= 0)
            v27 = (const char *)&v92;
          else
            v27 = (const char *)v92;
          v28 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v29 = (void *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v31 = strcasecmp(v27, (const char *)p_p);
          if (v28 < 0)
            operator delete(v29);
          if (!v31)
            break;
          if (++v26 == 7)
            goto LABEL_61;
        }
        if ((_DWORD)v26)
          goto LABEL_66;
LABEL_61:
        std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parser");
        std::string::basic_string[abi:ne180100]<0>(v86, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v32 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"Unknown MediaType - ", 20);
        *(_BYTE *)(v32 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v32 + 32))(v32, &v92);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)": '", 3);
        *(_BYTE *)(v32 + 17) = 0;
        v33 = *(_QWORD **)(v32 + 8);
        v103 = 109;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v103, 1);
        *(_BYTE *)(v32 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"=", 1);
        *(_BYTE *)(v32 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 32))(v32, a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"'", 1);
        *(_BYTE *)(v32 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v32 + 17) = 0;
        if (v87 < 0)
          operator delete(v86[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      LODWORD(v26) = 0;
LABEL_66:
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v95, (uint64_t)&__str);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      if (size)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        v36 = memchr(p_str, 47, size);
        if (v36)
          v37 = v36 - (_BYTE *)p_str;
        else
          v37 = -1;
        std::string::basic_string(&__p, &__str, 0, v37, (std::allocator<char> *)v86);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v39 = (void *)__p.__r_.__value_.__r.__words[0];
          v38 = atol(__p.__r_.__value_.__l.__data_);
          operator delete(v39);
        }
        else
        {
          v38 = atol((const char *)&__p);
        }
        if (v37 != -1)
        {
          std::string::basic_string(&__p, &__str, v37 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v86);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            v55 = (void *)__p.__r_.__value_.__r.__words[0];
            v40 = atol(__p.__r_.__value_.__l.__data_);
            operator delete(v55);
          }
          else
          {
            v40 = atol((const char *)&__p);
          }
          goto LABEL_84;
        }
      }
      else
      {
        v38 = 0;
      }
      v40 = 0;
LABEL_84:
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v95, (uint64_t)&v88);
      v71 = v40;
      v72 = v38;
      v41 = HIBYTE(v90);
      if (v90 < 0)
        v41 = v89;
      if (v41)
      {
        v42 = 0;
        while (1)
        {
          if (v90 >= 0)
            v43 = (const char *)&v88;
          else
            v43 = (const char *)v88;
          v44 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v45 = (void *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v46 = &__p;
          else
            v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v47 = strcasecmp(v43, (const char *)v46);
          if (v44 < 0)
            operator delete(v45);
          if (!v47)
            break;
          if (++v42 == 9)
            goto LABEL_106;
        }
        if (*(_BYTE *)(a1 + 1) || (v42 - 7) > 1)
        {
          if ((_DWORD)v42)
            goto LABEL_111;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parser");
          std::string::basic_string[abi:ne180100]<0>(v86, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v48 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v48 + 8), (uint64_t)"Unexpected protocol ", 20);
          *(_BYTE *)(v48 + 17) = 0;
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v48 + 32))(v48, &v88);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v48 + 8), (uint64_t)" (", 2);
          *(_BYTE *)(v48 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v48 + 17) = 0;
          v49 = *(_QWORD **)(v48 + 8);
          v103 = 41;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)&v103, 1);
          *(_BYTE *)(v48 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v48 + 17) = 0;
          if (v87 < 0)
            operator delete(v86[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
LABEL_106:
        std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parser");
        std::string::basic_string[abi:ne180100]<0>(v86, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v50 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v50 + 8), (uint64_t)"Unknown ProtocolType - ", 23);
        *(_BYTE *)(v50 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v50 + 32))(v50, &v88);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v50 + 8), (uint64_t)": '", 3);
        *(_BYTE *)(v50 + 17) = 0;
        v51 = *(_QWORD **)(v50 + 8);
        v103 = 109;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)&v103, 1);
        *(_BYTE *)(v50 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v50 + 8), (uint64_t)"=", 1);
        *(_BYTE *)(v50 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 32))(v50, a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v50 + 8), (uint64_t)"'", 1);
        *(_BYTE *)(v50 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v50 + 17) = 0;
        if (v87 < 0)
          operator delete(v86[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      LODWORD(v42) = 0;
LABEL_111:
      SDPMedia::SDPMedia((uint64_t)&__p, v26, v72, v71, v42);
      SDPMedia::operator=((uint64_t)&v74, (uint64_t)&__p);
      SDPMedia::~SDPMedia((SDPMedia *)&__p);
      LOWORD(v86[0]) = 0;
      while (1)
      {
        v52 = (_QWORD *)MEMORY[0x1C3B86E90](v95, v86);
        if ((*((_BYTE *)v52 + *(_QWORD *)(*v52 - 24) + 32) & 5) != 0)
          break;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78E2080;
        LOWORD(__p.__r_.__value_.__r.__words[1]) = v86[0];
        v105 = 1;
        v107 = 0;
        v108 = 0;
        v106 = 0;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&off_1E78EE990;
        v109 = 255;
        v111 = 0;
        v112 = 0;
        v110 = 0;
        v113 = 0;
        v114 = 1;
        v115[1] = 1;
        v115[5] = 255;
        memset(&v115[2], 0, 24);
        v115[0] = &off_1E78B8590;
        memset(&v115[6], 0, 24);
        v116 = 0;
        v53 = operator new(0xF0uLL);
        *v53 = 0;
        v53[1] = 0;
        SDPMediaFormatInfo::SDPMediaFormatInfo((uint64_t)(v53 + 2), (uint64_t)&__p);
        v54 = v79[0];
        *v53 = v79[0];
        v53[1] = v79;
        *(_QWORD *)(v54 + 8) = v53;
        v79[0] = v53;
        *(_QWORD *)&v80 = v80 + 1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78E2080;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v115);
        SDPMediaRTPMap::~SDPMediaRTPMap((void **)&__p.__r_.__value_.__r.__words[2]);
      }
      if (SHIBYTE(v90) < 0)
        operator delete(v88);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v94) < 0)
        operator delete(v92);
      v95[0] = v68;
      *(void **)((char *)v95 + *((_QWORD *)v68 - 3)) = v67;
      *(_QWORD *)&v96 = v66;
      if (SBYTE7(v101) < 0)
        operator delete((void *)v100);
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x1C3B8707C](&v102[8]);
      v3 = 1;
LABEL_123:
      v4 = SDPParser::parseHelper(a3, (uint64_t *)a2);
      if (v4 == 110)
      {
        if ((v3 & 1) != 0)
        {
          v58 = *(_QWORD **)(a1 + 8);
          *((_QWORD *)&v85 + 1) = v58;
          v59 = v58[53];
          if (v59 >= v58[54])
          {
            v60 = std::vector<SDPMedia>::__push_back_slow_path<SDPMedia const&>(v58 + 52, (const SDPMedia *)&v74);
          }
          else
          {
            SDPMedia::SDPMedia((SDPMedia *)v58[53], (const SDPMedia *)&v74);
            v60 = v59 + 200;
            v58[53] = v59 + 200;
          }
          v58[53] = v60;
        }
        SDPMedia::~SDPMedia((SDPMedia *)&v74);
        v63 = v65;
        return v63 & 1;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v95, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v61 = ImsLogger::error(ims::_logger, (uint64_t)v95, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v61 + 8), (uint64_t)"SDPModel is null: '", 19);
  *(_BYTE *)(v61 + 17) = 0;
  v62 = *(_QWORD **)(v61 + 8);
  LOBYTE(v74) = 109;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)&v74, 1);
  *(_BYTE *)(v61 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v61 + 8), (uint64_t)"=", 1);
  *(_BYTE *)(v61 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 32))(v61, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v61 + 8), (uint64_t)"'", 1);
  *(_BYTE *)(v61 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v61 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v96) < 0)
    operator delete(v95[0]);
  v63 = 0;
  return v63 & 1;
}

void sub_1BEE466C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, SDPMediaRTPMap *a16, ...)
{
  va_list va;

  va_start(va, a16);
  SDPMedia::~SDPMedia((SDPMedia *)va);
  _Unwind_Resume(a1);
}

uint64_t std::map<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t std::map<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

uint64_t std::map<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t std::map<std::string,BOOL (*)(SDPMedia &,std::string&)>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

uint64_t std::map<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string),SDPParser::str_caseless_compare,std::allocator<std::pair<std::string const,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

uint64_t std::map<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

uint64_t std::map<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

uint64_t std::map<std::string,unsigned long long>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

uint64_t std::map<std::string,EVSBandwidthTypes>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

void SDPParser::parse(BOOL *a1@<X0>, const std::string *a2@<X1>, _WORD *a3@<X2>, _QWORD *a4@<X8>)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t **v20;
  _DWORD *v21;
  BOOL v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *__p[2];
  __int128 v35;
  _OWORD v36[10];
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  v40 = 0;
  v41 = 0;
  v42 = 0;
  _ZNSt3__115allocate_sharedB8ne180100I8SDPModelNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v41);
  *(_QWORD *)(v41 + 32) = -1;
  LOWORD(v40) = *a3;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  memset(v36, 0, sizeof(v36));
  *(_OWORD *)__p = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100](&v29, a2, 8);
  while (1)
  {
    v8 = SDPParser::parseHelper(&v29, (uint64_t *)&v37);
    v9 = v8;
    if (v8 == 110)
      break;
    if (v39 >= 0)
      v10 = HIBYTE(v39);
    else
      v10 = v38;
    v11 = qword_1ED70E8D0;
    if (v10)
      v12 = qword_1ED70E8D0 == 0;
    else
      v12 = 1;
    if (v12)
      goto LABEL_28;
    v13 = &qword_1ED70E8D0;
    v14 = qword_1ED70E8D0;
    do
    {
      v15 = *(_DWORD *)(v14 + 32);
      v16 = v15 < v8;
      if (v15 >= v8)
        v17 = (uint64_t *)v14;
      else
        v17 = (uint64_t *)(v14 + 8);
      if (!v16)
        v13 = (uint64_t *)v14;
      v14 = *v17;
    }
    while (*v17);
    if (v13 == &qword_1ED70E8D0 || v8 < *((_DWORD *)v13 + 8))
      goto LABEL_28;
    do
    {
      while (1)
      {
        v18 = v11;
        v19 = *(_DWORD *)(v11 + 32);
        if (v19 <= v8)
          break;
        v11 = *(_QWORD *)v18;
        if (!*(_QWORD *)v18)
        {
          v20 = (uint64_t **)v18;
          goto LABEL_25;
        }
      }
      if (v19 >= v8)
        goto LABEL_26;
      v11 = *(_QWORD *)(v18 + 8);
    }
    while (v11);
    v20 = (uint64_t **)(v18 + 8);
LABEL_25:
    v21 = operator new(0x30uLL);
    v21[8] = v9;
    *((_QWORD *)v21 + 5) = 0;
    std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::__insert_node_at(v18, v20, (uint64_t *)v21);
    v18 = (uint64_t)v21;
LABEL_26:
    if (!(*(unsigned int (**)(uint64_t *, void **, __int128 *))(v18 + 40))(&v40, &v37, &v29))
LABEL_28:
      v22 = 0;
    else
      v22 = *a1;
    *a1 = v22;
  }
  v23 = v42;
  *a4 = v41;
  a4[1] = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  *(_QWORD *)&v29 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v29 + *(_QWORD *)(v29 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v30 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v35) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3B8707C]((char *)v36 + 8);
  if (SHIBYTE(v39) < 0)
    operator delete(v37);
  v26 = v42;
  if (v42)
  {
    v27 = (unint64_t *)&v42->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1BEE46C7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x1E0DE4FD8];
  v7 = MEMORY[0x1E0DE4FD8] + 64;
  a1[15] = MEMORY[0x1E0DE4FD8] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_1BEE46D6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1C3B8707C](v1);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseHelper(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  std::string::size_type size;
  std::string *p_str;
  uint64_t v8;
  _BYTE *v9;
  std::string::size_type v10;
  std::string v12;
  std::string __str;
  char v14;

  v2 = a2;
  memset(&__str, 0, sizeof(__str));
  if (*((char *)a2 + 23) < 0)
  {
    *(_BYTE *)*a2 = 0;
    a2[1] = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *((_BYTE *)a2 + 23) = 0;
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v4 = std::locale::use_facet((const std::locale *)&v12, MEMORY[0x1E0DE4A90]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale((std::locale *)&v12);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)&__str, v5);
  ims::chomp(&__str, "\r\n\t ", 3);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    v8 = p_str->__r_.__value_.__s.__data_[0];
    if (*((char *)v2 + 23) < 0)
    {
      v2[1] = 0;
      v9 = (_BYTE *)*v2;
    }
    else
    {
      *((_BYTE *)v2 + 23) = 0;
      v9 = v2;
    }
    *v9 = 0;
    v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = __str.__r_.__value_.__l.__size_;
    if (v10 < 3)
    {
      if ((_DWORD)v8 == 115)
      {
        if (*((char *)v2 + 23) < 0)
        {
          v2[1] = 1;
          v2 = (uint64_t *)*v2;
        }
        else
        {
          *((_BYTE *)v2 + 23) = 1;
        }
        *(_WORD *)v2 = 32;
        v8 = 115;
      }
    }
    else
    {
      std::string::basic_string(&v12, &__str, 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
      if (*((char *)v2 + 23) < 0)
        operator delete((void *)*v2);
      *(std::string *)v2 = v12;
    }
  }
  else
  {
    v8 = 110;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1BEE46F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  v20 = 0;
  MEMORY[0x1C3B86E6C](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_14;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1BEE4712C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BEE470F8);
  }
  __cxa_rethrow();
}

void sub_1BEE47190(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

__n128 SDPModel::setOrigin(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 68) = *(_QWORD *)(a2 + 28);
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 40));
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 64);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 72));
  result = *(__n128 *)(a2 + 96);
  *(__n128 *)(a1 + 136) = result;
  return result;
}

void SDPParser::parseConnectionHelper(const std::string *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  void **v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  void **v29;
  uint64_t v30;
  char v31;
  char v32;
  std::string *v33;
  int v34;
  std::string v35;
  void *__p[2];
  char v37;
  void *v38[2];
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *v45[2];
  __int128 v46;
  _OWORD v47[10];
  void *v48;
  size_t v49;
  uint64_t v50;
  void *v51;
  size_t v52;
  uint64_t v53;
  std::string v54;

  memset(&v54, 0, sizeof(v54));
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  memset(v47, 0, sizeof(v47));
  *(_OWORD *)v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100](&v40, a1, 8);
  v6 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v40, (uint64_t)&v51);
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0
    || (v7 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v40, (uint64_t)&v48), (*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)|| (v8 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v40, (uint64_t)&v54), (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::error(ims::_logger, (uint64_t)v38, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"SDPConnection is missing something: '", 37);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v9 + 32))(v9, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v9 + 17) = 0;
    v8 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v37 < 0)
      operator delete(__p[0]);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  v10 = 0;
  v11 = 1;
  while (1)
  {
    v12 = v11;
    v8 = SDPConnection::networkTypeLookup((SDPConnection *)v8);
    v13 = &v8[3 * v10];
    v14 = HIBYTE(v53);
    if (v53 >= 0)
      v15 = HIBYTE(v53);
    else
      v15 = v52;
    v16 = *((unsigned __int8 *)v13 + 23);
    v17 = (char)v16;
    if ((v16 & 0x80u) != 0)
      v16 = v13[1];
    if (v15 != v16)
      goto LABEL_25;
    v18 = v17 >= 0 ? &v8[3 * v10] : (uint64_t *)*v13;
    if (v53 < 0)
      break;
    if (!HIBYTE(v53))
      goto LABEL_27;
    v19 = &v51;
    while (*(unsigned __int8 *)v19 == *(unsigned __int8 *)v18)
    {
      v19 = (void **)((char *)v19 + 1);
      v18 = (uint64_t *)((char *)v18 + 1);
      if (!--v14)
        goto LABEL_27;
    }
LABEL_25:
    v11 = 0;
    v10 = 1;
    if ((v12 & 1) == 0)
      goto LABEL_28;
  }
  v8 = (uint64_t *)memcmp(v51, v18, v52);
  if ((_DWORD)v8)
    goto LABEL_25;
LABEL_27:
  if ((v12 & 1) == 0)
  {
    v21 = 1;
    goto LABEL_34;
  }
LABEL_28:
  std::string::basic_string[abi:ne180100]<0>(v38, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v20 = ImsLogger::error(ims::_logger, (uint64_t)v38, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"SDPConnection: NetworkType set to kNetworkTypeUnknown: '", 56);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v20 + 32))(v20, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"'", 1);
  *(_BYTE *)(v20 + 17) = 0;
  v8 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v20 + 17) = 0;
  if (v37 < 0)
    operator delete(__p[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  v21 = 0;
LABEL_34:
  v22 = 0;
  while (2)
  {
    v8 = SDPConnection::addressTypeLookup((SDPConnection *)v8);
    v23 = &v8[3 * v22];
    v24 = HIBYTE(v50);
    if (v50 >= 0)
      v25 = HIBYTE(v50);
    else
      v25 = v49;
    v26 = *((unsigned __int8 *)v23 + 23);
    v27 = (char)v26;
    if ((v26 & 0x80u) != 0)
      v26 = v23[1];
    if (v25 != v26)
      goto LABEL_51;
    if (v27 >= 0)
      v28 = &v8[3 * v22];
    else
      v28 = (uint64_t *)*v23;
    if ((v50 & 0x8000000000000000) == 0)
    {
      if (!HIBYTE(v50))
        break;
      v29 = &v48;
      while (*(unsigned __int8 *)v29 == *(unsigned __int8 *)v28)
      {
        v29 = (void **)((char *)v29 + 1);
        v28 = (uint64_t *)((char *)v28 + 1);
        if (!--v24)
          goto LABEL_53;
      }
      goto LABEL_51;
    }
    v8 = (uint64_t *)memcmp(v48, v28, v49);
    if ((_DWORD)v8)
    {
LABEL_51:
      if (++v22 == 3)
        goto LABEL_54;
      continue;
    }
    break;
  }
LABEL_53:
  if ((_DWORD)v22)
    goto LABEL_59;
LABEL_54:
  std::string::basic_string[abi:ne180100]<0>(v38, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v30 = ImsLogger::error(ims::_logger, (uint64_t)v38, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"SDPConnection: AddressType set to kAddressTypeUnknown: '", 56);
  *(_BYTE *)(v30 + 17) = 0;
  (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v30 + 32))(v30, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"'", 1);
  *(_BYTE *)(v30 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v30 + 17) = 0;
  if (v37 < 0)
    operator delete(__p[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  LODWORD(v22) = 0;
LABEL_59:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v35, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  else
    v35 = v54;
  v31 = *a2;
  v32 = a2[1];
  *(_BYTE *)(a3 + 8) = 1;
  *(_QWORD *)a3 = off_1E78D19C0;
  *(_DWORD *)(a3 + 12) = v21;
  *(_DWORD *)(a3 + 16) = v22;
  v33 = (std::string *)(a3 + 24);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v33, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    v34 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
    *(_BYTE *)(a3 + 48) = v31;
    *(_BYTE *)(a3 + 49) = v32;
    if (v34 < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 40) = *((_QWORD *)&v35.__r_.__value_.__l + 2);
    *(_BYTE *)(a3 + 48) = v31;
    *(_BYTE *)(a3 + 49) = v32;
  }
  *(_QWORD *)&v40 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v40 + *(_QWORD *)(v40 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v41 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v46) < 0)
    operator delete(v45[0]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3B8707C]((char *)v47 + 8);
  if (SHIBYTE(v50) < 0)
    operator delete(v48);
  if (SHIBYTE(v53) < 0)
    operator delete(v51);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
}

void sub_1BEE477DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  std::istringstream::~istringstream((uint64_t)&a28);
  if (*(char *)(v28 - 113) < 0)
    operator delete(*(void **)(v28 - 136));
  if (*(char *)(v28 - 89) < 0)
    operator delete(*(void **)(v28 - 112));
  if (*(char *)(v28 - 65) < 0)
    operator delete(*(void **)(v28 - 88));
  _Unwind_Resume(a1);
}

uint64_t SDPParser::getTimeInSeconds(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  void *v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *v19[2];
  __int128 v20;
  _BYTE v21[168];
  uint64_t v22;
  char v23;
  void *v24[2];
  char v25;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v23 = 0;
    v22 = 0;
    memset(v21, 0, 160);
    *(_OWORD *)v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)v14 = 0u;
    std::istringstream::basic_istringstream[abi:ne180100](v14, (const std::string *)a1, 8);
    v3 = (_QWORD *)MEMORY[0x1C3B86E9C](v14, &v22);
    if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "sdp.parser");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::error(ims::_logger, (uint64_t)v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Unable to parse time: ", 22);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a1);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (v13 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
      v5 = 0;
      goto LABEL_25;
    }
    v7 = std::operator>>[abi:ne180100]<char,std::char_traits<char>>(v14, &v23);
    if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) == 0)
    {
      switch(v23)
      {
        case 'm':
          v10 = 60 * v22;
LABEL_23:
          v22 = v10;
          break;
        case 'h':
          v8 = v22;
          v9 = 3600;
          goto LABEL_22;
        case 'd':
          v8 = v22;
          v9 = 86400;
LABEL_22:
          v10 = v8 * v9;
          goto LABEL_23;
      }
    }
    v5 = v22;
LABEL_25:
    v14[0] = *(void **)MEMORY[0x1E0DE4F58];
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F58] + 24);
    *(_QWORD *)&v15 = MEMORY[0x1E0DE4FB8] + 16;
    if (SBYTE7(v20) < 0)
      operator delete(v19[0]);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1C3B8707C](&v21[8]);
    return v5;
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(v24, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::warn(ims::_logger, (uint64_t)v14, (uint64_t)v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Nothing to parse as time.", 25);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v25 < 0)
    operator delete(v24[0]);
  if (SBYTE7(v15) < 0)
    operator delete(v14[0]);
  return 0;
}

void sub_1BEE47B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::operator>>[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, _BYTE *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  char v8;

  v8 = 0;
  MEMORY[0x1C3B86E6C](&v8, a1, 0);
  if (v8)
  {
    v4 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v5 = (_BYTE *)v4[3];
    if (v5 == (_BYTE *)v4[4])
    {
      LODWORD(v4) = (*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4);
      if ((_DWORD)v4 == -1)
      {
        v6 = 6;
        goto LABEL_6;
      }
    }
    else
    {
      v4[3] = v5 + 1;
      LOBYTE(v4) = *v5;
    }
    v6 = 0;
    *a2 = (_BYTE)v4;
LABEL_6:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v6);
  }
  return a1;
}

void sub_1BEE47CB0(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BEE47C7CLL);
  }
  __cxa_rethrow();
}

void sub_1BEE47CF0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100I8SDPModelNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1@<X8>)
{
  char *v2;

  v2 = (char *)operator new(0x1D0uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E78BB3E0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *((_QWORD *)v2 + 57) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  SDPModel::SDPModel((SDPModel *)(v2 + 24));
  *a1 = v2 + 24;
  a1[1] = v2;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, (_QWORD *)v2 + 5, (uint64_t)(v2 + 24));
}

void std::__shared_ptr_emplace<SDPModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BB3E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SDPModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BB3E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SDPModel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void SDPModel::SDPModel(SDPModel *this)
{
  *((_BYTE *)this + 8) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E78E5C28;
  *((_BYTE *)this + 48) = 1;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = &off_1E78EEBC0;
  *((_BYTE *)this + 64) = 1;
  *((_QWORD *)this + 7) = off_1E78D19C0;
  *((_DWORD *)this + 17) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_WORD *)this + 52) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 28) = (char *)this + 224;
  *((_QWORD *)this + 29) = (char *)this + 224;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = (char *)this + 248;
  *((_QWORD *)this + 32) = (char *)this + 248;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = (char *)this + 272;
  *((_QWORD *)this + 35) = (char *)this + 272;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = (char *)this + 296;
  *((_QWORD *)this + 38) = (char *)this + 296;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = (char *)this + 320;
  *((_QWORD *)this + 41) = (char *)this + 320;
  *((_QWORD *)this + 42) = 0;
  *((_BYTE *)this + 344) = 0;
  *((_BYTE *)this + 384) = 0;
  *((_QWORD *)this + 49) = (char *)this + 392;
  *((_QWORD *)this + 50) = (char *)this + 392;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
}

std::string *SDPOrigin::SDPOrigin(std::string *a1, uint64_t a2, __int128 *a3, std::string::size_type a4, std::string::size_type a5)
{
  std::string *v9;
  __int128 v10;

  a1->__r_.__value_.__s.__data_[8] = 1;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78EEBC0;
  SDPConnection::SDPConnection((uint64_t)&a1->__r_.__value_.__r.__words[2], a2);
  v9 = a1 + 3;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    a1[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  a1[4].__r_.__value_.__r.__words[0] = a4;
  a1[4].__r_.__value_.__l.__size_ = a5;
  return a1;
}

void sub_1BEE47F34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = off_1E78D19C0;
  if (*(char *)(v1 + 63) < 0)
    operator delete(*(void **)(v1 + 40));
  _Unwind_Resume(exception_object);
}

uint64_t SDPConnection::SDPConnection(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78D19C0;
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  v4 = (std::string *)(a1 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  return a1;
}

void SDPOrigin::~SDPOrigin(void **this)
{
  *this = &off_1E78EEBC0;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  this[2] = off_1E78D19C0;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
}

{
  SDPOrigin::~SDPOrigin(this);
  JUMPOUT(0x1C3B87100);
}

void std::__list_imp<SDPRepeatTime>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        (*(void (**)(uint64_t *))v3[2])(v3 + 2);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

_QWORD *std::list<unsigned long long>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1BEE48124(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned long long>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::optional<SDPTimeZone>::operator=[abi:ne180100]<SDPTimeZone,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 40))
  {
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    if (a1 != a2)
      std::list<std::pair<unsigned long long,long>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,long>,void *>,std::__list_const_iterator<std::pair<unsigned long long,long>,void *>>((uint64_t *)(a1 + 16), *(_QWORD *)(a2 + 24), a2 + 16);
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 1;
    *(_QWORD *)a1 = &off_1E78EDC68;
    std::list<std::pair<unsigned long long,long>>::list((_QWORD *)(a1 + 16), a2 + 16);
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

_QWORD *std::list<std::pair<unsigned long long,long>>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x20uLL);
      v7[1] = *(_OWORD *)(v3 + 16);
      *(_QWORD *)v7 = v6;
      *((_QWORD *)v7 + 1) = a1;
      *((_QWORD *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1BEE4822C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned long long>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::list<std::pair<unsigned long long,long>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,long>,void *>,std::__list_const_iterator<std::pair<unsigned long long,long>,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;

  for (i = (uint64_t *)a1[1]; a2 != a3 && i != a1; i = (uint64_t *)i[1])
  {
    *((_OWORD *)i + 1) = *(_OWORD *)(a2 + 16);
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (i == a1)
    return std::list<std::pair<unsigned long long,long>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,long>,void *>,std::__list_const_iterator<std::pair<unsigned long long,long>,void *>>((uint64_t)a1, a1, a2, a3);
  else
    return std::list<std::pair<unsigned long long,long>>::erase((uint64_t)a1, i, a1);
}

uint64_t *std::list<std::pair<unsigned long long,long>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,long>,void *>,std::__list_const_iterator<std::pair<unsigned long long,long>,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = operator new(0x20uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    *((_OWORD *)v8 + 1) = *(_OWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = v8;
      do
      {
        v8 = operator new(0x20uLL);
        *v8 = v12;
        v8[1] = 0;
        *((_OWORD *)v8 + 1) = *(_OWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1BEE48360(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1BEE48380(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::list<std::pair<unsigned long long,long>>::erase(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (__p != a3)
  {
    v5 = *a3;
    v6 = *__p;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    do
    {
      v7 = (uint64_t *)__p[1];
      --*(_QWORD *)(a1 + 16);
      operator delete(__p);
      __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

uint64_t SDPUnsupportedAttribute::SDPUnsupportedAttribute(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78ED0A8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)(a1 + 16) = __p;
  }
  *(_QWORD *)a1 = &off_1E78BB4C8;
  v5 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1BEE484E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  uint64_t v16;

  *(_QWORD *)v14 = v16;
  if (*(char *)(v14 + 39) < 0)
    operator delete(*v15);
  _Unwind_Resume(exception_object);
}

void SDPUnsupportedAttribute::~SDPUnsupportedAttribute(void **this)
{
  SDPUnsupportedAttribute::~SDPUnsupportedAttribute(this);
  JUMPOUT(0x1C3B87100);
}

{
  *this = &off_1E78BB4C8;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

void SDPUnsupportedAttribute::value(SDPUnsupportedAttribute *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 7);
  }
}

void std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::clear(unsigned int *a1)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (unsigned int *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (unsigned int *)*((_QWORD *)v3 + 1);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>,(std::__variant_detail::_Trait)1>::~__dtor(v3 + 4);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

unsigned int *std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>,(std::__variant_detail::_Trait)1>::~__dtor(unsigned int *a1)
{
  uint64_t v2;
  char v4;

  v2 = a1[30];
  if ((_DWORD)v2 != -1)
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix[v2]((int)&v4, (SDPRTCPXR *)a1);
  a1[30] = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
  SDPRTCPXR::~SDPRTCPXR(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
  SDPUnsupportedAttribute::~SDPUnsupportedAttribute(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
  SDPMediaCandidate::~SDPMediaCandidate(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, SDPMediaCrypto *this)
{
  SDPMediaCrypto::~SDPMediaCrypto(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
  SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
  SDPMediaRTPMap::~SDPMediaRTPMap(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
  SDPMediaPath::~SDPMediaPath(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
  SDPMediaAcceptTypes::~SDPMediaAcceptTypes(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
  SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
  SDPMediaSetup::~SDPMediaSetup(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJ9SDPRTCPXR23SDPUnsupportedAttribute17SDPMediaCandidate14SDPMediaCrypto17SDPMediaDirection33SDPMediaEndToAccessEdgeProtection27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParams14SDPMediaRTPMap29SDPPacketizationTimeAttribute12SDPMediaPath19SDPMediaAcceptTypes26SDPMediaAcceptWrappedTypes13SDPMediaSetup19SDPMediaFingerprintEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_S9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_EEEEEEDcSU_DpT0_(int a1, void **this)
{
  SDPMediaFingerprint::~SDPMediaFingerprint(this);
}

void SDPRTCPXR::~SDPRTCPXR(void **this)
{
  void **v2;

  *this = &off_1E78C1BE0;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  v2 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 5));
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  SDPRTCPXR::~SDPRTCPXR(this);
  JUMPOUT(0x1C3B87100);
}

void SDPMediaCandidate::~SDPMediaCandidate(void **this)
{
  *this = &off_1E78BD508;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  SDPMediaCandidate::~SDPMediaCandidate(this);
  JUMPOUT(0x1C3B87100);
}

void SDPMediaCrypto::~SDPMediaCrypto(SDPMediaCrypto *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E78E2A68;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  SDPMediaCrypto::~SDPMediaCrypto(this);
  JUMPOUT(0x1C3B87100);
}

void SDPMediaRTPMap::~SDPMediaRTPMap(void **this)
{
  *this = &off_1E78EE990;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  SDPMediaRTPMap::~SDPMediaRTPMap(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::vector<SDPMedia>::__push_back_slow_path<SDPMedia const&>(uint64_t *a1, const SDPMedia *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  SDPMedia *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x147AE147AE147AELL)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8F5C28F5C28F5C29 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xA3D70A3D70A3D7)
    v9 = 0x147AE147AE147AELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPMedia>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (SDPMedia *)&v10[200 * v4];
  v16 = &v10[200 * v9];
  SDPMedia::SDPMedia(v14, a2);
  v15 = (char *)v14 + 200;
  std::vector<SDPMedia>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<SDPMedia>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1BEE48A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<SDPMedia>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SDPMedia>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SDPMedia>,std::reverse_iterator<SDPMedia*>,std::reverse_iterator<SDPMedia*>,std::reverse_iterator<SDPMedia*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SDPMedia>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(200 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SDPMedia>,std::reverse_iterator<SDPMedia*>,std::reverse_iterator<SDPMedia*>,std::reverse_iterator<SDPMedia*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  SDPMedia *v12;

  v10 = 0;
  v11 = a7 - 200;
  while (a3 + v10 != a5)
  {
    v12 = (SDPMedia *)(v11 + v10);
    v10 -= 200;
    SDPMedia::SDPMedia(v12, (const SDPMedia *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<SDPMedia>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 200);
    *(_QWORD *)(a1 + 16) = i - 200;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(_QWORD *)_MergedGlobals_1)
  {
    _MergedGlobals_1 = *(_QWORD *)_MergedGlobals_1;
    a3 = *a2;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ED70E8D0, a3);
  ++qword_1ED70E8D8;
  return result;
}

void std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*a1);
    std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(_QWORD *)qword_1ED70E8E0)
  {
    qword_1ED70E8E0 = *(_QWORD *)qword_1ED70E8E0;
    a3 = *a2;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ED70E8E8, a3);
  ++qword_1ED70E8F0;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>>>::__find_equal<std::string>(uint64_t **a1, void **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  _QWORD *v7;

  v3 = &qword_1ED70E8E8;
  v4 = qword_1ED70E8E8;
  if (qword_1ED70E8E8)
  {
    v6 = &qword_1ED70E8E8;
    do
    {
      while (1)
      {
        v3 = (uint64_t *)v4;
        v7 = (_QWORD *)(v4 + 32);
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)(v4 + 32)) & 0x80) == 0)
          break;
        v4 = *v3;
        v6 = v3;
        if (!*v3)
          goto LABEL_10;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2) & 0x80) == 0)
        break;
      v6 = v3 + 1;
      v4 = v3[1];
    }
    while (v4);
  }
  else
  {
    v6 = &qword_1ED70E8E8;
  }
LABEL_10:
  *a1 = v3;
  return v6;
}

uint64_t *std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(_QWORD *)qword_1ED70E8F8)
  {
    qword_1ED70E8F8 = *(_QWORD *)qword_1ED70E8F8;
    a3 = *a2;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ED70E900, a3);
  ++qword_1ED70E908;
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    if (*(char *)(a3 + 23) >= 0)
      v6 = (const char *)a3;
    else
      v6 = *(const char **)a3;
    do
    {
      while (1)
      {
        v7 = v4;
        v10 = (_QWORD *)v4[4];
        v8 = v4 + 4;
        v9 = v10;
        v11 = (const char *)(*((char *)v8 + 23) >= 0 ? v8 : v9);
        if ((strcasecmp(v6, v11) & 0x80000000) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_15;
      }
      if ((strcasecmp(v11, v6) & 0x80000000) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_15:
  *a2 = v7;
  return v5;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_1BEE48F20(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  v11 = 0;
  MEMORY[0x1C3B86E6C](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1BEE49074(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BEE49040);
  }
  __cxa_rethrow();
}

void sub_1BEE490B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  std::string *v8;

  v7 = operator new(0x28uLL);
  *v7 = a2;
  v7[1] = a3;
  v8 = (std::string *)(v7 + 2);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v7[4] = *(_QWORD *)(a4 + 16);
  }
  return v7;
}

void sub_1BEE49130(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<SDPTiming>::__create_node[abi:ne180100]<SDPTiming>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPTiming *a4)
{
  _QWORD *v7;

  v7 = operator new(0x48uLL);
  *v7 = a2;
  v7[1] = a3;
  SDPTiming::SDPTiming((SDPTiming *)(v7 + 2), a4);
  return v7;
}

void sub_1BEE4918C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void SDPTiming::SDPTiming(SDPTiming *this, const SDPTiming *a2)
{
  char *v3;
  char *v4;
  uint64_t i;
  _QWORD *v6;
  uint64_t v7;

  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = &off_1E78EDC20;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  v3 = (char *)this + 32;
  *((_QWORD *)this + 4) = (char *)this + 32;
  *((_QWORD *)this + 5) = (char *)this + 32;
  *((_QWORD *)this + 6) = 0;
  v4 = (char *)a2 + 32;
  for (i = *((_QWORD *)a2 + 5); (char *)i != v4; i = *(_QWORD *)(i + 8))
  {
    v6 = std::__list_imp<SDPRepeatTime>::__create_node[abi:ne180100]<SDPRepeatTime const&>((uint64_t)v3, 0, 0, i + 16);
    v7 = *((_QWORD *)this + 4);
    *v6 = v7;
    v6[1] = v3;
    *(_QWORD *)(v7 + 8) = v6;
    *((_QWORD *)this + 4) = v6;
    ++*((_QWORD *)this + 6);
  }
}

void sub_1BEE49238(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<SDPRepeatTime>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<SDPRepeatTime>::__create_node[abi:ne180100]<SDPRepeatTime const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0x48uLL);
  *v7 = a2;
  v7[1] = a3;
  *((_BYTE *)v7 + 24) = 1;
  v7[2] = &off_1E78EDBD8;
  *((_OWORD *)v7 + 2) = *(_OWORD *)(a4 + 16);
  std::list<unsigned long long>::list(v7 + 6, a4 + 32);
  return v7;
}

void sub_1BEE492B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPUnsupportedAttribute>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0x90uLL);
  *v7 = a2;
  v7[1] = a3;
  std::__variant_detail::__alt<1ul,SDPUnsupportedAttribute>::__alt[abi:ne180100]<SDPUnsupportedAttribute>((uint64_t)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 1;
  return v7;
}

void sub_1BEE49318(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__alt<1ul,SDPUnsupportedAttribute>::__alt[abi:ne180100]<SDPUnsupportedAttribute>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  *(_QWORD *)a1 = &off_1E78BB4C8;
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1BEE493D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_SDPParser_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  _OWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  int v8;
  uint64_t **v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  const std::string::value_type **v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  std::string *v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  int v30;
  uint64_t **v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  const std::string::value_type **v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t *v42;
  std::string *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  const char **v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  const char *v52;
  const char *v53;
  uint64_t **v54;
  uint64_t *v55;
  std::string *v56;
  uint64_t j;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  const std::string::value_type **v61;
  uint64_t *v62;
  uint64_t **v63;
  uint64_t *v64;
  uint64_t *v65;
  std::string *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  const std::string::value_type **v71;
  uint64_t *v72;
  uint64_t **v73;
  uint64_t *v74;
  uint64_t *v75;
  std::string *v76;
  uint64_t k;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  const std::string::value_type **v81;
  uint64_t *v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t *v85;
  std::string *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  const std::string::value_type **v91;
  uint64_t *v92;
  uint64_t **v93;
  uint64_t *v94;
  char *v95;
  std::string *v96;
  uint64_t m;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  _QWORD v103[3];
  uint64_t v104;
  _QWORD v105[3];
  uint64_t v106;
  _QWORD v107[3];
  uint64_t v108;
  _QWORD v109[3];
  uint64_t v110;
  _QWORD v111[3];
  uint64_t v112;
  _QWORD v113[3];
  uint64_t v114;
  _QWORD v115[3];
  uint64_t v116;
  _QWORD v117[3];
  uint64_t v118;
  _QWORD v119[3];
  uint64_t v120;
  _QWORD v121[3];
  uint64_t v122;
  _QWORD v123[3];
  uint64_t v124;
  _QWORD v125[3];
  uint64_t v126;
  _QWORD v127[3];
  uint64_t v128;
  _QWORD v129[3];
  uint64_t v130;
  _QWORD v131[3];
  uint64_t v132;
  _QWORD v133[3];
  uint64_t v134;
  _QWORD v135[3];
  uint64_t v136;
  _QWORD v137[3];
  uint64_t v138;
  _QWORD v139[3];
  uint64_t v140;
  _QWORD v141[4];
  _QWORD v142[6];

  v0 = 0;
  v1 = 0;
  v142[4] = *MEMORY[0x1E0C80C00];
  qword_1ED70E8D0 = 0;
  v2 = &qword_1ED70E8D0;
  qword_1ED70E8D8 = 0;
  _MergedGlobals_1 = (uint64_t)&qword_1ED70E8D0;
  while (1)
  {
    v3 = (_OWORD *)((char *)&unk_1E78BB290 + 16 * v1);
    if (v2 == &qword_1ED70E8D0)
    {
      v5 = &qword_1ED70E8D0;
LABEL_10:
      if (v0)
      {
        v9 = (uint64_t **)(v5 + 1);
        if (v5[1])
          goto LABEL_23;
      }
      else
      {
LABEL_21:
        v9 = (uint64_t **)&qword_1ED70E8D0;
        v5 = &qword_1ED70E8D0;
      }
LABEL_22:
      v12 = (uint64_t *)operator new(0x30uLL);
      *((_OWORD *)v12 + 2) = *v3;
      std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::__insert_node_at((uint64_t)v5, v9, v12);
      goto LABEL_23;
    }
    v4 = (uint64_t *)v0;
    if (v0)
    {
      do
      {
        v5 = v4;
        v4 = (uint64_t *)v4[1];
      }
      while (v4);
    }
    else
    {
      v6 = &qword_1ED70E8D0;
      do
      {
        v5 = (uint64_t *)v6[2];
        v7 = *v5 == (_QWORD)v6;
        v6 = v5;
      }
      while (v7);
    }
    v8 = *(_DWORD *)v3;
    if (*((_DWORD *)v5 + 8) < *(_DWORD *)v3)
      goto LABEL_10;
    if (!v0)
      goto LABEL_21;
    v10 = v0;
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t *)v10;
        v11 = *(_DWORD *)(v10 + 32);
        if (v11 <= v8)
          break;
        v10 = *v5;
        v9 = (uint64_t **)v5;
        if (!*v5)
          goto LABEL_22;
      }
      if (v11 >= v8)
        break;
      v10 = v5[1];
      if (!v10)
      {
        v9 = (uint64_t **)(v5 + 1);
        goto LABEL_22;
      }
    }
LABEL_23:
    if (++v1 == 15)
      break;
    v2 = (uint64_t *)_MergedGlobals_1;
    v0 = qword_1ED70E8D0;
  }
  __cxa_atexit((void (*)(void *))std::map<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>::~map[abi:ne180100], &_MergedGlobals_1, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(v103, "sendrecv");
  v104 = (uint64_t)SDPParser::parseSessionSendRecvAttribute;
  std::string::basic_string[abi:ne180100]<0>(v105, "sendonly");
  v106 = (uint64_t)SDPParser::parseSessionSendOnlyAttribute;
  std::string::basic_string[abi:ne180100]<0>(v107, "recvonly");
  v108 = (uint64_t)SDPParser::parseSessionRecvOnlyAttribute;
  std::string::basic_string[abi:ne180100]<0>(v109, "inactive");
  v13 = 0;
  v14 = 0;
  v110 = (uint64_t)SDPParser::parseSessionInactiveAttribute;
  qword_1ED70E8E8 = 0;
  v15 = &qword_1ED70E8E8;
  qword_1ED70E8F0 = 0;
  qword_1ED70E8E0 = (uint64_t)&qword_1ED70E8E8;
  while (1)
  {
    v16 = (const std::string::value_type **)&v103[4 * v14];
    v99 = 0;
    if (v15 == &qword_1ED70E8E8)
    {
      v17 = &qword_1ED70E8E8;
      if (v13)
        goto LABEL_31;
    }
    else
    {
      if (v13)
      {
        do
        {
          v17 = (uint64_t *)v13;
          v13 = *(_QWORD *)(v13 + 8);
        }
        while (v13);
      }
      else
      {
        v19 = &qword_1ED70E8E8;
        do
        {
          v17 = (uint64_t *)v19[2];
          v7 = *v17 == (_QWORD)v19;
          v19 = v17;
        }
        while (v7);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17 + 4, (void **)&v103[4 * v14]) & 0x80) == 0)
      {
        v18 = std::__tree<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>>>::__find_equal<std::string>(&v99, (void **)&v103[4 * v14]);
LABEL_36:
        if (*v18)
          goto LABEL_44;
        goto LABEL_40;
      }
      if (qword_1ED70E8E8)
      {
LABEL_31:
        v99 = v17;
        v18 = v17 + 1;
        goto LABEL_36;
      }
    }
    v99 = &qword_1ED70E8E8;
    v18 = &qword_1ED70E8E8;
LABEL_40:
    v20 = (uint64_t *)operator new(0x40uLL);
    v21 = (std::string *)(v20 + 4);
    if (*((char *)v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v21, *v16, (std::string::size_type)v16[1]);
    }
    else
    {
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
      v20[6] = (uint64_t)v16[2];
    }
    v20[7] = v103[4 * v14 + 3];
    std::__tree<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>>>::__insert_node_at((uint64_t)v99, (uint64_t **)v18, v20);
LABEL_44:
    if (++v14 == 4)
      break;
    v15 = (uint64_t *)qword_1ED70E8E0;
    v13 = qword_1ED70E8E8;
  }
  for (i = 0; i != -16; i -= 4)
  {
    if (SHIBYTE(v109[i + 2]) < 0)
      operator delete((void *)v109[i]);
  }
  __cxa_atexit((void (*)(void *))std::map<std::string,void (*)(std::shared_ptr<SDPModel>,std::string&)>::~map[abi:ne180100], &qword_1ED70E8E0, &dword_1BEDF4000);
  v23 = 0;
  v24 = 0;
  qword_1ED70E900 = 0;
  qword_1ED70E908 = 0;
  v25 = &qword_1ED70E900;
  qword_1ED70E8F8 = (uint64_t)&qword_1ED70E900;
  while (2)
  {
    v26 = (int *)((char *)&unk_1E78BB380 + 16 * v24);
    if (v25 == &qword_1ED70E900)
    {
      v28 = &qword_1ED70E900;
      goto LABEL_59;
    }
    v27 = (uint64_t *)v23;
    if (v23)
    {
      do
      {
        v28 = v27;
        v27 = (uint64_t *)v27[1];
      }
      while (v27);
    }
    else
    {
      v29 = &qword_1ED70E900;
      do
      {
        v28 = (uint64_t *)v29[2];
        v7 = *v28 == (_QWORD)v29;
        v29 = v28;
      }
      while (v7);
    }
    v30 = *v26;
    if (*((_DWORD *)v28 + 8) >= *v26)
    {
      if (v23)
      {
        v32 = v23;
        while (1)
        {
          while (1)
          {
            v28 = (uint64_t *)v32;
            v33 = *(_DWORD *)(v32 + 32);
            if (v33 <= v30)
              break;
            v32 = *v28;
            v31 = (uint64_t **)v28;
            if (!*v28)
              goto LABEL_71;
          }
          if (v33 >= v30)
            goto LABEL_72;
          v32 = v28[1];
          if (!v32)
          {
            v31 = (uint64_t **)(v28 + 1);
            goto LABEL_71;
          }
        }
      }
LABEL_70:
      v31 = (uint64_t **)&qword_1ED70E900;
      v28 = &qword_1ED70E900;
      goto LABEL_71;
    }
LABEL_59:
    if (!v23)
      goto LABEL_70;
    v31 = (uint64_t **)(v28 + 1);
    if (!v28[1])
    {
LABEL_71:
      v34 = (uint64_t *)operator new(0x30uLL);
      *((_OWORD *)v34 + 2) = *(_OWORD *)v26;
      std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>>>::__insert_node_at((uint64_t)v28, v31, v34);
    }
LABEL_72:
    if (++v24 != 5)
    {
      v25 = (uint64_t *)qword_1ED70E8F8;
      v23 = qword_1ED70E900;
      continue;
    }
    break;
  }
  __cxa_atexit((void (*)(void *))std::map<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,SDPMedia &,std::string &)>::~map[abi:ne180100], &qword_1ED70E8F8, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(v103, "sendrecv");
  v104 = (uint64_t)SDPParser::parseMediaSendRecvAttribute;
  std::string::basic_string[abi:ne180100]<0>(v105, "sendonly");
  v106 = (uint64_t)SDPParser::parseMediaSendOnlyAttribute;
  std::string::basic_string[abi:ne180100]<0>(v107, "recvonly");
  v108 = (uint64_t)SDPParser::parseMediaRecvOnlyAttribute;
  std::string::basic_string[abi:ne180100]<0>(v109, "inactive");
  v110 = (uint64_t)SDPParser::parseMediaInactiveAttribute;
  std::string::basic_string[abi:ne180100]<0>(v111, "ptime");
  v112 = (uint64_t)SDPParser::parseMediaPacketTimeAttribute;
  std::string::basic_string[abi:ne180100]<0>(v113, "maxptime");
  v114 = (uint64_t)SDPParser::parseMediaMaxPacketTimeAttribute;
  std::string::basic_string[abi:ne180100]<0>(v115, "candidate");
  v116 = (uint64_t)SDPParser::parseMediaCandidateAttribute;
  std::string::basic_string[abi:ne180100]<0>(v117, "crypto");
  v118 = (uint64_t)SDPParser::parseMediaCryptoAttribute;
  std::string::basic_string[abi:ne180100]<0>(v119, "3ge2ae");
  v120 = (uint64_t)SDPParser::parseMediaEndToAccessEdgeProtection;
  std::string::basic_string[abi:ne180100]<0>(v121, "rtpmap");
  v122 = (uint64_t)SDPParser::parseMediaRTPMapAttribute;
  std::string::basic_string[abi:ne180100]<0>(v123, "fmtp");
  v124 = (uint64_t)SDPParser::parseMediaFormatParamsAttribute;
  std::string::basic_string[abi:ne180100]<0>(v125, "curr");
  v126 = (uint64_t)SDPParser::parseMediaPreconditionCurrentAttribute;
  std::string::basic_string[abi:ne180100]<0>(v127, "des");
  v128 = (uint64_t)SDPParser::parseMediaPreconditionDesiredAttribute;
  std::string::basic_string[abi:ne180100]<0>(v129, "conf");
  v130 = (uint64_t)SDPParser::parseMediaPreconditionConfirmedAttribute;
  std::string::basic_string[abi:ne180100]<0>(v131, "accept-types");
  v132 = (uint64_t)SDPParser::parseMediaAcceptTypesAttribute;
  std::string::basic_string[abi:ne180100]<0>(v133, "accept-wrapped-types");
  v134 = (uint64_t)SDPParser::parseMediaAcceptWrappedTypesAttribute;
  std::string::basic_string[abi:ne180100]<0>(v135, "path");
  v136 = (uint64_t)SDPParser::parseMediaPathAttribute;
  std::string::basic_string[abi:ne180100]<0>(v137, "setup");
  v138 = (uint64_t)SDPParser::parseMediaSetupAttribute;
  std::string::basic_string[abi:ne180100]<0>(v139, "fingerprint");
  v35 = 0;
  v36 = 0;
  v140 = (uint64_t)SDPParser::parseMediaFingerprintAttribute;
  qword_1ED70CD58 = 0;
  qword_1ED70CD50 = 0;
  v37 = &qword_1ED70CD50;
  SDPParser::mediaAttributeParsers = (uint64_t)&qword_1ED70CD50;
  while (2)
  {
    v38 = (const std::string::value_type **)&v103[4 * v36];
    v102 = 0;
    if (v37 == &qword_1ED70CD50)
    {
      v39 = &qword_1ED70CD50;
      if (!v35)
      {
LABEL_88:
        v102 = &qword_1ED70CD50;
        v40 = (uint64_t **)&qword_1ED70CD50;
        goto LABEL_89;
      }
LABEL_80:
      v102 = v39;
      v40 = (uint64_t **)(v39 + 1);
      goto LABEL_85;
    }
    if (v35)
    {
      do
      {
        v39 = (uint64_t *)v35;
        v35 = *(_QWORD *)(v35 + 8);
      }
      while (v35);
    }
    else
    {
      v41 = &qword_1ED70CD50;
      do
      {
        v39 = (uint64_t *)v41[2];
        v7 = *v39 == (_QWORD)v41;
        v41 = v39;
      }
      while (v7);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v39 + 4, (void **)&v103[4 * v36]) & 0x80) != 0)
    {
      if (!qword_1ED70CD50)
        goto LABEL_88;
      goto LABEL_80;
    }
    v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&SDPParser::mediaAttributeParsers, &v102, (void **)&v103[4 * v36]);
LABEL_85:
    if (!*v40)
    {
LABEL_89:
      v101 = 0;
      v42 = (uint64_t *)operator new(0x40uLL);
      v99 = v42;
      v100 = &qword_1ED70CD50;
      v43 = (std::string *)(v42 + 4);
      if (*((char *)v38 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v43, *v38, (std::string::size_type)v38[1]);
      }
      else
      {
        *(_OWORD *)&v43->__r_.__value_.__l.__data_ = *(_OWORD *)v38;
        v42[6] = (uint64_t)v38[2];
      }
      v42[7] = v103[4 * v36 + 3];
      LOBYTE(v101) = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::mediaAttributeParsers, (uint64_t)v102, v40, v42);
    }
    if (++v36 != 19)
    {
      v37 = (uint64_t *)SDPParser::mediaAttributeParsers;
      v35 = qword_1ED70CD50;
      continue;
    }
    break;
  }
  v44 = 76;
  do
  {
    if (*((char *)&v101 + v44 * 8 + 7) < 0)
      operator delete((&v99)[v44]);
    v44 -= 4;
  }
  while (v44 * 8);
  __cxa_atexit((void (*)(void *))std::map<std::string,BOOL (*)(SDPMedia &,std::string&)>::~map[abi:ne180100], &SDPParser::mediaAttributeParsers, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(v103, "AMR");
  v104 = (uint64_t)SDPParser::parseAMRFormatParameters;
  std::string::basic_string[abi:ne180100]<0>(v105, "AMR-WB");
  v106 = (uint64_t)SDPParser::parseAMRWBFormatParameters;
  std::string::basic_string[abi:ne180100]<0>(v107, "EVS");
  v108 = (uint64_t)SDPParser::parseEVSFormatParameters;
  std::string::basic_string[abi:ne180100]<0>(v109, "telephone-event");
  v110 = (uint64_t)SDPParser::parseDTMFFormatParameters;
  std::string::basic_string[abi:ne180100]<0>(v111, "t140");
  v112 = (uint64_t)SDPParser::parseTTYFormatParameters;
  std::string::basic_string[abi:ne180100]<0>(v113, "red");
  v45 = 0;
  v46 = 0;
  v114 = (uint64_t)SDPParser::parseTTYRedFormatParameters;
  qword_1ED70CD70 = 0;
  qword_1ED70CD68 = 0;
  v47 = &qword_1ED70CD68;
  SDPParser::mediaFormatParameterParsers = (uint64_t)&qword_1ED70CD68;
  while (2)
  {
    v48 = (const char **)&v103[4 * v46];
    v102 = 0;
    if (v47 == &qword_1ED70CD68)
    {
      v50 = &qword_1ED70CD68;
      goto LABEL_114;
    }
    v49 = (uint64_t *)v45;
    if (v45)
    {
      do
      {
        v50 = v49;
        v49 = (uint64_t *)v49[1];
      }
      while (v49);
    }
    else
    {
      v51 = &qword_1ED70CD68;
      do
      {
        v50 = (uint64_t *)v51[2];
        v7 = *v50 == (_QWORD)v51;
        v51 = v50;
      }
      while (v7);
    }
    if (*((char *)v50 + 55) >= 0)
      v52 = (const char *)(v50 + 4);
    else
      v52 = (const char *)v50[4];
    if (*((char *)v48 + 23) >= 0)
      v53 = (const char *)&v103[4 * v46];
    else
      v53 = *v48;
    if (strcasecmp(v52, v53) < 0)
    {
LABEL_114:
      if (v45)
      {
        v102 = v50;
        v54 = (uint64_t **)(v50 + 1);
      }
      else
      {
        v102 = &qword_1ED70CD68;
        v54 = (uint64_t **)&qword_1ED70CD68;
      }
    }
    else
    {
      v54 = (uint64_t **)std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>((uint64_t)&SDPParser::mediaFormatParameterParsers, &v102, (uint64_t)&v103[4 * v46]);
    }
    if (!*v54)
    {
      v101 = 0;
      v55 = (uint64_t *)operator new(0x40uLL);
      v99 = v55;
      v100 = &qword_1ED70CD68;
      v56 = (std::string *)(v55 + 4);
      if (*((char *)v48 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v56, *v48, (std::string::size_type)v48[1]);
      }
      else
      {
        *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)v48;
        v55[6] = (uint64_t)v48[2];
      }
      v55[7] = v103[4 * v46 + 3];
      LOBYTE(v101) = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::mediaFormatParameterParsers, (uint64_t)v102, v54, v55);
    }
    if (++v46 != 6)
    {
      v47 = (uint64_t *)SDPParser::mediaFormatParameterParsers;
      v45 = qword_1ED70CD68;
      continue;
    }
    break;
  }
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v113[j + 2]) < 0)
      operator delete((void *)v113[j]);
  }
  __cxa_atexit((void (*)(void *))std::map<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string),SDPParser::str_caseless_compare,std::allocator<std::pair<std::string const,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::~map[abi:ne180100], &SDPParser::mediaFormatParameterParsers, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(v103, "dtx");
  v104 = (uint64_t)SDPParser::parseEVSDTX;
  std::string::basic_string[abi:ne180100]<0>(v105, "dtx-recv");
  v106 = (uint64_t)SDPParser::parseEVSDTXRecv;
  std::string::basic_string[abi:ne180100]<0>(v107, "hf-only");
  v108 = (uint64_t)SDPParser::parseEVSHeaderFullOnly;
  std::string::basic_string[abi:ne180100]<0>(v109, "evs-mode-switch");
  v110 = (uint64_t)SDPParser::parseEVSModeSwitch;
  std::string::basic_string[abi:ne180100]<0>(v111, "max-red");
  v112 = (uint64_t)SDPParser::parseEVSMaxRed;
  std::string::basic_string[abi:ne180100]<0>(v113, "br");
  v114 = (uint64_t)SDPParser::parseEVSBr;
  std::string::basic_string[abi:ne180100]<0>(v115, "br-send");
  v116 = (uint64_t)SDPParser::parseEVSBrSend;
  std::string::basic_string[abi:ne180100]<0>(v117, "br-recv");
  v118 = (uint64_t)SDPParser::parseEVSBrRecv;
  std::string::basic_string[abi:ne180100]<0>(v119, "bw");
  v120 = (uint64_t)SDPParser::parseEVSBw;
  std::string::basic_string[abi:ne180100]<0>(v121, "bw-send");
  v122 = (uint64_t)SDPParser::parseEVSBwSend;
  std::string::basic_string[abi:ne180100]<0>(v123, "bw-recv");
  v124 = (uint64_t)SDPParser::parseEVSBwRecv;
  std::string::basic_string[abi:ne180100]<0>(v125, "ch-send");
  v126 = (uint64_t)SDPParser::parseEVSChSend;
  std::string::basic_string[abi:ne180100]<0>(v127, "ch-recv");
  v128 = (uint64_t)SDPParser::parseEVSChRecv;
  std::string::basic_string[abi:ne180100]<0>(v129, "cmr");
  v130 = (uint64_t)SDPParser::parseEVSCmr;
  std::string::basic_string[abi:ne180100]<0>(v131, "ch-aw-recv");
  v132 = (uint64_t)SDPParser::parseEVSChAwRecv;
  std::string::basic_string[abi:ne180100]<0>(v133, "mode-set");
  v134 = (uint64_t)SDPParser::parseEVSModeSet;
  std::string::basic_string[abi:ne180100]<0>(v135, "mode-change-period");
  v136 = (uint64_t)SDPParser::parseEVSModeChangePeriod;
  std::string::basic_string[abi:ne180100]<0>(v137, "mode-change-neighbor");
  v138 = (uint64_t)SDPParser::parseEVSModeChangeNeighbor;
  std::string::basic_string[abi:ne180100]<0>(v139, "mode-change-capability");
  v58 = 0;
  v59 = 0;
  v140 = (uint64_t)SDPParser::parseEVSModeChangeCapability;
  qword_1ED70CD40 = 0;
  qword_1ED70CD38 = 0;
  v60 = &qword_1ED70CD38;
  SDPParser::evsFormatParameters = (uint64_t)&qword_1ED70CD38;
  while (2)
  {
    v61 = (const std::string::value_type **)&v103[4 * v59];
    v102 = 0;
    if (v60 == &qword_1ED70CD38)
    {
      v62 = &qword_1ED70CD38;
      if (!v58)
      {
LABEL_143:
        v102 = &qword_1ED70CD38;
        v63 = (uint64_t **)&qword_1ED70CD38;
        goto LABEL_144;
      }
LABEL_135:
      v102 = v62;
      v63 = (uint64_t **)(v62 + 1);
      goto LABEL_140;
    }
    if (v58)
    {
      do
      {
        v62 = (uint64_t *)v58;
        v58 = *(_QWORD *)(v58 + 8);
      }
      while (v58);
    }
    else
    {
      v64 = &qword_1ED70CD38;
      do
      {
        v62 = (uint64_t *)v64[2];
        v7 = *v62 == (_QWORD)v64;
        v64 = v62;
      }
      while (v7);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v62 + 4, (void **)&v103[4 * v59]) & 0x80) != 0)
    {
      if (!qword_1ED70CD38)
        goto LABEL_143;
      goto LABEL_135;
    }
    v63 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&SDPParser::evsFormatParameters, &v102, (void **)&v103[4 * v59]);
LABEL_140:
    if (!*v63)
    {
LABEL_144:
      v101 = 0;
      v65 = (uint64_t *)operator new(0x40uLL);
      v99 = v65;
      v100 = &qword_1ED70CD38;
      v66 = (std::string *)(v65 + 4);
      if (*((char *)v61 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v66, *v61, (std::string::size_type)v61[1]);
      }
      else
      {
        *(_OWORD *)&v66->__r_.__value_.__l.__data_ = *(_OWORD *)v61;
        v65[6] = (uint64_t)v61[2];
      }
      v65[7] = v103[4 * v59 + 3];
      LOBYTE(v101) = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::evsFormatParameters, (uint64_t)v102, v63, v65);
    }
    if (++v59 != 19)
    {
      v60 = (uint64_t *)SDPParser::evsFormatParameters;
      v58 = qword_1ED70CD38;
      continue;
    }
    break;
  }
  v67 = 76;
  do
  {
    if (*((char *)&v101 + v67 * 8 + 7) < 0)
      operator delete((&v99)[v67]);
    v67 -= 4;
  }
  while (v67 * 8);
  __cxa_atexit((void (*)(void *))std::map<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>::~map[abi:ne180100], &SDPParser::evsFormatParameters, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(v103, "octet-align");
  v104 = (uint64_t)SDPParser::parseAMROctetAligned;
  std::string::basic_string[abi:ne180100]<0>(v105, "mode-set");
  v106 = (uint64_t)SDPParser::parseAMRModeset;
  std::string::basic_string[abi:ne180100]<0>(v107, "max-red");
  v108 = (uint64_t)SDPParser::parseAMRMaxRedundancy;
  std::string::basic_string[abi:ne180100]<0>(v109, "mode-change-capability");
  v110 = (uint64_t)SDPParser::parseAMRModeChangeCapability;
  std::string::basic_string[abi:ne180100]<0>(v111, "mode-change-period");
  v112 = (uint64_t)SDPParser::parseAMRModeChangePeriod;
  std::string::basic_string[abi:ne180100]<0>(v113, "mode-change-neighbor");
  v68 = 0;
  v69 = 0;
  v114 = (uint64_t)SDPParser::parseAMRModeChangeNeighbor;
  qword_1ED70CD28 = 0;
  qword_1ED70CD20 = 0;
  v70 = &qword_1ED70CD20;
  SDPParser::amrFormatParameters = (uint64_t)&qword_1ED70CD20;
  while (2)
  {
    v71 = (const std::string::value_type **)&v103[4 * v69];
    v102 = 0;
    if (v70 == &qword_1ED70CD20)
    {
      v72 = &qword_1ED70CD20;
      if (!v68)
      {
LABEL_168:
        v102 = &qword_1ED70CD20;
        v73 = (uint64_t **)&qword_1ED70CD20;
        goto LABEL_169;
      }
LABEL_160:
      v102 = v72;
      v73 = (uint64_t **)(v72 + 1);
      goto LABEL_165;
    }
    if (v68)
    {
      do
      {
        v72 = (uint64_t *)v68;
        v68 = *(_QWORD *)(v68 + 8);
      }
      while (v68);
    }
    else
    {
      v74 = &qword_1ED70CD20;
      do
      {
        v72 = (uint64_t *)v74[2];
        v7 = *v72 == (_QWORD)v74;
        v74 = v72;
      }
      while (v7);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v72 + 4, (void **)&v103[4 * v69]) & 0x80) != 0)
    {
      if (!qword_1ED70CD20)
        goto LABEL_168;
      goto LABEL_160;
    }
    v73 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&SDPParser::amrFormatParameters, &v102, (void **)&v103[4 * v69]);
LABEL_165:
    if (!*v73)
    {
LABEL_169:
      v101 = 0;
      v75 = (uint64_t *)operator new(0x40uLL);
      v99 = v75;
      v100 = &qword_1ED70CD20;
      v76 = (std::string *)(v75 + 4);
      if (*((char *)v71 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v76, *v71, (std::string::size_type)v71[1]);
      }
      else
      {
        *(_OWORD *)&v76->__r_.__value_.__l.__data_ = *(_OWORD *)v71;
        v75[6] = (uint64_t)v71[2];
      }
      v75[7] = v103[4 * v69 + 3];
      LOBYTE(v101) = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::amrFormatParameters, (uint64_t)v102, v73, v75);
    }
    if (++v69 != 6)
    {
      v70 = (uint64_t *)SDPParser::amrFormatParameters;
      v68 = qword_1ED70CD20;
      continue;
    }
    break;
  }
  for (k = 0; k != -24; k -= 4)
  {
    if (SHIBYTE(v113[k + 2]) < 0)
      operator delete((void *)v113[k]);
  }
  __cxa_atexit((void (*)(void *))std::map<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>::~map[abi:ne180100], &SDPParser::amrFormatParameters, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(v103, "6.6");
  v104 = 1;
  std::string::basic_string[abi:ne180100]<0>(v105, "8.85");
  v106 = 2;
  std::string::basic_string[abi:ne180100]<0>(v107, "12.65");
  v108 = 4;
  std::string::basic_string[abi:ne180100]<0>(v109, "14.25");
  v110 = 8;
  std::string::basic_string[abi:ne180100]<0>(v111, "15.85");
  v112 = 16;
  std::string::basic_string[abi:ne180100]<0>(v113, "18.25");
  v114 = 32;
  std::string::basic_string[abi:ne180100]<0>(v115, "19.85");
  v116 = 64;
  std::string::basic_string[abi:ne180100]<0>(v117, "23.05");
  v118 = 128;
  std::string::basic_string[abi:ne180100]<0>(v119, "23.85");
  v120 = 256;
  std::string::basic_string[abi:ne180100]<0>(v121, "5.9");
  v122 = 512;
  std::string::basic_string[abi:ne180100]<0>(v123, "7.2");
  v124 = 1024;
  std::string::basic_string[abi:ne180100]<0>(v125, "8");
  v126 = 2048;
  std::string::basic_string[abi:ne180100]<0>(v127, "9.6");
  v128 = 4096;
  std::string::basic_string[abi:ne180100]<0>(v129, "13.2");
  v130 = 0x2000;
  std::string::basic_string[abi:ne180100]<0>(v131, "16.4");
  v132 = 0x4000;
  std::string::basic_string[abi:ne180100]<0>(v133, "24.4");
  v134 = 0x8000;
  std::string::basic_string[abi:ne180100]<0>(v135, "32");
  v136 = 0x10000;
  std::string::basic_string[abi:ne180100]<0>(v137, "48");
  v138 = 0x20000;
  std::string::basic_string[abi:ne180100]<0>(v139, "64");
  v140 = 0x40000;
  std::string::basic_string[abi:ne180100]<0>(v141, "96");
  v141[3] = 0x80000;
  std::string::basic_string[abi:ne180100]<0>(v142, "128");
  v78 = 0;
  v79 = 0;
  v142[3] = 0x100000;
  qword_1ED70CCF8 = 0;
  qword_1ED70CCF0 = 0;
  v80 = &qword_1ED70CCF0;
  SDPParser::evsBitrateMap = (uint64_t)&qword_1ED70CCF0;
  while (2)
  {
    v81 = (const std::string::value_type **)&v103[4 * v79];
    v102 = 0;
    if (v80 == &qword_1ED70CCF0)
    {
      v82 = &qword_1ED70CCF0;
      if (!v78)
      {
LABEL_193:
        v102 = &qword_1ED70CCF0;
        v83 = (uint64_t **)&qword_1ED70CCF0;
        goto LABEL_194;
      }
LABEL_185:
      v102 = v82;
      v83 = (uint64_t **)(v82 + 1);
      goto LABEL_190;
    }
    if (v78)
    {
      do
      {
        v82 = (uint64_t *)v78;
        v78 = *(_QWORD *)(v78 + 8);
      }
      while (v78);
    }
    else
    {
      v84 = &qword_1ED70CCF0;
      do
      {
        v82 = (uint64_t *)v84[2];
        v7 = *v82 == (_QWORD)v84;
        v84 = v82;
      }
      while (v7);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82 + 4, (void **)&v103[4 * v79]) & 0x80) != 0)
    {
      if (!qword_1ED70CCF0)
        goto LABEL_193;
      goto LABEL_185;
    }
    v83 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&SDPParser::evsBitrateMap, &v102, (void **)&v103[4 * v79]);
LABEL_190:
    if (!*v83)
    {
LABEL_194:
      v101 = 0;
      v85 = (uint64_t *)operator new(0x40uLL);
      v99 = v85;
      v100 = &qword_1ED70CCF0;
      v86 = (std::string *)(v85 + 4);
      if (*((char *)v81 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v86, *v81, (std::string::size_type)v81[1]);
      }
      else
      {
        *(_OWORD *)&v86->__r_.__value_.__l.__data_ = *(_OWORD *)v81;
        v85[6] = (uint64_t)v81[2];
      }
      v85[7] = v103[4 * v79 + 3];
      LOBYTE(v101) = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::evsBitrateMap, (uint64_t)v102, v83, v85);
    }
    if (++v79 != 21)
    {
      v80 = (uint64_t *)SDPParser::evsBitrateMap;
      v78 = qword_1ED70CCF0;
      continue;
    }
    break;
  }
  v87 = 84;
  do
  {
    if (*((char *)&v101 + v87 * 8 + 7) < 0)
      operator delete((&v99)[v87]);
    v87 -= 4;
  }
  while (v87 * 8);
  __cxa_atexit((void (*)(void *))std::map<std::string,unsigned long long>::~map[abi:ne180100], &SDPParser::evsBitrateMap, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(v103, "nb");
  LODWORD(v104) = 0;
  std::string::basic_string[abi:ne180100]<0>(v105, "wb");
  LODWORD(v106) = 1;
  std::string::basic_string[abi:ne180100]<0>(v107, "swb");
  LODWORD(v108) = 3;
  std::string::basic_string[abi:ne180100]<0>(v109, "fb");
  LODWORD(v110) = 5;
  std::string::basic_string[abi:ne180100]<0>(v111, "nb-wb");
  LODWORD(v112) = 2;
  std::string::basic_string[abi:ne180100]<0>(v113, "nb-swb");
  LODWORD(v114) = 4;
  std::string::basic_string[abi:ne180100]<0>(v115, "nb-fb");
  v88 = 0;
  v89 = 0;
  LODWORD(v116) = 6;
  qword_1ED70CD10 = 0;
  qword_1ED70CD08 = 0;
  v90 = &qword_1ED70CD08;
  SDPParser::evsBandwidthMap = (uint64_t)&qword_1ED70CD08;
  while (2)
  {
    v91 = (const std::string::value_type **)&v103[4 * v89];
    v102 = 0;
    if (v90 == &qword_1ED70CD08)
    {
      v92 = &qword_1ED70CD08;
      if (!v88)
      {
LABEL_218:
        v102 = &qword_1ED70CD08;
        v93 = (uint64_t **)&qword_1ED70CD08;
        goto LABEL_219;
      }
LABEL_210:
      v102 = v92;
      v93 = (uint64_t **)(v92 + 1);
      goto LABEL_215;
    }
    if (v88)
    {
      do
      {
        v92 = (uint64_t *)v88;
        v88 = *(_QWORD *)(v88 + 8);
      }
      while (v88);
    }
    else
    {
      v94 = &qword_1ED70CD08;
      do
      {
        v92 = (uint64_t *)v94[2];
        v7 = *v92 == (_QWORD)v94;
        v94 = v92;
      }
      while (v7);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v92 + 4, (void **)&v103[4 * v89]) & 0x80) != 0)
    {
      if (!qword_1ED70CD08)
        goto LABEL_218;
      goto LABEL_210;
    }
    v93 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&SDPParser::evsBandwidthMap, &v102, (void **)&v103[4 * v89]);
LABEL_215:
    if (!*v93)
    {
LABEL_219:
      v101 = 0;
      v95 = (char *)operator new(0x40uLL);
      v99 = (uint64_t *)v95;
      v100 = &qword_1ED70CD08;
      v96 = (std::string *)(v95 + 32);
      if (*((char *)v91 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v96, *v91, (std::string::size_type)v91[1]);
      }
      else
      {
        *(_OWORD *)&v96->__r_.__value_.__l.__data_ = *(_OWORD *)v91;
        *((_QWORD *)v95 + 6) = v91[2];
      }
      *((_DWORD *)v95 + 14) = v103[4 * v89 + 3];
      LOBYTE(v101) = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::evsBandwidthMap, (uint64_t)v102, v93, (uint64_t *)v95);
    }
    if (++v89 != 7)
    {
      v90 = (uint64_t *)SDPParser::evsBandwidthMap;
      v88 = qword_1ED70CD08;
      continue;
    }
    break;
  }
  for (m = 0; m != -28; m -= 4)
  {
    if (SHIBYTE(v115[m + 2]) < 0)
      operator delete((void *)v115[m]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,EVSBandwidthTypes>::~map[abi:ne180100], &SDPParser::evsBandwidthMap, &dword_1BEDF4000);
}

void sub_1BEE4AB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  char *v13;

  while (1)
  {
    if (*(v13 - 9) < 0)
      operator delete(*((void **)v13 - 4));
    v13 -= 32;
    if (v13 == &a13)
      _Unwind_Resume(exception_object);
  }
}

void XcapRequest::XcapRequest(uint64_t a1, char a2, XcapRequest *this, const void *a4)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 1) = a2;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = XcapNodeSelector::clone(this);
  *(_QWORD *)(a1 + 40) = _Block_copy(a4);
}

void sub_1BEE4B000(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

XcapNodeSelector *XcapNodeSelector::clone(XcapNodeSelector *this)
{
  XcapNodeSelector *v2;

  v2 = (XcapNodeSelector *)operator new();
  XcapNodeSelector::XcapNodeSelector(v2, this);
  return v2;
}

void sub_1BEE4B060(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1020C40DBF2485DLL);
  _Unwind_Resume(a1);
}

void XcapRequest::XcapRequest(uint64_t a1, char a2, XcapRequest *this, const std::string *a4, const void *a5)
{
  std::string *v8;

  *(_QWORD *)(a1 + 16) = 0;
  v8 = (std::string *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 1) = a2;
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = XcapNodeSelector::clone(this);
  std::string::operator=(v8, a4);
  *(_QWORD *)(a1 + 40) = _Block_copy(a5);
}

void sub_1BEE4B0F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void XcapRequest::~XcapRequest(XcapRequest *this)
{
  XcapNodeSelector *v2;

  v2 = (XcapNodeSelector *)*((_QWORD *)this + 1);
  if (v2)
  {
    XcapNodeSelector::~XcapNodeSelector(v2);
    MEMORY[0x1C3B87100]();
  }
  _Block_release(*((const void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

_QWORD *XcapRequest::serviceAsString@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E78BB510[a1]);
}

void SipSdpBody::SipSdpBody(SipSdpBody *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  *(_QWORD *)this = &off_1E78BB550;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v5 = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 8, &v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_BYTE *)this + 48) = 0;
}

uint64_t SipSdpBody::SipSdpBody(uint64_t a1, const std::string *a2, _WORD *a3)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13;
  char v14;

  *(_QWORD *)a1 = &off_1E78BB550;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = 1;
  SDPParser::parse((BOOL *)&v14, a2, a3, &v13);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v4, &v13);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
  *(_BYTE *)(a1 + 48) = v8;
  if ((v8 & 1) == 0)
  {
    v13 = 0uLL;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v4, &v13);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return a1;
}

void sub_1BEE4B314(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void SipSdpBody::~SipSdpBody(void **this)
{
  *this = &off_1E78BB550;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

{
  SipSdpBody::~SipSdpBody(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSdpBody::contentLength(SipSdpBody *this)
{
  int v2;
  void **v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (!*((_QWORD *)this + 1))
  {
    v2 = *((char *)this + 47);
    if (v2 < 0)
      return *((_QWORD *)this + 4);
    return v2;
  }
  v2 = *((char *)this + 47);
  if ((v2 & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 47))
      goto LABEL_4;
    goto LABEL_9;
  }
  if (!*((_QWORD *)this + 4))
  {
LABEL_9:
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v7, 1);
    (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), &v7);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v8 + 1) + 8, &v5);
    v3 = (void **)((char *)this + 24);
    if (*((char *)this + 47) < 0)
      operator delete(*v3);
    *(_OWORD *)v3 = v5;
    *((_QWORD *)this + 5) = v6;
    *(_QWORD *)&v7 = &off_1E78D7A10;
    if ((_BYTE)v8)
    {
      if (*((_QWORD *)&v7 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v7 + 1) + 8))(*((_QWORD *)&v7 + 1));
    }
    LOBYTE(v2) = *((_BYTE *)this + 47);
    if ((v2 & 0x80) != 0)
      return *((_QWORD *)this + 4);
    return v2;
  }
LABEL_4:
  if ((v2 & 0x80) == 0)
    return v2;
  return *((_QWORD *)this + 4);
}

void sub_1BEE4B4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15)
  {
    if (a14)
      (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSdpBody::encode(SipSdpBody *this, ImsOutStream *a2)
{
  uint64_t result;
  void **v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  result = *((_QWORD *)this + 1);
  if (result)
  {
    if (*((char *)this + 47) < 0)
    {
      if (!*((_QWORD *)this + 4))
      {
LABEL_6:
        v10 = 0;
        v8 = 0u;
        v9 = 0u;
        ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v8, 1);
        (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), &v8);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v9 + 1) + 8, &v6);
        v5 = (void **)((char *)this + 24);
        if (*((char *)this + 47) < 0)
          operator delete(*v5);
        *(_OWORD *)v5 = v6;
        *((_QWORD *)this + 5) = v7;
        *(_QWORD *)&v8 = &off_1E78D7A10;
        if ((_BYTE)v9)
        {
          if (*((_QWORD *)&v8 + 1))
            (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 8))(*((_QWORD *)&v8 + 1));
        }
        result = *((_QWORD *)this + 1);
      }
    }
    else if (!*((_BYTE *)this + 47))
    {
      goto LABEL_6;
    }
    return (*(uint64_t (**)(uint64_t, ImsOutStream *))(*(_QWORD *)result + 16))(result, a2);
  }
  return result;
}

void sub_1BEE4B5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15)
  {
    if (a14)
      (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSdpBody::decode(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  std::string::value_type v9;
  uint64_t v10;
  std::string v12;

  memset(&v12, 0, sizeof(v12));
  if (a3)
  {
    v6 = a3;
    v8 = a2 + 4;
    while (1)
    {
      v9 = std::istream::get();
      std::string::push_back(&v12, v9);
      if (*(_DWORD *)((char *)v8 + *(_QWORD *)(*a2 - 24)))
        break;
      if (!--v6)
        goto LABEL_5;
    }
    v10 = 0;
  }
  else
  {
LABEL_5:
    v10 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 88))(a1, &v12, a4);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1BEE4B6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipSdpBody::decode(uint64_t a1, uint64_t a2, SipMessageEncodingMap *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v19;
  __int16 v20;
  __int128 v21;

  v21 = 0uLL;
  v6 = a1 + 8;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 8, &v21);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*(char *)(a1 + 47) < 0)
  {
    **(_BYTE **)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 47) = 0;
  }
  v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    LOBYTE(v20) = *((_BYTE *)a3 + 131);
    HIBYTE(v20) = SipMessageEncodingMap::useLazuliTypes(a3);
    v19 = 1;
    SDPParser::parse((BOOL *)&v19, (const std::string *)a2, &v20, &v21);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v6, &v21);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
    *(_BYTE *)(a1 + 48) = v14;
    if ((v14 & 1) == 0)
    {
      std::string::operator=((std::string *)(a1 + 24), (const std::string *)a2);
      v21 = 0uLL;
      std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v6, &v21);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  return 1;
}

uint64_t SipSdpBody::clone(SipSdpBody *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E78BB550;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_QWORD *)(v2 + 40) = 0;
  if (*((_QWORD *)this + 1))
  {
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v10 = *((_QWORD *)this + 1);
    v11 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v2 + 8), &v10);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_BYTE *)(v2 + 48) = *((_BYTE *)this + 48);
  return v2;
}

const char *SipSdpBody::contentType(SipSdpBody *this)
{
  return "application/sdp";
}

uint64_t SipServerTransaction::SipServerTransaction(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const std::string *a6)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = (_QWORD *)SipTransaction::SipTransaction(a1, a2 + 1, a3, a5, a6);
  v10 = *a2;
  *v9 = *a2;
  v9[9] = off_1E78BB6A8;
  v9[12] = a2[6];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v10 - 24)) = a2[7];
  v9[21] = &unk_1E78BB758;
  *(_QWORD *)(a1 + 288) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
  *(_QWORD *)(a1 + 560) = 0;
  return a1;
}

void sub_1BEE4B9F4(_Unwind_Exception *a1)
{
  SipTransaction *v1;
  uint64_t *v2;

  SipTransaction::~SipTransaction(v1, v2);
  _Unwind_Resume(a1);
}

void SipServerTransaction::~SipServerTransaction(SipServerTransaction *this, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 9) = off_1E78BB6A8;
  *((_QWORD *)this + 12) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[7];
  *((_QWORD *)this + 21) = &unk_1E78BB758;
  v9 = 0;
  v10 = 0;
  (*(void (**)(char *, uint64_t *, uint64_t))(*((_QWORD *)this + 9) + 48))((char *)this + 72, &v9, 1);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *((_QWORD *)this + 70);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  SipTransaction::~SipTransaction(this, a2 + 1);
}

void SipServerTransaction::rejectTransactionWithStatus(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11[3];
  int v12;

  v12 = a2;
  std::allocate_shared[abi:ne180100]<SipAutoRespondingTransactionUser,std::allocator<SipAutoRespondingTransactionUser>,unsigned int &,std::string const&,void>(&v12, a3, &v10);
  *(_OWORD *)v11 = v10;
  v10 = 0uLL;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 344), v11);
  v4 = (std::__shared_weak_count *)v11[1];
  if (v11[1])
  {
    v5 = (unint64_t *)(v11[1] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void SipServerTransaction::rejectTransactionWithResult(SipServerTransaction *this, ImsResult *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10[3];

  std::allocate_shared[abi:ne180100]<SipAutoRespondingTransactionUser,std::allocator<SipAutoRespondingTransactionUser>,ImsResult &,void>(a2, &v9);
  *(_OWORD *)v10 = v9;
  v9 = 0uLL;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)this + 43, v10);
  v3 = (std::__shared_weak_count *)v10[1];
  if (v10[1])
  {
    v4 = (unint64_t *)(v10[1] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void SipServerTransaction::loggableName(SipServerTransaction *this@<X0>, std::string *a2@<X8>)
{
  const std::string *v4;
  void *v5[2];
  char v6;
  void *__p;
  char v8;
  std::string v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v10, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v10 + 1), (uint64_t)"ServerTransaction ", 18);
  BYTE1(v11) = 0;
  v4 = (const std::string *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
  LoggableString::LoggableString(&v9, v4);
  (*(void (**)(__int128 *, std::string *))(v10 + 40))(&v10, &v9);
  LOBYTE(v5[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v10 + 1), (uint64_t)v5, 1);
  BYTE1(v11) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v5, (const std::string *)((char *)this + 320));
  (*(void (**)(__int128 *, void **))(v10 + 56))(&v10, v5);
  if (v8 < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  ImsStringOutStream::loggableStr((ImsStringOutStream *)&v10, a2);
  *(_QWORD *)&v10 = &off_1E78D7A10;
  if ((_BYTE)v11)
  {
    if (*((_QWORD *)&v10 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 8))(*((_QWORD *)&v10 + 1));
  }
}

void sub_1BEE4BDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v23;

  ims::AccessNetwork::~AccessNetwork(&a10);
  if (a21 < 0)
    operator delete(__p);
  *(_QWORD *)(v21 - 64) = &off_1E78D7A10;
  if (*(_BYTE *)(v21 - 48))
  {
    v23 = *(_QWORD *)(v21 - 56);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipServerTransaction::loggableName(SipServerTransaction *this@<X0>, std::string *a2@<X8>)
{
  SipServerTransaction::loggableName((SipServerTransaction *)((char *)this - 96), a2);
}

void SipServerTransaction::resendLastMessage(SipServerTransaction *this@<X0>, ImsResult *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  ImsResult *v11;
  _QWORD v12[2];
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  if (*((_QWORD *)this + 70))
  {
    v4 = (_QWORD *)((char *)this + 168);
    v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 21) + 64))((char *)this + 168);
    (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"resending ", 10);
    *(_BYTE *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" response", 9);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    v6 = v4[18];
    v7 = v4[49];
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v17, v4 + 13);
    SipTransactionLayer::sendMessageInTransaction(v6, v7, (uint64_t)&v17, (uint64_t)a2);
    v8 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v12[0] = &off_1E78B7238;
    v12[1] = &_bambiDomain;
    v13 = 0x40000000;
    v11 = (ImsResult *)ImsResult::operator<<<char [22]>((uint64_t)v12, "no response to resend");
    ImsLogContainer::logResult((SipServerTransaction *)((char *)this + 168), v11);
    ImsResult::ImsResult(a2, v11);
    ImsResult::~ImsResult((ImsResult *)v12);
  }
}

void sub_1BEE4BF8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t SipServerTransaction::handleRequest(SipServerTransaction *this, const SipRequest *a2)
{
  _QWORD *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const std::string *v17;
  void *v18;
  std::string *p_lpsrc;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  __int128 v35;
  std::string __p;
  void *lpsrc;
  std::string::size_type v38;
  char *v39;
  std::__shared_weak_count *v40;
  _OWORD v41[3];

  memset(v41, 0, sizeof(v41));
  v4 = (_QWORD *)((char *)this + 272);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (_QWORD *)this + 34);
  if (lpsrc)
    v5 = (char *)lpsrc + 96;
  else
    v5 = 0;
  v39 = v5;
  v40 = (std::__shared_weak_count *)v38;
  lpsrc = 0;
  v38 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "handleRequest");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v41, (uint64_t *)&v39, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v10 = (unint64_t *)(v38 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (char *)this + 168;
  v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 21) + 64))((char *)this + 168);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 21) + 16))((char *)this + 168, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"SipServerTransaction::handleRequest", 35);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  v14 = *((_QWORD *)this + 7);
  if (!v14)
  {
    v15 = (*(uint64_t (**)(SipServerTransaction *))(*(_QWORD *)this + 152))(this);
    (*(void (**)(SipServerTransaction *, uint64_t))(*(_QWORD *)this + 32))(this, v15);
  }
  v16 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 64))((char *)this + 168);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 168, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"received ", 9);
  *(_BYTE *)(v16 + 17) = 0;
  v17 = (const std::string *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  LoggableString::LoggableString(&__p, v17);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 40))(v16, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" request", 8);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v16 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, v4);
  if (lpsrc
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    __p.__r_.__value_.__l.__size_ = v38;
    p_lpsrc = (std::string *)&lpsrc;
  }
  else
  {
    p_lpsrc = &__p;
  }
  p_lpsrc->__r_.__value_.__r.__words[0] = 0;
  p_lpsrc->__r_.__value_.__l.__size_ = 0;
  v20 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v21 = (unint64_t *)(v38 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *((_QWORD *)this + 43);
  if (v23 && __p.__r_.__value_.__r.__words[0])
  {
    if (!v14)
    {
      v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v24 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      (*(void (**)(uint64_t, const SipRequest *, __int128 *))(*(_QWORD *)v23 + 16))(v23, a2, &v35);
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      goto LABEL_44;
    }
  }
  else
  {
    v29 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 64))((char *)this + 168);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 168, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"no transaction user to handle request", 37);
    *(_BYTE *)(v29 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v29 + 17) = 0;
  }
  if (v14)
  {
    v30 = *((_QWORD *)this + 7);
    if (v30)
      (*(void (**)(uint64_t, const SipRequest *))(*(_QWORD *)v30 + 72))(v30, a2);
  }
LABEL_44:
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v41);
}

void sub_1BEE4C3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a22);
  _Unwind_Resume(a1);
}

const SipRequest *SipServerTransaction::internalSendResponse@<X0>(const SipRequest **this@<X0>, SipResponse *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  SipUriHeader *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  SipHeader *v17;
  uint64_t v18;
  const std::string *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  const SipRequest *v24;
  const SipRequest *result;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::string v28;
  std::string __p;

  if (a3)
  {
    v7 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
    v8 = (__int128 *)(v7 + 64);
    if (!v7)
      v8 = &ims::kEmptyString;
    v9 = *((unsigned __int8 *)v8 + 23);
    v10 = *((_QWORD *)v8 + 1);
    if ((v9 & 0x80u) == 0)
      v10 = v9;
    if (!v10)
    {
      v11 = (_QWORD *)*((_QWORD *)a2 + 10);
      if (v11)
        SipMessageEncodingMap::copyHeadersFromRequestToResponse(v11, this[36], a2, 0);
    }
  }
  if (*((_DWORD *)a2 + 22) != 100)
  {
    v12 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
    if (v12)
      v13 = SipUriHeader::tag(v12);
    else
      v13 = &ims::kEmptyString;
    v14 = *((unsigned __int8 *)v13 + 23);
    if ((v14 & 0x80u) != 0)
      v14 = *((_QWORD *)v13 + 1);
    if (!v14)
    {
      v15 = (*((uint64_t (**)(char *))this[21] + 8))((char *)this + 168);
      (*((void (**)(char *, uint64_t))this[21] + 2))((char *)this + 168, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"adding To: tag to ", 18);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(std::string *__return_ptr, SipResponse *))(*(_QWORD *)a2 + 48))(&v28, a2);
      LoggableString::LoggableString(&__p, &v28);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v15 + 40))(v15, &__p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      v16 = SipTransportLayer::userAgent(this[39]);
      ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(v16 + 592), 10, &__p);
      v17 = SipMessage::header<SipToHeader>(a2, 1);
      SipUriHeader::setTag((uint64_t)v17, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v18 = (*((uint64_t (**)(char *))this[21] + 8))((char *)this + 168);
  (*((void (**)(char *, uint64_t))this[21] + 2))((char *)this + 168, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"sending ", 8);
  *(_BYTE *)(v18 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v18 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" response to ", 13);
  *(_BYTE *)(v18 + 17) = 0;
  v19 = (const std::string *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)this[36] + 112))(this[36]);
  LoggableString::LoggableString(&__p, v19);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v18 + 40))(v18, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" request", 8);
  *(_BYTE *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v18 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  v20 = (uint64_t)this[39];
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v26, this + 34);
  SipTransactionLayer::sendMessageInTransaction(v20, (uint64_t)a2, (uint64_t)&v26, a4);
  v21 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = this[70];
  if (v24)
    (*(void (**)(const SipRequest *))(*(_QWORD *)v24 + 8))(v24);
  result = (const SipRequest *)(*(uint64_t (**)(SipResponse *))(*(_QWORD *)a2 + 32))(a2);
  this[70] = result;
  return result;
}

void sub_1BEE4C778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipServerTransaction::sendResponse(SipServerTransaction *this@<X0>, SipResponse *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  ImsResult *v14;
  uint64_t v15;
  uint64_t v16;
  const std::string *v17;
  ImsResult *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  std::string __p;
  void (**v25)(ImsResult *__hidden);
  uint64_t *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v6 = *((_QWORD *)this + 7);
  if (!v6)
  {
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v25 = &off_1E78B7238;
    v26 = &_bambiDomain;
    v27 = 1073741827;
    v14 = (ImsResult *)ImsResult::operator<<<char [36]>((uint64_t)&v25, "can't send response from NULL state");
    ImsLogContainer::logResult((SipServerTransaction *)((char *)this + 168), v14);
    ImsResult::ImsResult((ImsResult *)a4, v14);
    goto LABEL_18;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6) & 1) == 0)
  {
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v25 = &off_1E78B7238;
    v26 = &_bambiDomain;
    v27 = 0x40000000;
    v15 = ImsResult::operator<<<char [41]>((uint64_t)&v25, "outgoing responses not allowed in state ");
    v16 = (*(uint64_t (**)(SipServerTransaction *))(*(_QWORD *)this + 24))(this);
    v17 = (const std::string *)(*(uint64_t (**)(SipServerTransaction *, uint64_t))(*(_QWORD *)this + 16))(this, v16);
    LoggableString::LoggableString(&__p, v17);
    v18 = (ImsResult *)ImsResult::operator<<<LoggableString>(v15, (uint64_t)&__p);
    ImsLogContainer::logResult((SipServerTransaction *)((char *)this + 168), v18);
    ImsResult::ImsResult((ImsResult *)a4, v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_18;
  }
  *(_QWORD *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  SipServerTransaction::internalSendResponse((const SipRequest **)this, a2, a3, a4);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 7) + 96))(*((_QWORD *)this + 7), *((_QWORD *)this + 70), a4);
  if ((*(_DWORD *)(*((_QWORD *)this + 70) + 88) - 100) > 0x63)
    return;
  v9 = *((_QWORD *)this + 36);
  if (!v9)
    return;
  v10 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 112))(v9);
  v11 = v10[23];
  v12 = (v11 & 0x80u) == 0 ? v10[23] : *((_QWORD *)v10 + 1);
  if (v12 != 6)
    return;
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v10, "INVITE", *((_QWORD *)v10 + 1)))
      return;
    goto LABEL_21;
  }
  if (!v10[23])
  {
LABEL_21:
    if (*(uint64_t **)(a4 + 8) != &_posixDomain)
    {
      v19 = a4;
      do
      {
        v20 = v19;
        v19 = *(_QWORD *)(v19 + 32);
      }
      while (v19);
      if (*(uint64_t **)(v20 + 8) != &_posixDomain)
        return;
    }
    v22 = *((_QWORD *)this + 21);
    v21 = (char *)this + 168;
    v23 = (*(uint64_t (**)(char *))(v22 + 48))(v21);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v21 + 16))(v21, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"ignoring POSIX error for provisional response: ", 47);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, v23);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v25 = &off_1E78B7238;
    v26 = &_bambiDomain;
    v27 = 0;
    ImsResult::operator=(a4, (uint64_t)&v25);
LABEL_18:
    ImsResult::~ImsResult((ImsResult *)&v25);
    return;
  }
  v13 = "INVITE";
  while (*v10 == *(unsigned __int8 *)v13)
  {
    ++v10;
    ++v13;
    if (!--v11)
      goto LABEL_21;
  }
}

void sub_1BEE4CAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  ImsResult *v15;

  ImsResult::~ImsResult((ImsResult *)&a15);
  ImsResult::~ImsResult(v15);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [36]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE4CBA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [41]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE4CC4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<LoggableString>(uint64_t a1, uint64_t a2)
{
  ImsStringOutStream *v4;

  v4 = *(ImsStringOutStream **)(a1 + 24);
  if (!v4)
  {
    v4 = (ImsStringOutStream *)operator new();
    ImsStringOutStream::ImsStringOutStream(v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  (*(void (**)(ImsStringOutStream *, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
  return a1;
}

void sub_1BEE4CCE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipServerTransaction::sendResponse(_QWORD *a1, int a2, std::string *a3)
{
  SipTransportLayer *v6;
  uint64_t v7;
  _OWORD v8[6];
  void *__p[2];
  uint64_t v10;

  v6 = (SipTransportLayer *)a1[39];
  if (SipTransportLayer::userAgent(v6))
    v7 = SipTransportLayer::userAgent(v6) + 288;
  else
    v7 = 0;
  v10 = 0;
  *(_OWORD *)__p = 0u;
  memset(v8, 0, sizeof(v8));
  SipResponse::SipResponse((uint64_t)v8, a2, a3, v7);
  (*(void (**)(_QWORD *, _OWORD *, uint64_t))(*a1 + 168))(a1, v8, 1);
  *(_QWORD *)&v8[0] = off_1E78E40E8;
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  SipMessage::~SipMessage((SipMessage *)v8);
}

void sub_1BEE4CDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  SipResponse::~SipResponse(&a9);
  _Unwind_Resume(a1);
}

void SipResponse::~SipResponse(void **this)
{
  *this = off_1E78E40E8;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  SipMessage::~SipMessage((SipMessage *)this);
}

{
  *this = off_1E78E40E8;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  SipMessage::~SipMessage((SipMessage *)this);
  JUMPOUT(0x1C3B87100);
}

void SipServerInviteTransaction::constructStateMachine(SipServerInviteTransaction *this)
{
  std::__shared_weak_count *v2;
  std::string::size_type v3;
  std::string *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_size;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *shared_owners;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::string::size_type v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  std::__shared_weak_count_vtbl *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  std::string::size_type v50;
  std::string *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  std::__shared_weak_count_vtbl *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  std::string::size_type v74;
  std::string *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  std::__shared_weak_count_vtbl *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  std::string::size_type v112;
  std::__shared_weak_count *v113;
  __int128 v114;

  v112 = 0;
  v113 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v112, (_QWORD *)this + 34);
  v3 = v112;
  v2 = v113;
  v4 = (std::string *)operator new(0xF8uLL);
  v5 = (std::__shared_weak_count *)v4;
  v4->__r_.__value_.__l.__size_ = 0;
  p_size = &v4->__r_.__value_.__l.__size_;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BC240;
  v7 = (std::__shared_weak_count_vtbl *)&v4[1];
  *(_QWORD *)&v114 = v3;
  *((_QWORD *)&v114 + 1) = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  SipServerInviteProceedingTransactionState::SipServerInviteProceedingTransactionState(v4 + 1, (std::string::size_type *)&v114);
  if (v2)
  {
    v10 = (unint64_t *)&v2->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)&v110 = v7;
  *((_QWORD *)&v110 + 1) = v5;
  shared_owners = (std::__shared_weak_count *)v5[9].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_22;
    do
      v13 = __ldxr(p_size);
    while (__stxr(v13 + 1, p_size));
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v5[9].__vftable = v7;
    v5[9].__shared_owners_ = (uint64_t)v5;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v16 = __ldxr(p_size);
    while (__stxr(v16 + 1, p_size));
    v17 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v5[9].__vftable = v7;
    v5[9].__shared_owners_ = (uint64_t)v5;
  }
  do
    v19 = __ldaxr(p_size);
  while (__stlxr(v19 - 1, p_size));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_22:
  v111 = v110;
  v110 = 0uLL;
  (*(void (**)(SipServerInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v111);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
  if (*((_QWORD *)&v111 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (*((_QWORD *)&v110 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v110 + 1) + 16))(*((_QWORD *)&v110 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v110 + 1));
    }
  }
  v26 = v112;
  v25 = v113;
  v27 = (std::__shared_weak_count *)operator new(0x100uLL);
  v28 = v27;
  v27->__shared_owners_ = 0;
  v29 = (unint64_t *)&v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC290;
  v30 = (std::__shared_weak_count_vtbl *)&v27[1];
  *(_QWORD *)&v114 = v26;
  *((_QWORD *)&v114 + 1) = v25;
  if (v25)
  {
    v31 = (unint64_t *)&v25->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  SipServerInviteCompletedTransactionState::SipServerInviteCompletedTransactionState((uint64_t)&v27[1], (std::string::size_type *)&v114);
  if (v25)
  {
    v33 = (unint64_t *)&v25->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)&v110 = v30;
  *((_QWORD *)&v110 + 1) = v28;
  v35 = (std::__shared_weak_count *)v28[9].__shared_owners_;
  if (v35)
  {
    if (v35->__shared_owners_ != -1)
      goto LABEL_53;
    do
      v36 = __ldxr(v29);
    while (__stxr(v36 + 1, v29));
    v37 = (unint64_t *)&v28->__shared_weak_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    v28[9].__vftable = v30;
    v28[9].__shared_owners_ = (uint64_t)v28;
    std::__shared_weak_count::__release_weak(v35);
  }
  else
  {
    do
      v39 = __ldxr(v29);
    while (__stxr(v39 + 1, v29));
    v40 = (unint64_t *)&v28->__shared_weak_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    v28[9].__vftable = v30;
    v28[9].__shared_owners_ = (uint64_t)v28;
  }
  do
    v42 = __ldaxr(v29);
  while (__stlxr(v42 - 1, v29));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_53:
  v109 = v110;
  v110 = 0uLL;
  (*(void (**)(SipServerInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v109);
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (*((_QWORD *)&v109 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v50 = v112;
  v49 = v113;
  v51 = (std::string *)operator new(0xF8uLL);
  v52 = (std::__shared_weak_count *)v51;
  v51->__r_.__value_.__l.__size_ = 0;
  v53 = &v51->__r_.__value_.__l.__size_;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BC2E0;
  v54 = (std::__shared_weak_count_vtbl *)&v51[1];
  *(_QWORD *)&v114 = v50;
  *((_QWORD *)&v114 + 1) = v49;
  if (v49)
  {
    v55 = (unint64_t *)&v49->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  SipServerInviteConfirmedTransactionState::SipServerInviteConfirmedTransactionState(v51 + 1, (std::string::size_type *)&v114);
  if (v49)
  {
    v57 = (unint64_t *)&v49->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  *(_QWORD *)&v110 = v54;
  *((_QWORD *)&v110 + 1) = v52;
  v59 = (std::__shared_weak_count *)v52[9].__shared_owners_;
  if (v59)
  {
    if (v59->__shared_owners_ != -1)
      goto LABEL_84;
    do
      v60 = __ldxr(v53);
    while (__stxr(v60 + 1, v53));
    v61 = (unint64_t *)&v52->__shared_weak_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    v52[9].__vftable = v54;
    v52[9].__shared_owners_ = (uint64_t)v52;
    std::__shared_weak_count::__release_weak(v59);
  }
  else
  {
    do
      v63 = __ldxr(v53);
    while (__stxr(v63 + 1, v53));
    v64 = (unint64_t *)&v52->__shared_weak_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    v52[9].__vftable = v54;
    v52[9].__shared_owners_ = (uint64_t)v52;
  }
  do
    v66 = __ldaxr(v53);
  while (__stlxr(v66 - 1, v53));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
LABEL_84:
  v108 = v110;
  v110 = 0uLL;
  (*(void (**)(SipServerInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v108);
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
  if (*((_QWORD *)&v108 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v74 = v112;
  v73 = v113;
  v75 = (std::string *)operator new(0xF8uLL);
  v76 = (std::__shared_weak_count *)v75;
  v75->__r_.__value_.__l.__size_ = 0;
  v77 = &v75->__r_.__value_.__l.__size_;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BC330;
  v78 = (std::__shared_weak_count_vtbl *)&v75[1];
  *(_QWORD *)&v114 = v74;
  *((_QWORD *)&v114 + 1) = v73;
  if (v73)
  {
    v79 = (unint64_t *)&v73->__shared_owners_;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  SipServerInviteTerminationPendingTransactionState::SipServerInviteTerminationPendingTransactionState(v75 + 1, (std::string::size_type *)&v114);
  if (v73)
  {
    v81 = (unint64_t *)&v73->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  *(_QWORD *)&v110 = v78;
  *((_QWORD *)&v110 + 1) = v76;
  v83 = (std::__shared_weak_count *)v76[9].__shared_owners_;
  if (v83)
  {
    if (v83->__shared_owners_ != -1)
      goto LABEL_115;
    do
      v84 = __ldxr(v77);
    while (__stxr(v84 + 1, v77));
    v85 = (unint64_t *)&v76->__shared_weak_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    v76[9].__vftable = v78;
    v76[9].__shared_owners_ = (uint64_t)v76;
    std::__shared_weak_count::__release_weak(v83);
  }
  else
  {
    do
      v87 = __ldxr(v77);
    while (__stxr(v87 + 1, v77));
    v88 = (unint64_t *)&v76->__shared_weak_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
    v76[9].__vftable = v78;
    v76[9].__shared_owners_ = (uint64_t)v76;
  }
  do
    v90 = __ldaxr(v77);
  while (__stlxr(v90 - 1, v77));
  if (!v90)
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
  }
LABEL_115:
  v107 = v110;
  v110 = 0uLL;
  (*(void (**)(SipServerInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v107);
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
  if (*((_QWORD *)&v107 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  std::allocate_shared[abi:ne180100]<SipTerminatedTransactionState,std::allocator<SipTerminatedTransactionState>,std::shared_ptr<SipTransaction> &,void>(&v112, &v114);
  v106 = v114;
  v114 = 0uLL;
  (*(void (**)(SipServerInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v106);
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
  if (*((_QWORD *)&v106 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
  if (*((_QWORD *)&v114 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v113;
  if (v113)
  {
    v104 = (unint64_t *)&v113->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
}

void sub_1BEE4D610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9 - 64);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9 - 80);
  _Unwind_Resume(a1);
}

void SipServerInviteTransaction::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const std::string *a4@<X3>, SipServerInviteTransaction **a5@<X8>)
{
  uint64_t v6;

  v6 = a1;
  *a5 = 0;
  a5[1] = 0;
  std::allocate_shared[abi:ne180100]<SipServerInviteTransaction,std::allocator<SipServerInviteTransaction>,SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,void>(&v6, a2, a3, a4, a5);
  SipServerInviteTransaction::constructStateMachine(*a5);
}

void sub_1BEE4D720(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipServerInviteTransaction::initialState(SipServerInviteTransaction *this)
{
  return 3;
}

void SipServerNonInviteTransaction::constructStateMachine(SipServerNonInviteTransaction *this)
{
  std::__shared_weak_count *v2;
  std::string::size_type v3;
  std::string *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_size;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *shared_owners;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::string::size_type v26;
  std::string *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  std::__shared_weak_count_vtbl *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  std::string::size_type v50;
  std::string *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  std::__shared_weak_count_vtbl *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  std::string::size_type v87;
  std::__shared_weak_count *v88;
  __int128 v89;

  v87 = 0;
  v88 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v87, (_QWORD *)this + 34);
  v3 = v87;
  v2 = v88;
  v4 = (std::string *)operator new(0x100uLL);
  v5 = (std::__shared_weak_count *)v4;
  v4->__r_.__value_.__l.__size_ = 0;
  p_size = &v4->__r_.__value_.__l.__size_;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BC420;
  v7 = (std::__shared_weak_count_vtbl *)&v4[1];
  *(_QWORD *)&v89 = v3;
  *((_QWORD *)&v89 + 1) = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  SipServerNonInviteTryingTransactionState::SipServerNonInviteTryingTransactionState(v4 + 1, (std::string::size_type *)&v89);
  if (v2)
  {
    v10 = (unint64_t *)&v2->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)&v85 = v7;
  *((_QWORD *)&v85 + 1) = v5;
  shared_owners = (std::__shared_weak_count *)v5[9].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_22;
    do
      v13 = __ldxr(p_size);
    while (__stxr(v13 + 1, p_size));
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v5[9].__vftable = v7;
    v5[9].__shared_owners_ = (uint64_t)v5;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v16 = __ldxr(p_size);
    while (__stxr(v16 + 1, p_size));
    v17 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v5[9].__vftable = v7;
    v5[9].__shared_owners_ = (uint64_t)v5;
  }
  do
    v19 = __ldaxr(p_size);
  while (__stlxr(v19 - 1, p_size));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_22:
  v86 = v85;
  v85 = 0uLL;
  (*(void (**)(SipServerNonInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v86);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (*((_QWORD *)&v85 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v85 + 1) + 16))(*((_QWORD *)&v85 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v85 + 1));
    }
  }
  v26 = v87;
  v25 = v88;
  v27 = (std::string *)operator new(0xF8uLL);
  v28 = (std::__shared_weak_count *)v27;
  v27->__r_.__value_.__l.__size_ = 0;
  v29 = &v27->__r_.__value_.__l.__size_;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BC470;
  v30 = (std::__shared_weak_count_vtbl *)&v27[1];
  *(_QWORD *)&v89 = v26;
  *((_QWORD *)&v89 + 1) = v25;
  if (v25)
  {
    v31 = (unint64_t *)&v25->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  SipServerNonInviteProceedingTransactionState::SipServerNonInviteProceedingTransactionState(v27 + 1, (std::string::size_type *)&v89);
  if (v25)
  {
    v33 = (unint64_t *)&v25->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)&v85 = v30;
  *((_QWORD *)&v85 + 1) = v28;
  v35 = (std::__shared_weak_count *)v28[9].__shared_owners_;
  if (v35)
  {
    if (v35->__shared_owners_ != -1)
      goto LABEL_53;
    do
      v36 = __ldxr(v29);
    while (__stxr(v36 + 1, v29));
    v37 = (unint64_t *)&v28->__shared_weak_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    v28[9].__vftable = v30;
    v28[9].__shared_owners_ = (uint64_t)v28;
    std::__shared_weak_count::__release_weak(v35);
  }
  else
  {
    do
      v39 = __ldxr(v29);
    while (__stxr(v39 + 1, v29));
    v40 = (unint64_t *)&v28->__shared_weak_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    v28[9].__vftable = v30;
    v28[9].__shared_owners_ = (uint64_t)v28;
  }
  do
    v42 = __ldaxr(v29);
  while (__stlxr(v42 - 1, v29));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_53:
  v84 = v85;
  v85 = 0uLL;
  (*(void (**)(SipServerNonInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v84);
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v50 = v87;
  v49 = v88;
  v51 = (std::string *)operator new(0xF8uLL);
  v52 = (std::__shared_weak_count *)v51;
  v51->__r_.__value_.__l.__size_ = 0;
  v53 = &v51->__r_.__value_.__l.__size_;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BC4C0;
  v54 = (std::__shared_weak_count_vtbl *)&v51[1];
  *(_QWORD *)&v89 = v50;
  *((_QWORD *)&v89 + 1) = v49;
  if (v49)
  {
    v55 = (unint64_t *)&v49->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  SipServerNonInviteCompletedTransactionState::SipServerNonInviteCompletedTransactionState(v51 + 1, (std::string::size_type *)&v89);
  if (v49)
  {
    v57 = (unint64_t *)&v49->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  *(_QWORD *)&v85 = v54;
  *((_QWORD *)&v85 + 1) = v52;
  v59 = (std::__shared_weak_count *)v52[9].__shared_owners_;
  if (v59)
  {
    if (v59->__shared_owners_ != -1)
      goto LABEL_84;
    do
      v60 = __ldxr(v53);
    while (__stxr(v60 + 1, v53));
    v61 = (unint64_t *)&v52->__shared_weak_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    v52[9].__vftable = v54;
    v52[9].__shared_owners_ = (uint64_t)v52;
    std::__shared_weak_count::__release_weak(v59);
  }
  else
  {
    do
      v63 = __ldxr(v53);
    while (__stxr(v63 + 1, v53));
    v64 = (unint64_t *)&v52->__shared_weak_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    v52[9].__vftable = v54;
    v52[9].__shared_owners_ = (uint64_t)v52;
  }
  do
    v66 = __ldaxr(v53);
  while (__stlxr(v66 - 1, v53));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
LABEL_84:
  v83 = v85;
  v85 = 0uLL;
  (*(void (**)(SipServerNonInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v83);
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  std::allocate_shared[abi:ne180100]<SipTerminatedTransactionState,std::allocator<SipTerminatedTransactionState>,std::shared_ptr<SipTransaction> &,void>(&v87, &v89);
  v82 = v89;
  v89 = 0uLL;
  (*(void (**)(SipServerNonInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v82);
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v88;
  if (v88)
  {
    v80 = (unint64_t *)&v88->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_1BEE4DD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v19 - 64);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void SipServerNonInviteTransaction::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const std::string *a4@<X3>, SipServerNonInviteTransaction **a5@<X8>)
{
  uint64_t v6;

  v6 = a1;
  *a5 = 0;
  a5[1] = 0;
  std::allocate_shared[abi:ne180100]<SipServerNonInviteTransaction,std::allocator<SipServerNonInviteTransaction>,SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,void>(&v6, a2, a3, a4, a5);
  SipServerNonInviteTransaction::constructStateMachine(*a5);
}

void sub_1BEE4DE64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipServerNonInviteTransaction::initialState(SipServerNonInviteTransaction *this)
{
  return 1;
}

uint64_t SipTypedStateMachine<SipTransactionState>::currentStateId(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t SipTransaction::stateMachineName(SipTransaction *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this + 12) + 24))((char *)this + 96);
}

_QWORD *SipTypedStateMachine<SipTransactionState>::addState(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int *v8;

  result = (_QWORD *)*a2;
  if (*a2)
  {
    v5 = a1 + 16;
    v7 = (*(uint64_t (**)(_QWORD *))(*result + 48))(result);
    v8 = &v7;
    v6 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v5, &v7, (uint64_t)&std::piecewise_construct, &v8);
    return std::shared_ptr<IpAddress>::operator=[abi:ne180100](v6 + 3, a2);
  }
  return result;
}

uint64_t SipTypedStateMachine<SipTransactionState>::currentState@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 64);
  *a2 = *(_QWORD *)(result + 56);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t SipTransaction::userName(SipTransaction *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this + 12) + 24))((char *)this + 96);
}

uint64_t `non-virtual thunk to'SipTransaction::userName(SipTransaction *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 24))((char *)this + 24);
}

void SipServerInviteTransaction::~SipServerInviteTransaction(SipServerInviteTransaction *this)
{
  SipServerTransaction::~SipServerTransaction(this, (uint64_t *)off_1E78BB988);
}

{
  SipServerTransaction::~SipServerTransaction(this, (uint64_t *)off_1E78BB988);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipServerInviteTransaction::~SipServerInviteTransaction(SipServerInviteTransaction *this)
{
  SipServerTransaction::~SipServerTransaction((SipServerInviteTransaction *)((char *)this - 72), (uint64_t *)off_1E78BB988);
}

{
  SipServerTransaction::~SipServerTransaction((SipServerInviteTransaction *)((char *)this - 72), (uint64_t *)off_1E78BB988);
  JUMPOUT(0x1C3B87100);
}

{
  SipServerTransaction::~SipServerTransaction((SipServerInviteTransaction *)((char *)this - 96), (uint64_t *)off_1E78BB988);
}

{
  SipServerTransaction::~SipServerTransaction((SipServerInviteTransaction *)((char *)this - 96), (uint64_t *)off_1E78BB988);
  JUMPOUT(0x1C3B87100);
}

{
  SipServerTransaction::~SipServerTransaction((SipServerInviteTransaction *)((char *)this - 168), (uint64_t *)off_1E78BB988);
}

{
  SipServerTransaction::~SipServerTransaction((SipServerInviteTransaction *)((char *)this - 168), (uint64_t *)off_1E78BB988);
  JUMPOUT(0x1C3B87100);
}

void SipServerNonInviteTransaction::~SipServerNonInviteTransaction(SipServerNonInviteTransaction *this)
{
  SipServerTransaction::~SipServerTransaction(this, (uint64_t *)off_1E78BBBB8);
}

{
  SipServerTransaction::~SipServerTransaction(this, (uint64_t *)off_1E78BBBB8);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipServerNonInviteTransaction::~SipServerNonInviteTransaction(SipServerNonInviteTransaction *this)
{
  SipServerTransaction::~SipServerTransaction((SipServerNonInviteTransaction *)((char *)this - 72), (uint64_t *)off_1E78BBBB8);
}

{
  SipServerTransaction::~SipServerTransaction((SipServerNonInviteTransaction *)((char *)this - 72), (uint64_t *)off_1E78BBBB8);
  JUMPOUT(0x1C3B87100);
}

{
  SipServerTransaction::~SipServerTransaction((SipServerNonInviteTransaction *)((char *)this - 96), (uint64_t *)off_1E78BBBB8);
}

{
  SipServerTransaction::~SipServerTransaction((SipServerNonInviteTransaction *)((char *)this - 96), (uint64_t *)off_1E78BBBB8);
  JUMPOUT(0x1C3B87100);
}

{
  SipServerTransaction::~SipServerTransaction((SipServerNonInviteTransaction *)((char *)this - 168), (uint64_t *)off_1E78BBBB8);
}

{
  SipServerTransaction::~SipServerTransaction((SipServerNonInviteTransaction *)((char *)this - 168), (uint64_t *)off_1E78BBBB8);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::allocate_shared[abi:ne180100]<SipAutoRespondingTransactionUser,std::allocator<SipAutoRespondingTransactionUser>,unsigned int &,std::string const&,void>@<X0>(int *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x80uLL);
  result = std::__shared_ptr_emplace<SipAutoRespondingTransactionUser>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,std::string const&,std::allocator<SipAutoRespondingTransactionUser>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1BEE4E19C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SipAutoRespondingTransactionUser>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,std::string const&,std::allocator<SipAutoRespondingTransactionUser>,0>(_QWORD *a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78BC190;
  SipAutoRespondingTransactionUser::SipAutoRespondingTransactionUser((uint64_t)(a1 + 3), *a2, a3);
  return a1;
}

void sub_1BEE4E1E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipAutoRespondingTransactionUser>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipAutoRespondingTransactionUser>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipAutoRespondingTransactionUser>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t SipAutoRespondingTransactionUser::SipAutoRespondingTransactionUser(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = off_1E78BC1E0;
  *(_QWORD *)(a1 + 8) = &off_1E78B7238;
  v5 = a1 + 8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 16) = &_bambiDomain;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v8[0] = &off_1E78B7238;
  v8[1] = &SipResultDomain::_domain;
  v9 = a2;
  ImsResult::operator=(a1 + 8, (uint64_t)v8);
  ImsResult::~ImsResult((ImsResult *)v8);
  v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a3 + 8);
  if (v6)
    ImsResult::operator<<<std::string>(v5, a3);
  return a1;
}

void sub_1BEE4E318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  ImsResult *v10;
  uint64_t v11;
  void **v12;

  if (*(char *)(v11 + 103) < 0)
    operator delete(*v12);
  ImsResult::~ImsResult(v10);
  _Unwind_Resume(a1);
}

void SipAutoRespondingTransactionUser::~SipAutoRespondingTransactionUser(void **this)
{
  *this = off_1E78BC1E0;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  ImsResult::~ImsResult((ImsResult *)(this + 1));
}

{
  *this = off_1E78BC1E0;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  ImsResult::~ImsResult((ImsResult *)(this + 1));
  JUMPOUT(0x1C3B87100);
}

uint64_t SipAutoRespondingTransactionUser::handleRequest(uint64_t a1, uint64_t a2, SipTransaction **a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  void (**v11)(SipResponse *__hidden);
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;

  v16 = 0u;
  v17 = 0u;
  v5 = SipTransaction::messageEncoding(*a3);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  LODWORD(v16) = 1065353216;
  *((_QWORD *)&v16 + 1) = 0;
  *(_QWORD *)&v17 = v5;
  v11 = off_1E78E40E8;
  v19 = 0;
  v20 = 0;
  __p = 0;
  DWORD2(v17) = 0;
  SipResponse::setStatusFromImsResult((SipResponse *)&v11, (const ImsResult *)(a1 + 8));
  (*(void (**)(uint64_t *__return_ptr, SipTransaction *, void (***)(SipResponse *__hidden), uint64_t))(*(_QWORD *)*a3 + 168))(&v8, *a3, &v11, 1);
  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 24))(v9, v10);
  ImsResult::~ImsResult((ImsResult *)&v8);
  v11 = off_1E78E40E8;
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  SipMessage::~SipMessage((SipMessage *)&v11);
  return v6 ^ 1u;
}

void sub_1BEE4E4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  SipResponse::~SipResponse(&a18);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<SipAutoRespondingTransactionUser,std::allocator<SipAutoRespondingTransactionUser>,ImsResult &,void>@<X0>(ImsResult *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x80uLL);
  result = std::__shared_ptr_emplace<SipAutoRespondingTransactionUser>::__shared_ptr_emplace[abi:ne180100]<ImsResult &,std::allocator<SipAutoRespondingTransactionUser>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1BEE4E53C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SipAutoRespondingTransactionUser>::__shared_ptr_emplace[abi:ne180100]<ImsResult &,std::allocator<SipAutoRespondingTransactionUser>,0>(_QWORD *a1, ImsResult *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78BC190;
  SipAutoRespondingTransactionUser::SipAutoRespondingTransactionUser((SipAutoRespondingTransactionUser *)(a1 + 3), a2);
  return a1;
}

void sub_1BEE4E584(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void SipAutoRespondingTransactionUser::SipAutoRespondingTransactionUser(SipAutoRespondingTransactionUser *this, ImsResult *a2)
{
  *(_QWORD *)this = off_1E78BC1E0;
  *((_QWORD *)this + 1) = &off_1E78B7238;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 2) = &_bambiDomain;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  ImsResult::operator=((uint64_t)this + 8, (uint64_t)a2);
}

void sub_1BEE4E60C(_Unwind_Exception *a1)
{
  ImsResult *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 103) < 0)
    operator delete(*v3);
  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

SipTerminationLockBase *SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock(SipTerminationLockBase *a1, uint64_t *a2, const std::string *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  SipTerminationLockBase::SipTerminationLockBase(a1, a3);
  *v5 = &off_1E78BC590;
  v5[4] = 0;
  v6 = v5 + 4;
  v5[5] = 0;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](v5 + 4, a2);
  v7 = *v6;
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 5);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 32))(v7, (_QWORD *)a1 + 1);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void sub_1BEE4E700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  void **v11;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v10);
  *(_QWORD *)v9 = off_1E78BC5D8;
  if (*(char *)(v9 + 31) < 0)
    operator delete(*v11);
  _Unwind_Resume(a1);
}

void SipTerminationLockBase::SipTerminationLockBase(SipTerminationLockBase *this, const std::string *a2)
{
  *(_QWORD *)this = off_1E78BC5D8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::string::operator=((std::string *)((char *)this + 8), a2);
}

void sub_1BEE4E780(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(uint64_t a1)
{
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(a1);
  JUMPOUT(0x1C3B87100);
}

void SipTerminationLockBase::~SipTerminationLockBase(void **this)
{
  *this = off_1E78BC5D8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78BC5D8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_1E78BC590;
  v3 = a1 + 32;
  v2 = *(_QWORD *)(a1 + 32);
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1 + 8);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  *(_QWORD *)a1 = off_1E78BC5D8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[3];

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = *a2;
      if (v7 <= v6)
        v9 = v6 % v7;
    }
    else
    {
      v9 = ((_DWORD)v7 - 1) & v6;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v6)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v12 >= v7)
              v12 %= v7;
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v13 = a1 + 16;
  v24[2] = 1;
  v14 = operator new(0x28uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v20);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v9 = v6 % v7;
      else
        v9 = v6;
    }
    else
    {
      v9 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v22 >= v7)
          v22 %= v7;
      }
      else
      {
        v22 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1BEE4EB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<SipTransactionState>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<SipServerInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipServerInviteProceedingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipServerInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipServerInviteCompletedTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipServerInviteConfirmedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC2E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerInviteConfirmedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC2E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipServerInviteConfirmedTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipServerInviteTerminationPendingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerInviteTerminationPendingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC330;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipServerInviteTerminationPendingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<SipTerminatedTransactionState,std::allocator<SipTerminatedTransactionState>,std::shared_ptr<SipTransaction> &,void>(std::string::size_type *a1@<X1>, _QWORD *a2@<X8>)
{
  std::string *v4;

  v4 = (std::string *)operator new(0xF8uLL);
  std::__shared_ptr_emplace<SipTerminatedTransactionState>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTransaction> &,std::allocator<SipTerminatedTransactionState>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4[9].__r_.__value_.__r.__words, (uint64_t)&v4[1]);
}

void sub_1BEE4ED44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<SipTerminatedTransactionState>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTransaction> &,std::allocator<SipTerminatedTransactionState>,0>(std::string *a1, std::string::size_type *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BC380;
  std::construct_at[abi:ne180100]<SipTerminatedTransactionState,std::shared_ptr<SipTransaction> &,SipTerminatedTransactionState*>(a1 + 1, a2);
  return a1;
}

void sub_1BEE4ED8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipTerminatedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipTerminatedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipTerminatedTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

std::string *std::construct_at[abi:ne180100]<SipTerminatedTransactionState,std::shared_ptr<SipTransaction> &,SipTerminatedTransactionState*>(std::string *a1, std::string::size_type *a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string::size_type v10;
  std::__shared_weak_count *v11;

  v3 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  SipTerminatedTransactionState::SipTerminatedTransactionState(a1, &v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_1BEE4EE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *SipTerminatedTransactionState::SipTerminatedTransactionState(std::string *a1, std::string::size_type *a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string::size_type v10;
  std::__shared_weak_count *v11;

  v3 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  SipTransactionState::SipTransactionState(a1, &v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78EDDA8;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E78EDE28;
  return a1;
}

void sub_1BEE4EF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<SipServerInviteTransaction,std::allocator<SipServerInviteTransaction>,SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,void>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, const std::string *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x258uLL);
  std::__shared_ptr_emplace<SipServerInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipServerInviteTransaction>,0>((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a5, v10 + 37, (uint64_t)(v10 + 3));
}

void sub_1BEE4EFAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<SipServerInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipServerInviteTransaction>,0>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const std::string *a5)
{
  uint64_t v9;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E78BC3D0;
  v9 = *a2;
  *(_QWORD *)(a1 + 120) = &off_1E78B7B60;
  SipServerTransaction::SipServerTransaction(a1 + 24, (uint64_t *)off_1E78BB988, v9, a3, a4, a5);
  *(_QWORD *)(a1 + 24) = &off_1E78BB7C0;
  *(_QWORD *)(a1 + 96) = &unk_1E78BB880;
  *(_QWORD *)(a1 + 120) = &unk_1E78BB8E8;
  *(_QWORD *)(a1 + 192) = &unk_1E78BB930;
  *(_DWORD *)(a1 + 592) = 1;
  return a1;
}

void sub_1BEE4F044(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipServerInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC3D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC3D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipServerInviteTransaction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<SipServerNonInviteTryingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC420;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerNonInviteTryingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC420;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipServerNonInviteTryingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipServerNonInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerNonInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipServerNonInviteProceedingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipServerNonInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC4C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerNonInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC4C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipServerNonInviteCompletedTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<SipServerNonInviteTransaction,std::allocator<SipServerNonInviteTransaction>,SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,void>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, const std::string *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x250uLL);
  std::__shared_ptr_emplace<SipServerNonInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipServerNonInviteTransaction>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a5, v10 + 37, (uint64_t)(v10 + 3));
}

void sub_1BEE4F204(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SipServerNonInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest const&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipServerNonInviteTransaction>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const std::string *a5)
{
  uint64_t v9;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78BC510;
  v9 = *a2;
  a1[15] = &off_1E78B7B60;
  SipServerTransaction::SipServerTransaction((uint64_t)(a1 + 3), (uint64_t *)off_1E78BBBB8, v9, a3, a4, a5);
  a1[3] = &off_1E78BB9F0;
  a1[12] = &unk_1E78BBAB0;
  a1[15] = &unk_1E78BBB18;
  a1[24] = &unk_1E78BBB60;
  return a1;
}

void sub_1BEE4F294(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipServerNonInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipServerNonInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipServerNonInviteTransaction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t HttpRequest::HttpRequest(uint64_t a1, __int128 *a2, int a3, __int128 *a4, uint64_t a5, __int128 *a6)
{
  std::string *v11;
  __int128 v12;
  uint64_t v14[3];

  std::map<std::string,std::string,HttpMessage::ciLess,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100](v14, a5);
  HttpMessage::HttpMessage(a1, a2, (uint64_t)v14, a6);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v14, (_QWORD *)v14[1]);
  *(_QWORD *)a1 = off_1E78BC5F8;
  *(_DWORD *)(a1 + 80) = a3;
  v11 = (std::string *)(a1 + 88);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v12 = *a4;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  return a1;
}

void sub_1BEE4F3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  void **v11;

  HttpMessage::~HttpMessage(v11);
  _Unwind_Resume(a1);
}

__CFHTTPMessage *HttpRequest::serialize(HttpRequest *this)
{
  char *v2;
  const __CFAllocator *v3;
  const __CFURL *v4;
  const __CFString *v5;
  int v6;
  CFStringRef *v7;
  __CFHTTPMessage *Request;
  void *__p;
  CFStringRef URLString;
  char v12;
  uint64_t v13;
  const __CFString *v14;

  v13 = 0;
  v14 = 0;
  if (*((_DWORD *)this + 20))
    v2 = "PUT";
  else
    v2 = "GET";
  std::string::basic_string[abi:ne180100]<0>(&__p, v2);
  ims::CFString::CFString(&v13, (char *)&__p, 0x8000100u);
  if (v12 < 0)
    operator delete(__p);
  __p = 0;
  URLString = 0;
  ims::CFString::CFString(&__p, (char *)this + 88, 0x8000100u);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], URLString, 0);
  v5 = v14;
  v6 = std::string::compare((const std::string *)((char *)this + 32), "1.0");
  v7 = (CFStringRef *)MEMORY[0x1E0C930E0];
  if (v6)
    v7 = (CFStringRef *)MEMORY[0x1E0C930E8];
  Request = CFHTTPMessageCreateRequest(v3, v5, v4, *v7);
  CFRelease(v4);
  HttpMessage::serialize(this, Request);
  ims::CFType::~CFType((ims::CFType *)&__p);
  ims::CFType::~CFType((ims::CFType *)&v13);
  return Request;
}

void sub_1BEE4F4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  ims::CFType::~CFType((ims::CFType *)&__p);
  ims::CFType::~CFType((ims::CFType *)&a16);
  _Unwind_Resume(a1);
}

uint64_t HttpRequest::deserialize(HttpRequest *this, CFHTTPMessageRef request)
{
  std::string::size_type size;
  int v5;
  std::string *v6;
  unsigned int v7;
  int v8;
  _BOOL4 v9;
  const __CFURL *v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void (**v21)(ims::CFString *__hidden);
  const __CFString *v22;
  std::string __p[42];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v21 = &off_1E78EAB58;
  v22 = CFHTTPMessageCopyRequestMethod(request);
  ims::CFString::asString(v22, (const void *)0x8000100, __p);
  size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  v5 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p[0].__r_.__value_.__l.__size_;
  if (size == 3)
  {
    v6 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = __p;
    v7 = bswap32(LOWORD(v6->__r_.__value_.__l.__data_)) >> 16;
    if (v7 == 20565)
    {
      v8 = v6->__r_.__value_.__s.__data_[2] - 84;
    }
    else if (v7 < 0x5055)
    {
      v8 = -1;
    }
    else
    {
      v8 = 1;
    }
    v9 = v8 == 0;
  }
  else
  {
    v9 = 0;
  }
  *((_DWORD *)this + 20) = v9;
  if (v5 < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = CFHTTPMessageCopyRequestURL(request);
  if (!v10)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Unable to copy URL from Http Request", 36);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v20 < 0)
      operator delete(v19[0]);
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
    v14 = (void *)__p[0].__r_.__value_.__r.__words[0];
    goto LABEL_26;
  }
  bzero(__p, 0x400uLL);
  v11 = CFURLGetBytes(v10, (UInt8 *)__p, 1024);
  CFRelease(v10);
  if (!v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v19, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v17, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)v19, (uint64_t)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Invalid HTTP Request URL", 24);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (v18 < 0)
      operator delete(v17[0]);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_27;
    v14 = v19[0];
LABEL_26:
    operator delete(v14);
LABEL_27:
    v12 = 0;
    goto LABEL_28;
  }
  std::string::__assign_external((std::string *)((char *)this + 88), (const std::string::value_type *)__p, v11);
  v12 = HttpMessage::deserialize(this, request);
LABEL_28:
  ims::CFType::~CFType((ims::CFType *)&v21);
  return v12;
}

void sub_1BEE4F808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  ims::CFType::~CFType((ims::CFType *)&a22);
  _Unwind_Resume(a1);
}

uint64_t HttpRequest::clone(HttpRequest *this)
{
  uint64_t v2;
  void **v3;
  std::string v5;

  v2 = operator new();
  HttpMessage::HttpMessage((HttpMessage *)v2, this);
  *(_QWORD *)(v2 + 88) = 0;
  v3 = (void **)(v2 + 88);
  *(_QWORD *)v2 = off_1E78BC5F8;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_DWORD *)(v2 + 80) = *((_DWORD *)this + 20);
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
    if (*(char *)(v2 + 111) < 0)
      operator delete(*v3);
  }
  else
  {
    v5 = *(std::string *)((char *)this + 88);
  }
  *(_OWORD *)v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(_QWORD *)(v2 + 104) = *((_QWORD *)&v5.__r_.__value_.__l + 2);
  return v2;
}

void sub_1BEE4F998(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*v2);
  HttpMessage::~HttpMessage((void **)v1);
  MEMORY[0x1C3B87100](v1, 0x10B3C40B48FAC4ELL);
  _Unwind_Resume(a1);
}

uint64_t HttpRequest::isRequest(HttpRequest *this)
{
  return 1;
}

uint64_t *std::map<std::string,std::string,HttpMessage::ciLess,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string,HttpMessage::ciLess,std::allocator<std::pair<std::string const,std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *(__int128 **)a2, (__int128 *)(a2 + 8));
  return a1;
}

void sub_1BEE4FA20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string,HttpMessage::ciLess,std::allocator<std::pair<std::string const,std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  uint64_t **v5;
  uint64_t *v6;
  __int128 *v7;
  __int128 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, (uint64_t)(v4 + 2), v4 + 2);
      v7 = (__int128 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(__int128 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (__int128 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t *v11;
  uint64_t *v12;

  v11 = 0;
  v12 = 0;
  v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  uint64_t **v9;
  const char *v11;
  const char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  const char *v20;
  const char *v21;
  uint64_t *v22;
  const char *v23;

  v9 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2
    || (*(char *)(a5 + 23) >= 0 ? (v11 = (const char *)a5) : (v11 = *(const char **)a5),
        *((char *)a2 + 55) >= 0 ? (v12 = (const char *)(a2 + 4)) : (v12 = (const char *)a2[4]),
        strcasecmp(v11, v12) < 0))
  {
    v13 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v15 = a2;
LABEL_29:
      if (v13)
      {
        *a3 = v15;
        return v15 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v13)
    {
      v14 = (uint64_t *)*a2;
      do
      {
        v15 = v14;
        v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (uint64_t *)v18[2];
        v19 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (v19);
    }
    if (*((char *)v15 + 55) >= 0)
      v20 = (const char *)(v15 + 4);
    else
      v20 = (const char *)v15[4];
    if (*(char *)(a5 + 23) >= 0)
      v21 = (const char *)a5;
    else
      v21 = *(const char **)a5;
    if (strcasecmp(v20, v21) < 0)
      goto LABEL_29;
    return std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (strcasecmp(v12, v11) < 0)
  {
    v16 = a2[1];
    if (v16)
    {
      v17 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v17;
        v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
    else
    {
      v22 = a2;
      do
      {
        a4 = (uint64_t **)v22[2];
        v19 = *a4 == v22;
        v22 = (uint64_t *)a4;
      }
      while (!v19);
    }
    if (a4 == v9
      || (*((char *)a4 + 55) >= 0 ? (v23 = (const char *)(a4 + 4)) : (v23 = (const char *)a4[4]),
          strcasecmp(v11, v23) < 0))
    {
      if (v16)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    return std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1BEE4FD8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator(MediaSessionQueuedCollectionIterator *this)
{
  MediaSessionCollection *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  *(_QWORD *)this = &off_1E78BC650;
  *((_QWORD *)this + 3) = &unk_1E78BC6C0;
  v2 = (MediaSessionQueuedCollectionIterator *)((char *)this + 24);
  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"~MediaSessionQueuedCollectionIterator", 37);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 192))(*((_QWORD *)this + 7));
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  MediaSessionCollection::~MediaSessionCollection(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

{
  MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator(MediaSessionQueuedCollectionIterator *this)
{
  MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator((MediaSessionQueuedCollectionIterator *)((char *)this - 24));
}

{
  MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator((MediaSessionQueuedCollectionIterator *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

void MediaSessionQueuedCollectionIterator::add(_QWORD *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p[2];
  char v32;
  void *v33[2];
  char v34;

  std::string::basic_string[abi:ne180100]<0>(v33, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v33, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v9 = v8;
  v10 = *(_QWORD **)(v8 + 8);
  v11 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"add", 3);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" session=", 9);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v32 < 0)
    operator delete(__p[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  v12 = a1[9];
  v13 = (std::__shared_weak_count *)a3[1];
  v27 = *a3;
  v28 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t *))(*(_QWORD *)v12 + 16))(&v29, v12, a2, &v27);
  v16 = v30;
  if (v30)
  {
    v17 = (unint64_t *)&v30->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v28;
  if (v28)
  {
    v20 = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  MediaSessionQueuedCollectionIterator::addNewBookmark(a1, a2, (__int128 *)(*a3 + 56));
  v23 = a1[7];
  v22 = a1[8];
  if (v23)
    v24 = v23 + 24;
  else
    v24 = 0;
  *a4 = v24;
  a4[1] = v22;
  if (v22)
  {
    v25 = (unint64_t *)(v22 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
}

void sub_1BEE501FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MediaSessionQueuedCollectionIterator::addNewBookmark(_QWORD *a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  _QWORD **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_weak_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  dispatch_object_t object;
  std::__shared_weak_count *v68;
  unint64_t v69;
  void *__p[2];
  char v71;
  void *v72;
  std::__shared_weak_count *v73;
  char v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;

  std::string::basic_string[abi:ne180100]<0>(&v72, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v72, (uint64_t)__p);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"addNewBookmark", 14);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" stackId=", 9);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 32))(v6, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v71 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v72);
  v65 = 0;
  v66 = 0;
  v69 = a2;
  std::string::basic_string[abi:ne180100]<0>(&v72, "rtp.MediaSessionQueuedCollectionIterator");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v72, (uint64_t)__p);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"delegateForSession", 18);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v71 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v72);
  v77 = 0;
  v78 = 0;
  v10 = (_QWORD **)(a1 + 4);
  v75 = 0;
  v76 = 0;
  ims::getValueFromMap<unsigned long long,std::shared_ptr<MediaSessionQueuedCollectionIterator::MediaSessionBookmark>>(&v77, (uint64_t)(a1 + 4), &v69, (uint64_t)&v75);
  v11 = v76;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v77)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v77 + 152))(&v63);
    goto LABEL_16;
  }
  object = 0;
  v68 = 0;
  (*(void (**)(dispatch_object_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)a1[9] + 24))(&object, a1[9], v69);
  if (!object)
  {
    std::string::basic_string[abi:ne180100]<0>(&v72, "rtp.collection");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v54 = ImsLogger::warn(ims::_logger, (uint64_t)&v72, (uint64_t)__p);
    v55 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v55);
    *(_BYTE *)(v54 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v54 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"delegateForSession", 18);
    *(_BYTE *)(v54 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"No session or delegate found for session ", 41);
    *(_BYTE *)(v54 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v54 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v54 + 17) = 0;
    if (v71 < 0)
      operator delete(__p[0]);
    if (v74 < 0)
      operator delete(v72);
    v63 = 0;
    v64 = 0;
    goto LABEL_103;
  }
  (*((void (**)(void **__return_ptr))object->isa + 19))(&v72);
  if (v73)
  {
    v33 = std::__shared_weak_count::lock(v73);
    if (v33)
      v34 = v72;
    else
      v34 = 0;
    if (v73)
      std::__shared_weak_count::__release_weak(v73);
    if (v34)
    {
      if (v34 == a1)
      {
        v35 = (std::__shared_weak_count *)a1[14];
        if (v35)
        {
          if (v35->__shared_owners_ != -1)
          {
            v63 = a1[13];
            v64 = v35;
            p_shared_weak_owners = (unint64_t *)&v35->__shared_weak_owners_;
            do
              v37 = __ldxr(p_shared_weak_owners);
            while (__stxr(v37 + 1, p_shared_weak_owners));
            if (v33)
            {
              v38 = (unint64_t *)&v33->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            goto LABEL_103;
          }
        }
      }
    }
    if (v33)
    {
      v56 = (unint64_t *)&v33->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  (*((void (**)(uint64_t *__return_ptr))object->isa + 19))(&v63);
LABEL_103:
  v58 = v68;
  if (v68)
  {
    v59 = (unint64_t *)&v68->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
LABEL_16:
  v14 = v78;
  if (v78)
  {
    v15 = &v78->__shared_owners_;
    do
      v16 = __ldaxr((unint64_t *)v15);
    while (__stlxr(v16 - 1, (unint64_t *)v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(NSObject **)(a1[7] + 72);
  object = v17;
  if (v17)
    dispatch_retain(v17);
  v18 = (std::__shared_weak_count *)operator new(0x78uLL);
  v19 = v18;
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC948;
  v20 = &v18[1].__vftable;
  v21 = v63;
  v22 = v64;
  v63 = 0;
  v64 = 0;
  v77 = v21;
  v78 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v75 = 0;
  v76 = 0;
  MediaSessionInterface::MediaSessionInterface((uint64_t)&v18[1], &v77, a2, &v75, a3, &object);
  v25 = v76;
  if (v76)
  {
    v26 = (unint64_t *)&v76->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v78)
    std::__shared_weak_count::__release_weak(v78);
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC780;
  v19[4].__shared_weak_owners_ = (uint64_t)a1;
  std::string::basic_string[abi:ne180100]<0>(&v72, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v28 = ImsLogger::debug(ims::_logger, (uint64_t)&v72, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"MediaSessionBookmark", 20);
  *(_BYTE *)(v28 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v28 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v28 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v28 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v28 + 17) = 0;
  if (v71 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v72);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  v65 = (uint64_t)v20;
  v66 = v19;
  if (object)
    dispatch_release(object);
  if (v64)
    std::__shared_weak_count::__release_weak(v64);
  v30 = (uint64_t **)(a1 + 5);
  v29 = (uint64_t *)a1[5];
  if (v29)
  {
    while (1)
    {
      while (1)
      {
        v31 = (uint64_t **)v29;
        v32 = v29[4];
        if (v32 <= a2)
          break;
        v29 = *v31;
        v30 = v31;
        if (!*v31)
          goto LABEL_69;
      }
      if (v32 >= a2)
        goto LABEL_73;
      v29 = v31[1];
      if (!v29)
      {
        v30 = v31 + 1;
        goto LABEL_69;
      }
    }
  }
  v31 = (uint64_t **)(a1 + 5);
LABEL_69:
  v40 = (uint64_t *)operator new(0x38uLL);
  v40[5] = 0;
  v40[6] = 0;
  v40[4] = a2;
  *v40 = 0;
  v40[1] = 0;
  v40[2] = (uint64_t)v31;
  *v30 = v40;
  v41 = (_QWORD *)**v10;
  v42 = v40;
  if (v41)
  {
    *v10 = v41;
    v42 = *v30;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[5], v42);
  ++a1[6];
  v20 = (_QWORD *)v65;
  v19 = v66;
  if (v66)
  {
    v31 = (uint64_t **)v40;
LABEL_73:
    v43 = (unint64_t *)&v19->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    v40 = (uint64_t *)v31;
  }
  v45 = (std::__shared_weak_count *)v40[6];
  v40[5] = (uint64_t)v20;
  v40[6] = (uint64_t)v19;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (_QWORD *)a1[7];
  v49 = v66;
  v61 = v65;
  v62 = v66;
  if (v66)
  {
    v50 = (unint64_t *)&v66->__shared_weak_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  MediaSessionQueue::setQueuedInterface(v48, &v61);
  if (v62)
    std::__shared_weak_count::__release_weak(v62);
  if (v49)
  {
    v52 = (unint64_t *)&v49->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_1BEE50B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, char a14, uint64_t a15, dispatch_object_t object, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a30 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&object);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 96);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MediaSessionQueuedCollectionIterator::add(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  MediaSessionQueuedCollectionIterator::add((_QWORD *)(a1 - 24), a2, a3, a4);
}

void MediaSessionQueuedCollectionIterator::get(MediaSessionQueuedCollectionIterator *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *__p;
  std::__shared_weak_count *v33;
  char v34;
  void *v35;
  std::__shared_weak_count *v36;
  char v37;
  unint64_t v38;

  v38 = a2;
  std::string::basic_string[abi:ne180100]<0>(&v35, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)&v35, (uint64_t)&__p);
  if (!this)
    __cxa_bad_typeid();
  v6 = v5;
  v7 = *(_QWORD **)(v5 + 8);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"get", 3);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v34 < 0)
    operator delete(__p);
  if (v37 < 0)
    operator delete(v35);
  v35 = 0;
  v36 = 0;
  v30 = 0;
  v31 = 0;
  ims::getValueFromMap<unsigned long long,std::shared_ptr<MediaSessionQueuedCollectionIterator::MediaSessionBookmark>>(&v35, (uint64_t)this + 32, &v38, (uint64_t)&v30);
  v9 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v35)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 7);
    v28 = v35;
    v29 = v36;
    if (v36)
    {
      p_shared_weak_owners = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
    }
    MediaSessionQueue::setQueuedInterface(v12, (uint64_t *)&v28);
    if (v29)
      std::__shared_weak_count::__release_weak(v29);
LABEL_26:
    v21 = *((_QWORD *)this + 7);
    v20 = *((_QWORD *)this + 8);
    if (v21)
      v22 = v21 + 24;
    else
      v22 = 0;
    *a3 = v22;
    a3[1] = v20;
    if (v20)
    {
      v23 = (unint64_t *)(v20 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    goto LABEL_32;
  }
  __p = 0;
  v33 = 0;
  v15 = v38;
  (*(void (**)(void **__return_ptr, _QWORD, unint64_t))(**((_QWORD **)this + 9) + 24))(&__p, *((_QWORD *)this + 9), v38);
  v16 = __p;
  if (__p)
  {
    MediaSessionQueuedCollectionIterator::addNewBookmark(this, v15, (__int128 *)((char *)__p + 56));
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  v17 = v33;
  if (v33)
  {
    v18 = (unint64_t *)&v33->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v16)
    goto LABEL_26;
LABEL_32:
  v25 = v36;
  if (v36)
  {
    v26 = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1BEE50F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void ims::getValueFromMap<unsigned long long,std::shared_ptr<MediaSessionQueuedCollectionIterator::MediaSessionBookmark>>(_QWORD *a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  v8 = *(_QWORD **)(a2 + 8);
  v6 = (_QWORD *)(a2 + 8);
  v7 = v8;
  if (!v8)
    goto LABEL_12;
  v9 = *a3;
  v10 = v6;
  do
  {
    v11 = v7[4];
    v12 = v11 >= v9;
    if (v11 >= v9)
      v13 = v7;
    else
      v13 = v7 + 1;
    if (v12)
      v10 = v7;
    v7 = (_QWORD *)*v13;
  }
  while (*v13);
  if (v10 != v6 && v9 >= v10[4])
  {
    v16 = v10[5];
    v15 = v10[6];
    *a1 = v16;
    a1[1] = v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(v21, "rtp.util");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"getValueFromMap", 15);
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" Object not found [key=", 23);
    *(_BYTE *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (v22 < 0)
      operator delete(v21[0]);
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
}

void sub_1BEE5118C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'MediaSessionQueuedCollectionIterator::get(MediaSessionQueuedCollectionIterator *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  MediaSessionQueuedCollectionIterator::get((MediaSessionQueuedCollectionIterator *)((char *)this - 24), a2, a3);
}

void MediaSessionQueuedCollectionIterator::getRealSession(MediaSessionQueuedCollectionIterator *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;

  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
  if (!a2)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"getRealSession", 14);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  v10 = *(_QWORD *)(a2 + 88);
  if (v10 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 176))(v10) == a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "rtp.collection");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::warn(ims::_logger, (uint64_t)v18, (uint64_t)__p);
    v12 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v12);
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"getRealSession", 14);
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" Someone is accessing the session the iterator is pointing to: ", 63);
    *(_BYTE *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
    v13 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)this = *(_QWORD *)(a2 + 88);
    *((_QWORD *)this + 1) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 72) + 24))(*(_QWORD *)(a2 + 72), a3);
  }
}

void sub_1BEE514A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MediaSessionQueuedCollectionIterator::iterationComplete(_QWORD *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  void *__p[2];
  char v37;
  void *v38[2];
  char v39;

  std::string::basic_string[abi:ne180100]<0>(v38, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v38, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"iterationComplete", 17);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [collection=", 13);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v37 < 0)
    operator delete(__p[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  RTPSharedPointerBase::getShared<MediaSessionCollectionIterator>((uint64_t)a1, v38);
  v10 = *a2;
  v12 = v38[0];
  v11 = (std::__shared_weak_count *)v38[1];
  if (v38[1])
  {
    v13 = (unint64_t *)((char *)v38[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10 == v12)
  {
    v31 = a1[10];
    *(_QWORD *)a3 = a1[9];
    *(_QWORD *)(a3 + 8) = v31;
    if (v31)
    {
      v32 = (unint64_t *)(v31 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
  }
  else
  {
    v15 = a1[9];
    v16 = (std::__shared_weak_count *)a2[1];
    v34 = *a2;
    v35 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v15 + 88))(v38, v15, &v34);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(a1 + 9), (__int128 *)v38);
    v19 = (std::__shared_weak_count *)v38[1];
    if (v38[1])
    {
      v20 = (unint64_t *)((char *)v38[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v35;
    if (v35)
    {
      v23 = (unint64_t *)&v35->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = a1[11];
    if (v25)
    {
      v26 = a1[9];
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 176))(v25);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v26 + 24))(v38, v26, v27);
      std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(a1 + 11), (__int128 *)v38);
      v28 = (std::__shared_weak_count *)v38[1];
      if (v38[1])
      {
        v29 = (unint64_t *)((char *)v38[1] + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    RTPSharedPointerBase::getShared<MediaSessionCollectionIterator>((uint64_t)a1, (void **)a3);
  }
}

void sub_1BEE51800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RTPSharedPointerBase::getShared<MediaSessionCollectionIterator>(uint64_t a1@<X0>, void **p_lpsrc@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *lpsrc;
  std::__shared_weak_count *v9;

  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      v4 = v9;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void `non-virtual thunk to'MediaSessionQueuedCollectionIterator::iterationComplete(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  MediaSessionQueuedCollectionIterator::iterationComplete((_QWORD *)(a1 - 24), a2, a3);
}

void MediaSessionQueuedCollectionIterator::MediaSessionBookmark::initialize(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;
  void *v29;
  std::__shared_weak_count *v30;
  char v31;

  std::string::basic_string[abi:ne180100]<0>(&v29, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v14 = ImsLogger::debug(ims::_logger, (uint64_t)&v29, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v15 = v14;
  v16 = *(_QWORD **)(v14 + 8);
  v17 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v17);
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"initialize", 10);
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v15 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  if (v28 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
    operator delete(v29);
  v29 = 0;
  v30 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v29, a1[11], a1[3]);
  v18 = v29;
  if (v29)
  {
    v19 = (std::__shared_weak_count *)a7[1];
    v25 = *a7;
    v26 = v19;
    if (v19)
    {
      p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v21 = __ldxr(p_shared_weak_owners);
      while (__stxr(v21 + 1, p_shared_weak_owners));
    }
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v18 + 16))(v18, a2, a3, a4, a5, a6, &v25);
    if (v26)
      std::__shared_weak_count::__release_weak(v26);
  }
  v22 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1BEE51B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::terminate(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v11;
  void *v12;
  std::__shared_weak_count *v13;
  char v14;

  std::string::basic_string[abi:ne180100]<0>(&v12, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v12, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"terminate", 9);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v12);
  v12 = 0;
  v13 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v12, *((_QWORD *)this + 11), *((_QWORD *)this + 3));
  if (v12)
    (*(void (**)(void *, _QWORD))(*(_QWORD *)v12 + 24))(v12, 0);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1BEE51D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::start(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v11;
  void *v12;
  std::__shared_weak_count *v13;
  char v14;

  std::string::basic_string[abi:ne180100]<0>(&v12, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v12, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"start", 5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v12);
  v12 = 0;
  v13 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v12, *((_QWORD *)this + 11), *((_QWORD *)this + 3));
  if (v12)
    (*(void (**)(void *, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1BEE51F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::stop(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v11;
  void *v12;
  std::__shared_weak_count *v13;
  char v14;

  std::string::basic_string[abi:ne180100]<0>(&v12, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v12, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"stop", 4);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v12);
  v12 = 0;
  v13 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v12, *((_QWORD *)this + 11), *((_QWORD *)this + 3));
  if (v12)
    (*(void (**)(void *, _QWORD))(*(_QWORD *)v12 + 40))(v12, 0);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 0;
}

void sub_1BEE5214C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::setDirection(_QWORD *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string v12;
  std::string __p;
  void *v14[2];
  char v15;
  void *v16;
  std::__shared_weak_count *v17;
  char v18;

  std::string::basic_string[abi:ne180100]<0>(&v16, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(v14, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v16, (uint64_t)v14);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"setDirection", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" direction=", 11);
  *(_BYTE *)(v5 + 17) = 0;
  ims::toString<MediaDirection>(a2, &v12);
  LoggableString::LoggableString(&__p, &v12);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 40))(v5, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v18 < 0)
    operator delete(v16);
  v16 = 0;
  v17 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v16, a1[11], a1[3]);
  if (v16)
    (*(void (**)(void *, unsigned int *, _QWORD))(*(_QWORD *)v16 + 48))(v16, a2, 0);
  v8 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 0;
}

void sub_1BEE523CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void MediaSessionQueuedCollectionIterator::MediaSessionBookmark::setConfiguration(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  char v18;
  void *v19;
  std::__shared_weak_count *v20;
  char v21;

  std::string::basic_string[abi:ne180100]<0>(&v19, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v19, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"setConfiguration", 16);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v19);
  v19 = 0;
  v20 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v19, a1[11], a1[3]);
  v8 = v19;
  v9 = (std::__shared_weak_count *)a2[1];
  v15 = *a2;
  v16 = v9;
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  (*(void (**)(void *, uint64_t *))(*(_QWORD *)v8 + 56))(v8, &v15);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  v12 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BEE52644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::configure(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v11;
  void *v12;
  std::__shared_weak_count *v13;
  char v14;

  std::string::basic_string[abi:ne180100]<0>(&v12, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v12, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"configure", 9);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v12);
  v12 = 0;
  v13 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v12, *((_QWORD *)this + 11), *((_QWORD *)this + 3));
  if (v12)
    (*(void (**)(void *, _QWORD))(*(_QWORD *)v12 + 64))(v12, 0);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1BEE5285C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::transactionPending(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v12;
  void *v13;
  std::__shared_weak_count *v14;
  char v15;

  std::string::basic_string[abi:ne180100]<0>(&v13, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v13, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"transactionPending", 18);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v13);
  v13 = 0;
  v14 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v13, *((_QWORD *)this + 11), *((_QWORD *)this + 3));
  if (v13)
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 72))(v13);
  else
    v6 = 0;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1BEE52A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::active(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v12;
  void *v13;
  std::__shared_weak_count *v14;
  char v15;

  std::string::basic_string[abi:ne180100]<0>(&v13, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v13, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"active", 6);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v13);
  v13 = 0;
  v14 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v13, *((_QWORD *)this + 11), *((_QWORD *)this + 3));
  if (v13)
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 80))(v13);
  else
    v6 = 0;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1BEE52C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::paused(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v12;
  void *v13;
  std::__shared_weak_count *v14;
  char v15;

  std::string::basic_string[abi:ne180100]<0>(&v13, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v13, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"paused", 6);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v13);
  v13 = 0;
  v14 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v13, *((_QWORD *)this + 11), *((_QWORD *)this + 3));
  if (v13)
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 88))(v13);
  else
    v6 = 0;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1BEE52E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::direction(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v12;
  void *v13;
  std::__shared_weak_count *v14;
  char v15;

  std::string::basic_string[abi:ne180100]<0>(&v13, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v13, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"direction", 9);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v13);
  v13 = 0;
  v14 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v13, *((_QWORD *)this + 11), *((_QWORD *)this + 3));
  if (v13)
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 96))(v13);
  else
    v6 = 4;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1BEE530AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::mediaType(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(v9, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v9, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"mediaType", 9);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  return 2;
}

void sub_1BEE53254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::mediaSupportEnabled(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p[2];
  char v14;
  void *v15;
  std::__shared_weak_count *v16;
  char v17;

  std::string::basic_string[abi:ne180100]<0>(&v15, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v15, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"mediaSupportEnabled", 19);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v15);
  v15 = 0;
  v16 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v15, a1[11], a1[3]);
  if (v15)
    v8 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v15 + 112))(v15, a2);
  else
    v8 = (_DWORD)a2 == 2;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

void sub_1BEE5346C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void MediaSessionQueuedCollectionIterator::MediaSessionBookmark::startSendingDTMF(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  char v14;
  void *v15;
  std::__shared_weak_count *v16;
  char v17;

  std::string::basic_string[abi:ne180100]<0>(&v15, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v15, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"startSendingDTMF", 16);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v15);
  v15 = 0;
  v16 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v15, *((_QWORD *)this + 11), *((_QWORD *)this + 3));
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(*(_QWORD *)v15 + 128))(v15, a2);
  }
  else
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741836;
  }
  v10 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BEE536BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void MediaSessionQueuedCollectionIterator::MediaSessionBookmark::stopSendingDTMF(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[2];
  char v12;
  void *v13;
  std::__shared_weak_count *v14;
  char v15;

  std::string::basic_string[abi:ne180100]<0>(&v13, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v13, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"stopSendingDTMF", 15);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v13);
  v13 = 0;
  v14 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v13, *((_QWORD *)this + 11), *((_QWORD *)this + 3));
  if (v13)
  {
    (*(void (**)(void *))(*(_QWORD *)v13 + 136))(v13);
  }
  else
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 1073741836;
  }
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BEE53904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void MediaSessionQueuedCollectionIterator::MediaSessionBookmark::sendDTMFDigits(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  char v14;
  void *v15;
  std::__shared_weak_count *v16;
  char v17;

  std::string::basic_string[abi:ne180100]<0>(&v15, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v15, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"sendDTMFDigits", 14);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v15);
  v15 = 0;
  v16 = 0;
  MediaSessionQueuedCollectionIterator::getRealSession((MediaSessionQueuedCollectionIterator *)&v15, a1[11], a1[3]);
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(*(_QWORD *)v15 + 144))(v15, a2);
  }
  else
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741836;
  }
  v10 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BEE53B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueuedCollectionIterator::remove(MediaSessionQueuedCollectionIterator *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  std::string::basic_string[abi:ne180100]<0>(v11, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"remove", 6);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9), a2);
}

void sub_1BEE53D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::contains(MediaSessionQueuedCollectionIterator *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  std::string::basic_string[abi:ne180100]<0>(v11, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"contains", 8);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), a2);
}

void sub_1BEE53ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::contains(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  std::string::basic_string[abi:ne180100]<0>(v21, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"contains", 8);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [session=", 10);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v20 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  v8 = a1[9];
  v9 = (std::__shared_weak_count *)a2[1];
  v17 = *a2;
  v18 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v17);
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_1BEE540E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueuedCollectionIterator::size(MediaSessionQueuedCollectionIterator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 56))(*((_QWORD *)this + 9));
}

uint64_t MediaSessionQueuedCollectionIterator::empty(MediaSessionQueuedCollectionIterator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 64))(*((_QWORD *)this + 9));
}

uint64_t MediaSessionQueuedCollectionIterator::clear(MediaSessionQueuedCollectionIterator *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(v9, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v9, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"clear", 5);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 72))(*((_QWORD *)this + 9));
}

void sub_1BEE5427C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueuedCollectionIterator::sessionIdList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  std::string::basic_string[abi:ne180100]<0>(v11, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"sessionIdList", 13);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [stackId=", 10);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 80))(*(_QWORD *)(a1 + 72), a2);
}

void sub_1BEE5443C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'MediaSessionQueuedCollectionIterator::remove(MediaSessionQueuedCollectionIterator *this, uint64_t a2)
{
  return MediaSessionQueuedCollectionIterator::remove((MediaSessionQueuedCollectionIterator *)((char *)this - 24), a2);
}

uint64_t `non-virtual thunk to'MediaSessionQueuedCollectionIterator::contains(MediaSessionQueuedCollectionIterator *this, uint64_t a2)
{
  return MediaSessionQueuedCollectionIterator::contains((MediaSessionQueuedCollectionIterator *)((char *)this - 24), a2);
}

uint64_t `non-virtual thunk to'MediaSessionQueuedCollectionIterator::contains(uint64_t a1, uint64_t *a2)
{
  return MediaSessionQueuedCollectionIterator::contains((_QWORD *)(a1 - 24), a2);
}

uint64_t `non-virtual thunk to'MediaSessionQueuedCollectionIterator::size(MediaSessionQueuedCollectionIterator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 56))(*((_QWORD *)this + 6));
}

uint64_t `non-virtual thunk to'MediaSessionQueuedCollectionIterator::empty(MediaSessionQueuedCollectionIterator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 64))(*((_QWORD *)this + 6));
}

uint64_t `non-virtual thunk to'MediaSessionQueuedCollectionIterator::clear(MediaSessionQueuedCollectionIterator *this)
{
  return MediaSessionQueuedCollectionIterator::clear((MediaSessionQueuedCollectionIterator *)((char *)this - 24));
}

uint64_t `non-virtual thunk to'MediaSessionQueuedCollectionIterator::sessionIdList(uint64_t a1, uint64_t a2)
{
  return MediaSessionQueuedCollectionIterator::sessionIdList(a1 - 24, a2);
}

void MediaSessionQueuedCollectionIterator::MediaSessionBookmark::~MediaSessionBookmark(void **this)
{
  MediaSessionQueuedCollectionIterator::MediaSessionBookmark::~MediaSessionBookmark(this);
  JUMPOUT(0x1C3B87100);
}

{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *this = &off_1E78BC780;
  std::string::basic_string[abi:ne180100]<0>(v5, "rtp.bookmark");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_4);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"~MediaSessionBookmark", 21);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  MediaSessionInterface::~MediaSessionInterface(this);
}

uint64_t MediaSessionQueuedCollectionIterator::MediaSessionBookmark::isAudioReady(MediaSessionQueuedCollectionIterator::MediaSessionBookmark *this)
{
  return 1;
}

void MediaSessionInterface::~MediaSessionInterface(void **this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;

  *this = off_1E78BC870;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  v2 = this[6];
  if (v2)
    dispatch_release(v2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  v3 = (std::__shared_weak_count *)this[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void std::__shared_ptr_emplace<MediaSessionQueuedCollectionIterator::MediaSessionBookmark>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MediaSessionQueuedCollectionIterator::MediaSessionBookmark>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BC948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<MediaSessionQueuedCollectionIterator::MediaSessionBookmark>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t MediaSessionInterface::MediaSessionInterface(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4, __int128 *a5, dispatch_object_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::string *v15;
  __int128 v16;

  v9 = *a2;
  v8 = a2[1];
  *(_QWORD *)a1 = off_1E78BC870;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a4[1];
  *(_QWORD *)(a1 + 32) = *a4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 48) = *a6;
  if (*a6)
    dispatch_retain(*a6);
  v15 = (std::string *)(a1 + 56);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v16 = *a5;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a5 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  *(_WORD *)(a1 + 80) = 1;
  return a1;
}

void sub_1BEE54780(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v4;
  std::__shared_weak_count *v5;

  v4 = *(NSObject **)(v1 + 48);
  if (v4)
    dispatch_release(v4);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

SipProxyAuthorizationHeader *SipProxyAuthenticateHeader::createAuthorizationHeader(SipProxyAuthenticateHeader *this)
{
  SipProxyAuthorizationHeader *v2;

  v2 = (SipProxyAuthorizationHeader *)operator new();
  SipProxyAuthorizationHeader::SipProxyAuthorizationHeader(v2, this);
  return v2;
}

void sub_1BEE547F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40ADE1DEA6);
  _Unwind_Resume(a1);
}

void SipProxyAuthenticateHeader::~SipProxyAuthenticateHeader(SipProxyAuthenticateHeader *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E78D7A78;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E78D7A78;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipHeader *SipProxyAuthenticateHeader::clone(SipProxyAuthenticateHeader *this)
{
  SipHeader *v2;

  v2 = (SipHeader *)operator new();
  SipAuthenticateHeader::SipAuthenticateHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78BC998;
  return v2;
}

void sub_1BEE548F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40ADE1DEA6);
  _Unwind_Resume(a1);
}

uint64_t SipAuthHeader::allowsDuplicates(SipAuthHeader *this)
{
  return 1;
}

const char *SipProxyAuthenticateHeader::matchingAuthorizationHeaderName(SipProxyAuthenticateHeader *this)
{
  return "Proxy-Authorization";
}

void sub_1BEE549E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BEE54B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void SipParameterListHeader::SipParameterListHeader(SipParameterListHeader *this, const SipParameterListHeader *a2)
{
  _QWORD *v4;

  SipHeader::SipHeader(this, a2);
  *v4 = off_1E78BCA40;
  v4[8] = &off_1E78B82D8;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(v4 + 9, *((void ***)a2 + 9), (void **)a2 + 10);
  *((_BYTE *)this + 97) = 1;
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
}

void sub_1BEE54BE8(_Unwind_Exception *a1)
{
  void **v1;

  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

uint64_t SipParameterListHeader::encodeValue(SipParameterListHeader *this, ImsOutStream *a2)
{
  SipParameterMap::toStream((SipParameterListHeader *)((char *)this + 64), a2, 0, 0, 0, 1);
  return 1;
}

uint64_t SipParameterListHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 + 64;
  result = SipParameterMap::fromString(a1 + 64, a2, 0, 0);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, v3);
  return result;
}

void SipBackoffTimer::initialize(std::string *a1, std::string::size_type a2, std::string::size_type *a3, std::string *__str)
{
  std::string::size_type v6;
  std::string::size_type v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *size;

  a1->__r_.__value_.__l.__size_ = a2;
  std::string::operator=(a1 + 1, __str);
  v7 = *a3;
  v6 = a3[1];
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  size = (std::__shared_weak_count *)a1[2].__r_.__value_.__l.__size_;
  a1[2].__r_.__value_.__r.__words[0] = v7;
  a1[2].__r_.__value_.__l.__size_ = v6;
  if (size)
    std::__shared_weak_count::__release_weak(size);
}

unsigned __int8 *SipBackoffTimer::reset(std::string *this)
{
  unsigned __int8 *result;

  result = (unsigned __int8 *)this->__r_.__value_.__l.__size_;
  if (result)
    result = SipTimerContainer::cancelTimer((SipTimerContainer *)result, this + 1);
  LODWORD(this->__r_.__value_.__r.__words[2]) = 0;
  return result;
}

void SipSimpleBackoffTimer::initialize(uint64_t a1, std::string::size_type a2, std::string::size_type *a3, std::string *a4, int a5, int a6)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::string::size_type v14[2];

  v9 = (std::__shared_weak_count *)a3[1];
  v14[0] = *a3;
  v14[1] = (std::string::size_type)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  SipBackoffTimer::initialize((std::string *)a1, a2, v14, a4);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_DWORD *)(a1 + 64) = a5;
  *(_DWORD *)(a1 + 68) = a6;
}

void sub_1BEE54DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipSimpleBackoffTimer::scheduleRetry(SipSimpleBackoffTimer *this)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = *((_DWORD *)this + 4);
  v4 = *((unsigned int *)this + 16);
  v5 = ((1 << v3) + *((_DWORD *)this + 17));
  if (v5 <= v4)
  {
    *((_DWORD *)this + 4) = v3 + 1;
    v4 = v5;
  }
  v9[0] = &off_1E78BCBB0;
  v9[1] = this;
  v10 = v9;
  SipTimerContainer::startTimer(v2, (uint64_t)this + 24, (uint64_t)v9, 1000 * v4, 0);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_9;
  }
  if (v10)
  {
    v7 = 5;
LABEL_9:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return v4;
}

void sub_1BEE54EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Rfc5626BackoffTimer::initialize(uint64_t a1, std::string::size_type a2, std::string::size_type *a3, std::string *a4, int a5, int a6)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string::size_type v11[2];

  *(_DWORD *)(a1 + 64) = a5;
  *(_DWORD *)(a1 + 68) = a6;
  v6 = (std::__shared_weak_count *)a3[1];
  v11[0] = *a3;
  v11[1] = (std::string::size_type)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  SipBackoffTimer::initialize((std::string *)a1, a2, v11, a4);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BEE54F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Rfc5626BackoffTimer::scheduleRetry(Rfc5626BackoffTimer *this)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 1))
    return 0;
  v2 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 4) = v2;
  v3 = *((_DWORD *)this + 17);
  v4 = (*((_DWORD *)this + 16) / v3) >> v2;
  v5 = v3 << v2;
  if (v4)
    v6 = v5;
  else
    v6 = *((_DWORD *)this + 16);
  v7 = (random() % (v6 >> 1)) + (v6 >> 1);
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  v12[0] = &off_1E78BCC30;
  v12[1] = this;
  v13 = v12;
  SipTimerContainer::startTimer(v8, (uint64_t)this + 24, (uint64_t)v12, 1000 * v7, 0);
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_10;
  }
  if (v13)
  {
    v10 = 5;
LABEL_10:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return v7;
}

void sub_1BEE5507C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void SipSimpleBackoffTimer::~SipSimpleBackoffTimer(SipSimpleBackoffTimer *this)
{
  SipBackoffTimer::~SipBackoffTimer(this);
  JUMPOUT(0x1C3B87100);
}

void Rfc5626BackoffTimer::~Rfc5626BackoffTimer(Rfc5626BackoffTimer *this)
{
  SipBackoffTimer::~SipBackoffTimer(this);
  JUMPOUT(0x1C3B87100);
}

void SipBackoffTimer::~SipBackoffTimer(SipBackoffTimer *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E78BCB10;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

void std::__function::__func<SipSimpleBackoffTimer::scheduleRetry(void)::$_0,std::allocator<SipSimpleBackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<SipSimpleBackoffTimer::scheduleRetry(void)::$_0,std::allocator<SipSimpleBackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E78BCBB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<SipSimpleBackoffTimer::scheduleRetry(void)::$_0,std::allocator<SipSimpleBackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E78BCBB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<SipSimpleBackoffTimer::scheduleRetry(void)::$_0,std::allocator<SipSimpleBackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void (***v7)(_QWORD, uint64_t);
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(v2 + 56);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(void (****)(_QWORD, uint64_t))(v2 + 48);
      if (v7)
        (**v7)(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BEE5524C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSimpleBackoffTimer::scheduleRetry(void)::$_0,std::allocator<SipSimpleBackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSimpleBackoffTimer::scheduleRetry(void)::$_0,std::allocator<SipSimpleBackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::__function::__func<Rfc5626BackoffTimer::scheduleRetry(void)::$_0,std::allocator<Rfc5626BackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<Rfc5626BackoffTimer::scheduleRetry(void)::$_0,std::allocator<Rfc5626BackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E78BCC30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Rfc5626BackoffTimer::scheduleRetry(void)::$_0,std::allocator<Rfc5626BackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E78BCC30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Rfc5626BackoffTimer::scheduleRetry(void)::$_0,std::allocator<Rfc5626BackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void (***v7)(_QWORD, uint64_t);
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(v2 + 56);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(void (****)(_QWORD, uint64_t))(v2 + 48);
      if (v7)
        (**v7)(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BEE553C8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Rfc5626BackoffTimer::scheduleRetry(void)::$_0,std::allocator<Rfc5626BackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Rfc5626BackoffTimer::scheduleRetry(void)::$_0,std::allocator<Rfc5626BackoffTimer::scheduleRetry(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void XcapUrlHelper::createUrl(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", CFSTR("/"));
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
      goto LABEL_12;
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    goto LABEL_12;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setPath:", v7);

  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)a2 + 23))
      goto LABEL_12;
    goto LABEL_11;
  }
  if (a2[1])
  {
    a2 = (uint64_t *)*a2;
LABEL_11:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setQuery:", v8);

  }
LABEL_12:
  objc_msgSend(v6, "string");
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(a3, (char *)objc_msgSend(v9, "UTF8String"));

}

void sub_1BEE55574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t BambiEmergencyCallHandler::BambiEmergencyCallHandler(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  std::string __str;
  std::string __p;

  *(_QWORD *)a1 = off_1E78BA6D8;
  *(_QWORD *)(a1 + 8) = off_1E78BD268;
  *(_QWORD *)(a1 + 16) = off_1E78BCFD8;
  v4 = a1 + 16;
  *(_QWORD *)(a1 + 24) = off_1E78B8D08;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
  v5 = *a2;
  if (*(char *)(*a2 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v5 + 4136), *(_QWORD *)(v5 + 4144));
  else
    __str = *(std::string *)(v5 + 4136);
  ImsLogContainer::ImsLogContainer(a1 + 32, &__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 136) = &unk_1E78BCE38;
  *(_QWORD *)(a1 + 144) = &unk_1E78BCE68;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)a1 = &off_1E78BCCB0;
  *(_QWORD *)(a1 + 8) = &unk_1E78BCD58;
  *(_QWORD *)(a1 + 16) = &unk_1E78BCD80;
  *(_QWORD *)(a1 + 24) = &unk_1E78BCDB0;
  *(_QWORD *)(a1 + 32) = &unk_1E78BCDD8;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  BambiEmergencyCallOptions::BambiEmergencyCallOptions((BambiEmergencyCallOptions *)(a1 + 216));
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 4904));
  *(_OWORD *)(a1 + 5072) = 0u;
  *(_OWORD *)(a1 + 5056) = 0u;
  *(_QWORD *)(a1 + 5088) = 0x40A7700000000000;
  *(_OWORD *)(a1 + 5096) = 0u;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(_OWORD *)(a1 + 5144) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_OWORD *)(a1 + 5176) = 0u;
  *(_OWORD *)(a1 + 5188) = 0u;
  *(_OWORD *)(a1 + 5208) = 0u;
  *(_OWORD *)(a1 + 5224) = 0u;
  *(_OWORD *)(a1 + 5240) = 0u;
  *(_OWORD *)(a1 + 5256) = 0u;
  v7 = *a2;
  v6 = a2[1];
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = v7;
  *(_QWORD *)(a1 + 176) = v6;
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(*a2 + 2848) = v4;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 200, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_QWORD *)(a1 + 4896) = 0;
  *(_QWORD *)(a1 + 5008) = a1 + 136;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
  v14 = *a2;
  if (*(char *)(*a2 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v14 + 4136), *(_QWORD *)(v14 + 4144));
  else
    __str = *(std::string *)(v14 + 4136);
  std::string::operator=((std::string *)(a1 + 4952), &__p);
  std::string::operator=((std::string *)(a1 + 4976), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 5048) = 0;
  *(_WORD *)(a1 + 187) = 0;
  if (*(_BYTE *)(*a2 + 176))
  {
    v15 = *(_QWORD *)(*a2 + 144);
    v16 = *(_QWORD *)(v15 + 248);
    v17 = *(std::__shared_weak_count **)(v15 + 256);
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      *(_QWORD *)(v16 + 456) = a1;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      *(_QWORD *)(v16 + 456) = a1;
    }
    *(_QWORD *)(*(_QWORD *)(*a2 + 144) + 616) = a1 + 144;
  }
  BambiEmergencyCallHandler::resetConditions((BambiEmergencyCallHandler *)a1);
  return a1;
}

void sub_1BEE55900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void **v24;
  SipTimerContainer *v25;
  void **v26;
  _QWORD *v27;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;

  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22 + 5256);
  std::deque<SipUri>::~deque[abi:ne180100](v27);
  ims::LocationInfo::~LocationInfo(v26);
  SipTimerContainer::~SipTimerContainer(v25);
  BambiEmergencyCallOptions::~BambiEmergencyCallOptions(v24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23);
  v29 = *(std::__shared_weak_count **)(v22 + 176);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  v30 = *(std::__shared_weak_count **)(v22 + 160);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  ImsLogContainer::~ImsLogContainer(a10);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::resetConditions(BambiEmergencyCallHandler *this)
{
  uint64_t v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  std::string::basic_string[abi:ne180100]<0>(v15, "bambi.call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"EmergencyCallhandler: resetting conditions", 42);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  *((_WORD *)this + 92) = 257;
  *((_BYTE *)this + 186) = 1;
  *((_DWORD *)this + 48) = 0;
  *((_BYTE *)this + 188) = 0;
  SipTimerContainer::cancelAllTimers((BambiEmergencyCallHandler *)((char *)this + 4904));
  *((_QWORD *)this + 612) = 0;
  v3 = (void **)*((_QWORD *)this + 652);
  v4 = (void **)*((_QWORD *)this + 653);
  if (v4 == v3)
  {
    v8 = (_QWORD *)((char *)this + 5248);
    v4 = (void **)*((_QWORD *)this + 652);
  }
  else
  {
    v5 = *((_QWORD *)this + 655);
    v6 = &v3[v5 >> 4];
    v7 = (char *)*v6 + 408 * (v5 & 0xF);
    v8 = (_QWORD *)((char *)this + 5248);
    v9 = *(uint64_t *)((char *)v3 + (((*((_QWORD *)this + 656) + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 408 * ((*((_DWORD *)this + 1312) + (int)v5) & 0xF);
    if (v7 != (char *)v9)
    {
      do
      {
        (**(void (***)(char *))v7)(v7);
        v7 += 408;
        if (v7 - (_BYTE *)*v6 == 6528)
        {
          v10 = (char *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (char *)v9);
      v4 = (void **)*((_QWORD *)this + 653);
      v3 = (void **)*((_QWORD *)this + 652);
    }
  }
  *v8 = 0;
  v11 = (char *)v4 - (char *)v3;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v3 = (void **)(*((_QWORD *)this + 652) + 8);
      *((_QWORD *)this + 652) = v3;
      v11 = *((_QWORD *)this + 653) - (_QWORD)v3;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v12 = 8;
    goto LABEL_18;
  }
  if (v11 >> 3 == 2)
  {
    v12 = 16;
LABEL_18:
    *((_QWORD *)this + 655) = v12;
  }
  BambiEmergencyCallHandler::clearLocation(this);
}

void sub_1BEE55BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BambiEmergencyCallOptions::~BambiEmergencyCallOptions(void **this)
{
  if (*((char *)this + 4671) < 0)
    operator delete(this[581]);
  SipUri::~SipUri((SipUri *)(this + 530));
  SipStackConfig::~SipStackConfig(this + 219);
  SipRegistrationConfig::~SipRegistrationConfig(this + 10);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void BambiEmergencyCallHandler::~BambiEmergencyCallHandler(BambiEmergencyCallHandler *this)
{
  SipTimerContainer *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = &off_1E78BCCB0;
  *((_QWORD *)this + 1) = &unk_1E78BCD58;
  *((_QWORD *)this + 2) = &unk_1E78BCD80;
  *((_QWORD *)this + 3) = &unk_1E78BCDB0;
  *((_QWORD *)this + 4) = &unk_1E78BCDD8;
  *((_QWORD *)this + 17) = &unk_1E78BCE38;
  *((_QWORD *)this + 18) = &unk_1E78BCE68;
  v2 = (BambiEmergencyCallHandler *)((char *)this + 4904);
  SipTimerContainer::cancelAllTimers((BambiEmergencyCallHandler *)((char *)this + 4904));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 5256);
  std::deque<SipUri>::~deque[abi:ne180100]((_QWORD *)this + 651);
  if (*((char *)this + 5199) < 0)
    operator delete(*((void **)this + 647));
  if (*((char *)this + 5175) < 0)
    operator delete(*((void **)this + 644));
  if (*((char *)this + 5151) < 0)
    operator delete(*((void **)this + 641));
  if (*((char *)this + 5127) < 0)
    operator delete(*((void **)this + 638));
  SipTimerContainer::~SipTimerContainer(v2);
  if (*((char *)this + 4887) < 0)
    operator delete(*((void **)this + 608));
  SipUri::~SipUri((BambiEmergencyCallHandler *)((char *)this + 4456));
  SipStackConfig::~SipStackConfig((void **)this + 246);
  SipRegistrationConfig::~SipRegistrationConfig((void **)this + 37);
  if (*((char *)this + 287) < 0)
    operator delete(*((void **)this + 33));
  if (*((char *)this + 263) < 0)
    operator delete(*((void **)this + 30));
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  *((_QWORD *)this + 4) = off_1E78CFE68;
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
}

{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'BambiEmergencyCallHandler::~BambiEmergencyCallHandler(BambiEmergencyCallHandler *this)
{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 8));
}

{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 16));
}

{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 24));
}

{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 32));
}

{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 136));
}

{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 32));
  JUMPOUT(0x1C3B87100);
}

{
  BambiEmergencyCallHandler::~BambiEmergencyCallHandler((BambiEmergencyCallHandler *)((char *)this - 136));
  JUMPOUT(0x1C3B87100);
}

void BambiEmergencyCallHandler::cancelPendingEmergencyCall(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 200) && *(_BYTE *)(a1 + 187))
  {
    v4 = a1 + 32;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a1 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(a1 + 32, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"canceling pending emergency call", 32);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    BambiEmergencyCallHandler::endEmergencyCallWithReason(a1, a2);
  }
  else
  {
    v6 = a1 + 32;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a1 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"cancelPendingEmergencyCall: no pending emergency call", 53);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
  }
}

uint64_t BambiEmergencyCallHandler::handleRegistrationActive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = a1 + 32;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"emergency registration is active", 32);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  *(_WORD *)(a1 + 185) = 0;
  BambiEmergencyCallHandler::checkConditions((BambiEmergencyCallHandler *)a1);
  result = BambiEmergencyCallHandler::delegate((BambiEmergencyCallHandler *)a1);
  if (result)
  {
    v8 = BambiEmergencyCallHandler::delegate((BambiEmergencyCallHandler *)a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(v8, a3);
  }
  return result;
}

void BambiEmergencyCallHandler::checkConditions(BambiEmergencyCallHandler *this)
{
  char *v2;
  uint64_t v3;
  _QWORD *v4;
  const char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  SipStack *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  SipDialog *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  SipDialog *v61;
  unint64_t *p_shared_weak_owners;
  unint64_t v63;
  unint64_t v64;
  ImsPrefs *v65;
  void **EmergencySessionSetupTimeoutSecondsKey;
  void *v67;
  int v68;
  unint64_t *v69;
  unint64_t v70;
  SipDialog **v71;
  SipDialog **v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  void *__p[2];
  __int128 v83;
  __int128 v84;
  void *v85[2];
  void *v86[2];
  __int128 v87;
  void *v88[2];
  void *v89[2];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  void (**v108)(SipUri *__hidden);
  _QWORD v109[9];
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  void (**v127)(SipParameterMap *__hidden);
  _QWORD *v128;
  _QWORD v129[5];
  _QWORD v130[3];
  uint64_t v131;
  std::__shared_weak_count *v132;
  SipStack *v133;
  std::__shared_weak_count *v134;
  SipDialog *v135;
  std::__shared_weak_count *v136;
  SipDialog **v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 186))
  {
    v2 = (char *)this + 32;
    v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
    v4 = *(_QWORD **)(v3 + 8);
    v5 = "still waiting for emergency registration to complete";
LABEL_3:
    v6 = 52;
LABEL_6:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    return;
  }
  if (*((_BYTE *)this + 184))
  {
    v7 = (char *)this + 32;
    v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))(v7, v3);
    v4 = *(_QWORD **)(v3 + 8);
    v5 = "still waiting for emergency stack initialization";
    v6 = 48;
    goto LABEL_6;
  }
  if (*((_BYTE *)this + 185))
  {
    v8 = (char *)this + 32;
    v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v8 + 16))(v8, v3);
    v4 = *(_QWORD **)(v3 + 8);
    v5 = "still waiting for emergency transport initialization";
    goto LABEL_3;
  }
  if ((*((_DWORD *)this + 48) & 0xFFFFFFFE) != 2)
  {
    v18 = (char *)this + 32;
    v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v18 + 16))(v18, v3);
    v4 = *(_QWORD **)(v3 + 8);
    v5 = "still waiting for emergency location";
    v6 = 36;
    goto LABEL_6;
  }
  v133 = 0;
  v134 = 0;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v9)
  {
    v10 = 0;
    goto LABEL_23;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v134 = v10;
  if (!v10 || (v11 = *((_QWORD *)this + 21), (v133 = (SipStack *)v11) == 0))
  {
LABEL_23:
    v20 = *((_QWORD *)this + 4);
    v19 = (char *)this + 32;
    v21 = (*(uint64_t (**)(char *))(v20 + 64))(v19);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v19 + 16))(v19, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"SipStack is null", 16);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    if (!v10)
      return;
    goto LABEL_131;
  }
  if (!*((_QWORD *)this + 25) || !*((_BYTE *)this + 187))
  {
    v23 = *((_QWORD *)this + 4);
    v22 = (char *)this + 32;
    v24 = (*(uint64_t (**)(char *))(v23 + 64))(v22);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v22 + 16))(v22, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"processPendingEmergencyCall: no pending emergency call", 54);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
LABEL_131:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v79 = __ldaxr(p_shared_owners);
    while (__stlxr(v79 - 1, p_shared_owners));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  SipTimerContainer::cancelTimer((BambiEmergencyCallHandler *)((char *)this + 4904), (std::string *)&kEmergencyCallSetupTimer);
  v12 = (char *)this + 32;
  v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"processing pending emergency call", 33);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  v131 = *((_QWORD *)this + 25);
  v132 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *((_BYTE *)this + 187) = 0;
  v130[2] = 257;
  v129[2] = 257;
  v126 = 0;
  v111 = 0u;
  v109[0] = &off_1E78D08F8;
  memset(&v109[1], 0, 48);
  *(_QWORD *)&v111 = 0;
  v109[8] = &v110;
  v110 = 0;
  v109[7] = &off_1E78B82D8;
  v108 = &off_1E78BFCE8;
  v17 = (char *)&v112;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v125 = 0;
  v127 = &off_1E78B82D8;
  v129[1] = 0;
  v129[0] = 0;
  v128 = v129;
  v130[1] = 0;
  v130[0] = 0;
  v129[3] = &off_1E78B82D8;
  v129[4] = v130;
  WORD4(v111) = 257;
  if (SipUri::isValidUri((BambiEmergencyCallHandler *)((char *)this + 4456)))
  {
    SipUri::operator=((SipUri *)&v108, (uint64_t)this + 4456);
  }
  else
  {
    if (*((char *)this + 2455) < 0)
      v25 = *((_QWORD *)this + 305);
    else
      v25 = *((unsigned __int8 *)this + 2455);
    if (v25)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      SipUri::setUser((uint64_t)&v108, (const std::string *)((char *)this + 2432), (uint64_t)__p);
      if (SBYTE7(v83) < 0)
        operator delete(__p[0]);
      v26 = *(void **)(v11 + 160);
      v27 = *(std::__shared_weak_count **)(v11 + 168);
      __p[0] = v26;
      __p[1] = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      if (SBYTE7(v113) < 0)
      {
        *((_QWORD *)&v112 + 1) = 3;
        v17 = (char *)v112;
      }
      else
      {
        BYTE7(v113) = 3;
      }
      strcpy(v17, "sip");
      if (SHIBYTE(v117) < 0)
      {
        **((_BYTE **)&v116 + 1) = 0;
        *(_QWORD *)&v117 = 0;
      }
      else
      {
        BYTE8(v116) = 0;
        HIBYTE(v117) = 0;
      }
      if (SHIBYTE(v120) < 0)
      {
        **((_BYTE **)&v119 + 1) = 0;
        *(_QWORD *)&v120 = 0;
      }
      else
      {
        BYTE8(v119) = 0;
        HIBYTE(v120) = 0;
      }
      if (SBYTE7(v122) < 0)
      {
        *(_BYTE *)v121 = 0;
        *((_QWORD *)&v121 + 1) = 0;
      }
      else
      {
        LOBYTE(v121) = 0;
        BYTE7(v122) = 0;
      }
      if (SHIBYTE(v123) < 0)
      {
        **((_BYTE **)&v122 + 1) = 0;
        *(_QWORD *)&v123 = 0;
      }
      else
      {
        BYTE8(v122) = 0;
        HIBYTE(v123) = 0;
      }
      SipHost::operator=((uint64_t)v109, (uint64_t)v26 + 1128);
      LOBYTE(v126) = 0;
      if (v27)
      {
        v30 = (unint64_t *)&v27->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
  if (SipUri::isValidUri((SipUri *)&v108))
  {
    v32 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 32, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"setting preferred identity for anonymous calls to ", 50);
    *(_BYTE *)(v32 + 17) = 0;
    ((void (*)(SipUri *, ImsOutStream *))v108[5])((SipUri *)&v108, (ImsOutStream *)v32);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v32 + 17) = 0;
    v33 = v133;
    v34 = *((_QWORD *)v133 + 18);
    v35 = *(_QWORD *)(v34 + 552);
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    *(_QWORD *)(v34 + 552) = ((SipUri *(*)(SipUri *))v108[2])((SipUri *)&v108);
  }
  else
  {
    v33 = v133;
  }
  if (SipStack::registered(v33))
  {
    v107 = 0;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    *(_OWORD *)v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    *(_OWORD *)v88 = 0u;
    *(_OWORD *)v85 = 0u;
    *(_OWORD *)v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    *(_OWORD *)__p = 0u;
    v36 = *(_QWORD *)(v131 + 384);
    v37 = *(std::__shared_weak_count **)(v131 + 392);
    v80 = v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v40 = *(_QWORD *)(v36 + 240);
    v41 = *(std::__shared_weak_count **)(v36 + 248);
    v135 = (SipDialog *)v40;
    v136 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    SipStack::makeCanonicalUri(v33, (const SipUri *)(v40 + 224), (uint64_t)__p);
    if (v41)
    {
      v44 = (unint64_t *)&v41->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (v80)
    {
      v46 = (unint64_t *)&v80->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v48 = *(_QWORD *)(v131 + 384);
    v49 = *(std::__shared_weak_count **)(v131 + 392);
    v81 = v49;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v52 = *(SipDialog **)(v48 + 240);
    v53 = *(std::__shared_weak_count **)(v48 + 248);
    v135 = v52;
    v136 = v53;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    SipDialog::updateRemoteUri(v52, (const SipUri *)__p);
    if (v53)
    {
      v56 = (unint64_t *)&v53->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (v81)
    {
      v58 = (unint64_t *)&v81->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    SipUri::~SipUri((SipUri *)__p);
  }
  v61 = (SipDialog *)*((_QWORD *)this + 19);
  v60 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v60)
  {
    p_shared_weak_owners = (unint64_t *)&v60->__shared_weak_owners_;
    do
      v63 = __ldxr(p_shared_weak_owners);
    while (__stxr(v63 + 1, p_shared_weak_owners));
    do
      v64 = __ldxr(p_shared_weak_owners);
    while (__stxr(v64 + 1, p_shared_weak_owners));
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 614, (unsigned __int8 *)&kEmergencySessionSetupTimer)&& !*((_BYTE *)this + 188))
  {
    v65 = (ImsPrefs *)SipStack::prefs(v133);
    EmergencySessionSetupTimeoutSecondsKey = (void **)ImsPrefs::getEmergencySessionSetupTimeoutSecondsKey(v65);
    v67 = ImsPrefs::prefWithKey(v65, EmergencySessionSetupTimeoutSecondsKey);
    v68 = v67
        ? (*(uint64_t (**)(void *))(*(_QWORD *)v67 + 56))(v67)
        : *((_DWORD *)EmergencySessionSetupTimeoutSecondsKey + 15);
    if (v68)
    {
      if (v60)
      {
        v69 = (unint64_t *)&v60->__shared_weak_owners_;
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      v137 = 0;
      v71 = (SipDialog **)operator new(0x20uLL);
      *v71 = (SipDialog *)&off_1E78BD0D8;
      v71[1] = this;
      v71[2] = v61;
      v71[3] = (SipDialog *)v60;
      v137 = v71;
      SipTimerContainer::startTimer((_QWORD *)this + 613, (uint64_t)&kEmergencySessionSetupTimer, (uint64_t)&v135, 1000 * v68, 0);
      v72 = v137;
      if (v137 == &v135)
      {
        v73 = 4;
        v72 = &v135;
      }
      else
      {
        if (!v137)
          goto LABEL_112;
        v73 = 5;
      }
      (*((void (**)(SipDialog **))*v72 + v73))(v72);
    }
  }
LABEL_112:
  if (*((_BYTE *)this + 188))
  {
    v74 = v131;
    if (*((double *)this + 637) > 0.0)
    {
      ims::LocationInfo::LocationInfo((ims::LocationInfo *)__p, (BambiEmergencyCallHandler *)((char *)this + 5056));
      BambiCall::setEmergencyLocationInfo(v74, (const std::string *)__p);
      if (SHIBYTE(v90) < 0)
        operator delete(v89[1]);
      if (SHIBYTE(v89[0]) < 0)
        operator delete(v88[0]);
      if (SHIBYTE(v87) < 0)
        operator delete(v86[1]);
      if (SHIBYTE(v86[0]) < 0)
        operator delete(v85[0]);
    }
  }
  else
  {
    v74 = v131;
  }
  *((_BYTE *)this + 188) = 0;
  *(_BYTE *)(v74 + 457) = 1;
  (*(void (**)(_QWORD))(**((_QWORD **)v133 + 361) + 152))(*((_QWORD *)v133 + 361));
  if (v60)
  {
    std::__shared_weak_count::__release_weak(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  SipUri::~SipUri((SipUri *)&v108);
  v75 = v132;
  if (v132)
  {
    v76 = (unint64_t *)&v132->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v10 = v134;
  if (v134)
    goto LABEL_131;
}

void sub_1BEE56B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::__shared_weak_count *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v67;
  uint64_t v68;

  v67 = *(_QWORD **)(v65 - 80);
  if (v67 == v64)
  {
    v68 = 4;
    v67 = (_QWORD *)(v65 - 104);
  }
  else
  {
    if (!v67)
      goto LABEL_6;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_6:
  if (v63)
  {
    std::__shared_weak_count::__release_weak(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  SipUri::~SipUri((SipUri *)&a63);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v65 - 136);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v65 - 120);
  _Unwind_Resume(a1);
}

uint64_t BambiEmergencyCallHandler::delegate(BambiEmergencyCallHandler *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 21);
  if (v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 136) + 248);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void BambiEmergencyCallHandler::handleRegistrationTerminated(_QWORD *a1, int a2, SipRegistrationNotification *this)
{
  time_t Retry;
  time_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  SipStack *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  Retry = SipRegistrationNotification::secondsUntilNextRetry(this);
  if ((uint64_t)a1[612] < 1 || (v5 = Retry, time(0) >= a1[612]))
  {
    BambiEmergencyCallHandler::exitEmergencyState((BambiEmergencyCallHandler *)a1);
  }
  else if (v5 == -1)
  {
    v6 = (std::__shared_weak_count *)a1[22];
    if (v6)
    {
      v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        v8 = v7;
        v9 = (SipStack *)a1[21];
        if (v9)
          SipStack::startRegistration(v9, (const SipRegistrationConfig *)(a1 + 37));
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_1BEE56DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::exitEmergencyState(BambiEmergencyCallHandler *this)
{
  _BYTE *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  ImsPrefs *v12;
  void **v13;
  void *v14;
  char v16;
  uint64_t v17;
  tm *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  tm *v49;
  _BYTE *v50;
  uint64_t v51;
  std::string::size_type v52;
  std::string::size_type v53;
  unint64_t *v54;
  unint64_t v55;
  std::string v56;
  std::string v57;
  SipStack *v58;
  std::__shared_weak_count *v59;

  v2 = (char *)this + 5048;
  if (!*((_BYTE *)this + 5048))
  {
    v8 = (char *)this + 32;
    v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v8 + 16))(v8, v4);
    v5 = *(_QWORD **)(v4 + 8);
    v6 = "exitEmergencyState: not in emergency state";
    v7 = 42;
    goto LABEL_5;
  }
  if (*((_QWORD *)this + 25))
  {
    v3 = (char *)this + 32;
    v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4);
    v5 = *(_QWORD **)(v4 + 8);
    v6 = "exitEmergencyState: still have an emergency call";
    v7 = 48;
LABEL_5:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    return;
  }
  v58 = 0;
  v59 = 0;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v9)
  {
    v11 = 0;
    v10 = 0;
    goto LABEL_16;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v59 = v10;
  if (!v10)
  {
    v11 = 0;
    goto LABEL_16;
  }
  v11 = *((_QWORD *)this + 21);
  v58 = (SipStack *)v11;
  if (!v11)
  {
LABEL_16:
    v16 = 1;
    goto LABEL_20;
  }
  if (*(_BYTE *)(v11 + 176) && SipStack::registered((SipStack *)v11))
  {
    v12 = (ImsPrefs *)SipStack::prefs((SipStack *)v11);
    v13 = (void **)ImsPrefs::getEmergencyCallBackModeExpirationSecondsKey(v12);
    v14 = ImsPrefs::prefWithKey(v12, v13);
    if (!(v14 ? (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 56))(v14) : *((_DWORD *)v13 + 15)))
    {
      v47 = *((_QWORD *)this + 4);
      v46 = (char *)this + 32;
      v48 = (*(uint64_t (**)(char *))(v47 + 64))(v46);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v46 + 16))(v46, v48);
      v50 = (_BYTE *)ImsOutStream::operator<<(v48, "exitEmergencyState: still registered. Waiting for registration expiration at ");
      v51 = *(_QWORD *)(v11 + 144);
      v52 = *(_QWORD *)(v51 + 248);
      v53 = *(_QWORD *)(v51 + 256);
      v57.__r_.__value_.__r.__words[0] = v52;
      v57.__r_.__value_.__l.__size_ = v53;
      if (v53)
      {
        v54 = (unint64_t *)(v53 + 8);
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      ims::formatTimeAndIntervalFromNow(*(ims **)(v52 + 472), (uint64_t)v50, v49);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v50[17] = 0;
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v57);
      goto LABEL_47;
    }
  }
  v16 = 0;
LABEL_20:
  if (*((uint64_t *)this + 612) >= 1 && time(0) < *((_QWORD *)this + 612))
  {
    v17 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"exitEmergencyState: waiting for ECBM expiration at ", 51);
    *(_BYTE *)(v17 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 612), v17, v18);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (!v10)
      return;
    goto LABEL_47;
  }
  memset(&v57, 0, sizeof(v57));
  if ((v16 & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v57, "");
  }
  else
  {
    if (*(char *)(v11 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(v11 + 4136), *(_QWORD *)(v11 + 4144));
    else
      v57 = *(std::string *)(v11 + 4136);
    if (!*(_BYTE *)(v11 + 176))
    {
      v33 = *(_QWORD *)(v11 + 136);
      v35 = *(_QWORD *)(v33 + 168);
      v34 = *(std::__shared_weak_count **)(v33 + 176);
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v37 = __ldxr(p_shared_owners);
        while (__stxr(v37 + 1, p_shared_owners));
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (v35)
      {
        v39 = *((_QWORD *)v58 + 17);
        v40 = *(_QWORD *)(v39 + 168);
        v41 = *(std::__shared_weak_count **)(v39 + 176);
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        if (*(char *)(v40 + 4159) < 0)
          std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(v40 + 4136), *(_QWORD *)(v40 + 4144));
        else
          v56 = *(std::string *)(v40 + 4136);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        v57 = v56;
        *((_BYTE *)&v56.__r_.__value_.__s + 23) = 0;
        v56.__r_.__value_.__s.__data_[0] = 0;
        if (v41)
        {
          v44 = (unint64_t *)&v41->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
    }
  }
  *v2 = 0;
  if (BambiEmergencyCallHandler::delegate(this))
  {
    v19 = BambiEmergencyCallHandler::delegate(this);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 64))(v19, &v57);
  }
  else
  {
    v20 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"no BambiClient delegate to handle exitEmergencyState", 52);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
  }
  if (v58 && *((_BYTE *)v58 + 176))
  {
    v21 = *((_QWORD *)v58 + 18);
    v22 = *(_QWORD *)(v21 + 248);
    v23 = *(std::__shared_weak_count **)(v21 + 256);
    v56.__r_.__value_.__r.__words[0] = v22;
    v56.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    (*(void (**)(std::string::size_type))(*(_QWORD *)v22 + 272))(v22);
    if (v23)
    {
      v26 = (unint64_t *)&v23->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v29 = *((_QWORD *)this + 4);
    v28 = (char *)this + 32;
    v30 = (*(uint64_t (**)(char *))(v29 + 64))(v28);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v28 + 16))(v28, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"exiting emergency state!", 24);
    *(_BYTE *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v30 + 17) = 0;
    SipStack::deinitialize(v58, 0, 0);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  v10 = v59;
  if (v59)
  {
LABEL_47:
    v31 = (unint64_t *)&v10->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BEE573B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20 - 64);
  _Unwind_Resume(a1);
}

uint64_t BambiEmergencyCallHandler::handleRegistrationError(BambiEmergencyCallHandler *this, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  if (*((_BYTE *)this + 186))
  {
    v5 = (char *)this + 32;
    v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))((char *)this + 32, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"emergency registration failed: ", 31);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 + 64) + 16))(a3 + 64, v6);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (*((_BYTE *)BambiEmergencyCallHandler::config(this) + 2))
    {
      *((_BYTE *)this + 186) = 0;
      if (*((_BYTE *)this + 185))
        BambiEmergencyCallHandler::initializeTransportForAnonymousCall(this);
      else
        BambiEmergencyCallHandler::checkConditions(this);
    }
    else
    {
      v7 = (*(uint64_t (**)(char *))(*(_QWORD *)v5 + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))((char *)this + 32, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"anonymous emergency calls are disabled. Waiting for registration retry.", 71);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
    }
  }
  else
  {
    BambiEmergencyCallHandler::exitEmergencyState(this);
  }
  result = BambiEmergencyCallHandler::delegate(this);
  if (result)
  {
    v9 = BambiEmergencyCallHandler::delegate(this);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v9, a3);
  }
  return result;
}

uint64_t *BambiEmergencyCallHandler::config(BambiEmergencyCallHandler *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  BambiPrefsManager *v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string __p;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::string *p_p;

  v11 = 0;
  v12 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v2)
  {
    v2 = std::__shared_weak_count::lock(v2);
    v3 = v2;
    v12 = v2;
    if (v2)
    {
      v2 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
      v11 = v2;
    }
  }
  else
  {
    v3 = 0;
  }
  SipStack::carrierIdentifier((SipStack *)v2, &__p);
  v5 = (uint64_t **)BambiPrefsManager::instance(v4);
  p_p = &__p;
  v6 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6 + 12;
}

void sub_1BEE57658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::initializeTransportForAnonymousCall(BambiEmergencyCallHandler *this)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _BYTE v17[72];
  _QWORD v18[8];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = (_QWORD *)((char *)this + 32);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"initializing emergency transport for anonymous call", 51);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  v4 = (std::__shared_weak_count *)v2[18];
  if (!v4)
    return;
  v5 = std::__shared_weak_count::lock(v4);
  v25 = v5;
  if (!v5)
    return;
  v6 = *((_QWORD *)this + 21);
  v24 = v6;
  if (!v6)
  {
    v14 = v5;
LABEL_17:
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    return;
  }
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v8 = *(_QWORD *)(v6 + 160);
  v7 = *(std::__shared_weak_count **)(v6 + 168);
  v18[6] = v8;
  v18[7] = v7;
  if (v7)
  {
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  BambiEmergencyCallHandler::currentProxies((BambiEmergencyCallHandler *)v18, (uint64_t)this);
  SipTransportLayer::initializeTransportToProxy(v8, (SipUri *)v18, *((unsigned int *)this + 1300), (uint64_t)this + 8, (uint64_t)&v19);
  std::deque<SipUri>::~deque[abi:ne180100](v18);
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v19 + 1) + 24))(*((_QWORD *)&v19 + 1), v20))
  {
    v13 = (*(uint64_t (**)(_QWORD *))(*v2 + 56))(v2);
    (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"unable to initialize emergency transport: ", 42);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(__int128 *, uint64_t))(v19 + 16))(&v19, v13);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    BambiEmergencyCallHandler::tryNextProxy(this, (uint64_t)v17);
    ImsResult::~ImsResult((ImsResult *)v17);
  }
  ImsResult::~ImsResult((ImsResult *)&v19);
  v14 = v25;
  if (v25)
    goto LABEL_17;
}

void sub_1BEE578B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  std::deque<SipUri>::~deque[abi:ne180100]((uint64_t *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v11 - 64);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::stackInitComplete(_QWORD *a1, int a2, ImsResult *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  _BYTE v19[72];
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _BYTE v24[64];
  uint64_t v25;

  v25 = 0;
  memset(v24, 0, sizeof(v24));
  ImsResult::ImsResult((ImsResult *)v24, a3);
  v4 = (std::__shared_weak_count *)a1[22];
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v23 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = a1[21];
      v22 = v7;
      if (v7)
      {
        v9 = a1[19];
        v8 = (std::__shared_weak_count *)a1[20];
        if (v8)
        {
          p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
          do
            v11 = __ldxr(p_shared_weak_owners);
          while (__stxr(v11 + 1, p_shared_weak_owners));
        }
        v12 = *(_QWORD *)(v7 + 136);
        LoggableString::LoggableString((LoggableString *)__p, "emergencyStackInitComplete");
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 1174405120;
        v17[2] = ___ZN25BambiEmergencyCallHandler17stackInitCompleteENSt3__110shared_ptrI8SipStackEERK9ImsResult_block_invoke;
        v17[3] = &__block_descriptor_tmp_1;
        v17[4] = a1;
        v17[5] = v9;
        v18 = v8;
        if (v8)
        {
          v13 = (unint64_t *)&v8->__shared_weak_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        ImsResult::ImsResult((ImsResult *)v19, (const ImsResult *)v24);
        (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v12 + 208))(v12, __p, v17);
        if (v21 < 0)
          operator delete(__p[0]);
        ImsResult::~ImsResult((ImsResult *)v19);
        if (v18)
          std::__shared_weak_count::__release_weak(v18);
        if (v8)
          std::__shared_weak_count::__release_weak(v8);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  ImsResult::~ImsResult((ImsResult *)v24);
}

void sub_1BEE57A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  ImsResult *v32;
  uint64_t v33;

  ImsResult::~ImsResult(v32);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (a31 < 0)
    operator delete(__p);
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v33 - 144);
  ImsResult::~ImsResult((ImsResult *)(v33 - 128));
  _Unwind_Resume(a1);
}

void ___ZN25BambiEmergencyCallHandler17stackInitCompleteENSt3__110shared_ptrI8SipStackEERK9ImsResult_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  BambiEmergencyCallHandler *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(BambiEmergencyCallHandler **)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
      {
        if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), *(unsigned int *)(a1 + 72)) & 1) != 0)
        {
          v6 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 4) + 64))((_QWORD *)v3 + 4);
          (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)v3 + 4) + 16))((_QWORD *)v3 + 4, v6);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"emergency SIP stack initialization failed: ", 43);
          *(_BYTE *)(v6 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56, v6);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v6 + 17) = 0;
          BambiEmergencyCallHandler::deferCancelPendingEmergencyCall(v3, 18);
        }
        else
        {
          BambiEmergencyCallHandler::handleStackInitialized(v3);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEE57C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::handleStackInitialized(BambiEmergencyCallHandler *this)
{
  char *v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  ImsPrefs *v33;
  void **EnableEmergencyRegistrationKey;
  void *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  ImsPrefs *v39;
  void **IgnoreLimitedServiceInEmergencyModeKey;
  void *v41;
  ImsPrefs *v42;
  void **AllowEmergencyRegistrationInLimitedAccessOnWiFiKey;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  const SipRegistrationConfig *v47;
  ImsPrefs *v48;
  void **AlwaysEmergencyRegisterKey;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _QWORD v58[2];
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;

  v2 = (char *)this + 32;
  v3 = *((unsigned __int8 *)this + 184);
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v4);
  v5 = *(_QWORD **)(v4 + 8);
  if (!v3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"emergency SIP stack is already initialized", 42);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    return;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"emergency SIP stack initialization succeeded", 44);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  *((_BYTE *)this + 184) = 0;
  if (!*((_QWORD *)this + 25))
  {
    v24 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))(v2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"emergency stack initialized, but we no longer have a pending emergency call", 75);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
    return;
  }
  BambiEmergencyCallHandler::clearLocation(this);
  v6 = *((_QWORD *)this + 25);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 512);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 4672))
      {
        v8 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))(v2);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"not acquiring location for suspicious emergency call", 52);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
LABEL_42:
        v28 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))(v2);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"Location lookup not required", 28);
        *(_BYTE *)(v28 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v28 + 17) = 0;
        v27 = 3;
        goto LABEL_43;
      }
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v9)
    goto LABEL_42;
  v10 = std::__shared_weak_count::lock(v9);
  v62 = v10;
  if (!v10)
    goto LABEL_42;
  v11 = v10;
  v12 = *((_QWORD *)this + 21);
  v61 = v12;
  if (v12)
  {
    v59 = 0;
    v60 = 0;
    v58[0] = v12;
    v58[1] = v10;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    BambiEmergencyCallHandler::createLocation((uint64_t)v58, (uint64_t)this + 24, &v59);
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v16 = v59 != 0;
    if (v59)
    {
      std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)this + 657, &v59);
      *((_OWORD *)this + 316) = 0u;
      *((_OWORD *)this + 317) = 0u;
      *((_OWORD *)this + 318) = xmmword_1BF29AF70;
      v17 = (void **)((char *)this + 5104);
      if (v2[5095] < 0)
        operator delete(*v17);
      v18 = (void **)((char *)this + 5128);
      *v17 = 0;
      *((_QWORD *)this + 639) = 0;
      *((_QWORD *)this + 640) = 0;
      if (v2[5119] < 0)
        operator delete(*v18);
      v19 = (void **)((char *)this + 5152);
      *v18 = 0;
      *((_QWORD *)this + 642) = 0;
      *((_QWORD *)this + 643) = 0;
      if (v2[5143] < 0)
        operator delete(*v19);
      v20 = (void **)((char *)this + 5176);
      *v19 = 0;
      *((_QWORD *)this + 645) = 0;
      *((_QWORD *)this + 646) = 0;
      if (v2[5167] < 0)
        operator delete(*v20);
      *v20 = 0;
      *((_QWORD *)this + 648) = 0;
      *((_QWORD *)this + 649) = 0;
    }
    v21 = v60;
    if (v60)
    {
      v22 = (unint64_t *)&v60->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v11 = v62;
    if (!v62)
      goto LABEL_39;
  }
  else
  {
    v16 = 0;
  }
  v25 = (unint64_t *)&v11->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v16)
      goto LABEL_42;
    goto LABEL_40;
  }
LABEL_39:
  if (!v16)
    goto LABEL_42;
LABEL_40:
  v27 = 1;
LABEL_43:
  *((_DWORD *)this + 48) = v27;
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v29)
  {
    v30 = std::__shared_weak_count::lock(v29);
    v62 = v30;
    if (v30)
    {
      v31 = v30;
      v32 = *((_QWORD *)this + 21);
      v61 = v32;
      if (!v32)
        goto LABEL_69;
      if (!*(_BYTE *)(v32 + 176))
      {
        v38 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))(v2);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"Emergency registration not required when using normal stack", 59);
        *(_BYTE *)(v38 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v38 + 17) = 0;
        *(_WORD *)((char *)this + 185) = 0;
        BambiEmergencyCallHandler::checkConditions(this);
        goto LABEL_69;
      }
      v33 = (ImsPrefs *)SipStack::prefs((SipStack *)v32);
      EnableEmergencyRegistrationKey = (void **)ImsPrefs::getEnableEmergencyRegistrationKey(v33);
      v35 = ImsPrefs::prefWithKey(v33, EnableEmergencyRegistrationKey);
      if (v35)
      {
        if (((*(uint64_t (**)(void *))(*(_QWORD *)v35 + 40))(v35) & 1) == 0)
        {
LABEL_49:
          v36 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))(v2);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v36);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"emergency registration is disabled in config", 44);
          *(_BYTE *)(v36 + 17) = 0;
          v37 = (_BYTE *)(v36 + 17);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_68:
          *v37 = 0;
          v52 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))(v2);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v52);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"skipping emergency registration", 31);
          *(_BYTE *)(v52 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v52 + 17) = 0;
          BambiEmergencyCallHandler::dialAnonymousCall(this);
          goto LABEL_69;
        }
      }
      else if (!*((_BYTE *)EnableEmergencyRegistrationKey + 57))
      {
        goto LABEL_49;
      }
      if (!*((_BYTE *)this + 288))
        goto LABEL_62;
      v39 = (ImsPrefs *)SipStack::prefs((SipStack *)v32);
      IgnoreLimitedServiceInEmergencyModeKey = (void **)ImsPrefs::getIgnoreLimitedServiceInEmergencyModeKey(v39);
      v41 = ImsPrefs::prefWithKey(v39, IgnoreLimitedServiceInEmergencyModeKey);
      if (v41)
      {
        if (((*(uint64_t (**)(void *))(*(_QWORD *)v41 + 40))(v41) & 1) != 0)
          goto LABEL_62;
      }
      else if (*((_BYTE *)IgnoreLimitedServiceInEmergencyModeKey + 57))
      {
        goto LABEL_62;
      }
      if (!ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v32 + 3136)))
      {
LABEL_60:
        v45 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))(v2);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v45);
        v46 = ImsOutStream::operator<<(v45, "emergency registration is disabled in Limited Access mode");
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_67;
      }
      v42 = (ImsPrefs *)SipStack::prefs((SipStack *)v32);
      AllowEmergencyRegistrationInLimitedAccessOnWiFiKey = (void **)ImsPrefs::getAllowEmergencyRegistrationInLimitedAccessOnWiFiKey(v42);
      v44 = ImsPrefs::prefWithKey(v42, AllowEmergencyRegistrationInLimitedAccessOnWiFiKey);
      if (v44)
      {
        if (((*(uint64_t (**)(void *))(*(_QWORD *)v44 + 40))(v44) & 1) == 0)
          goto LABEL_60;
      }
      else if (!*((_BYTE *)AllowEmergencyRegistrationInLimitedAccessOnWiFiKey + 57))
      {
        goto LABEL_60;
      }
LABEL_62:
      v47 = (BambiEmergencyCallHandler *)((char *)this + 296);
      if ((SipRegistrationConfig::isValid((BambiEmergencyCallHandler *)((char *)this + 296)) & 1) != 0)
      {
        v48 = (ImsPrefs *)SipStack::prefs((SipStack *)v32);
        AlwaysEmergencyRegisterKey = (void **)ImsPrefs::getAlwaysEmergencyRegisterKey(v48);
        v50 = ImsPrefs::prefWithKey(v48, AlwaysEmergencyRegisterKey);
        if (v50)
        {
          if (((*(uint64_t (**)(void *))(*(_QWORD *)v50 + 40))(v50) & 1) != 0)
            goto LABEL_77;
        }
        else if (*((_BYTE *)AlwaysEmergencyRegisterKey + 57))
        {
          goto LABEL_77;
        }
        if (SipStack::registered((SipStack *)v32))
        {
          v55 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))(v2);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v55);
          v46 = ImsOutStream::operator<<(v55, "already emergency registered. Not re-registering.");
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_67;
        }
LABEL_77:
        v56 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))(v2);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v56);
        v57 = (_BYTE *)ImsOutStream::operator<<(v56, "attempting emergency registration");
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v57[17] = 0;
        SipStack::startRegistration((SipStack *)v32, v47);
LABEL_69:
        v53 = (unint64_t *)&v31->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        return;
      }
      v51 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))(v2);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v51);
      v46 = ImsOutStream::operator<<(v51, "emergency registration credentials are invalid");
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_67:
      v37 = (_BYTE *)(v46 + 17);
      goto LABEL_68;
    }
  }
}

void sub_1BEE58430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::deferCancelPendingEmergencyCall(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  int v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v5 = a1[19];
  v4 = (std::__shared_weak_count *)a1[20];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v8 = (std::__shared_weak_count *)a1[22];
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    v23 = v9;
    if (v9)
    {
      v10 = v9;
      v11 = a1[21];
      v22 = v11;
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 136);
        LoggableString::LoggableString((LoggableString *)__p, "cancelPendingEmergencyCall");
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 1174405120;
        v17[2] = ___ZN25BambiEmergencyCallHandler31deferCancelPendingEmergencyCallEN3ims16DisconnectReason10ReasonCodeE_block_invoke;
        v17[3] = &__block_descriptor_tmp_61;
        v17[4] = a1;
        v17[5] = v5;
        v18 = v4;
        if (v4)
        {
          v13 = (unint64_t *)&v4->__shared_weak_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        v19 = a2;
        (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v12 + 208))(v12, __p, v17);
        if (v21 < 0)
          operator delete(__p[0]);
        if (v18)
          std::__shared_weak_count::__release_weak(v18);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void sub_1BEE585A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  uint64_t v24;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 64);
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrI25BambiEmergencyCallHandlerEE56c14_ZTS9ImsResult(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[6];
  a1[5] = a2[5];
  a1[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  ImsResult::ImsResult((ImsResult *)(a1 + 7), (const ImsResult *)(a2 + 7));
}

void sub_1BEE58630(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrI25BambiEmergencyCallHandlerEE56c14_ZTS9ImsResult(uint64_t a1)
{
  std::__shared_weak_count *v2;

  ImsResult::~ImsResult((ImsResult *)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void `non-virtual thunk to'BambiEmergencyCallHandler::stackInitComplete(uint64_t a1, int a2, ImsResult *a3)
{
  BambiEmergencyCallHandler::stackInitComplete((_QWORD *)(a1 - 16), a2, a3);
}

void BambiEmergencyCallHandler::currentProxies(BambiEmergencyCallHandler *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  const SipUri *v6;
  uint64_t v7;
  unint64_t v9;
  const SipUri *v10;
  _OWORD v11[25];
  uint64_t v12;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  v2 = *(_QWORD *)(a2 + 5216);
  if (*(_QWORD *)(a2 + 5224) != v2)
  {
    v4 = *(_QWORD *)(a2 + 5240);
    v5 = (_QWORD *)(v2 + 8 * (v4 >> 4));
    v6 = (const SipUri *)(*v5 + 408 * (v4 & 0xF));
    v7 = *(_QWORD *)(v2 + (((*(_QWORD *)(a2 + 5248) + v4) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 408 * ((*(_DWORD *)(a2 + 5248) + (_DWORD)v4) & 0xF);
    if (v6 != (const SipUri *)v7)
    {
      v9 = 0;
      do
      {
        v12 = 0;
        memset(v11, 0, sizeof(v11));
        SipUri::SipUri((SipUri *)v11, v6);
        if (v9 >= *(unsigned int *)(a2 + 5200))
          std::deque<SipUri>::push_back(this, (SipUri *)v11);
        SipUri::~SipUri((SipUri *)v11);
        v6 = (const SipUri *)((char *)v6 + 408);
        if ((const SipUri *)((char *)v6 - *v5) == (const SipUri *)6528)
        {
          v10 = (const SipUri *)v5[1];
          ++v5;
          v6 = v10;
        }
        ++v9;
      }
      while (v6 != (const SipUri *)v7);
    }
  }
}

void sub_1BEE587B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  SipUri::~SipUri((SipUri *)&a9);
  std::deque<SipUri>::~deque[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::tryNextProxy(BambiEmergencyCallHandler *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  SipStack *v6;
  BOOL v7;
  ImsPrefs *v8;
  void **EmergencyAnonymousAutomaticRedialKey;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  unint64_t v16;
  SipStack *v17;
  std::__shared_weak_count *v18;

  ++*((_DWORD *)this + 1300);
  v17 = 0;
  v18 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_11;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v18 = v5;
  if (!v5
    || ((v6 = (SipStack *)*((_QWORD *)this + 21),
         v17 = v6,
         *((_QWORD *)this + 656) > (unint64_t)*((unsigned int *)this + 1300))
      ? (v7 = v6 == 0)
      : (v7 = 1),
        v7))
  {
LABEL_11:
    BambiEmergencyCallHandler::deferCancelPendingEmergencyCall(this, 18);
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 1073741834;
    if (!v5)
      return;
    goto LABEL_12;
  }
  v8 = (ImsPrefs *)SipStack::prefs(v6);
  EmergencyAnonymousAutomaticRedialKey = (void **)ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v8);
  v10 = ImsPrefs::prefWithKey(v8, EmergencyAnonymousAutomaticRedialKey);
  if (v10)
  {
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v10 + 40))(v10))
      goto LABEL_18;
    goto LABEL_11;
  }
  if (!*((_BYTE *)EmergencyAnonymousAutomaticRedialKey + 57))
    goto LABEL_11;
LABEL_18:
  v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"will try next proxy in list: ", 29);
  *(_BYTE *)(v13 + 17) = 0;
  BambiEmergencyCallHandler::currentProxies((BambiEmergencyCallHandler *)v15, (uint64_t)this);
  v14 = *(_QWORD *)(v15[1] + ((v16 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 408 * (v16 & 0xF);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, v13);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  std::deque<SipUri>::~deque[abi:ne180100](v15);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
LABEL_12:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BEE589D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::deque<SipUri>::push_back(_QWORD *a1, SipUri *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  SipUri *v8;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 2 * (v5 - v4) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<SipUri>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (SipUri *)(*(_QWORD *)(v4 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 408 * (v7 & 0xF));
  }
  SipUri::SipUri(v8, a2);
  ++a1[5];
}

uint64_t BambiEmergencyCallHandler::redialAnonymously@<X0>(BambiEmergencyCallHandler *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  BambiEmergencyCallHandler::tryNextProxy(this, a2);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16));
  if ((result & 1) == 0)
    *((_BYTE *)this + 188) = 1;
  return result;
}

void sub_1BEE58AEC(_Unwind_Exception *a1)
{
  ImsResult *v1;

  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

double BambiEmergencyCallHandler::prepareCall@<D0>(BambiEmergencyCallHandler *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  ImsResult *v7;
  double result;
  char *v9;
  uint64_t v10;
  SipUri *v11;
  SipUri *i;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  SipStack *v19;
  ImsPrefs *v20;
  void **v21;
  void *v22;
  int v23;
  char v24;
  uint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  SipStack *v37;
  std::__shared_weak_count *v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[24];
  _BYTE *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*a2 + 512))
  {
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v37 = (SipStack *)&off_1E78B7238;
    v38 = (std::__shared_weak_count *)&_bambiDomain;
    v39 = 1073741825;
    v7 = (ImsResult *)ImsResult::operator<<<char [40]>((uint64_t)&v37, "Emergency call has no emergency options");
    ImsLogContainer::logResult((BambiEmergencyCallHandler *)((char *)this + 32), v7);
    ImsResult::ImsResult((ImsResult *)a3, v7);
    ImsResult::~ImsResult((ImsResult *)&v37);
    return result;
  }
  if (*((_BYTE *)this + 188))
  {
    *((_BYTE *)this + 5048) = 1;
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)this + 25, a2);
    *((_BYTE *)this + 187) = 1;
    v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"preparing anonymous redial emergency call ", 42);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, *((_QWORD *)this + 25) + 464);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    BambiEmergencyCallHandler::dialAnonymousCall(this);
LABEL_26:
    result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
    return result;
  }
  BambiEmergencyCallHandler::resetConditions(this);
  *((_BYTE *)this + 5048) = 1;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)this + 25, a2);
  *((_BYTE *)this + 187) = 1;
  BambiEmergencyCallOptions::operator=((uint64_t)this + 216, *(_QWORD *)(*a2 + 512));
  v9 = (char *)this + 32;
  v10 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"preparing emergency call ", 25);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, *((_QWORD *)this + 25) + 464);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  *((_DWORD *)this + 1300) = 0;
  v11 = (SipUri *)*((_QWORD *)this + 37);
  for (i = (SipUri *)*((_QWORD *)this + 38); v11 != i; v11 = (SipUri *)((char *)v11 + 408))
    std::deque<SipUri>::push_back((_QWORD *)this + 651, v11);
  v14 = *((_QWORD *)this + 19);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v13)
  {
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
  }
  v37 = 0;
  v38 = 0;
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v18
    || (v38 = std::__shared_weak_count::lock(v18)) == 0
    || (v19 = (SipStack *)*((_QWORD *)this + 21), (v37 = v19) == 0))
  {
    result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0x40000000;
    v24 = 1;
    goto LABEL_18;
  }
  v20 = (ImsPrefs *)SipStack::prefs(v19);
  v21 = (void **)ImsPrefs::getEmergencyCallSetupTimeoutSecondsKey(v20);
  v22 = ImsPrefs::prefWithKey(v20, v21);
  if (v22)
  {
    v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 56))(v22);
    if (!v23)
      goto LABEL_37;
  }
  else
  {
    v23 = *((_DWORD *)v21 + 15);
    if (!v23)
      goto LABEL_37;
  }
  if (v13)
  {
    v27 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = operator new(0x20uLL);
  *v29 = &off_1E78BD008;
  v29[1] = this;
  v29[2] = v14;
  v29[3] = v13;
  v44 = v29;
  SipTimerContainer::startTimer((_QWORD *)this + 613, (uint64_t)&kEmergencyCallSetupTimer, (uint64_t)v43, 1000 * v23, 0);
  v30 = v44;
  if (v44 == v43)
  {
    v31 = 4;
    v30 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_37;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_37:
  switch(*((_DWORD *)v37 + 50))
  {
    case 0:
      v32 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v9 + 16))((char *)this + 32, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"initializing emergency SIP stack", 32);
      *(_BYTE *)(v32 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v32 + 17) = 0;
      if (ims::AccessNetwork::isWifi((BambiEmergencyCallHandler *)((char *)this + 1304)))
        v33 = 1;
      else
        v33 = 2;
      *((_DWORD *)this + 994) = v33;
      SipStack::initialize(v37, (BambiEmergencyCallHandler *)((char *)this + 1968));
      v24 = 0;
      break;
    case 1:
      v34 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)"waiting for emergency SIP stack initialization to complete", 58);
      *(_BYTE *)(v34 + 17) = 0;
      v35 = (_BYTE *)(v34 + 17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_46;
    case 2:
      BambiEmergencyCallHandler::handleStackInitialized(this);
      goto LABEL_44;
    case 3:
      v36 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"waiting for emergency SIP stack deinitialization to complete", 60);
      *(_BYTE *)(v36 + 17) = 0;
      v35 = (_BYTE *)(v36 + 17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_46:
      v24 = 0;
      *v35 = 0;
      break;
    default:
LABEL_44:
      v24 = 0;
      break;
  }
LABEL_18:
  if (v38)
  {
    p_shared_owners = &v38->__shared_owners_;
    do
      v26 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v26 - 1, (unint64_t *)p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v13)
  {
    std::__shared_weak_count::__release_weak(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if ((v24 & 1) == 0)
    goto LABEL_26;
  return result;
}

void sub_1BEE590AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  std::__shared_weak_count *v21;
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a21;
  if (a21 == v22)
  {
    v25 = 4;
    v24 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (v21)
  {
    std::__shared_weak_count::__release_weak(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::dialAnonymousCall(BambiEmergencyCallHandler *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  ImsPrefs *v5;
  void **UseNormalIdentityForEmergencyCallsKey;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  const SipUri *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  void (**v20)(SipParameterMap *__hidden);
  _QWORD **v21;
  _QWORD *v22[2];
  __int16 v23;
  std::string __p;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  if (!*((_BYTE *)BambiEmergencyCallHandler::config(this) + 2))
  {
    v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 48))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"anonymous emergency calls are not allowed, and we aren't able to register. Canceling emergency call.", 100);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    BambiEmergencyCallHandler::deferCancelPendingEmergencyCall(this, 18);
    return;
  }
  v30 = 0;
  v31 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v31 = v3;
    if (v3)
    {
      v4 = *((_QWORD *)this + 21);
      v30 = v4;
      if (v4)
      {
        v5 = (ImsPrefs *)SipStack::prefs((SipStack *)v4);
        UseNormalIdentityForEmergencyCallsKey = (void **)ImsPrefs::getUseNormalIdentityForEmergencyCallsKey(v5);
        v7 = ImsPrefs::prefWithKey(v5, UseNormalIdentityForEmergencyCallsKey);
        if (v7)
        {
          if (!(*(unsigned int (**)(void *))(*(_QWORD *)v7 + 40))(v7))
            goto LABEL_27;
LABEL_11:
          v27 = 0;
          v28 = 0;
          v29 = 0;
          SipStack::carrierIdentifier((SipStack *)v4, &__p);
          BambiPrefsManager::subscribers((BambiPrefsManager *)&__p, &v27);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v9 = v27;
          v10 = v28;
          if (v27 != v28)
          {
            v11 = (char *)this + 32;
            do
            {
              v12 = *(_QWORD *)v9;
              if (*(_QWORD *)v9 && !*(_BYTE *)(v12 + 176) && SipStack::registered((SipStack *)v12))
              {
                v13 = (const SipUri *)SipUserAgent::publicUri(*(SipUserAgent **)(*(_QWORD *)v9 + 144));
                if (SipUri::isValidUri(v13) && !SipUri::isAnonymousUri(v13))
                {
                  v19 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 32);
                  (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 32, v19);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"copying preferred URI ", 22);
                  *(_BYTE *)(v19 + 17) = 0;
                  (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)v13 + 40))(v13, v19);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" from non-emergency UA", 22);
                  *(_BYTE *)(v19 + 17) = 0;
                  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(_BYTE *)(v19 + 17) = 0;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78EC610;
                  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
                  v25 = 0u;
                  v26 = 0u;
                  v22[0] = 0;
                  v22[1] = 0;
                  v20 = &off_1E78B82D8;
                  v21 = v22;
                  v23 = 256;
                  SipRouteSet::addHop((SipRouteSet *)&__p, v13, 0, 0, (const SipParameterMap *)&v20);
                  v20 = &off_1E78B82D8;
                  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v21, v22[0]);
                  SipUserAgent::setAssociatedUris(*(SipUserAgent **)(v4 + 144), (const SipRouteSet *)&__p, v13);
                  SipRouteSet::~SipRouteSet((SipRouteSet *)&__p);
                  break;
                }
                v14 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 32);
                (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 32, v14);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"non-emergency stack ", 20);
                *(_BYTE *)(v14 + 17) = 0;
                v15 = *(_QWORD *)v9;
                if (*(char *)(*(_QWORD *)v9 + 4159) < 0)
                  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v15 + 4136), *(_QWORD *)(v15 + 4144));
                else
                  __p = *(std::string *)(v15 + 4136);
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 32))(v14, &__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" doesn't have a valid public URI", 32);
                *(_BYTE *)(v14 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v14 + 17) = 0;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              v9 += 16;
            }
            while (v9 != v10);
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
          std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_27;
        }
        if (*((_BYTE *)UseNormalIdentityForEmergencyCallsKey + 57))
          goto LABEL_11;
      }
    }
  }
  else
  {
    v3 = 0;
  }
LABEL_27:
  if (*((_QWORD *)this + 37) == *((_QWORD *)this + 38))
  {
    v16 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"no proxy specified in emergency call options.  Unable to attempt anonymous emergency call.", 90);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    BambiEmergencyCallHandler::deferCancelPendingEmergencyCall(this, 36);
  }
  else
  {
    *((_BYTE *)this + 186) = 0;
    BambiEmergencyCallHandler::initializeTransportForAnonymousCall(this);
  }
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BEE595C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  SipRouteSet::~SipRouteSet((SipRouteSet *)&__p);
  __p = &a25;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v25 - 96);
  _Unwind_Resume(a1);
}

uint64_t BambiEmergencyCallOptions::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  uint64_t v6;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  SipRegistrationConfig::operator=(a1 + 80, a2 + 80);
  SipUserAgentConfig::operator=(a1 + 1752, (__int128 *)(a2 + 1752));
  SipTransportLayerConfig::operator=(a1 + 3128, a2 + 3128);
  v4 = *(_DWORD *)(a2 + 3760);
  *(_QWORD *)(a1 + 3752) = *(_QWORD *)(a2 + 3752);
  *(_DWORD *)(a1 + 3760) = v4;
  BambiCallTerminationReasonsBase::assign((BambiCallTerminationReasonsBase *)(a1 + 3768), (const BambiCallTerminationReasonsBase *)(a2 + 3768));
  BambiCallIncomingTerminationReasons::assign((BambiCallIncomingTerminationReasons *)(a1 + 3936), (const BambiCallIncomingTerminationReasons *)(a2 + 3936));
  std::string::operator=((std::string *)(a1 + 4128), (const std::string *)(a2 + 4128));
  v5 = *(_BYTE *)(a2 + 4160);
  *(_QWORD *)(a1 + 4152) = *(_QWORD *)(a2 + 4152);
  *(_BYTE *)(a1 + 4160) = v5;
  if (a1 != a2)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 4168), *(__int128 **)(a2 + 4168), (__int128 *)(a2 + 4176));
  v6 = *(_QWORD *)(a2 + 4192);
  *(_WORD *)(a1 + 4200) = *(_WORD *)(a2 + 4200);
  *(_QWORD *)(a1 + 4192) = v6;
  *(_WORD *)(a1 + 4208) = *(_WORD *)(a2 + 4208);
  std::string::operator=((std::string *)(a1 + 4216), (const std::string *)(a2 + 4216));
  SipUri::operator=((SipUri *)(a1 + 4240), a2 + 4240);
  std::string::operator=((std::string *)(a1 + 4648), (const std::string *)(a2 + 4648));
  *(_BYTE *)(a1 + 4672) = *(_BYTE *)(a2 + 4672);
  return a1;
}

void BambiEmergencyCallHandler::transportInitializedToProxy(BambiEmergencyCallHandler *this, const SipUri *a2, const ImsResult *a3)
{
  char v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE v8[72];

  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a3 + 1) + 24))(*((_QWORD *)a3 + 1), *((unsigned int *)a3 + 4));
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v6);
  v7 = *(_QWORD **)(v6 + 8);
  if ((v5 & 1) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"emergency transport initialization failed: ", 43);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a3 + 16))(a3, v6);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    BambiEmergencyCallHandler::tryNextProxy(this, (uint64_t)v8);
    ImsResult::~ImsResult((ImsResult *)v8);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"emergency transport initialization succeeded", 44);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    *((_BYTE *)this + 185) = 0;
    BambiEmergencyCallHandler::checkConditions(this);
  }
}

void `non-virtual thunk to'BambiEmergencyCallHandler::transportInitializedToProxy(BambiEmergencyCallHandler *this, const SipUri *a2, const ImsResult *a3)
{
  BambiEmergencyCallHandler::transportInitializedToProxy((BambiEmergencyCallHandler *)((char *)this - 8), a2, a3);
}

void BambiEmergencyCallHandler::clearLocation(BambiEmergencyCallHandler *this)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void **v6;
  char *v7;
  char *v8;

  v2 = (char *)this + 5127;
  v3 = (_QWORD *)((char *)this + 5256);
  v4 = *((_QWORD *)this + 657);
  if (v4)
    *(_QWORD *)(v4 + 96) = 0;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v3);
  *((_OWORD *)this + 317) = 0u;
  *((_OWORD *)this + 316) = 0u;
  *((_OWORD *)this + 318) = xmmword_1BF29AF70;
  v5 = (void **)((char *)this + 5104);
  if (*v2 < 0)
    operator delete(*v5);
  v6 = (void **)((char *)this + 5128);
  *v5 = 0;
  *((_QWORD *)this + 639) = 0;
  *((_QWORD *)this + 640) = 0;
  if (v2[24] < 0)
    operator delete(*v6);
  v7 = (char *)this + 5152;
  *v6 = 0;
  *((_QWORD *)this + 642) = 0;
  *((_QWORD *)this + 643) = 0;
  if (v2[48] < 0)
    operator delete(*(void **)v7);
  v8 = (char *)this + 5176;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  if (v2[72] < 0)
    operator delete(*(void **)v8);
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
}

void BambiEmergencyCallHandler::createLocation(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  SipStack *v5;
  ImsPrefs *v7;
  void **AlwaysAddGeolocationForEmergencyCallsKey;
  void *v9;
  int v10;
  ImsPrefs *v11;
  void **AllowGeolocationForEmergencyCallsWhileInboundRoamingKey;
  void *v13;
  SipStack *v14;
  uint64_t v15;
  char *v16;
  ImsPrefs *v17;
  void **SendEmergencyLocationUpdatesKey;
  void *v19;
  int v20;
  uint64_t v21;
  char *v22;
  std::__shared_weak_count *v23;
  SipStack *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *__p[2];
  char v34;
  void *v35[2];
  char v36;
  void *v37;
  std::__shared_weak_count *v38;
  char v39;

  v5 = *(SipStack **)a1;
  if (!v5)
  {
LABEL_35:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v7 = (ImsPrefs *)SipStack::prefs(v5);
  AlwaysAddGeolocationForEmergencyCallsKey = (void **)ImsPrefs::getAlwaysAddGeolocationForEmergencyCallsKey(v7);
  v9 = ImsPrefs::prefWithKey(v7, AlwaysAddGeolocationForEmergencyCallsKey);
  if (!v9)
  {
    if (!*((_BYTE *)AlwaysAddGeolocationForEmergencyCallsKey + 57))
      goto LABEL_4;
LABEL_6:
    if (*(_BYTE *)(*(_QWORD *)a1 + 2656))
    {
      v11 = (ImsPrefs *)SipStack::prefs(*(SipStack **)a1);
      AllowGeolocationForEmergencyCallsWhileInboundRoamingKey = (void **)ImsPrefs::getAllowGeolocationForEmergencyCallsWhileInboundRoamingKey(v11);
      v13 = ImsPrefs::prefWithKey(v11, AllowGeolocationForEmergencyCallsWhileInboundRoamingKey);
      if (v13)
        v10 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 40))(v13);
      else
        v10 = *((_BYTE *)AllowGeolocationForEmergencyCallsWhileInboundRoamingKey + 57) != 0;
    }
    else
    {
      v10 = 1;
    }
    goto LABEL_11;
  }
  if (((*(uint64_t (**)(void *))(*(_QWORD *)v9 + 40))(v9) & 1) != 0)
    goto LABEL_6;
LABEL_4:
  v10 = 0;
LABEL_11:
  if (!SipStack::isLocationLookupRequiredForEmergencyCall(*(SipStack **)a1)
    || ((v14 = *(SipStack **)a1, *(_BYTE *)(*(_QWORD *)a1 + 176)) || *((_BYTE *)v14 + 2656))
    && (ims::AccessNetwork::isWifi((ims::AccessNetwork *)((char *)v14 + 3136)) | v10) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v37, "location");
    std::string::basic_string[abi:ne180100]<0>(v35, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v21 = ImsLogger::debug(ims::_logger, (uint64_t)&v37, (uint64_t)v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Location lookup is NOT enabled (roaming= ", 41);
    *(_BYTE *)(v21 + 17) = 0;
    if (*(_BYTE *)(*(_QWORD *)a1 + 2656))
      v22 = "true";
    else
      v22 = "false";
    std::string::basic_string[abi:ne180100]<0>(__p, v22);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v21 + 32))(v21, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)")", 1);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    if (v34 < 0)
      operator delete(__p[0]);
    if (v36 < 0)
      operator delete(v35[0]);
    if (v39 < 0)
      operator delete(v37);
    goto LABEL_35;
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "location");
  std::string::basic_string[abi:ne180100]<0>(v35, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v15 = ImsLogger::debug(ims::_logger, (uint64_t)&v37, (uint64_t)v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Location lookup is enabled (roaming= ", 37);
  *(_BYTE *)(v15 + 17) = 0;
  if (*(_BYTE *)(*(_QWORD *)a1 + 2656))
    v16 = "true";
  else
    v16 = "false";
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 32))(v15, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)")", 1);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  if (v34 < 0)
    operator delete(__p[0]);
  if (v36 < 0)
    operator delete(v35[0]);
  if (v39 < 0)
    operator delete(v37);
  v17 = (ImsPrefs *)SipStack::prefs(*(SipStack **)a1);
  SendEmergencyLocationUpdatesKey = (void **)ImsPrefs::getSendEmergencyLocationUpdatesKey(v17);
  v19 = ImsPrefs::prefWithKey(v17, SendEmergencyLocationUpdatesKey);
  if (v19)
    v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 40))(v19);
  else
    v20 = *((_BYTE *)SendEmergencyLocationUpdatesKey + 57) != 0;
  v24 = *(SipStack **)a1;
  v23 = *(std::__shared_weak_count **)(a1 + 8);
  v25 = operator new(0x80uLL);
  v26 = v25;
  v25[1] = 0;
  v25[2] = 0;
  *v25 = &off_1E78BD088;
  v27 = v25 + 3;
  v37 = v24;
  v38 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  ImsLocationSelector::ImsLocationSelector((uint64_t)(v25 + 3), a2, (uint64_t *)&v37, v20);
  v30 = v38;
  if (v38)
  {
    v31 = (unint64_t *)&v38->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *a3 = v27;
  a3[1] = v26;
}

void sub_1BEE59D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count *v27;
  void *v29;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v29);
  _Unwind_Resume(a1);
}

uint64_t BambiEmergencyCallHandler::preferredLocationTimeout(SipStack **a1)
{
  SipStack *v2;
  ImsPrefs *v3;
  void **FastEmergencyLocationEnabledKey;
  void *v5;
  uint64_t result;
  SipStack *v7;
  ImsPrefs *v8;
  void **EmergencyLocationLookupTimeoutSecondsKey;
  void **v10;
  void *v11;

  v2 = *a1;
  if (!v2)
    return 8;
  v3 = (ImsPrefs *)SipStack::prefs(v2);
  FastEmergencyLocationEnabledKey = (void **)ImsPrefs::getFastEmergencyLocationEnabledKey(v3);
  v5 = ImsPrefs::prefWithKey(v3, FastEmergencyLocationEnabledKey);
  if (v5)
  {
    if (((*(uint64_t (**)(void *))(*(_QWORD *)v5 + 40))(v5) & 1) == 0)
      goto LABEL_9;
  }
  else if (!*((_BYTE *)FastEmergencyLocationEnabledKey + 57))
  {
LABEL_9:
    v8 = (ImsPrefs *)SipStack::prefs(*a1);
    EmergencyLocationLookupTimeoutSecondsKey = (void **)ImsPrefs::getEmergencyLocationLookupTimeoutSecondsKey(v8);
    goto LABEL_10;
  }
  v7 = *a1;
  if (!ims::AccessNetwork::isLTE((ims::AccessNetwork *)((char *)*a1 + 3136)))
    goto LABEL_9;
  v8 = (ImsPrefs *)SipStack::prefs(v7);
  EmergencyLocationLookupTimeoutSecondsKey = (void **)ImsPrefs::getFastEmergencyLocationTimeoutSecondsKey(v8);
LABEL_10:
  v10 = EmergencyLocationLookupTimeoutSecondsKey;
  v11 = ImsPrefs::prefWithKey(v8, EmergencyLocationLookupTimeoutSecondsKey);
  if (v11)
    LODWORD(result) = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 56))(v11);
  else
    LODWORD(result) = *((_DWORD *)v10 + 15);
  if ((_DWORD)result)
    return result;
  else
    return 8;
}

void BambiEmergencyCallHandler::handleLocationUpdate(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _BYTE v22[32];
  uint64_t v23;
  void *v24[2];
  __int128 v25;
  void *v26[2];
  void *v27[2];
  __int128 v28;
  void *__p[2];
  uint64_t v30;
  _BYTE v31[48];
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  _BYTE v40[72];
  std::string v41[2];
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  std::string v50[2];
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59[2];
  char v60;

  v4 = a1 + 32;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handleLocationUpdate(", 21);
  *(_BYTE *)(v5 + 17) = 0;
  if (*((double *)a2 + 5) > 0.0)
    v6 = "true";
  else
    v6 = "false";
  std::string::basic_string[abi:ne180100]<0>(v59, v6);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 32))(v5, v59);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)")", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v60 < 0)
    operator delete(v59[0]);
  v7 = *(_DWORD *)(a1 + 192);
  if (*((double *)a2 + 5) <= 0.0)
  {
    if (v7 != 4)
    {
      if (v7 != 1)
        return;
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(v4, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Initial location not available ", 31);
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v12 + 17) = 0;
      v13 = *(_QWORD *)(a1 + 200);
      if (v13)
      {
        memset(v22, 0, sizeof(v22));
        v23 = 0x40A7700000000000;
        *(_OWORD *)v24 = 0u;
        v25 = 0u;
        *(_OWORD *)v26 = 0u;
        *(_OWORD *)v27 = 0u;
        v28 = 0u;
        *(_OWORD *)__p = 0u;
        v30 = 0;
        BambiCall::setEmergencyLocationInfo(v13, (const std::string *)v22);
        if (SHIBYTE(v30) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v28) < 0)
          operator delete(v27[1]);
        if (SHIBYTE(v27[0]) < 0)
          operator delete(v26[0]);
        if (SHIBYTE(v25) < 0)
          operator delete(v24[1]);
      }
      *(_DWORD *)(a1 + 192) = 3;
      goto LABEL_31;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"We don't have a location to send in UPDATE", 42);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
  }
  else
  {
    switch(v7)
    {
      case 4:
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(v4);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(v4, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Update location available ", 26);
        *(_BYTE *)(v15 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v15 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)", ", 2);
        *(_BYTE *)(v15 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v15 + 17) = 0;
        v16 = *(_QWORD *)(a1 + 200);
        if (v16)
        {
          ims::LocationInfo::LocationInfo((ims::LocationInfo *)v31, (const ims::LocationInfo *)a2);
          BambiCall::sendEmergencyLocationUpdate(v16, (const ims::LocationInfo *)v31, (ImsResult *)v40);
          ImsResult::~ImsResult((ImsResult *)v40);
          if (v39 < 0)
            operator delete(v38);
          if (v37 < 0)
            operator delete(v36);
          if (v35 < 0)
            operator delete(v34);
          if (v33 < 0)
          {
            v17 = v32;
LABEL_51:
            operator delete(v17);
          }
        }
        break;
      case 2:
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(v4);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(v4, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Updated initial location available ", 35);
        *(_BYTE *)(v18 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v18 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)", ", 2);
        *(_BYTE *)(v18 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v18 + 17) = 0;
        v19 = *a2;
        v20 = a2[1];
        *(_OWORD *)(a1 + 5088) = a2[2];
        *(_OWORD *)(a1 + 5072) = v20;
        *(_OWORD *)(a1 + 5056) = v19;
        std::string::operator=((std::string *)(a1 + 5104), (const std::string *)a2 + 2);
        std::string::operator=((std::string *)(a1 + 5128), (const std::string *)a2 + 3);
        std::string::operator=((std::string *)(a1 + 5152), (const std::string *)a2 + 4);
        std::string::operator=((std::string *)(a1 + 5176), (const std::string *)a2 + 5);
        v21 = *(_QWORD *)(a1 + 200);
        if (v21)
        {
          ims::LocationInfo::LocationInfo((ims::LocationInfo *)v41, (const ims::LocationInfo *)(a1 + 5056));
          BambiCall::setEmergencyLocationInfo(v21, v41);
          if (v49 < 0)
            operator delete(v48);
          if (v47 < 0)
            operator delete(v46);
          if (v45 < 0)
            operator delete(v44);
          if (v43 < 0)
          {
            v17 = v42;
            goto LABEL_51;
          }
        }
        break;
      case 1:
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(v4);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(v4, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Initial location available ", 27);
        *(_BYTE *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)", ", 2);
        *(_BYTE *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
        *(_DWORD *)(a1 + 192) = 2;
        v9 = *a2;
        v10 = a2[1];
        *(_OWORD *)(a1 + 5088) = a2[2];
        *(_OWORD *)(a1 + 5072) = v10;
        *(_OWORD *)(a1 + 5056) = v9;
        std::string::operator=((std::string *)(a1 + 5104), (const std::string *)a2 + 2);
        std::string::operator=((std::string *)(a1 + 5128), (const std::string *)a2 + 3);
        std::string::operator=((std::string *)(a1 + 5152), (const std::string *)a2 + 4);
        std::string::operator=((std::string *)(a1 + 5176), (const std::string *)a2 + 5);
        v11 = *(_QWORD *)(a1 + 200);
        if (v11)
        {
          ims::LocationInfo::LocationInfo((ims::LocationInfo *)v50, (const ims::LocationInfo *)(a1 + 5056));
          BambiCall::setEmergencyLocationInfo(v11, v50);
          if (v58 < 0)
            operator delete(v57);
          if (v56 < 0)
            operator delete(v55);
          if (v54 < 0)
            operator delete(v53);
          if (v52 < 0)
            operator delete(v51);
        }
LABEL_31:
        BambiEmergencyCallHandler::checkConditions((BambiEmergencyCallHandler *)a1);
        return;
      default:
        return;
    }
  }
}

void sub_1BEE5A50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  ims::LocationInfo::~LocationInfo(&a54);
  _Unwind_Resume(a1);
}

std::string *BambiCall::setEmergencyLocationInfo(uint64_t a1, const std::string *a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
  v5 = *(_OWORD *)&a2[1].__r_.__value_.__r.__words[1];
  *(_OWORD *)(a1 + 536) = *(_OWORD *)&a2->__r_.__value_.__r.__words[2];
  *(_OWORD *)(a1 + 552) = v5;
  *(_OWORD *)(a1 + 520) = v4;
  std::string::operator=((std::string *)(a1 + 568), a2 + 2);
  std::string::operator=((std::string *)(a1 + 592), a2 + 3);
  std::string::operator=((std::string *)(a1 + 616), a2 + 4);
  return std::string::operator=((std::string *)(a1 + 640), a2 + 5);
}

void `non-virtual thunk to'BambiEmergencyCallHandler::handleLocationUpdate(uint64_t a1, __int128 *a2)
{
  BambiEmergencyCallHandler::handleLocationUpdate(a1 - 24, a2);
}

void ___ZN25BambiEmergencyCallHandler31deferCancelPendingEmergencyCallEN3ims16DisconnectReason10ReasonCodeE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
        BambiEmergencyCallHandler::cancelPendingEmergencyCall(v3, *(_DWORD *)(a1 + 56));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEE5A664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrI25BambiEmergencyCallHandlerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrI25BambiEmergencyCallHandlerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void BambiEmergencyCallHandler::endEmergencyCallWithReason(uint64_t a1, int a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  BambiCall *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  double v12;
  BambiCall *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17[37];
  BambiCall *v18;
  std::__shared_weak_count *v19;

  v6 = *(BambiCall **)(a1 + 200);
  v5 = *(std::__shared_weak_count **)(a1 + 208);
  v4 = a1 + 200;
  v18 = v6;
  v19 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v17[0] = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v4, v17);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v17[0] + 1);
  if (*((_QWORD *)&v17[0] + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v17[0] + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_WORD *)(a1 + 187) = 0;
  bzero(v17, 0x250uLL);
  v12 = BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)v17, 15, a2);
  *(_QWORD *)&v17[0] = &off_1E78BD2A8;
  v13 = v18;
  (*(void (**)(BambiCall *, __int128 *, double))(*(_QWORD *)v18 + 56))(v18, v17, v12);
  BambiCall::handleInitializationFailure(v13);
  BambiEmergencyCallHandler::startEmergencyCallBackMode((BambiEmergencyCallHandler *)a1);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)v17);
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BEE5A7D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::startEmergencyCallBackMode(BambiEmergencyCallHandler *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  SipStack *v10;
  ImsPrefs *v11;
  void **v12;
  void *v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *p_shared_weak_owners;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _BYTE *v42;
  _QWORD v43[6];
  std::__shared_weak_count *v44;
  void *__p[2];
  char v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)((char *)this + 4904);
  SipTimerContainer::cancelAllTimers((BambiEmergencyCallHandler *)((char *)this + 4904));
  BambiEmergencyCallHandler::clearLocation(this);
  v3 = *((_QWORD *)this + 25);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 512);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 4672))
      {
        v6 = *((_QWORD *)this + 4);
        v5 = (char *)this + 32;
        v7 = (*(uint64_t (**)(char *))(v6 + 64))(v5);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))(v5, v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Skip ECBM for suspicious emergency call", 39);
        *(_BYTE *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v7 + 17) = 0;
        return;
      }
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v9 = std::__shared_weak_count::lock(v8);
  if (v9)
  {
    v10 = (SipStack *)*((_QWORD *)this + 21);
    if (v10)
    {
      v11 = (ImsPrefs *)SipStack::prefs(v10);
      v12 = (void **)ImsPrefs::getEmergencyCallBackModeExpirationSecondsKey(v11);
      v13 = ImsPrefs::prefWithKey(v11, v12);
      if (v13)
      {
        v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 56))(v13);
        if (!v14)
          goto LABEL_12;
      }
      else
      {
        v14 = *((_DWORD *)v12 + 15);
        if (!v14)
          goto LABEL_12;
      }
      v31 = *((_QWORD *)this + 19);
      v30 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
      if (v30)
      {
        p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
        do
          v33 = __ldxr(p_shared_weak_owners);
        while (__stxr(v33 + 1, p_shared_weak_owners));
        do
          v34 = __ldxr(p_shared_weak_owners);
        while (__stxr(v34 + 1, p_shared_weak_owners));
      }
      *((_QWORD *)this + 612) = time(0) + v14;
      if (v30)
      {
        v35 = (unint64_t *)&v30->__shared_weak_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v37 = operator new(0x20uLL);
      *v37 = &off_1E78BD158;
      v37[1] = this;
      v37[2] = v31;
      v37[3] = v30;
      v50 = v37;
      SipTimerContainer::startTimer(v2, (uint64_t)"ECBMTimer", (uint64_t)v49, 1000 * v14, 1);
      v38 = v50;
      if (v50 == v49)
      {
        v39 = 4;
        v38 = v49;
      }
      else
      {
        if (!v50)
          goto LABEL_50;
        v39 = 5;
      }
      (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_50:
      v41 = *((_QWORD *)this + 4);
      v40 = (char *)this + 32;
      v42 = (_BYTE *)(*(uint64_t (**)(char *))(v41 + 64))(v40);
      (*(void (**)(char *, _BYTE *))(*(_QWORD *)v40 + 16))(v40, v42);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v42[17] = 0;
      if (v30)
      {
        std::__shared_weak_count::__release_weak(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      goto LABEL_32;
    }
  }
LABEL_12:
  v16 = *((_QWORD *)this + 19);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v19)
  {
    v20 = std::__shared_weak_count::lock(v19);
    v48 = v20;
    if (v20)
    {
      v21 = v20;
      v22 = *((_QWORD *)this + 21);
      v47 = v22;
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 136);
        LoggableString::LoggableString((LoggableString *)__p, "exitEmergencyState");
        v43[0] = MEMORY[0x1E0C809B0];
        v43[1] = 1174405120;
        v43[2] = ___ZN25BambiEmergencyCallHandler23deferExitEmergencyStateEv_block_invoke;
        v43[3] = &__block_descriptor_tmp_69;
        v43[4] = this;
        v43[5] = v16;
        v44 = v15;
        if (v15)
        {
          v24 = (unint64_t *)&v15->__shared_weak_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v23 + 208))(v23, __p, v43);
        if (v46 < 0)
          operator delete(__p[0]);
        if (v44)
          std::__shared_weak_count::__release_weak(v44);
      }
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  if (v9)
  {
LABEL_32:
    v28 = (unint64_t *)&v9->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEE5ABBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;

  v29 = *(_QWORD **)(v27 - 64);
  if (v29 == v26)
  {
    v30 = 4;
    v29 = (_QWORD *)(v27 - 88);
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:
  if (v25)
  {
    std::__shared_weak_count::__release_weak(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::handleCallEvent(BambiEmergencyCallHandler *this, BambiCallEvent *a2)
{
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  SipStack *v8;
  ImsPrefs *v9;
  void **SendEmergencyLocationUpdatesKey;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (*((_DWORD *)a2 + 2) == 9)
  {
    v3 = (_QWORD *)((char *)this + 32);
    v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
    (*(void (**)(_QWORD *, uint64_t))(*v3 + 16))(v3, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Call confirmed", 14);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    v5 = (std::__shared_weak_count *)v3[18];
    if (v5)
    {
      v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        v7 = v6;
        v8 = (SipStack *)*((_QWORD *)this + 21);
        if (!v8)
          goto LABEL_12;
        v9 = (ImsPrefs *)SipStack::prefs(v8);
        SendEmergencyLocationUpdatesKey = (void **)ImsPrefs::getSendEmergencyLocationUpdatesKey(v9);
        v11 = ImsPrefs::prefWithKey(v9, SendEmergencyLocationUpdatesKey);
        if (v11)
        {
          if (!(*(unsigned int (**)(void *))(*(_QWORD *)v11 + 40))(v11))
          {
LABEL_12:
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
            return;
          }
        }
        else if (!*((_BYTE *)SendEmergencyLocationUpdatesKey + 57))
        {
          goto LABEL_12;
        }
        if (*((_QWORD *)this + 657) && *((_DWORD *)this + 48))
          *((_DWORD *)this + 48) = 4;
        goto LABEL_12;
      }
    }
  }
}

void sub_1BEE5ADB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::handleCallInvalidated(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  if (!*(_BYTE *)(a1 + 188))
  {
    v4 = *(_QWORD *)(a1 + 200);
    v3 = a1 + 200;
    if (*a2 == v4)
    {
      *(_BYTE *)(a1 + 187) = 0;
      v11 = 0uLL;
      std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v3, &v11);
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
      if (*((_QWORD *)&v11 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      BambiEmergencyCallHandler::startEmergencyCallBackMode((BambiEmergencyCallHandler *)a1);
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 32);
      v5 = a1 + 32;
      v7 = (*(uint64_t (**)(uint64_t))(v6 + 64))(v5);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"cannot invalidate non-emergency call", 36);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
    }
  }
}

void BambiEmergencyCallHandler::handleTimer(BambiEmergencyCallHandler *this, unsigned __int8 *a2)
{
  const void **v2;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  const char *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  SipStack *v18;
  ImsPrefs *v19;
  void **EmergencyAnonymousAutomaticRedialKey;
  void *v21;
  BambiCall *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  std::__shared_weak_count *v29;
  char v30;
  _BYTE v31[72];

  v2 = (const void **)a2;
  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  if (v6 != 9)
    goto LABEL_12;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "ECBMTimer", v5))
      goto LABEL_12;
LABEL_24:
    *((_QWORD *)this + 612) = 0;
    BambiEmergencyCallHandler::exitEmergencyState(this);
    return;
  }
  if (!a2[23])
    goto LABEL_24;
  v7 = "ECBMTimer";
  v8 = a2;
  v9 = a2[23];
  while (*v8 == *(unsigned __int8 *)v7)
  {
    ++v8;
    ++v7;
    if (!--v9)
      goto LABEL_24;
  }
LABEL_12:
  v10 = qword_1ED70E610;
  if (byte_1ED70E61F >= 0)
    v10 = byte_1ED70E61F;
  if (v6 != v10)
    goto LABEL_26;
  if (byte_1ED70E61F >= 0)
    v11 = &kEmergencyCallSetupTimer;
  else
    v11 = (uint64_t *)kEmergencyCallSetupTimer;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v11, v5))
      goto LABEL_26;
LABEL_37:
    __p = 0;
    v29 = 0;
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
    if (v16)
    {
      v17 = std::__shared_weak_count::lock(v16);
      v29 = v17;
      if (v17)
      {
        v18 = (SipStack *)*((_QWORD *)this + 21);
        __p = v18;
        if (v18)
        {
          v19 = (ImsPrefs *)SipStack::prefs(v18);
          EmergencyAnonymousAutomaticRedialKey = (void **)ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v19);
          v21 = ImsPrefs::prefWithKey(v19, EmergencyAnonymousAutomaticRedialKey);
          if (v21)
          {
            if ((*(unsigned int (**)(void *))(*(_QWORD *)v21 + 40))(v21))
              goto LABEL_58;
          }
          else if (*((_BYTE *)EmergencyAnonymousAutomaticRedialKey + 57))
          {
LABEL_58:
            BambiEmergencyCallHandler::dialAnonymousCall(this);
LABEL_49:
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v24 = __ldaxr(p_shared_owners);
            while (__stlxr(v24 - 1, p_shared_owners));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
            return;
          }
        }
      }
    }
    else
    {
      v17 = 0;
    }
    BambiEmergencyCallHandler::cancelPendingEmergencyCall((uint64_t)this, 18);
    if (!v17)
      return;
    goto LABEL_49;
  }
  if (!(_DWORD)v4)
    goto LABEL_37;
  v12 = v2;
  v13 = v4;
  while (*(unsigned __int8 *)v12 == *(unsigned __int8 *)v11)
  {
    v12 = (const void **)((char *)v12 + 1);
    v11 = (uint64_t *)((char *)v11 + 1);
    if (!--v13)
      goto LABEL_37;
  }
LABEL_26:
  v14 = qword_1ED70D078;
  if (byte_1ED70D087 >= 0)
    v14 = byte_1ED70D087;
  if (v6 != v14)
    return;
  if (byte_1ED70D087 >= 0)
    v15 = &kEmergencySessionSetupTimer;
  else
    v15 = (uint64_t *)kEmergencySessionSetupTimer;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v15, v5))
      return;
    goto LABEL_44;
  }
  if (!(_DWORD)v4)
  {
LABEL_44:
    v22 = (BambiCall *)*((_QWORD *)this + 25);
    if (v22)
    {
      if (*((_BYTE *)this + 187))
      {
        BambiEmergencyCallHandler::endEmergencyCallWithReason((uint64_t)this, 23);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "EmergencySetupTimeout");
        BambiCall::endWithReason(v22, (uint64_t)&__p, (uint64_t)v31);
        ImsResult::~ImsResult((ImsResult *)v31);
        if (v30 < 0)
          operator delete(__p);
      }
    }
    else
    {
      v26 = *((_QWORD *)this + 4);
      v25 = (char *)this + 32;
      v27 = (*(uint64_t (**)(char *, uint64_t *))(v26 + 64))(v25, v15);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v25 + 16))(v25, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"No emergency call to terminate.", 31);
      *(_BYTE *)(v27 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v27 + 17) = 0;
    }
    return;
  }
  while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v15)
  {
    v2 = (const void **)((char *)v2 + 1);
    v15 = (uint64_t *)((char *)v15 + 1);
    if (!--v4)
      goto LABEL_44;
  }
}

void sub_1BEE5B1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN25BambiEmergencyCallHandler23deferExitEmergencyStateEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  BambiEmergencyCallHandler *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (BambiEmergencyCallHandler *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        BambiEmergencyCallHandler::exitEmergencyState(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEE5B2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiEmergencyCallHandler::checkTimers(BambiEmergencyCallHandler *this)
{
  _QWORD *v2;
  time_t v3;
  time_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 612))
  {
    v2 = (_QWORD *)((char *)this + 4904);
    SipTimerContainer::cancelTimer((BambiEmergencyCallHandler *)((char *)this + 4904), (std::string *)"ECBMTimer");
    v3 = time(0);
    v4 = *((_QWORD *)this + 612);
    if (v4 <= v3 + 4)
    {
      v15 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)". Exiting emergency state now.", 30);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      *((_QWORD *)this + 612) = 0;
      BambiEmergencyCallHandler::exitEmergencyState(this);
      return;
    }
    v5 = v3;
    v7 = *((_QWORD *)this + 19);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (v6)
    {
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
    }
    v12 = operator new(0x20uLL);
    *v12 = &off_1E78BD1D8;
    v12[1] = this;
    v12[2] = v7;
    v12[3] = v6;
    v20 = v12;
    SipTimerContainer::startTimer(v2, (uint64_t)"ECBMTimer", (uint64_t)v19, 1000 * (v4 - v5), 1);
    v13 = v20;
    if (v20 == v19)
    {
      v14 = 4;
      v13 = v19;
    }
    else
    {
      if (!v20)
        goto LABEL_14;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_14:
    v17 = *((_QWORD *)this + 4);
    v16 = (char *)this + 32;
    v18 = (_BYTE *)(*(uint64_t (**)(char *))(v17 + 64))(v16);
    (*(void (**)(char *, _BYTE *))(*(_QWORD *)v16 + 16))(v16, v18);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v18[17] = 0;
    if (v6)
    {
      std::__shared_weak_count::__release_weak(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BEE5B500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  if (v13)
  {
    std::__shared_weak_count::__release_weak(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void BambiEmergencyCallHandler::handleInfoRequest(BambiEmergencyCallHandler *this, const SipRequest *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  SipStack *v8;
  ImsPrefs *v9;
  void **SupportsCurrentLocationDiscoveryKey;
  void *v11;
  uint64_t v12;
  void **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  SipSession *v25;
  uint64_t v26;
  void **v27;
  ImsResult *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _BYTE v46[72];
  _BYTE v47[144];
  _BYTE v48[72];
  _OWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  SipStack *v57;
  std::__shared_weak_count *v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)a2 + 4, "Info-Package");
  if (v4)
    v5 = *((_QWORD *)v4 + 5);
  else
    v5 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v57 = 0;
  v58 = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v6)
  {
    v7 = 0;
    goto LABEL_11;
  }
  v7 = std::__shared_weak_count::lock(v6);
  v58 = v7;
  if (!v7 || (v8 = (SipStack *)*((_QWORD *)this + 21), (v57 = v8) == 0))
  {
LABEL_11:
    if (v5)
    {
      (*(void (**)(uint64_t, void ***))(*(_QWORD *)v5 + 40))(v5, &v59);
      v12 = HIBYTE(v61);
      if (v61 < 0)
        v12 = v60;
      if (v12 == 33
        && (v61 >= 0 ? (v13 = (void **)&v59) : (v13 = v59), !memcmp(v13, "g.3gpp.current-location-discovery", 0x21uLL)))
      {
        v21 = SipMessage::bodyWithContentType((uint64_t)a2, SipLocationDiscoveryBody::kContentType);
        if (v21)
        {
          if (v22)
          {
            if (!v22[96])
            {
              v23 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 48))((char *)this + 32);
              (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v23);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Location discovery XML body found, but without oneShot directive.  Assuming oneShot.", 84);
              *(_BYTE *)(v23 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v23 + 17) = 0;
            }
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v50 = 0u;
            memset(v49, 0, sizeof(v49));
            ims::LocationInfo::LocationInfo((ims::LocationInfo *)v49, (BambiEmergencyCallHandler *)((char *)this + 5056));
            v24 = *((_QWORD *)this + 25);
            if (v24)
            {
              v25 = *(SipSession **)(v24 + 384);
              if (v25)
              {
                if (SipSession::confirmed(v25))
                {
                  if (*((double *)&v50 + 1) <= 0.0)
                  {
                    v34 = (*(uint64_t (**)(char *, double))(*((_QWORD *)this + 4) + 56))((char *)this + 32, *((double *)&v50 + 1));
                    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 4) + 16))((char *)this + 32, v34);
                    v35 = (_BYTE *)ImsOutStream::operator<<(v34, "We don't have a location to send in PUBLISH");
                    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    v35[17] = 0;
                    v36 = *((_QWORD *)this + 25);
                    memset(v37, 0, sizeof(v37));
                    v38 = 0x40A7700000000000;
                    v39 = 0u;
                    v40 = 0u;
                    v41 = 0u;
                    v42 = 0u;
                    v43 = 0u;
                    v44 = 0u;
                    v27 = (void **)v37;
                    v28 = (ImsResult *)v46;
                    v45 = 0;
                    BambiCall::sendEmergencyLocationPublish(v36, (const ims::LocationInfo *)v37, (ImsResult *)v46);
                  }
                  else
                  {
                    v26 = *((_QWORD *)this + 25);
                    ims::LocationInfo::LocationInfo((ims::LocationInfo *)v47, (const ims::LocationInfo *)v49);
                    v27 = (void **)v47;
                    v28 = (ImsResult *)v48;
                    BambiCall::sendEmergencyLocationPublish(v26, (const ims::LocationInfo *)v47, (ImsResult *)v48);
                  }
                  ImsResult::~ImsResult(v28);
                  if (*((char *)v27 + 143) < 0)
                    operator delete(v27[15]);
                  if (*((char *)v27 + 119) < 0)
                    operator delete(v27[12]);
                  if (*((char *)v27 + 95) < 0)
                    operator delete(v27[9]);
                  if (*((char *)v27 + 71) < 0)
                    operator delete(v27[6]);
                }
              }
            }
            if (SHIBYTE(v56) < 0)
              operator delete(*((void **)&v55 + 1));
            if (SBYTE7(v55) < 0)
              operator delete((void *)v54);
            if (SHIBYTE(v53) < 0)
              operator delete(*((void **)&v52 + 1));
            if (SBYTE7(v52) < 0)
              operator delete((void *)v51);
LABEL_22:
            if (!v7)
              goto LABEL_27;
            goto LABEL_23;
          }
        }
        v33 = *((_QWORD *)this + 4);
        v32 = (char *)this + 32;
        v16 = (*(uint64_t (**)(char *))(v33 + 64))(v32);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v32 + 16))(v32, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"Ignoring INFO request without location discovery body", 53);
        *(_BYTE *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        v15 = *((_QWORD *)this + 4);
        v14 = (char *)this + 32;
        v16 = (*(uint64_t (**)(char *))(v15 + 64))(v14);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v14 + 16))(v14, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"Ignoring INFO request without valid location discovery Info-Package header", 74);
        *(_BYTE *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
    }
    else
    {
      v18 = *((_QWORD *)this + 4);
      v17 = (char *)this + 32;
      v16 = (*(uint64_t (**)(char *))(v18 + 64))(v17);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v17 + 16))(v17, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"Ignoring INFO request without valid location discovery Info-Package header", 74);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(_BYTE *)(v16 + 17) = 0;
    goto LABEL_22;
  }
  v9 = (ImsPrefs *)SipStack::prefs(v8);
  SupportsCurrentLocationDiscoveryKey = (void **)ImsPrefs::getSupportsCurrentLocationDiscoveryKey(v9);
  v11 = ImsPrefs::prefWithKey(v9, SupportsCurrentLocationDiscoveryKey);
  if (v11)
  {
    if (((*(uint64_t (**)(void *))(*(_QWORD *)v11 + 40))(v11) & 1) == 0)
      goto LABEL_40;
    goto LABEL_11;
  }
  if (*((_BYTE *)SupportsCurrentLocationDiscoveryKey + 57))
    goto LABEL_11;
LABEL_40:
  v30 = *((_QWORD *)this + 4);
  v29 = (char *)this + 32;
  v31 = (*(uint64_t (**)(char *))(v30 + 64))(v29);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v29 + 16))(v29, v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"Ignoring INFO request without location discovery enabled", 56);
  *(_BYTE *)(v31 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v31 + 17) = 0;
LABEL_23:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_27:
  if (SHIBYTE(v61) < 0)
    operator delete(v59);
}

void sub_1BEE5BA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  ims::LocationInfo::~LocationInfo(&a9);
  ims::LocationInfo::~LocationInfo((void **)(v9 - 256));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9 - 104);
  if (*(char *)(v9 - 65) < 0)
    operator delete(*(void **)(v9 - 88));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'BambiEmergencyCallHandler::handleInfoRequest(BambiEmergencyCallHandler *this, const SipRequest *a2)
{
  BambiEmergencyCallHandler::handleInfoRequest((BambiEmergencyCallHandler *)((char *)this - 144), a2);
}

void BambiEmergencyCallHandler::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "EmergencyCallHandler");
}

void BambiEmergencyCallHandler::logPrefix(BambiEmergencyCallHandler *this, ImsOutStream *a2)
{
  void *__p[2];
  char v4;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 120))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BEE5BB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'BambiEmergencyCallHandler::logPrefix(BambiEmergencyCallHandler *this, ImsOutStream *a2)
{
  BambiEmergencyCallHandler::logPrefix((BambiEmergencyCallHandler *)((char *)this - 32), a2);
}

void `non-virtual thunk to'BambiEmergencyCallHandler::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "EmergencyCallHandler");
}

void BambiEmergencyCallOptions::BambiEmergencyCallOptions(BambiEmergencyCallOptions *this)
{
  *(_OWORD *)((char *)this + 57) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  SipRegistrationConfig::SipRegistrationConfig((BambiEmergencyCallOptions *)((char *)this + 80));
  SipStackConfig::SipStackConfig((BambiEmergencyCallOptions *)((char *)this + 1752));
  *((_QWORD *)this + 531) = &off_1E78D08F8;
  *((_OWORD *)this + 268) = 0u;
  *((_QWORD *)this + 532) = 0;
  *((_WORD *)this + 2140) = 0;
  *(_OWORD *)((char *)this + 4264) = 0u;
  *((_QWORD *)this + 538) = &off_1E78B82D8;
  *((_OWORD *)this + 270) = 0u;
  *((_QWORD *)this + 539) = (char *)this + 4320;
  *((_BYTE *)this + 4337) = 1;
  *((_QWORD *)this + 530) = &off_1E78BFCE8;
  *(_OWORD *)((char *)this + 4360) = 0u;
  *(_OWORD *)((char *)this + 4376) = 0u;
  *(_OWORD *)((char *)this + 4392) = 0u;
  *(_OWORD *)((char *)this + 4408) = 0u;
  *(_OWORD *)((char *)this + 4424) = 0u;
  *(_OWORD *)((char *)this + 4440) = 0u;
  *(_OWORD *)((char *)this + 4456) = 0u;
  *(_OWORD *)((char *)this + 4472) = 0u;
  *(_OWORD *)((char *)this + 4488) = 0u;
  *(_OWORD *)((char *)this + 4344) = 0u;
  *((_QWORD *)this + 569) = 0;
  *(_OWORD *)((char *)this + 4504) = 0u;
  *(_OWORD *)((char *)this + 4520) = 0u;
  *(_OWORD *)((char *)this + 4536) = 0u;
  *(_OWORD *)((char *)this + 4584) = 0u;
  *((_QWORD *)this + 571) = &off_1E78B82D8;
  *((_QWORD *)this + 572) = (char *)this + 4584;
  *((_QWORD *)this + 576) = &off_1E78B82D8;
  *((_OWORD *)this + 289) = 0u;
  *((_QWORD *)this + 577) = (char *)this + 4624;
  *((_BYTE *)this + 4336) = 1;
  *((_WORD *)this + 2300) = 257;
  *((_WORD *)this + 2320) = 257;
  *((_BYTE *)this + 4560) = 0;
  *(_OWORD *)((char *)this + 4648) = 0u;
  *((_BYTE *)this + 4672) = 0;
  *((_QWORD *)this + 583) = 0;
}

void sub_1BEE5BCE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  v3 = v2;
  SipRegistrationConfig::~SipRegistrationConfig(v3);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*(void **)(v1 + 48));
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void SipStackConfig::SipStackConfig(SipStackConfig *this)
{
  _OWORD *v1;
  uint64_t v2;

  v1 = (_OWORD *)((char *)this + 1820);
  SipUserAgentConfig::SipUserAgentConfig(this);
  *(_QWORD *)(v2 + 1392) = 0;
  *(_OWORD *)(v2 + 1376) = 0u;
  *(_QWORD *)(v2 + 1408) = &off_1E78D08F8;
  *(_OWORD *)(v2 + 1448) = 0u;
  *(_QWORD *)(v2 + 1416) = 0;
  *(_OWORD *)(v2 + 1424) = 0u;
  *(_WORD *)(v2 + 1440) = 0;
  *(_QWORD *)(v2 + 1464) = &off_1E78B82D8;
  *(_OWORD *)(v2 + 1480) = 0u;
  *(_QWORD *)(v2 + 1472) = v2 + 1480;
  *(_BYTE *)(v2 + 1497) = 1;
  *(_QWORD *)(v2 + 1400) = &off_1E78BFCE8;
  *(_QWORD *)(v2 + 1712) = 0;
  *(_OWORD *)(v2 + 1696) = 0u;
  *(_OWORD *)(v2 + 1680) = 0u;
  *(_OWORD *)(v2 + 1664) = 0u;
  *(_OWORD *)(v2 + 1648) = 0u;
  *(_OWORD *)(v2 + 1632) = 0u;
  *(_OWORD *)(v2 + 1616) = 0u;
  *(_OWORD *)(v2 + 1600) = 0u;
  *(_OWORD *)(v2 + 1584) = 0u;
  *(_OWORD *)(v2 + 1568) = 0u;
  *(_OWORD *)(v2 + 1552) = 0u;
  *(_OWORD *)(v2 + 1536) = 0u;
  *(_OWORD *)(v2 + 1520) = 0u;
  *(_OWORD *)(v2 + 1504) = 0u;
  *(_QWORD *)(v2 + 1728) = &off_1E78B82D8;
  *(_OWORD *)(v2 + 1744) = 0u;
  *(_QWORD *)(v2 + 1736) = v2 + 1744;
  *(_QWORD *)(v2 + 1768) = &off_1E78B82D8;
  *(_OWORD *)(v2 + 1784) = 0u;
  *(_QWORD *)(v2 + 1776) = v2 + 1784;
  *(_BYTE *)(v2 + 1496) = 1;
  *(_WORD *)(v2 + 1760) = 257;
  *(_WORD *)(v2 + 1800) = 257;
  *(_BYTE *)(v2 + 1720) = 0;
  *(_DWORD *)(v2 + 1808) = 331617220;
  *(_DWORD *)(v2 + 1812) = 0x10000;
  *(_WORD *)(v2 + 1816) = 1;
  *(_BYTE *)(v2 + 1818) = 0;
  *v1 = xmmword_1BF29AF80;
  *(_DWORD *)(v2 + 1836) = 300;
  *(_OWORD *)(v2 + 1840) = 0u;
  *(_QWORD *)(v2 + 1856) = 0;
  *(_QWORD *)(v2 + 1864) = 0x100000005;
  *(_DWORD *)(v2 + 1872) = 0;
  *(_QWORD *)(v2 + 1896) = 0;
  *(_OWORD *)(v2 + 1880) = 0u;
  *(_WORD *)(v2 + 1904) = 1;
  *(_BYTE *)(v2 + 1906) = 0;
  *(_DWORD *)(v2 + 1908) = 0;
  *(_QWORD *)(v2 + 1912) = &off_1E78DD338;
  *(_OWORD *)(v2 + 1928) = 0u;
  *(_QWORD *)(v2 + 1920) = v2 + 1928;
  *(_DWORD *)(v2 + 1944) = 30;
  *(_WORD *)(v2 + 1948) = 256;
  *(_BYTE *)(v2 + 1950) = 0;
  *(_DWORD *)(v2 + 1952) = 0;
  *(_WORD *)(v2 + 1956) = 256;
  *(_BYTE *)(v2 + 1958) = 0;
  *(_OWORD *)((char *)v1 + 140) = xmmword_1BF29AF90;
  *(_OWORD *)((char *)v1 + 156) = xmmword_1BF29AFA0;
  *(_QWORD *)(v2 + 1992) = 0;
  *(_DWORD *)(v2 + 2000) = 5000;
  *(_BYTE *)(v2 + 2004) = -1;
  *(_DWORD *)(v2 + 2008) = 2;
  *(_DWORD *)(v2 + 2024) = 0;
  *(_OWORD *)(v2 + 2040) = 0u;
  *(_OWORD *)(v2 + 2072) = 0u;
  *(_OWORD *)(v2 + 2056) = 0u;
  *(_OWORD *)(v2 + 2143) = 0u;
  *(_OWORD *)(v2 + 2128) = 0u;
  *(_OWORD *)(v2 + 2112) = 0u;
  *(_OWORD *)(v2 + 2096) = 0u;
  *(_BYTE *)(v2 + 2055) = 13;
  qmemcpy((void *)(v2 + 2032), "Internal", 8);
  *(_QWORD *)(v2 + 2084) = 0xA000001F4;
  *(_OWORD *)(v2 + 2168) = 0u;
  *(_QWORD *)(v2 + 2160) = v2 + 2168;
  *(_QWORD *)(v2 + 2016) = off_1E78E2830;
  *(_DWORD *)(v2 + 2192) = 0;
  *(_OWORD *)(v2 + 2208) = 0u;
  *(_OWORD *)(v2 + 2224) = 0u;
  *(_OWORD *)(v2 + 2240) = 0u;
  *(_OWORD *)(v2 + 2311) = 0u;
  *(_OWORD *)(v2 + 2280) = 0u;
  *(_OWORD *)(v2 + 2296) = 0u;
  *(_OWORD *)(v2 + 2264) = 0u;
  *(_BYTE *)(v2 + 2223) = 13;
  qmemcpy((void *)(v2 + 2200), "Internal", 8);
  *(_QWORD *)(v2 + 2252) = 0xA000001F4;
  *(_OWORD *)(v2 + 2336) = 0u;
  *(_QWORD *)(v2 + 2328) = v2 + 2336;
  *(_QWORD *)(v2 + 2184) = off_1E78E2870;
  *(_OWORD *)(v2 + 2360) = 0u;
  *(_QWORD *)(v2 + 2352) = v2 + 2360;
  *(_OWORD *)(v2 + 2376) = 0u;
  *(_QWORD *)(v2 + 2392) = 0;
  *(_DWORD *)(v2 + 2400) = 3;
  *(_BYTE *)(v2 + 2404) = 1;
  *(_QWORD *)(v2 + 2424) = 0;
  *(_QWORD *)(v2 + 2432) = 0;
  *(_DWORD *)(v2 + 2405) = 0;
  *(_QWORD *)(v2 + 2416) = v2 + 2424;
  *(_WORD *)(v2 + 2440) = 0;
  *(_DWORD *)(v2 + 2444) = 0;
  *(_WORD *)(v2 + 2448) = 0;
  *(_BYTE *)(v2 + 2456) = 1;
  *(_QWORD *)(v2 + 2472) = 0;
  *(_QWORD *)(v2 + 2464) = 0;
  *(_QWORD *)(v2 + 2480) = 0;
}

void SipTransportLayerConfig::~SipTransportLayerConfig(SipTransportLayerConfig *this)
{
  void **v2;

  *((_QWORD *)this + 67) = &off_1E78DD338;
  std::__tree<unsigned int>::destroy((uint64_t)this + 544, *((_QWORD **)this + 69));
  v2 = (void **)((char *)this + 504);
  std::vector<SipSecurityAgreementConfig>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 487) < 0)
    operator delete(*((void **)this + 58));
  SipUri::~SipUri((SipTransportLayerConfig *)((char *)this + 24));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void SipUserAgentConfig::SipUserAgentConfig(SipUserAgentConfig *this)
{
  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_BYTE *)this + 41) = 1;
  *((_QWORD *)this + 6) = &off_1E78BFCE8;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 7) = &off_1E78D08F8;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_WORD *)this + 44) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 14) = &off_1E78B82D8;
  *((_QWORD *)this + 15) = (char *)this + 128;
  *((_BYTE *)this + 145) = 1;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 45) = 0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 47) = &off_1E78B82D8;
  *((_QWORD *)this + 48) = (char *)this + 392;
  *((_BYTE *)this + 409) = 1;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 52) = &off_1E78B82D8;
  *((_QWORD *)this + 53) = (char *)this + 432;
  *((_BYTE *)this + 144) = 1;
  *((_BYTE *)this + 408) = 1;
  *((_WORD *)this + 224) = 257;
  *((_BYTE *)this + 368) = 0;
  *((_BYTE *)this + 456) = 1;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  SipTimers::SipTimers((SipUserAgentConfig *)((char *)this + 512));
  *((_DWORD *)this + 136) = 16842752;
  *((_BYTE *)this + 548) = 0;
  *((_QWORD *)this + 69) = &off_1E78B82D8;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 70) = (char *)this + 568;
  *((_WORD *)this + 292) = 256;
  *((_OWORD *)this + 37) = xmmword_1BF29AFB0;
  *((_QWORD *)this + 76) = 0x100000101000101;
  *((_DWORD *)this + 154) = 0;
  *(_DWORD *)((char *)this + 619) = 0;
  *((_DWORD *)this + 156) = 5000;
  *((_BYTE *)this + 628) = 0;
  *((_DWORD *)this + 158) = 5000;
  *((_QWORD *)this + 82) = 0x200000000000000;
  *((_OWORD *)this + 40) = SipPrivacyHeader::kPrivacyId;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 83, "sip-client-11111");
  *((_WORD *)this + 344) = 257;
  *((_QWORD *)this + 87) = &off_1E78EB020;
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = (char *)this + 712;
  *((_QWORD *)this + 91) = &off_1E78EB020;
  *((_QWORD *)this + 94) = 0;
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 92) = (char *)this + 744;
  *((_QWORD *)this + 95) = &off_1E78EB020;
  *((_QWORD *)this + 98) = 0;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 96) = (char *)this + 776;
  *((_WORD *)this + 396) = 0;
  *(_OWORD *)((char *)this + 796) = xmmword_1BF29AFC0;
  *((_DWORD *)this + 203) = 16842752;
  *((_BYTE *)this + 816) = 0;
  *((_DWORD *)this + 205) = 0;
  *((_QWORD *)this + 103) = &off_1E78EB020;
  *((_QWORD *)this + 106) = 0;
  *((_QWORD *)this + 105) = 0;
  *((_QWORD *)this + 104) = (char *)this + 840;
  *((_DWORD *)this + 214) = 65793;
  *((_DWORD *)this + 215) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 108, "NONE");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 111, "NONE");
  *((_QWORD *)this + 114) = 0x1000001000000;
  *((_WORD *)this + 460) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 116, "");
  *((_WORD *)this + 476) = 0;
  *((_QWORD *)this + 120) = 0;
  *((_QWORD *)this + 122) = 0;
  *((_QWORD *)this + 121) = 0;
  *((_DWORD *)this + 246) = 1;
  *((_QWORD *)this + 124) = &off_1E78EB020;
  *((_QWORD *)this + 127) = 0;
  *((_QWORD *)this + 126) = 0;
  *((_QWORD *)this + 125) = (char *)this + 1008;
  *((_QWORD *)this + 128) = &off_1E78EB020;
  *((_QWORD *)this + 131) = 0;
  *((_QWORD *)this + 130) = 0;
  *((_QWORD *)this + 129) = (char *)this + 1040;
  *((_QWORD *)this + 132) = &off_1E78EB020;
  *((_QWORD *)this + 135) = 0;
  *((_QWORD *)this + 134) = 0;
  *((_QWORD *)this + 133) = (char *)this + 1072;
  *((_QWORD *)this + 136) = &off_1E78EB020;
  *((_QWORD *)this + 139) = 0;
  *((_QWORD *)this + 138) = 0;
  *((_QWORD *)this + 137) = (char *)this + 1104;
  *((_WORD *)this + 560) = 1;
  *((_BYTE *)this + 1122) = 1;
  *((_DWORD *)this + 281) = 15000;
  *((_QWORD *)this + 143) = 0;
  *((_QWORD *)this + 142) = 0;
  *((_QWORD *)this + 141) = (char *)this + 1136;
  *((_QWORD *)this + 147) = 0;
  *((_QWORD *)this + 146) = 0;
  *((_BYTE *)this + 1156) = 0;
  *((_DWORD *)this + 288) = 0;
  *((_QWORD *)this + 145) = (char *)this + 1168;
  *((_QWORD *)this + 148) = &off_1E78EB020;
  *((_QWORD *)this + 151) = 0;
  *((_QWORD *)this + 150) = 0;
  *((_QWORD *)this + 149) = (char *)this + 1200;
  *((_BYTE *)this + 1216) = 0;
  SpamCategoryMap::SpamCategoryMap((SipUserAgentConfig *)((char *)this + 1224));
  *((_BYTE *)this + 1256) = 0;
  *((_BYTE *)this + 1268) = 0;
  *((_BYTE *)this + 1280) = 0;
  *((_QWORD *)this + 161) = &off_1E78EB020;
  *((_QWORD *)this + 164) = 0;
  *((_QWORD *)this + 163) = 0;
  *((_QWORD *)this + 162) = (char *)this + 1304;
  *(_OWORD *)((char *)this + 1320) = 0u;
  *(_OWORD *)((char *)this + 1336) = 0u;
  *(_OWORD *)((char *)this + 1352) = 0u;
}

void sub_1BEE5C404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void **a12, void **a13, SipUri *a14, void **a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = v16;
  *(_QWORD *)(v15 + 1184) = v23;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v25, *(_QWORD **)(v15 + 1200));
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(v18, *(_QWORD **)(v15 + 1168));
  std::__tree<std::string>::destroy(v20, *(char **)(v15 + 1136));
  *(_QWORD *)(v15 + 1088) = v23;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v19, *(_QWORD **)(v15 + 1104));
  *(_QWORD *)(v15 + 1056) = v23;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v24, *(_QWORD **)(v15 + 1072));
  *(_QWORD *)(v15 + 1024) = v23;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v17, *(_QWORD **)(v15 + 1040));
  *(_QWORD *)(v15 + 992) = v23;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a11, *(_QWORD **)(v15 + 1008));
  if (*(char *)(v15 + 983) < 0)
    operator delete(*a10);
  if (*(char *)(v15 + 951) < 0)
    operator delete(*v21);
  if (*(char *)(v15 + 911) < 0)
    operator delete(*a12);
  if (*(char *)(v15 + 887) < 0)
    operator delete(*a15);
  *(_QWORD *)(v15 + 824) = v23;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v15 + 832, *(_QWORD **)(v15 + 840));
  *(_QWORD *)(v15 + 760) = v23;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v15 + 768, *(_QWORD **)(v15 + 776));
  *(_QWORD *)(v15 + 728) = v23;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v15 + 736, *(_QWORD **)(v15 + 744));
  *(_QWORD *)(v15 + 696) = v23;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v15 + 704, *(_QWORD **)(v15 + 712));
  if (*(char *)(v15 + 687) < 0)
    operator delete(*a13);
  if (*(char *)(v15 + 663) < 0)
    operator delete(*(void **)(v15 + 640));
  *(_QWORD *)(v15 + 552) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v15 + 560, *(_QWORD **)(v15 + 568));
  *(_QWORD *)(v15 + 512) = &off_1E78D0398;
  std::__tree<std::string>::destroy(v15 + 520, *(char **)(v15 + 528));
  if (*(char *)(v15 + 511) < 0)
    operator delete(*(void **)(v15 + 488));
  if (*(char *)(v15 + 487) < 0)
    operator delete(*(void **)(v22 + 72));
  SipUri::~SipUri(a14);
  _Unwind_Resume(a1);
}

void sub_1BEE5C5BC()
{
  JUMPOUT(0x1BEE5C588);
}

void std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<SipHeaderTemplateMap::HeaderTemplate>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<SipHeaderTemplateMap::HeaderTemplate>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<SipHeaderTemplateMap::HeaderTemplate>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<SipHeaderTemplateMap::HeaderTemplate>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::vector<SipSecurityAgreementConfig>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 72;
      v7 = v4 - 72;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 72;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase(BambiCallTerminationReasonsBase *this)
{
  *(_QWORD *)this = &unk_1E78E28B0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)this + 144, *((_QWORD **)this + 19));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void SipUserAgentConfig::~SipUserAgentConfig(SipUserAgentConfig *this)
{
  void **v2;

  v2 = (void **)((char *)this + 1344);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 1343) < 0)
    operator delete(*((void **)this + 165));
  *((_QWORD *)this + 161) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 1296, *((_QWORD **)this + 163));
  std::__tree<std::string>::destroy((uint64_t)this + 1224, *((char **)this + 154));
  *((_QWORD *)this + 148) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 1192, *((_QWORD **)this + 150));
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy((uint64_t)this + 1160, *((_QWORD **)this + 146));
  std::__tree<std::string>::destroy((uint64_t)this + 1128, *((char **)this + 142));
  *((_QWORD *)this + 136) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 1096, *((_QWORD **)this + 138));
  *((_QWORD *)this + 132) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 1064, *((_QWORD **)this + 134));
  *((_QWORD *)this + 128) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 1032, *((_QWORD **)this + 130));
  *((_QWORD *)this + 124) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 1000, *((_QWORD **)this + 126));
  if (*((char *)this + 983) < 0)
    operator delete(*((void **)this + 120));
  if (*((char *)this + 951) < 0)
    operator delete(*((void **)this + 116));
  if (*((char *)this + 911) < 0)
    operator delete(*((void **)this + 111));
  if (*((char *)this + 887) < 0)
    operator delete(*((void **)this + 108));
  *((_QWORD *)this + 103) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 832, *((_QWORD **)this + 105));
  *((_QWORD *)this + 95) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 768, *((_QWORD **)this + 97));
  *((_QWORD *)this + 91) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 736, *((_QWORD **)this + 93));
  *((_QWORD *)this + 87) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 704, *((_QWORD **)this + 89));
  if (*((char *)this + 687) < 0)
    operator delete(*((void **)this + 83));
  if (*((char *)this + 663) < 0)
    operator delete(*((void **)this + 80));
  *((_QWORD *)this + 69) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 560, *((_QWORD **)this + 71));
  *((_QWORD *)this + 64) = &off_1E78D0398;
  std::__tree<std::string>::destroy((uint64_t)this + 520, *((char **)this + 66));
  if (*((char *)this + 511) < 0)
    operator delete(*((void **)this + 61));
  if (*((char *)this + 487) < 0)
    operator delete(*((void **)this + 58));
  SipUri::~SipUri((SipUserAgentConfig *)((char *)this + 48));
}

void SipStackConfig::~SipStackConfig(void **this)
{
  void **v2;

  if (*((char *)this + 2487) < 0)
    operator delete(this[308]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 302), this[303]);
  if (*((char *)this + 2399) < 0)
    operator delete(this[297]);
  this[273] = off_1E78E2870;
  std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy((uint64_t)(this + 294), this[295]);
  BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase((BambiCallTerminationReasonsBase *)(this + 273));
  BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase((BambiCallTerminationReasonsBase *)(this + 252));
  this[239] = &off_1E78DD338;
  std::__tree<unsigned int>::destroy((uint64_t)(this + 240), this[241]);
  v2 = this + 235;
  std::vector<SipSecurityAgreementConfig>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 1863) < 0)
    operator delete(this[230]);
  SipUri::~SipUri((SipUri *)(this + 175));
  if (*((char *)this + 1399) < 0)
    operator delete(this[172]);
  SipUserAgentConfig::~SipUserAgentConfig((SipUserAgentConfig *)this);
}

void std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy(a1, a2[1]);
    std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(a2 + 5);
    operator delete(a2);
  }
}

uint64_t SipUserAgentConfig::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  int v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)(a1 + 26) = *(__int128 *)((char *)a2 + 26);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  SipUri::operator=((SipUri *)(a1 + 48), (uint64_t)(a2 + 3));
  *(_BYTE *)(a1 + 456) = *((_BYTE *)a2 + 456);
  std::string::operator=((std::string *)(a1 + 464), (const std::string *)(a2 + 29));
  std::string::operator=((std::string *)(a1 + 488), (const std::string *)((char *)a2 + 488));
  if ((__int128 *)a1 == a2)
  {
    v7 = *((_DWORD *)a2 + 136);
    *(_BYTE *)(a1 + 548) = *((_BYTE *)a2 + 548);
    *(_DWORD *)(a1 + 544) = v7;
  }
  else
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned int>,std::__tree_node<std::__value_type<std::string,unsigned int>,void *> *,long>>((uint64_t *)(a1 + 520), *((_QWORD **)a2 + 65), (_QWORD *)a2 + 66);
    v6 = *((_DWORD *)a2 + 136);
    *(_BYTE *)(a1 + 548) = *((_BYTE *)a2 + 548);
    *(_DWORD *)(a1 + 544) = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 560), *((__int128 **)a2 + 70), (__int128 *)((char *)a2 + 568));
  }
  *(_BYTE *)(a1 + 584) = *((_BYTE *)a2 + 584);
  v8 = a2[37];
  v9 = a2[38];
  *(_OWORD *)(a1 + 620) = *(__int128 *)((char *)a2 + 620);
  *(_OWORD *)(a1 + 592) = v8;
  *(_OWORD *)(a1 + 608) = v9;
  std::string::operator=((std::string *)(a1 + 640), (const std::string *)(a2 + 40));
  std::string::operator=((std::string *)(a1 + 664), (const std::string *)((char *)a2 + 664));
  *(_WORD *)(a1 + 688) = *((_WORD *)a2 + 344);
  if ((__int128 *)a1 != a2)
  {
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 704), *((__int128 **)a2 + 88), (__int128 *)((char *)a2 + 712));
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 736), *((__int128 **)a2 + 92), (__int128 *)((char *)a2 + 744));
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 768), *((__int128 **)a2 + 96), (__int128 *)((char *)a2 + 776));
    v10 = *(__int128 *)((char *)a2 + 808);
    *(_OWORD *)(a1 + 792) = *(__int128 *)((char *)a2 + 792);
    *(_OWORD *)(a1 + 808) = v10;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 832), *((__int128 **)a2 + 104), (__int128 *)((char *)a2 + 840));
  }
  *(_QWORD *)(a1 + 856) = *((_QWORD *)a2 + 107);
  std::string::operator=((std::string *)(a1 + 864), (const std::string *)a2 + 36);
  std::string::operator=((std::string *)(a1 + 888), (const std::string *)a2 + 37);
  v11 = *((_WORD *)a2 + 460);
  *(_QWORD *)(a1 + 912) = *((_QWORD *)a2 + 114);
  *(_WORD *)(a1 + 920) = v11;
  std::string::operator=((std::string *)(a1 + 928), (const std::string *)(a2 + 58));
  *(_WORD *)(a1 + 952) = *((_WORD *)a2 + 476);
  std::string::operator=((std::string *)(a1 + 960), (const std::string *)a2 + 40);
  *(_DWORD *)(a1 + 984) = *((_DWORD *)a2 + 246);
  if ((__int128 *)a1 == a2)
  {
    *(_BYTE *)(a1 + 1216) = *((_BYTE *)a2 + 1216);
    v15 = a2[78];
    v16 = a2[79];
    *(_BYTE *)(a1 + 1280) = *((_BYTE *)a2 + 1280);
    *(_OWORD *)(a1 + 1264) = v16;
    *(_OWORD *)(a1 + 1248) = v15;
    std::string::operator=((std::string *)(a1 + 1320), (const std::string *)(a1 + 1320));
  }
  else
  {
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1000), *((__int128 **)a2 + 125), a2 + 63);
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1032), *((__int128 **)a2 + 129), a2 + 65);
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1064), *((__int128 **)a2 + 133), a2 + 67);
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1096), *((__int128 **)a2 + 137), a2 + 69);
    *(_QWORD *)(a1 + 1120) = *((_QWORD *)a2 + 140);
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)(a1 + 1128), *((_QWORD **)a2 + 141), (_QWORD *)a2 + 142);
    v12 = *((_DWORD *)a2 + 288);
    *(_BYTE *)(a1 + 1156) = *((_BYTE *)a2 + 1156);
    *(_DWORD *)(a1 + 1152) = v12;
    std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *> *,long>>((uint64_t **)(a1 + 1160), *((__int128 **)a2 + 145), a2 + 73);
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1192), *((__int128 **)a2 + 149), a2 + 75);
    *(_BYTE *)(a1 + 1216) = *((_BYTE *)a2 + 1216);
    std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,ims::SpamCategory>,std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *> *,long>>((uint64_t *)(a1 + 1224), *((_QWORD **)a2 + 153), (_QWORD *)a2 + 154);
    v13 = a2[78];
    v14 = a2[79];
    *(_BYTE *)(a1 + 1280) = *((_BYTE *)a2 + 1280);
    *(_OWORD *)(a1 + 1264) = v14;
    *(_OWORD *)(a1 + 1248) = v13;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)(a1 + 1296), *((__int128 **)a2 + 162), (__int128 *)((char *)a2 + 1304));
    std::string::operator=((std::string *)(a1 + 1320), (const std::string *)a2 + 55);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 1344), *((std::string **)a2 + 168), *((__int128 **)a2 + 169), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 169) - *((_QWORD *)a2 + 168)) >> 3));
  }
  *(_DWORD *)(a1 + 1368) = *((_DWORD *)a2 + 342);
  return a1;
}

uint64_t SipTransportLayerConfig::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  __int128 v6;
  __int128 v7;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  SipUri::operator=((SipUri *)(a1 + 24), a2 + 24);
  v4 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v4;
  std::string::operator=((std::string *)(a1 + 464), (const std::string *)(a2 + 464));
  v5 = *(_DWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_DWORD *)(a1 + 496) = v5;
  if (a1 == a2)
  {
    v7 = *(_OWORD *)(a2 + 568);
    *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 568) = v7;
  }
  else
  {
    std::vector<SipSecurityAgreementConfig>::__assign_with_size[abi:ne180100]<SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>(a1 + 504, *(_QWORD *)(a2 + 504), *(_QWORD *)(a2 + 512), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 3));
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
    std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)(a1 + 544), *(unsigned int **)(a2 + 544), (unsigned int *)(a2 + 552));
    v6 = *(_OWORD *)(a2 + 568);
    *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 568) = v6;
    *(_DWORD *)(a1 + 588) = *(_DWORD *)(a2 + 588);
    *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
    *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
    *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
    *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  }
  return a1;
}

uint64_t **std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          v18 = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<unsigned int>::__insert_node_at(v5, v18, leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::string>::__emplace_multi<std::string const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1BEE5D048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::string>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::string>::__emplace_multi<std::string const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  uint64_t *v6[3];

  memset(v6, 0, sizeof(v6));
  std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a2, v6);
  v5 = 0;
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v5, v6[0] + 4);
  std::__tree<unsigned int>::__insert_node_at(a1, v5, leaf_high, v6[0]);
  return v6[0];
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  std::string *v8;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x38uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  v8 = (std::string *)(v7 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BEE5D19C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v2, v3);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::vector<SipHeaderTemplateMap::HeaderTemplate> &>::operator=[abi:ne180100]<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          v18[0] = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<unsigned int>::__insert_node_at(v5, v18[0], leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__emplace_multi<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1BEE5D334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::vector<SipHeaderTemplateMap::HeaderTemplate> &>::operator=[abi:ne180100]<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4 != (uint64_t *)(a2 + 24))
    std::vector<SipHeaderTemplateMap::HeaderTemplate>::__assign_with_size[abi:ne180100]<SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>(v4, *(__int128 **)(a2 + 24), *(__int128 **)(a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  return a1;
}

void std::vector<SipHeaderTemplateMap::HeaderTemplate>::__assign_with_size[abi:ne180100]<SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>(uint64_t *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<SipHeaderTemplateMap::HeaderTemplate>::__vdeallocate(a1);
    if (a4 > 0x666666666666666)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v10 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    std::vector<SipHeaderTemplateMap::HeaderTemplate>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v9) >> 3) < a4)
  {
    v13 = (uint64_t *)a2 + ((a1[1] - v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,SipHeaderTemplateMap::HeaderTemplate *,SipHeaderTemplateMap::HeaderTemplate *,SipHeaderTemplateMap::HeaderTemplate *,0>((uint64_t *)a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>(v8, (__int128 *)v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,SipHeaderTemplateMap::HeaderTemplate *,SipHeaderTemplateMap::HeaderTemplate *,SipHeaderTemplateMap::HeaderTemplate *,0>((uint64_t *)a2, (uint64_t *)a3, v9);
  v15 = v14;
  v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0)
        operator delete(*(void **)(v16 - 24));
      v16 -= 40;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_1BEE5D504(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BEE5D50C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<SipHeaderTemplateMap::HeaderTemplate>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<SipHeaderTemplateMap::HeaderTemplate>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<SipHeaderTemplateMap::HeaderTemplate>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipHeaderTemplateMap::HeaderTemplate>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  std::string *v9;
  __int128 v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a4;
  v14 = a4;
  v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 1;
    do
    {
      v8 = v6 - 1;
      v7 = *((_QWORD *)v6 - 2);
      *(_DWORD *)(v4 + 8) = *((_DWORD *)v6 - 2);
      *(_QWORD *)v4 = v7;
      v9 = (std::string *)(v4 + 16);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v15;
      }
      else
      {
        v10 = *v6;
        *(_QWORD *)(v4 + 32) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      }
      v4 += 40;
      v15 = v4;
      v6 = (__int128 *)((char *)v6 + 40);
    }
    while ((__int128 *)((char *)v8 + 40) != a3);
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1BEE5D658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 40;
  }
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,SipHeaderTemplateMap::HeaderTemplate *,SipHeaderTemplateMap::HeaderTemplate *,SipHeaderTemplateMap::HeaderTemplate *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = *v4;
    *(_DWORD *)(a3 + 8) = *((_DWORD *)v4 + 2);
    *(_QWORD *)a3 = v6;
    std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v4 + 2));
    a3 += 40;
    v4 += 5;
  }
  while (v4 != v5);
  return v5;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipHeaderTemplateMap::HeaderTemplate>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__emplace_multi<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  memset(v7, 0, sizeof(v7));
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__construct_node<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>> const&>((uint64_t)a1, a2, v7);
  v6 = 0;
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v6, v7[0] + 4);
  std::__tree<unsigned int>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1BEE5D860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__construct_node<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1BEE5D8D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<SipHeaderTemplateMap::HeaderTemplate>::__init_with_size[abi:ne180100]<SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>(this[1].__r_.__value_.__r.__words, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_1BEE5D95C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<SipHeaderTemplateMap::HeaderTemplate>::__init_with_size[abi:ne180100]<SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<SipHeaderTemplateMap::HeaderTemplate>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipHeaderTemplateMap::HeaderTemplate>,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*,SipHeaderTemplateMap::HeaderTemplate*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BEE5D9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<SipHeaderTemplateMap::HeaderTemplate>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::vector<SipSecurityAgreementConfig>::__assign_with_size[abi:ne180100]<SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t (***v14)(_QWORD);
  uint64_t (***v15)(_QWORD);
  uint64_t (***v16)(_QWORD);
  uint64_t (***v17)(_QWORD);
  uint64_t (***v18)(_QWORD);
  uint64_t (**v19)(_QWORD);
  BOOL v20;
  char v21;
  char v22;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<SipSecurityAgreementConfig>::__vdeallocate((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v10;
    std::vector<SipSecurityAgreementConfig>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipSecurityAgreementConfig>,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipSecurityAgreementConfig *,SipSecurityAgreementConfig *,SipSecurityAgreementConfig *>((uint64_t)&v21, a2, v13, (uint64_t)v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipSecurityAgreementConfig>,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipSecurityAgreementConfig *,SipSecurityAgreementConfig *,SipSecurityAgreementConfig *>((uint64_t)&v22, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(uint64_t (****)(_QWORD))(a1 + 8);
  if (v16 != v14)
  {
    v17 = v16 - 9;
    v18 = v16 - 9;
    do
    {
      v19 = *v18;
      v18 -= 9;
      result = (*v19)(v17);
      v20 = v17 == v15;
      v17 = v18;
    }
    while (!v20);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_1BEE5DBDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BEE5DBE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<SipSecurityAgreementConfig>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3 - 72;
      v6 = v3 - 72;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 72;
        (*v7)(v5);
        v8 = v5 == v1;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<SipSecurityAgreementConfig>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipSecurityAgreementConfig>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipSecurityAgreementConfig>,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<SipSecurityAgreementConfig,SipSecurityAgreementConfig&,SipSecurityAgreementConfig*>(a4 + v7, a2 + v7);
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1BEE5DD10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 72;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<SipSecurityAgreementConfig,SipSecurityAgreementConfig&,SipSecurityAgreementConfig*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = off_1E78DD420;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 32) = &off_1E78B82D8;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)(a1 + 40), *(void ***)(a2 + 40), (void **)(a2 + 48));
  *(_BYTE *)(a1 + 65) = 1;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

void sub_1BEE5DDDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipSecurityAgreementConfig *,SipSecurityAgreementConfig *,SipSecurityAgreementConfig *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    v9 = a2 + v7;
    std::string::operator=((std::string *)(a4 + v7 + 8), (const std::string *)(a2 + v7 + 8));
    if (a2 != a4)
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(v8 + 40), *(__int128 **)(v9 + 40), (__int128 *)(a2 + 48 + v7));
    *(_BYTE *)(v8 + 64) = *(_BYTE *)(v9 + 64);
    v7 += 72;
  }
  while (a2 + v7 != v6);
  return v6;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipSecurityAgreementConfig>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a2);
}

void BambiCallSessionTerminatedEvent::~BambiCallSessionTerminatedEvent(BambiCallSessionTerminatedEvent *this)
{
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent(this);
  JUMPOUT(0x1C3B87100);
}

void BambiCallEvent::loggableName(BambiCallEvent *this@<X0>, std::string *a2@<X8>)
{
  std::string __p;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)this + 40))(&__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEE5DF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BambiCallSessionTerminationBaseEvent *BambiCallSessionTerminatedEvent::clone(BambiCallSessionTerminatedEvent *this)
{
  BambiCallSessionTerminationBaseEvent *v2;

  v2 = (BambiCallSessionTerminationBaseEvent *)operator new();
  BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent(v2, this);
  *(_QWORD *)v2 = &off_1E78BD2A8;
  return v2;
}

void sub_1BEE5DFC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4000B006BBLL);
  _Unwind_Resume(a1);
}

void BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent(BambiCallSessionTerminationBaseEvent *this, const BambiCallSessionTerminationBaseEvent *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  __int128 v10;

  BambiCallEvent::BambiCallEvent(this, a2);
  *(_QWORD *)v4 = &off_1E78C91A8;
  v5 = *(_OWORD *)((char *)a2 + 40);
  *(_BYTE *)(v4 + 56) = *((_BYTE *)a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 4);
    *(_QWORD *)(v4 + 80) = *((_QWORD *)a2 + 10);
    *(_OWORD *)(v4 + 64) = v6;
  }
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 88);
    *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v7;
  }
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 5, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 120);
    *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)((char *)this + 120) = v8;
  }
  v9 = *((_DWORD *)a2 + 36);
  *((_BYTE *)this + 148) = *((_BYTE *)a2 + 148);
  *((_DWORD *)this + 36) = v9;
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), *((const std::string::value_type **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 152);
    *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
    *(_OWORD *)((char *)this + 152) = v10;
  }
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  SipUri::SipUri((BambiCallSessionTerminationBaseEvent *)((char *)this + 184), (const BambiCallSessionTerminationBaseEvent *)((char *)a2 + 184));
}

void sub_1BEE5E128(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  std::__shared_weak_count *v6;

  if (*(char *)(v1 + 143) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 111) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = &off_1E78BD300;
  v6 = *(std::__shared_weak_count **)(v1 + 24);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  _Unwind_Resume(exception_object);
}

void BambiCallEvent::~BambiCallEvent(BambiCallEvent *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E78BD300;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E78BD300;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

void BambiCallEvent::clone(BambiCallEvent *this)
{
  BambiCallEvent *v2;

  v2 = (BambiCallEvent *)operator new();
  BambiCallEvent::BambiCallEvent(v2, this);
}

void BambiCallEvent::fullName(BambiCallEvent *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = eventNames + 24 * *((unsigned int *)this + 2);
  if (*(char *)(v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t std::deque<SipUri>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 4];
    v7 = (char *)*v6 + 408 * (v5 & 0xF);
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 408 * ((*((_DWORD *)a1 + 10) + (int)v5) & 0xF);
    if (v7 != (char *)v8)
    {
      do
      {
        (**(void (***)(char *))v7)(v7);
        v7 += 408;
        if (v7 - (_BYTE *)*v6 == 6528)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 8;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 16;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<SipUri *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<SipUri *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void std::deque<SipUri>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x10;
  v4 = v2 - 16;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1980uLL);
      std::__split_buffer<SipUri *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1980uLL);
    std::__split_buffer<SipUri *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1980uLL);
  std::__split_buffer<SipUri *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<SipUri *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1BEE5E6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<SipUri *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<SipUri *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

_QWORD *std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78BD008;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78BD008;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78BD008;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78BD008;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEE5ED74(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0,std::allocator<BambiEmergencyCallHandler::prepareCall(std::shared_ptr<BambiCall>)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::__shared_ptr_emplace<ImsLocationSelector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BD088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsLocationSelector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BD088;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<ImsLocationSelector>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78BD0D8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78BD0D8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78BD0D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78BD0D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEE5F02C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0,std::allocator<BambiEmergencyCallHandler::processPendingEmergencyCall(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78BD158;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78BD158;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78BD158;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78BD158;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEE5F294(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0,std::allocator<BambiEmergencyCallHandler::startEmergencyCallBackMode(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78BD1D8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78BD1D8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78BD1D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78BD1D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEE5F4FC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiEmergencyCallHandler::checkTimers(void)::$_0,std::allocator<BambiEmergencyCallHandler::checkTimers(void)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_BambiEmergencyCallHandler_cpp()
{
  void (*v0)(void *);

  std::string::basic_string[abi:ne180100]<0>(&kEmergencyCallSetupTimer, "EmergencyCallSetupTimer");
  v0 = (void (*)(void *))MEMORY[0x1E0DE44D0];
  __cxa_atexit(MEMORY[0x1E0DE44D0], &kEmergencyCallSetupTimer, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&kEmergencySessionSetupTimer, "EmergencySessionSetupTimer");
  return __cxa_atexit(v0, &kEmergencySessionSetupTimer, &dword_1BEDF4000);
}

uint64_t SipStackConfig::initializeFromPrefs(SipStackConfig *this, const ImsPrefs *a2, char a3, int a4, char a5)
{
  ImsPrefs *v10;
  void **ForceTcpKey;
  ImsPrefs *v12;
  void **ForceTlsKey;
  void **PCSCFDomainNameKey;
  std::string *v15;
  void *v16;
  ImsPrefs *v17;
  uint64_t v18;
  void *v19;
  ImsPrefs *v20;
  uint64_t v21;
  void *IncomingPhoneNumberPrefixMapKey;
  _BOOL8 v23;
  void **AddConferenceParticipantsToInviteKey;
  void *v25;
  unint64_t v26;
  void **DeferMediaActivationOnSessionConfirmedKey;
  void *v28;
  unint64_t v29;
  void **MediaInterfaceKey;
  ImsPrefs *v31;
  void **v32;
  void **MediaInitTimeoutKey;
  void *v34;
  ImsPrefs *v35;
  void **v36;
  void *v37;
  unint64_t v38;
  void **v39;
  void *v40;
  unint64_t v41;
  void **v42;
  void *v43;
  unint64_t v44;
  void **UsePublicDomainForPhoneContextKey;
  void *v46;
  unint64_t v47;
  void **AutoRingTimerMillisecondsKey;
  void *v49;
  uint64_t result;
  std::string __str;

  SipTransportLayerConfig::initializeFromPrefs((SipStackConfig *)((char *)this + 1376), a2);
  SipUserAgentConfig::initializeFromPrefs(this, a2);
  if (a4)
  {
    ForceTcpKey = (void **)ImsPrefs::getForceTcpKey(v10);
    v12 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, ForceTcpKey);
    if (!v12)
      *((_BYTE *)this + 1815) = 1;
    ForceTlsKey = (void **)ImsPrefs::getForceTlsKey(v12);
    v10 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, ForceTlsKey);
    if (!v10)
      *((_BYTE *)this + 1817) = 1;
  }
  *((_BYTE *)this + 2448) = a3;
  *((_BYTE *)this + 2449) = a4;
  PCSCFDomainNameKey = (void **)ImsPrefs::getPCSCFDomainNameKey(v10);
  ImsPrefs::stringValue(a2, PCSCFDomainNameKey);
  *((_BYTE *)this + 2457) = a5;
  v15 = std::string::operator=((std::string *)((char *)this + 2464), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v16 = ImsPrefs::getCallEndReasonsKey((ImsPrefs *)v15);
  v17 = (ImsPrefs *)ImsPrefs::typedPrefWithKey<ImsDictPref>(a2, (void **)v16);
  if (v17)
    v18 = (uint64_t)v17;
  else
    v18 = *((_QWORD *)v16 + 11);
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    BambiCallTerminationReasonsBase::setReasonsFromPref((const void ***)this + 252, v18, (uint64_t)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v19 = ImsPrefs::getIncomingCallEndReasonsKey(v17);
  v20 = (ImsPrefs *)ImsPrefs::typedPrefWithKey<ImsDictPref>(a2, (void **)v19);
  if (v20)
    v21 = (uint64_t)v20;
  else
    v21 = *((_QWORD *)v19 + 11);
  if (v21)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "Override_");
    BambiCallTerminationReasonsBase::setReasonsFromPref((const void ***)this + 273, v21, (uint64_t)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  IncomingPhoneNumberPrefixMapKey = ImsPrefs::getIncomingPhoneNumberPrefixMapKey(v20);
  v23 = ImsPrefs::stringMapValue(a2, (uint64_t)IncomingPhoneNumberPrefixMapKey, (uint64_t **)this + 302);
  AddConferenceParticipantsToInviteKey = (void **)ImsPrefs::getAddConferenceParticipantsToInviteKey((ImsPrefs *)v23);
  v25 = ImsPrefs::prefWithKey(a2, AddConferenceParticipantsToInviteKey);
  if (v25)
    v26 = (*(uint64_t (**)(void *))(*(_QWORD *)v25 + 40))(v25);
  else
    v26 = *((_BYTE *)AddConferenceParticipantsToInviteKey + 57) != 0;
  *((_BYTE *)this + 2440) = v26;
  DeferMediaActivationOnSessionConfirmedKey = (void **)ImsPrefs::getDeferMediaActivationOnSessionConfirmedKey((ImsPrefs *)v26);
  v28 = ImsPrefs::prefWithKey(a2, DeferMediaActivationOnSessionConfirmedKey);
  if (v28)
    v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 40))(v28);
  else
    v29 = *((_BYTE *)DeferMediaActivationOnSessionConfirmedKey + 57) != 0;
  *((_BYTE *)this + 2441) = v29;
  MediaInterfaceKey = (void **)ImsPrefs::getMediaInterfaceKey((ImsPrefs *)v29);
  v31 = (ImsPrefs *)ImsPrefs::stringValue(a2, MediaInterfaceKey);
  v32 = (void **)((char *)this + 2376);
  if (*((char *)this + 2399) < 0)
    operator delete(*v32);
  *(_OWORD *)v32 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 299) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  MediaInitTimeoutKey = (void **)ImsPrefs::getMediaInitTimeoutKey(v31);
  v34 = ImsPrefs::prefWithKey(a2, MediaInitTimeoutKey);
  if (v34)
    v35 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v34 + 56))(v34);
  else
    v35 = (ImsPrefs *)*((unsigned int *)MediaInitTimeoutKey + 15);
  *((_DWORD *)this + 500) = (_DWORD)v35;
  v36 = (void **)ImsPrefs::getPerCallQoSIndicationsKey(v35);
  v37 = ImsPrefs::prefWithKey(a2, v36);
  if (v37)
    v38 = (*(uint64_t (**)(void *))(*(_QWORD *)v37 + 40))(v37);
  else
    v38 = *((_BYTE *)v36 + 57) != 0;
  *((_BYTE *)this + 2404) = v38;
  v39 = (void **)ImsPrefs::getNetworkBasedCallWaitingKey((ImsPrefs *)v38);
  v40 = ImsPrefs::prefWithKey(a2, v39);
  if (v40)
    v41 = (*(uint64_t (**)(void *))(*(_QWORD *)v40 + 40))(v40);
  else
    v41 = *((_BYTE *)v39 + 57) != 0;
  *((_BYTE *)this + 2405) = v41;
  v42 = (void **)ImsPrefs::getEnableVideoCallWaitingKey((ImsPrefs *)v41);
  v43 = ImsPrefs::prefWithKey(a2, v42);
  if (v43)
    v44 = (*(uint64_t (**)(void *))(*(_QWORD *)v43 + 40))(v43);
  else
    v44 = *((_BYTE *)v42 + 57) != 0;
  *((_BYTE *)this + 2406) = v44;
  UsePublicDomainForPhoneContextKey = (void **)ImsPrefs::getUsePublicDomainForPhoneContextKey((ImsPrefs *)v44);
  v46 = ImsPrefs::prefWithKey(a2, UsePublicDomainForPhoneContextKey);
  if (v46)
    v47 = (*(uint64_t (**)(void *))(*(_QWORD *)v46 + 40))(v46);
  else
    v47 = *((_BYTE *)UsePublicDomainForPhoneContextKey + 57) != 0;
  *((_BYTE *)this + 2408) = v47;
  AutoRingTimerMillisecondsKey = (void **)ImsPrefs::getAutoRingTimerMillisecondsKey((ImsPrefs *)v47);
  v49 = ImsPrefs::prefWithKey(a2, AutoRingTimerMillisecondsKey);
  if (v49)
    result = (*(uint64_t (**)(void *))(*(_QWORD *)v49 + 56))(v49);
  else
    result = *((unsigned int *)AutoRingTimerMillisecondsKey + 15);
  *((_DWORD *)this + 611) = result;
  return result;
}

void sub_1BEE5F978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XcapDocumentCommWaiting::XcapDocumentCommWaiting(XcapDocumentCommWaiting *this)
{
  __int128 *v2;
  unsigned __int8 v3;
  char *v4;

  v3 = 0;
  v4 = (char *)&v3;
  v2 = (__int128 *)(std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v3, (uint64_t)&std::piecewise_construct, &v4)+ 5);
  *(_QWORD *)this = &off_1E78CE278;
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)this + 8, (__int128 *)"communication-waiting", v2);
  *((_QWORD *)this + 8) = "communication-waiting";
  *((_QWORD *)this + 9) = v2;
  *((_BYTE *)this + 80) = 1;
  *(_QWORD *)this = &off_1E78BD340;
  *((_QWORD *)this + 1) = &unk_1E78BD3D8;
}

uint64_t XcapDocumentCommWaiting::createChild(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::string::size_type size;
  std::string *p_s1;
  const char *v6;
  uint64_t v7;
  void *v8;
  std::string __s1;

  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  v3 = 0;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  if (size != 21)
  {
LABEL_11:
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      return v3;
    goto LABEL_12;
  }
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v8 = (void *)__s1.__r_.__value_.__r.__words[0];
    if (!memcmp(__s1.__r_.__value_.__l.__data_, "communication-waiting", __s1.__r_.__value_.__l.__size_))
      v3 = a1;
    else
      v3 = 0;
    goto LABEL_16;
  }
  if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
  {
    p_s1 = &__s1;
    v6 = "communication-waiting";
    v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v6)
    {
      p_s1 = (std::string *)((char *)p_s1 + 1);
      ++v6;
      if (!--v7)
      {
        v3 = a1;
        goto LABEL_11;
      }
    }
    v3 = 0;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      return v3;
LABEL_12:
    v8 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_16:
    operator delete(v8);
    return v3;
  }
  return a1;
}

void XcapDocumentCommWaiting::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  char v7;
  std::string::size_type size;
  std::string *p_s1;
  const char *v10;
  void *v11;
  std::string __s1;

  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  if (size == 21)
  {
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      v11 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "communication-waiting", __s1.__r_.__value_.__l.__size_))
        goto LABEL_15;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      v10 = "communication-waiting";
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v10;
        if (!--v6)
          goto LABEL_12;
      }
      goto LABEL_13;
    }
LABEL_12:
    bambi::XmlParserItem::parseChild(a1, a2, a3);
    v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
LABEL_13:
  if ((v7 & 0x80) == 0)
    return;
  v11 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_15:
  operator delete(v11);
}

void sub_1BEE5FBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t XcapDocumentCommWaiting::asString@<X0>(XcapDocumentCommWaiting *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  const char *v5;
  uint64_t v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  _OWORD v10[4];
  void *__p[2];
  __int128 v12;
  __int128 v13;
  _OWORD v14[9];
  uint64_t v15;
  std::locale v16;

  v15 = 0;
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  memset(v10, 0, sizeof(v10));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Call Waiting: ", 14);
  if (*((_BYTE *)this + 80))
    v5 = "Enabled";
  else
    v5 = "Disabled";
  if (*((_BYTE *)this + 80))
    v6 = 7;
  else
    v6 = 8;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet(&v16, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10 + 8, a2);
  *(_QWORD *)&v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(*(_QWORD *)&v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v10[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v12) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v14);
}

void sub_1BEE5FD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 40));
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void XcapDocumentCommWaiting::~XcapDocumentCommWaiting(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
}

{
  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
  JUMPOUT(0x1C3B87100);
}

uint64_t XcapDocumentCommWaiting::clone(XcapDocumentCommWaiting *this)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E78CE278;
  *(_QWORD *)(v2 + 8) = off_1E78EC640;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  std::vector<bambi::XmlTreeNs>::__init_with_size[abi:ne180100]<bambi::XmlTreeNs*,bambi::XmlTreeNs*>((_QWORD *)(v2 + 16), *((_QWORD *)this + 2), *((_QWORD *)this + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 4));
  v3 = (std::string *)(v2 + 40);
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    *(_QWORD *)(v2 + 56) = *((_QWORD *)this + 7);
  }
  *(_OWORD *)(v2 + 64) = *((_OWORD *)this + 4);
  *(_BYTE *)(v2 + 80) = *((_BYTE *)this + 80);
  *(_QWORD *)v2 = &off_1E78BD340;
  *(_QWORD *)(v2 + 8) = &unk_1E78BD3D8;
  return v2;
}

void sub_1BEE5FED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MEMORY[0x1C3B87100](v2, 0x10F3C40F3942DEBLL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'XcapDocumentCommWaiting::~XcapDocumentCommWaiting(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::vector<bambi::XmlTreeNs>::__init_with_size[abi:ne180100]<bambi::XmlTreeNs*,bambi::XmlTreeNs*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<bambi::XmlTreeNs>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<bambi::XmlTreeNs>,bambi::XmlTreeNs*,bambi::XmlTreeNs*,bambi::XmlTreeNs*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BEE5FFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<bambi::XmlTreeNs>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<bambi::XmlTreeNs>,bambi::XmlTreeNs*,bambi::XmlTreeNs*,bambi::XmlTreeNs*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<bambi::XmlTreeNs,bambi::XmlTreeNs&,bambi::XmlTreeNs*>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1BEE60074(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<bambi::XmlTreeNs,bambi::XmlTreeNs&,bambi::XmlTreeNs*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1BEE60110(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t SipPComNameIdReputationHeader::parseParameters(SipPComNameIdReputationHeader *this, const SipParameterMap *a2)
{
  return 1;
}

void SipPComNameIdReputationHeader::~SipPComNameIdReputationHeader(SipPComNameIdReputationHeader *this)
{
  *(_QWORD *)this = off_1E78BCA40;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  *(_QWORD *)this = off_1E78BCA40;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipParameterListHeader *SipPComNameIdReputationHeader::clone(SipPComNameIdReputationHeader *this)
{
  SipParameterListHeader *v2;

  v2 = (SipParameterListHeader *)operator new();
  SipParameterListHeader::SipParameterListHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78BD468;
  return v2;
}

void sub_1BEE60220(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4088B03871);
  _Unwind_Resume(a1);
}

uint64_t SDPMediaCandidate::SDPMediaCandidate(uint64_t a1, __int16 a2, const std::string *a3, __int16 a4)
{
  void *__p[2];
  uint64_t v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "candidate");
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78ED0A8;
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v10;
  }
  *(_QWORD *)a1 = &off_1E78BD508;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 40) = a2;
  std::string::operator=((std::string *)(a1 + 48), a3);
  *(_WORD *)(a1 + 72) = a4;
  return a1;
}

void sub_1BEE60320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaCandidate::value@<X0>(SDPMediaCandidate *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD v19[4];
  void *__p[2];
  __int128 v21;
  __int128 v22;
  _OWORD v23[9];
  uint64_t v24;
  char v25;

  v24 = 0;
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)__p = 0u;
  v21 = 0u;
  memset(v19, 0, sizeof(v19));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"1", 1);
  v25 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v25, 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  v25 = 32;
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v25, 1);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"UDP", 3);
  v25 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v25, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  v25 = 32;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v25, 1);
  v10 = *((char *)this + 71);
  if (v10 >= 0)
    v11 = (char *)this + 48;
  else
    v11 = (char *)*((_QWORD *)this + 6);
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)this + 71);
  else
    v12 = *((_QWORD *)this + 7);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  v25 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v25, 1);
  v14 = (_QWORD *)std::ostream::operator<<();
  v25 = 32;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v25, 1);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"typ", 3);
  v25 = 32;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v25, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"host", 4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19 + 8, a2);
  *(_QWORD *)&v19[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(*(_QWORD *)&v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v19[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v21) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v23);
}

void sub_1BEE6054C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t BambiXcapClient::initialize(BambiXcapClient *this, const XcapConfig *a2)
{
  *((_BYTE *)this + 8) = 1;
  XcapConfig::operator=((uint64_t)this + 16, (uint64_t)a2);
  return 1;
}

uint64_t XcapConfig::operator=(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  __int16 v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (a1 != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 8), *(std::string **)(a2 + 8), *(__int128 **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 104));
  v4 = *(_BYTE *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 132) = v4;
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  v5 = *(_BYTE *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 164) = v5;
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(a2 + 200));
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  std::string::operator=((std::string *)(a1 + 232), (const std::string *)(a2 + 232));
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  v6 = *(_BYTE *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 288) = v6;
  if (a1 != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 296), *(std::string **)(a2 + 296), *(__int128 **)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 3));
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  std::string::operator=((std::string *)(a1 + 328), (const std::string *)(a2 + 328));
  v7 = *(_WORD *)(a2 + 356);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(_WORD *)(a1 + 356) = v7;
  return a1;
}

uint64_t BambiXcapClient::deinitialize(uint64_t this)
{
  *(_BYTE *)(this + 8) = 0;
  return this;
}

uint64_t BambiXcapClient::initialized(BambiXcapClient *this)
{
  return *((unsigned __int8 *)this + 8);
}

void BambiEmergencyPrefs::reset(BambiEmergencyPrefs *this)
{
  BambiEmergencyPrefs *v1;
  _QWORD *v2;

  v1 = this;
  *(_WORD *)this = 0;
  *((_BYTE *)this + 2) = 0;
  *((_DWORD *)this + 1) = 10;
  BambiEmergencyUrnMap::reset((BambiEmergencyPrefs *)((char *)this + 8));
  v2 = (_QWORD *)*((_QWORD *)v1 + 9);
  v1 = (BambiEmergencyPrefs *)((char *)v1 + 72);
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)v1 - 8, v2);
  *((_QWORD *)v1 - 1) = v1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v1 + 2);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v1 + 5);
}

BambiPrefsManager *BambiPrefsManager::instance(BambiPrefsManager *this)
{
  BambiPrefsManager *v1;

  v1 = (BambiPrefsManager *)BambiPrefsManager::_instance;
  if (!BambiPrefsManager::_instance)
  {
    v1 = (BambiPrefsManager *)operator new();
    BambiPrefsManager::BambiPrefsManager(v1);
    BambiPrefsManager::_instance = (uint64_t)v1;
  }
  return v1;
}

void sub_1BEE607B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B2C40F76E02BDLL);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,BambiCarrierPrefs>::~pair(uint64_t a1)
{
  BambiCarrierPrefs::~BambiCarrierPrefs((BambiCarrierPrefs *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void BambiPrefsManager::sanitize(void **a1)
{
  BambiPrefsManager *v2;
  __int128 *v3;
  __int128 *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  BOOL v11;
  void **v12;
  std::string *i;
  BambiPrefsManager *v14;
  void **v15;
  uint64_t v16;
  BambiPrefsManager *v17;
  BambiPrefsManager *v18;
  void **v19;
  void **v20;
  void **v21;
  uint64_t *v22;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  _BYTE v27[272];
  void **v28;
  std::string *v29;
  unint64_t v30;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  v2 = BambiPrefsManager::instance((BambiPrefsManager *)a1);
  v3 = (__int128 *)((char *)v2 + 8);
  v4 = *(__int128 **)v2;
  if (*(BambiPrefsManager **)v2 != (BambiPrefsManager *)((char *)v2 + 8))
  {
    do
    {
      memset(v27, 0, sizeof(v27));
      std::pair<std::string const,BambiCarrierPrefs>::pair[abi:ne180100]((std::string *)v27, v4 + 2);
      if (a1 + 1 == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, (void **)v27))
      {
        v5 = v29;
        if ((unint64_t)v29 >= v30)
        {
          v7 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v28, (__int128 *)v27);
        }
        else
        {
          if ((v27[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v27, *(std::string::size_type *)&v27[8]);
          }
          else
          {
            v6 = *(_OWORD *)v27;
            v29->__r_.__value_.__r.__words[2] = *(_QWORD *)&v27[16];
            *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
          }
          v7 = v5 + 1;
        }
        v29 = v7;
        std::string::basic_string[abi:ne180100]<0>(v25, "prefs");
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_0);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v8 = ImsLogger::debug(ims::_logger, (uint64_t)v25, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Carrier ", 8);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 32))(v8, v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" marked for deletion", 20);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
        if (v24 < 0)
          operator delete(__p[0]);
        if (v26 < 0)
          operator delete(v25[0]);
      }
      BambiCarrierPrefs::~BambiCarrierPrefs((BambiCarrierPrefs *)&v27[24]);
      if ((v27[23] & 0x80000000) != 0)
        operator delete(*(void **)v27);
      v9 = (__int128 *)*((_QWORD *)v4 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(__int128 **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (__int128 *)*((_QWORD *)v4 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v4;
          v4 = v10;
        }
        while (!v11);
      }
      v4 = v10;
    }
    while (v10 != v3);
  }
  v12 = v28;
  for (i = v29; v12 != (void **)i; v12 += 3)
  {
    v14 = BambiPrefsManager::instance(v2);
    v15 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v14, v12);
    v2 = BambiPrefsManager::instance((BambiPrefsManager *)v15);
    if ((void **)((char *)v2 + 8) != v15)
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "prefs");
      std::string::basic_string[abi:ne180100]<0>(v25, (char *)&str_3_0);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v16 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"Removing prefs for carrier ", 27);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 32))(v16, v12);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v16 + 17) = 0;
      if (v26 < 0)
        operator delete(v25[0]);
      if ((v27[23] & 0x80000000) != 0)
        operator delete(*(void **)v27);
      v17 = (BambiPrefsManager *)v15[11];
      if (v17)
        v17 = (BambiPrefsManager *)(*(uint64_t (**)(BambiPrefsManager *))(*(_QWORD *)v17 + 8))(v17);
      v18 = BambiPrefsManager::instance(v17);
      v19 = (void **)v15[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (void **)*v19;
        }
        while (v19);
      }
      else
      {
        v21 = v15;
        do
        {
          v20 = (void **)v21[2];
          v11 = *v20 == v21;
          v21 = v20;
        }
        while (!v11);
      }
      if (*(void ***)v18 == v15)
        *(_QWORD *)v18 = v20;
      v22 = (uint64_t *)*((_QWORD *)v18 + 1);
      --*((_QWORD *)v18 + 2);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v22, (uint64_t *)v15);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,BambiCarrierPrefs>,0>((uint64_t)(v15 + 4));
      operator delete(v15);
    }
  }
  *(_QWORD *)v27 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1BEE60BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  a21 = (void *)(v26 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

uint64_t BambiPrefsManager::prefs(BambiPrefsManager *a1)
{
  BambiPrefsManager *v2;
  void **v3;
  BambiPrefsManager *v4;
  void **v5;
  uint64_t **v6;
  BambiPrefsManager *v8;

  v2 = BambiPrefsManager::instance(a1);
  v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v2, (void **)a1);
  v4 = BambiPrefsManager::instance((BambiPrefsManager *)v3);
  v5 = (void **)((char *)v4 + 8);
  v6 = (uint64_t **)BambiPrefsManager::instance(v4);
  if (v5 == v3)
    return (uint64_t)(v6 + 9);
  v8 = a1;
  return std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v8)[11];
}

BOOL BambiPrefsManager::prefsValid(BambiPrefsManager *a1)
{
  BambiPrefsManager *v2;
  void **v3;
  BambiPrefsManager *v4;
  uint64_t **v5;
  BambiPrefsManager *v7;

  v2 = BambiPrefsManager::instance(a1);
  v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v2, (void **)a1);
  v4 = BambiPrefsManager::instance((BambiPrefsManager *)v3);
  if ((void **)((char *)v4 + 8) == v3)
    return 0;
  v5 = (uint64_t **)BambiPrefsManager::instance(v4);
  v7 = a1;
  return std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v7)[11] != 0;
}

void BambiPrefsManager::audit(BambiPrefsManager *this)
{
  BambiPrefsManager *v1;
  __int128 *v2;
  __int128 *v3;
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  BOOL v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  std::string v12[12];

  v1 = BambiPrefsManager::instance(this);
  v2 = (__int128 *)((char *)v1 + 8);
  v3 = *(__int128 **)v1;
  if (*(BambiPrefsManager **)v1 != (BambiPrefsManager *)((char *)v1 + 8))
  {
    do
    {
      memset(v12, 0, 272);
      std::pair<std::string const,BambiCarrierPrefs>::pair[abi:ne180100](v12, v3 + 2);
      std::string::basic_string[abi:ne180100]<0>(v10, "audit");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_0);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::info(ims::_logger, (uint64_t)v10, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"  ", 2);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 32))(v4, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v4 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (v9 < 0)
        operator delete(__p[0]);
      if (v11 < 0)
        operator delete(v10[0]);
      BambiCarrierPrefs::~BambiCarrierPrefs((BambiCarrierPrefs *)&v12[1]);
      if (SHIBYTE(v12[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12[0].__r_.__value_.__l.__data_);
      v5 = (__int128 *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(__int128 **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (__int128 *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
}

void sub_1BEE60F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::pair<std::string const,BambiCarrierPrefs>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void BambiPrefsManager::dumpState(BambiPrefsManager *this, ImsOutStream *a2)
{
  BambiPrefsManager *v3;
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  BOOL v8;
  void *__p[2];
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v3 = BambiPrefsManager::instance(this);
  v4 = (__int128 *)((char *)v3 + 8);
  v5 = *(__int128 **)v3;
  if (*(BambiPrefsManager **)v3 != (BambiPrefsManager *)((char *)v3 + 8))
  {
    do
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      memset(v10, 0, sizeof(v10));
      *(_OWORD *)__p = 0u;
      std::pair<std::string const,BambiCarrierPrefs>::pair[abi:ne180100]((std::string *)__p, v5 + 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 1), (uint64_t)"Carrier Prefs for ", 18);
      *((_BYTE *)this + 17) = 0;
      (*(void (**)(BambiPrefsManager *, void **))(*(_QWORD *)this + 32))(this, __p);
      (*(void (**)(BambiPrefsManager *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)this + 64))(this, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)this + 17) = 0;
      if (*((_QWORD *)&v11 + 1))
        (*(void (**)(_QWORD, BambiPrefsManager *))(**((_QWORD **)&v11 + 1) + 80))(*((_QWORD *)&v11 + 1), this);
      (*(void (**)(BambiPrefsManager *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)this + 64))(this, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)this + 17) = 0;
      BambiCarrierPrefs::~BambiCarrierPrefs((BambiCarrierPrefs *)((char *)v10 + 8));
      if (SBYTE7(v10[0]) < 0)
        operator delete(__p[0]);
      v6 = (__int128 *)*((_QWORD *)v5 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(__int128 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (__int128 *)*((_QWORD *)v5 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
}

void sub_1BEE610E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string const,BambiCarrierPrefs>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiPrefsManager::setPrefsForCarrier(BambiPrefsManager *a1, ImsPrefs *a2, int a3)
{
  BambiPrefsManager *v6;
  void **v7;
  BambiPrefsManager *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  BambiPrefsManager *v12;
  uint64_t **v13;
  uint64_t *v14;
  std::string *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  ImsPrefs *v22;
  void **v23;
  void *v24;
  unint64_t v25;
  uint64_t *v26;
  void **EmergencyRegistrationTimeoutSecondsKey;
  void *v28;
  ImsPrefs *v29;
  void **v30;
  ImsPrefs *v31;
  void **v32;
  void *v33;
  unint64_t v34;
  void **AllowAnonymousEmergencyCallsWhileRoamingKey;
  void **v36;
  void *v37;
  unint64_t v38;
  void **AllowEmergencyRetryForIPSecKey;
  void *v40;
  unint64_t v41;
  _QWORD *EmergencyURNsKey;
  std::string *v43;
  char *v44;
  void **v45;
  uint64_t v46;
  int v47;
  int *v48;
  int v49;
  int v50;
  BOOL v51;
  std::string *v52;
  char *v53;
  char *v54;
  void **PrivateEmergencyPrefixesKey;
  ImsPrefs *v56;
  std::string::size_type size;
  void **NonPrivateEmergencyPrefixesKey;
  std::string::size_type v59;
  ImsPrefs *v60;
  void **EmergencyRegistrationRetryResponsesKey;
  std::string v62;
  std::string v63;
  std::string __p;
  void *v65;
  _QWORD *v66;
  uint64_t v67;

  v6 = BambiPrefsManager::instance(a1);
  v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v6, (void **)a1);
  v8 = BambiPrefsManager::instance((BambiPrefsManager *)v7);
  if ((void **)((char *)v8 + 8) != v7)
  {
    v9 = (uint64_t **)BambiPrefsManager::instance(v8);
    v65 = a1;
    v10 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v65)[11];
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  std::string::basic_string[abi:ne180100]<0>(&v65, "prefs");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_0);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v11 = ImsLogger::debug(ims::_logger, (uint64_t)&v65, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Setting prefs (", 15);
  *(_BYTE *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)") for carrier ", 14);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, BambiPrefsManager *))(*(_QWORD *)v11 + 32))(v11, a1);
  v12 = (BambiPrefsManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67) < 0)
    operator delete(v65);
  v13 = (uint64_t **)BambiPrefsManager::instance(v12);
  v65 = a1;
  v14 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v65);
  v15 = std::string::operator=((std::string *)(v14 + 7), (const std::string *)a1);
  v16 = (uint64_t **)BambiPrefsManager::instance((BambiPrefsManager *)v15);
  v65 = a1;
  v17 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v65);
  v17[11] = (uint64_t)a2;
  v18 = (uint64_t **)BambiPrefsManager::instance((BambiPrefsManager *)v17);
  v65 = a1;
  v19 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, (void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v65);
  *((_BYTE *)v19 + 80) = a3;
  v20 = (uint64_t **)BambiPrefsManager::instance((BambiPrefsManager *)v19);
  if (a2)
  {
    v65 = a1;
    v21 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, (void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v65);
    BambiEmergencyPrefs::reset((BambiEmergencyPrefs *)(v21 + 12));
    v23 = (void **)ImsPrefs::getAllowIncomingCallsDuringEmergencyCallKey(v22);
    v24 = ImsPrefs::prefWithKey(a2, v23);
    if (v24)
      v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v24 + 40))(v24);
    else
      v25 = *((_BYTE *)v23 + 57) != 0;
    *((_BYTE *)v21 + 97) = v25;
    EmergencyRegistrationTimeoutSecondsKey = (void **)ImsPrefs::getEmergencyRegistrationTimeoutSecondsKey((ImsPrefs *)v25);
    v28 = ImsPrefs::prefWithKey(a2, EmergencyRegistrationTimeoutSecondsKey);
    if (v28)
      v29 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v28 + 56))(v28);
    else
      v29 = (ImsPrefs *)*((unsigned int *)EmergencyRegistrationTimeoutSecondsKey + 15);
    *((_DWORD *)v21 + 25) = (_DWORD)v29;
    v30 = (void **)ImsPrefs::getAllowOutgoingCallsDuringEmergencyCallKey(v29);
    v31 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, v30);
    if (v31)
    {
      v32 = (void **)ImsPrefs::getAllowOutgoingCallsDuringEmergencyCallKey(v31);
      v33 = ImsPrefs::prefWithKey(a2, v32);
      if (v33)
        v34 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 40))(v33);
      else
        v34 = *((_BYTE *)v32 + 57) != 0;
    }
    else
    {
      v34 = *((unsigned __int8 *)v21 + 97);
    }
    *((_BYTE *)v21 + 96) = v34;
    if (a3)
      AllowAnonymousEmergencyCallsWhileRoamingKey = (void **)ImsPrefs::getAllowAnonymousEmergencyCallsWhileRoamingKey((ImsPrefs *)v34);
    else
      AllowAnonymousEmergencyCallsWhileRoamingKey = (void **)ImsPrefs::getAllowAnonymousEmergencyCallsKey((ImsPrefs *)v34);
    v36 = AllowAnonymousEmergencyCallsWhileRoamingKey;
    v37 = ImsPrefs::prefWithKey(a2, AllowAnonymousEmergencyCallsWhileRoamingKey);
    if (v37)
      v38 = (*(uint64_t (**)(void *))(*(_QWORD *)v37 + 40))(v37);
    else
      v38 = *((_BYTE *)v36 + 57) != 0;
    *((_BYTE *)v21 + 98) = v38;
    AllowEmergencyRetryForIPSecKey = (void **)ImsPrefs::getAllowEmergencyRetryForIPSecKey((ImsPrefs *)v38);
    v40 = ImsPrefs::prefWithKey(a2, AllowEmergencyRetryForIPSecKey);
    if (v40)
      v41 = (*(uint64_t (**)(void *))(*(_QWORD *)v40 + 40))(v40);
    else
      v41 = *((_BYTE *)AllowEmergencyRetryForIPSecKey + 57) != 0;
    *((_BYTE *)v21 + 99) = v41;
    v66 = 0;
    v67 = 0;
    v65 = &v66;
    EmergencyURNsKey = ImsPrefs::getEmergencyURNsKey((ImsPrefs *)v41);
    v43 = (std::string *)ImsPrefs::stringMapValue(a2, (uint64_t)EmergencyURNsKey, (uint64_t **)&v65);
    if ((_DWORD)v43)
    {
      v44 = (char *)v65;
      if (v65 != &v66)
      {
        do
        {
          v45 = (void **)(v44 + 32);
          v46 = v44[55];
          v47 = (char)v46;
          if ((v46 & 0x80u) != 0)
            v46 = *((_QWORD *)v44 + 5);
          if (v46 != 7
            || (v47 >= 0 ? (v48 = (int *)(v44 + 32)) : (v48 = (int *)*v45),
                (v49 = *v48, v50 = *(int *)((char *)v48 + 3), v49 == 1634100580) ? (v51 = v50 == 1953264993) : (v51 = 0),
                v52 = (std::string *)(v21 + 13),
                !v51))
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v44 + 32);
            v52 = (std::string *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v21 + 16, v45, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 7);
          }
          v43 = std::string::operator=(v52, (const std::string *)(v44 + 56));
          v53 = (char *)*((_QWORD *)v44 + 1);
          if (v53)
          {
            do
            {
              v54 = v53;
              v53 = *(char **)v53;
            }
            while (v53);
          }
          else
          {
            do
            {
              v54 = (char *)*((_QWORD *)v44 + 2);
              v51 = *(_QWORD *)v54 == (_QWORD)v44;
              v44 = v54;
            }
            while (!v51);
          }
          v44 = v54;
        }
        while (v54 != (char *)&v66);
      }
    }
    memset(&__p, 0, sizeof(__p));
    PrivateEmergencyPrefixesKey = (void **)ImsPrefs::getPrivateEmergencyPrefixesKey((ImsPrefs *)v43);
    v56 = (ImsPrefs *)ImsPrefs::stringValue(a2, PrivateEmergencyPrefixesKey);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
      v56 = (ImsPrefs *)ims::tokenize(&__p, v21 + 23, 0x2Cu);
    NonPrivateEmergencyPrefixesKey = (void **)ImsPrefs::getNonPrivateEmergencyPrefixesKey(v56);
    ImsPrefs::stringValue(a2, NonPrivateEmergencyPrefixesKey);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v63;
    v59 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v59 = v63.__r_.__value_.__l.__size_;
    if (v59)
      ims::tokenize(&__p, v21 + 26, 0x2Cu);
    v60 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(&v63, "REGISTER");
    EmergencyRegistrationRetryResponsesKey = (void **)ImsPrefs::getEmergencyRegistrationRetryResponsesKey(v60);
    ImsPrefs::stringValue(a2, EmergencyRegistrationRetryResponsesKey);
    SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)(v21 + 19), (uint64_t)&v63, &v62);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v65, v66);
  }
  else
  {
    v65 = a1;
    v26 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, (void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v65);
    BambiEmergencyPrefs::reset((BambiEmergencyPrefs *)(v26 + 12));
  }
}

void sub_1BEE61678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,_QWORD *a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a27, a28);
  _Unwind_Resume(a1);
}

uint64_t *BambiPrefsManager::subscribe(BambiPrefsManager *a1, unint64_t *a2)
{
  BambiPrefsManager *v4;
  void **v5;
  uint64_t *result;
  uint64_t v7;
  BambiPrefsManager *v8;
  uint64_t **v9;
  uint64_t *v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  v4 = BambiPrefsManager::instance(a1);
  v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v4, (void **)a1);
  result = (uint64_t *)BambiPrefsManager::instance((BambiPrefsManager *)v5);
  if (result + 1 != (uint64_t *)v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "prefs");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_0);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Subscribing ", 12);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" to ", 4);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, BambiPrefsManager *))(*(_QWORD *)v7 + 32))(v7, a1);
    v8 = (BambiPrefsManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    v9 = (uint64_t **)BambiPrefsManager::instance(v8);
    v13[0] = a1;
    v10 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)v13);
    return std::__tree<std::shared_ptr<SipStack>>::__emplace_unique_key_args<std::shared_ptr<SipStack>,std::shared_ptr<SipStack> const&>((uint64_t **)v10 + 35, a2, (uint64_t *)a2);
  }
  return result;
}

void sub_1BEE61874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BambiPrefsManager *BambiPrefsManager::unsubscribe(BambiPrefsManager *a1, unint64_t *a2)
{
  BambiPrefsManager *v4;
  void **v5;
  BambiPrefsManager *result;
  uint64_t v7;
  BambiPrefsManager *v8;
  uint64_t **v9;
  uint64_t *v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  v4 = BambiPrefsManager::instance(a1);
  v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v4, (void **)a1);
  result = BambiPrefsManager::instance((BambiPrefsManager *)v5);
  if ((void **)((char *)result + 8) != v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "prefs");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_0);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Unsubscribing ", 14);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" from ", 6);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, BambiPrefsManager *))(*(_QWORD *)v7 + 32))(v7, a1);
    v8 = (BambiPrefsManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    v9 = (uint64_t **)BambiPrefsManager::instance(v8);
    v13[0] = a1;
    v10 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)v13);
    return (BambiPrefsManager *)std::__tree<std::shared_ptr<SipStack>>::__erase_unique<std::shared_ptr<SipStack>>((uint64_t)(v10 + 35), a2);
  }
  return result;
}

void sub_1BEE61A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BambiPrefsManager::subscribers(BambiPrefsManager *a1@<X0>, uint64_t *a2@<X8>)
{
  BambiPrefsManager *v4;
  void **v5;
  BambiPrefsManager *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  __int128 v20;
  BambiPrefsManager *v21;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = BambiPrefsManager::instance(a1);
  v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v4, (void **)a1);
  v6 = BambiPrefsManager::instance((BambiPrefsManager *)v5);
  if ((void **)((char *)v6 + 8) != v5)
  {
    v7 = (uint64_t **)BambiPrefsManager::instance(v6);
    v21 = a1;
    v8 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
    v9 = (uint64_t *)v8[35];
    v10 = v8 + 36;
    if (v9 != v8 + 36)
    {
      do
      {
        v11 = v9[5];
        *(_QWORD *)&v20 = v9[4];
        *((_QWORD *)&v20 + 1) = v11;
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        std::vector<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const>>::push_back[abi:ne180100](a2, &v20);
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
        if (*((_QWORD *)&v20 + 1))
        {
          v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v17 = (uint64_t *)v9[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (uint64_t *)v9[2];
            v19 = *v18 == (_QWORD)v9;
            v9 = v18;
          }
          while (!v19);
        }
        v9 = v18;
      }
      while (v18 != v10);
    }
  }
}

void sub_1BEE61B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const>>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = ((uint64_t)v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<ImpuType>::__throw_length_error[abi:ne180100]();
    v14 = v5 - *a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v22[4] = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(result, v15);
    v17 = &v16[16 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[16 * v18];
    v19 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22[2] = v17 + 16;
    std::vector<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const>>::__swap_out_circular_buffer(a1, v22);
    v11 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)v22);
  }
  else
  {
    *v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v7[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v11;
  return result;
}

void sub_1BEE61C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t BambiPrefsManager::loadPrefs(uint64_t a1, BambiPrefsManager *a2, void *a3, int a4, int a5)
{
  ImsPrefs *v9;
  uint64_t *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Prefs;
  std::string v18;
  void *v19[2];
  char v20;
  std::string __p;
  void (**v22)(ImsResult *__hidden);
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v9 = (ImsPrefs *)operator new();
  ImsPrefs::ImsPrefs(v9);
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v10 = &_bambiDomain;
  v22 = &off_1E78B7238;
  v23 = &_bambiDomain;
  v24 = 0;
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "prefs");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_0);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"reading prefs from CommCenter for ", 34);
    *(_BYTE *)(v11 + 17) = 0;
    if (a4)
      v12 = "primary";
    else
      v12 = "secondary";
    if (a4)
      v13 = 7;
    else
      v13 = 9;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)v12, v13);
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" device.", 8);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v20 < 0)
      operator delete(v19[0]);
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_0);
    std::string::basic_string[abi:ne180100]<0>(&v18, "cc");
    ImsPrefs::loadDict(v9, a3, &__p, &v18, 0, (uint64_t)v19);
    ImsResult::operator=((uint64_t)&v22, (uint64_t)v19);
    ImsResult::~ImsResult((ImsResult *)v19);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v10 = v23;
    v14 = v24;
  }
  else
  {
    v14 = 0;
  }
  if (((*(uint64_t (**)(uint64_t *, uint64_t))(*v10 + 24))(v10, v14) & 1) != 0)
  {
    (*(void (**)(ImsPrefs *))(*(_QWORD *)v9 + 8))(v9);
    std::string::basic_string[abi:ne180100]<0>(v19, "prefs");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_0);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)v19, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"unable to load prefs: ", 22);
    *(_BYTE *)(v15 + 17) = 0;
    ((void (*)(ImsResult *, ImsOutStream *))v22[2])((ImsResult *)&v22, (ImsOutStream *)v15);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v20 < 0)
      operator delete(v19[0]);
    Prefs = (*(unsigned int (**)(uint64_t *, _QWORD))(*v23 + 24))(v23, v24) ^ 1;
  }
  else
  {
    Prefs = BambiPrefsManager::loadPrefs(a2, v9, a5);
  }
  ImsResult::~ImsResult((ImsResult *)&v22);
  return Prefs;
}

void sub_1BEE61FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a20 < 0)
    operator delete(__p);
  ImsResult::~ImsResult((ImsResult *)&a33);
  _Unwind_Resume(a1);
}

uint64_t BambiPrefsManager::loadPrefs(BambiPrefsManager *a1, ImsPrefs *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ImsPrefs *v16;
  void **LoggingParamsKey;
  void *v18;
  char v19;
  int v20;
  std::string v22;
  std::string v23;
  std::string __s;
  void *__p[2];
  _OWORD v26[4];
  void (**v27)(ImsResult *__hidden);
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::string v33;

  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v27 = &off_1E78B7238;
  v28 = &_bambiDomain;
  v29 = 0;
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "prefs");
    std::string::basic_string[abi:ne180100]<0>(&v33, (char *)&str_3_0);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"unable to load prefs", 20);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SBYTE7(v26[0]) < 0)
      operator delete(__p[0]);
    memset((char *)v26 + 8, 0, 48);
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    LODWORD(v26[0]) = 0x40000000;
    ImsResult::operator=((uint64_t)&v27, (uint64_t)__p);
    ImsResult::~ImsResult((ImsResult *)__p);
  }
  memset(&__s, 0, sizeof(__s));
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v26[0] = 0;
  v7 = std::string::basic_string[abi:ne180100]<0>(&v33, "_wireless");
  ims::userHomeDirectory(v7, __p);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if ((SBYTE7(v26[0]) & 0x80u) == 0)
    v8 = BYTE7(v26[0]);
  else
    v8 = (size_t)__p[1];
  memset(&v23, 0, sizeof(v23));
  v9 = &v23;
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, v8 + 8);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if ((SBYTE7(v26[0]) & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "/Library");
  if (SBYTE7(v26[0]) < 0)
    operator delete(__p[0]);
  v11 = std::string::append(&v23, "/Preferences/com.apple.ipTelephony_override.plist", 0x31uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  __s.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (os_variant_has_internal_content() && ims::fileExists(&__s, 0))
  {
    *(_OWORD *)__p = 0u;
    memset(v26, 0, 56);
    std::string::basic_string[abi:ne180100]<0>(&v33, (char *)&str_3_0);
    std::string::basic_string[abi:ne180100]<0>(&v23, "override");
    ImsPrefs::loadPlist(a2, (uint64_t)&__s, &v33, &v23, 1u, (uint64_t)__p);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if ((*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)__p[1] + 24))(__p[1], LODWORD(v26[0])))
    {
      std::string::basic_string[abi:ne180100]<0>(&v33, "prefs");
      std::string::basic_string[abi:ne180100]<0>(&v23, (char *)&str_3_0);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v13 = ImsLogger::error(ims::_logger, (uint64_t)&v33, (uint64_t)&v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"unable to load override prefs: ", 31);
      *(_BYTE *)(v13 + 17) = 0;
      (*((void (**)(void **, uint64_t))__p[0] + 2))(__p, v13);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v33, "prefs");
      std::string::basic_string[abi:ne180100]<0>(&v23, (char *)&str_3_0);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v14 = ImsLogger::debug(ims::_logger, (uint64_t)&v33, (uint64_t)&v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Loaded override prefs ", 22);
      *(_BYTE *)(v14 + 17) = 0;
      LoggableString::LoggableString(&v22, &__s);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 40))(v14, &v22);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v14 + 17) = 0;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    ImsResult::operator=((uint64_t)&v27, (uint64_t)__p);
    ImsResult::~ImsResult((ImsResult *)__p);
  }
  if (((*(uint64_t (**)(uint64_t *, _QWORD))(*v28 + 24))(v28, v29) & 1) != 0)
  {
    if (a2)
      (*(void (**)(ImsPrefs *))(*(_QWORD *)a2 + 8))(a2);
    std::string::basic_string[abi:ne180100]<0>(__p, "prefs");
    std::string::basic_string[abi:ne180100]<0>(&v33, (char *)&str_3_0);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"unable to load prefs: ", 22);
    *(_BYTE *)(v15 + 17) = 0;
    ((void (*)(ImsResult *, ImsOutStream *))v27[2])((ImsResult *)&v27, (ImsOutStream *)v15);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SBYTE7(v26[0]) < 0)
LABEL_50:
      operator delete(__p[0]);
  }
  else
  {
    BambiPrefsManager::setPrefsForCarrier(a1, a2, a3);
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v26[0] = 0;
    LoggingParamsKey = (void **)ImsPrefs::getLoggingParamsKey(v16);
    ImsPrefs::stringValue(a2, LoggingParamsKey);
    v18 = (void *)BYTE7(v26[0]);
    v19 = BYTE7(v26[0]);
    if (SBYTE7(v26[0]) < 0)
      v18 = __p[1];
    if (v18)
    {
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      ImsLogger::setParams((ImsLogger *)ims::_logger, (std::string *)__p);
      v19 = BYTE7(v26[0]);
    }
    if (v19 < 0)
      goto LABEL_50;
  }
  v20 = (*(uint64_t (**)(uint64_t *, _QWORD))(*v28 + 24))(v28, v29);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  ImsResult::~ImsResult((ImsResult *)&v27);
  return v20 ^ 1u;
}

void sub_1BEE62660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v41 - 65) < 0)
    operator delete(*(void **)(v41 - 88));
  ImsResult::~ImsResult((ImsResult *)&a28);
  if (a26 < 0)
    operator delete(a21);
  ImsResult::~ImsResult((ImsResult *)&a41);
  _Unwind_Resume(a1);
}

uint64_t BambiPrefsManager::loadPrefs(uint64_t a1, BambiPrefsManager *a2, void *a3, void *a4, uint64_t a5, int a6)
{
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Prefs;
  std::string v20;
  void *v21[2];
  char v22;
  std::string __p;
  void (**v24)(ImsResult *__hidden);
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v24 = &off_1E78B7238;
  v25 = &_bambiDomain;
  v26 = 0;
  v10 = (uint64_t **)operator new();
  ImsPrefs::ImsPrefs((ImsPrefs *)v10);
  if (a3)
  {
    if (a4)
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "prefs");
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_0);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v11 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"need to read both carrier and operator prefs", 44);
      *(_BYTE *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v11 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v22 < 0)
        operator delete(v21[0]);
      std::string::basic_string[abi:ne180100]<0>(v21, "operator");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v10 + 43, v21, (uint64_t)v21);
      if (v22 < 0)
        operator delete(v21[0]);
      std::string::basic_string[abi:ne180100]<0>(v21, "default");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v10 + 40, v21, (uint64_t)v21);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "prefs");
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_0);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v12 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"no operator prefs supplied, carrier and operator prefs are the same", 67);
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v12 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "prefs");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_0);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"reading prefs from carrier dictionary", 37);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_0);
    std::string::basic_string[abi:ne180100]<0>(&v20, "carrier");
    ImsPrefs::loadDict(v10, a3, &__p, &v20, 0, (uint64_t)v21);
    ImsResult::operator=((uint64_t)&v24, (uint64_t)v21);
    ImsResult::~ImsResult((ImsResult *)v21);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v14 = (*(uint64_t (**)(uint64_t *, _QWORD))(*v25 + 24))(v25, v26);
    if (a4)
      v15 = v14;
    else
      v15 = 1;
    if ((v15 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "prefs");
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_0);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v16 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"reading prefs from operator dictionary", 38);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v16 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v22 < 0)
        operator delete(v21[0]);
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_0);
      std::string::basic_string[abi:ne180100]<0>(&v20, "operator");
      ImsPrefs::loadDict(v10, a4, &__p, &v20, 0, (uint64_t)v21);
      ImsResult::operator=((uint64_t)&v24, (uint64_t)v21);
      ImsResult::~ImsResult((ImsResult *)v21);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (((*(uint64_t (**)(uint64_t *, _QWORD))(*v25 + 24))(v25, v26) & 1) != 0)
  {
    ((void (*)(uint64_t **))(*v10)[1])(v10);
    std::string::basic_string[abi:ne180100]<0>(v21, "prefs");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_0);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v17 = ImsLogger::error(ims::_logger, (uint64_t)v21, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"unable to load prefs: ", 22);
    *(_BYTE *)(v17 + 17) = 0;
    ((void (*)(ImsResult *, ImsOutStream *))v24[2])((ImsResult *)&v24, (ImsOutStream *)v17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v22 < 0)
      operator delete(v21[0]);
    Prefs = (*(unsigned int (**)(uint64_t *, _QWORD))(*v25 + 24))(v25, v26) ^ 1;
  }
  else
  {
    Prefs = BambiPrefsManager::loadPrefs(a2, (ImsPrefs *)v10, a6);
  }
  ImsResult::~ImsResult((ImsResult *)&v24);
  return Prefs;
}

void sub_1BEE62D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a20 < 0)
    operator delete(__p);
  ImsResult::~ImsResult((ImsResult *)&a33);
  _Unwind_Resume(a1);
}

void BambiPrefsManager::BambiPrefsManager(BambiPrefsManager *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  ImsPrefs::ImsPrefs((BambiPrefsManager *)((char *)this + 72));
}

void sub_1BEE62E94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 71) < 0)
      operator delete(*(void **)(v1 + v3 + 48));
    v3 -= 24;
    if (v3 == -48)
    {
      std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::destroy(v1, *(_QWORD **)(v1 + 8));
      _Unwind_Resume(a1);
    }
  }
}

std::string *std::pair<std::string const,BambiCarrierPrefs>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  BambiCarrierPrefs::BambiCarrierPrefs(this + 1, (const BambiCarrierPrefs *)((char *)a2 + 24));
  return this;
}

void sub_1BEE62F28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void BambiCarrierPrefs::BambiCarrierPrefs(std::string *this, const BambiCarrierPrefs *a2)
{
  __int128 v4;
  std::string::size_type *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  std::string::size_type v10;
  std::string::size_type *v11;
  std::string::size_type *v12;
  std::string::value_type *v13;
  BOOL v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  _QWORD v24[3];

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)a2 + 24);
  BambiEmergencyPrefs::BambiEmergencyPrefs((BambiEmergencyPrefs *)&this[1].__r_.__value_.__r.__words[2], (const BambiCarrierPrefs *)((char *)a2 + 40));
  this[7].__r_.__value_.__l.__size_ = 0;
  this[7].__r_.__value_.__r.__words[2] = 0;
  this[8].__r_.__value_.__r.__words[0] = 0;
  std::vector<ImpuType>::__init_with_size[abi:ne180100]<ImpuType*,ImpuType*>(&this[7].__r_.__value_.__l.__size_, *((const void **)a2 + 22), *((_QWORD *)a2 + 23), (uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 2);
  this[8].__r_.__value_.__l.__size_ = 0;
  this[8].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__r.__words[0] = 0;
  std::vector<ImpuType>::__init_with_size[abi:ne180100]<ImpuType*,ImpuType*>(&this[8].__r_.__value_.__l.__size_, *((const void **)a2 + 25), *((_QWORD *)a2 + 26), (uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 2);
  this[9].__r_.__value_.__r.__words[2] = 0;
  v5 = &this[9].__r_.__value_.__r.__words[2];
  this[9].__r_.__value_.__l.__size_ = (std::string::size_type)&this[9].__r_.__value_.__r.__words[2];
  this[10].__r_.__value_.__r.__words[0] = 0;
  v6 = (char *)*((_QWORD *)a2 + 28);
  v7 = (char *)a2 + 232;
  if (v6 != (char *)a2 + 232)
  {
    while (1)
    {
      v9 = *((_QWORD *)v6 + 4);
      v8 = *((_QWORD *)v6 + 5);
      v10 = *v5;
      v11 = &this[9].__r_.__value_.__r.__words[2];
      if ((std::string::size_type *)this[9].__r_.__value_.__l.__size_ != v5)
      {
        v12 = (std::string::size_type *)*v5;
        v13 = &this[9].__r_.__value_.__s.__data_[16];
        if (v10)
        {
          do
          {
            v11 = v12;
            v12 = (std::string::size_type *)v12[1];
          }
          while (v12);
        }
        else
        {
          do
          {
            v11 = (std::string::size_type *)*((_QWORD *)v13 + 2);
            v14 = *v11 == (_QWORD)v13;
            v13 = (std::string::value_type *)v11;
          }
          while (v14);
        }
        if (v11[4] >= v9)
          break;
      }
      if (v10)
        v15 = (uint64_t **)v11;
      else
        v15 = (uint64_t **)&this[9].__r_.__value_.__r.__words[2];
      if (v10)
        v16 = (uint64_t **)(v11 + 1);
      else
        v16 = (uint64_t **)&this[9].__r_.__value_.__r.__words[2];
      if (!*v16)
        goto LABEL_27;
LABEL_31:
      v22 = (char *)*((_QWORD *)v6 + 1);
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = *(char **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (char *)*((_QWORD *)v6 + 2);
          v14 = *(_QWORD *)v23 == (_QWORD)v6;
          v6 = v23;
        }
        while (!v14);
      }
      v6 = v23;
      if (v23 == v7)
        return;
    }
    v16 = (uint64_t **)&this[9].__r_.__value_.__r.__words[2];
    v15 = (uint64_t **)&this[9].__r_.__value_.__r.__words[2];
    if (v10)
    {
      v17 = (uint64_t *)*v5;
      while (1)
      {
        while (1)
        {
          v15 = (uint64_t **)v17;
          v18 = v17[4];
          if (v18 <= v9)
            break;
          v17 = *v15;
          v16 = v15;
          if (!*v15)
            goto LABEL_27;
        }
        if (v18 >= v9)
          goto LABEL_31;
        v17 = v15[1];
        if (!v17)
        {
          v16 = v15 + 1;
          break;
        }
      }
    }
LABEL_27:
    v24[2] = 1;
    v19 = (uint64_t *)operator new(0x30uLL);
    v24[1] = (char *)this + 232;
    v19[4] = v9;
    v19[5] = v8;
    if (v8)
    {
      v20 = (unint64_t *)(v8 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    std::__tree<unsigned int>::__insert_node_at((uint64_t **)&this[9].__r_.__value_.__l.__size_, (uint64_t)v15, v16, v19);
    v24[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<SipStack>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<SipStack>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
    goto LABEL_31;
  }
}

void sub_1BEE63174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, SipImpuRank *a10, BambiEmergencyPrefs *a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(v11 + 184) = v13;
    operator delete(v13);
  }
  BambiEmergencyPrefs::~BambiEmergencyPrefs(a11);
  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  _Unwind_Resume(a1);
}

void SipImpuRank::~SipImpuRank(SipImpuRank *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void BambiEmergencyPrefs::~BambiEmergencyPrefs(BambiEmergencyPrefs *this)
{
  void **v2;

  v2 = (void **)((char *)this + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((_QWORD *)this + 7) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void BambiEmergencyPrefs::BambiEmergencyPrefs(BambiEmergencyPrefs *this, const BambiEmergencyPrefs *a2)
{
  __int128 v4;

  *(_QWORD *)this = *(_QWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 4, (uint64_t)a2 + 32);
  *((_QWORD *)this + 7) = &off_1E78EB020;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 8, (uint64_t)a2 + 64);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 88), *((__int128 **)a2 + 11), *((__int128 **)a2 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 112), *((__int128 **)a2 + 14), *((__int128 **)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 3));
}

void sub_1BEE63384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  BambiEmergencyUrnMap *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *(_QWORD *)(v3 + 56) = v5;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v4, *(_QWORD **)(v3 + 72));
  BambiEmergencyUrnMap::~BambiEmergencyUrnMap(v2);
  _Unwind_Resume(a1);
}

void sub_1BEE633C4()
{
  void **v0;
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v0);
  JUMPOUT(0x1BEE633BCLL);
}

void BambiEmergencyUrnMap::~BambiEmergencyUrnMap(BambiEmergencyUrnMap *this)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1BEE63454(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  void **v12;

  v11 = 0;
  v12 = 0;
  v6 = std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::vector<ImpuType>::__init_with_size[abi:ne180100]<ImpuType*,ImpuType*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 62)
      std::vector<ImpuType>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)(result + 2), a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 4 * v8;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1BEE63610(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<ImpuType>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::unique_ptr<std::__tree_node<std::shared_ptr<SipStack>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<SipStack>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__tree<std::shared_ptr<SipStack>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::shared_ptr<SipStack>>::destroy(a1, *a2);
    std::__tree<std::shared_ptr<SipStack>>::destroy(a1, a2[1]);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void BambiCarrierPrefs::~BambiCarrierPrefs(BambiCarrierPrefs *this)
{
  void *v2;
  void *v3;
  void **v4;

  std::__tree<std::shared_ptr<SipStack>>::destroy((uint64_t)this + 224, *((_QWORD **)this + 29));
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  *((_QWORD *)this + 12) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 104, *((_QWORD **)this + 14));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t *std::vector<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 16);
    v2 -= 16;
    *(_QWORD *)(v4 - 16) = v5;
    v4 -= 16;
    v6 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v4 + 8) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7[3];
  uint64_t v8;

  v8 = 0;
  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    memset(v7, 0, sizeof(v7));
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, v7);
    std::__tree<unsigned int>::__insert_node_at(a1, v8, v5, v7[0]);
    return v7[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,BambiCarrierPrefs>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,BambiCarrierPrefs>,0>(uint64_t a1)
{
  BambiCarrierPrefs::~BambiCarrierPrefs((BambiCarrierPrefs *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,BambiCarrierPrefs>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BambiCarrierPrefs>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x130uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = std::pair<std::string const,BambiCarrierPrefs>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1BEE63A94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,BambiCarrierPrefs>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BambiCarrierPrefs>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,BambiCarrierPrefs>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  this[11].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[9].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  BambiCarrierPrefs::BambiCarrierPrefs((BambiCarrierPrefs *)&this[1]);
  return this;
}

void sub_1BEE63B28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void BambiCarrierPrefs::BambiCarrierPrefs(BambiCarrierPrefs *this)
{
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 5) = 0xA00000000;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_QWORD *)this + 11) = 0;
  BambiEmergencyUrnMap::reset((BambiCarrierPrefs *)((char *)this + 48));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = (char *)this + 112;
  *((_QWORD *)this + 12) = &off_1E78EB020;
  *((_QWORD *)this + 15) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  SipImpuRank::SipImpuRank((BambiCarrierPrefs *)((char *)this + 176));
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 28) = (char *)this + 232;
}

void sub_1BEE63C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = v14;
  v16 = v13;
  a10 = (void **)(v10 + 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  *(_QWORD *)(v10 + 96) = v15;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v16, *(_QWORD **)(v10 + 112));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v12, *(_QWORD **)(v10 + 80));
  if (*(char *)(v10 + 71) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,BambiCarrierPrefs>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BambiCarrierPrefs>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,BambiCarrierPrefs>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::shared_ptr<SipStack>>::__emplace_unique_key_args<std::shared_ptr<SipStack>,std::shared_ptr<SipStack> const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[3];

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = v5[4];
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        return (uint64_t *)v8;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v16[2] = 1;
    v11 = (uint64_t *)operator new(0x30uLL);
    v16[1] = v6;
    v12 = a3[1];
    v11[4] = *a3;
    v11[5] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v8, v7, v11);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<SipStack>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<SipStack>,void *>>>>::reset[abi:ne180100]((uint64_t)v16, 0);
  }
  return v11;
}

uint64_t std::__tree<std::shared_ptr<SipStack>>::__erase_unique<std::shared_ptr<SipStack>>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer((uint64_t **)a1, v4);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t SipUssdSession::SipUssdSession(uint64_t a1, const std::string *a2)
{
  std::string __p;

  *(_QWORD *)(a1 + 104) = &off_1E78B7B60;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.ussd");
  SipSessionInterface::SipSessionInterface(a1, (uint64_t *)&off_1E78BD7F8, &__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E78BD670;
  *(_QWORD *)(a1 + 104) = &unk_1E78BD7B8;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_WORD *)(a1 + 648) = 1;
  *(_DWORD *)(a1 + 668) = 0;
  *(_OWORD *)(a1 + 652) = 0u;
  return a1;
}

void sub_1BEE63EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipUssdSession::~SipUssdSession(SipUssdSession *this)
{
  *(_QWORD *)this = &off_1E78BD670;
  *((_QWORD *)this + 13) = &unk_1E78BD7B8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 656);
  if (*((char *)this + 647) < 0)
    operator delete(*((void **)this + 78));
  SipSessionInterface::~SipSessionInterface(this, (uint64_t *)&off_1E78BD7F8);
}

{
  SipUssdSession::~SipUssdSession(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipUssdSession::~SipUssdSession(SipUssdSession *this)
{
  SipUssdSession::~SipUssdSession((SipUssdSession *)((char *)this - 104));
}

{
  SipUssdSession::~SipUssdSession((SipUssdSession *)((char *)this - 104));
  JUMPOUT(0x1C3B87100);
}

void SipUssdSession::deinitialize(SipUssdSession *this)
{
  SipUssdSession::setState((unsigned __int8 *)this, 0);
  SipSessionInterface::deinitialize(this);
}

unsigned __int8 *SipUssdSession::setState(unsigned __int8 *result, int a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  const char *v6;
  size_t v7;
  const char *v8;
  size_t v9;

  if (*((_DWORD *)result + 163) != a2)
  {
    v3 = result;
    v4 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 64))(result);
    (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"state transition [", 18);
    *(_BYTE *)(v4 + 17) = 0;
    v5 = *((_DWORD *)v3 + 163) - 1;
    if (v5 > 2)
      v6 = "Uninitialized";
    else
      v6 = off_1E78BDB40[v5];
    v7 = strlen(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)v6, v7);
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" -> ", 4);
    *(_BYTE *)(v4 + 17) = 0;
    if ((a2 - 1) > 2)
      v8 = "Uninitialized";
    else
      v8 = off_1E78BDB40[a2 - 1];
    v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)v8, v9);
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v4 + 17) = 0;
    result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    *((_DWORD *)v3 + 163) = a2;
    if (a2 >= 3)
      return SipTimerContainer::cancelTimer((SipTimerContainer *)(v3 + 264), (std::string *)"UssdResponseTimer");
  }
  return result;
}

void SipUssdSession::terminationLocksReleased(SipUssdSession *this)
{
  void *v2;
  void **p_lpsrc;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  void *lpsrc;
  std::__shared_weak_count *v19;
  void *v20;
  std::__shared_weak_count *v21;

  v20 = 0;
  v21 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (_QWORD *)this + 22);
  if (lpsrc
  {
    v20 = v2;
    v21 = v19;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v20;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v4 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *((_QWORD *)this + 77);
  if (v7 && v20)
  {
    v16 = v20;
    v17 = v21;
    if (v21)
    {
      v8 = (unint64_t *)&v21->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 16))(v7, &v16);
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  SipSessionInterface::terminationLocksReleased(this);
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BEE642A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipUssdSession::terminationLocksReleased(SipUssdSession *this)
{
  SipUssdSession::terminationLocksReleased((SipUssdSession *)((char *)this - 104));
}

void SipUssdSession::loggableName(SipUssdSession *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  std::string __p;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v6, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v6 + 1), (uint64_t)"UssdSession ", 12);
  BYTE1(v7) = 0;
  v4 = *((_QWORD *)this + 30);
  if (v4)
  {
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v4 + 1504) + 16))(v4 + 1504, &v6);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v6 + 1), (uint64_t)"[Unknown]", 9);
    BYTE1(v7) = 0;
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v7 + 1) + 8, &__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v6 = &off_1E78D7A10;
  if ((_BYTE)v7)
  {
    if (*((_QWORD *)&v6 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 8))(*((_QWORD *)&v6 + 1));
  }
}

void sub_1BEE643B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  if (a18)
  {
    if (a17)
      (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipUssdSession::loggableName(SipUssdSession *this@<X0>, std::string *a2@<X8>)
{
  SipUssdSession::loggableName((SipUssdSession *)((char *)this - 104), a2);
}

void SipUssdSession::initialize(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = a2[1];
  v8 = *a2;
  v9 = (std::__shared_weak_count *)v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  SipSessionInterface::initialize(a1, &v8);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEE64490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipUssdSession::startSession(SipUssdSession *this@<X0>, uint64_t a2@<X8>)
{
  SipRequest *RequestInDialog;
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  SipMultiPartBody *v9;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  IpAddress *v18;
  SipUssdDataBody *v19;
  unint64_t *v20;
  SipMultiPartBody *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  SipUserAgent *v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *p_shared_weak_owners;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  const ImsResult *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  SipUserAgent *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  std::string v48;
  std::string __p;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  void *v54;
  char v55;
  std::string __str;
  uint64_t v57;
  std::__shared_weak_count *v58;
  IpAddress *v59;
  std::__shared_weak_count *v60;
  __int128 v61[3];
  uint64_t v62;
  SipStack *v63;
  std::__shared_weak_count *v64;
  __int16 v65;
  _BYTE v66[24];
  _BYTE *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  RequestInDialog = SipDialog::createRequestInDialog(*((_QWORD *)this + 30), (const std::string *)"INVITE", 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "g.3gpp.ussd");
  SipMessage::addHeader(RequestInDialog, (uint64_t)"Recv-Info", (uint64_t)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = (uint64_t **)((char *)SipMessage::header<SipAcceptHeader>(RequestInDialog, 1) + 64);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5, (void **)SipUssdDataBody::kContentType, (uint64_t)SipUssdDataBody::kContentType);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5, (void **)"multipart/mixed", (uint64_t)"multipart/mixed");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5, (void **)"application/sdp", (uint64_t)"application/sdp");
  v65 = 0;
  SipSessionInterface::stack((std::__shared_weak_count *)this, &v63);
  SDPParserSettings::initializeFromStack(&v65, &v63);
  v6 = v64;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (*((_BYTE *)this + 648))
  {
    v9 = (SipMultiPartBody *)operator new();
    SipMultiPartBody::SipMultiPartBody(v9);
    v10 = operator new();
    SipSdpBody::SipSdpBody(v10, (const std::string *)kUssdSdp, &v65);
    v62 = 0;
    memset(v61, 0, sizeof(v61));
    SipSessionInterface::stack((std::__shared_weak_count *)this, &__p);
    SipStack::mediaAddress((SipStack *)__p.__r_.__value_.__l.__data_, (uint64_t)v61);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v59 = 0;
    v60 = 0;
    SipHost::address((SipHost *)v61, &v59);
    v15 = *(_QWORD *)(v10 + 8);
    v14 = *(std::__shared_weak_count **)(v10 + 16);
    v57 = v15;
    v58 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v59;
    if ((*(unsigned int (**)(IpAddress *))(*(_QWORD *)v59 + 136))(v59) == 1)
    {
      *(_DWORD *)(v15 + 72) = 1;
      memset(&__p, 0, sizeof(__p));
      IpAddress::asString(v18, 3, &__p);
      std::string::operator=((std::string *)(v15 + 80), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        __str = __p;
      SDPModel::setConnectionAddress((_QWORD *)v15, &__str, 1);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    SipMultiPartBody::addPart(v9, v10);
    v19 = (SipUssdDataBody *)operator new();
    SipUssdData::SipUssdData((uint64_t)&__p, (const std::string *)(*((_QWORD *)this + 30) + 352), (const std::string *)this + 26);
    SipUssdDataBody::SipUssdDataBody(v19, (const SipUssdData *)&__p);
    v20 = (unint64_t *)SipMultiPartBody::addPart(v9, (uint64_t)v19);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C9C68;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E78C9CE0;
    if (v55 < 0)
      operator delete(v54);
    if (v53 < 0)
      operator delete(*((void **)&v52 + 1));
    bambi::XmlTreeItem::~XmlTreeItem((void **)&__p.__r_.__value_.__l.__size_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Content-Disposition");
    std::string::basic_string[abi:ne180100]<0>(&v48, "render;handling=optional");
    SipBodyPart::setHeader(v20, (uint64_t)&__p, &v48);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v21 = (SipMultiPartBody *)*((_QWORD *)RequestInDialog + 9);
    if (v21 != v9)
    {
      if (v21)
        (*(void (**)(SipMultiPartBody *))(*(_QWORD *)v21 + 8))(v21);
      *((_QWORD *)RequestInDialog + 9) = v9;
    }
    if (v14)
    {
      v22 = (unint64_t *)&v14->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v24 = v60;
    if (v60)
    {
      v25 = (unint64_t *)&v60->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    SipHost::~SipHost((void **)v61);
  }
  v27 = *((_QWORD *)this + 30);
  if (v27 && (v28 = *(_QWORD *)(v27 + 208)) != 0)
    v29 = *(SipUserAgent **)(v28 + 136);
  else
    v29 = 0;
  if (*(_BYTE *)(SipUserAgent::config(v29) + 548))
    SipMessage::addHeader(RequestInDialog, (uint64_t)"P-Preferred-Service", (uint64_t)BambiServices::kFeatureTagMmtel, 0);
  v30 = (_QWORD *)*((_QWORD *)this + 30);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipDialog::sendRequest(v30, RequestInDialog, (uint64_t)&__p, v61);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 656, v61);
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v61[0] + 1);
  if (*((_QWORD *)&v61[0] + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v61[0] + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (RequestInDialog)
    (*(void (**)(SipRequest *))(*(_QWORD *)RequestInDialog + 8))(RequestInDialog);
  if (!*((_QWORD *)this + 82))
  {
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 0x40000000;
    v40 = (const ImsResult *)ImsResult::operator<<<char [22]>((uint64_t)&__p, "unable to send INVITE");
    ImsResult::ImsResult((ImsResult *)a2, v40);
    ImsResult::~ImsResult((ImsResult *)&__p);
    return;
  }
  SipUssdSession::setState((unsigned __int8 *)this, 1);
  v35 = *((_QWORD *)this + 22);
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v34)
  {
    p_shared_weak_owners = (unint64_t *)&v34->__shared_weak_owners_;
    do
      v37 = __ldxr(p_shared_weak_owners);
    while (__stxr(v37 + 1, p_shared_weak_owners));
    do
      v38 = __ldxr(p_shared_weak_owners);
    while (__stxr(v38 + 1, p_shared_weak_owners));
    *((_BYTE *)this + 649) = 1;
    do
      v39 = __ldxr(p_shared_weak_owners);
    while (__stxr(v39 + 1, p_shared_weak_owners));
  }
  else
  {
    *((_BYTE *)this + 649) = 1;
  }
  v67 = 0;
  v41 = operator new(0x20uLL);
  *v41 = &off_1E78BDA50;
  v41[1] = this;
  v41[2] = v35;
  v41[3] = v34;
  v67 = v41;
  v42 = *((_QWORD *)this + 30);
  if (v42 && (v43 = *(_QWORD *)(v42 + 208)) != 0)
    v44 = *(SipUserAgent **)(v43 + 136);
  else
    v44 = 0;
  v45 = SipUserAgent::config(v44);
  SipTimerContainer::startTimer((_QWORD *)this + 33, (uint64_t)"UssdResponseTimer", (uint64_t)v66, *(_DWORD *)(v45 + 632), 0);
  v46 = v67;
  if (v67 == v66)
  {
    v47 = 4;
    v46 = v66;
  }
  else
  {
    if (!v67)
      goto LABEL_82;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_82:
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
  if (v34)
  {
    std::__shared_weak_count::__release_weak(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
}

void sub_1BEE64B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,char a42,uint64_t a43,void *a44)
{
  if (a38 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  SipHost::~SipHost(&a44);
  _Unwind_Resume(a1);
}

SipHeader *SipMessage::header<SipAcceptHeader>(SipMessage *a1, int a2)
{
  SipHeader *result;

  result = SipMessage::headerWithName(a1, "Accept", a2);
  if (result)
  return result;
}

void SipUssdSession::sendAdditionalData(std::string *a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  void (**v5)(SipUssdData *__hidden);
  void *v6[9];
  char v7;
  void *__p;
  char v9;

  SipUssdData::SipUssdData((uint64_t)&v5, a2, a1 + 26);
  SipUssdSession::sendInfo((SipUssdSession *)a1, (const SipUssdData *)&v5, a3);
  v5 = off_1E78C9C68;
  v6[0] = &unk_1E78C9CE0;
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6[7]);
  bambi::XmlTreeItem::~XmlTreeItem(v6);
}

void sub_1BEE64DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SipUssdData::~SipUssdData((SipUssdData *)va);
  _Unwind_Resume(a1);
}

void SipUssdSession::sendInfo(SipUssdSession *this@<X0>, const SipUssdData *a2@<X1>, uint64_t a3@<X8>)
{
  const ImsResult *v4;
  SipRequest *RequestInDialog;
  SipUssdDataBody *v8;
  SipUssdDataBody *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const ImsResult *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  SipUserAgent *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *__p;
  uint64_t *v31;
  int v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 649))
  {
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    __p = &off_1E78B7238;
    v31 = &_bambiDomain;
    v32 = 1073741826;
    v4 = (const ImsResult *)ImsResult::operator<<<char [30]>((uint64_t)&__p, "woah, slow down there maestro");
    ImsResult::ImsResult((ImsResult *)a3, v4);
    ImsResult::~ImsResult((ImsResult *)&__p);
    return;
  }
  RequestInDialog = SipDialog::createRequestInDialog(*((_QWORD *)this + 30), (const std::string *)"INFO", 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "g.3gpp.ussd");
  SipMessage::addHeader(RequestInDialog, (uint64_t)"Info-Package", (uint64_t)&__p, 0);
  if (v33 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Info-Package");
  SipMessage::addHeader(RequestInDialog, (uint64_t)"Content-Disposition", (uint64_t)&__p, 0);
  if (v33 < 0)
    operator delete(__p);
  v8 = (SipUssdDataBody *)operator new();
  SipUssdDataBody::SipUssdDataBody(v8, a2);
  v9 = (SipUssdDataBody *)*((_QWORD *)RequestInDialog + 9);
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(SipUssdDataBody *))(*(_QWORD *)v9 + 8))(v9);
    *((_QWORD *)RequestInDialog + 9) = v8;
  }
  v28 = 0;
  v29 = 0;
  v10 = (_QWORD *)*((_QWORD *)this + 30);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipDialog::sendRequest(v10, RequestInDialog, (uint64_t)&__p, &v28);
  if (v33 < 0)
    operator delete(__p);
  (*(void (**)(SipRequest *))(*(_QWORD *)RequestInDialog + 8))(RequestInDialog);
  if (v28)
  {
    v12 = *((_QWORD *)this + 22);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (v11)
    {
      p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      *((_BYTE *)this + 649) = 1;
      do
        v16 = __ldxr(p_shared_weak_owners);
      while (__stxr(v16 + 1, p_shared_weak_owners));
    }
    else
    {
      *((_BYTE *)this + 649) = 1;
    }
    v38 = 0;
    v18 = operator new(0x20uLL);
    *v18 = &off_1E78BDAD0;
    v18[1] = this;
    v18[2] = v12;
    v18[3] = v11;
    v38 = v18;
    v19 = *((_QWORD *)this + 30);
    if (v19 && (v20 = *(_QWORD *)(v19 + 208)) != 0)
      v21 = *(SipUserAgent **)(v20 + 136);
    else
      v21 = 0;
    v22 = SipUserAgent::config(v21);
    SipTimerContainer::startTimer((_QWORD *)this + 33, (uint64_t)"UssdResponseTimer", (uint64_t)v37, *(_DWORD *)(v22 + 632), 0);
    v23 = v38;
    if (v38 == v37)
    {
      v24 = 4;
      v23 = v37;
    }
    else
    {
      if (!v38)
        goto LABEL_33;
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_33:
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
    if (v11)
    {
      std::__shared_weak_count::__release_weak(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    goto LABEL_35;
  }
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  __p = &off_1E78B7238;
  v31 = &_bambiDomain;
  v32 = 0x40000000;
  v17 = (const ImsResult *)ImsResult::operator<<<char [20]>((uint64_t)&__p, "unable to send INFO");
  ImsResult::ImsResult((ImsResult *)a3, v17);
  ImsResult::~ImsResult((ImsResult *)&__p);
LABEL_35:
  v25 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1BEE65174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::__shared_weak_count *v26;

  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    std::__shared_weak_count::__release_weak(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [30]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE652C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t SipUssdSession::handleRequest(uint64_t a1, const SipMessage *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  const char *v11;
  unsigned __int8 *v12;
  __int128 *v13;
  unsigned __int8 *v14;
  const char *v15;
  unsigned __int8 *v16;
  const void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  SipUserAgent *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  SipUriHeader *v37;
  __int128 *v38;
  void **v39;
  std::__shared_weak_count *v40;
  SipDialogFork *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  BOOL v56;
  _BOOL4 v57;
  char *v58;
  char *v59;
  void (***v60)(void);
  void (**v61)(void);
  void (*v62)(void);
  char *v63;
  BOOL v64;
  uint64_t v65;
  _QWORD *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v77;
  std::__shared_weak_count *v78;
  _QWORD v79[9];
  uint64_t v80;
  std::__shared_weak_count *v81;
  _QWORD v82[9];
  void (**v83)(SipResponse *__hidden);
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  void *__p;
  uint64_t v91;
  uint64_t v92;

  v6 = (*(uint64_t (**)(const SipMessage *))(*(_QWORD *)a2 + 112))(a2);
  v7 = (unsigned __int8 *)v6;
  v8 = *(unsigned __int8 *)(v6 + 23);
  v9 = *(_QWORD *)(v6 + 8);
  if ((v8 & 0x80u) == 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = *(_QWORD *)(v6 + 8);
  switch(v10)
  {
    case 3:
      if ((v8 & 0x80) == 0)
      {
        if (!*(_BYTE *)(v6 + 23))
          goto LABEL_56;
        v13 = &SipRequest::kMethodBye;
        v14 = (unsigned __int8 *)v6;
        while (*v14 == *(unsigned __int8 *)v13)
        {
          ++v14;
          v13 = (__int128 *)((char *)v13 + 1);
          if (!--v8)
            goto LABEL_56;
        }
        goto LABEL_29;
      }
      v17 = *(const void **)v6;
      v18 = (const char *)&SipRequest::kMethodBye;
      break;
    case 7:
      if ((v8 & 0x80) == 0)
      {
        if (!*(_BYTE *)(v6 + 23))
          goto LABEL_56;
        v15 = "MESSAGE";
        v16 = (unsigned __int8 *)v6;
        while (*v16 == *(unsigned __int8 *)v15)
        {
          ++v16;
          ++v15;
          if (!--v8)
            goto LABEL_56;
        }
        goto LABEL_29;
      }
      v17 = *(const void **)v6;
      v18 = "MESSAGE";
      break;
    case 4:
      if ((v8 & 0x80) == 0)
      {
        if (!*(_BYTE *)(v6 + 23))
          goto LABEL_56;
        v11 = "INFO";
        v12 = (unsigned __int8 *)v6;
        while (*v12 == *(unsigned __int8 *)v11)
        {
          ++v12;
          ++v11;
          if (!--v8)
            goto LABEL_56;
        }
        goto LABEL_29;
      }
      v17 = *(const void **)v6;
      v18 = "INFO";
      break;
    default:
      goto LABEL_29;
  }
  if (!memcmp(v17, v18, v9))
    goto LABEL_56;
LABEL_29:
  v19 = *(_QWORD *)(a1 + 240);
  if (v19 && (v20 = *(_QWORD *)(v19 + 208)) != 0)
    v21 = *(SipUserAgent **)(v20 + 136);
  else
    v21 = 0;
  if (*(_BYTE *)(SipUserAgent::config(v21) + 628))
  {
    v22 = v7[23];
    v23 = (v22 & 0x80u) == 0 ? v7[23] : *((_QWORD *)v7 + 1);
    if (v23 == 6)
    {
      if ((v22 & 0x80) == 0)
      {
        if (v7[23])
        {
          v24 = "INVITE";
          while (*v7 == *(unsigned __int8 *)v24)
          {
            ++v7;
            ++v24;
            if (!--v22)
              goto LABEL_56;
          }
          goto LABEL_45;
        }
LABEL_56:
        v32 = (unsigned __int8 *)(*(uint64_t (**)(const SipMessage *))(*(_QWORD *)a2 + 112))(a2);
        v33 = v32[23];
        if ((v33 & 0x80u) == 0)
          v34 = v32[23];
        else
          v34 = *((_QWORD *)v32 + 1);
        if (v34 != 6)
          goto LABEL_81;
        if ((v33 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v32, "INVITE", *((_QWORD *)v32 + 1)))
            goto LABEL_81;
        }
        else if (v32[23])
        {
          v35 = "INVITE";
          while (*v32 == *(unsigned __int8 *)v35)
          {
            ++v32;
            ++v35;
            if (!--v33)
              goto LABEL_67;
          }
LABEL_81:
          v46 = (unsigned __int8 *)(*(uint64_t (**)(const SipMessage *))(*(_QWORD *)a2 + 112))(a2);
          v47 = v46[23];
          if ((v47 & 0x80u) == 0)
            v48 = v46[23];
          else
            v48 = *((_QWORD *)v46 + 1);
          if (v48 == 3)
          {
            if ((v47 & 0x80) != 0)
            {
              v57 = memcmp(*(const void **)v46, &SipRequest::kMethodBye, *((_QWORD *)v46 + 1)) == 0;
            }
            else if (v46[23])
            {
              v49 = v47 - 1;
              v50 = &SipRequest::kMethodBye;
              do
              {
                v52 = *v46++;
                v51 = v52;
                v54 = *(unsigned __int8 *)v50;
                v50 = (__int128 *)((char *)v50 + 1);
                v53 = v54;
                v56 = v49-- != 0;
                v57 = v51 == v53;
              }
              while (v51 == v53 && v56);
            }
            else
            {
              v57 = 1;
            }
          }
          else
          {
            v57 = 0;
          }
          v58 = SipMessage::body<SipUssdDataBody>((uint64_t)a2);
          if (v58)
          {
            v59 = v58;
            *(_BYTE *)(a1 + 649) = 0;
            SipTimerContainer::cancelTimer((SipTimerContainer *)(a1 + 264), (std::string *)"UssdResponseTimer");
            v60 = *(void (****)(void))(a1 + 616);
            if (v60)
            {
              v61 = *v60;
              if (*((_DWORD *)v59 + 36))
                v62 = v61[1];
              else
                v62 = *v61;
              v62();
LABEL_111:
              v89 = 0u;
              v88 = 0u;
              v69 = *(_QWORD *)(a1 + 240);
              if (v69)
              {
                v69 = *(_QWORD *)(v69 + 208);
                if (v69)
                  v69 = *(_QWORD *)(v69 + 136);
              }
              v86 = 0uLL;
              v85 = 0uLL;
              v84 = 0uLL;
              LODWORD(v88) = 1065353216;
              *(_QWORD *)&v89 = v69 + 288;
              v87 = 0;
              v83 = off_1E78E40E8;
              v91 = 0;
              v92 = 0;
              __p = 0;
              DWORD2(v89) = 200;
              v70 = (std::__shared_weak_count *)a3[1];
              v77 = *a3;
              v78 = v70;
              if (v70)
              {
                p_shared_owners = (unint64_t *)&v70->__shared_owners_;
                do
                  v72 = __ldxr(p_shared_owners);
                while (__stxr(v72 + 1, p_shared_owners));
              }
              (*(void (**)(_QWORD *__return_ptr, uint64_t, void (***)(SipResponse *__hidden), uint64_t *))(*(_QWORD *)a1 + 240))(v79, a1, &v83, &v77);
              ImsResult::~ImsResult((ImsResult *)v79);
              v73 = v78;
              if (!v78)
                goto LABEL_121;
              v74 = (unint64_t *)&v78->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
                if (!v57)
                  goto LABEL_123;
              }
              else
              {
LABEL_121:
                if (!v57)
                  goto LABEL_123;
              }
              SipUssdSession::setState((unsigned __int8 *)a1, 3);
              (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
              goto LABEL_123;
            }
            v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v65);
            v66 = *(_QWORD **)(v65 + 8);
            v67 = "no delegate";
            v68 = 11;
          }
          else
          {
            v63 = SipMessage::bodyWithContentType((uint64_t)a2, "application/ussd");
            if (v63)
            else
              v64 = 1;
            v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v65);
            v66 = *(_QWORD **)(v65 + 8);
            if (v64)
            {
              v67 = "no USSD body";
              v68 = 12;
            }
            else
            {
              v67 = "legacy USSD body found, but CT doesn't consume it";
              v68 = 49;
            }
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
          *(_BYTE *)(v65 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v65 + 17) = 0;
          goto LABEL_111;
        }
LABEL_67:
        v36 = *(_QWORD *)(a1 + 240);
        v37 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
        if (v37)
          v38 = SipUriHeader::tag(v37);
        else
          v38 = &ims::kEmptyString;
        v39 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v36 + 2040, (void **)v38);
        if ((void **)(v36 + 2048) != v39)
        {
          v41 = (SipDialogFork *)v39[7];
          v40 = (std::__shared_weak_count *)v39[8];
          v83 = (void (**)(SipResponse *__hidden))v41;
          *(_QWORD *)&v84 = v40;
          if (v40)
          {
            v42 = (unint64_t *)&v40->__shared_owners_;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          if (v41)
          {
            SipDialogFork::updateRouteSet(v41, a2, 0);
            SipDialogFork::handleTargetRefresh(v41, a2);
          }
          if (v40)
          {
            v44 = (unint64_t *)&v40->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
        }
        goto LABEL_81;
      }
      if (!memcmp(*(const void **)v7, "INVITE", *((_QWORD *)v7 + 1)))
        goto LABEL_56;
    }
  }
LABEL_45:
  v89 = 0u;
  v88 = 0u;
  v25 = *(_QWORD *)(a1 + 240);
  if (v25)
  {
    v25 = *(_QWORD *)(v25 + 208);
    if (v25)
      v25 = *(_QWORD *)(v25 + 136);
  }
  v86 = 0uLL;
  v85 = 0uLL;
  v84 = 0uLL;
  LODWORD(v88) = 1065353216;
  *(_QWORD *)&v89 = v25 + 288;
  v87 = 0;
  v83 = off_1E78E40E8;
  v91 = 0;
  v92 = 0;
  __p = 0;
  DWORD2(v89) = 405;
  v26 = (std::__shared_weak_count *)a3[1];
  v80 = *a3;
  v81 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, void (***)(SipResponse *__hidden), uint64_t *))(*(_QWORD *)a1 + 240))(v82, a1, &v83, &v80);
  ImsResult::~ImsResult((ImsResult *)v82);
  v29 = v81;
  if (v81)
  {
    v30 = (unint64_t *)&v81->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_123:
  v83 = off_1E78E40E8;
  if (SHIBYTE(v92) < 0)
    operator delete(__p);
  SipMessage::~SipMessage((SipMessage *)&v83);
  return 1;
}

void sub_1BEE659C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

char *SipMessage::body<SipUssdDataBody>(uint64_t a1)
{
  char *result;

  result = SipMessage::bodyWithContentType(a1, (unsigned __int8 *)SipUssdDataBody::kContentType);
  if (result)
  return result;
}

uint64_t SipUssdSession::handleResponse(uint64_t a1, const SipResponse *a2, _QWORD *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char v9;
  char v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  void *__p[2];
  char v35;
  _QWORD v36[2];

  v6 = (std::__shared_weak_count *)a3[1];
  v36[0] = *a3;
  v36[1] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = SipSessionInterface::handleResponse(a1, (uint64_t)a2, (uint64_t)v36);
  v10 = v9;
  if (!v6)
    goto LABEL_8;
  v11 = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if ((v10 & 1) != 0)
      return 1;
  }
  else
  {
LABEL_8:
    if ((v9 & 1) != 0)
      return 1;
  }
  v13 = *((_DWORD *)a2 + 22);
  if (v13 >= 0x12C)
  {
    v14 = *(_QWORD *)(a1 + 616);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v14 + 8))(v14, __p, 1);
    if (v35 < 0)
      operator delete(__p[0]);
    goto LABEL_50;
  }
  if (v13 - 200 <= 0x63)
  {
    v15 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
    v16 = (__int128 *)(v15 + 64);
    if (!v15)
      v16 = &ims::kEmptyString;
    v17 = *((unsigned __int8 *)v16 + 23);
    v18 = (v17 & 0x80u) == 0 ? *((unsigned __int8 *)v16 + 23) : *((_QWORD *)v16 + 1);
    if (v18 == 6)
    {
      if ((v17 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v16, "INVITE", *((_QWORD *)v16 + 1)))
          goto LABEL_37;
      }
      else if (*((_BYTE *)v16 + 23))
      {
        v19 = "INVITE";
        while (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v19)
        {
          v16 = (__int128 *)((char *)v16 + 1);
          ++v19;
          if (!--v17)
            goto LABEL_28;
        }
        goto LABEL_37;
      }
LABEL_28:
      if (*(_DWORD *)(a1 + 652) == 1)
      {
        SipUssdSession::setState((unsigned __int8 *)a1, 2);
        v20 = (std::__shared_weak_count *)a3[1];
        v32 = *a3;
        v33 = v20;
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        SipSessionInterface::addAckRetransmitHandlerForClientTransaction(a1, (uint64_t)&v32, a2, 0);
        v23 = v33;
        if (v33)
        {
          v24 = (unint64_t *)&v33->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        return 1;
      }
    }
  }
LABEL_37:
  v26 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
  v27 = (__int128 *)(v26 + 64);
  if (!v26)
    v27 = &ims::kEmptyString;
  v28 = *((unsigned __int8 *)v27 + 23);
  if ((v28 & 0x80u) == 0)
    v29 = *((unsigned __int8 *)v27 + 23);
  else
    v29 = *((_QWORD *)v27 + 1);
  if (v29 != 3)
    return 1;
  if ((v28 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v27, &SipRequest::kMethodBye, *((_QWORD *)v27 + 1)))
      return 1;
LABEL_50:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
    return 1;
  }
  if (!*((_BYTE *)v27 + 23))
    goto LABEL_50;
  v30 = &SipRequest::kMethodBye;
  while (*(unsigned __int8 *)v27 == *(unsigned __int8 *)v30)
  {
    v27 = (__int128 *)((char *)v27 + 1);
    v30 = (__int128 *)((char *)v30 + 1);
    if (!--v28)
      goto LABEL_50;
  }
  return 1;
}

void sub_1BEE65CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t SipUssdSession::handleTransactionError(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  char v10;

  if (*a3 == a1[82])
  {
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(a1 + 82), (__int128 *)__p);
    v6 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v7 = (unint64_t *)((char *)__p[1] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v4 = a1[77];
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v4 + 8))(v4, __p, 1);
  if (v10 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 192))(a1);
}

void sub_1BEE65DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipUssdSession::removeClientTransaction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13[2];
  __int128 v14;

  v4 = *a2;
  if (*a2 == *(_QWORD *)(a1 + 656))
  {
    v14 = 0uLL;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 656, &v14);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v4 = *a2;
  }
  v8 = (std::__shared_weak_count *)a2[1];
  v13[0] = v4;
  v13[1] = (uint64_t)v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  SipSessionInterface::removeClientTransaction((uint64_t **)a1, v13);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BEE65EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipUssdSession::handleTimer(int *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  const char *v20;
  size_t v21;
  uint64_t v23;
  std::string __p;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _OWORD v29[3];

  memset(v29, 0, sizeof(v29));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v25, (_QWORD *)a1 + 22);
  if (v25)
    v4 = v25 + 104;
  else
    v4 = 0;
  v27 = v4;
  v28 = v26;
  v25 = 0;
  v26 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "handleTimer");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v29, &v27, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v26;
  if (v26)
  {
    v9 = (unint64_t *)&v26->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(int *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"SipUssdSession::handleTimer", 27);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  v12 = a2[23];
  if ((v12 & 0x80u) == 0)
    v13 = a2[23];
  else
    v13 = *((_QWORD *)a2 + 1);
  if (v13 != 17)
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v29);
  if ((v12 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "UssdResponseTimer", *((_QWORD *)a2 + 1)))
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v29);
    goto LABEL_27;
  }
  if (!a2[23])
  {
LABEL_27:
    v15 = *(_QWORD *)a1;
    if (a1[163] > 2)
    {
      v18 = (*(uint64_t (**)(int *))(v15 + 64))(a1);
      (*(void (**)(int *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"ignoring timer ", 15);
      *(_BYTE *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, const char *))(*(_QWORD *)v18 + 32))(v18, "UssdResponseTimer");
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" in state ", 10);
      *(_BYTE *)(v18 + 17) = 0;
      v19 = a1[163] - 1;
      if (v19 > 2)
        v20 = "Uninitialized";
      else
        v20 = off_1E78BDB40[v19];
      v21 = strlen(v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)v20, v21);
      *(_BYTE *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v18 + 17) = 0;
    }
    else
    {
      v16 = (*(uint64_t (**)(int *))(v15 + 48))(a1);
      (*(void (**)(int *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"no response from USSD server", 28);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v16 + 17) = 0;
      v17 = *((_QWORD *)a1 + 77);
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v17 + 8))(v17, &__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      SipUssdSession::cancelSession((SipUssdSession *)a1);
      ImsResult::~ImsResult((ImsResult *)&v23);
    }
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v29);
  }
  v14 = "UssdResponseTimer";
  while (*a2 == *(unsigned __int8 *)v14)
  {
    ++a2;
    ++v14;
    if (!--v12)
      goto LABEL_27;
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v29);
}

void sub_1BEE66254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  if (a23 < 0)
    operator delete(__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v24 - 80);
  _Unwind_Resume(a1);
}

void SipUssdSession::cancelSession(SipUssdSession *this)
{
  __asm { BR              X10 }
}

double sub_1BEE662E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 64))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"SipUssdSession::cancelSession: StateUninitialized: no op", 56);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_QWORD *)v0 = &off_1E78B7238;
  *(_QWORD *)(v0 + 8) = &_bambiDomain;
  *(_DWORD *)(v0 + 16) = 0;
  return result;
}

void sub_1BEE6642C()
{
  uint64_t v0;
  SipUssdSession *v1;
  uint64_t v2;

  v2 = (*(uint64_t (**)(SipUssdSession *))(*(_QWORD *)v1 + 64))(v1);
  (*(void (**)(SipUssdSession *, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"SipUssdSession::cancelSession: StateUnconfirmed: sendCancel...", 62);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  SipUssdSession::sendCancel(v1, v0);
}

uint64_t SipUssdSession::printSessionInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

void SipUssdSession::sendBye(SipUssdSession *this@<X0>, uint64_t a2@<X8>)
{
  SipRequest *RequestInDialog;
  _QWORD *v5;
  const ImsResult *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  int v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  RequestInDialog = SipDialog::createRequestInDialog(*((_QWORD *)this + 30), (const std::string *)&SipRequest::kMethodBye, 0);
  v16 = 0;
  v17 = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 30);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  SipDialog::sendRequest(v5, RequestInDialog, (uint64_t)__p, &v16);
  if (v12 < 0)
    operator delete(__p[0]);
  if (RequestInDialog)
    (*(void (**)(SipRequest *))(*(_QWORD *)RequestInDialog + 8))(RequestInDialog);
  if (v16)
  {
    SipUssdSession::setState((unsigned __int8 *)this, 3);
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    v11 = 0x40000000;
    v6 = (const ImsResult *)ImsResult::operator<<<char [27]>((uint64_t)__p, "unable to send BYE request");
    ImsResult::ImsResult((ImsResult *)a2, v6);
    ImsResult::~ImsResult((ImsResult *)__p);
  }
  v7 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BEE66608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v15 - 48);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [27]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEE666C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipUssdSession::sendCancel(SipUssdSession *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  const ImsResult *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  _QWORD v17[2];
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v4 = *((_QWORD *)this + 82);
  if (v4)
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    v5 = (_QWORD *)*((_QWORD *)this + 30);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 83);
    v15 = v4;
    v16 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9.n128_f64[0] = SipDialog::cancelInviteRequest(v5, &v15, 0, a2);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    SipUssdSession::setState((unsigned __int8 *)this, 3);
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16)))
    {
      (*(void (**)(SipUssdSession *))(*(_QWORD *)this + 192))(this);
    }
  }
  else
  {
    v13 = (*(uint64_t (**)(SipUssdSession *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(SipUssdSession *, uint64_t))(*(_QWORD *)this + 16))(this, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"no INVITE transaction to cancel", 31);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(SipUssdSession *))(*(_QWORD *)this + 192))(this);
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v17[0] = &off_1E78B7238;
    v17[1] = &_bambiDomain;
    v18 = 1073741826;
    v14 = (const ImsResult *)ImsResult::operator<<<char [32]>((uint64_t)v17, "no INVITE transaction to cancel");
    ImsResult::ImsResult((ImsResult *)a2, v14);
    ImsResult::~ImsResult((ImsResult *)v17);
  }
}

void sub_1BEE66874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SipUssdSession::desiredServices(std::__shared_weak_count *this)
{
  ImsPrefs *v1;
  void **AddServicesToUssdSessionsKey;
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  SipStack *v9;
  std::__shared_weak_count *v10;

  SipSessionInterface::stack(this, &v9);
  v1 = (ImsPrefs *)SipStack::prefs(v9);
  AddServicesToUssdSessionsKey = (void **)ImsPrefs::getAddServicesToUssdSessionsKey(v1);
  v3 = ImsPrefs::prefWithKey(v1, AddServicesToUssdSessionsKey);
  if (v3)
    v4 = (*(uint64_t (**)(void *))(*(_QWORD *)v3 + 40))(v3);
  else
    v4 = *((_BYTE *)AddServicesToUssdSessionsKey + 57) != 0;
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1BEE66950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSessionInterface::localSdp(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t SipSessionInterface::handleRequest()
{
  return 0;
}

double SipSessionInterface::fillCommonRequestHeaders@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t SipSessionInterface::desiredServices(SipSessionInterface *this)
{
  return 0;
}

uint64_t SipUssdSession::terminated(SipUssdSession *this)
{
  return 0;
}

_QWORD *std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78BDA50;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78BDA50;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78BDA50;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78BDA50;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEE66BA8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<SipUssdSession::startSession(void)::$_0,std::allocator<SipUssdSession::startSession(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78BDAD0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78BDAD0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78BDAD0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78BDAD0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEE66E10(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipUssdSession::sendInfo(SipUssdData const&)::$_0,std::allocator<SipUssdSession::sendInfo(SipUssdData const&)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_SipUssdSession_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(kUssdSdp, "v=0\r\no=- 2987933615 2987933615 IN IP6 5555::aaa:bbb:ccc:ddd\r\ns=-\r\nc=IN IP6 5555::aaa:bbb:ccc:ddd\r\nt=0 0\r\nm=audio 0 RTP/AVP 97 96\r\na=rtpmap:97 AMR/8000\r\na=fmtp:97 mode-set=0,2,5,7; maxframes=2\r\n"
    "a=rtpmap:96 telephone-event/8000\r\n");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], kUssdSdp, &dword_1BEDF4000);
}

void IBISipLogger::IBISipLogger(IBISipLogger *this, IMSCallManager *a2, BambiClient *a3)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.sip.logger");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *(_QWORD *)this = &off_1E78BDB68;
  *((_QWORD *)this + 13) = &unk_1E78BDCB0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 17) = &unk_1E78BDCE0;
  *((_BYTE *)this + 144) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_BYTE *)this + 192) = 1;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = a3;
  *((_QWORD *)this + 23) = a2;
}

void sub_1BEE66F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IBISipLogger::~IBISipLogger(IBISipLogger *this)
{
  NSObject *v2;

  *(_QWORD *)this = &off_1E78BDB68;
  *((_QWORD *)this + 13) = &unk_1E78BDCB0;
  *((_QWORD *)this + 17) = &unk_1E78BDCE0;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  v2 = *((_QWORD *)this + 19);
  if (v2)
    dispatch_release(v2);
  *((_QWORD *)this + 13) = &unk_1E78BDE98;
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  IBISipLogger::~IBISipLogger(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t IBISipLogger::start(IBISipLogger *this, char a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD *)this;
    if (*((_BYTE *)this + 192))
      return (*(uint64_t (**)(IBISipLogger *))(v3 + 80))(this);
    v5 = (*(uint64_t (**)(IBISipLogger *))(v3 + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
    v6 = *(_QWORD **)(v5 + 8);
    v7 = "Baseband is currently not available: skip start";
    v8 = 47;
  }
  else
  {
    v5 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
    v6 = *(_QWORD **)(v5 + 8);
    v7 = "No Baseband for architecture: skip start";
    v8 = 40;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  return 0;
}

uint64_t `non-virtual thunk to'IBISipLogger::start(IBISipLogger *this, char a2)
{
  return IBISipLogger::start((IBISipLogger *)((char *)this - 104), a2);
}

uint64_t IBISipLogger::start(IBISipLogger *this)
{
  uint64_t v3;
  dispatch_queue_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  ice::Client **v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  ice::Client *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  NSObject *object;
  __int128 v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  void *__p;
  std::__shared_weak_count *v31;
  char v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (!*((_BYTE *)this + 144))
  {
    v3 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"initializing IBISipLogger", 25);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (!*((_QWORD *)this + 19))
    {
      v4 = dispatch_queue_create("IBISipLogger", 0);
      v5 = *((_QWORD *)this + 19);
      *((_QWORD *)this + 19) = v4;
      if (v5)
        dispatch_release(v5);
    }
    v33 = 0;
    v34 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "IBISipLogger");
    ctu::LogServer::create();
    if (v32 < 0)
      operator delete(__p);
    if (v33)
    {
      v6 = (std::__shared_weak_count *)operator new(0x30uLL);
      v6->__shared_owners_ = 0;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BDEC8;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CFD00;
      v6[1].__shared_owners_ = (uint64_t)&unk_1E78CFD50;
      v6[1].__shared_weak_owners_ = (uint64_t)this;
      v28 = v6 + 1;
      v29 = v6;
      __p = 0;
      v31 = 0;
      ctu::LogServer::addWriter();
      if (v29)
      {
        p_shared_owners = &v29->__shared_owners_;
        do
          v8 = __ldaxr((unint64_t *)p_shared_owners);
        while (__stlxr(v8 - 1, (unint64_t *)p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v9 = v31;
      if (v31)
      {
        v10 = (unint64_t *)&v31->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    v12 = *((_QWORD *)this + 19);
    object = v12;
    if (v12)
      dispatch_retain(v12);
    std::string::basic_string[abi:ne180100]<0>(&__p, "IBISipLogger");
    v25 = v34;
    if (v34)
    {
      v13 = (unint64_t *)&v34->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    ice::Client::create();
    v15 = (ice::Client **)((char *)this + 160);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 160, &v27);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v32 < 0)
      operator delete(__p);
    if (object)
      dispatch_release(object);
    v21 = *v15;
    __p = &__block_literal_global_0;
    ice::Client::setEventHandler<void({block_pointer})(void)>((uint64_t)v21, 0, (uint64_t *)&__p);
    ice::Client::start(*v15);
    *((_BYTE *)this + 144) = 1;
    v22 = v34;
    if (v34)
    {
      v23 = (unint64_t *)&v34->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  return 1;
}

void sub_1BEE67430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v21 - 48);
  _Unwind_Resume(a1);
}

void sub_1BEE67498(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  JUMPOUT(0x1BEE67490);
}

void ice::Client::setEventHandler<void({block_pointer})(void)>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v3;
  void *v4;
  void *aBlock;

  aBlock = 0;
  ice::detail::wrapEventCallback<void>(*a3, &aBlock);
  v3 = aBlock;
  if (aBlock)
    v3 = _Block_copy(aBlock);
  v4 = v3;
  ice::Client::regEventHandlerInternal();
  if (v4)
    _Block_release(v4);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1BEE6752C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a10)
    _Block_release(a10);
  _Unwind_Resume(exception_object);
}

void ___ZN12IBISipLogger5startEv_block_invoke()
{
  uint64_t v0;
  void *__p[2];
  char v2;
  void *v3[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(v3, "ibiclient");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v0 = ImsLogger::debug(ims::_logger, (uint64_t)v3, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v0 + 8), (uint64_t)"IBISipLogger ICE client started", 31);
  *(_BYTE *)(v0 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v0 + 64))(v0, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v0 + 17) = 0;
  if (v2 < 0)
    operator delete(__p[0]);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_1BEE67618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'IBISipLogger::start(IBISipLogger *this)
{
  IBISipLogger::start((IBISipLogger *)((char *)this - 104));
  return 1;
}

void IBISipLogger::stop(IBISipLogger *this)
{
  if (*((_BYTE *)this + 144))
  {
    *((_BYTE *)this + 144) = 0;
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 20);
  }
}

void `non-virtual thunk to'IBISipLogger::stop(IBISipLogger *this)
{
  if (*((_BYTE *)this + 40))
  {
    *((_BYTE *)this + 40) = 0;
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 7);
  }
}

uint64_t IBISipLogger::eventIdForSipResponse(IBISipLogger *this, const SipResponse *a2)
{
  int v2;
  int v4;
  _DWORD *v5;
  int v6;
  char *v7;
  __int128 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type size;
  std::string *p_s1;
  const char *v14;
  uint64_t v15;
  std::string::size_type v16;
  std::string *v17;
  const char *v18;
  unsigned int v19;
  std::string *v20;
  const char *v21;
  unsigned int v22;
  std::string __s1;

  v2 = (int)a2;
  v4 = *((_DWORD *)this + 22);
  v5 = SipMessage::header<SipCSeqHeader>((uint64_t)this);
  if (v5)
    v6 = v5[15];
  else
    v6 = 0;
  memset(&__s1, 0, sizeof(__s1));
  v7 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)this);
  v8 = (__int128 *)(v7 + 64);
  if (!v7)
    v8 = &ims::kEmptyString;
  if (*((char *)v8 + 23) < 0)
    std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  else
    __s1 = *(std::string *)v8;
  v9 = *((_DWORD *)this + 22);
  if (v9 - 100 <= 0x63)
  {
    if (v4 == 180)
      v10 = 9;
    else
      v10 = 0;
    goto LABEL_60;
  }
  if (v9 - 200 <= 0x63)
  {
    v11 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      size = __s1.__r_.__value_.__l.__size_;
    if (size == 6)
    {
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
          p_s1 = &__s1;
          v14 = "INVITE";
          while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v14)
          {
            p_s1 = (std::string *)((char *)p_s1 + 1);
            ++v14;
            if (!--v11)
              goto LABEL_37;
          }
          goto LABEL_59;
        }
LABEL_37:
        if (v2)
          v19 = 13;
        else
          v19 = 12;
        if (v6 == 1)
          v10 = v19;
        else
          v10 = 19;
        goto LABEL_60;
      }
      if (!memcmp(__s1.__r_.__value_.__l.__data_, "INVITE", __s1.__r_.__value_.__l.__size_))
        goto LABEL_37;
    }
    goto LABEL_59;
  }
  if (v9 < 0x12C)
    goto LABEL_59;
  v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    v16 = __s1.__r_.__value_.__l.__size_;
  if (v16 == 5)
  {
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__s1.__r_.__value_.__l.__data_, "PRACK", __s1.__r_.__value_.__l.__size_))
        goto LABEL_59;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      v20 = &__s1;
      v21 = "PRACK";
      v10 = 38;
      while (v20->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v21)
      {
        v20 = (std::string *)((char *)v20 + 1);
        ++v21;
        if (!--v15)
          goto LABEL_60;
      }
      goto LABEL_59;
    }
    v10 = 38;
    goto LABEL_60;
  }
  if (v16 != 6)
  {
LABEL_59:
    v10 = 0;
    goto LABEL_60;
  }
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, "INVITE", __s1.__r_.__value_.__l.__size_))
      goto LABEL_59;
  }
  else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
  {
    v17 = &__s1;
    v18 = "INVITE";
    while (v17->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v18)
    {
      v17 = (std::string *)((char *)v17 + 1);
      ++v18;
      if (!--v15)
        goto LABEL_50;
    }
    goto LABEL_59;
  }
LABEL_50:
  if (v4 == 487)
    v22 = 0;
  else
    v22 = 22;
  if (v4 == 408)
    v22 = 23;
  if (v6 == 1)
    v10 = v22;
  else
    v10 = 25;
LABEL_60:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return v10;
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t IBISipLogger::eventIdForSipRequest(uint64_t a1, SipReferEventPackage *a2, int a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t result;
  unsigned int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  BOOL v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  SipMessageEncodingMap *v29;
  uint64_t v30;
  const void **v31;
  const char *v32;
  _DWORD *v33;
  int v34;

  v6 = (unsigned __int8 *)(*(uint64_t (**)(SipReferEventPackage *))(*(_QWORD *)a2 + 112))(a2);
  v7 = v6[23];
  if ((v7 & 0x80u) == 0)
    v8 = v6[23];
  else
    v8 = *((_QWORD *)v6 + 1);
  if (v8 != 6)
    goto LABEL_12;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v6, "INVITE", *((_QWORD *)v6 + 1)))
      goto LABEL_12;
LABEL_22:
    result = (uint64_t)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
    if (result)
    {
      if (a3)
        v15 = 6;
      else
        v15 = 5;
      if (*(_DWORD *)(result + 60) == 1)
        return v15;
      else
        return 0;
    }
    return result;
  }
  if (!v6[23])
    goto LABEL_22;
  v9 = "INVITE";
  while (*v6 == *(unsigned __int8 *)v9)
  {
    ++v6;
    ++v9;
    if (!--v7)
      goto LABEL_22;
  }
LABEL_12:
  v10 = (unsigned __int8 *)(*(uint64_t (**)(SipReferEventPackage *))(*(_QWORD *)a2 + 112))(a2);
  v11 = v10[23];
  if ((v11 & 0x80u) == 0)
    v12 = v10[23];
  else
    v12 = *((_QWORD *)v10 + 1);
  if (v12 != 6)
    goto LABEL_30;
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v10, "UPDATE", *((_QWORD *)v10 + 1)))
      goto LABEL_30;
LABEL_40:
    v20 = a3 == 0;
    v21 = 27;
    goto LABEL_54;
  }
  if (!v10[23])
    goto LABEL_40;
  v13 = "UPDATE";
  while (*v10 == *(unsigned __int8 *)v13)
  {
    ++v10;
    ++v13;
    if (!--v11)
      goto LABEL_40;
  }
LABEL_30:
  v16 = (unsigned __int8 *)(*(uint64_t (**)(SipReferEventPackage *))(*(_QWORD *)a2 + 112))(a2);
  v17 = v16[23];
  if ((v17 & 0x80u) == 0)
    v18 = v16[23];
  else
    v18 = *((_QWORD *)v16 + 1);
  if (v18 == 5)
  {
    if ((v17 & 0x80) == 0)
    {
      if (v16[23])
      {
        v19 = "PRACK";
        while (*v16 == *(unsigned __int8 *)v19)
        {
          ++v16;
          ++v19;
          if (!--v17)
            goto LABEL_53;
        }
        goto LABEL_42;
      }
      goto LABEL_53;
    }
    if (!memcmp(*(const void **)v16, "PRACK", *((_QWORD *)v16 + 1)))
    {
LABEL_53:
      v20 = a3 == 0;
      v21 = 31;
LABEL_54:
      if (v20)
        return 0;
      else
        return v21;
    }
  }
LABEL_42:
  v22 = (unsigned __int8 *)(*(uint64_t (**)(SipReferEventPackage *))(*(_QWORD *)a2 + 112))(a2);
  v23 = v22[23];
  if ((v23 & 0x80u) == 0)
    v24 = v22[23];
  else
    v24 = *((_QWORD *)v22 + 1);
  if (v24 != 6)
    return 0;
  if ((v23 & 0x80) == 0)
  {
    if (v22[23])
    {
      v25 = "NOTIFY";
      while (*v22 == *(unsigned __int8 *)v25)
      {
        ++v22;
        ++v25;
        if (!--v23)
          goto LABEL_51;
      }
      return 0;
    }
LABEL_51:
    if (!a3)
      return 0;
LABEL_59:
    v27 = (unsigned __int8 *)SipMessage::header<SipEventHeader>((uint64_t)a2);
    if (!v27)
      return 0;
    v28 = v27[127];
    v29 = (SipMessageEncodingMap *)*((_QWORD *)v27 + 14);
    v30 = (v28 & 0x80u) == 0 ? v27[127] : *((_QWORD *)v27 + 14);
    if (v30 != 5)
      return 0;
    v31 = (const void **)(v27 + 104);
    if ((v28 & 0x80) != 0)
    {
      if (memcmp(*v31, "refer", (size_t)v29))
        return 0;
    }
    else if (v27[127])
    {
      v32 = "refer";
      while (*(unsigned __int8 *)v31 == *(unsigned __int8 *)v32)
      {
        v31 = (const void **)((char *)v31 + 1);
        ++v32;
        if (!--v28)
          goto LABEL_71;
      }
      return 0;
    }
LABEL_71:
    v33 = SipReferEventPackage::decodeSipFragmentFromNotify(a2, (const SipRequest *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 288), v29);
    if (v33)
    {
      v34 = v33[22];
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
      if (v34 == 200)
        return 42;
    }
    return 0;
  }
  v26 = memcmp(*(const void **)v22, "NOTIFY", *((_QWORD *)v22 + 1));
  result = 0;
  if (!v26 && (a3 & 1) != 0)
    goto LABEL_59;
  return result;
}

void *SipMessage::header<SipEventHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "Event");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

uint64_t IBISipLogger::logAriRequest(IBISipLogger *this, AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  void *__p[2];
  char v26;

  v4 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"-------------------------------------------------------------------------", 73);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"event id: ", 10);
  *(_BYTE *)(v5 + 17) = 0;
  v6 = **((_DWORD **)a2 + 18);
  switch(v6)
  {
    case 19:
      v7 = "IBI_SIP_EVENT_REINVITE_EST";
      break;
    case 20:
    case 21:
    case 24:
    case 26:
    case 28:
    case 29:
    case 30:
    case 33:
    case 34:
    case 36:
    case 37:
    case 39:
    case 40:
    case 41:
LABEL_14:
      v7 = "unknown";
      break;
    case 22:
      v7 = "IBI_SIP_EVENT_SESSION_FAILURE";
      break;
    case 23:
      v7 = "IBI_SIP_EVENT_SESSION_FAILIRE_TIMEOUT";
      break;
    case 25:
      v7 = "IBI_SIP_EVENT_REINVITE_FAILIRE";
      break;
    case 27:
      v7 = "IBI_SIP_EVENT_INCOMING_UPDATE";
      break;
    case 31:
      v7 = "IBI_SIP_EVENT_PRACK";
      break;
    case 32:
      v7 = "IBI_SIP_EVENT_INCOMING_SESSION_REFER";
      break;
    case 35:
      v7 = "IBI_SIP_EVENT_FINAL_REFER";
      break;
    case 38:
      v7 = "IBI_SIP_EVENT_PRACK_FAILURE";
      break;
    case 42:
      v7 = "IBI_SIP_EVENT_REFER_NOTIFY_OK";
      break;
    default:
      v7 = "IBI_SIP_EVENT_NA";
      switch(v6)
      {
        case 0:
          goto LABEL_19;
        case 5:
          v7 = "IBI_SIP_EVENT_OUTGOING_SESSION";
          break;
        case 6:
          v7 = "IBI_SIP_EVENT_INCOMING_SESSION";
          break;
        case 9:
          v7 = "IBI_SIP_EVENT_RINGING";
          break;
        case 12:
          v7 = "IBI_SIP_EVENT_INCOMING_SESSION_EST";
          break;
        case 13:
          v7 = "IBI_SIP_EVENT_OUTGOING_SESSION_EST";
          break;
        default:
          goto LABEL_14;
      }
      break;
  }
LABEL_19:
  std::string::basic_string[abi:ne180100]<0>(__p, v7);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 32))(v5, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v26 < 0)
    operator delete(__p[0]);
  v8 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"direction: ", 11);
  *(_BYTE *)(v8 + 17) = 0;
  if (**((_DWORD **)a2 + 9) == 1)
    v9 = "incoming";
  else
    v9 = "outgoing";
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)v9, 8);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v10 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"sdp present: ", 13);
  *(_BYTE *)(v10 + 17) = 0;
  v11 = **((_DWORD **)a2 + 10);
  if (v11)
    v12 = "true";
  else
    v12 = "false";
  if (v11)
    v13 = 4;
  else
    v13 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)v12, v13);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  v14 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"message id: ", 12);
  *(_BYTE *)(v14 + 17) = 0;
  v15 = **((int **)a2 + 11);
  if (v15 > 0xE)
    v16 = "unknown";
  else
    v16 = off_1E78BDFF0[v15];
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 32))(v14, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (v26 < 0)
    operator delete(__p[0]);
  v17 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"response code: ", 15);
  *(_BYTE *)(v17 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v17 + 17) = 0;
  v18 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"SIP call id: ", 13);
  *(_BYTE *)(v18 + 17) = 0;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(__p, *((char **)a2 + 15), *((char **)a2 + 16), *((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15));
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v18 + 32))(v18, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v18 + 17) = 0;
  if (v26 < 0)
    operator delete(__p[0]);
  v19 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"app call id: ", 13);
  *(_BYTE *)(v19 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v19 + 17) = 0;
  v20 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"call type: ", 11);
  *(_BYTE *)(v20 + 17) = 0;
  v21 = **((int **)a2 + 19);
  if (v21 > 7)
    v22 = "unknown";
  else
    v22 = off_1E78BE068[v21];
  std::string::basic_string[abi:ne180100]<0>(__p, v22);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v20 + 32))(v20, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v20 + 17) = 0;
  if (v26 < 0)
    operator delete(__p[0]);
  v23 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"-------------------------------------------------------------------------", 73);
  *(_BYTE *)(v23 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v23 + 17) = 0;
  return result;
}

void sub_1BEE68340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t IBISipLogger::logSipRequest(IBISipLogger *a1, uint64_t *a2, void *a3, int a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BYTE v28[72];
  _BYTE v29[72];
  _QWORD v30[2];
  _QWORD v31[2];
  int v32;
  int v33;
  uint64_t v34[24];
  _BYTE v35[64];
  uint64_t v36[10];
  uint64_t v37[6];
  uint64_t v38;

  v38 = 0;
  memset(v37, 0, sizeof(v37));
  memset(v36, 0, sizeof(v36));
  memset(v35, 0, sizeof(v35));
  AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK((AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *)v35);
  memset(v34, 0, 184);
  AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK::ARI_IBISipMessageInjectToCpTrace_SDK((AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK *)v34);
  v33 = 0;
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (v8)
  {
    v12 = *(_DWORD *)(v8 + 4076);
    if (!v9)
      goto LABEL_12;
  }
  else
  {
    v12 = 0;
    if (!v9)
      goto LABEL_12;
  }
  v13 = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_12:
  v33 = v12;
  fillCommonFields<AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK>(*((_BYTE **)a1 + 23), *((_QWORD *)a1 + 22), a3, a4, (uint64_t)v35);
  v15 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"logSipRequest: using instance ", 30);
  *(_BYTE *)(v15 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  fillCommonFields<AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK>(*((_BYTE **)a1 + 23), *((_QWORD *)a1 + 22), a3, a4, (uint64_t)v34);
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(v36, &v33);
  v16 = (std::__shared_weak_count *)a2[1];
  v31[0] = *a2;
  v31[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v32 = IBISipLogger::eventIdForSipRequest((uint64_t)v31, (SipReferEventPackage *)a3, a4);
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(v37, &v32);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v32 = 0;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(&v38, &v32);
  v21 = *a2;
  v22 = (std::__shared_weak_count *)a2[1];
  v30[0] = v21;
  v30[1] = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v32 = IBISipLogger::eventIdForSipRequest((uint64_t)v30, (SipReferEventPackage *)a3, a4);
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(&v34[17], &v32);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  IBISipLogger::logAriRequest(a1, (AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *)v35);
  IBISipLogger::send<AriSdk::ARI_AriACK_SDK,AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK>((uint64_t)v29, a1, (uint64_t)v35);
  ImsResult::~ImsResult((ImsResult *)v29);
  IBISipLogger::send<AriSdk::ARI_AriACK_SDK,AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK>((uint64_t)v28, a1);
  ImsResult::~ImsResult((ImsResult *)v28);
  MEMORY[0x1C3B86A64](v34);
  return MEMORY[0x1C3B86AB8](v35);
}

void sub_1BEE68664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  MEMORY[0x1C3B86A64](&a33);
  MEMORY[0x1C3B86AB8](&a57);
  _Unwind_Resume(a1);
}

void fillCommonFields<AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK>(_BYTE *a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v10;
  char *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  char *v23;
  std::__shared_weak_count *v24;
  SDPModel *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string::size_type v28;
  char *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  const void **v35;
  __int128 *v36;
  uint64_t v37;
  char *v38;
  __int128 *v39;
  char *v40;
  unsigned __int8 *v41;
  void *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  _BOOL4 v47;
  SipSession *v48;
  int v49;
  char *v50;
  unsigned __int8 *v51;
  std::string *v52;
  size_t v53;
  std::string::size_type v54;
  std::string::size_type v55;
  std::string::size_type v56;
  char *p_p;
  size_t v58;
  char *v59;
  _BYTE *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *size;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  _BOOL4 v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  char *v85;
  uint64_t v86;
  SDPModel *v87;
  std::__shared_weak_count *v88;
  void *__p;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::string v92;
  std::string v93;
  unsigned __int8 v94;
  uint64_t v95;
  std::__shared_weak_count *v96;

  v95 = 0;
  v96 = 0;
  v94 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v93, "ibi");
  std::string::basic_string[abi:ne180100]<0>(&v92, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)&v93, (uint64_t)&v92);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"logging ", 8);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)a3 + 48))(&__p, a3);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (SHIBYTE(v91) < 0)
    operator delete(__p);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  v11 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a3);
  if (v11)
    v12 = (__int128 *)(v11 + 64);
  else
    v12 = &ims::kEmptyString;
  v13 = IMSCallManager::callInfoForSipCallId((uint64_t)a1, (uint64_t)v12);
  v14 = v13;
  if (v13)
  {
    v16 = *(_QWORD *)(v13 + 128);
    v15 = *(std::__shared_weak_count **)(v13 + 136);
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    v19 = v96;
    v95 = v16;
    v96 = v15;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = 0;
    v94 = *(_BYTE *)(v14 + 40);
    goto LABEL_20;
  }
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = 0uLL;
  (*(void (**)(std::string *__return_ptr, _BYTE *))(*(_QWORD *)a1 + 216))(&v93, a1);
  v28 = v93.__r_.__value_.__r.__words[0];
  if (!v93.__r_.__value_.__r.__words[0])
    goto LABEL_131;
  v29 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a3);
  if (v29)
    v30 = (__int128 *)(v29 + 64);
  else
    v30 = &ims::kEmptyString;
  v31 = *(unsigned __int8 *)(v28 + 487);
  if ((v31 & 0x80u) == 0)
    v32 = *(unsigned __int8 *)(v28 + 487);
  else
    v32 = *(_QWORD *)(v28 + 472);
  v33 = *((unsigned __int8 *)v30 + 23);
  v34 = (char)v33;
  if ((v33 & 0x80u) != 0)
    v33 = *((_QWORD *)v30 + 1);
  if (v32 != v33)
    goto LABEL_131;
  v35 = (const void **)(v28 + 464);
  if (v34 >= 0)
    v36 = v30;
  else
    v36 = *(__int128 **)v30;
  if ((v31 & 0x80) == 0)
  {
    if (*(_BYTE *)(v28 + 487))
    {
      while (*(unsigned __int8 *)v35 == *(unsigned __int8 *)v36)
      {
        v35 = (const void **)((char *)v35 + 1);
        v36 = (__int128 *)((char *)v36 + 1);
        if (!--v31)
          goto LABEL_137;
      }
      goto LABEL_131;
    }
LABEL_137:
    std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](&v95, (uint64_t)v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
    v22 = 1;
    goto LABEL_132;
  }
  if (!memcmp(*v35, v36, *(_QWORD *)(v28 + 472)))
    goto LABEL_137;
LABEL_131:
  v22 = 0;
LABEL_132:
  size = (std::__shared_weak_count *)v93.__r_.__value_.__l.__size_;
  if (v93.__r_.__value_.__l.__size_)
  {
    v75 = (unint64_t *)(v93.__r_.__value_.__l.__size_ + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_20:
  LODWORD(v93.__r_.__value_.__l.__data_) = 1;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a5 + 152), &v93);
  v23 = SipMessage::body<SipSdpBody>((uint64_t)a3);
  if (v23)
  {
    v25 = (SDPModel *)*((_QWORD *)v23 + 1);
    v24 = (std::__shared_weak_count *)*((_QWORD *)v23 + 2);
    v87 = v25;
    v88 = v24;
    if (v24)
    {
      v26 = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  else
  {
    v25 = 0;
    v87 = 0;
    v88 = 0;
  }
  memset(&v93, 0, sizeof(v93));
  if (v95)
  {
    std::string::operator=(&v93, (const std::string *)(v95 + 488));
    v37 = v95;
    if ((*(_DWORD *)(v95 + 440) & 0xFFFFFFFE) == 2)
    {
      if (v25)
      {
        if (SDPModel::isHeld(v25))
          LODWORD(v92.__r_.__value_.__l.__data_) = 2;
        else
          LODWORD(v92.__r_.__value_.__l.__data_) = 3;
        AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a5 + 152), &v92);
      }
      goto LABEL_79;
    }
    v48 = *(SipSession **)(v95 + 384);
    if (v48)
    {
      if ((SipSession::confirmed(v48) & 1) != 0)
        goto LABEL_75;
      v37 = v95;
    }
    if (!*(_BYTE *)(v37 + 1488))
    {
      v68 = *(std::__shared_weak_count **)(v37 + 360);
      if (v68)
      {
        v69 = std::__shared_weak_count::lock(v68);
        v90 = v69;
        if (v69)
        {
          __p = *(void **)(v37 + 352);
          if (!__p)
          {
            v77 = v69;
            v78 = 0;
            goto LABEL_156;
          }
          v70 = v95;
          v84 = 0;
          v85 = 0;
          v71 = *(std::__shared_weak_count **)(v95 + 360);
          if (v71)
          {
            v72 = std::__shared_weak_count::lock(v71);
            v85 = (char *)v72;
            if (v72)
            {
              v73 = *(_QWORD *)(v70 + 352);
              v84 = (void *)v73;
              goto LABEL_145;
            }
          }
          else
          {
            v72 = 0;
          }
          v73 = 0;
LABEL_145:
          if (*(char *)(v73 + 4159) < 0)
            std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)(v73 + 4136), *(_QWORD *)(v73 + 4144));
          else
            v92 = *(std::string *)(v73 + 4136);
          v78 = (unint64_t)BambiClient::callCountForStack(a2, (unsigned __int8 *)&v92) > 1;
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v92.__r_.__value_.__l.__data_);
          if (v72)
          {
            v79 = (unint64_t *)&v72->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v77 = v90;
          if (!v90)
          {
LABEL_159:
            if (v78)
              goto LABEL_162;
            goto LABEL_75;
          }
LABEL_156:
          v81 = (unint64_t *)&v77->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
            if (v78)
            {
LABEL_162:
              LODWORD(v92.__r_.__value_.__l.__data_) = 4;
              AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a5 + 152), &v92);
              goto LABEL_79;
            }
            goto LABEL_75;
          }
          goto LABEL_159;
        }
      }
    }
LABEL_75:
    if (v22)
    {
      LODWORD(v92.__r_.__value_.__l.__data_) = 5;
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a5 + 152), &v92);
    }
    goto LABEL_79;
  }
  v38 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a3);
  if (v38)
    v39 = (__int128 *)(v38 + 64);
  else
    v39 = &ims::kEmptyString;
  ims::makeAwdCallId((uint64_t)v39, &v92);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  v93 = v92;
  v40 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a3);
  if (v40)
    v41 = (unsigned __int8 *)(v40 + 64);
  else
    v41 = (unsigned __int8 *)&ims::kEmptyString;
  if (!isCallRelatedMethod(v41))
  {
    LODWORD(v92.__r_.__value_.__l.__data_) = 0;
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a5 + 152), &v92);
    goto LABEL_79;
  }
  if (v94 == 255)
  {
    if (v42)
    {
      v43 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(_QWORD *)v42 + 112))(v42);
      v44 = v43[23];
      v45 = (v44 & 0x80u) == 0 ? v43[23] : *((_QWORD *)v43 + 1);
      if (v45 == 6)
      {
        if ((v44 & 0x80) != 0)
        {
          v47 = memcmp(*(const void **)v43, "INVITE", *((_QWORD *)v43 + 1)) == 0;
        }
        else
        {
          if (v43[23])
          {
            v46 = "INVITE";
            while (*v43 == *(unsigned __int8 *)v46)
            {
              ++v43;
              ++v46;
              if (!--v44)
                goto LABEL_70;
            }
            goto LABEL_79;
          }
LABEL_70:
          v47 = 1;
        }
        if (v47 && a4)
          v94 = a1[200] + 1;
      }
    }
  }
LABEL_79:
  if (a4)
    v49 = 1;
  else
    v49 = 2;
  LODWORD(v92.__r_.__value_.__l.__data_) = v49;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a5 + 72), &v92);
  v92.__r_.__value_.__s.__data_[0] = v87 != 0;
  AriSdk::Tlv<int>::operator=<BOOL &,void>((uint64_t *)(a5 + 80), (unsigned __int8 *)&v92);
  v50 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a3);
  if (v50)
    v51 = (unsigned __int8 *)(v50 + 64);
  else
    v51 = (unsigned __int8 *)&ims::kEmptyString;
  LODWORD(v92.__r_.__value_.__l.__data_) = messageIdForMethod(v51);
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a5 + 88), &v92);
  LODWORD(v92.__r_.__value_.__l.__data_) = 0;
  AriSdk::Tlv<unsigned short>::operator=<unsigned int,void>((uint64_t *)(a5 + 96), &v92);
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v93;
  else
    v52 = (std::string *)v93.__r_.__value_.__r.__words[0];
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
  else
    v53 = v93.__r_.__value_.__l.__size_;
  memset(&v92, 0, sizeof(v92));
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((char *)&v92, (char *)v52, (char *)v52 + v53, v53);
  LOBYTE(__p) = 0;
  v54 = v92.__r_.__value_.__l.__size_;
  v55 = v92.__r_.__value_.__r.__words[0];
  v56 = v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0];
  if (v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0] > 0x80)
  {
    if (v56 != 129)
    {
      v54 = v92.__r_.__value_.__r.__words[0] + 129;
      v92.__r_.__value_.__l.__size_ = v92.__r_.__value_.__r.__words[0] + 129;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(&v92, 129 - v56, &__p);
    v54 = v92.__r_.__value_.__l.__size_;
    v55 = v92.__r_.__value_.__r.__words[0];
  }
  __p = (void *)(v54 - v55);
  AriSdk::Tlv<unsigned char>::operator=<unsigned long,void>((uint64_t *)(a5 + 112), &__p);
  AriSdk::TlvArray<unsigned char,129ul>::operator=((char **)(a5 + 120), &v92.__r_.__value_.__l.__data_);
  AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)(a5 + 104), &v94);
  __p = 0;
  v90 = 0;
  v91 = 0;
  SipMessage::encodeToString((SipMessage *)a3, (uint64_t)&__p);
  if (v91 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  if (v91 >= 0)
    v58 = HIBYTE(v91);
  else
    v58 = (size_t)v90;
  v85 = 0;
  v86 = 0;
  v84 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((char *)&v84, p_p, &p_p[v58], v58);
  LOBYTE(v83) = 0;
  v60 = v84;
  v59 = v85;
  v61 = v85 - (_BYTE *)v84;
  if ((unint64_t)(v85 - (_BYTE *)v84) > 0x7D0)
  {
    if (v61 != 2001)
    {
      v59 = (char *)v84 + 2001;
      v85 = (char *)v84 + 2001;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(&v84, 2001 - v61, &v83);
    v60 = v84;
    v59 = v85;
  }
  v83 = v59 - v60;
  AriSdk::Tlv<unsigned short>::operator=<unsigned long,void>((uint64_t *)(a5 + 160), &v83);
  AriSdk::TlvArray<unsigned char,2001ul>::operator=((char **)(a5 + 168), (char **)&v84);
  if (v84)
  {
    v85 = (char *)v84;
    operator delete(v84);
  }
  if (SHIBYTE(v91) < 0)
    operator delete(__p);
  if (v92.__r_.__value_.__r.__words[0])
  {
    v92.__r_.__value_.__l.__size_ = v92.__r_.__value_.__r.__words[0];
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  v62 = v88;
  if (v88)
  {
    v63 = (unint64_t *)&v88->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v96;
  if (v96)
  {
    v66 = (unint64_t *)&v96->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
}

void sub_1BEE68F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a34 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 - 104);
  _Unwind_Resume(a1);
}

void fillCommonFields<AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK>(_BYTE *a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v10;
  char *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  char *v23;
  std::__shared_weak_count *v24;
  SDPModel *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string::size_type v28;
  char *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  const void **v35;
  __int128 *v36;
  uint64_t v37;
  char *v38;
  __int128 *v39;
  char *v40;
  unsigned __int8 *v41;
  void *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  _BOOL4 v47;
  SipSession *v48;
  int v49;
  char *v50;
  unsigned __int8 *v51;
  std::string *v52;
  size_t v53;
  std::string::size_type v54;
  std::string::size_type v55;
  std::string::size_type v56;
  char *p_p;
  size_t v58;
  char *v59;
  _BYTE *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *size;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  _BOOL4 v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  char *v85;
  uint64_t v86;
  SDPModel *v87;
  std::__shared_weak_count *v88;
  void *__p;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::string v92;
  std::string v93;
  unsigned __int8 v94;
  uint64_t v95;
  std::__shared_weak_count *v96;

  v95 = 0;
  v96 = 0;
  v94 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v93, "ibi");
  std::string::basic_string[abi:ne180100]<0>(&v92, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)&v93, (uint64_t)&v92);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"logging ", 8);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)a3 + 48))(&__p, a3);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (SHIBYTE(v91) < 0)
    operator delete(__p);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  v11 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a3);
  if (v11)
    v12 = (__int128 *)(v11 + 64);
  else
    v12 = &ims::kEmptyString;
  v13 = IMSCallManager::callInfoForSipCallId((uint64_t)a1, (uint64_t)v12);
  v14 = v13;
  if (v13)
  {
    v16 = *(_QWORD *)(v13 + 128);
    v15 = *(std::__shared_weak_count **)(v13 + 136);
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    v19 = v96;
    v95 = v16;
    v96 = v15;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = 0;
    v94 = *(_BYTE *)(v14 + 40);
    goto LABEL_20;
  }
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = 0uLL;
  (*(void (**)(std::string *__return_ptr, _BYTE *))(*(_QWORD *)a1 + 216))(&v93, a1);
  v28 = v93.__r_.__value_.__r.__words[0];
  if (!v93.__r_.__value_.__r.__words[0])
    goto LABEL_131;
  v29 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a3);
  if (v29)
    v30 = (__int128 *)(v29 + 64);
  else
    v30 = &ims::kEmptyString;
  v31 = *(unsigned __int8 *)(v28 + 487);
  if ((v31 & 0x80u) == 0)
    v32 = *(unsigned __int8 *)(v28 + 487);
  else
    v32 = *(_QWORD *)(v28 + 472);
  v33 = *((unsigned __int8 *)v30 + 23);
  v34 = (char)v33;
  if ((v33 & 0x80u) != 0)
    v33 = *((_QWORD *)v30 + 1);
  if (v32 != v33)
    goto LABEL_131;
  v35 = (const void **)(v28 + 464);
  if (v34 >= 0)
    v36 = v30;
  else
    v36 = *(__int128 **)v30;
  if ((v31 & 0x80) == 0)
  {
    if (*(_BYTE *)(v28 + 487))
    {
      while (*(unsigned __int8 *)v35 == *(unsigned __int8 *)v36)
      {
        v35 = (const void **)((char *)v35 + 1);
        v36 = (__int128 *)((char *)v36 + 1);
        if (!--v31)
          goto LABEL_137;
      }
      goto LABEL_131;
    }
LABEL_137:
    std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](&v95, (uint64_t)v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
    v22 = 1;
    goto LABEL_132;
  }
  if (!memcmp(*v35, v36, *(_QWORD *)(v28 + 472)))
    goto LABEL_137;
LABEL_131:
  v22 = 0;
LABEL_132:
  size = (std::__shared_weak_count *)v93.__r_.__value_.__l.__size_;
  if (v93.__r_.__value_.__l.__size_)
  {
    v75 = (unint64_t *)(v93.__r_.__value_.__l.__size_ + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_20:
  LODWORD(v93.__r_.__value_.__l.__data_) = 1;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a5 + 144), &v93);
  v23 = SipMessage::body<SipSdpBody>((uint64_t)a3);
  if (v23)
  {
    v25 = (SDPModel *)*((_QWORD *)v23 + 1);
    v24 = (std::__shared_weak_count *)*((_QWORD *)v23 + 2);
    v87 = v25;
    v88 = v24;
    if (v24)
    {
      v26 = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  else
  {
    v25 = 0;
    v87 = 0;
    v88 = 0;
  }
  memset(&v93, 0, sizeof(v93));
  if (v95)
  {
    std::string::operator=(&v93, (const std::string *)(v95 + 488));
    v37 = v95;
    if ((*(_DWORD *)(v95 + 440) & 0xFFFFFFFE) == 2)
    {
      if (v25)
      {
        if (SDPModel::isHeld(v25))
          LODWORD(v92.__r_.__value_.__l.__data_) = 2;
        else
          LODWORD(v92.__r_.__value_.__l.__data_) = 3;
        AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a5 + 144), &v92);
      }
      goto LABEL_79;
    }
    v48 = *(SipSession **)(v95 + 384);
    if (v48)
    {
      if ((SipSession::confirmed(v48) & 1) != 0)
        goto LABEL_75;
      v37 = v95;
    }
    if (!*(_BYTE *)(v37 + 1488))
    {
      v68 = *(std::__shared_weak_count **)(v37 + 360);
      if (v68)
      {
        v69 = std::__shared_weak_count::lock(v68);
        v90 = v69;
        if (v69)
        {
          __p = *(void **)(v37 + 352);
          if (!__p)
          {
            v77 = v69;
            v78 = 0;
            goto LABEL_156;
          }
          v70 = v95;
          v84 = 0;
          v85 = 0;
          v71 = *(std::__shared_weak_count **)(v95 + 360);
          if (v71)
          {
            v72 = std::__shared_weak_count::lock(v71);
            v85 = (char *)v72;
            if (v72)
            {
              v73 = *(_QWORD *)(v70 + 352);
              v84 = (void *)v73;
              goto LABEL_145;
            }
          }
          else
          {
            v72 = 0;
          }
          v73 = 0;
LABEL_145:
          if (*(char *)(v73 + 4159) < 0)
            std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)(v73 + 4136), *(_QWORD *)(v73 + 4144));
          else
            v92 = *(std::string *)(v73 + 4136);
          v78 = (unint64_t)BambiClient::callCountForStack(a2, (unsigned __int8 *)&v92) > 1;
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v92.__r_.__value_.__l.__data_);
          if (v72)
          {
            v79 = (unint64_t *)&v72->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v77 = v90;
          if (!v90)
          {
LABEL_159:
            if (v78)
              goto LABEL_162;
            goto LABEL_75;
          }
LABEL_156:
          v81 = (unint64_t *)&v77->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
            if (v78)
            {
LABEL_162:
              LODWORD(v92.__r_.__value_.__l.__data_) = 4;
              AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a5 + 144), &v92);
              goto LABEL_79;
            }
            goto LABEL_75;
          }
          goto LABEL_159;
        }
      }
    }
LABEL_75:
    if (v22)
    {
      LODWORD(v92.__r_.__value_.__l.__data_) = 5;
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a5 + 144), &v92);
    }
    goto LABEL_79;
  }
  v38 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a3);
  if (v38)
    v39 = (__int128 *)(v38 + 64);
  else
    v39 = &ims::kEmptyString;
  ims::makeAwdCallId((uint64_t)v39, &v92);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  v93 = v92;
  v40 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a3);
  if (v40)
    v41 = (unsigned __int8 *)(v40 + 64);
  else
    v41 = (unsigned __int8 *)&ims::kEmptyString;
  if (!isCallRelatedMethod(v41))
  {
    LODWORD(v92.__r_.__value_.__l.__data_) = 0;
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a5 + 144), &v92);
    goto LABEL_79;
  }
  if (v94 == 255)
  {
    if (v42)
    {
      v43 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(_QWORD *)v42 + 112))(v42);
      v44 = v43[23];
      v45 = (v44 & 0x80u) == 0 ? v43[23] : *((_QWORD *)v43 + 1);
      if (v45 == 6)
      {
        if ((v44 & 0x80) != 0)
        {
          v47 = memcmp(*(const void **)v43, "INVITE", *((_QWORD *)v43 + 1)) == 0;
        }
        else
        {
          if (v43[23])
          {
            v46 = "INVITE";
            while (*v43 == *(unsigned __int8 *)v46)
            {
              ++v43;
              ++v46;
              if (!--v44)
                goto LABEL_70;
            }
            goto LABEL_79;
          }
LABEL_70:
          v47 = 1;
        }
        if (v47 && a4)
          v94 = a1[200] + 1;
      }
    }
  }
LABEL_79:
  if (a4)
    v49 = 1;
  else
    v49 = 2;
  LODWORD(v92.__r_.__value_.__l.__data_) = v49;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a5 + 64), &v92);
  v92.__r_.__value_.__s.__data_[0] = v87 != 0;
  AriSdk::Tlv<int>::operator=<BOOL &,void>((uint64_t *)(a5 + 72), (unsigned __int8 *)&v92);
  v50 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a3);
  if (v50)
    v51 = (unsigned __int8 *)(v50 + 64);
  else
    v51 = (unsigned __int8 *)&ims::kEmptyString;
  LODWORD(v92.__r_.__value_.__l.__data_) = messageIdForMethod(v51);
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a5 + 80), &v92);
  LODWORD(v92.__r_.__value_.__l.__data_) = 0;
  AriSdk::Tlv<unsigned short>::operator=<unsigned int,void>((uint64_t *)(a5 + 88), &v92);
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v93;
  else
    v52 = (std::string *)v93.__r_.__value_.__r.__words[0];
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
  else
    v53 = v93.__r_.__value_.__l.__size_;
  memset(&v92, 0, sizeof(v92));
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((char *)&v92, (char *)v52, (char *)v52 + v53, v53);
  LOBYTE(__p) = 0;
  v54 = v92.__r_.__value_.__l.__size_;
  v55 = v92.__r_.__value_.__r.__words[0];
  v56 = v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0];
  if (v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0] > 0x80)
  {
    if (v56 != 129)
    {
      v54 = v92.__r_.__value_.__r.__words[0] + 129;
      v92.__r_.__value_.__l.__size_ = v92.__r_.__value_.__r.__words[0] + 129;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(&v92, 129 - v56, &__p);
    v54 = v92.__r_.__value_.__l.__size_;
    v55 = v92.__r_.__value_.__r.__words[0];
  }
  __p = (void *)(v54 - v55);
  AriSdk::Tlv<unsigned char>::operator=<unsigned long,void>((uint64_t *)(a5 + 104), &__p);
  AriSdk::TlvArray<unsigned char,129ul>::operator=((char **)(a5 + 112), &v92.__r_.__value_.__l.__data_);
  AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)(a5 + 96), &v94);
  __p = 0;
  v90 = 0;
  v91 = 0;
  SipMessage::encodeToString((SipMessage *)a3, (uint64_t)&__p);
  if (v91 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  if (v91 >= 0)
    v58 = HIBYTE(v91);
  else
    v58 = (size_t)v90;
  v85 = 0;
  v86 = 0;
  v84 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((char *)&v84, p_p, &p_p[v58], v58);
  LOBYTE(v83) = 0;
  v60 = v84;
  v59 = v85;
  v61 = v85 - (_BYTE *)v84;
  if ((unint64_t)(v85 - (_BYTE *)v84) > 0x7D0)
  {
    if (v61 != 2001)
    {
      v59 = (char *)v84 + 2001;
      v85 = (char *)v84 + 2001;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(&v84, 2001 - v61, &v83);
    v60 = v84;
    v59 = v85;
  }
  v83 = v59 - v60;
  AriSdk::Tlv<unsigned short>::operator=<unsigned long,void>((uint64_t *)(a5 + 152), &v83);
  AriSdk::TlvArray<unsigned char,2001ul>::operator=((char **)(a5 + 160), (char **)&v84);
  if (v84)
  {
    v85 = (char *)v84;
    operator delete(v84);
  }
  if (SHIBYTE(v91) < 0)
    operator delete(__p);
  if (v92.__r_.__value_.__r.__words[0])
  {
    v92.__r_.__value_.__l.__size_ = v92.__r_.__value_.__r.__words[0];
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  v62 = v88;
  if (v88)
  {
    v63 = (unint64_t *)&v88->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v96;
  if (v96)
  {
    v66 = (unint64_t *)&v96->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
}

void sub_1BEE69924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a34 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 - 104);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(uint64_t *a1, _DWORD *a2)
{
  _DWORD *v4;
  uint64_t v5;

  v4 = (_DWORD *)operator new();
  *v4 = *a2;
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x1C3B87100](v5, 0x1000C4052888210);
  return a1;
}

double IBISipLogger::send<AriSdk::ARI_AriACK_SDK,AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK>(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  double result;
  _QWORD v12[5];
  _OWORD v13[2];
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  const void *v18;

  v5 = *((_QWORD *)a2 + 20);
  if (v5 && a2[192])
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = ___ZN12IBISipLogger4sendIN6AriSdk14ARI_AriACK_SDKENS1_38ARI_IBISipMsgInjectToCpIMSTraceReq_SDKEEE9ImsResultRT0__block_invoke;
    v12[3] = &__block_descriptor_tmp_102;
    v12[4] = a2;
    v18 = 0;
    ice::detail::wrapCallback<void>((uint64_t)v12, &v18);
    LODWORD(v16) = 0;
    if (!*(_QWORD *)(a3 + 64))
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a3 + 64), &v16);
    memset(v13, 0, sizeof(v13));
    v14 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v16, (_QWORD *)(v5 + 8));
    ice::SendMsgBaseProxy::SendMsgBaseProxy();
    v7 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v15 = v18;
    v18 = 0;
    ice::SendMsgBaseProxy::callback();
    if (v15)
      _Block_release(v15);
    if (v18)
      _Block_release(v18);
    MEMORY[0x1C3B86680](v13);
  }
  else
  {
    v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 64))(a2);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: skip send", 78);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
  }
  *(_QWORD *)a1 = &off_1E78B7238;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void sub_1BEE69CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  const void *v9;
  const void *v10;
  va_list va;

  va_start(va, a7);
  v9 = *(const void **)(v7 - 64);
  if (v9)
    _Block_release(v9);
  MEMORY[0x1C3B86680](va);
  v10 = *(const void **)(v7 - 40);
  if (v10)
    _Block_release(v10);
  _Unwind_Resume(a1);
}

double IBISipLogger::send<AriSdk::ARI_AriACK_SDK,AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  double result;
  _QWORD v10[5];
  _OWORD v11[2];
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  const void *v16;

  v4 = *((_QWORD *)a2 + 20);
  if (v4 && a2[192])
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = ___ZN12IBISipLogger4sendIN6AriSdk14ARI_AriACK_SDKENS1_36ARI_IBISipMessageInjectToCpTrace_SDKEEE9ImsResultRT0__block_invoke;
    v10[3] = &__block_descriptor_tmp_105;
    v10[4] = a2;
    v16 = 0;
    ice::detail::wrapCallback<void>((uint64_t)v10, &v16);
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v14, (_QWORD *)(v4 + 8));
    ice::SendMsgBaseProxy::SendMsgBaseProxy();
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v13 = v16;
    v16 = 0;
    ice::SendMsgBaseProxy::callback();
    if (v13)
      _Block_release(v13);
    if (v16)
      _Block_release(v16);
    MEMORY[0x1C3B86680](v11);
  }
  else
  {
    v8 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 64))(a2);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: skip send", 78);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
  }
  *(_QWORD *)a1 = &off_1E78B7238;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void sub_1BEE69EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  const void *v9;
  const void *v10;
  va_list va;

  va_start(va, a7);
  v9 = *(const void **)(v7 - 64);
  if (v9)
    _Block_release(v9);
  MEMORY[0x1C3B86680](va);
  v10 = *(const void **)(v7 - 40);
  if (v10)
    _Block_release(v10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'IBISipLogger::logSipRequest(uint64_t a1, uint64_t *a2, void *a3, int a4)
{
  return IBISipLogger::logSipRequest((IBISipLogger *)(a1 - 136), a2, a3, a4);
}

uint64_t IBISipLogger::logSipResponse(IBISipLogger *a1, uint64_t *a2, _DWORD *a3, const SipResponse *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE v17[72];
  _BYTE v18[72];
  int v19;
  int v20;
  uint64_t v21[24];
  _BYTE v22[64];
  uint64_t v23[4];
  uint64_t v24[6];
  uint64_t v25[6];
  uint64_t v26;

  v26 = 0;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, sizeof(v22));
  AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK((AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *)v22);
  memset(v21, 0, 184);
  AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK::ARI_IBISipMessageInjectToCpTrace_SDK((AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK *)v21);
  v20 = 0;
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (v8)
  {
    v12 = *(_DWORD *)(v8 + 4076);
    if (!v9)
      goto LABEL_12;
  }
  else
  {
    v12 = 0;
    if (!v9)
      goto LABEL_12;
  }
  v13 = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_12:
  v20 = v12;
  fillCommonFields<AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK>(*((_BYTE **)a1 + 23), *((_QWORD *)a1 + 22), a3, (int)a4, (uint64_t)v22);
  v15 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"logSipResponse: using instance ", 31);
  *(_BYTE *)(v15 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  fillCommonFields<AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK>(*((_BYTE **)a1 + 23), *((_QWORD *)a1 + 22), a3, (int)a4, (uint64_t)v21);
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(v23, &v20);
  v19 = a3[22];
  AriSdk::Tlv<unsigned short>::operator=<unsigned int,void>(v24, &v19);
  v19 = IBISipLogger::eventIdForSipResponse((IBISipLogger *)a3, a4);
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(v25, &v19);
  v19 = 0;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(&v26, &v19);
  v19 = a3[22];
  AriSdk::Tlv<unsigned short>::operator=<unsigned int,void>(&v21[11], &v19);
  v19 = IBISipLogger::eventIdForSipResponse((IBISipLogger *)a3, a4);
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(&v21[17], &v19);
  IBISipLogger::logAriRequest(a1, (AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *)v22);
  IBISipLogger::send<AriSdk::ARI_AriACK_SDK,AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK>((uint64_t)v18, a1, (uint64_t)v22);
  ImsResult::~ImsResult((ImsResult *)v18);
  IBISipLogger::send<AriSdk::ARI_AriACK_SDK,AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK>((uint64_t)v17, a1);
  ImsResult::~ImsResult((ImsResult *)v17);
  MEMORY[0x1C3B86A64](v21);
  return MEMORY[0x1C3B86AB8](v22);
}

void sub_1BEE6A1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  MEMORY[0x1C3B86A64](&a29);
  MEMORY[0x1C3B86AB8](v29 - 256);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<unsigned short>::operator=<unsigned int,void>(uint64_t *a1, _DWORD *a2)
{
  _WORD *v4;
  uint64_t v5;

  v4 = (_WORD *)operator new();
  *v4 = *a2;
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x1C3B87100](v5, 0x1000C40BDFB0063);
  return a1;
}

uint64_t `non-virtual thunk to'IBISipLogger::logSipResponse(uint64_t a1, uint64_t *a2, _DWORD *a3, const SipResponse *a4)
{
  return IBISipLogger::logSipResponse((IBISipLogger *)(a1 - 136), a2, a3, a4);
}

uint64_t IBISipLogger::sendSessionStarted(_BYTE *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[11];
  int v17;
  _OWORD v18[4];
  __int128 v19;
  uint64_t v20[3];
  unsigned __int8 v21;

  v21 = a3;
  v6 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"telling baseband ", 17);
  *(_BYTE *)(v6 + 17) = 0;
  if (a3)
    v7 = "emergency ";
  else
    v7 = "";
  if (a3)
    v8 = 10;
  else
    v8 = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)v7, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"session started", 15);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  memset(v18, 0, sizeof(v18));
  AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *)v18);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v16[9] = v9;
  v16[10] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9)
    LODWORD(v9) = *(_DWORD *)(v9 + 4076);
  v17 = v9;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v19, &v17);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v17 = 0;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v19 + 1, &v17);
  v17 = 0;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(v20, &v17);
  AriSdk::Tlv<int>::operator=<BOOL &,void>(&v20[1], &v21);
  IBISipLogger::send<AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK,AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK>(a1, (uint64_t)v18, (uint64_t)v16);
  ImsResult::~ImsResult((ImsResult *)v16);
  return MEMORY[0x1C3B86C08](v18);
}

void sub_1BEE6A438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  MEMORY[0x1C3B86C08](va);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<int>::operator=<BOOL &,void>(uint64_t *a1, unsigned __int8 *a2)
{
  _DWORD *v4;
  uint64_t v5;

  v4 = (_DWORD *)operator new();
  *v4 = *a2;
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x1C3B87100](v5, 0x1000C4052888210);
  return a1;
}

double IBISipLogger::send<AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK,AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK>@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  double result;
  _QWORD v8[5];
  _QWORD *v9;
  _BYTE v10[40];

  v5 = *((_QWORD *)a1 + 20);
  if (v5 && a1[192])
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = ___ZN12IBISipLogger4sendIN6AriSdk54ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDKENS1_52ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDKEEE9ImsResultRT0__block_invoke;
    v8[3] = &__block_descriptor_tmp_106;
    v8[4] = a1;
    v9 = v8;
    ice::Client::send<AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK,void({block_pointer})(unsigned char *,unsigned int)>(v5, a2, (uint64_t *)&v9, (uint64_t)v10);
    MEMORY[0x1C3B86680](v10);
  }
  else
  {
    v6 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: skip send", 78);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
  }
  *(_QWORD *)a3 = &off_1E78B7238;
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t IBISipLogger::sendSessionEnded(_BYTE *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[11];
  int v17;
  _OWORD v18[4];
  __int128 v19;
  uint64_t v20[3];
  unsigned __int8 v21;

  v21 = a3;
  v6 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"telling baseband ", 17);
  *(_BYTE *)(v6 + 17) = 0;
  if (a3)
    v7 = "emergency ";
  else
    v7 = "";
  if (a3)
    v8 = 10;
  else
    v8 = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)v7, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"session ended", 13);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  memset(v18, 0, sizeof(v18));
  AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *)v18);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v16[9] = v9;
  v16[10] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9)
    LODWORD(v9) = *(_DWORD *)(v9 + 4076);
  v17 = v9;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v19, &v17);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v17 = 0;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v19 + 1, &v17);
  v17 = 1;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(v20, &v17);
  AriSdk::Tlv<int>::operator=<BOOL &,void>(&v20[1], &v21);
  IBISipLogger::send<AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK,AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK>(a1, (uint64_t)v18, (uint64_t)v16);
  ImsResult::~ImsResult((ImsResult *)v16);
  return MEMORY[0x1C3B86C08](v18);
}

void sub_1BEE6A7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  MEMORY[0x1C3B86C08](va);
  _Unwind_Resume(a1);
}

uint64_t IBISipLogger::sendSessionDropped(_BYTE *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[11];
  int v17;
  _OWORD v18[4];
  __int128 v19;
  uint64_t v20[3];
  unsigned __int8 v21;

  v21 = a3;
  v6 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"telling baseband ", 17);
  *(_BYTE *)(v6 + 17) = 0;
  if (a3)
    v7 = "emergency ";
  else
    v7 = "";
  if (a3)
    v8 = 10;
  else
    v8 = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)v7, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"session dropped", 15);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  memset(v18, 0, sizeof(v18));
  AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *)v18);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v16[9] = v9;
  v16[10] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9)
    LODWORD(v9) = *(_DWORD *)(v9 + 4076);
  v17 = v9;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v19, &v17);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v17 = 0;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v19 + 1, &v17);
  v17 = 4;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(v20, &v17);
  AriSdk::Tlv<int>::operator=<BOOL &,void>(&v20[1], &v21);
  IBISipLogger::send<AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK,AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK>(a1, (uint64_t)v18, (uint64_t)v16);
  ImsResult::~ImsResult((ImsResult *)v16);
  return MEMORY[0x1C3B86C08](v18);
}

void sub_1BEE6A98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  MEMORY[0x1C3B86C08](va);
  _Unwind_Resume(a1);
}

void IBISipLogger::logEarlyMTSessionRequestedEvent(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  BOOL isWifi;
  BOOL v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE v19[72];
  uint64_t v20;
  std::__shared_weak_count *v21;
  int v22;
  _OWORD v23[4];
  __int128 v24;
  __int128 v25;

  v4 = *a2;
  v5 = *(std::__shared_weak_count **)(*a2 + 360);
  if (v5 && (v6 = std::__shared_weak_count::lock(v5)) != 0)
  {
    v7 = v6;
    isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*(_QWORD *)(v4 + 352) + 3136));
    v9 = isWifi;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
      if (isWifi)
        return;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v9)
        return;
    }
  }
  else if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)0xC40))
  {
    return;
  }
  v12 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"telling baseband about incoming session attempt", 47);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  v24 = 0u;
  v25 = 0u;
  memset(v23, 0, sizeof(v23));
  AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *)v23);
  v13 = *a2;
  v20 = 0;
  v21 = 0;
  v14 = *(std::__shared_weak_count **)(v13 + 360);
  if (v14)
  {
    v15 = std::__shared_weak_count::lock(v14);
    v21 = v15;
    if (v15)
    {
      v16 = *(_QWORD *)(v13 + 352);
      v20 = v16;
      if (v16)
        LODWORD(v16) = *(_DWORD *)(v16 + 4076);
      goto LABEL_15;
    }
  }
  else
  {
    v15 = 0;
  }
  LODWORD(v16) = 0;
LABEL_15:
  v22 = v16;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v24, &v22);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v22 = 0;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v24 + 1, &v22);
  v22 = 2;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v25, &v22);
  LOBYTE(v22) = 0;
  AriSdk::Tlv<int>::operator=<BOOL &,void>((uint64_t *)&v25 + 1, (unsigned __int8 *)&v22);
  IBISipLogger::send<AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK,AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK>(a1, (uint64_t)v23, (uint64_t)v19);
  ImsResult::~ImsResult((ImsResult *)v19);
  MEMORY[0x1C3B86C08](v23);
}

void sub_1BEE6ABB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  MEMORY[0x1C3B86C08](va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IBISipLogger::logEarlyMTSessionRequestedEvent(uint64_t a1, uint64_t *a2)
{
  IBISipLogger::logEarlyMTSessionRequestedEvent((_BYTE *)(a1 - 136), a2);
}

void IBISipLogger::logSessionRequestedEvent(BambiClient **a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  BOOL isWifi;
  BOOL v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _BYTE v25[72];
  uint64_t v26;
  std::__shared_weak_count *v27;
  int v28;
  _OWORD v29[4];
  __int128 v30;
  uint64_t v31[3];
  BOOL v32;

  if (!a4)
    return;
  v6 = *a2;
  v7 = *(std::__shared_weak_count **)(*a2 + 360);
  if (v7 && (v8 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v9 = v8;
    isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*(_QWORD *)(v6 + 352) + 3136));
    v11 = isWifi;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (v13)
    {
      if (isWifi)
        return;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v11)
        return;
    }
  }
  else if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)0xC40))
  {
    return;
  }
  if ((unint64_t)BambiClient::callCount(a1[22]) >= 2)
  {
    v14 = (*((uint64_t (**)(BambiClient **))*a1 + 8))(a1);
    (*((void (**)(BambiClient **, uint64_t))*a1 + 2))(a1, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"call count = ", 13);
    *(_BYTE *)(v14 + 17) = 0;
    BambiClient::callCount(a1[22]);
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)". We already told baseband we're in a call.", 43);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    return;
  }
  v15 = *(_QWORD *)(*a2 + 512);
  v32 = v15 != 0;
  if (v15)
    v16 = "emergency ";
  else
    v16 = "";
  if (v15)
    v17 = 10;
  else
    v17 = 0;
  v18 = (*((uint64_t (**)(BambiClient **))*a1 + 8))(a1);
  (*((void (**)(BambiClient **, uint64_t))*a1 + 2))(a1, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"telling baseband about ", 23);
  *(_BYTE *)(v18 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)v16, v17);
  *(_BYTE *)(v18 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"session attempt", 15);
  *(_BYTE *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v18 + 17) = 0;
  v30 = 0u;
  *(_OWORD *)v31 = 0u;
  memset(v29, 0, sizeof(v29));
  AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *)v29);
  v19 = *a2;
  v26 = 0;
  v27 = 0;
  v20 = *(std::__shared_weak_count **)(v19 + 360);
  if (v20)
  {
    v21 = std::__shared_weak_count::lock(v20);
    v27 = v21;
    if (v21)
    {
      v22 = *(_QWORD *)(v19 + 352);
      v26 = v22;
      if (v22)
        LODWORD(v22) = *(_DWORD *)(v22 + 4076);
      goto LABEL_26;
    }
  }
  else
  {
    v21 = 0;
  }
  LODWORD(v22) = 0;
LABEL_26:
  v28 = v22;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v30, &v28);
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v28 = 0;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v30 + 1, &v28);
  v28 = 2;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(v31, &v28);
  AriSdk::Tlv<int>::operator=<BOOL &,void>(&v31[1], (unsigned __int8 *)&v32);
  IBISipLogger::send<AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK,AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK>(a1, (uint64_t)v29, (uint64_t)v25);
  ImsResult::~ImsResult((ImsResult *)v25);
  MEMORY[0x1C3B86C08](v29);
}

void sub_1BEE6AEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  MEMORY[0x1C3B86C08](va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IBISipLogger::logSessionRequestedEvent(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  IBISipLogger::logSessionRequestedEvent((BambiClient **)(a1 - 136), a2, 0, a4);
}

void IBISipLogger::logSessionConfirmedEvent(BambiClient **a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  BOOL isWifi;
  BOOL v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  if (BambiClient::callCount(a1[22]) != 1)
    goto LABEL_12;
  v4 = *a2;
  v5 = *(std::__shared_weak_count **)(*a2 + 360);
  if (!v5 || (v6 = std::__shared_weak_count::lock(v5)) == 0)
  {
    if (!ims::AccessNetwork::isWifi((ims::AccessNetwork *)0xC40))
      goto LABEL_8;
LABEL_12:
    v15 = (*((uint64_t (**)(BambiClient **))*a1 + 8))(a1);
    (*((void (**)(BambiClient **, uint64_t))*a1 + 2))(a1, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"call count = ", 13);
    *(_BYTE *)(v15 + 17) = 0;
    BambiClient::callCount(a1[22]);
    std::ostream::operator<<();
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)". We already told baseband we're in a call.", 43);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    return;
  }
  v7 = v6;
  isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*(_QWORD *)(v4 + 352) + 3136));
  v9 = isWifi;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v9)
      goto LABEL_8;
    goto LABEL_12;
  }
  if (isWifi)
    goto LABEL_12;
LABEL_8:
  v12 = *a2;
  v18 = 0;
  v19 = 0;
  v13 = *(std::__shared_weak_count **)(v12 + 360);
  if (v13)
  {
    v14 = std::__shared_weak_count::lock(v13);
    v19 = v14;
    if (v14)
      v18 = *(_QWORD *)(v12 + 352);
  }
  else
  {
    v14 = 0;
  }
  IBISipLogger::sendSessionStarted(a1, &v18, *(_QWORD *)(*a2 + 512) != 0);
  if (v14)
  {
    v16 = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BEE6B0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IBISipLogger::logSessionConfirmedEvent(uint64_t a1, uint64_t *a2)
{
  IBISipLogger::logSessionConfirmedEvent((BambiClient **)(a1 - 136), a2);
}

uint64_t IBISipLogger::logSessionTerminationEvent(IBISipLogger *this, const BambiCallSessionTerminationBaseEvent *a2)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33[2];
  uint64_t v34[2];
  std::string v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;

  v4 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"logSessionTerminationEvent() for ", 33);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = *((_DWORD *)a2 + 10);
  if (v5 > 37)
    v5 = 10;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, reasonStrings + 24 * v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"...", 3);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (!v6)
  {
    v10 = 0;
    v38 = 0;
    v39 = 0;
    goto LABEL_15;
  }
  v7 = (_QWORD *)*((_QWORD *)a2 + 2);
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  v38 = 0;
  v10 = std::__shared_weak_count::lock(v6);
  v39 = v10;
  if (!v10)
  {
    std::__shared_weak_count::__release_weak(v6);
LABEL_15:
    v18 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"this call is null: no op", 24);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (!v10)
      return 0;
    goto LABEL_25;
  }
  v38 = v7;
  std::__shared_weak_count::__release_weak(v6);
  if (!v7)
    goto LABEL_15;
  v11 = v7[64];
  v36 = 0;
  v37 = 0;
  v12 = (std::__shared_weak_count *)v7[45];
  if (!v12 || (v13 = std::__shared_weak_count::lock(v12), (v37 = v13) == 0) || (v14 = v7[44], (v36 = v14) == 0))
  {
    v19 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"this sipStack is null: no op", 28);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_18:
    *(_BYTE *)(v19 + 17) = 0;
    goto LABEL_19;
  }
  v15 = v13;
  v16 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"this [sipStack simInstance] = [", 31);
  *(_BYTE *)(v16 + 17) = 0;
  v17 = (_OWORD *)(v14 + 4136);
  if (*(char *)(v14 + 4159) < 0)
  {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v14 + 4136), *(_QWORD *)(v14 + 4144));
  }
  else
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *v17;
    v35.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 4152);
  }
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 32))(v16, &v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" ", 1);
  *(_BYTE *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v16 + 17) = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v14 + 3136)))
  {
    v19 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"this call was on wifi: no op", 28);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_18;
  }
  v26 = *((_QWORD *)this + 22);
  if (*(char *)(v14 + 4159) < 0)
  {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v14 + 4136), *(_QWORD *)(v14 + 4144));
  }
  else
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *v17;
    v35.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 4152);
  }
  v27 = BambiClient::activeCallCountForStack(v26, v11 != 0, (unsigned __int8 *)&v35);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (v27)
  {
    v19 = (*(uint64_t (**)(IBISipLogger *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(IBISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"this sipStack still has ", 24);
    *(_BYTE *)(v19 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" other active calls: no op", 26);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_18;
  }
  v28 = *((_DWORD *)a2 + 10);
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  if (v28 == 20)
  {
    v34[0] = v14;
    v34[1] = (uint64_t)v15;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
    IBISipLogger::sendSessionDropped(this, v34, v11 != 0);
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
  }
  else
  {
    v33[0] = v14;
    v33[1] = (uint64_t)v15;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    IBISipLogger::sendSessionEnded(this, v33, v11 != 0);
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
  }
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_19:
  v20 = v37;
  if (v37)
  {
    v21 = (unint64_t *)&v37->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v10 = v39;
  if (v39)
  {
LABEL_25:
    v23 = (unint64_t *)&v10->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return 0;
}

void sub_1BEE6B690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'IBISipLogger::logSessionTerminationEvent(IBISipLogger *this, const BambiCallSessionTerminationBaseEvent *a2)
{
  IBISipLogger::logSessionTerminationEvent((IBISipLogger *)((char *)this - 136), a2);
  return 0;
}

void IBISipLogger::logWiFiHandover(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22[2];
  uint64_t v23[2];
  std::string v24;

  v6 = *a2;
  if (*a2)
  {
    v7 = *(_QWORD *)(a1 + 176);
    if (*(char *)(v6 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v6 + 4136), *(_QWORD *)(v6 + 4144));
    else
      v24 = *(std::string *)(v6 + 4136);
    v8 = BambiClient::callCountForStack(v7, (unsigned __int8 *)&v24);
    v9 = v8;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v24.__r_.__value_.__l.__data_);
      if (!v9)
        return;
    }
    else if (!v8)
    {
      return;
    }
  }
  v10 = *(_QWORD **)(*(_QWORD *)(a1 + 176) + 368);
  if (v10)
  {
    v11 = 0;
    do
    {
      if (*(_QWORD *)(v10[2] + 512))
        ++v11;
      v10 = (_QWORD *)*v10;
    }
    while (v10);
    v12 = v11 != 0;
  }
  else
  {
    v12 = 0;
  }
  v13 = *a2;
  if (a3)
  {
    v14 = (std::__shared_weak_count *)a2[1];
    v23[0] = v13;
    v23[1] = (uint64_t)v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    IBISipLogger::sendSessionEnded((_BYTE *)a1, v23, v12);
    if (v14)
    {
      v17 = (unint64_t *)&v14->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_30:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    v14 = (std::__shared_weak_count *)a2[1];
    v22[0] = v13;
    v22[1] = (uint64_t)v14;
    if (v14)
    {
      v19 = (unint64_t *)&v14->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    IBISipLogger::sendSessionStarted((_BYTE *)a1, v22, v12);
    if (v14)
    {
      v21 = (unint64_t *)&v14->__shared_owners_;
      do
        v18 = __ldaxr(v21);
      while (__stlxr(v18 - 1, v21));
      goto LABEL_30;
    }
  }
}

void sub_1BEE6B8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IBISipLogger::logWiFiHandover(uint64_t a1, uint64_t *a2, int a3)
{
  IBISipLogger::logWiFiHandover(a1 - 136, a2, a3);
}

uint64_t IBISipLogger::logRegistrationError(_BYTE *a1, uint64_t *a2, SipRegistrationNotification *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[11];
  int Retry;
  _OWORD v16[4];
  __int128 v17;
  __int128 v18;
  __int128 v19;

  result = TelephonyRadiosGetRadioVendor();
  if ((_DWORD)result == 2)
  {
    v7 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"telling baseband about registration error. Throttle for ", 56);
    *(_BYTE *)(v7 + 17) = 0;
    SipRegistrationNotification::secondsUntilNextRetry(a3);
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" seconds", 8);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    memset(v16, 0, sizeof(v16));
    AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK((AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK *)v16);
    v8 = *a2;
    v9 = (std::__shared_weak_count *)a2[1];
    v14[9] = v8;
    v14[10] = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 + 4076);
    Retry = v8;
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v17, &Retry);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    Retry = !SipRegistrationNotification::isInitialRegistration(a3);
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v17 + 1, &Retry);
    Retry = 2;
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v18, &Retry);
    Retry = 1;
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v18 + 1, &Retry);
    Retry = 0;
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v19, &Retry);
    Retry = SipRegistrationNotification::secondsUntilNextRetry(a3);
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v19 + 1, &Retry);
    IBISipLogger::send<AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK,AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK>((uint64_t)v14, a1, (uint64_t)v16);
    ImsResult::~ImsResult((ImsResult *)v14);
    return MEMORY[0x1C3B86BCC](v16);
  }
  return result;
}

void sub_1BEE6BAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  MEMORY[0x1C3B86BCC](va);
  _Unwind_Resume(a1);
}

double IBISipLogger::send<AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK,AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK>(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  double result;
  _QWORD v12[5];
  _OWORD v13[2];
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  const void *v18;

  v5 = *((_QWORD *)a2 + 20);
  if (v5 && a2[192])
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = ___ZN12IBISipLogger4sendIN6AriSdk46ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDKENS1_44ARI_IBINetDcImsRegistrationStatusInfoReq_SDKEEE9ImsResultRT0__block_invoke;
    v12[3] = &__block_descriptor_tmp_107;
    v12[4] = a2;
    v18 = 0;
    ice::detail::wrapCallback<void>((uint64_t)v12, &v18);
    LODWORD(v16) = 0;
    if (!*(_QWORD *)(a3 + 64))
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)(a3 + 64), &v16);
    memset(v13, 0, sizeof(v13));
    v14 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v16, (_QWORD *)(v5 + 8));
    ice::SendMsgBaseProxy::SendMsgBaseProxy();
    v7 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v15 = v18;
    v18 = 0;
    ice::SendMsgBaseProxy::callback();
    if (v15)
      _Block_release(v15);
    if (v18)
      _Block_release(v18);
    MEMORY[0x1C3B86680](v13);
  }
  else
  {
    v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 64))(a2);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: skip send", 78);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
  }
  *(_QWORD *)a1 = &off_1E78B7238;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void sub_1BEE6BCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  const void *v9;
  const void *v10;
  va_list va;

  va_start(va, a7);
  v9 = *(const void **)(v7 - 64);
  if (v9)
    _Block_release(v9);
  MEMORY[0x1C3B86680](va);
  v10 = *(const void **)(v7 - 40);
  if (v10)
    _Block_release(v10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'IBISipLogger::logRegistrationError(uint64_t a1, uint64_t *a2, SipRegistrationNotification *a3)
{
  return IBISipLogger::logRegistrationError((_BYTE *)(a1 - 136), a2, a3);
}

uint64_t IBISipLogger::logRegistrationRequest(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[11];
  int v15;
  _OWORD v16[4];
  __int128 v17;
  __int128 v18;
  __int128 v19;

  result = TelephonyRadiosGetRadioVendor();
  if ((_DWORD)result == 2)
  {
    v7 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"telling baseband about registration attempt", 43);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    memset(v16, 0, sizeof(v16));
    AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK((AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK *)v16);
    v8 = *a2;
    v9 = (std::__shared_weak_count *)a2[1];
    v14[9] = v8;
    v14[10] = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 + 4076);
    v15 = v8;
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v17, &v15);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v15 = *(unsigned __int8 *)(a3 + 88);
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v17 + 1, &v15);
    v15 = 2;
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v18, &v15);
    v15 = 0;
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v18 + 1, &v15);
    v15 = 1;
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v19, &v15);
    v15 = 0;
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v19 + 1, &v15);
    IBISipLogger::send<AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK,AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK>((uint64_t)v14, a1, (uint64_t)v16);
    ImsResult::~ImsResult((ImsResult *)v14);
    return MEMORY[0x1C3B86BCC](v16);
  }
  return result;
}

void sub_1BEE6BF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  MEMORY[0x1C3B86BCC](va);
  _Unwind_Resume(a1);
}

void sub_1BEE6BF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1BEE6BF44);
}

uint64_t `non-virtual thunk to'IBISipLogger::logRegistrationRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return IBISipLogger::logRegistrationRequest((_BYTE *)(a1 - 136), a2, a3);
}

uint64_t IBISipLogger::logSmsSendAttemptedEvent(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[11];
  int v13;
  _OWORD v14[4];
  __int128 v15;
  __int128 v16;

  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"telling baseband about sms attempt", 34);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v15 = 0u;
  v16 = 0u;
  memset(v14, 0, sizeof(v14));
  AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *)v14);
  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v12[9] = v5;
  v12[10] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (v5)
    LODWORD(v5) = *(_DWORD *)(v5 + 4076);
  v13 = v5;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v15, &v13);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v13 = 2;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v15 + 1, &v13);
  v13 = 2;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v16, &v13);
  LOBYTE(v13) = 0;
  AriSdk::Tlv<int>::operator=<BOOL &,void>((uint64_t *)&v16 + 1, (unsigned __int8 *)&v13);
  IBISipLogger::send<AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK,AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK>(a1, (uint64_t)v14, (uint64_t)v12);
  ImsResult::~ImsResult((ImsResult *)v12);
  return MEMORY[0x1C3B86C08](v14);
}

void sub_1BEE6C0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  MEMORY[0x1C3B86C08](va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'IBISipLogger::logSmsSendAttemptedEvent(uint64_t a1, uint64_t *a2)
{
  return IBISipLogger::logSmsSendAttemptedEvent((_BYTE *)(a1 - 136), a2);
}

uint64_t IBISipLogger::logSmsSendCompletedEvent(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[11];
  int v13;
  _OWORD v14[4];
  __int128 v15;
  __int128 v16;

  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"telling baseband about sms send finish.", 39);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v15 = 0u;
  v16 = 0u;
  memset(v14, 0, sizeof(v14));
  AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK((AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *)v14);
  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v12[9] = v5;
  v12[10] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (v5)
    LODWORD(v5) = *(_DWORD *)(v5 + 4076);
  v13 = v5;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v15, &v13);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v13 = 2;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v15 + 1, &v13);
  v13 = 1;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v16, &v13);
  LOBYTE(v13) = 0;
  AriSdk::Tlv<int>::operator=<BOOL &,void>((uint64_t *)&v16 + 1, (unsigned __int8 *)&v13);
  IBISipLogger::send<AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK,AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK>(a1, (uint64_t)v14, (uint64_t)v12);
  ImsResult::~ImsResult((ImsResult *)v12);
  return MEMORY[0x1C3B86C08](v14);
}

void sub_1BEE6C280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  MEMORY[0x1C3B86C08](va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'IBISipLogger::logSmsSendCompletedEvent(uint64_t a1, uint64_t *a2)
{
  return IBISipLogger::logSmsSendCompletedEvent((_BYTE *)(a1 - 136), a2);
}

_QWORD *IBISipLogger::logPrefix(IBISipLogger *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"IBISipLogger: ", 14);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

uint64_t IBISipLogger::setBasebandAvailable(uint64_t this, char a2)
{
  *(_BYTE *)(this + 192) = a2;
  return this;
}

std::string *IMSMetricsLogger::setDomain(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

uint64_t `non-virtual thunk to'IBISipLogger::setBasebandAvailable(uint64_t this, char a2)
{
  *(_BYTE *)(this + 56) = a2;
  return this;
}

void std::__shared_ptr_emplace<ImsLogWriter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BDEC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsLogWriter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BDEC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<ImsLogWriter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *ice::detail::wrapEventCallback<void>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke;
  aBlock[3] = &unk_1E78BDF10;
  aBlock[4] = a1;
  result = _Block_copy(aBlock);
  *a2 = result;
  return result;
}

uint64_t ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

BOOL isCallRelatedMethod(unsigned __int8 *a1)
{
  uint64_t v1;
  size_t v2;
  uint64_t v3;
  const char *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  const char *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const char *v12;
  const char *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _BOOL8 v16;
  __int128 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  char v27;
  BOOL v28;
  uint64_t v29;
  const char *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char v35;

  v1 = a1[23];
  v2 = *((_QWORD *)a1 + 1);
  if ((v1 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  if (v3 != 3)
  {
    if (v3 == 5)
    {
      if ((v1 & 0x80) != 0)
      {
        v11 = *(const void **)a1;
        v12 = "PRACK";
        return memcmp(v11, v12, v2) == 0;
      }
      if (!a1[23])
        return 1;
      v7 = "PRACK";
      v8 = a1;
      v9 = a1[23];
      while (*v8 == *(unsigned __int8 *)v7)
      {
        ++v8;
        ++v7;
        if (!--v9)
          return 1;
      }
    }
    else if (v3 == 6)
    {
      if ((v1 & 0x80) != 0)
      {
        v10 = *(const void **)a1;
        if (memcmp(*(const void **)a1, "INVITE", v2) && memcmp(v10, "UPDATE", v2))
        {
LABEL_56:
          v12 = "CANCEL";
          goto LABEL_57;
        }
      }
      else if (a1[23])
      {
        v4 = "INVITE";
        v5 = a1;
        v6 = a1[23];
        while (*v5 == *(unsigned __int8 *)v4)
        {
          ++v5;
          ++v4;
          if (!--v6)
            return 1;
        }
        v13 = "UPDATE";
        v14 = a1;
        v15 = a1[23];
        while (*v14 == *(unsigned __int8 *)v13)
        {
          ++v14;
          ++v13;
          v16 = 1;
          if (!--v15)
            return v16;
        }
        if ((v1 & 0x80) == 0)
        {
          v29 = v1 - 1;
          v30 = "CANCEL";
          do
          {
            v32 = *a1++;
            v31 = v32;
            v34 = *(unsigned __int8 *)v30++;
            v33 = v34;
            v26 = v29-- != 0;
            v35 = v26;
            v28 = v31 == v33;
            v16 = v31 == v33;
          }
          while (v28 && (v35 & 1) != 0);
          return v16;
        }
        v10 = *(const void **)a1;
        goto LABEL_56;
      }
      return 1;
    }
    return 0;
  }
  if ((v1 & 0x80) != 0)
  {
    v10 = *(const void **)a1;
    if (memcmp(*(const void **)a1, &SipRequest::kMethodAck, v2))
    {
      v12 = (const char *)&SipRequest::kMethodBye;
LABEL_57:
      v11 = v10;
      return memcmp(v11, v12, v2) == 0;
    }
    return 1;
  }
  if (!a1[23])
    return 1;
  v17 = &SipRequest::kMethodAck;
  v18 = a1;
  v19 = a1[23];
  while (*v18 == *(unsigned __int8 *)v17)
  {
    ++v18;
    v17 = (__int128 *)((char *)v17 + 1);
    if (!--v19)
      return 1;
  }
  v20 = v1 - 1;
  v21 = &SipRequest::kMethodBye;
  do
  {
    v23 = *a1++;
    v22 = v23;
    v25 = *(unsigned __int8 *)v21;
    v21 = (__int128 *)((char *)v21 + 1);
    v24 = v25;
    v26 = v20-- != 0;
    v27 = v26;
    v28 = v22 == v24;
    v16 = v22 == v24;
  }
  while (v28 && (v27 & 1) != 0);
  return v16;
}

uint64_t messageIdForMethod(unsigned __int8 *a1)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  __int128 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t result;
  const char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  const char *v12;
  unsigned __int8 *v13;
  const void *v14;
  const void *v15;
  __int128 *v16;
  unsigned __int8 *v17;
  const char *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  const char *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  const char *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  const char *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  const char *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  const char *v33;
  unsigned __int8 *i;
  const char *v35;
  unsigned __int8 *v36;
  uint64_t v37;

  v2 = a1[23];
  v3 = *((_QWORD *)a1 + 1);
  if ((v2 & 0x80u) == 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  switch(v4)
  {
    case 3:
LABEL_5:
      if ((v2 & 0x80) != 0)
      {
        v14 = *(const void **)a1;
        if (memcmp(*(const void **)a1, &SipRequest::kMethodAck, v3))
        {
          if (memcmp(v14, &SipRequest::kMethodBye, v3))
            goto LABEL_95;
          return 6;
        }
      }
      else if ((_DWORD)v2)
      {
        v5 = &SipRequest::kMethodAck;
        v6 = a1;
        v7 = v2;
        result = 5;
        while (*v6 == *(unsigned __int8 *)v5)
        {
          ++v6;
          v5 = (__int128 *)((char *)v5 + 1);
          if (!--v7)
            return result;
        }
        switch(v4)
        {
          case 3:
            v16 = &SipRequest::kMethodBye;
            v17 = a1;
            result = 6;
            break;
          case 5:
            goto LABEL_103;
          case 6:
            goto LABEL_74;
          case 7:
            goto LABEL_87;
          case 9:
            goto LABEL_63;
          default:
            goto LABEL_95;
        }
        do
        {
          if (*v17 != *(unsigned __int8 *)v16)
            goto LABEL_95;
          ++v17;
          v16 = (__int128 *)((char *)v16 + 1);
          --v2;
        }
        while (v2);
        return result;
      }
      return 5;
    case 5:
LABEL_43:
      if ((v2 & 0x80) != 0)
      {
        v15 = *(const void **)a1;
        if (memcmp(*(const void **)a1, "PRACK", v3))
          goto LABEL_50;
      }
      else if ((_DWORD)v2)
      {
        v18 = "PRACK";
        v19 = a1;
        v20 = v2;
        result = 3;
        do
        {
          if (*v19 != *(unsigned __int8 *)v18)
          {
            switch(v4)
            {
              case 3:
                goto LABEL_5;
              case 5:
                goto LABEL_103;
              case 6:
                goto LABEL_54;
              case 7:
                goto LABEL_87;
              case 9:
                goto LABEL_63;
              default:
                goto LABEL_95;
            }
          }
          ++v19;
          ++v18;
          --v20;
        }
        while (v20);
        return result;
      }
      return 3;
    case 6:
      if ((v2 & 0x80) != 0)
      {
        v15 = *(const void **)a1;
        if (memcmp(*(const void **)a1, "INVITE", v3))
        {
LABEL_28:
          if (memcmp(v15, "CANCEL", v3))
            goto LABEL_29;
          return 4;
        }
      }
      else if (a1[23])
      {
        v9 = "INVITE";
        v10 = a1;
        v11 = a1[23];
        result = 2;
        while (*v10 == *(unsigned __int8 *)v9)
        {
          ++v10;
          ++v9;
          if (!--v11)
            return result;
        }
        switch(v4)
        {
          case 3:
            goto LABEL_5;
          case 5:
            goto LABEL_43;
          case 6:
LABEL_54:
            if ((v2 & 0x80) != 0)
            {
              v15 = *(const void **)a1;
              goto LABEL_28;
            }
            v21 = "CANCEL";
            v22 = a1;
            v23 = v2;
            result = 4;
            do
            {
              if (*v22 != *(unsigned __int8 *)v21)
              {
                switch(v4)
                {
                  case 3:
                    goto LABEL_5;
                  case 5:
                    goto LABEL_103;
                  case 6:
                    goto LABEL_74;
                  case 7:
                    goto LABEL_87;
                  case 9:
                    goto LABEL_63;
                  default:
                    goto LABEL_95;
                }
              }
              ++v22;
              ++v21;
              --v23;
            }
            while (v23);
            break;
          case 7:
            goto LABEL_87;
          case 9:
            goto LABEL_63;
          default:
            goto LABEL_95;
        }
        return result;
      }
      return 2;
    case 7:
      goto LABEL_87;
    case 8:
      if ((v2 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a1, "REGISTER", v3))
          goto LABEL_95;
        return 1;
      }
      if (!a1[23])
        return 1;
      v12 = "REGISTER";
      v13 = a1;
      result = 1;
      do
      {
        if (*v13 != *(unsigned __int8 *)v12)
          goto LABEL_95;
        ++v13;
        ++v12;
        --v2;
      }
      while (v2);
      return result;
    case 9:
LABEL_63:
      if ((v2 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a1, "SUBSCRIBE", v3))
          goto LABEL_95;
      }
      else if ((_DWORD)v2)
      {
        v24 = "SUBSCRIBE";
        v25 = a1;
        v26 = v2;
        while (*v25 == *(unsigned __int8 *)v24)
        {
          ++v25;
          ++v24;
          if (!--v26)
            return 7;
        }
        if (v4 != 5)
        {
          if (v4 == 7)
          {
LABEL_87:
            if ((v2 & 0x80) == 0)
            {
              if ((_DWORD)v2)
              {
                v33 = "MESSAGE";
                for (i = a1; *i == *(unsigned __int8 *)v33; ++i)
                {
                  ++v33;
                  if (!--v2)
                    return 11;
                }
                goto LABEL_95;
              }
              return 11;
            }
            v15 = *(const void **)a1;
LABEL_94:
            if (!memcmp(v15, "MESSAGE", v3))
              return 11;
LABEL_95:
            if (std::operator==[abi:ne180100]<std::allocator<char>>(a1, "INFO"))
              return 12;
            if (std::operator==[abi:ne180100]<std::allocator<char>>(a1, "PUBLISH"))
              return 13;
            if (std::operator==[abi:ne180100]<std::allocator<char>>(a1, "OPTIONS"))
              return 14;
            return 0;
          }
          if (v4 != 6)
            goto LABEL_95;
LABEL_74:
          if ((v2 & 0x80) != 0)
          {
            v15 = *(const void **)a1;
LABEL_29:
            if (!memcmp(v15, "NOTIFY", v3))
              return 8;
            if (!memcmp(v15, "UPDATE", v3))
              return 9;
            if (v3 != 5)
            {
              if (v3 != 7)
                goto LABEL_95;
              goto LABEL_94;
            }
            goto LABEL_50;
          }
          v27 = "NOTIFY";
          v28 = a1;
          v29 = v2;
          result = 8;
          while (*v28 == *(unsigned __int8 *)v27)
          {
            ++v28;
            ++v27;
            if (!--v29)
              return result;
          }
          v30 = "UPDATE";
          v31 = a1;
          v32 = v2;
          result = 9;
          while (*v31 == *(unsigned __int8 *)v30)
          {
            ++v31;
            ++v30;
            if (!--v32)
              return result;
          }
          if (v4 != 5)
          {
LABEL_86:
            if (v4 != 7)
              goto LABEL_95;
            goto LABEL_87;
          }
        }
LABEL_103:
        if ((v2 & 0x80) == 0)
        {
          v35 = "REFER";
          v36 = a1;
          v37 = v2;
          result = 10;
          while (*v36 == *(unsigned __int8 *)v35)
          {
            ++v36;
            ++v35;
            if (!--v37)
              return result;
          }
          goto LABEL_86;
        }
        v15 = *(const void **)a1;
LABEL_50:
        if (!memcmp(v15, "REFER", v3))
          return 10;
        goto LABEL_95;
      }
      return 7;
    default:
      goto LABEL_95;
  }
}

uint64_t *AriSdk::Tlv<unsigned char>::operator=<unsigned long,void>(uint64_t *a1, _QWORD *a2)
{
  _BYTE *v4;
  uint64_t v5;

  v4 = (_BYTE *)operator new();
  *v4 = *a2;
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x1C3B87100](v5, 0x1000C4077774924);
  return a1;
}

char **AriSdk::TlvArray<unsigned char,129ul>::operator=(char **a1, char **a2)
{
  char *v4;
  char *v5;
  const char *v7;
  void *p_p;
  void *__p;
  char v11;

  v4 = *a2;
  v5 = a2[1];
  if ((unint64_t)(v5 - v4) < 0x82)
  {
    if (a1 != a2)
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, v4, v5, v5 - v4);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/ee8c6483-5bc6-11ef-a57d-0a3c3d30a6d7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", v5);
    if (v11 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%d) max(%d)", v7, p_p, 349, a1, a2[1] - *a2, 129);
    if (v11 < 0)
      operator delete(__p);
  }
  return a1;
}

